{
    "id": {
        "0": "CWC23QUALIF",
        "1": "LUCKYSEVEN",
        "2": "CLEARDAY",
        "3": "DOUBLERENT",
        "4": "TAXSAVING",
        "5": "TOP10",
        "6": "BIRYANI",
        "7": "LUDO",
        "8": "PRACLIST",
        "9": "DETSCORE",
        "10": "ERROR404",
        "11": "OFFBY1",
        "12": "DONDRIVE",
        "13": "KITCHENTIME",
        "14": "IPLTRSH",
        "15": "AUDIBLE",
        "16": "TIMELY",
        "17": "PUZHUNT",
        "18": "BNE_APT",
        "19": "TALLER",
        "20": "REACHTARGET",
        "21": "BESTOFTWO",
        "22": "RIP2000",
        "23": "MINHEIGHT",
        "24": "CANDIVIDE",
        "25": "CHEFONDATE",
        "26": "PAR2",
        "27": "PRIZEPOOL",
        "28": "CNTWRD",
        "29": "BTRYHLTH",
        "30": "JERRYCHASE",
        "31": "AGEING",
        "32": "RIGHTTHERE",
        "33": "SNDMAX",
        "34": "BULLBEAR",
        "35": "FOURTICKETS",
        "36": "CHAIRS_",
        "37": "DNATION",
        "38": "SUMM",
        "39": "SUBSCRIBE",
        "40": "MVR",
        "41": "WAITTIME",
        "42": "OCTATHON",
        "43": "ONEMORE",
        "44": "MANAPTS",
        "45": "RAINFALL1",
        "46": "AUCTION",
        "47": "FINE",
        "48": "CHESSTIME",
        "49": "FAIRPASS",
        "50": "READPAGES",
        "51": "COUGAME",
        "52": "AIRINDEX",
        "53": "FEVER",
        "54": "SLEEP",
        "55": "M1ENROL",
        "56": "SEMCOURSES",
        "57": "WATERREQ",
        "58": "LTIME",
        "59": "INVESTMENT",
        "60": "POPULATION",
        "61": "PARTY2",
        "62": "COMPLEXITY",
        "63": "INTRDSGN",
        "64": "CARTRIP",
        "65": "TABLETS",
        "66": "SIXFRIENDS",
        "67": "CWIREFRAME",
        "68": "MINCOINSREQ",
        "69": "KITCHENSPICE",
        "70": "CS2023_GIFT",
        "71": "REACH_HOME",
        "72": "DOREWARD",
        "73": "TFPAPER",
        "74": "CABS",
        "75": "DISCNT",
        "76": "HEIGHTRATION",
        "77": "INSTAGRAM",
        "78": "VOLCONTROL",
        "79": "HS08TEST",
        "80": "HOTCOLD",
        "81": "PROINC",
        "82": "FBC",
        "83": "PARLIAMENT",
        "84": "FLOW002",
        "85": "MANIPULATE",
        "86": "CMASKS",
        "87": "SPECIALITY",
        "88": "MAXIMUMSUBS",
        "89": "TVDISC",
        "90": "BROKENPHONE",
        "91": "TYRE",
        "92": "FLOW006",
        "93": "BUDGET_",
        "94": "CREDSCORE",
        "95": "FLOW004",
        "96": "INTEST",
        "97": "PRACTICEPERF",
        "98": "ASSIGNMNT",
        "99": "COURSEREG",
        "100": "INSURANCE",
        "101": "AIRLINES",
        "102": "INCRIQ",
        "103": "BATTERYLOW",
        "104": "BOBBANK",
        "105": "MANGOES",
        "106": "MONOPOLY",
        "107": "WATERFLOW",
        "108": "F1RULE",
        "109": "DOMINANT",
        "110": "SONGS",
        "111": "CHEFCHOCO",
        "112": "NETFLIX",
        "113": "CGYM",
        "114": "AVGPROBLEM",
        "115": "SUBSCRIBE_",
        "116": "JASSIGNMENTS",
        "117": "EXAMCHEF",
        "118": "OFFICE",
        "119": "AMR15A",
        "120": "CREDCOINS",
        "121": "WATERFILLING",
        "122": "SALESEASON",
        "123": "MINPIZZA",
        "124": "CHEFGAMES",
        "125": "EXPERT",
        "126": "HELIUM3",
        "127": "SUGARCANE",
        "128": "NOTEBOOK",
        "129": "CHEFCAND",
        "130": "TRAVELFAST",
        "131": "TRUESCORE",
        "132": "THREETOPICS",
        "133": "MONOPOLY2",
        "134": "TODOLIST",
        "135": "ACTEMP",
        "136": "NEARESTEXIT",
        "137": "FLOW007",
        "138": "SST",
        "139": "NIBBLE",
        "140": "QUALIFY",
        "141": "ELECTN",
        "142": "MINCARS",
        "143": "CHEFSCORE",
        "144": "JENGA",
        "145": "SEATNUMBER",
        "146": "DISCUS",
        "147": "MAXTASTE",
        "148": "MOVIE2X",
        "149": "POLTHIEF",
        "150": "FLIPCARDS",
        "151": "BATH",
        "152": "FINDSHOES",
        "153": "FCTRL2",
        "154": "TRANSFORM",
        "155": "BULLET",
        "156": "C_RATING",
        "157": "DNASTRAND",
        "158": "CHEFBOTTLE",
        "159": "CANDYDIST",
        "160": "FSQRT",
        "161": "LASTLEVELS",
        "162": "BLACKJACK",
        "163": "FILLCANDIES",
        "164": "XJUMP",
        "165": "CHESSDIST",
        "166": "VALENTINE",
        "167": "MYSERVE",
        "168": "WTRMIXING",
        "169": "WGHTS",
        "170": "CHEFAPPS",
        "171": "CHEFEREN",
        "172": "MINCOINS",
        "173": "SPCP2",
        "174": "SELFDEF",
        "175": "CRICUP",
        "176": "FLOORS",
        "177": "SPEEDTEST",
        "178": "DECINC",
        "179": "AORB",
        "180": "FLOW017",
        "181": "PASSORFAIL",
        "182": "CYCLICQD",
        "183": "POLYBAGS",
        "184": "FIZZBUZZ2303",
        "185": "BUILDINGRACE",
        "186": "CHEFRACES",
        "187": "MOZZ",
        "188": "PRESENTS",
        "189": "FLOW018",
        "190": "CHEAT",
        "191": "T20MCH",
        "192": "CHOPRT",
        "193": "CHN15A",
        "194": "REACHFAST",
        "195": "SINGLEUSE",
        "196": "SALE",
        "197": "MINFLIPS",
        "198": "BIN_BAT",
        "199": "DICEGAME2",
        "200": "TLG",
        "201": "DPOLY",
        "202": "RECENTCONT",
        "203": "PRB01",
        "204": "WATERCOOLER2",
        "205": "EZSPEAK",
        "206": "ATM2",
        "207": "EXAMTIME",
        "208": "ADJSUMPAR",
        "209": "CNDY",
        "210": "DIET",
        "211": "BREAKSTICK",
        "212": "ENCMSG",
        "213": "CANDY123",
        "214": "ELECTIONS",
        "215": "CHEFSTLT",
        "216": "REMOVECARDS",
        "217": "EVENTUAL",
        "218": "ZEROSTRING",
        "219": "AIRLINE",
        "220": "ODDPAIRS",
        "221": "CHEFSTUD",
        "222": "ENDSORTED",
        "223": "PRIMEREVERSE",
        "224": "PIZZA_BURGER",
        "225": "MASKPOL",
        "226": "COUNTP",
        "227": "HEADBOB",
        "228": "PSEUDOSORT",
        "229": "PRIME1",
        "230": "EQUALIZEAB",
        "231": "THREEFR",
        "232": "QUEENATTACK",
        "233": "COVID_19",
        "234": "DIGSMPAR",
        "235": "MAGICHF",
        "236": "FARAWAY",
        "237": "GRPASSN",
        "238": "JOHNY",
        "239": "WATSCORE",
        "240": "CHEFSTR1",
        "241": "QTOO_2523",
        "242": "REMOVEBAD",
        "243": "MAKEMONEY",
        "244": "MSNSADM1",
        "245": "ABSTRING",
        "246": "CHEGLOVE",
        "247": "LAPTOPREC",
        "248": "PLAYSTR",
        "249": "EUREKA",
        "250": "CHEFSTEP",
        "251": "SRTARR",
        "252": "VOTERS",
        "253": "ALTSTR",
        "254": "TALAZY",
        "255": "POOK",
        "256": "CHEFCBA",
        "257": "STICKBREAK",
        "258": "KOL15A",
        "259": "CRDGAME",
        "260": "PETSTORE",
        "261": "MATPAN",
        "262": "VALIDMIN",
        "263": "RPD",
        "264": "DATATYPE",
        "265": "CONFLIP",
        "266": "CIELAB",
        "267": "AVGOF3",
        "268": "MAX_BIN",
        "269": "KNIGHT2",
        "270": "RECTANGL",
        "271": "DWNLD",
        "272": "POTATOES",
        "273": "MINMXOR",
        "274": "XLSQUARE",
        "275": "MAKEMULTIPLE",
        "276": "BALREV",
        "277": "CLIPLX",
        "278": "HOSTELROOM",
        "279": "CARDSWIPE",
        "280": "MOVIEWKN",
        "281": "GROUPS",
        "282": "POSPROD",
        "283": "MAXCOUNT",
        "284": "PERFCONT",
        "285": "DIVBYI",
        "286": "CHEFNWRK",
        "287": "BURGERS2",
        "288": "ANKTRAIN",
        "289": "BUY1GET1",
        "290": "CHEFZOT",
        "291": "ARRAYRET",
        "292": "PERMUTATION",
        "293": "ANUUND",
        "294": "TRACE",
        "295": "AVGPERM",
        "296": "HOTEL",
        "297": "MTYFRI",
        "298": "ARRHALVES",
        "299": "CHFHEIST",
        "300": "PMA",
        "301": "STRAME",
        "302": "REMELEM",
        "303": "COLOUR",
        "304": "PLAYFIT",
        "305": "EQUALITY",
        "306": "DECREM",
        "307": "PLPROCESS",
        "308": "DIRECTI",
        "309": "PIPSQUIK",
        "310": "UNQEQ",
        "311": "MAXAGRY",
        "312": "PERMXORITY",
        "313": "CHEFDINE",
        "314": "HTMLTAGS",
        "315": "CHCOINSG",
        "316": "MAKEARRAYODD",
        "317": "CUTPIZ",
        "318": "FLAGS",
        "319": "SMOKE",
        "320": "SOD3",
        "321": "TRIANGCL",
        "322": "CHEFADV",
        "323": "MKGPLNKS",
        "324": "APPROX2",
        "325": "MGCSET",
        "326": "CHDOGS",
        "327": "XOR_ORDER",
        "328": "CHEFFED",
        "329": "VEGETA",
        "330": "ONOZ",
        "331": "ALTERNATEDIV",
        "332": "JOGGING",
        "333": "CORTSENT",
        "334": "CHEFODD",
        "335": "MAKEPAL",
        "336": "IRSTXOR",
        "337": "CAOS1",
        "338": "ANTIPALINDR",
        "339": "CO92SUBW",
        "340": "HHAL",
        "341": "N1VALUES",
        "342": "GCDSUBARRAYS",
        "343": "TOTCRT",
        "344": "ODDSUM",
        "345": "CHFINVNT",
        "346": "DONUTS",
        "347": "XOR2",
        "348": "BENCHP",
        "349": "DIFSTR",
        "350": "MAXSUBARR",
        "351": "CHEARMY",
        "352": "SURVIVE",
        "353": "GCDPRF",
        "354": "MAXEDGES",
        "355": "IOPC17C",
        "356": "CONSTRRAY",
        "357": "ZEBRA",
        "358": "UCL",
        "359": "BITTUP",
        "360": "SMALLXOR",
        "361": "CONCATSORT",
        "362": "CHARGES",
        "363": "CHEFINSQ",
        "364": "RANGEASSIGN",
        "365": "PERMPAL",
        "366": "FIND_X",
        "367": "FREQARRRET",
        "368": "ORMATRIX",
        "369": "FIRESC",
        "370": "THREENUMBERS",
        "371": "CHEFCAR",
        "372": "VOWMTRX",
        "373": "FENCE",
        "374": "BTAR",
        "375": "MAGNETSORT",
        "376": "S07E09",
        "377": "SEGDIV",
        "378": "PEPPERON",
        "379": "ICL1901",
        "380": "JOKRBTMN",
        "381": "KAVGMAT",
        "382": "EANDO",
        "383": "ARRT",
        "384": "CLFIBD",
        "385": "OROFAND",
        "386": "GOODPERM",
        "387": "ADJXOR2",
        "388": "MINVOTE",
        "389": "BLIMP",
        "390": "NOKIA",
        "391": "AFLIP",
        "392": "MINABS",
        "393": "BINMIS",
        "394": "FINDABC",
        "395": "XORPROD",
        "396": "CHEFRRUN",
        "397": "EQLIS",
        "398": "DIVREC",
        "399": "RRATING",
        "400": "COLGLF4",
        "401": "PYTHAGORAS",
        "402": "MINDSUM",
        "403": "MATXOR",
        "404": "BININV",
        "405": "TRIPLETMIN",
        "406": "SWAPNUM31",
        "407": "ATAT",
        "408": "MAXSUMPERM",
        "409": "EQUALHAMMING",
        "410": "PERMEX",
        "411": "ALT",
        "412": "DUMBLEDORE",
        "413": "ARRFILL",
        "414": "JS",
        "415": "NUMCOMP1",
        "416": "CHEFSHIP",
        "417": "MXFACS",
        "418": "ELWINTER",
        "419": "REMSUBARR",
        "420": "ALTSUFF",
        "421": "ROPASCI",
        "422": "PALIXOR",
        "423": "DISTK",
        "424": "PRIMEFACDIV",
        "425": "QNUMBER",
        "426": "MAXANDOR",
        "427": "NOSEQ",
        "428": "GOLMINE",
        "429": "CONSADD",
        "430": "KPAL",
        "431": "SYMARRSWAP",
        "432": "MOUNTAIN",
        "433": "NOPALINDROME",
        "434": "MAXREMOV",
        "435": "SPCP6",
        "436": "PARPER",
        "437": "AGCY",
        "438": "BURGER",
        "439": "SUMARRAY",
        "440": "EQUIVALENT",
        "441": "SEGTHREE",
        "442": "FPE",
        "443": "RECHEND",
        "444": "TRPTSTIC",
        "445": "LCMMANIA",
        "446": "SUBARRAYXOR",
        "447": "MAJIK",
        "448": "TRAVELLING",
        "449": "MAXIMALEXP",
        "450": "INTARR",
        "451": "MAXVAC",
        "452": "SQRTCBRT",
        "453": "LEXILARGEST",
        "454": "AWESUM_OR",
        "455": "MUSROD",
        "456": "SUBSBIN",
        "457": "CHEFSHOPPING",
        "458": "DIVBY3",
        "459": "SEQGOODNESS",
        "460": "MINIMUMOP",
        "461": "CCD",
        "462": "EXPVALUE",
        "463": "CENS20A",
        "464": "SSO",
        "465": "DLTNODE",
        "466": "MEXYARR",
        "467": "VSTRING",
        "468": "PYRAMIDMOVES",
        "469": "CHINSM",
        "470": "PARPERM",
        "471": "ICM2003",
        "472": "CIRMERGE",
        "473": "ANUMLA",
        "474": "STROPERS",
        "475": "DIANE",
        "476": "COPAR",
        "477": "EXISTENCEOFX",
        "478": "DIST_VALS",
        "479": "TSHIRTS",
        "480": "ANTSCHEF",
        "481": "ALIKE_THEM",
        "482": "INTREP",
        "483": "MAX1S",
        "484": "SUMOFCUBE",
        "485": "KSUM",
        "486": "ABCSTR",
        "487": "ASHIGIFT",
        "488": "LONGESTARRAY",
        "489": "ASH57",
        "490": "CS2023_404",
        "491": "ALTDIA",
        "492": "SPOOKYSEQ",
        "493": "SUMXOR2",
        "494": "CHESUB",
        "495": "CHEFFFUNC",
        "496": "MERGEBS",
        "497": "REDGREEN",
        "498": "MAKEPAL3",
        "499": "SWAPGAME",
        "500": "ABROADS",
        "501": "SIMPLEARRAY",
        "502": "CHEFQUE",
        "503": "CANDIES3",
        "504": "SPLITMIN",
        "505": "KEEPOUT",
        "506": "SPTREE",
        "507": "TWOAVG",
        "508": "RIFFLES",
        "509": "CHANDWEIGHT",
        "510": "CLASSES",
        "511": "TDISTS"
    },
    "name": {
        "0": "b'Cricket World Cup Qualifier\\nThe cricket World Cup has started in Chefland. There are many teams participating in the group stage matches. Any team that scores\\n12 or more points in the group stage matches qualifies for the next stage.\\nYou know the score that a particular team has scored in the group stage matches. Determine if the team has qualified for the next stage or not.\\nInput Format\\nThe first and only line of input consists of an integer\\nX denoting the total points scored by the given team in the group stage matches.\\nOutput Format\\nOutput Yes, if the team has qualified for the next stage, and No otherwise.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa420\\nSample 1:\\nInput\\nOutput\\n3\\nNo\\nExplanation:\\nThe team has not scored\\n\\xe2\\x89\\xa512 points. Hence it does not qualify.\\nSample 2:\\nInput\\nOutput\\n17\\nYes\\nExplanation:\\nThe team has scored\\n\\xe2\\x89\\xa512 points. Hence it does qualify.'",
        "1": "b'Lucky Seven\\nChef considers the number\\n7 lucky. As a result, he believes that the\\n7-th letter he sees on a day is his lucky letter of the day.\\nYou are given a string\\nS of length\\n10, denoting the first\\n10 letters Chef saw today.\\nWhat is Chef\\'s lucky letter?\\nInput Format\\nThe only line of input contains a string\\nS, of length\\n10.\\nOutput Format\\nPrint a single character: Chef\\'s lucky letter .\\nConstraints\\nS has a length of\\n10\\nS contains only lowercase Latin letters (i.e, the characters \\'a\\' to \\'z\\')\\nSample 1:\\nInput\\nOutput\\nproceeding\\nd\\nExplanation:\\nThe\\n7-th character of\\n\"proceeding\" is \\'d\\', and hence that is Chef\\'s lucky letter.\\nSample 2:\\nInput\\nOutput\\noutofsight\\ni\\nExplanation:\\nThe\\n7-th character of\\n\"outofsight\" is \\'i\\', and hence that is Chef\\'s lucky letter.'",
        "2": "b'Clear Day\\nChef classifies a day to be either rainy, cloudy, or clear.\\nIn a particular week, Chef finds\\nX days to be rainy and\\nY days to be cloudy.\\nFind the number of clear days in the week.\\nInput Format\\nThe first and only line of input will contain two space-separated integers\\nX and\\nY, denoting the number of rainy and cloudy days in the week.\\nOutput Format\\nOutput the number of clear days in the week.\\nConstraints\\n0\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa47\\n0\\xe2\\x89\\xa4X+Y\\xe2\\x89\\xa47\\nSample 1:\\nInput\\nOutput\\n2 3\\n2\\nExplanation:\\nThere are\\n7 days in a week. If there are\\n2 rainy days and\\n3 cloudy days, then the remaining\\n7\\xe2\\x88\\x922\\xe2\\x88\\x923=2 days are clear.\\nSample 2:\\nInput\\nOutput\\n3 4\\n0\\nExplanation:\\nIf there are\\n3 rainy days and\\n4 cloudy days, then the remaining\\n7\\xe2\\x88\\x923\\xe2\\x88\\x924=0 days are clear.'",
        "3": "b\"Double Rent\\nChefina decided to move into Chef's apartment.\\nChef was initially paying a rent of\\nX rupees. Since Chefina is moving in, the owner decided to double the rent.\\nFind the final rent Chef needs to pay.\\nInput Format\\nThe input consists of a single integer\\nX, denoting the rent Chef was initially paying.\\nOutput Format\\nOutput on a new line, the final rent Chef needs to pay.\\nConstraints\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n2\\n4\\nExplanation:\\nChef was initially paying\\n2 rupees. After Chefina moves in, he needs to pay\\n2\\xe2\\x8b\\x852=4 rupees.\\nSample 2:\\nInput\\nOutput\\n3\\n6\\nExplanation:\\nChef was initially paying\\n3 rupees. After Chefina moves in, he needs to pay\\n2\\xe2\\x8b\\x853=6 rupees.\\nSample 3:\\nInput\\nOutput\\n10\\n20\\nExplanation:\\nChef was initially paying\\n10 rupees. After Chefina moves in, he needs to pay\\n2\\xe2\\x8b\\x8510=20 rupees.\"",
        "4": "b\"Saving Taxes\\nIn Chefland, everyone who earns strictly more than\\nY rupees per year, has to pay a tax to Chef. Chef has allowed a special scheme where you can invest any amount of money and claim exemption for it.\\nYou have earned\\nX\\n(X>Y) rupees this year. Find the minimum amount of money you have to invest so that you don't have to pay taxes this year.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line of input consisting of two space separated integers\\nX and\\nY denoting the amount you earned and the amount above which you will have to pay taxes.\\nOutput Format\\nFor each test case, output a single integer, denoting the minimum amount you need to invest.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4Y<X\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n4 2\\n8 7\\n5 1\\n2 1\\n2\\n1\\n4\\n1\\nExplanation:\\nTest case\\n1: The amount above which you will have to pay taxes is\\n2. Since you earn\\n4 rupees, you need to invest at least\\n2 rupees. After investing\\n2 rupees, you will remain with an effective income\\n4\\xe2\\x88\\x922=2 rupees which will not be taxed.\\nTest case\\n2: The amount above which you will have to pay taxes is\\n7. Since you earn\\n8 rupees, you need to invest at least\\n1 rupees.\\nTest case\\n3: The amount above which you will have to pay taxes is\\n1. Since you earn\\n5 rupees, you need to invest at least\\n4 rupees.\\nTest case\\n4: The amount above which you will have to pay taxes is\\n1. Since you earn\\n2 rupees, you need to invest at least\\n1 rupees.\"",
        "5": "b\"Masterchef finals\\nChef has been working hard to compete in MasterChef.\\nHe is ranked\\nX out of all contestants. However, only\\n10 contestants would be selected for the finals.\\nCheck whether Chef made it to the top\\n10 or not?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of one integers\\nX \\xe2\\x80\\x94 the current rank of Chef.\\nOutput Format\\nFor each test case, output on a new line, YES, if Chef made it to the top\\n10 and NO otherwise.\\nEach character of the output may be printed in either uppercase or lowercase. That is, the strings NO, no, nO, and No will be treated as equivalent.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n15\\n10\\n1\\n50\\nNO\\nYES\\nYES\\nNO\\nExplanation:\\nTest case\\n1: Chef's rank is\\n15 which is greater than\\n10. Thus, Chef did not make it to the top\\n10.\\nTest case\\n2: Chef's rank is\\n10 which is equal to\\n10. Thus, Chef made it to the top\\n10.\\nTest case\\n3: Chef made it to the top\\n10, as his rank is\\n1.\\nTest case\\n4: Chef did not make it to the top\\n10 as his rank is\\n50.\"",
        "6": "b\"Biryani classes\\nAccording to a recent survey, Biryani is the most ordered food. Chef wants to learn how to make world-class Biryani from a MasterChef. Chef will be required to attend the MasterChef's classes for\\nX weeks, and the cost of classes per week is\\nY coins. What is the total amount of money that Chef will have to pay?\\nInput Format\\nThe first line of input will contain an integer\\nT \\xe2\\x80\\x94 the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains two space-separated integers\\nX and\\nY, as described in the problem statement.\\nOutput Format\\nFor each test case, output on a new line the total amount of money that Chef will have to pay.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n1 10\\n1 15\\n2 10\\n2 15\\n10\\n15\\n20\\n30\\nExplanation:\\nTest case\\n1: Chef will be required to attend the MasterChef's classes for\\n1 week and the cost of classes per week is\\n10 coins. Hence, Chef will have to pay\\n10 coins in total.\\nTest case\\n2: Chef will be required to attend the MasterChef's classes for\\n1 week and the cost of classes per week is\\n15 coins. Hence, Chef will have to pay\\n15 coins in total.\\nTest case\\n3: Chef will be required to attend the MasterChef's classes for\\n2 weeks and the cost of classes per week is\\n10 coins. Hence, Chef will have to pay\\n20 coins in total.\\nTest case\\n4: Chef will be required to attend the MasterChef's classes for\\n2 weeks and the cost of classes per week is\\n15 coins. Hence, Chef will have to pay\\n30 coins in total.\"",
        "7": "b'Chef Plays Ludo\\nChef is playing Ludo. According to the rules of Ludo, a player can enter a new token into the play only when he rolls a\\n6 on the die.\\nIn the current turn, Chef rolled the number\\nX on the die. Determine if Chef can enter a new token into the play in the current turn or not.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains one integer\\nX \\xe2\\x80\\x94 the number rolled by the Chef on the die.\\nOutput Format\\nFor each test case, output YES if the Chef can enter a new token in the game. Otherwise, output NO.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa46\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa46\\nSample 1:\\nInput\\nOutput\\n3\\n1\\n6\\n3\\nNO\\nYES\\nNO\\nExplanation:\\nTest Case 1: Since Chef did not roll a\\n6, he can not enter a new token in the play.\\nTest Case 2: Since Chef rolled a\\n6, he can enter a new token in the play.'",
        "8": "b\"How many unattempted problems\\nCodeChef recently revamped its practice page to make it easier for users to identify the next problems they should solve by introducing some new features:\\nRecent Contest Problems - contains only problems from the last 2 contests\\nSeparate Un-Attempted, Attempted, and All tabs\\nProblem Difficulty Rating - the Recommended dropdown menu has various difficulty ranges so that you can attempt the problems most suited to your experience\\nPopular Topics and Tags\\nOur Chef is currently practicing on CodeChef and is a beginner. The count of \\xe2\\x80\\x98All Problems\\xe2\\x80\\x99 in the Beginner section is\\nX. Our Chef has already \\xe2\\x80\\x98Attempted\\xe2\\x80\\x99\\nY problems among them. How many problems are yet \\xe2\\x80\\x98Un-attempted\\xe2\\x80\\x99?\\nInput Format\\nThe first and only line of input contains two space-separated integers\\nX and\\nY \\xe2\\x80\\x94 the count of 'All problems' in the Beginner's section and the count of Chef's 'Attempted' problems, respectively.\\nOutput Format\\nOutput a single integer in a single line \\xe2\\x80\\x94 the number of problems that are yet 'Un-attempted'\\nConstraints\\n1\\xe2\\x89\\xa4Y\\xe2\\x89\\xa4X\\xe2\\x89\\xa41000\\nSubtasks\\nSubtask 1 (100 points):\\nOriginal constraints.\\nSample 1:\\nInput\\nOutput\\n10 4\\n6\\nSample 2:\\nInput\\nOutput\\n10 10\\n0\\nSample 3:\\nInput\\nOutput\\n1000 990\\n10\\nSample 4:\\nInput\\nOutput\\n500 1\\n499\\nExplanation:\\nTest case\\n1: There are\\n10 problems in total in the Beginner's section, out of which\\n4 have been attempted. Hence, there are\\n6 Un-attempted problems.\\nTest case\\n2: There are\\n10 problems in total in the Beginner's section, out of which all have been attempted. Hence, there are\\n0 Un-attempted problems.\\nTest case\\n3: There are\\n1000 problems in total in the Beginner's section, out of which\\n990 have been attempted. Hence, there are\\n10 Un-attempted problems.\\nTest case\\n4: There are\\n500 problems in total in the Beginner's section, out of which only\\n1 has been attempted. Hence, there are\\n499 Un-attempted problems.\"",
        "9": "b\"Determine the Score\\nChef appeared for a placement test.\\nThere is a problem worth\\nX points. Chef finds out that the problem has exactly\\n10 test cases. It is known that each test case is worth the same number of points.\\nChef passes\\nN test cases among them. Determine the score Chef will get.\\nNOTE: See sample explanation for more clarity.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains of a single line of input, two integers\\nX and\\nN, the total points for the problem and the number of test cases which pass for Chef's solution.\\nOutput Format\\nFor each test case, output the points scored by Chef.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n10\\xe2\\x89\\xa4X\\xe2\\x89\\xa4200\\n0\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\nX is a multiple of\\n10.\\nSample 1:\\nInput\\nOutput\\n4\\n10 3\\n100 10\\n130 4\\n70 0\\n3\\n100\\n52\\n0\\nExplanation:\\nTest Case\\n1: The problem is worth\\n10 points and since there are\\n10 test cases, each test case is worth\\n1 point. Since Chef passes\\n3 test cases, his score will be\\n1\\xe2\\x8b\\x853=3 points.\\nTest Case\\n2: The problem is worth\\n100 points and since there are\\n10 test cases, each test case is worth\\n10 points. Since Chef passes all the\\n10 test cases, his score will be\\n10\\xe2\\x8b\\x8510=100 points.\\nTest Case\\n3: The problem is worth\\n130 points and since there are\\n10 test cases, each test case is worth\\n13 points. Since Chef passes\\n4 test cases, his score will be\\n13\\xe2\\x8b\\x854=52 points.\\nTest Case\\n4: The problem is worth\\n70 points and since there are\\n10 test cases, each test case is worth\\n7 points. Since Chef passes\\n0 test cases, his score will be\\n7\\xe2\\x8b\\x850=0 points.\"",
        "10": "b\"404 Not Found\\nChef's website has a specific response mechanism based on the HTTP status code received:\\nIf the response code is\\n404, the website will return NOT FOUND.\\nFor any other response code different from\\n404, the website will return FOUND.\\nGiven the response code as\\nX, determine the website response.\\nInput Format\\nThe first and only line of input contains a response code\\nX.\\nOutput Format\\nOutput on a new line NOT FOUND, if the response code is\\n404. Otherwise print FOUND.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings FOUND, fouND, FouND, and found will all be treated as identical).\\nConstraints\\n100\\xe2\\x89\\xa4X\\xe2\\x89\\xa4999\\nSample 1:\\nInput\\nOutput\\n200\\nFOUND\\nExplanation:\\nSince the response code is not\\n404, website returns FOUND.\\nSample 2:\\nInput\\nOutput\\n404\\nNOT FOUND\\nExplanation:\\nSince the response code is\\n404, website returns NOT FOUND.\\nSample 3:\\nInput\\nOutput\\n301\\nFOUND\\nExplanation:\\nSince the response code is not\\n404, website returns FOUND.\"",
        "11": "b\"Off By One\\nYou just bought a new calculator, but it seems to have a small problem: all its results have an extra\\n1 appended to the end.\\nFor example, if you ask it for 3 + 5, it'll print 81, and 4 + 12 will result in 161.\\nGiven\\nA and\\nB, can you predict what the calculator will print when you ask it for\\nA+B?\\nInput Format\\nThe first and only line of input will contain two space-separated integers\\nA and\\nB.\\nOutput Format\\nPrint a single integer: the calculator's output when you enter\\nA+B into it.\\nConstraints\\n1\\xe2\\x89\\xa4A,B\\xe2\\x89\\xa450\\nSample 1:\\nInput\\nOutput\\n3 5\\n81\\nExplanation:\\n3+5=8, and the calculator appends a\\n1 to print\\n81.\\nSample 2:\\nInput\\nOutput\\n4 12\\n161\\nExplanation:\\n4+12=16, and the calculator appends a\\n1 to print\\n161.\"",
        "12": "b'Donation Drive\\nA blood drive aims to collect\\nN number of blood donations.\\nThe drive has collected\\nX donations so far. Find the remaining number of donations needed to reach the target.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case contains two space-separated integers\\nN and\\nX \\xe2\\x80\\x94 the number of required donations and the number of collected donations, respectively.\\nOutput Format\\nFor each test case, output on a new line, the remaining number of donations needed to reach the target.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4200\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4N\\xe2\\x89\\xa420\\nSample 1:\\nInput\\nOutput\\n4\\n5 2\\n3 3\\n5 4\\n7 5\\n3\\n0\\n1\\n2\\nExplanation:\\nTest case\\n1: The drive aims to collect\\n5 donations and has collected\\n2 already. Thus, they need to collect\\n3 more donations to reach the target.\\nTest case\\n2: The drive aims to collect\\n3 donations and has collected\\n3 already. Thus, they need to collect no more donations to reach the target.\\nTest case\\n3: The drive aims to collect\\n5 donations and has collected\\n4 already. Thus, they need to collect\\n1 more donation to reach the target.\\nTest case\\n4: The drive aims to collect\\n7 donations and has collected\\n5 already. Thus, they need to collect\\n2 more donations to reach the target.'",
        "13": "b'Kitchen Timings\\nThe working hours of Chef\\xe2\\x80\\x99s kitchen are from\\nX pm to\\nY pm\\n(1\\xe2\\x89\\xa4X<Y\\xe2\\x89\\xa412).\\nFind the number of hours Chef works.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two space-separated integers\\nX and\\nY \\xe2\\x80\\x94 the starting and ending time of working hours respectively.\\nOutput Format\\nFor each test case, output on a new line, the number of hours Chef works.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X<Y\\xe2\\x89\\xa412\\nSample 1:\\nInput\\nOutput\\n4\\n1 2\\n3 7\\n9 11\\n2 10\\n1\\n4\\n2\\n8\\nExplanation:\\nTest case\\n1: Chef starts working at\\n1 pm and works till\\n2 pm. Thus, he works for\\n1 hour.\\nTest case\\n2: Chef starts working at\\n3 pm and works till\\n7 pm. Thus, he works for\\n4 hours.\\nTest case\\n3: Chef starts working at\\n9 pm and works till\\n11 pm. Thus, he works for\\n2 hours.\\nTest case\\n4: Chef starts working at\\n2 pm and works till\\n10 pm. Thus, he works for\\n8 hours.'",
        "14": "b\"IPL Ticket Rush\\nDAIICT college students want to attend an IPL match.\\nA total of\\nN students from the college want to go while only\\nM tickets are available for the match.\\nDetermine how many students won't be able to book tickets.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two space-separated integers\\nN and\\nM \\xe2\\x80\\x94 the number of students wants to go and the total number of tickets available, respectively.\\nOutput Format\\nFor each test case, output on a new line the number of students who won't be able to book tickets.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa410\\n5\\nSample 1:\\nInput\\nOutput\\n4\\n5 3\\n5 7\\n4 1\\n8 8\\n2\\n0\\n3\\n0\\nExplanation:\\nTest case\\n1: There are\\n5 students who want to go, and only\\n3 tickets are available. Hence\\n2 students won't be able to get tickets.\\nTest case\\n2: There are\\n5 students who want to go, and\\n7 tickets are available. So, every one of them will get the tickets.\\nTest case\\n3: There are\\n4 students who want to go, and only\\n1 ticket is available. Hence\\n3 students won't be able to get tickets.\\nTest case\\n4: There are\\n8 students who want to go, and\\n8 tickets are available. So, every one of them will get the tickets.\"",
        "15": "b\"Audible Range\\nChef's dog binary hears frequencies starting from\\n67 Hertz to\\n45000 Hertz (both inclusive).\\nIf Chef's commands have a frequency of\\nX Hertz, find whether binary can hear them or not.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single integer\\nX - the frequency of Chef's commands in Hertz.\\nOutput Format\\nFor each test case, output on a new line YES, if binary can hear Chef's commands. Otherwise, print NO.\\nThe output is case-insensitive. Thus, the strings YES, yes, yeS, and Yes are all considered the same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa410\\n6\\nSample 1:\\nInput\\nOutput\\n5\\n42\\n67\\n402\\n45000\\n45005\\nNO\\nYES\\nYES\\nYES\\nNO\\nExplanation:\\nTest case\\n1: Chef's command has a frequency of\\n42 Hertz which is less than\\n67. Thus, it would not be audible to binary.\\nTest case\\n2: Chef's command has a frequency of\\n67 Hertz which lies in the range\\n[67,45000]. Thus, it would be audible to binary.\\nTest case\\n3: Chef's command has a frequency of\\n402 Hertz which lies in the range\\n[67,45000]. Thus, it would be audible to binary.\\nTest case\\n4: Chef's command has a frequency of\\n45000 Hertz which lies in the range\\n[67,45000]. Thus, it would be audible to binary.\\nTest case\\n5: Chef's command has a frequency of\\n45005 Hertz which is greater than\\n45000. Thus, it would not be audible to binary.\"",
        "16": "b'Reach on Time\\nChef has recently moved into an apartment. It takes\\n30 minutes for Chef to reach office from the apartment.\\nChef left for the office\\nX minutes before Chef was supposed to reach. Determine whether or not Chef will be able to reach on time.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single integer\\nX.\\nOutput Format\\nFor each test case, output YES if Chef will reach on time, NO otherwise.\\nThe output is case-insensitive. Thus, the strings YES, yes, yeS, and Yes are all considered the same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa460\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa460\\nSample 1:\\nInput\\nOutput\\n6\\n30\\n60\\n14\\n29\\n31\\n42\\nYES\\nYES\\nNO\\nNO\\nYES\\nYES\\nExplanation:\\nTest case 1: Chef leaves\\n30 minutes before he is supposed to reach, so he will reach the office exactly on time since it takes\\n30 minutes to commute.\\nTest case 2: Chef will reach\\n30 minutes early.\\nTest case 3: Chef will reach 16 minutes late.'",
        "17": "b'Puzzle Hunt\\nChef and some of his friends are planning to participate in a puzzle hunt event.\\nThe rules of the puzzle hunt state:\\n\"This hunt is intended for teams of\\n6 to\\n8 people.\"\\nChef\\'s team has\\nN people in total. Are they eligible to participate?\\nInput Format\\nThe first and only line of input will contain a single integer\\nN: the number of people present in Chef\\'s team.\\nOutput Format\\nPrint the answer: Yes if Chef\\'s team is eligible to participate, and No otherwise.\\nEach letter in the output may be printed in either uppercase or lowercase, i.e, the outputs NO, No, nO, no will all be treated as equivalent.\\nConstraints\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n4\\nNo\\nExplanation:\\nThe puzzle hunt requires between\\n6 and\\n8 people in a team.\\n4 isn\\'t between\\n6 and\\n8, so Chef\\'s team cannot participate.\\nSample 2:\\nInput\\nOutput\\n7\\nYes\\nExplanation:\\nChef\\'s team has\\n7 people, and\\n7 lies between\\n6 and\\n8.\\nSo, Chef\\'s team can participate in the event.\\nSample 3:\\nInput\\nOutput\\n8\\nYes\\nExplanation:\\nChef\\'s team has\\n8 people, and\\n8 lies between\\n6 and\\n8.\\nSo, Chef\\'s team can participate in the event.'",
        "18": "b'Bone Appetit\\nTrick or treat, bags of sweets, ghosts are walking down the street\\nIt\\'s Halloween and Suri Bhai is out to get his treats.\\nThere are two sectors in his neighborhood, \"Bones\" and \"Blood\". They have\\nN and\\nM people, respectively.\\nEach person in \"Bones\" will hand out\\nX treats, and each person in \"Blood\" will hand out\\nY treats.\\nHow many treats does Suri Bhai get from visiting everyone in his neighborhood in total?\\nInput Format\\nThe first line of input contains two space-separated integers\\nN and\\nM \\xe2\\x80\\x94 the number of people in \"Bones\" and \"Blood\", respectively.\\nThe second line of input contains two space-separated integers\\nX and\\nY \\xe2\\x80\\x94 the number of treats handed out by each person in \"Bones\" and \"Blood\", respectively.\\nOutput Format\\nFor each test case output a single integer: the total number of treats Suri Bhai will receive.\\nConstraints\\n0\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n4 2\\n5 6\\n32\\nExplanation:\\n\"Bones\" has\\n4 people, each of who will give out\\n5 treats, for a total of\\n4\\xc3\\x975=20 treats.\\n\"Blood\" has\\n2 people, each of who will give out\\n6 treats, for a total of\\n2\\xc3\\x976=12 treats.\\nThe total number of treats is\\n20+12=32.\\nSample 2:\\nInput\\nOutput\\n5 0\\n0 2\\n0\\nExplanation:\\n\"Bones\" has\\n5 people, each of who will give out\\n0 treats, for a total of\\n5\\xc3\\x970=0 treats.\\n\"Blood\" has\\n0 people, each of who will give out\\n2 treats, for a total of\\n0\\xc3\\x972=0 treats.\\nThe total number of treats is\\n0+0=0.'",
        "19": "b\"Who is taller!\\nAlice and Bob were having an argument about which of them is taller than the other. Charlie got irritated by the argument, and decided to settle the matter once and for all.\\nCharlie measured the heights of Alice and Bob, and got to know that Alice's height is\\nX centimeters and Bob's height is\\nY centimeters. Help Charlie decide who is taller.\\nIt is guaranteed that\\nX\\n\\xee\\x80\\xa0\\n=Y.\\nInput Format\\nThe first line of input will contain an integer\\nT \\xe2\\x80\\x94 the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains two integers\\nX and\\nY, as described in the problem statement.\\nOutput Format\\nFor each test case, output on a new line\\nA if Alice is taller than Bob, else output\\nB. The output is case insensitive, i.e, both\\nA and\\na will be accepted as correct answers when Alice is taller.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n100\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4200\\nX\\n\\xee\\x80\\xa0\\n=Y\\nSample 1:\\nInput\\nOutput\\n2\\n150 160\\n160 150\\nB\\nA\\nExplanation:\\nTest case\\n1: In this case,\\n150<160 so Bob is taller than Alice.\\nTest case\\n2: In this case,\\n160>150 so Alice is taller than Bob.\"",
        "20": "b'Reach the Target\\nThere is a cricket match going on between two teams\\nA and\\nB.\\nTeam\\nB is batting second and got a target of\\nX runs. Currently, team\\nB has scored\\nY runs. Determine how many more runs Team\\nB should score to win the match.\\nNote: The target score in cricket matches is one more than the number of runs scored by the team that batted first.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two space-separated integers\\nX and\\nY, the target for team\\nB and the current score of team\\nB respectively.\\nOutput Format\\nFor each test case, output how many more runs team\\nB should score to win the match.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n50\\xe2\\x89\\xa4Y<X\\xe2\\x89\\xa4200\\nSample 1:\\nInput\\nOutput\\n4\\n200 50\\n100 99\\n130 97\\n53 51\\n150\\n1\\n33\\n2\\nExplanation:\\nTest case\\n1: The target is\\n200 runs and team\\nB has already made\\n50 runs. Thus, the team needs to make\\n200\\xe2\\x88\\x9250=150 runs more, to win the match.\\nTest case\\n2: The target is\\n100 runs and team\\nB has already made\\n99 runs. Thus, the team needs to make\\n100\\xe2\\x88\\x9299=1 runs more, to win the match.\\nTest case\\n3: The target is\\n130 runs and team\\nB has already made\\n97 runs. Thus, the team needs to make\\n130\\xe2\\x88\\x9297=33 runs more, to win the match.\\nTest case\\n4: The target is\\n53 runs and team\\nB has already made\\n51 runs. Thus, the team needs to make\\n53\\xe2\\x88\\x9251=2 runs more, to win the match.'",
        "21": "b'Best of Two\\nChef took an examination two times. In the first attempt, he scored\\nX marks while in the second attempt he scored\\nY marks. According to the rules of the examination, the best score out of the two attempts will be considered as the final score.\\nDetermine the final score of the Chef.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first line of each test case contains two integers\\nX and\\nY \\xe2\\x80\\x94 the marks scored by Chef in the first attempt and second attempt respectively.\\nOutput Format\\nFor each test case, output the final score of Chef in the examination.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n0\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n40 60\\n67 55\\n50 50\\n1 100\\n60\\n67\\n50\\n100\\nExplanation:\\nTest Case 1: The best score out of the two attempts is\\n60.\\nTest Case 2: The best score out of the two attempts is\\n67.\\nTest Case 3: The best score out of the two attempts is\\n50.'",
        "22": "b'2000\\nChef had collected\\nN notes of Rs.\\n2000 to pay his total college fees. However, the government banned Rs.\\n2000 notes.\\nChef wants to pay the same amount using Rs.\\n500 notes only. Find the number of notes Chef needs.\\nInput Format\\nEach test case consists of a single integer\\nN - the number of notes of Rs.\\n2000 that Chef has collected.\\nOutput Format\\nOutput a single integer - the number of Rs.\\n500 notes needed.\\nConstraints\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n16\\nExplanation:\\n4 notes of Rs.\\n2000 make a total of\\n4\\xe2\\x8b\\x852000=8000 rupees. This is equivalent to\\n16 notes of Rs.\\n500.'",
        "23": "b\"Roller Coaster\\nChef's son wants to go on a roller coaster ride. The height of Chef's son is\\nX inches while the minimum height required to go on the ride is\\nH inches. Determine whether he can go on the ride or not.\\nInput Format\\nThe first line contains a single integer\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two integers\\nX and\\nH - the height of Chef's son and the minimum height required for the ride respectively.\\nOutput Format\\nFor each test case, output in a single line, YES if Chef's son can go on the ride. Otherwise, output NO.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical)\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X,H\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n15 20\\n50 48\\n32 32\\n38 39\\nNO\\nYES\\nYES\\nNO\\nExplanation:\\nTest case 1: Chef's son can not go on the ride as his height\\n< the minimum required height.\\nTest case 2: Chef's son can go on the ride as his height\\n\\xe2\\x89\\xa5 the minimum required height.\\nTest case 3: Chef's son can go on the ride as his height\\n\\xe2\\x89\\xa5 the minimum required height.\\nTest case 4: Chef's son can not go on the ride as his height\\n< the minimum required height.\"",
        "24": "b'Candy Division\\nThere are three friends and a total of\\nN candies.\\nThere will be a fight amongst the friends if all of them do not get the same number of candies.\\nChef wants to divide all the candies such that there is no fight. Find whether such distribution is possible.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single integer\\nN - the number of candies.\\nOutput Format\\nFor each test case, output YES, if we can distribute all the candies between the three friends equally. Otherwise output NO.\\nYou can output each character of the answer in uppercase or lowercase. For example, the strings yEs, yes, Yes, and YES are considered the same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n3\\n4\\n2\\n6\\nYES\\nNO\\nNO\\nYES\\nExplanation:\\nTest case\\n1: Chef can distribute all\\n3 candies such that each friend gets\\n1 candy. Since all three friends have same number of candies, there is no fight.\\nTest case\\n2: There exist no way of distributing all candies such that all three friends have same number of candies.\\nTest case\\n3: There exist no way of distributing all candies such that all three friends have same number of candies.\\nTest case\\n4: Chef can distribute all\\n6 candies such that each friend gets\\n2 candies. Since all three friends have same number of candies, there is no fight.'",
        "25": "b'Chef On Date\\nChef and his girlfriend went on a date. Chef took\\nX dollars with him, and was quite sure that this would be enough to pay the bill. At the end, the waiter brought a bill of\\nY dollars. Print \"YES\" if Chef has enough money to pay the bill, or \"NO\" if he has to borrow from his girlfriend and leave a bad impression on her.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line of input, containing two space-separated integers\\nX and\\nY.\\nOutput Format\\nFor each test case, output on a new line \"YES\" if Chef has enough money to pay the bill and \"NO\" otherwise.\\nYou may print each character of the string in either uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n1 1\\n1 2\\n2 1\\n50 100\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nTest case\\n1: Since the money Chef has is equal to the bill, he will be able to pay the bill.\\nTest case\\n2: Since the money Chef has is less than the bill, he will have to borrow from his girlfriend and leave a bad impression on her.\\nTest case\\n3: Since the money Chef has is greater than the bill, he will be able to pay the bill.\\nTest case\\n4: Since the money Chef has is less than the bill, he will have to borrow from his girlfriend and leave a bad impression on her.'",
        "26": "b'Parity\\nAshu and Arvind participated in a coding contest, as a result of which they received\\nN chocolates. Now they want to divide the chocolates between them equally.\\nCan you help them by deciding if it is possible for them to divide all the\\nN chocolates in such a way that they each get an equal number of chocolates?\\nYou cannot break a chocolate in two or more pieces.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case contains a single integer\\nN \\xe2\\x80\\x94 the number of chocolates they received.\\nOutput Format\\nFor each test case output the answer on a new line \\xe2\\x80\\x94 \"Yes\" (without quotes) if they can divide chocolates between them equally, and \"No\" (without quotes) otherwise.\\nEach letter of the output may be printed in either uppercase or lowercase, i.e, \"Yes\", \"YES\", and \"yEs\" will all be treated as equivalent.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n4\\n10\\n4\\n3\\n2\\nYes\\nYes\\nNo\\nYes\\nExplanation:\\nTest case\\n1: They can divide\\n10 chocolates such that both of them get\\n5 chocolates each.\\nTest case\\n2: They can divide\\n4 chocolates such that both of them get\\n2 chocolates each.\\nTest case\\n3: There is no way to divide\\n3 chocolates so that they get equal number of chocolates.\\nTest case\\n4: They can divide\\n2 chocolates such that both of them get\\n1 chocolate each.'",
        "27": "b'Total Prize Money\\nIn a coding contest, there are prizes for the top rankers. The prize scheme is as follows:\\nTop\\n10 participants receive rupees\\nX each.\\nParticipants with rank\\n11 to\\n100 (both inclusive) receive rupees\\nY each.\\nFind the total prize money over all the contestants.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains of a single line of input, two integers\\nX and\\nY - the prize for top\\n10 rankers and the prize for ranks\\n11 to\\n100 respectively.\\nOutput Format\\nFor each test case, output the total prize money over all the contestants.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4Y\\xe2\\x89\\xa4X\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n4\\n1000 100\\n1000 1000\\n80 1\\n400 30\\n19000\\n100000\\n890\\n6700\\nExplanation:\\nTest Case\\n1: Top\\n10 participants receive rupees\\n1000 and next\\n90 participants receive rupees\\n100 each. So, total prize money\\n=10\\xe2\\x8b\\x851000+90\\xe2\\x8b\\x85100=19000.\\nTest Case\\n2: Top\\n10 participants receive rupees\\n1000 and next\\n90 participants receive rupees\\n1000 each. So, total prize money\\n=10\\xe2\\x8b\\x851000+90\\xe2\\x8b\\x851000=100000.\\nTest Case\\n3: Top\\n10 participants receive rupees\\n80 and next\\n90 participants receive rupee\\n1 each. So, total prize money\\n=10\\xe2\\x8b\\x8580+90\\xe2\\x8b\\x851=890.\\nTest Case\\n4: Top\\n10 participants receive rupees\\n400 and next\\n90 participants receive rupees\\n30 each. So, total prize money\\n=10\\xe2\\x8b\\x85400+90\\xe2\\x8b\\x8530=6700.'",
        "28": "b'Counting Words\\nHarsh was recently gifted a book consisting of\\nN pages. Each page contains exactly\\nM words printed on it. As he was bored, he decided to count the number of words in the book.\\nHelp Harsh find the total number of words in the book.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two space-separated integers on a single line,\\nN and\\nM \\xe2\\x80\\x94 the number of pages and the number of words on each page, respectively.\\nOutput Format\\nFor each test case, output on a new line, the total number of words in the book.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4M\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n1 1\\n4 2\\n2 4\\n95 42\\n1\\n8\\n8\\n3990\\nExplanation:\\nTest case\\n1: The book consists of only\\n1 page, and each page has only\\n1 word. Hence, the total number of words is\\n1.\\nTest case\\n2: The book consists of\\n4 pages, and each page has\\n2 words. Hence, the total number of words is\\n2+2+2+2=8.\\nTest case\\n3: The book consists of\\n2 pages, and each page has\\n4 words. Hence, the total number of words is\\n4+4=8.\\nTest case\\n4: The book consists of\\n95 pages, and each page has\\n42 words. Hence, the total number of words is\\n3990.'",
        "29": "b'Battery Health\\nApple considers any iPhone with a battery health of\\n80% or above, to be in optimal condition.\\nGiven that your iPhone has\\nX% battery health, find whether it is in optimal condition.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case contains an integer\\nX \\xe2\\x80\\x94 the battery health.\\nOutput Format\\nFor each test case, output on a new line, YES, if the battery is in optimal condition, and NO otherwise.\\nYou may print each character in uppercase or lowercase. For example, NO, no, No and nO, are all considered identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n97\\n42\\n80\\n10\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nTest case\\n1: The battery health is\\n97% which is greater than equal to\\n80%. Thus, the battery is in optimal condition.\\nTest case\\n2: The battery health is\\n42% which is less than\\n80%. Thus, the battery is not in optimal condition.\\nTest case\\n3: The battery health is\\n80% which is greater than equal to\\n80%. Thus, the battery is in optimal condition.\\nTest case\\n4: The battery health is\\n10% which is less than\\n80%. Thus, the battery is not in optimal condition.'",
        "30": "b\"Tom and Jerry Chase\\nIn a classic chase, Tom is running after Jerry as Jerry has eaten Tom's favourite food.\\nJerry is running at a speed of\\nX metres per second while Tom is chasing him at a speed of\\nY metres per second. Determine whether Tom will be able to catch Jerry.\\nNote that initially Jerry is not at the same position as Tom.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two space-separated integers\\nX and\\nY \\xe2\\x80\\x94 the speeds of Jerry and Tom respectively.\\nOutput Format\\nFor each test case, output on a new line, YES, if Tom will be able to catch Jerry. Otherwise, output NO.\\nYou can print each character in uppercase or lowercase. For example NO, no, No, and nO are all considered the same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n4\\n2 3\\n4 1\\n1 1\\n3 5\\nYES\\nNO\\nNO\\nYES\\nExplanation:\\nTest case\\n1: Jerry is running at the speed of\\n2 metres per second while Tom is chasing him at the speed of\\n3 metres per second. Since Jerry's speed is less than Tom's, Tom will eventually catch Jerry.\\nTest case\\n2: Jerry is running at the speed of\\n4 metres per second while Tom is chasing him at the speed of\\n1 metres per second. Since Jerry's speed is higher than Tom's, Tom will never be able to catch Jerry.\\nTest case\\n3: Jerry is running at the speed of\\n1 metre per second while Tom is chasing him at the speed of\\n1 metre per second. Since Jerry's speed is same as that of Tom's and both of them are not at the same position, Tom will never be able to catch Jerry.\\nTest case\\n4: Jerry is running at the speed of\\n3 metres per second while Tom is chasing him at the speed of\\n5 metres per second. Since Jerry's speed is less than Tom's, Tom will eventually catch Jerry.\"",
        "31": "b\"Ageing\\nChef's current age is\\n20 years, while Chefina's current age is\\n10 years.\\nDetermine Chefina's age when Chef will be\\nX years old.\\nNote: Assume that Chef and Chefina were born on same day and same month (just different year).\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single integer\\nX, the age of Chef.\\nOutput Format\\nFor each test case, output Chefina's age when Chef will be\\nX years old.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa425\\n25\\xe2\\x89\\xa4X\\xe2\\x89\\xa450\\nSample 1:\\nInput\\nOutput\\n4\\n25\\n36\\n50\\n44\\n15\\n26\\n40\\n34\\nExplanation:\\nTest case\\n1: Chefina is\\n10 years old when Chef is\\n20 years old. Thus, when Chef would be\\n25, Chefina would be\\n15.\\nTest case\\n2: Chefina is\\n10 years old when Chef is\\n20 years old. Thus, when Chef would be\\n36, Chefina would be\\n26.\\nTest case\\n3: Chefina is\\n10 years old when Chef is\\n20 years old. Thus, when Chef would be\\n50, Chefina would be\\n40.\\nTest case\\n4: Chefina is\\n10 years old when Chef is\\n20 years old. Thus, when Chef would be\\n44, Chefina would be\\n34.\"",
        "32": "b'Right There\\nIf you wanna party, if you, if you wanna party\\nThen put your hands up\\nChef wants to host a party with a total of\\nN people.\\nHowever, the party hall has a capacity of\\nX people. Find whether Chef can host the party.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two space-separated integers\\nN and\\nX \\xe2\\x80\\x94 the total number of people and the capacity of the party hall.\\nOutput Format\\nFor each test case, output on a new line, YES, if Chef can host the party and NO otherwise.\\nEach character of the output may be printed in either uppercase or lowercase. That is, the strings NO, no, nO, and No will be treated as equivalent.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N,X\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n4\\n2 5\\n4 3\\n6 6\\n10 9\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nTest case\\n1: Chef wants to host a party with\\n2 people. Since the capacity of the hall is\\n5, he can host the party.\\nTest case\\n2: Chef wants to host a party with\\n4 people. Since the capacity of the hall is\\n3, he can not host the party.\\nTest case\\n3: Chef wants to host a party with\\n6 people. Since the capacity of the hall is\\n6, he can host the party.\\nTest case\\n4: Chef wants to host a party with\\n10 people. Since the capacity of the hall is\\n9, he can not host the party.'",
        "33": "b'Second Max of Three Numbers\\nProblem Statement\\nWrite a program that accepts sets of three numbers, and prints the second-maximum number among the three.\\nInput\\nFirst line contains the number of triples, N.\\nThe next N lines which follow each have three space separated integers.\\nOutput\\nFor each of the N triples, output one new line which contains the second-maximum integer among the three.\\nConstraints\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 6\\n1 \\xe2\\x89\\xa4 every integer \\xe2\\x89\\xa4 10000\\nThe three integers in a single triplet are all distinct. That is, no two of them are equal.\\nSample 1:\\nInput\\nOutput\\n3\\n1 2 3\\n10 15 5\\n100 999 500\\n2\\n10\\n500'",
        "34": "b'Bull or Bear\\nChef is on his way to become the new big bull of the stock market but is a bit weak at calculating whether he made a profit or a loss on his deal.\\nGiven that Chef bought the stock at value\\nX and sold it at value\\nY. Help him calculate whether he made a profit, loss, or was it a neutral deal.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line of input containing two space-separated integers\\nX and\\nY, denoting the value at which Chef bought and sold the stock respectively.\\nOutput Format\\nFor each test case, output PROFIT if Chef made a profit on the deal, LOSS if Chef incurred a loss on the deal, and NEUTRAL otherwise.\\nThe checker is case-insensitive so answers like pROfiT, profit, and PROFIT would be considered the same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4500\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n4 2\\n8 8\\n3 4\\n2 1\\nLOSS\\nNEUTRAL\\nPROFIT\\nLOSS\\nExplanation:\\nTest case\\n1: Since the cost price is greater than the selling price, Chef made a loss in the deal.\\nTest case\\n2: Since the cost price is equal to the selling price, the deal was neutral.\\nTest case\\n3: Since the cost price is less than the selling price, Chef made a profit in the deal.\\nTest case\\n4: Since the cost price is greater than the selling price, Chef made a loss in the deal.'",
        "35": "b'Four Tickets\\nFour friends want to attend a concert. Each ticket costs\\nX rupees.\\nThey have decided to go to the concert if and only if the total cost of the tickets does not exceed\\n1000 rupees.\\nDetermine whether they will be going to the concert or not.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single integer\\nX, the cost of each ticket.\\nOutput Format\\nFor each test case, output YES if they will be going to the concert, NO otherwise.\\nYou can print each character in uppercase or lowercase. For example, the strings YES, yes, Yes, and yES, are all considered identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n4\\n100\\n500\\n250\\n1000\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nTest case\\n1: The total cost of all tickets is\\n100\\xe2\\x8b\\x854=400 which is\\n\\xe2\\x89\\xa41000. Thus, they will go to the concert.\\nTest case\\n2: The total cost of all tickets is\\n500\\xe2\\x8b\\x854=2000 which is\\n>1000. Thus, they will not go to the concert.\\nTest case\\n3: The total cost of all tickets is\\n250\\xe2\\x8b\\x854=1000 which is\\n\\xe2\\x89\\xa41000. Thus, they will go to the concert.\\nTest case\\n4: The total cost of all tickets is\\n1000\\xe2\\x8b\\x854=4000 which is\\n>1000. Thus, they will not go to the concert.'",
        "36": "b\"Chairs Requirement\\nChef's coding class is very famous in Chefland.\\nThis year\\nX students joined his class and each student will require one chair to sit on. Chef already has\\nY chairs in his class. Determine the minimum number of new chairs Chef must buy so that every student is able to get one chair to sit on.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two integers\\nX and\\nY \\xe2\\x80\\x94 the number of students in the class and the number of chairs Chef already has.\\nOutput Format\\nFor each test case, output the minimum number of extra chairs Chef must buy so that every student gets one chair.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n0\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n20 14\\n41 41\\n35 0\\n50 100\\n6\\n0\\n35\\n0\\nExplanation:\\nTest case 1: There are\\n20 students in the class and Chef has\\n14 chairs already. Therefore Chef must buy\\n6 more chairs.\\nTest case 2: There are\\n41 students in the class and Chef already has exactly\\n41 chairs. Therefore Chef does not need to buy any more chairs.\\nTest case 3: There are\\n35 students in the class and Chef has no chairs initially. Therefore Chef must buy\\n35 chairs.\"",
        "37": "b'Chef and Donation\\nIn a certain month, Chef earned\\nX rupees while Chefina earned\\nY rupees such that\\nY>X.\\nSince they want to end up with exactly the same amount, they decide to donate the difference between their income to a charity.\\nFind the amount they donate in the month.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two space-separated integers\\nX and\\nY \\xe2\\x80\\x94 the income of Chef and Chefina in a month, respectively.\\nOutput Format\\nFor each test case, output on a new line, the amount they donate in the month.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X<Y\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n4\\n1 3\\n2 5\\n4 5\\n2 10\\n2\\n3\\n1\\n8\\nExplanation:\\nTest case\\n1: Chef earns\\n1 rupees while Chefina earns\\n3 rupees. The difference between their income is\\n3\\xe2\\x88\\x921=2. Thus, they donate\\n2 rupees to charity.\\nTest case\\n2: Chef earns\\n2 rupees while Chefina earns\\n5 rupees. The difference between their income is\\n5\\xe2\\x88\\x922=3. Thus, they donate\\n3 rupees to charity.\\nTest case\\n3: Chef earns\\n4 rupees while Chefina earns\\n5 rupees. The difference between their income is\\n5\\xe2\\x88\\x924=1. Thus, they donate\\n1 rupees to charity.\\nTest case\\n4: Chef earns\\n2 rupees while Chefina earns\\n10 rupees. The difference between their income is\\n10\\xe2\\x88\\x922=8. Thus, they donate\\n8 rupees to charity.'",
        "38": "b'Sum it\\nBob received an assignment from his school: he has two numbers\\nA and\\nB, and he has to find the sum of these two numbers.\\nAlice, being a good friend of Bob, told him that the answer to this question is\\nC.\\nBob doesn\\'t completely trust Alice and asked you to tell him if the answer given by Alice is correct or not.\\nIf the answer is correct print \"YES\", otherwise print \"NO\" (without quotes).\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case consists of three space-separated integers\\nA,B, and\\nC.\\nOutput Format\\nFor each test case, output on a new line the answer: YES if Alice gave the right answer, and NO otherwise.\\nEach character of the output may be printed in either uppercase or lowercase, i.e, the outputs Yes, YES, yEs and yes will be treated as equivalent.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4A,B,C\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n1 2 3\\n4 5 9\\n2 3 6\\nYES\\nYES\\nNO\\nExplanation:\\nTest case\\n1:\\n1+2=3, so Alice\\'s answer is correct.\\nTest case\\n2:\\n4+5=9, so Alice\\'s answer is correct.\\nTest case\\n3:\\n2+3=5 which doesn\\'t equal\\n6, so Alice\\'s answer is incorrect.'",
        "39": "b'Get Subscription\\nChef wants to conduct a lecture for which he needs to set up an online meeting of exactly\\nX minutes.\\nThe meeting platform supports a meeting of maximum\\n30 minutes without subscription and a meeting of unlimited duration with subscription.\\nDetermine whether Chef needs to take a subscription or not for setting up the meet.\\nInput Format\\nFirst line will contain\\nT, the number of test cases. Then the test cases follow.\\nEach test case contains a single integer\\nX - denoting the duration of the lecture.\\nOutput Format\\nFor each test case, print in a single line, YES if Chef needs to take the subscription, otherwise print NO.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n50\\n3\\n30\\n80\\nYES\\nNO\\nNO\\nYES\\nExplanation:\\nTest Case\\n1: Without subscription, the platform allows only\\n30 minutes of duration. Since Chef needs to conduct a lecture of\\n50 minutes, he needs to buy the subscription.\\nTest Case\\n2: Without subscription, the platform allows\\n30 minutes of duration. Since Chef needs to conduct a lecture of\\n3 minutes only, he does not need to buy the subscription.\\nTest Case\\n3: Without subscription, the platform allows\\n30 minutes of duration. Since Chef needs to conduct a lecture of\\n30 minutes only, he does not need to buy the subscription.\\nTest Case\\n4: Without subscription, the platform allows only\\n30 minutes of duration. Since Chef needs to conduct a lecture of\\n80 minutes, he needs to buy the subscription.'",
        "40": "b'Messi vs Ronaldo\\nIn Chefland, a football player gets\\n2 points for each goal and\\n1 point for each assist.\\nMessi has\\nA goals and\\nB assists this season, whereas Ronaldo has\\nX goals and\\nY assists.\\nFind out the player with more points this season.\\nInput Format\\nThe first and only line of input will contains four space-separated integers\\nA,\\nB,\\nX and\\nY, the number of goals and assists that Messi has and the number of goals and assists that Ronaldo has, respectively.\\nOutput Format\\nPrint a single line containing:\\nMessi, if Messi has more points than Ronaldo.\\nRonaldo, if Ronaldo has more points than Messi.\\nEqual, if both have equal points.\\nYou can print each character in uppercase or lowercase. For example, the strings Messi, MESSI, messi, and MeSSi are considered identical.\\nConstraints\\n0\\xe2\\x89\\xa4A,B,X,Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n40 30 50 10\\nEqual\\nExplanation:\\nMessi has\\n40 goals and\\n30 assists. Thus, his total points are\\n40\\xe2\\x8b\\x852+30=110.\\nRonaldo has\\n50 goals and\\n10 assists. Thus, his total points are\\n50\\xe2\\x8b\\x852+10=110.\\nBoth have\\n110 points.\\nSample 2:\\nInput\\nOutput\\n91 22 60 30\\nMessi\\nExplanation:\\nMessi has\\n91 goals and\\n22 assists. Thus, his total points are\\n91\\xe2\\x8b\\x852+22=204.\\nRonaldo has\\n60 goals and\\n30 assists. Thus, his total points are\\n60\\xe2\\x8b\\x852+30=150.\\nMessi has\\n204 points, whereas Ronaldo has\\n150.\\nSample 3:\\nInput\\nOutput\\n60 30 80 20\\nRonaldo\\nExplanation:\\nMessi has\\n60 goals and\\n30 assists. Thus, his total points are\\n60\\xe2\\x8b\\x852+30=150.\\nRonaldo has\\n80 goals and\\n20 assists. Thus, his total points are\\n80\\xe2\\x8b\\x852+20=180.\\nMessi has\\n150 points, whereas Ronaldo has\\n180.'",
        "41": "b'Waiting Time\\nChef is eagerly waiting for a piece of information. His secret agent told him that this information would be revealed to him after\\nK weeks.\\nX days have already passed and Chef is getting restless now. Find the number of remaining days Chef has to wait for, to get the information.\\nIt is guaranteed that the information has not been revealed to the Chef yet.\\nInput Format\\nThe first line of input will contain an integer\\nT \\xe2\\x80\\x94 the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains two space-separated integers\\nK and\\nX, as described in the problem statement.\\nOutput Format\\nFor each test case, output the number of remaining days that Chef will have to wait for.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4500\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4X<7\\xe2\\x8b\\x85K\\nSample 1:\\nInput\\nOutput\\n4\\n1 5\\n1 6\\n1 1\\n1 2\\n2\\n1\\n6\\n5\\nExplanation:\\nTest case\\n1: The information will be revealed to the Chef after\\n1 week, which is equivalent to\\n7 days. Chef has already waited for\\n5 days, so he needs to wait for\\n2 more days in order to get the information.\\nTest case\\n2: The information will be revealed to the Chef after\\n1 week, which is equivalent to\\n7 days. Chef has already waited for\\n6 days, so he needs to wait for\\n1 more day in order to get the information.\\nTest case\\n3: The information will be revealed to the Chef after\\n1 week, which is equivalent to\\n7 days. Chef has already waited for\\n1 day, so he needs to wait for\\n6 more days in order to get the information.\\nTest case\\n4: The information will be revealed to the Chef after\\n1 week, which is equivalent to\\n7 days. Chef has already waited for\\n2 days, so he needs to wait for\\n5 more days in order to get the information.'",
        "42": "b'October Marathon\\nChef organised a\\n30 kilometres marathon in Chefland.\\nThe participants receive medals on completing the marathon as following:\\nIf the total time taken is less than\\n3 hours, they receive a GOLD medal.\\nIf the total time taken is greater than equal to\\n3 hours but less than\\n6 hours, they receive a SILVER medal.\\nIf the total time taken is greater than equal to\\n6 hours, they receive a BRONZE medal.\\nChefina participated in the marathon and completed it in\\nX hours. Which medal would she receive?\\nInput Format\\nThe input consists of a single integer\\nX \\xe2\\x80\\x94 the number of hours Chefina took to complete the marathon.\\nOutput Format\\nOutput the medal Chefina would recieve.\\nNote that you may print each character in uppercase or lowercase. For example, the strings GOLD, gold, Gold, and gOlD are considered the same.\\nConstraints\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa410.\\nSample 1:\\nInput\\nOutput\\n2\\nGOLD\\nExplanation:\\nChefina completed the marathon in less than\\n3 hours. Thus, she gets a GOLD medal.\\nSample 2:\\nInput\\nOutput\\n5\\nSILVER\\nExplanation:\\nChefina took more than\\n3 but less than\\n6 hours. Thus, she gets a SILVER medal.\\nSample 3:\\nInput\\nOutput\\n6\\nBRONZE\\nExplanation:\\nChefina took\\n6 hours to complete the marathon. Thus, she gets a BRONZE medal.'",
        "43": "b\"Just One More Episode\\nChef has to attend an exam that starts in\\nX minutes, but of course, watching shows takes priority.\\nEvery episode of the show that Chef is watching, is\\n24 minutes long.\\nIf he starts watching a new episode now, will he finish watching it strictly before the exam starts?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of one line of input, containing a single integer\\nX \\xe2\\x80\\x94 the amount of time from now at which Chef's exam starts.\\nOutput Format\\nFor each test case, output on a new line the answer \\xe2\\x80\\x94 YES if Chef will finish his episode before the exam starts, and NO otherwise.\\nEach character of the output may be printed in either lowercase or uppercase, i.e, the string Yes, YES, yes, YeS` will all be treated as equivalent.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n30\\n23\\n60\\n24\\nYes\\nNo\\nYes\\nNo\\nExplanation:\\nTest case\\n1: Chef has\\n30 minutes of free time, which is easily enough to finish watching a\\n24-minute episode. Hence, the answer is Yes.\\nTest case\\n2: Chef has\\n23 minutes of free time, which is not enough to finish watching a\\n24-minute episode. Hence, the answer is No.\\nTest case\\n3: Chef has\\n60 minutes of free time, which is easily enough to finish watching a\\n24-minute episode. Hence, the answer is Yes.\\nTest case\\n4: Chef has\\n24 minutes of free time. He will finish watching the episode exactly when the exam starts, and not strictly before it. Hence, the answer is No.\"",
        "44": "b\"Mana Points\\nChef is playing a mobile game. In the game, Chef's character Chefario can perform special attacks. However, one special attack costs\\nX mana points to Chefario.\\nIf Chefario currently has\\nY mana points, determine the maximum number of special attacks he can perform.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two space-separated integers\\nX and\\nY \\xe2\\x80\\x94 the cost of one special attack and the number of mana points Chefario has initially.\\nOutput Format\\nFor each test case, output the maximum number of special attacks Chefario can perform.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4Y\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n3\\n10 30\\n6 41\\n50 2\\n3\\n6\\n0\\nExplanation:\\nTest case\\n1: Chefario can perform a maximum of\\n3 special attacks which will cost him\\n30 mana points.\\nTest case\\n2: Chefario can perform a maximum of\\n6 special attacks which will cost him\\n36 mana points. Note that Chefario can not perform\\n7 special attacks as these will cost him\\n42 mana points while he has only\\n41 mana points.\\nTest case\\n3: Chefario will not be able to perform any special attacks in this case.\"",
        "45": "b'Rain in Chefland\\nIn Chefland, precipitation is measured using a rain gauge in millimetre per hour.\\nChef categorises rainfall as:\\nLIGHT, if rainfall is less than\\n3 millimetre per hour.\\nMODERATE, if rainfall is greater than equal to\\n3 millimetre per hour and less than\\n7 millimetre per hour.\\nHEAVY if rainfall is greater than equal to\\n7 millimetre per hour.\\nGiven that it rains at\\nX millimetre per hour on a day, find whether the rain is LIGHT, MODERATE, or HEAVY.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single integer\\nX \\xe2\\x80\\x94 the rate of rainfall in millimetre per hour.\\nOutput Format\\nFor each test case, output on a new line, whether the rain is LIGHT, MODERATE, or HEAVY.\\nYou may print each character in lowercase or uppercase. For example, LIGHT, light, Light, and liGHT, are all identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa420\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa420\\nSample 1:\\nInput\\nOutput\\n4\\n1\\n20\\n3\\n7\\nLIGHT\\nHEAVY\\nMODERATE\\nHEAVY\\nExplanation:\\nTest case\\n1: The rate of precipitation is less than\\n3. Thus, the rain is LIGHT.\\nTest case\\n2: The rate of precipitation is greater than equal to\\n7. Thus, the rain is HEAVY.\\nTest case\\n3: The rate of precipitation is greater than equal to\\n3 and less than\\n7. Thus, the rain is MODERATE.\\nTest case\\n4: The rate of precipitation is greater than equal to\\n7. Thus, the rain is HEAVY.'",
        "46": "b'Bidding\\nAlice, Bob and Charlie are bidding for an artifact at an auction.\\nAlice bids\\nA rupees, Bob bids\\nB rupees, and Charlie bids\\nC rupees (where\\nA,\\nB, and\\nC are distinct).\\nAccording to the rules of the auction, the person who bids the highest amount will win the auction.\\nDetermine who will win the auction.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains three integers\\nA,\\nB, and\\nC, \\xe2\\x80\\x94 the amount bid by Alice, Bob, and Charlie respectively.\\nOutput Format\\nFor each test case, output who (out of Alice, Bob, and Charlie) will win the auction.\\nYou may print each character of Alice, Bob, and Charlie in uppercase or lowercase (for example, ALICE, aliCe, aLIcE will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4A,B,C\\xe2\\x89\\xa41000\\nA,\\nB, and\\nC are distinct.\\nSample 1:\\nInput\\nOutput\\n4\\n200 100 400\\n155 1000 566\\n736 234 470\\n124 67 2\\nCharlie\\nBob\\nAlice\\nAlice\\nExplanation:\\nTest Case\\n1: Charlie wins the auction since he bid the highest amount.\\nTest Case\\n2: Bob wins the auction since he bid the highest amount.\\nTest Case\\n3: Alice wins the auction since she bid the highest amount.\\nTest Case\\n4: Alice wins the auction since she bid the highest amount.'",
        "47": "b\"Overspeeding Fine\\nChef was driving on a highway at a speed of\\nX km\/hour.\\nTo avoid accidents, there are fine imposed on overspeeding as follows:\\nNo fine if the speed of the car\\n\\xe2\\x89\\xa470 km\/hour.\\nRs\\n500 fine if the speed of the car is strictly greater than\\n70 and\\n\\xe2\\x89\\xa4100.\\nRs\\n2000 fine if the speed of the car is strictly greater than\\n100.\\nDetermine the fine Chef needs to pay.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single integer\\nX denoting the speed of Chef's car.\\nOutput Format\\nFor each test case, output the fine paid by Chef.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4200\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4200\\nSample 1:\\nInput\\nOutput\\n7\\n40\\n110\\n70\\n100\\n69\\n101\\n85\\n0\\n2000\\n0\\n500\\n0\\n2000\\n500\\nExplanation:\\nTest case\\n1: The speed is\\n\\xe2\\x89\\xa470. Thus, Chef does not need to pay any fine.\\nTest case\\n2: The speed is greater than\\n100. Thus, Chef needs to pay\\n2000 as fine.\\nTest case\\n3: The speed is\\n\\xe2\\x89\\xa470. Thus, Chef does not need to pay any fine.\\nTest case\\n4: The speed is greater than\\n70 and\\n\\xe2\\x89\\xa4100. Thus, Chef needs to pay\\n500 as fine amount.\\nTest case\\n5: The speed is\\n\\xe2\\x89\\xa470. Thus, Chef does not need to pay any fine.\\nTest case\\n6: The speed is greater than\\n100. Thus, Chef needs to pay\\n2000 as fine.\\nTest case\\n7: The speed is greater than\\n70 and\\n\\xe2\\x89\\xa4100. Thus, Chef needs to pay\\n500 as fine amount.\"",
        "48": "b'Chess Time\\nChef has recently started playing chess, and wants to play as many games as possible.\\nHe calculated that playing one game of chess takes at least\\n20 minutes of his time.\\nChef has\\nN hours of free time. What is the maximum number of complete chess games he can play in that time?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line containing a single integer,\\nN.\\nOutput Format\\nFor each test case, output on a new line the maximum number of complete chess games Chef can play in\\nN hours.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n4\\n1\\n10\\n7\\n3\\n3\\n30\\n21\\n9\\nExplanation:\\nTest case\\n1: If every game Chef plays takes\\n20 minutes, he can play\\n3 games in one hour.\\nTest case\\n2: If every game Chef plays takes\\n20 minutes, he can play\\n30 games in\\n10 hours.\\nTest case\\n3: If every game Chef plays takes\\n20 minutes, he can play\\n21 games in\\n7 hours.\\nTest case\\n4: If every game Chef plays takes\\n20 minutes, he can play\\n9 games in\\n3 hours.'",
        "49": "b\"Passes for Fair\\nThere is a fair going on in Chefland. Chef wants to visit the fair along with his\\nN friends. Chef manages to collect\\nK passes for the fair. Will Chef be able to enter the fair with all his\\nN friends?\\nA person can enter the fair using one pass, and each pass can be used by only one person.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line containing two space-separated integers\\nN,K.\\nOutput Format\\nFor each test case, print on a new line YES if Chef will be able to enter the fair with all his\\nN friends and NO otherwise.\\nYou may print each character of the string in either uppercase or lowercase (for example, the strings yEs, yes, Yes, and YES will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N,K\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n5 8\\n6 3\\n2 2\\n1 2\\nYES\\nNO\\nNO\\nYES\\nExplanation:\\nTest case\\n1: Chef needs\\n5 passes for his friends and one pass for himself and he collected\\n8 passes. Thus he will be able to enter the fair with all his friends.\\nTest case\\n2: Chef needs\\n6 passes for his friends and one pass for himself while he collected only\\n3 passes. Thus he will not be able to enter the fair with all his friends, only three of them can enter the fair.\\nTest case\\n3: Chef needs\\n2 passes for his friends and one pass for himself while he collected only\\n2 passes. Thus either Chef or one of his friends can't enter the fair.\\nTest case\\n4: Chef needs a total of\\n2 passes, one for himself and one for his friend. He collected\\n2 passes. Thus he will be able to enter the fair with his friend.\"",
        "50": "b'Read Pages\\nChef has started studying for the upcoming test. The textbook has\\nN pages in total. Chef wants to read at most\\nX pages a day for\\nY days.\\nFind out whether it is possible for Chef to complete the whole book.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case contains three space-separated integers\\nN,X, and\\nY \\xe2\\x80\\x94 the number of pages, the number of pages Chef can read in a day, and the number of days.\\nOutput Format\\nFor each test case, output on a new line, YES, if Chef can complete the whole book in given time, and NO otherwise.\\nYou may print each character of the string in uppercase or lowercase. For example, Yes, YES, yes, and yES are all considered identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n4\\n5 2 3\\n10 3 3\\n7 7 1\\n3 2 1\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nTest case\\n1: Chef can read two pages on the first day, two on the second day, and the remaining one on the third day.\\nTest case\\n2: Chef cannot complete all ten pages in three days.\\nTest case\\n3: Chef can read all seven pages in one day.\\nTest case\\n4: Chef cannot complete all three pages in one day.'",
        "51": "b'Couple Game\\nThere are\\nG girl and\\nB boy students at IIT (BHU) such that\\nB>G.\\nIf ICM were a team game where teams could only be of size\\n2, having exactly\\n1 girl student and\\n1 boy student, what would be the minimum number of boy students from IIT (BHU) who would not be able to participate?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case contains two space-separated integers\\nG and\\nB, the number of girl and boy students at IIT (BHU) respectively.\\nOutput Format\\nFor each test case, output a single integer on a new line, the minimum number of boy students from IIT (BHU) who would not be able to participate.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4G<B\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n1 3\\n2 4\\n3 10\\n2\\n2\\n7\\nExplanation:\\nTest case\\n1: There is only\\n1 girl and\\n3 boys. So, one team can be formed, and minimum\\n2 boys will be left behind.\\nTest case\\n2: There are\\n2 girls and\\n4 boys. So, maximum\\n2 teams can be formed, and minimum\\n2 boys will be left behind.\\nTest case\\n3: There are\\n3 girls and\\n10 boys. So, maximum\\n3 teams can be formed, and minimum\\n7 boys will be left behind.'",
        "52": "b'Air Quality Index\\nIn the light of G-20 summit, government has decided to keep the average air quality index (AQI) strictly below\\n100.\\nOn some random day, Chef measures the AQI and found the value to be\\nX.\\nFind whether the government was able to keep the AQI within limits.\\nInput Format\\nThe input consists of an integer\\nX \\xe2\\x80\\x94 the AQI Chef measured.\\nOutput Format\\nOutput YES, if the government was able to keep the AQI within limits and NO otherwise.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4150\\nSample 1:\\nInput\\nOutput\\n50\\nYES\\nExplanation:\\nThe AQI is strictly less than\\n100. Thus, the government was able to keep the AQI within limits.\\nSample 2:\\nInput\\nOutput\\n100\\nNO\\nExplanation:\\nThe AQI is equal to\\n100. Thus, the government was not able to keep the AQI within limits.\\nSample 3:\\nInput\\nOutput\\n99\\nYES\\nExplanation:\\nThe AQI is strictly less than\\n100. Thus, the government was able to keep the AQI within limits.\\nSample 4:\\nInput\\nOutput\\n145\\nNO\\nExplanation:\\nThe AQI is greater than\\n100. Thus, the government was not able to keep the AQI within limits.'",
        "53": "b'Fever\\nChef is not feeling well today. He measured his body temperature using a thermometer and it came out to be\\nX \\xc2\\xb0F.\\nA person is said to have fever if his body temperature is strictly greater than\\n98 \\xc2\\xb0F.\\nDetermine if Chef has fever or not.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains one integer\\nX - the body temperature of Chef in \\xc2\\xb0F.\\nOutput Format\\nFor each test case, output YES if Chef has fever. Otherwise, output NO.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n94\\xe2\\x89\\xa4X\\xe2\\x89\\xa4103\\nSample 1:\\nInput\\nOutput\\n3\\n98\\n100\\n96\\nNO\\nYES\\nNO\\nExplanation:\\nTest Case 1: Since\\nX=98 is not greater than\\n98, Chef does not have fever.\\nTest Case 2: Since\\nX=100 is greater than\\n98, Chef has fever.\\nTest Case 3: Since\\nX=96 is not greater than\\n98, Chef does not have fever.'",
        "54": "b'Sleep deprivation\\nA person is said to be sleep deprived if he slept strictly less than\\n7 hours in a day.\\nChef was only able to sleep\\nX hours yesterday. Determine if he is sleep deprived or not.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains one integer\\nX \\xe2\\x80\\x94 the number of hours Chef slept.\\nOutput Format\\nFor each test case, output YES if Chef is sleep-deprived. Otherwise, output NO.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa420\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa415\\nSample 1:\\nInput\\nOutput\\n3\\n4\\n7\\n10\\nYES\\nNO\\nNO\\nExplanation:\\nTest Case 1: Since\\n4<7, Chef is sleep deprived.\\nTest Case 2: Since\\n7\\xe2\\x89\\xa57, Chef is not sleep deprived.\\nTest Case 3: Since\\n10\\xe2\\x89\\xa57, Chef is not sleep deprived.'",
        "55": "b'MATH1 Enrolment\\nFor the upcoming semester, the admins of your university decided to keep a total of\\nX seats for the MATH-1 course. A student interest survey was conducted by the admins and it was found that\\nY students were interested in taking up the MATH-1 course.\\nFind the minimum number of extra seats that the admins need to add into the MATH-1 course to make sure that every student who is interested in taking the course would be able to do so.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two-space separated integers on a single line,\\nX and\\nY \\xe2\\x80\\x94 the current number of seats up for enrolment and the number of students interested in taking up the course in the upcoming semester, respectively.\\nOutput Format\\nFor each test case, output on a new line the minimum number of seats required to be added.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa410\\n5\\nSample 1:\\nInput\\nOutput\\n4\\n1 1\\n12 34\\n50 49\\n49 50\\n0\\n22\\n0\\n1\\nExplanation:\\nTest case\\n1: Exactly\\n1 seat is available for enrolment, and exactly\\n1 student is interested in taking up the course, hence addition of more seats is not required.\\nTest case\\n2:\\n12 seats are available for enrolment but\\n34 students are interested in taking up the course, hence the admins would have to add\\n34\\xe2\\x88\\x9212=22 more seats to make sure that every student interested in the course gets a seat.\\nTest case\\n3:\\n50 seats are available for enrolment and\\n49 students are interested in taking up the course, hence addition of more seats is not required.\\nTest case\\n4:\\n49 seats are available for enrolment, but\\n50 students are interested in taking up the course, hence the admins would have to add\\n50\\xe2\\x88\\x9249=1 more seat to make sure that every student interested in the course gets a seat.'",
        "56": "b'Chef and Chapters\\nThis semester, Chef took\\nX courses. Each course has\\nY units and each unit has\\nZ chapters in it.\\nFind the total number of chapters Chef has to study this semester.\\nInput Format\\nThe first line will contain\\nT, the number of test cases. Then the test cases follow.\\nEach test case consists of a single line of input, containing three space-separated integers\\nX,Y, and\\nZ.\\nOutput Format\\nFor each test case, output in a single line the total number of chapters Chef has to study this semester.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X,Y,Z\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n3\\n1 1 1\\n2 1 2\\n1 2 3\\n1\\n4\\n6\\nExplanation:\\nTest case\\n1: There is only\\n1 course with\\n1 unit. The unit has\\n1 chapter. Thus, the total number of chapters is\\n1.\\nTest case\\n2: There are\\n2 courses with\\n1 unit each. Thus, there are\\n2 units. Each unit has\\n2 chapters. Thus, the total number of chapters is\\n4.\\nTest case\\n3: There is only\\n1 course with\\n2 units. Each unit has\\n3 chapters. Thus, the total number of chapters is\\n6.'",
        "57": "b'Water Requirement\\nFinally, after purchasing a water cooler during the April long challenge, Chef noticed that his water cooler requires\\n2 liters of water to cool for one hour.\\nHow much water (in liters) would be required by the cooler to cool for\\nN hours?\\nInput Format\\nThe first line of input will contain an integer\\nT \\xe2\\x80\\x94 the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains an integer\\nN, as described in the problem statement.\\nOutput Format\\nFor each test case, output the number of liters of water required by the water cooler to cool for\\nN hours.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n2\\n1\\n2\\n2\\n4\\nExplanation:\\nTest case\\n1: As mentioned in the problem statement,\\n2 liters of water is required by the water cooler to cool for\\n1 hour.\\nTest case\\n2:\\n4 liters of water is required by the water cooler to cool for\\n2 hours.'",
        "58": "b'Lunchtime\\nChef has his lunch only between\\n1 pm and\\n4 pm (both inclusive).\\nGiven that the current time is\\nX pm, find out whether it is lunchtime for Chef.\\nInput Format\\nThe first line of input will contain a single integer\\nT, the number of test cases. Then the test cases follow.\\nEach test case contains a single line of input, containing one integer\\nX.\\nOutput Format\\nFor each test case, print in a single line\\nYES if it is lunchtime for Chef. Otherwise, print\\nNO.\\nYou may print each character of the string in either uppercase or lowercase (for example, the strings\\nYeS,\\nyEs,\\nyes and\\nYES will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa412\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa412\\nSample 1:\\nInput\\nOutput\\n3\\n1\\n7\\n3\\nYES\\nNO\\nYES\\nExplanation:\\nTest case\\n1: Lunchtime is between\\n1 pm and\\n4 pm (both inclusive). Since\\n1 pm lies within lunchtime, the answer is\\nYES.\\nTest case\\n2: Lunchtime is between\\n1 pm and\\n4 pm (both inclusive). Since\\n7 pm lies outside lunchtime, the answer is\\nNO.\\nTest case\\n3: Lunchtime is between\\n1 pm and\\n4 pm (both inclusive). Since\\n3 pm lies within lunchtime, the answer is\\nYES.'",
        "59": "b'Good Investment or Not\\nChef has invested his money at an interest rate of\\nX percent per annum while the current inflation rate is\\nY percent per annum.\\nAn investment is called good if and only if the interest rate of the investment is at least twice of the inflation rate.\\nDetermine whether the investment made by Chef is good or not.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two integers\\nX and\\nY, the interest rate and the current inflation rate respectively.\\nOutput Format\\nFor each test case, output YES if the investment is good, NO otherwise.\\nYou can output any letter in any case. For example YES, yes, yES are all considered same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4400\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa420\\nSample 1:\\nInput\\nOutput\\n5\\n7 4\\n6 3\\n2 4\\n10 10\\n20 1\\nNO\\nYES\\nNO\\nNO\\nYES\\nExplanation:\\nTest case\\n1: The interest rate is\\n7 and the current inflation rate is\\n4. Since the interest rate is less than twice of current inflation rate, the investment is not good.\\nTest case\\n2: The interest rate is\\n6 and the current inflation rate is\\n3. Since the interest rate is equal to twice of current inflation rate, the investment is good.\\nTest case\\n3: The interest rate is\\n2 and the current inflation rate is\\n4. Since the interest rate is less than twice of current inflation rate, the investment is not good.\\nTest case\\n4: The interest rate is\\n10 and the current inflation rate is\\n10. Since the interest rate is less than twice of current inflation rate, the investment is not good.\\nTest case\\n5: The interest rate is\\n20 and the current inflation rate is\\n1. Since the interest rate is greater than twice of current inflation rate, the investment is good.'",
        "60": "b'Final Population\\nThere were initially\\nX million people in a town, out of which\\nY million people left the town and\\nZ million people immigrated to this town.\\nDetermine the final population of town in millions.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case consists of three integers\\nX,\\nY and\\nZ.\\nOutput Format\\nFor each test case, output the final population of the town in millions.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y,Z\\xe2\\x89\\xa410\\nY\\xe2\\x89\\xa4X\\nSample 1:\\nInput\\nOutput\\n4\\n3 1 2\\n2 2 2\\n4 1 8\\n10 1 10\\n4\\n2\\n11\\n19\\nExplanation:\\nTest case\\n1: The initial population of the town was\\n3 million, out of which\\n1 million people left and\\n2 million people entered the town. So, final population\\n=3\\xe2\\x88\\x921+2=4 million.\\nTest case\\n2: The initial population of the town was\\n2 million, out of which\\n2 million left and\\n2 million immigrated. The final population is thus\\n2+2\\xe2\\x88\\x922=2 million.'",
        "61": "b\"Chef gives Party\\nChef wants to give a burger party to all his\\nN friends i.e. he wants to buy one burger for each of his friends.\\nThe cost of each burger is\\nX rupees while Chef has a total of\\nK rupees.\\nDetermine whether he has enough money to buy a burger for each of his friends or not.\\nInput Format\\nThe first line contains a single integer\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains the three integers\\nN,\\nX, and\\nK - the number of Chef's friends, the cost of each burger, and the total money Chef has, respectively.\\nOutput Format\\nFor each test case, output YES if the Chef can give a party to all his\\nN friends. Otherwise, output NO.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N,X\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410000\\nSample 1:\\nInput\\nOutput\\n4\\n5 10 70\\n5 10 40\\n10 40 400\\n14 14 150\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nTest case\\n1: Chef has\\n5 friends. The cost of buying a burger for each of them will be\\n10\\xc3\\x975=50 while Chef has\\n70 rupees. Therefore, he can buy a burger for all of them.\\nTest case\\n2: Chef has\\n5 friends. The cost of buying a burger for each of them will be\\n10\\xc3\\x975=50 while Chef has\\n40 rupees. Therefore, he can not buy a burger for all of them.\\nTest case\\n3: Chef has\\n10 friends. The cost of buying a burger for each of them will be\\n40\\xc3\\x9710=400 and Chef has\\n400 rupees. Therefore, he can buy a burger for all of them.\\nTest case\\n4: Chef has\\n14 friends. The cost of buying a burger for each of them will be\\n14\\xc3\\x9714=196 while Chef has\\n150 rupees. Therefore, he can not buy a burger for all of them.\"",
        "62": "b'Time Complexity\\nA sorting algorithm\\nA is said to have more time complexity than a sorting algorithm\\nB if it uses more number of comparisons for sorting the same array than algorithm\\nB.\\nGiven that algorithm\\nA uses\\nX comparisons to sort an array and algorithm\\nB uses\\nY comparisons to sort the same array, find whether algorithm\\nA has more time complexity.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two space-separated integers\\nX and\\nY \\xe2\\x80\\x94 the number of comparisons used by algorithms\\nA and\\nB to sort the array respectively.\\nOutput Format\\nFor each test case, output on a new line, YES, if the algorithm\\nA has more time complexity than\\nB and NO otherwise.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n9 9\\n15 7\\n10 19\\n21 20\\nNO\\nYES\\nNO\\nYES\\nExplanation:\\nTest case\\n1: The number of comparisons used by algorithm\\nA is\\n9 and that used by\\nB is also\\n9. Since the number of comparisons used by\\nA is not more than that of\\nB,\\nA does not have more time complexity than\\nB.\\nTest case\\n2: The number of comparisons used by algorithm\\nA is\\n15 and that used by\\nB is\\n7. Since the number of comparisons used by\\nA is more than that of\\nB,\\nA does have more time complexity than\\nB.\\nTest case\\n3: The number of comparisons used by algorithm\\nA is\\n10 and that used by\\nB is\\n19. Since the number of comparisons used by\\nA is not more than that of\\nB,\\nA does not have more time complexity than\\nB.\\nTest case\\n4: The number of comparisons used by algorithm\\nA is\\n21 and that used by\\nB is\\n20. Since the number of comparisons used by\\nA is more than that of\\nB,\\nA does have more time complexity than\\nB.'",
        "63": "b'Interior Design\\nChef decided to redecorate his house, and now needs to decide between two different styles of interior design.\\nFor the first style, tiling the floor will cost\\nX\\n1\\nrupees and painting the walls will cost\\nY\\n1\\nrupees.\\nFor the second style, tiling the floor will cost\\nX\\n2\\nrupees and painting the walls will cost\\nY\\n2\\nrupees.\\nChef will choose whichever style has the lower total cost. How much will Chef pay for his interior design?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line of input, containing\\n4 space-separated integers\\nX\\n1\\n,Y\\n1\\n,X\\n2\\n,Y\\n2\\nas described in the statement.\\nOutput Format\\nFor each test case, output on a new line the amount Chef will pay for interior design.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\n1\\n,Y\\n1\\n,X\\n2\\n,Y\\n2\\n\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n10 20 9 25\\n10 20 9 20\\n10 20 20 10\\n100 43 85 61\\n30\\n29\\n30\\n143\\nExplanation:\\nTest case\\n1: The first style costs\\n10+20=30 rupees, and the second costs\\n9+25=34 rupees. The first is cheaper, so Chef will pay\\n30 rupees.\\nTest case\\n2: The first style costs\\n10+20=30 rupees, and the second costs\\n9+20=29 rupees. The second is cheaper, so Chef will pay\\n29 rupees.\\nTest case\\n3: The first style costs\\n10+20=30 rupees, and the second costs\\n20+10=30 rupees. Both styles cost the same, so Chef is always going to pay\\n30 rupees.\\nTest case\\n4: The first style costs\\n100+43=143 rupees, and the second costs\\n85+61=146 rupees. The first is cheaper, so Chef will pay\\n143 rupees.'",
        "64": "b'Car Trip\\nChef rented a car for a day.\\nUsually, the cost of the car is Rs\\n10 per km. However, since Chef has booked the car for the whole day, he needs to pay for at least\\n300 kms even if the car runs less than\\n300 kms.\\nIf the car ran\\nX kms, determine the cost Chef needs to pay.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single integer\\nX - denoting the number of kms Chef travelled.\\nOutput Format\\nFor each test case, output the cost Chef needs to pay.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n5\\n800\\n3\\n299\\n301\\n300\\n8000\\n3000\\n3000\\n3010\\n3000\\nExplanation:\\nTest case\\n1: The car runs for\\n800 kms. Thus, he needs to pay\\n800\\xe2\\x8b\\x8510=8000 rupees.\\nTest case\\n2: The car runs for\\n3 kms. However, since Chef booked the car for whole day, he needs to pay for at least\\n300 kms. Thus, he needs to pay\\n300\\xe2\\x8b\\x8510=3000 rupees.\\nTest case\\n3: The car runs for\\n299 kms. However, since Chef booked the car for whole day, he needs to pay for at least\\n300 kms. Thus, he needs to pay\\n300\\xe2\\x8b\\x8510=3000 rupees.\\nTest case\\n4: The car runs for\\n301 kms. Thus, he needs to pay\\n301\\xe2\\x8b\\x8510=3010 rupees.\\nTest case\\n5: The car runs for\\n300 kms. Thus, he needs to pay\\n300\\xe2\\x8b\\x8510=3000 rupees.'",
        "65": "b'Multivitamin Tablets\\nThe doctor prescribed Chef to take a multivitamin tablet\\n3 times a day for the next\\nX days.\\nChef already has\\nY multivitamin tablets.\\nDetermine if Chef has enough tablets for these\\nX days or not.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two space-separated integers\\nX and\\nY \\xe2\\x80\\x94 the number of days Chef needs to take tablets and the number of tablets Chef already has.\\nOutput Format\\nFor each test case, output YES if Chef has enough tablets for these\\nX days. Otherwise, output NO.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42000\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4Y\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n4\\n1 10\\n12 0\\n10 29\\n10 30\\nYES\\nNO\\nNO\\nYES\\nExplanation:\\nTest Case 1: Chef has\\n10 tablets and Chef needs\\n3 tablets for\\n1 day. Therefore Chef has enough tablets.\\nTest Case 2: Chef has\\n0 tablets and Chef needs\\n36 tablets for\\n12 days. Therefore Chef does not have enough tablets.\\nTest Case 3: Chef has\\n29 tablets and Chef needs\\n30 tablets for\\n10 days. Therefore Chef does not have enough tablets.\\nTest Case 4: Chef has\\n30 tablets and Chef needs\\n30 tablets for\\n10 days. Therefore Chef has enough tablets.'",
        "66": "b'Six Friends\\nSix friends go on a trip and are looking for accommodation. After looking for hours, they find a hotel which offers two types of rooms \\xe2\\x80\\x94 double rooms and triple rooms. A double room costs Rs.\\nX, while a triple room costs Rs.\\nY.\\nThe friends can either get three double rooms or get two triple rooms. Find the minimum amount they will have to pay to accommodate all six of them.\\nInput Format\\nThe first line contains a single integer\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two integers\\nX and\\nY - the cost of a double room and the cost of a triple room.\\nOutput Format\\nFor each testcase, output the minimum amount required to accommodate all the six friends.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X<Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n10 15\\n6 8\\n4 8\\n30\\n16\\n12\\nExplanation:\\nTest case 1: The friends can take three double rooms and thus pay a total of Rs.\\n30.\\nTest case 2: The friends can take two triple rooms and thus pay a total of Rs.\\n16.\\nTest case 3: The friends can take three double rooms and thus pay a total of Rs.\\n12.'",
        "67": "b'Chef and Wire Frames\\nChef has a rectangular plate of length\\nNcm and width\\nMcm. He wants to make a wireframe around the plate. The wireframe costs\\nX rupees per cm.\\nDetermine the cost Chef needs to incur to buy the wireframe.\\nInput Format\\nFirst line will contain\\nT, the number of test cases. Then the test cases follow.\\nEach test case consists of a single line of input, containing three space-separated integers\\nN,M, and\\nX \\xe2\\x80\\x94 the length of the plate, width of the plate, and the cost of frame per cm.\\nOutput Format\\nFor each test case, output in a single line, the price Chef needs to pay for the wireframe.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N,M,X\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n3\\n10 10 10\\n23 3 12\\n1000 1000 1000\\n400\\n624\\n4000000\\nExplanation:\\nTest case\\n1: The total length of the frame is\\n2\\xe2\\x8b\\x8510+2\\xe2\\x8b\\x8510=40 cms. Since the cost is\\n10 per cm, the total cost would be\\n10\\xe2\\x8b\\x8540=400.\\nTest case\\n2: The total length of the frame is\\n2\\xe2\\x8b\\x8523+2\\xe2\\x8b\\x853=52 cms. Since the cost is\\n12 per cm, the total cost would be\\n52\\xe2\\x8b\\x8512=624.\\nTest case\\n3: The total length of the frame is\\n2\\xe2\\x8b\\x851000+2\\xe2\\x8b\\x851000=4000 cms. Since the cost is\\n1000 per cm, the total cost would be\\n4000\\xe2\\x8b\\x851000=4000000.'",
        "68": "b'Minimum Coins\\nThere are only\\n2 type of denominations in Chefland:\\nCoins worth\\n1 rupee each\\nNotes worth\\n10 rupees each\\nChef wants to pay his friend exactly\\nX rupees. What is the minimum number of coins Chef needs to pay exactly\\nX rupees?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line of input containing a single integer\\nX.\\nOutput Format\\nFor each test case, output on a new line the minimum number of coins Chef needs to pay exactly\\nX rupees.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n4\\n53\\n100\\n9\\n11\\n3\\n0\\n9\\n1\\nExplanation:\\nTest case\\n1: Chef can use\\n5 notes and\\n3 coins in the optimal case.\\nTest case\\n2: Chef can use\\n10 notes and\\n0 coins in the optimal case.\\nTest case\\n3: Chef can only use\\n9 coins.\\nTest case\\n4: Chef can use\\n1 note and\\n1 coin in the optimal case.'",
        "69": "b'Spice Level\\nEach item in Chef\\xe2\\x80\\x99s menu is assigned a spice level from\\n1 to\\n10. Based on the spice level, the item is categorised as:\\nMILD: If the spice level is less than\\n4.\\nMEDIUM: If the spice level is greater than equal to\\n4 but less than\\n7.\\nHOT: If the spice level is greater than equal to\\n7.\\nGiven that the spice level of an item is\\nX, find the category it lies in.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of an integer\\nX \\xe2\\x80\\x94 the spice level of the item.\\nOutput Format\\nFor each test case, output on a new line, the category that the item lies in.\\nYou may print each character in uppercase or lowercase. For example, HOT, hot, Hot, and hOT are all considered the same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n4\\n4\\n1\\n6\\n9\\nMEDIUM\\nMILD\\nMEDIUM\\nHOT\\nExplanation:\\nTest case\\n1: The spice level is greater than\\n4 but less than\\n7. Thus, it is in MEDIUM category.\\nTest case\\n2: The spice level is less than\\n4. Thus, it is in MILD category.\\nTest case\\n3: The spice level is greater than\\n4 but less than\\n7. Thus, it is in MEDIUM category.\\nTest case\\n4: The spice level is greater than\\n7. Thus, it is in HOT category.'",
        "70": "b\"The Gift\\nOm has\\nX rupees. He wants to gift a laptop worth\\nN rupees to his girlfriend.\\nWe know that Om is the technical secretary of IIIT-A and has access to the Gymkhana funds of IIIT-A. Currently there are\\nM rupees in the fund and Om can use the fund as much as he wants.\\nFind whether Om can gift his girlfriend a new laptop.\\nInput Format\\nThe first and only line of input contains three space-separated integers\\nX,\\nN, and\\nM \\xe2\\x80\\x94 the amount Om has, the price of the laptop, and the amount present in the Gymkhana fund respectively.\\nOutput Format\\nFor each input, output YES if Om can buy the laptop and NO otherwise.\\nYou may print each character in uppercase or lowercase. For example YES, Yes, yes, and yES are all considered the same.\\nConstraints\\n1\\xe2\\x89\\xa4X,N,M\\xe2\\x89\\xa410\\n3\\nSample 1:\\nInput\\nOutput\\n5 10 15\\nYES\\nExplanation:\\nOm uses\\n5 rupees from Gymkhana fund. So, the amount he has is\\n5+5=10 rupees. He can buy the laptop with cost\\n10 rupees.\\nSample 2:\\nInput\\nOutput\\n4 50 7\\nNO\\nExplanation:\\nEven if Om uses the whole Gymkhana fund, he won't be able to buy the laptop.\"",
        "71": "b'Reach Home\\nChef is hungry and wants to reach home.\\nChef can travel up to\\n5 kilometres on\\n1 litre of fuel on his motorcycle.\\nCurrently, his motorcycle is filled with\\nX litres of fuel and his home is\\nY kilometres away.\\nDetermine whether Chef can reach his home on his motorcycle or not.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case contains two space-separated integers\\nX and\\nY \\xe2\\x80\\x94 the amount of fuel in Chef\\xe2\\x80\\x99s motorcycle and the distance to Chef\\xe2\\x80\\x99s home in kilometres.\\nOutput Format\\nFor each test case, output YES, if Chef can reach home on his motorcycle. Otherwise output NO.\\nYou can output each character of the answer in uppercase or lowercase. For example, the strings yEs, yes, Yes, and YES are considered the same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n4\\n2 10\\n3 17\\n4 2\\n6 45\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nTest case\\n1: With\\n2 litres of fuel, Chef can go up to\\n10 kilometres. Since his home is\\n10 kilometres away, he can reach his home on his motorcycle.\\nTest case\\n2: With\\n3 litres of fuel, Chef can go up to\\n15 kilometres. Since his home is\\n17 kilometres away, he cannot reach his home on his motorcycle.\\nTest case\\n3: With\\n4 litres of fuel, Chef can go up to\\n20 kilometres. Since his home is\\n2 kilometres away, he can reach his home on his motorcycle.\\nTest case\\n4: With\\n6 litres of fuel, Chef can go up to\\n30 kilometres. Since his home is\\n45 kilometres away, he cannot reach his home on his motorcycle.'",
        "72": "b'Donation Rewards\\nOn the occasion of World Blood Donor Day, Chef has organized an event to reward regular blood donars in Chefland.\\nIf the donor has made less than or equal to\\n3 donations, they receive a BRONZE donor badge.\\nIf the donor has made more than\\n3 but less than equal to\\n6 donations, they receive a SILVER donor badge.\\nIf the donor has made more than\\n6 donations, they receive a GOLD donor badge.\\nGiven that a person has made\\nX donations, find the badge they receive.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case contains an integer\\nX, denoting the number of blood donations the person has made.\\nOutput Format\\nFor each test case, output on a new line:\\nBRONZE, if the person has made less than or equal to\\n3 donations;\\nSILVER, if the person has made more than\\n3 but less than equal to\\n6 donations;\\nGOLD, if the person has made more than\\n6 donations.\\nEach character can be printed in uppercase or lowercase. For example, GOLD, gold, Gold, and gOlD are considered identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n4\\n1\\n3\\n5\\n7\\nBRONZE\\nBRONZE\\nSILVER\\nGOLD\\nExplanation:\\nTest case\\n1: The person has made less than equal to\\n3 donations. Thus they receive bronze badge.\\nTest case\\n2: The person has made less than equal to\\n3 donations. Thus they receive bronze badge.\\nTest case\\n3: The person has made more than\\n3 but less than equal to\\n6 donations. Thus they receive silver badge.\\nTest case\\n4: The person has made more than\\n6 donations. Thus they receive gold badge.'",
        "73": "b\"True and False Paper\\nAlice wrote an exam containing\\nN true or false questions (i.e. questions whose answer is either true or false). Each question is worth\\n1 mark and there is no negative marking in the examination. Alice scored\\nK marks out of\\nN.\\nBob wrote the same exam but he marked each and every question as the opposite of what Alice did, i.e, for whichever questions Alice marked true, Bob marked false and for whichever questions Alice marked false, Bob marked true.\\nDetermine the score of Bob.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two space-separated integers\\nN and\\nK \\xe2\\x80\\x94 the total number of questions in the exam and the score of Alice.\\nOutput Format\\nFor each test case, output on a new line the score of Bob.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4K\\xe2\\x89\\xa4N\\nSample 1:\\nInput\\nOutput\\n3\\n1 1\\n50 0\\n100 76\\n0\\n50\\n24\\nExplanation:\\nTest case\\n1: There was one question in the exam and Alice answered it correctly. This means that Bob will surely answer it incorrectly. Therefore Bob's score is zero.\\nTest case\\n2: Alice answered all the questions incorrectly, and so Bob will surely answer all the questions correctly. Therefore Bob's score is\\n50.\"",
        "74": "b'The Cheaper Cab\\nChef has to travel to another place. For this, he can avail any one of two cab services.\\nThe first cab service charges\\nX rupees.\\nThe second cab service charges\\nY rupees.\\nChef wants to spend the minimum amount of money. Which cab service should Chef take?\\nInput Format\\nThe first line will contain\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two integers\\nX and\\nY - the prices of first and second cab services respectively.\\nOutput Format\\nFor each test case, output FIRST if the first cab service is cheaper, output SECOND if the second cab service is cheaper, output ANY if both cab services have the same price.\\nYou may print each character of FIRST, SECOND and ANY in uppercase or lowercase (for example, any, aNy, Any will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n30 65\\n42 42\\n90 50\\nFIRST\\nANY\\nSECOND\\nExplanation:\\nTest case\\n1: The first cab service is cheaper than the second cab service.\\nTest case\\n2: Both the cab services have the same price.\\nTest case\\n3: The second cab service is cheaper than the first cab service.'",
        "75": "b'Discount\\nAlice buys a toy with a selling price of\\n100 rupees. There is a discount of\\nx percent on the toy. Find the amount Alice needs to pay for it.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case contains a single integer,\\nx \\xe2\\x80\\x94 the discount on the toy.\\nOutput Format\\nFor each test case, output on a new line the price that Alice needs to pay.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4x<100\\nSample 1:\\nInput\\nOutput\\n4\\n5\\n9\\n11\\n21\\n95\\n91\\n89\\n79\\nExplanation:\\nTest case\\n1: The discount is\\n5 percent, i.e.\\n5 rupees. So, Alice will have to pay\\n100\\xe2\\x88\\x925=95 rupees.'",
        "76": "b'Height of Rationals\\nIn a recent breakthrough in mathematics, the proof utilized a concept called Height.\\nConsider a fraction\\nb\\na\\n. Its Height is defined as the maximum of its numerator and denominator. So, for example, the Height of\\n19\\n3\\nwould be\\n19, and the Height of\\n4\\n27\\nwould be\\n27.\\nGiven\\na and\\nb, find the Height of\\nb\\na\\n.\\nInput Format\\nThe only line of input contains two integers,\\na and\\nb.\\nOutput Format\\nOutput a single integer, which is the Height of\\nb\\na\\n.\\nConstraints\\n1\\xe2\\x89\\xa4a,b\\xe2\\x89\\xa4100\\na and\\nb do not have any common factors.\\nSample 1:\\nInput\\nOutput\\n3 19\\n19\\nExplanation:\\nThe maximum of\\n{3,19} is\\n19. Hence the Height of\\n19\\n3\\nis\\n19.\\nSample 2:\\nInput\\nOutput\\n27 4\\n27\\nExplanation:\\nThe maximum of\\n{27,4} is\\n27. Hence the Height of\\n4\\n27\\nis\\n27.'",
        "77": "b'Instagram\\nChef categorises an instagram account as spam, if, the following count of the account is more than\\n10 times the count of followers.\\nGiven the following and follower count of an account as\\nX and\\nY respectively, find whether it is a spam account.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two space-separated integers\\nX and\\nY \\xe2\\x80\\x94 the following and follower count of an account, respectively.\\nOutput Format\\nFor each test case, output on a new line, YES, if the account is spam and NO otherwise.\\nYou may print each character of the string in uppercase or lowercase. For example, the strings YES, yes, Yes and yES are identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n1 10\\n10 1\\n11 1\\n97 7\\nNO\\nNO\\nYES\\nYES\\nExplanation:\\nTest case\\n1: The following count is\\n1 while the follower count is\\n10. Since the following count is not more than\\n10 times the follower count, the account is not spam.\\nTest case\\n2: The following count is\\n10 while the follower count is\\n1. Since the following count is not more than\\n10 times the follower count, the account is not spam.\\nTest case\\n3: The following count is\\n11 while the follower count is\\n1. Since the following count is more than\\n10 times the follower count, the account is spam.\\nTest case\\n4: The following count is\\n97 while the follower count is\\n7. Since the following count is more than\\n10 times the follower count, the account is spam.'",
        "78": "b'Volume Control\\nChef is watching TV. The current volume of the TV is\\nX. Pressing the volume up button of the TV remote increases the volume by\\n1 while pressing the volume down button decreases the volume by\\n1. Chef wants to change the volume from\\nX to\\nY. Find the minimum number of button presses required to do so.\\nInput Format\\nThe first line contains a single integer\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two integers\\nX and\\nY - the initial volume and final volume of the TV.\\nOutput Format\\nFor each test case, output the minimum number of times Chef has to press a button to change the volume from\\nX to\\nY.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n2\\n50 54\\n12 10\\n4\\n2\\nExplanation:\\nTest Case 1: Chef can press the volume up button\\n4 times to increase the volume from\\n50 to\\n54.\\nTest Case 2: Chef can press the volume down button\\n2 times to decrease the volume from\\n12 to\\n10.'",
        "79": "b\"ATM\\nPooja would like to withdraw X US Dollar from an ATM. The cash machine will only accept the transaction if X is a multiple of 5, and Pooja's account balance has enough cash to perform the withdrawal transaction (including bank charges). For each successful withdrawal the bank charges 0.50 US Dollar.\\nCalculate Pooja's account balance after an attempted transaction.\\nInput Format\\nEach input contains 2 numbers\\nX and\\nY.\\nX is the amount of cash which Pooja wishes to withdraw.\\nY is Pooja's initial account balance.\\nOutput Format\\nOutput the account balance after the attempted transaction, given as a number with two digits of precision. If there is not enough money in the account to complete the transaction, output the current bank balance.\\nConstraints\\n0<X\\xe2\\x89\\xa42000 - the amount of cash which Pooja wishes to withdraw.\\n0\\xe2\\x89\\xa4Y\\xe2\\x89\\xa42000 with two digits of precision - Pooja's initial account balance.\\nSample 1:\\nInput\\nOutput\\n30 120.00\\n89.50\\nExplanation:\\nExample - Successful Transaction\\nSample 2:\\nInput\\nOutput\\n42 120.00\\n120.00\\nExplanation:\\nExample - Incorrect Withdrawal Amount (not multiple of 5)\\nSample 3:\\nInput\\nOutput\\n300 120.00\\n120.00\\nExplanation:\\nExample - Insufficient Funds\"",
        "80": "b'Is it hot or cold\\nChef considers the climate HOT if the temperature is above\\n20, otherwise he considers it COLD. You are given the temperature\\nC, find whether the climate is HOT or COLD.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case contains a single integer, the temperature\\nC.\\nOutput Format\\nFor each test case, print on a new line whether the climate is HOT or COLD.\\nYou may print each character of the string in either uppercase or lowercase (for example, the strings hOt, hot, Hot, and HOT will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa450\\n0\\xe2\\x89\\xa4C\\xe2\\x89\\xa440\\nSample 1:\\nInput\\nOutput\\n2\\n21\\n16\\nHOT\\nCOLD\\nExplanation:\\nTest case\\n1: The temperature is\\n21, which is more than\\n20. So, Chef considers the climate HOT.\\nTest case\\n2: The temperature is\\n16, which is not more than\\n20. So, Chef considers the climate COLD.'",
        "81": "b'Profit Increment\\nChef recently started selling a special fruit.\\nHe has been selling the fruit for\\nX rupees (\\nX is a multiple of\\n100). He earns a profit of\\nY rupees on selling the fruit currently.\\nChef decided to increase the selling price by\\n10%. Please help him calculate his new profit after the increase in selling price.\\nNote that only the selling price has been increased and the buying price is same.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line of input containing two space-separated integers\\nX and\\nY denoting the initial selling price and the profit respectively.\\nOutput Format\\nFor each test case, output a single integer, denoting the new profit.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4Y\\xe2\\x89\\xa4100\\nX is a multiple of\\n100.\\nSample 1:\\nInput\\nOutput\\n4\\n100 10\\n200 5\\n500 10\\n100 7\\n20\\n25\\n60\\n17\\nExplanation:\\nTest case\\n1: The buying price of the item is the difference of selling price and profit, which is\\n90. The new selling price is\\n10% more than the initial selling price. Thus, the new profit is\\n110\\xe2\\x88\\x9290=20.\\nTest case\\n2: The buying price of the item is the difference of selling price and profit, which is\\n195. The new selling price is\\n10% more than the initial selling price. Thus, the new profit is\\n220\\xe2\\x88\\x92195=25.\\nTest case\\n3: The buying price of the item is the difference of selling price and profit, which is\\n490. The new selling price is\\n10% more than the initial selling price. Thus, the new profit is\\n550\\xe2\\x88\\x92490=60.\\nTest case\\n4: The buying price of the item is the difference of selling price and profit, which is\\n93. The new selling price is\\n10% more than the initial selling price. Thus, the new profit is\\n110\\xe2\\x88\\x9293=17.'",
        "82": "b'Fill the Bucket\\nChef has a bucket having a capacity of\\nK liters. It is already filled with\\nX liters of water.\\nFind the maximum amount of extra water in liters that Chef can fill in the bucket without overflowing.\\nInput Format\\nThe first line will contain\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two space separated integers\\nK and\\nX - as mentioned in the problem.\\nOutput Format\\nFor each test case, output in a single line, the amount of extra water in liters that Chef can fill in the bucket without overflowing.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X<K\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n2\\n5 4\\n15 6\\n1\\n9\\nExplanation:\\nTest Case\\n1: The capacity of the bucket is\\n5 liters but it is already filled with\\n4 liters of water. Adding\\n1 more liter of water to the bucket fills it to\\n(4+1)=5 liters. If we try to fill more water, it will overflow.\\nTest Case\\n2: The capacity of the bucket is\\n15 liters but it is already filled with\\n6 liters of water. Adding\\n9 more liters of water to the bucket fills it to\\n(6+9)=15 liters. If we try to fill more water, it will overflow.'",
        "83": "b'Parliament\\nAn important resolution is being discussed in the Parliament of Chefland. There are\\nN members present in the Parliament out of which\\nX members voted in favour of the resolution and the remaining voted against it.\\nAccording to the constitution of Chefland, a resolution is passed if and only if half or more than half the members present in the Parliament vote in favour of the resolution.\\nDetermine if the resolution is passed or not.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two space-separated integers\\nN and\\nX \\xe2\\x80\\x94 the total number of members present in the Parliament and the number of members who voted in favour of the resolution.\\nOutput Format\\nFor each test case, output YES if the resolution is passed. Otherwise, output NO.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs and Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa45000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4X\\xe2\\x89\\xa4N\\nSample 1:\\nInput\\nOutput\\n4\\n12 6\\n9 4\\n9 5\\n12 0\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nTest Case 1: The resolution is passed since half the people voted in favour of the resolution.\\nTest Case 2: The resolution is not passed since less than half the people voted in favour of the resolution.\\nTest Case 3: The resolution is passed since more than half the people voted in favour of the resolution.\\nTest Case 4: The resolution is not passed since everybody voted against the resolution.'",
        "84": "b'Find Remainder\\nWrite a program to find the remainder when an integer A is divided by an integer B.\\nInput\\nThe first line contains an integer T, the total number of test cases. Then T lines follow, each line contains two Integers A and B.\\nOutput\\nFor each test case, find the remainder when A is divided by B, and display it in a new line.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 1000\\n1 \\xe2\\x89\\xa4 A,B \\xe2\\x89\\xa4 10000\\nSample 1:\\nInput\\nOutput\\n3 \\n1 2\\n100 200\\n40 15\\n1\\n100\\n10'",
        "85": "b'Ezio and Guards\\nEzio can manipulate at most\\nX number of guards with the apple of eden.\\nGiven that there are\\nY number of guards, predict if he can safely manipulate all of them.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains of a single line of input, two integers\\nX and\\nY.\\nOutput Format\\nFor each test case, print\\nYES if it is possible for Ezio to manipulate all the guards. Otherwise, print\\nNO.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings\\nYeS,\\nyEs,\\nyes and\\nYES will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n5 7\\n6 6\\n9 1\\nNO\\nYES\\nYES\\nExplanation:\\nTest Case\\n1: Ezio can manipulate at most\\n5 guards. Since there are\\n7 guards, he cannot manipulate all of them.\\nTest Case\\n2: Ezio can manipulate at most\\n6 guards. Since there are\\n6 guards, he can manipulate all of them.\\nTest Case\\n3: Ezio can manipulate at most\\n9 guards. Since there is only\\n1 guard, he can manipulate the guard.'",
        "86": "b'Chef and Masks\\nChef is shopping for masks. In the shop, he encounters\\n2 types of masks:\\nDisposable Masks \\xe2\\x80\\x94 cost\\nX but last only\\n1 day.\\nCloth Masks \\xe2\\x80\\x94 cost\\nY but last\\n10 days.\\nChef wants to buy masks to last him\\n100 days. He will buy the masks which cost him the least. In case there is a tie in terms of cost, Chef will be eco-friendly and choose the cloth masks. Which type of mask will Chef choose?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases. Then the test cases follow.\\nEach test case consists of a single line of input, containing two space-separated integers\\nX,Y.\\nOutput Format\\nFor each test case, if Chef buys the cloth masks print CLOTH, otherwise print DISPOSABLE.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings cloth, clOTh, cLoTH, and CLOTH will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa45000\\n1\\xe2\\x89\\xa4X<Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n10 100\\n9 100\\n88 99\\n1 11\\nCloth\\nDisposable\\nCloth\\nDisposable\\nExplanation:\\nTest case\\n1: The cost of the disposable masks will be\\n10\\xe2\\x8b\\x85100=1000, while the cost of the cloth masks will be\\n100\\xe2\\x8b\\x8510=1000. Since the price is equal and Chef is eco-friendly, Chef will buy the cloth masks.\\nTest case\\n2: The cost of the disposable masks will be\\n9\\xe2\\x8b\\x85100=900, while the cost of the cloth masks will be\\n100\\xe2\\x8b\\x8510=1000. Since the price of disposable masks is less, Chef will buy the disposable masks.\\nTest case\\n3: The cost of the disposable masks will be\\n88\\xe2\\x8b\\x85100=8800, while the cost of the cloth masks will be\\n99\\xe2\\x8b\\x8510=990. Since the price of the cloth masks is less, Chef will buy the cloth masks.\\nTest case\\n4: The cost of the disposable masks will be\\n1\\xe2\\x8b\\x85100=100, while the cost of the cloth masks will be\\n11\\xe2\\x8b\\x8510=110. Since the price of disposable masks is less, Chef will buy the disposable masks.'",
        "87": "b\"Speciality\\nOn every CodeChef user's profile page, the list of problems that they have set, tested, and written editorials for, is listed at the bottom.\\nGiven the number of problems in each of these\\n3 categories as\\nX,Y, and\\nZ respectively (where all three integers are distinct), find if the user has been most active as a Setter, Tester, or Editorialist.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of three space-separated integers\\nX,Y, and\\nZ - the number of problems they have set, tested, and written editorials for.\\nOutput Format\\nFor each test case, output in a new line:\\nSetter, if the user has been most active as a setter.\\nTester, if the user has been most active as a tester.\\nEditorialist, if the user has been most active as an editorialist.\\nNote that the output is case-insensitive. Thus, the strings SETTER, setter, seTTer, and Setter are all considered the same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4X,Y,Z\\xe2\\x89\\xa4100, where\\nX,Y, and\\nZ are distinct.\\nSample 1:\\nInput\\nOutput\\n4\\n5 3 2\\n1 2 4\\n2 5 1\\n9 4 5\\nSetter\\nEditorialist\\nTester\\nSetter\\nExplanation:\\nTest case\\n1: The number of problems that the user has set is greater than the number of problems tested or written editorials for. Thus, the user is most active as setter.\\nTest case\\n2: The number of problems that the user has written editorials for, is greater than the number of problems set or tested. Thus, the user is most active as editorialist.\\nTest case\\n3: The number of problems that the user has tested is greater than the number of problems set or written editorials for. Thus, the user is most active as tester.\\nTest case\\n4: The number of problems that the user has set is greater than the number of problems tested or written editorials for. Thus, the user is most active as setter.\"",
        "88": "b'Maximum Submissions\\nA participant can make\\n1 submission every\\n30 seconds. If a contest lasts for\\nX minutes, what is the maximum number of submissions that the participant can make during it?\\nIt is also given that the participant cannot make any submission in the last\\n5 seconds of the contest.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single integer\\nX, denoting the number of minutes.\\nOutput Format\\nFor each test case, output the maximum number of submissions a participant can make in\\nX minutes.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa430\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa430\\nSample 1:\\nInput\\nOutput\\n4\\n1\\n2\\n3\\n4\\n2\\n4\\n6\\n8\\nExplanation:\\nTest case\\n1: The contest lasts for\\n1 minute, which is\\n60 seconds. A participant can make\\n2 submissions during this time \\xe2\\x80\\x94 for example, in the\\n5-th second and in the\\n48-th second. Making\\n3 or more submissions is impossible.\\nTest case\\n2: The contest lasts for\\n2 minutes, which is\\n120 seconds. A participant can make\\n4 submissions during this time.'",
        "89": "b'TV Discount\\nChef is looking to buy a TV and has shortlisted two models. The first one costs\\nA rupees, while the second one costs\\nB rupees.\\nSince there is a huge sale coming up on Chefzon, Chef can get a flat discount of\\nC rupees on the first TV, and a flat discount of\\nD rupees on the second one.\\nHelp Chef determine which of the two TVs would be cheaper to buy during the sale.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains four space-separated integers\\nA,\\nB,\\nC and\\nD \\xe2\\x80\\x94 the marked price (in rupees) of the first TV, the marked price (in rupees) of the second TV, the flat discount (in rupees) of the first TV, and the flat discount (in rupees) of the second TV.\\nOutput Format\\nFor each test case, print a single line containing the string First if the first TV is cheaper to buy with discount, or Second if the second TV is cheaper to buy with discount. If both of them cost the same after discount, print Any.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings first, First, fIRSt, and FIRST will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa45000\\n1\\xe2\\x89\\xa4A,B\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4C\\xe2\\x89\\xa4A\\n0\\xe2\\x89\\xa4D\\xe2\\x89\\xa4B\\nSample 1:\\nInput\\nOutput\\n3\\n85 75 35 20\\n100 99 0 0\\n30 40 0 10\\nFirst\\nSecond\\nAny\\nExplanation:\\nTest case\\n1: The cost of the first TV after discount is\\n85\\xe2\\x88\\x9235=50, while the cost of the second TV after discount is\\n75\\xe2\\x88\\x9220=55. Thus the first TV is cheaper to buy than the second.\\nTest case\\n2: The cost of the first TV after discount is\\n100\\xe2\\x88\\x920=100, while the cost of the second TV after discount is\\n99\\xe2\\x88\\x920=99. Thus the second TV is cheaper to buy than the first.\\nTest case\\n3: The cost of the first TV after discount is\\n30\\xe2\\x88\\x920=30, while the cost of the second TV after discount is\\n40\\xe2\\x88\\x9210=30. Since they are equal, Chef can buy any of them.'",
        "90": "b'Broken Phone\\nUttu broke his phone. He can get it repaired by spending\\nX rupees or he can buy a new phone by spending\\nY rupees. Uttu wants to spend as little money as possible. Find out if it is better to get the phone repaired or to buy a new phone.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two space-separated integers\\nX and\\nY \\xe2\\x80\\x94 the cost of getting the phone repaired and the cost of buying a new phone.\\nOutput Format\\nFor each test case,\\noutput REPAIR if it is better to get the phone repaired.\\noutput NEW PHONE if it is better to buy a new phone.\\noutput ANY if both the options have the same price.\\nYou may print each character of REPAIR, NEW PHONE and ANY in uppercase or lowercase (for example, any, ANy, Any will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa410\\n4\\nSample 1:\\nInput\\nOutput\\n3\\n100 1000\\n10000 5000\\n3000 3000\\nREPAIR\\nNEW PHONE\\nANY\\nExplanation:\\nTest Case 1: It is better to get the phone repaired since\\n100<1000.\\nTest Case 2: It is better to buy a new phone since\\n10000>5000.\\nTest Case 3: Uttu can choose either of the two options since\\n3000=3000.'",
        "91": "b'Tyre problem\\nThere are\\nN bikes and\\nM cars on the road.\\nEach bike has\\n2 tyres.\\nEach car has\\n4 tyres.\\nFind the total number of tyres on the road.\\nInput Format\\nThe first line will contain\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two integers\\nN,M.\\nOutput Format\\nFor each test case, output in a single line, the total number of tyres on the road.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n0\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n2\\n2 1\\n3 0\\n8\\n6\\nExplanation:\\nTest Case\\n1: There are\\n2 bikes and\\n1 car. Each bike has\\n2 tyres, so there are\\n2\\xe2\\x8b\\x852=4 bike tyres. Similarly, each car has\\n4 tyres, so there are\\n1\\xe2\\x8b\\x854=4 car tyres. Adding the tyres of all vehicles, we get\\n4+4=8 tyres in total.\\nTest Case\\n2: There are\\n3 bikes and\\n0 cars. Each bike has\\n2 tyres, so there are\\n3\\xe2\\x8b\\x852=6 bike tyres. There are no cars, so there are\\n0\\xe2\\x8b\\x854=0 car tyres. Adding the tyres of all vehicles, we get\\n6+0=6 tyres in total.'",
        "92": "b\"Sum of Digits\\nYou're given an integer N. Write a program to calculate the sum of all the digits of N.\\nInput Format\\nThe first line contains an integer T, the total number of testcases. Then follow T lines, each line contains an integer N.\\nOutput Format\\nFor each test case, calculate the sum of digits of N, and display it in a new line.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000000\\nSample 1:\\nInput\\nOutput\\n3 \\n12345\\n31203\\n2123\\n15\\n9\\n8\"",
        "93": "b'Monthly Budget\\nAkshat has\\nX rupees to spend in the current month. His daily expenditure is\\nY rupees, i.e., he spends\\nY rupees each day.\\nGiven that the current month has\\n30 days, find out if Akshat has enough money to meet his daily expenditures for this month.\\nInput Format\\nThe first line will contain\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two integers\\nX,\\nY - the amount of money Akshat has for the current month and his daily expenditure respectively.\\nOutput Format\\nFor each test case, output YES if Akshat has enough money to meet his daily expenditure for\\n30 days of the month, otherwise output NO.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa410\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n1000 10\\n250 50\\n1500 50\\nYES\\nNO\\nYES\\nExplanation:\\nTest Case\\n1: Akshat has\\n1000 rupees and he wants to spend\\n30\\xc3\\x9710=300 rupees in the entire month. Therefore, he has enough money for the entire month.\\nTest Case\\n2: Akshat has\\n250 rupees and he wants to spend\\n30\\xc3\\x9750=1500 rupees in the entire month. Therefore, he does not have enough money for the entire month.\\nTest Case\\n3: Akshat has\\n1500 rupees and he wants to spend\\n30\\xc3\\x9750=1500 rupees in the entire month. Therefore, he has enough money for the entire month.'",
        "94": "b'Credit score\\nTo access CRED programs, one needs to have a credit score of\\n750 or more.\\nGiven that the present credit score is\\nX, determine if one can access CRED programs or not.\\nIf it is possible to access CRED programs, output\\nYES, otherwise output\\nNO.\\nInput Format\\nThe first and only line of input contains a single integer\\nX, the credit score.\\nOutput Format\\nPrint\\nYES if it is possible to access CRED programs. Otherwise, print\\nNO.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings\\nYeS,\\nyEs,\\nyes and\\nYES will all be treated as identical).\\nConstraints\\n0\\xe2\\x89\\xa4X\\xe2\\x89\\xa41000\\nSubtasks\\nSubtask 1 (100 points): Original constraints.\\nSample 1:\\nInput\\nOutput\\n823\\nYES\\nExplanation:\\nSince\\n823\\xe2\\x89\\xa5750, it is possible to access CRED programs.\\nSample 2:\\nInput\\nOutput\\n251\\nNO\\nExplanation:\\nSince\\n251<750, it is not possible to access CRED programs.'",
        "95": "b'First and Last Digit\\nGiven an integer N . Write a program to obtain the sum of the first and last digits of this number.\\nInput Format\\nThe first line contains an integer T, the total number of test cases. Then follow T lines, each line contains an integer N.\\nOutput Format\\nFor each test case, display the sum of first and last digits of N in a new line.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000000\\nSample 1:\\nInput\\nOutput\\n3 \\n1234\\n124894\\n242323\\n5\\n5\\n5'",
        "96": "b'Enormous Input Test\\nYou are given\\nN integers. Find the count of numbers divisible by\\nK.\\nInput Format\\nThe input begins with two positive integers\\nN,\\nK. The next\\nN lines contains one positive integer each denoted by\\nA\\ni\\n.\\nOutput Format\\nOutput a single number denoting how many integers are divisible by\\nK.\\nConstraints\\n1\\xe2\\x89\\xa4N,K\\xe2\\x89\\xa410\\n7\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n7 3\\n1\\n51\\n966369\\n7\\n9\\n999996\\n11\\n4\\nExplanation:\\nThe integers divisible by\\n3 are\\n51,966369,9, and\\n999996. Thus, there are\\n4 integers in total.'",
        "97": "b'Practice makes us perfect\\nMost programmers will tell you that one of the ways to improve your performance in competitive programming is to practice a lot of problems.\\nOur Chef took the above advice very seriously and decided to set a target for himself.\\nChef decides to solve at least\\n10 problems every week for\\n4 weeks.\\nGiven the number of problems he actually solved in each week over\\n4 weeks as\\nP\\n1\\n,P\\n2\\n,P\\n3\\n, and\\nP\\n4\\n, output the number of weeks in which Chef met his target.\\nInput Format\\nThere is a single line of input, with\\n4 integers\\nP\\n1\\n,P\\n2\\n,P\\n3\\n, and\\nP\\n4\\n. These are the number of problems solved by Chef in each of the\\n4 weeks.\\nOutput Format\\nOutput a single integer in a single line - the number of weeks in which Chef solved at least\\n10 problems.\\nConstraints\\n1\\xe2\\x89\\xa4P\\n1\\n,P\\n2\\n,P\\n3\\n,P\\n4\\n\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n12 15 8 10\\n3\\nExplanation:\\nChef solved at least\\n10 problems in the first, second and fourth weeks. He failed to solve at least\\n10 problems in the third week. Hence, the number of weeks in which Chef met his target is\\n3.\\nSample 2:\\nInput\\nOutput\\n2 3 1 10\\n1\\nExplanation:\\nChef solved at least\\n10 problems in the fourth week. He failed to solve at least\\n10 problems in all the other three weeks. Hence, the number of weeks in which Chef met his target is\\n1.\\nSample 3:\\nInput\\nOutput\\n12 100 99 11\\n4\\nExplanation:\\nChef solved at least\\n10 problems in all the four weeks. Hence, the number of weeks in which Chef met his target is\\n4.\\nSample 4:\\nInput\\nOutput\\n1 1 1 1\\n0\\nExplanation:\\nChef was not able to solve at least\\n10 problems in any of the four weeks. Hence, the number of weeks in which Chef met his target is\\n0.'",
        "98": "b'Pending Assignments\\nChef has finally decided to complete all of his pending assignments.\\nThere are\\nX assignments where each assignment takes\\nY minutes to complete.\\nFind whether Chef would be able to complete all the assignments in\\nZ days.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists three space-separated integers\\nX,Y, and\\nZ \\xe2\\x80\\x94 the number of assignments, time taken in minutes to complete each assignment, and the number of days in which Chef wants to complete the assignments.\\nOutput Format\\nFor each test case, output on a new line, YES, if Chef would be able to complete all the assignments in\\nZ days. Otherwise, print NO.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4Z\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n3\\n5 5 5\\n50 80 2\\n20 72 1\\nYES\\nNO\\nYES\\nExplanation:\\nTest case\\n1: Chef needs a total of\\n5\\xe2\\x8b\\x855=25 minutes to complete all the assignments. Thus, he would be able to complete the assignments in\\n5 days.\\nTest case\\n2: Chef needs a total of\\n50\\xe2\\x8b\\x8580=4000 minutes to complete all the assignments. However, in\\n2 days, he only has\\n2\\xe2\\x8b\\x8524\\xe2\\x8b\\x8560=2880 minutes.\\nThus, he would not be able to complete the assignments in\\n2 days.\\nTest case\\n3: Chef needs a total of\\n20\\xe2\\x8b\\x8572=1440 minutes to complete all the assignments. In\\n1 days, he has\\n24\\xe2\\x8b\\x8560=1440 minutes.\\nThus, he would be able to complete the assignments in\\n1 day.'",
        "99": "b'Course Registration\\nThere is a group of\\nN friends who wish to enroll in a course together. The course has a maximum capacity of\\nM students that can register for it. If there are\\nK other students who have already enrolled in the course, determine if it will still be possible for all the\\nN friends to do so or not.\\nInput Format\\nThe first line contains a single integer\\nT - the number of test cases. Then the test cases follow.\\nEach test case consists of a single line containing three integers\\nN,\\nM and\\nK - the size of the friend group, the capacity of the course and the number of students already registered for the course.\\nOutput Format\\nFor each test case, output Yes if it will be possible for all the\\nN friends to register for the course. Otherwise output No.\\nYou may print each character of Yes and No in uppercase or lowercase (for example, yes, yEs, YES will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4M\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4K\\xe2\\x89\\xa4M\\nSample 1:\\nInput\\nOutput\\n3\\n2 50 27\\n5 40 38\\n100 100 0\\nYes\\nNo\\nYes\\nExplanation:\\nTest Case 1: The\\n2 friends can enroll in the course as it has enough seats to accommodate them and the\\n27 other students at the same time.\\nTest Case 2: The course does not have enough seats to accommodate the\\n5 friends and the\\n38 other students at the same time.'",
        "100": "b\"Insurance\\nChef bought car insurance. The policy of the insurance is:\\nThe maximum rebatable amount for any damage is Rs\\nX lakhs.\\nIf the amount required for repairing the damage is\\n\\xe2\\x89\\xa4X lakhs, that amount is rebated in full.\\nChef's car meets an accident and required Rs\\nY lakhs for repairing.\\nDetermine the amount that will be rebated by the insurance company.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case contains two space-separated integers\\nX and\\nY.\\nOutput Format\\nFor each test case, output the amount (in lakhs) that will be rebated by the insurance company.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa430\\nSample 1:\\nInput\\nOutput\\n4\\n5 3\\n5 8\\n4 4\\n15 12\\n3\\n5\\n4\\n12\\nExplanation:\\nTest case\\n1: The damages require only Rs\\n3 lakh which is below the upper cap, so the entire Rs\\n3 lakh will be rebated.\\nTest case\\n2: The damages require Rs\\n8 lakh which is above the upper cap, so only Rs\\n5 lakh will be rebated.\\nTest case\\n3: The damages require only Rs\\n4 lakh which is equal to the upper cap, so the whole Rs\\n4 lakh will be rebated.\\nTest case\\n4: The damages require Rs\\n15 lakh which is above the upper cap, so only Rs\\n12 lakh will be rebated.\"",
        "101": "b\"Codechef Airlines\\nChef has opened a new airline. Chef has\\n10 airplanes where each airplane has a capacity of\\nX passengers.\\nOn the first day itself,\\nY people are willing to book a seat in any one of Chef's airplanes.\\nGiven that Chef charges\\nZ rupees for each ticket, find the maximum amount he can earn on the first day.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of three space-separated integers\\nX,Y, and\\nZ \\xe2\\x80\\x94 the capacity of each airplane, the number of people willing to book a seat in any one of Chef's airplanes on the first day, and the cost of each seat respectively.\\nOutput Format\\nFor each test case, output on a new line, the maximum amount Chef can earn on the first day.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X,Y,Z\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n2 15 10\\n1 10 1\\n5 60 100\\n1 11 7\\n150\\n10\\n5000\\n70\\nExplanation:\\nTest case\\n1: Chef has\\n10 airplanes and each airplane has a capacity of\\n2 passengers. Thus, there are\\n20 seats available in total.\\nThere are\\n15 people who want to book a seat. Since we have enough seats for everyone, all\\n15 people can book their seats and pay\\n10 rupees each. The total money Chef earns is\\n15\\xe2\\x8b\\x8510=150.\\nTest case\\n2: Chef has\\n10 airplanes and each airplane has a capacity of\\n1 passenger. Thus, there are\\n10 seats available in total.\\nThere are\\n10 people who want to book a seat. Since we have enough seats for everyone, all\\n10 people can book their seats and pay\\n1 rupee each. The total money Chef earns is\\n10\\xe2\\x8b\\x851=10.\\nTest case\\n3: Chef has\\n10 airplanes and each airplane has a capacity of\\n5 passengers. Thus, there are\\n50 seats available in total.\\nThere are\\n60 people who want to book a seat. Since we have only\\n50 seats, only\\n50 people can book their seats and pay\\n100 rupees each. The total money Chef earns is\\n50\\xe2\\x8b\\x85100=5000.\\nTest case\\n4: Chef has\\n10 airplanes and each airplane has a capacity of\\n1 passenger. Thus, there are\\n10 seats available in total.\\nThere are\\n11 people who want to book a seat. Since we have only\\n10 seats, only\\n10 people can book their seats and pay\\n7 rupees each. The total money Chef earns is\\n10\\xe2\\x8b\\x857=70.\"",
        "102": "b'Increase IQ\\nA study has shown that playing a musical instrument helps in increasing one\\'s IQ by\\n7 points. Chef knows he can\\'t beat Einstein in physics, but he wants to try to beat him in an IQ competition.\\nYou know that Einstein had an IQ of\\n170, and Chef currently has an IQ of\\nX.\\nDetermine if, after learning to play a musical instrument, Chef\\'s IQ will become strictly greater than Einstein\\'s.\\nPrint \"Yes\" if it is possible for Chef to beat Einstein, else print \"No\" (without quotes).\\nYou may print each character of the string in either uppercase or lowercase (for example, the strings yEs, yes, Yes, and YES will all be treated as identical).\\nInput Format\\nThe first and only line of input will contain a single integer\\nX, the current IQ of Chef.\\nOutput Format\\nFor each testcase, output in a single line \"Yes\" or \"No\"\\nYou may print each character of the string in either uppercase or lowercase (for example, the strings yEs, yes, Yes, and YES will all be treated as identical).\\nConstraints\\n100\\xe2\\x89\\xa4X\\xe2\\x89\\xa4169\\nSubtasks\\nSubtask #1 (100 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n165\\nYes\\nExplanation:\\nAfter learning a musical instrument, Chef\\'s final IQ will be\\n165+7=172. Since\\n172>170, Chef can beat Einstein.\\nSample 2:\\nInput\\nOutput\\n120\\nNo\\nExplanation:\\nAfter learning a musical instrument, Chef\\'s final IQ will be\\n120+7=127. Since\\n127<170, Chef cannot beat Einstein.'",
        "103": "b\"Battery Low\\nChef's phone shows a Battery Low notification if the battery level is\\n15% or less.\\nGiven that the battery level of Chef's phone is\\nX%, determine whether it would show a Battery low notification.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains a single line of input, an integer\\nX, denoting the battery level of the phone.\\nOutput Format\\nFor each test case, output in a single line\\nYes, if the battery level is\\n15% or below. Otherwise, print\\nNo.\\nYou may print each character of\\nYes and\\nNo in uppercase or lowercase (for example,\\nYeS,\\nYES,\\nyes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n15\\n3\\n65\\nYes\\nYes\\nNo\\nExplanation:\\nTest Case 1: The battery level is\\n15. Thus, it would show a battery low notification.\\nTest Case 2: The battery level is\\n3, which is less than\\n15. Thus, it would show a battery low notification.\\nTest Case 3: The battery level is\\n65, which is greater than\\n15. Thus, it would not show a battery low notification.\"",
        "104": "b\"Bob at the Bank\\nBob has an account in the Bobby Bank. His current account balance is\\nW rupees.\\nEach month, the office in which Bob works deposits a fixed amount of\\nX rupees to his account.\\nY rupees is deducted from Bob's account each month as bank charges.\\nFind his final account balance after\\nZ months. Note that the account balance can be negative as well.\\nInput Format\\nThe first line will contain\\nT, the number of test cases. Then the test cases follow.\\nEach test case consists of a single line of input, containing four integers\\nW,X,Y, and\\nZ \\xe2\\x80\\x94 the initial amount, the amount deposited per month, the amount deducted per month, and the number of months.\\nOutput Format\\nFor each test case, output in a single line the final balance in Bob's account after\\nZ months.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4W,X,Y,Z\\xe2\\x89\\xa410\\n4\\nSample 1:\\nInput\\nOutput\\n3\\n100 11 1 10\\n999 25 36 9\\n2500 100 125 101\\n200\\n900\\n-25\\nExplanation:\\nTest case\\n1: Bob's current account balance is\\n100. At the end of each month Bob gets Rs\\n11 and pays Rs\\n1, thus gaining\\n10 per month. Thus, at the end of\\n10 months, Bob will have\\n100+10\\xc3\\x9710=200.\\nTest case\\n2: Bob's current account balance is\\n999. At the end of each month Bob gets Rs\\n25 and pays Rs\\n36, thus losing\\n11 per month. Thus, at the end of\\n9 months, Bob will have\\n999\\xe2\\x88\\x9211\\xc3\\x979=900.\\nTest case\\n3: Bob's current account balance is\\n2500. At the end of each month Bob gets Rs\\n100 and pays Rs\\n125, thus losing\\n25 per month. Thus, at the end of\\n101 months, Bob will have\\n2500\\xe2\\x88\\x9225\\xc3\\x97101=\\xe2\\x88\\x9225.\"",
        "105": "b'The Mango Truck\\nYou are given that a mango weighs\\nX kilograms and a truck weighs\\nY kilograms. You want to cross a bridge that can withstand a weight of\\nZ kilograms.\\nFind the maximum number of mangoes you can load in the truck so that you can cross the bridge safely.\\nInput Format\\nFirst line will contain\\nT, the number of test cases. Then the test cases follow.\\nEach test case consists of a single line of input, three integers\\nX,Y,Z - the weight of mango, the weight of truck and the weight the bridge can withstand respectively.\\nOutput Format\\nFor each test case, output in a single line the maximum number of mangoes that you can load in the truck.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4Y\\xe2\\x89\\xa4Z\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n2 5 11\\n4 10 20\\n1 1 1\\n6 40 90\\n3\\n2\\n0\\n8\\nExplanation:\\nTest case\\n1: You can load\\n3 mangoes at maximum. The total weight is\\n3\\xc3\\x972+5=11\\xe2\\x89\\xa411. Thus, the truck can safely cross the bridge with\\n3 mangoes. If you load\\n4 mangoes, the total weight is\\n4\\xc3\\x972+5=13>11.\\nTest case\\n2: You can load\\n2 mangoes at maximum. The total weight is\\n2\\xc3\\x974+10=18\\xe2\\x89\\xa420. Thus, the truck can safely cross the bridge with\\n2 mangoes.\\nTest case\\n3: You can load\\n0 mangoes at maximum. The total weight is\\n0\\xc3\\x971+1=1\\xe2\\x89\\xa41. Thus, the truck can safely cross the bridge only if there are\\n0 mangoes.\\nTest case\\n4: You can load\\n8 mangoes at maximum. The total weight is\\n6\\xc3\\x978+40=88\\xe2\\x89\\xa490. Thus, the truck can safely cross the bridge with\\n8 mangoes.'",
        "106": "b'Monopoly in Chefland\\nChef is the financial incharge of Chefland and one of his duties is identifying if any company has gained a monopolistic advantage in the market.\\nThere are exactly\\n3 companies in the market each of whose revenues are denoted by\\nR\\n1\\n,\\nR\\n2\\nand\\nR\\n3\\nrespectively. A company is said to have a monopolistic advantage if its revenue is strictly greater than the sum of the revenues of its competitors.\\nGiven the revenue of the\\n3 companies, help Chef determine if any of them has a monopolistic advantage.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line of input containing three space separated integers\\nR\\n1\\n,\\nR\\n2\\nand\\nR\\n3\\ndenoting the revenue of the three companies respectively.\\nOutput Format\\nFor each test case, output\\nYES if any of the companies has a monopolistic advantage over its competitors, else output\\nNO.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings\\nYeS,\\nyEs,\\nyes and\\nYES will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4R\\n1\\n,R\\n2\\n,R\\n3\\n\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n4\\n1 1 1\\n1 2 4\\n2 10 3\\n1 2 3\\nNo\\nYes\\nYes\\nNo\\nExplanation:\\nTest case 1: All the companies have equal revenue so none have a monopolistic advantage.\\nTest case 2: The third company has a monopolistic advantage as\\n1+2<4.\\nTest case 3: The second company has a monopolistic advantage as\\n2+3<10.'",
        "107": "b'Bucket and Water Flow\\nAlice has a bucket of water initially having\\nW litres of water in it. The maximum capacity of the bucket is\\nX liters.\\nAlice turned on the tap and the water starts flowing into the bucket at a rate of\\nY litres\/hour. She left the tap running for exactly\\nZ hours. Determine whether the bucket has been overflown, filled exactly, or is still left unfilled.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases. The description of the test cases follows.\\nEach test case consists of a single line of input containing four space-separated integers\\nW, X, Y, Z.\\nOutput Format\\nFor each test case, print the answer on a new line:\\nIf the bucket has overflown print overflow\\nIf it is exactly filled print filled\\nIf it is still unfilled, print unfilled\\nYou may print each character of the string in uppercase or lowercase (for example, the strings filled, FIlled, fiLLed, and FILLED will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4W,X,Y,Z\\xe2\\x89\\xa41000\\nSubtasks\\nSubtask 1 (100 points):\\nOriginal constraints.\\nSample 1:\\nInput\\nOutput\\n4\\n1 2 3 4 \\n10 70 10 6 \\n2 100 4 3\\n3 3 2 1\\noverFlow\\nfilled\\nUnfilled\\noverflow\\nExplanation:\\nTest case\\n1: Initially the bucket had\\n1 litre of water, we then added\\n3 litres of water for\\n4 hours. Thus, the total bucket inflow was\\n1+3\\xc3\\x974=13 litres. Since this is greater than the capacity of\\n2 litres, the bucket will OVERFLOW\\nTest case\\n2: Initially the bucket had\\n10 litres of water, we then added\\n10 litres of water for\\n6 hours. Thus, the total bucket inflow was\\n10+10\\xc3\\x976=70 litres. Since this is equal to the capacity of\\n70 litres, the bucket will be FILLED\\nTest case\\n3: Initially the bucket had\\n2 litres of water, we then added\\n4 litres of water for\\n3 hours. Thus, the total bucket inflow was\\n2+4\\xc3\\x973=14 litres. Since this is lesser than the capacity of\\n100 litres, the bucket will be UNFILLED.\\nTest case\\n4: Initially the bucket had\\n3 litres of water, we then added\\n2 litres of water for\\n1 hours. Thus, the total bucket inflow was\\n3+2\\xc3\\x971=5 litres. Since this is more than the capacity of\\n3 litres, the bucket will OVERFLOW.'",
        "108": "b\"Miami GP\\nChef has finally got the chance of his lifetime to drive in the\\nF1 tournament. But, there is one problem. Chef did not know about the 107% rule and now he is worried whether he will be allowed to race in the main event or not.\\nGiven the fastest finish time as\\nX seconds and Chef's finish time as\\nY seconds, determine whether Chef will be allowed to race in the main event or not.\\nNote that, Chef will only be allowed to race if his finish time is within 107% of the fastest finish time.\\nInput Format\\nFirst line will contain\\nT, number of testcases. Then the testcases follow.\\nEach testcase contains of a single line of input, two space separated integers\\nX and\\nY denoting the fastest finish time and Chef's finish time respectively.\\nOutput Format\\nFor each test case, output\\nYES if Chef will be allowed to race in the main event, else output\\nNO.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings\\nYeS,\\nyEs,\\nyes and\\nYES will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n4\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4Y\\xe2\\x89\\xa4200\\nSample 1:\\nInput\\nOutput\\n4\\n1 2\\n15 16\\n15 17\\n100 107\\nNO\\nYES\\nNO\\nYES\\nExplanation:\\nTest case\\n1: The fastest car finished in\\n1 second. Thus, Chef should have finished on or before\\n1.07 seconds to ensure qualification but he finished in\\n2 seconds. Hence, Chef will not be allowed to race in the main event.\\nTest case\\n2: The fastest car finished in\\n15 seconds. Thus, Chef should have finished on or before\\n16.05 seconds to ensure qualification and he managed to finish in\\n16 seconds. Hence, Chef will be allowed to race in the main event.\\nTest case\\n3: The fastest car finished in\\n15 seconds. Thus, Chef should have finished on or before\\n16.05 seconds to ensure qualification but he finished in\\n17 seconds. Hence, Chef will not be allowed to race in the main event.\\nTest case\\n4: The fastest car finished in\\n100 seconds. Thus, Chef should have finished on or before\\n107 seconds to ensure qualification and he finished just in time for qualification. Hence, Chef will be allowed to race in the main event.\"",
        "109": "b\"Dominant Army\\nIn the medieval age, there were\\n3 kingdoms\\nA,\\nB, and\\nC. The army of these kingdom had\\nN\\nA\\n,\\nN\\nB\\n, and\\nN\\nC\\nsoldiers respectively.\\nYou are given that an army with\\nX soldiers can defeat an army with\\nY soldiers only if\\nX>Y.\\nAn army is said to be dominant if it can defeat both the other armies combined. For example, kingdom\\nC's army will be dominant only if\\nN\\nC\\n>N\\nA\\n+N\\nB\\n.\\nDetermine whether any of the armies is dominant or not.\\nInput Format\\nThe first line contains a single integer\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains three integers\\nN\\nA\\n,\\nN\\nB\\n, and\\nN\\nC\\n- the number of warriors in the armies of kingdoms\\nA,\\nB, and\\nC respectively.\\nOutput Format\\nFor each test case, output YES if any of the armies is dominant. Otherwise, output NO.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\nA\\n,N\\nB\\n,N\\nC\\n\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n15 5 6\\n12 13 16\\n1 1 100\\n10 10 20\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nTest case\\n1: The kingdom\\nA's army is dominant since\\n15>5+6.\\nTest case\\n2: We can observe that none of the armies is dominant.\\nTest case\\n3: The kingdom\\nC's army is dominant since\\n100>1+1.\\nTest case\\n4: We can observe that none of the armies is dominant. Note that the kingdom\\nC's army is not dominant since\\n20\\xe2\\x89\\xa410+10.\"",
        "110": "b\"Playlist\\nChef's playlist contains\\n3 songs named\\nA,B, and\\nC, each of duration exactly\\nX minutes. Chef generally plays these\\n3 songs in loop, i.e,\\nA\\xe2\\x86\\x92B\\xe2\\x86\\x92C\\xe2\\x86\\x92A\\xe2\\x86\\x92B\\xe2\\x86\\x92C\\xe2\\x86\\x92A\\xe2\\x86\\x92\\xe2\\x80\\xa6\\nChef went on a train journey of\\nN minutes and played his playlist on loop for the whole journey. How many times did he listen to the song\\nC completely?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases. The description of the test cases follows.\\nEach test case consists of a single line of input, containing two space-separated integers\\nN,X.\\nOutput Format\\nFor each test case, output on a new line the number of times Chef listens to the song\\nC completely.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n5\\n6 1\\n5 1\\n11 2\\n5 8\\n100 9\\n2\\n1\\n1\\n0\\n3\\nExplanation:\\nTest case\\n1: Since each song is of duration\\n1 minute and the journey is\\n6 minutes long, Chef listens each of the songs\\nA,B,C twice.\\nTest case\\n2: Since each song is of duration\\n1 minute and the journey is\\n5 minutes long, Chef listens the songs\\nA,B twice but\\nC only once.\\nTest case\\n3: Since each song is of duration\\n2 minutes and the journey is\\n11 minutes long, Chef listens the songs\\nA,B twice but\\nC only once. Note that Chef is in the middle of listening to song\\nC for the second time when the journey ends, but it is not counted since he hasn't listened to it fully.\\nTest case\\n4: Chef cannot hear any song since the journey is shorter than his song duration.\"",
        "111": "b'Chef and Chocolates\\nChef wants to gift\\nC chocolates to Botswal on his birthday. However, he has only\\nX chocolates with him.\\nThe cost of\\n1 chocolate is\\nY rupees.\\nFind the minimum money in rupees Chef needs to spend so that he can gift\\nC chocolates to Botswal.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains of a single line of input, three integers\\nC,X, and\\nY.\\nOutput Format\\nFor each test case, output in a single line answer, the minimum money in rupees Chef needs to spend.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4C\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4X\\xe2\\x89\\xa4C\\n1\\xe2\\x89\\xa4Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n2\\n7 5 5\\n10 1 1\\n10\\n9\\nExplanation:\\nTest Case\\n1: Chef has to gift a total of\\n7 chocolates out of which he has\\n5 chocolates. Thus, Chef needs to buy\\n2 more chocolates, which costs him\\n10 rupees.\\nTest Case\\n2: Chef has to gift a total of\\n10 chocolates out of which he has\\n1 chocolate. Thus, Chef needs to buy\\n9 more chocolates, which costs him\\n9 rupees.'",
        "112": "b'Netflix\\nAlice, Bob, and Charlie are contributing to buy a Netflix subscription. However, Netfix allows only two users to share a subscription.\\nGiven that Alice, Bob, and Charlie have\\nA,B, and\\nC rupees respectively and a Netflix subscription costs\\nX rupees, find whether any two of them can contribute to buy a subscription.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case contains four space-separated integers\\nA,B,C, and\\nX \\xe2\\x80\\x94 the amount that Alice, Bob, and Charlie have, and the cost of a Netflix subscription respectively.\\nOutput Format\\nFor each test case, output YES, if any two of Alice, Bob, and Charlie can contribute to buy a Netflix subscription or NO otherwise.\\nYou may print each character in uppercase or lowercase. For example, NO, no, No, and nO are all considered identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4A,B,C,X\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n1 1 1 3\\n2 3 1 5\\n4 2 3 4\\n2 1 4 7\\nNO\\nYES\\nYES\\nNO\\nExplanation:\\nTest case\\n1: No two people can contribute to collect enough money to buy a Netflix subscription.\\nTest case\\n2: Alice and Bob can contribute and collect a total of\\n5 rupees which is enough to buy a Netflix subscription of\\n5 rupees.\\nTest case\\n3: One possible way is, Bob and Charlie can contribute and collect a total of\\n5 rupees which is enough to buy a Netflix subscription of\\n4 rupees.\\nNote that there are other possible ways as well.\\nTest case\\n4: No two people can contribute to collect enough money to buy a Netflix subscription.'",
        "113": "b\"Chef and Gym\\nChef has decided to join a Gym in ChefLand and if possible, also hire a personal trainer at the gym. The monthly cost of the gym is\\nX and personal training will cost him an additional\\nY per month. Chef's total budget per month is only\\nZ. Print 1 if Chef can only join the gym, 2 if he can also have a personal trainer, and 0 if he can't even join the gym.\\nNote that if Chef wants to hire a personal trainer, he must join the gym \\xe2\\x80\\x94 he cannot hire the trainer without joining the gym.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases. Then the test cases follow.\\nEach test case consists of a single line of input containing three space-separated integers\\nX,Y,Z.\\nOutput Format\\nFor each test case, output in a single line 2 if Chef can go to the gym and have a trainer, 1 if Chef can only go to the gym, 0 if he can't even go to the gym.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y,Z\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n1 2 3\\n10 12 13\\n23 1 22\\n23 1 63\\n2\\n1\\n0\\n2\\nExplanation:\\nTest case\\n1: Since the total cost of Chef getting a gym membership and a trainer is\\n1+2=3 which is equal to his budget of\\n3, Chef can get both a gym membership and a trainer.\\nTest case\\n2: Since the total cost of Chef getting a gym membership and a trainer is\\n10+12=22 which is greater than his budget of\\n13, he can't get both a gym membership and a trainer. However, the cost of the gym membership is\\n10 which is less than his budget of\\n13, so Chef can get only a gym membership.\\nTest case\\n3: Since the cost of Chef getting a gym membership is\\n23 which is greater than his budget of\\n22, Chef can't even get the gym membership.\\nTest case\\n4: The same costs as the previous test, but this time Chef has enough money to afford both the membership and a personal trainer.\"",
        "114": "b'Greater Average\\nYou are given\\n3 numbers\\nA,B, and\\nC.\\nDetermine whether the average of\\nA and\\nB is strictly greater than\\nC or not?\\nNOTE: Average of\\nA and\\nB is defined as\\n2\\n(A+B)\\n. For example, average of\\n5 and\\n9 is\\n7, average of\\n5 and\\n8 is\\n6.5.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of\\n3 integers\\nA,B, and\\nC.\\nOutput Format\\nFor each test case, output YES if average of\\nA and\\nB is strictly greater than\\nC, NO otherwise.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings YeS, yEs, yes and YES will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4A,B,C\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n5\\n5 9 6\\n5 8 6\\n5 7 6\\n4 9 8\\n3 7 2\\nYES\\nYES\\nNO\\nNO\\nYES\\nExplanation:\\nTest case\\n1: The average value of\\n5 and\\n9 is\\n7 which is strictly greater than\\n6.\\nTest case\\n2: The average value of\\n5 and\\n8 is\\n6.5 which is strictly greater than\\n6.\\nTest case\\n3: The average value of\\n5 and\\n7 is\\n6 which is not strictly greater than\\n6.\\nTest case\\n4: The average value of\\n4 and\\n9 is\\n6.5 which is not strictly greater than\\n8.\\nTest case\\n5: The average value of\\n3 and\\n7 is\\n5 which is strictly greater than\\n2.'",
        "115": "b'Subscriptions\\nA new TV streaming service was recently started in Chefland called the Chef-TV.\\nA group of\\nN friends in Chefland want to buy Chef-TV subscriptions. We know that\\n6 people can share one Chef-TV subscription. Also, the cost of one Chef-TV subscription is\\nX rupees. Determine the minimum total cost that the group of\\nN friends will incur so that everyone in the group is able to use Chef-TV.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two integers\\nN and\\nX \\xe2\\x80\\x94 the size of the group of friends and the cost of one subscription.\\nOutput Format\\nFor each test case, output the minimum total cost that the group will incur so that everyone in the group is able to use Chef-TV.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n3\\n1 100\\n12 250\\n16 135\\n100\\n500\\n405\\nExplanation:\\nTest case 1: There is only one person in the group. Therefore he will have to buy\\n1 subscription. Therefore the total cost incurred is\\n100.\\nTest case 2: There are\\n12 people in the group. Therefore they will have to buy\\n2 subscriptions. Therefore the total cost incurred is\\n500.\\nTest case 3: There are\\n16 people in the group. Therefore they will have to buy\\n3 subscriptions. Therefore the total cost incurred is\\n405.'",
        "116": "b\"Janmansh and Assignments\\nJanmansh has to submit\\n3 assignments for Chingari before\\n10 pm and he starts to do the assignments at\\nX pm. Each assignment takes him\\n1 hour to complete. Can you tell whether he'll be able to complete all assignments on time or not?\\nInput Format\\nThe first line will contain\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains one integer\\nX - the time when Janmansh starts doing the assignments.\\nOutput Format\\nFor each test case, output Yes if he can complete the assignments on time. Otherwise, output No.\\nYou may print each character of Yes and No in uppercase or lowercase (for example, yes, yEs, YES will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa49\\nSample 1:\\nInput\\nOutput\\n2\\n7\\n9\\nYes\\nNo\\nExplanation:\\nTest case-1: He can start at\\n7pm and finish by\\n10 pm. Therefore he can complete the assignments.\\nTest case-2: He can not complete all the\\n3 assignments if he starts at\\n9 pm.\"",
        "117": "b'Exams\\nIn Chefland, there are\\nX schools, and each school has\\nY students.\\nThe year end results are in and a total of\\nZ students passed the exams.\\nAssuming that all students appeared for the exams, find whether the number of students who passed in Chefland was strictly greater than\\n50%.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of three space-separated integers\\nX,Y, and\\nZ, as mentioned in the statement.\\nOutput Format\\nFor each test case, output on a new line, YES, if the total number of students who passed in Chefland was strictly greater than\\n50%, otherwise print NO.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n4\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa45\\n1\\xe2\\x89\\xa4Y\\xe2\\x89\\xa450\\n0\\xe2\\x89\\xa4Z\\xe2\\x89\\xa4X\\xe2\\x8b\\x85Y\\nSample 1:\\nInput\\nOutput\\n4\\n2 10 12\\n2 10 3\\n1 5 3\\n3 6 9\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nTest case\\n1: The total number of students appeared were\\n2\\xe2\\x8b\\x8510=20. The number of students passed were\\n12.\\nThus, number of students who passed are\\n60%, which is strictly greater than\\n50%.\\nTest case\\n2: The total number of students appeared were\\n2\\xe2\\x8b\\x8510=20. The number of students passed were\\n3.\\nThus, number of students who passed are\\n15%, which is less than\\n50%.\\nTest case\\n3: The total number of students appeared were\\n1\\xe2\\x8b\\x855=5. The number of students passed were\\n3.\\nThus, number of students who passed are\\n60%, which is strictly greater than\\n50%.\\nTest case\\n4: The total number of students appeared were\\n3\\xe2\\x8b\\x856=18. The number of students passed were\\n9.\\nThus, number of students who passed are\\n50%, which is equal to\\n50%.'",
        "118": "b'Chef in his Office\\nRecently Chef joined a new company. In this company, the employees have to work for\\nX hours each day from Monday to Thursday. Also, in this company, Friday is called Chill Day \\xe2\\x80\\x94 employees only have to work for\\nY hours\\n(Y<X) on Friday. Saturdays and Sundays are holidays.\\nDetermine the total number of working hours in one week.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two space-separated integers\\nX and\\nY \\xe2\\x80\\x94 the number of working hours on each day from Monday to Thursday and the number of working hours on Friday respectively.\\nOutput Format\\nFor each test case, output the total number of working hours in one week.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n2\\xe2\\x89\\xa4X\\xe2\\x89\\xa412\\n1\\xe2\\x89\\xa4Y<X\\nSample 1:\\nInput\\nOutput\\n3\\n10 5\\n12 2\\n8 7\\n45\\n50\\n39\\nExplanation:\\nTest case\\n1: The total number of working hours in a week are:\\n10(Monday)+10(Tuesday)+10(Wednesday)+10(Thursday)+5(Friday)=45\\nTest Case 2: The total number of working hours in a week are:\\n12(Monday)+12(Tuesday)+12(Wednesday)+12(Thursday)+2(Friday)=50\\nTest Case 3: The total number of working hours in a week are:\\n8(Monday)+8(Tuesday)+8(Wednesday)+8(Thursday)+7(Friday)=39'",
        "119": "b'Mahasena\\nKattapa, as you all know was one of the greatest warriors of his time. The kingdom of Maahishmati had never lost a battle under him (as army-chief), and the reason for that was their really powerful army, also called as Mahasena.\\nKattapa was known to be a very superstitious person. He believed that a soldier is \"lucky\" if the soldier is holding an even number of weapons, and \"unlucky\" otherwise. He considered the army as \"READY FOR BATTLE\" if the count of \"lucky\" soldiers is strictly greater than the count of \"unlucky\" soldiers, and \"NOT READY\" otherwise.\\nGiven the number of weapons each soldier is holding, your task is to determine whether the army formed by all these soldiers is \"READY FOR BATTLE\" or \"NOT READY\".\\nNote: You can find the definition of an even number here.\\nInput Format\\nThe first line of input consists of a single integer N denoting the number of soldiers. The second line of input consists of N space separated integers A1, A2, ..., AN, where Ai denotes the number of weapons that the ith soldier is holding.\\nOutput Format\\nGenerate one line output saying \"READY FOR BATTLE\", if the army satisfies the conditions that Kattapa requires or \"NOT READY\" otherwise (quotes for clarity).\\nConstraints\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 100\\n1 \\xe2\\x89\\xa4 Ai \\xe2\\x89\\xa4 100\\nSample 1:\\nInput\\nOutput\\n1\\n1\\nNOT READY\\nExplanation:\\nExample 1: For the first example, N = 1 and the array A = [1]. There is only 1 soldier and he is holding 1 weapon, which is odd. The number of soldiers holding an even number of weapons = 0, and number of soldiers holding an odd number of weapons = 1. Hence, the answer is \"NOT READY\" since the number of soldiers holding an even number of weapons is not greater than the number of soldiers holding an odd number of weapons.\\nSample 2:\\nInput\\nOutput\\n1\\n2\\nREADY FOR BATTLE\\nExplanation:\\nExample 2: For the second example, N = 1 and the array A = [2]. There is only 1 soldier and he is holding 2 weapons, which is even. The number of soldiers holding an even number of weapons = 1, and number of soldiers holding an odd number of weapons = 0. Hence, the answer is \"READY FOR BATTLE\" since the number of soldiers holding an even number of weapons is greater than the number of soldiers holding an odd number of weapons.\\nSample 3:\\nInput\\nOutput\\n4\\n11 12 13 14\\nNOT READY\\nExplanation:\\nExample 3: For the third example, N = 4 and the array A = [11, 12, 13, 14]. The 1st soldier is holding 11 weapons (which is odd), the 2nd soldier is holding 12 weapons (which is even), the 3rd soldier is holding 13 weapons (which is odd), and the 4th soldier is holding 14 weapons (which is even). The number of soldiers holding an even number of weapons = 2, and number of soldiers holding an odd number of weapons = 2. Notice that we have an equal number of people holding even number of weapons and odd number of weapons. The answer here is \"NOT READY\" since the number of soldiers holding an even number of weapons is not strictly greater than the number of soldiers holding an odd number of weapons.\\nSample 4:\\nInput\\nOutput\\n3\\n2 3 4\\nREADY FOR BATTLE\\nExplanation:\\nExample 4: For the fourth example, N = 3 and the array A = [2, 3, 4]. The 1st soldier is holding 2 weapons (which is even), the 2nd soldier is holding 3 weapons (which is odd), and the 3rd soldier is holding 4 weapons (which is even). The number of soldiers holding an even number of weapons = 2, and number of soldiers holding an odd number of weapons = 1. Hence, the answer is \"READY FOR BATTLE\" since the number of soldiers holding an even number of weapons is greater than the number of soldiers holding an odd number of weapons.\\nSample 5:\\nInput\\nOutput\\n5\\n1 2 3 4 5\\nNOT READY\\nExplanation:\\nExample 5: For the fifth example, N = 5 and the array A = [1, 2, 3, 4, 5]. The 1st soldier is holding 1 weapon (which is odd), the 2nd soldier is holding 2 weapons (which is even), the 3rd soldier is holding 3 weapons (which is odd), the 4th soldier is holding 4 weapons (which is even), and the 5th soldier is holding 5 weapons (which is odd). The number of soldiers holding an even number of weapons = 2, and number of soldiers holding an odd number of weapons = 3. Hence, the answer is \"NOT READY\" since the number of soldiers holding an even number of weapons is not greater than the number of soldiers holding an odd number of weapons.'",
        "120": "b'CRED Coins\\nFor each bill you pay using CRED, you earn\\nX CRED coins.\\nAt CodeChef store, each bag is worth\\n100 CRED coins.\\nChef pays\\nY number of bills using CRED. Find the maximum number of bags he can get from the CodeChef store.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains of a single line of input, two integers\\nX and\\nY.\\nOutput Format\\nFor each test case, output in a single line - the maximum number of bags Chef can get from the CodeChef store.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa41000\\nSubtasks\\nSubtask 1 (100 points): Original constraints.\\nSample 1:\\nInput\\nOutput\\n3\\n10 10\\n20 4\\n70 7\\n1\\n0\\n4\\nExplanation:\\nTest Case\\n1: For each bill payment, one receives\\n10 CRED coins. Chef pays\\n10 bills using CRED. Thus, he receives\\n100 CRED coins. Chef can get\\n1 bag from the CodeChef store using these coins.\\nTest Case\\n2: For each bill payment, one receives\\n20 CRED coins. Chef pays\\n4 bills using CRED. Thus, he receives\\n80 CRED coins. Chef cannot get any bag from the CodeChef store using these coins.\\nTest Case\\n3: For each bill payment, one receives\\n70 CRED coins. Chef pays\\n7 bills using CRED. Thus, he receives\\n490 CRED coins. Chef can get at most\\n4 bags from the CodeChef store using these coins.'",
        "121": "b'Water Filling\\nChef has three water bottles. At any point, if at least two of them are empty, she will fill them up. But if at most one bottle is empty, she will wait, and not fill them up now.\\nYou are given three integers -\\nB\\n1\\n,B\\n2\\n, and\\nB\\n3\\n.\\nIf\\nB\\n1\\n=1, it means that the first bottle is full.\\nIf\\nB\\n1\\n=0, it means that the first bottle is empty.\\nSimilarly,\\nB\\n2\\ndenotes whether the second bottle is full or empty, and\\nB\\n3\\ndenotes it for the third bottle.\\nOutput \"Water filling time\", if Chef has to fill the bottles now. If not, output \"Not now\".\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe only line of each test case contains three space-separated integers,\\nB\\n1\\n,B\\n2\\n,B\\n3\\n.\\nOutput Format\\nFor each test case, output on a new line, either \"Water filling time\", or \"Not now\".\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\nB\\ni\\nis either\\n0 or\\n1\\nSample 1:\\nInput\\nOutput\\n5\\n0 0 0\\n1 1 1\\n1 1 0\\n0 1 0\\n0 1 1\\nWater filling time\\nNot now\\nNot now\\nWater filling time\\nNot now\\nExplanation:\\nTestcase 1: The inputs are\\n0,0,0. So all three bottles are empty. Since at least two bottles are empty, it is \"Water filling time\".\\nTestcase 2: The inputs are\\n1,1,1. So all three bottles are full. Since it is not the case that at least two bottles are empty, it is \"Not now\".\\nTestcase 3: The inputs are\\n1,1,0. So only one bottle is empty. Since it is not the case that at least two bottles are empty, it is \"Not now\".\\nTestcase 4: The inputs are\\n0,1,0. So two bottles are empty. Since at least two bottles are empty, it is \"Water filling time\".\\nTestcase 5: The inputs are\\n0,1,1. So only one bottle is empty. Since it is not the case that at least two bottles are empty, it is \"Not now\".'",
        "122": "b\"Sale Season\\nIt's the sale season again and Chef bought items worth a total of\\nX rupees. The sale season offer is as follows:\\nif\\nX\\xe2\\x89\\xa4100, no discount.\\nif\\n100<X\\xe2\\x89\\xa41000, discount is\\n25 rupees.\\nif\\n1000<X\\xe2\\x89\\xa45000, discount is\\n100 rupees.\\nif\\nX>5000, discount is\\n500 rupees.\\nFind the final amount Chef needs to pay for his shopping.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of single line of input containing an integer\\nX.\\nOutput Format\\nFor each test case, output on a new line the final amount Chef needs to pay for his shopping.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa410000\\nSample 1:\\nInput\\nOutput\\n4\\n15\\n70\\n250\\n1000\\n15\\n70\\n225\\n975\\nExplanation:\\nTest case\\n1: Since\\nX\\xe2\\x89\\xa4100, there is no discount.\\nTest case\\n3: Here,\\nX=250. Since\\n100<250\\xe2\\x89\\xa41000, discount is of\\n25 rupees. Therefore, Chef needs to pay\\n250\\xe2\\x88\\x9225=225 rupees.\"",
        "123": "b'Minimum Pizzas\\nEach pizza consists of\\n4 slices. There are\\nN friends and each friend needs exactly\\nX slices.\\nFind the minimum number of pizzas they should order to satisfy their appetite.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two integers\\nN and\\nX, the number of friends and the number of slices each friend wants respectively.\\nOutput Format\\nFor each test case, output the minimum number of pizzas required.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N,X\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n4\\n1 5\\n2 6\\n4 3\\n3 5\\n2\\n3\\n3\\n4\\nExplanation:\\nTest case\\n1: There is only\\n1 friend who requires\\n5 slices. If he orders\\n1 pizza, he will get only\\n4 slices. Thus, at least\\n2 pizzas should be ordered to have required number of slices.\\nTest case\\n2: There are\\n2 friends who require\\n6 slices each. Thus, total\\n12 slices are required. To get\\n12 slices, they should order\\n3 pizzas.\\nTest case\\n3: There are\\n4 friends who require\\n3 slices each. Thus, total\\n12 slices are required. To get\\n12 slices, they should order\\n3 pizzas.\\nTest case\\n4: There are\\n3 friends who require\\n5 slices each. Thus, total\\n15 slices are required. To get\\n15 slices, they should order at least\\n4 pizzas.'",
        "124": "b'Chefland Games\\nIn Chefland, a tennis game involves\\n4 referees.\\nEach referee has to point out whether he considers the ball to be inside limits or outside limits. The ball is considered to be IN if and only if all the referees agree that it was inside limits.\\nGiven the decision of the\\n4 referees, help Chef determine whether the ball is considered inside limits or not.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line of input containing\\n4 integers\\nR\\n1\\n,R\\n2\\n,R\\n3\\n,R\\n4\\ndenoting the decision of the respective referees.\\nHere\\nR can be either\\n0 or\\n1 where\\n0 would denote that the referee considered the ball to be inside limits whereas\\n1 denotes that they consider it to be outside limits.\\nOutput Format\\nFor each test case, output IN if the ball is considered to be inside limits by all referees and OUT otherwise.\\nThe checker is case-insensitive so answers like in, In, and IN would be considered the same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa420\\n0\\xe2\\x89\\xa4R\\n1\\n,R\\n2\\n,R\\n3\\n,R\\n4\\n\\xe2\\x89\\xa41\\nSample 1:\\nInput\\nOutput\\n4\\n1 1 0 0\\n0 0 0 0\\n0 0 0 1\\n1 1 1 1\\nOUT\\nIN\\nOUT\\nOUT\\nExplanation:\\nTest case\\n1: Referees\\n1 and\\n2 do not consider the ball to be IN. Thus, the ball is OUT.\\nTest case\\n2: All referees consider the ball to be IN. Thus, the ball is IN.\\nTest case\\n3: Referee\\n4 does not consider the ball to be IN. Thus, the ball is OUT.\\nTest case\\n4: No referee considers the ball to be IN. Thus, the ball is OUT.'",
        "125": "b'Expert Setter\\nA problem setter is called an expert if at least\\n50% of their problems are approved by Chef.\\nMunchy submitted\\nX problems for approval. If\\nY problems out of those were approved, find whether Munchy is an expert or not.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a two space-separated integers\\nX and\\nY - the number of problems submitted and the number of problems that were approved by Chef.\\nOutput Format\\nFor each test case, output on a new line YES, if Munchy is an expert. Otherwise, print NO.\\nThe output is case-insensitive. Thus, the strings YES, yes, yeS, and Yes are all considered the same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4Y\\xe2\\x89\\xa4X\\xe2\\x89\\xa410\\n6\\nSample 1:\\nInput\\nOutput\\n4\\n5 3\\n1 1\\n4 1\\n2 1\\nYES\\nYES\\nNO\\nYES\\nExplanation:\\nTest case\\n1: We are given that\\n3 out of\\n5 problems were approved. Thus,\\n60% of the problems were approved. Since at least\\n50% of the problems were approved, Munchy is an expert.\\nTest case\\n2: We are given that\\n1 out of\\n1 problems were approved. Thus,\\n100% of the problems were approved. Since at least\\n50% of the problems were approved, Munchy is an expert.\\nTest case\\n3: We are given that\\n1 out of\\n4 problems were approved. Thus,\\n25% of the problems were approved. Since at least\\n50% of the problems were not approved, Munchy is not an expert.\\nTest case\\n4: We are given that\\n1 out of\\n2 problems were approved. Thus,\\n50% of the problems were approved. Since at least\\n50% of the problems were approved, Munchy is an expert.'",
        "126": "b'Chef and NextGen\\nChef is currently working for a secret research group called NEXTGEN. While the rest of the world is still in search of a way to utilize Helium-3 as a fuel, NEXTGEN scientists have been able to achieve 2 major milestones:\\nFinding a way to make a nuclear reactor that will be able to utilize Helium-3 as a fuel\\nObtaining every bit of Helium-3 from the moon\\'s surface\\nMoving forward, the project requires some government funding for completion, which comes under one condition: to prove its worth, the project should power Chefland by generating at least\\nA units of power each year for the next\\nB years.\\nHelp Chef determine whether the group will get funded assuming that the moon has\\nX grams of Helium-3 and\\n1 gram of Helium-3 can provide\\nY units of power.\\nInput Format\\nThe first line of input contains an integer\\nT, the number of testcases. The description of\\nT test cases follows.\\nEach test case consists of a single line of input, containing four space-separated integers\\nA,B,X,Y respectively.\\nOutput Format\\nFor each test case print on a single line the answer \\xe2\\x80\\x94 Yes if NEXTGEN satisfies the government\\'s minimum requirements for funding and No otherwise.\\nYou may print each character of the answer string in either uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4A,B,X,Y,\\xe2\\x89\\xa41000\\nSubtasks\\nSubtask #1 (100 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n4\\n1 2 3 4\\n4 3 2 1\\n2 18 9 4\\n1 100 2 49\\nYes\\nNo\\nYes\\nNo\\nExplanation:\\nTest case\\n1: Chefland requires\\nA=1 units of power for the next\\nB=2 years. In total, the moon must be capable of providing\\nA\\xe2\\x8b\\x85B=2 units of power. There are in total\\nX=3 grams of Helium-3 on the moon which is capable of providing\\nX\\xe2\\x8b\\x85Y=12 units of power.\\n12>2, so the project satisfies the minimum requirements for funding. Thus, the answer is Yes.\\nTest case\\n2: The total amount of power needed by Chefland is\\nA\\xe2\\x8b\\x85B=12, whereas the total that can be provided by the Helium-3 present on the moon is\\nX\\xe2\\x8b\\x85Y=2, which is insufficient to receive funding, so the answer is No.\\nTest case\\n3: The total amount of power needed by Chefland is\\nA\\xe2\\x8b\\x85B=2\\xe2\\x8b\\x8518=36, and the total that can be provided by the Helium-3 present on the moon is\\nX\\xe2\\x8b\\x85Y=9\\xe2\\x8b\\x854=36, which is sufficient to receive funding, so the answer is Yes.\\nTest case\\n4: The total amount of power needed by Chefland is\\nA\\xe2\\x8b\\x85B=1\\xe2\\x8b\\x85100=100, and the total that can be provided by the Helium-3 present on the moon is\\nX\\xe2\\x8b\\x85Y=2\\xe2\\x8b\\x8549=98, which is insufficient to receive funding, so the answer is No.'",
        "127": "b\"Sugarcane Juice Business\\nWhile Alice was drinking sugarcane juice, she started wondering about the following facts:\\nThe juicer sells each glass of sugarcane juice for\\n50 coins.\\nHe spends\\n20% of his total income on buying sugarcane.\\nHe spends\\n20% of his total income on buying salt and mint leaves.\\nHe spends\\n30% of his total income on shop rent.\\nAlice wonders, what is the juicer's profit (in coins) when he sells\\nN glasses of sugarcane juice?\\nInput Format\\nThe first line of input will contain an integer\\nT \\xe2\\x80\\x94 the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains an integer\\nN, as described in the problem statement.\\nOutput Format\\nFor each test case, output on a new line the juicer's profit when he sells\\nN glasses of juice.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n6\\nSample 1:\\nInput\\nOutput\\n4\\n2\\n4\\n5\\n10\\n30\\n60\\n75\\n150\\nExplanation:\\nTest case\\n1: The total income is\\n50\\xc3\\x972=100 coins. The juicer spends\\n20 coins on sugarcane,\\n20 coins on salt and mint leaves and\\n30 coins on rent. Thus, the profit is\\n100\\xe2\\x88\\x92(20+20+30)=30 coins.\\nTest case\\n2: The total income is\\n50\\xc3\\x974=200 coins. The juicer spends\\n40 coins on sugarcane,\\n40 coins on salt and mint leaves and\\n60 coins on rent. Thus, the profit is\\n200\\xe2\\x88\\x92(40+40+60)=60 coins.\\nTest case\\n3: The total income is\\n50\\xc3\\x975=250 coins. The juicer spends\\n50 coins on sugarcane,\\n50 coins on salt and mint leaves and\\n75 coins on rent. Thus, the profit is\\n250\\xe2\\x88\\x92(50+50+75)=75 coins.\\nTest case\\n4: The total income is\\n50\\xc3\\x9710=500 coins. The juicer spends\\n100 coins on sugarcane,\\n100 coins on salt and mint leaves and\\n150 coins on rent. Thus, the profit is\\n500\\xe2\\x88\\x92(100+100+150)=150 coins.\"",
        "128": "b'Count the Notebooks\\nYou know that\\n1 kg of pulp can be used to make\\n1000 pages and\\n1 notebook consists of\\n100 pages.\\nSuppose a notebook factory receives\\nN kg of pulp, how many notebooks can be made from that?\\nInput Format\\nFirst line will contain\\nT, the number of test cases. Then the test cases follow.\\nEach test case contains a single integer\\nN - the weight of the pulp the factory has (in kgs).\\nOutput Format\\nFor each test case, output the number of notebooks that can be made using\\nN kgs of pulp.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n1\\n100\\n50\\n10\\n1000\\n500\\nExplanation:\\nTest case-1:\\n1 kg of pulp can be used to make\\n1000 pages which can be used to make\\n10 notebooks.\\nTest case-2:\\n100 kg of pulp can be used to make\\n100000 pages which can be used to make\\n1000 notebooks.\\nTest case-3:\\n50 kg of pulp can be used to make\\n50000 pages which can be used to make\\n500 notebooks.'",
        "129": "b'Chef and Candies\\nThere are\\nN children and Chef wants to give them\\n1 candy each. Chef already has\\nX candies with him. To buy the rest, he visits a candy shop. In the shop, packets containing exactly\\n4 candies are available.\\nDetermine the minimum number of candy packets Chef must buy so that he is able to give\\n1 candy to each of the\\nN children.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case contains two integers\\nN and\\nX \\xe2\\x80\\x94 the number of children and the number of candies Chef already has.\\nOutput Format\\nFor each test case, output the minimum number of candy packets Chef must buy so that he is able to give\\n1 candy to each of the\\nN children.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N,X\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n20 12\\n10 100\\n10 9\\n20 9\\n2\\n0\\n1\\n3\\nExplanation:\\nTest Case\\n1: Chef must buy\\n2 more packets after which he will have\\n20 candies which will be enough to distribute\\n1 candy to each of the\\n20 children.\\nTest Case\\n2: Chef does not need to buy more packets since he already has\\n100 candies which are enough to distribute\\n1 candy to each of the\\n10 children.\\nTest Case\\n3: Chef must buy\\n1 more packet after which he will have\\n13 candies which will be enough to distribute\\n1 candy to each of the\\n10 children.\\nTest Case\\n4: Chef must buy\\n3 more packets after which he will have\\n21 candies which will be enough to distribute\\n1 candy to each of the\\n20 children.'",
        "130": "b'Car or Bike\\nChef wants to reach home as soon as possible. He has two options:\\nTravel with his BIKE which takes\\nX minutes.\\nTravel with his CAR which takes\\nY minutes.\\nWhich of the two options is faster or do they both take same time?\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains a single line of input, two integers\\nX,Y representing the time taken to travel with BIKE and CAR respectively.\\nOutput Format\\nFor each test case, print CAR if travelling with Car is faster, BIKE if travelling with Bike is faster, SAME if they both take the same time.\\nYou may print each character of CAR, BIKE and SAME in uppercase or lowercase (for example, CAR, Car, cAr will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n3\\n1 5\\n4 2\\n6 6\\nBIKE\\nCAR\\nSAME\\nExplanation:\\nTest case-1: Travelling with BIKE takes\\n1 minute while travelling with CAR takes\\n5 minutes. So travelling with BIKE is faster.\\nTest case-2: Travelling with BIKE takes\\n4 minutes while travelling with CAR takes\\n2 minutes. So travelling with CAR is faster.\\nTest case-3: Travelling with both BIKE and CAR takes the SAME time i.e.\\n6 minutes.'",
        "131": "b'Is the Score Consistent\\nChef is watching a football match. The current score is\\nA:B, that is, team\\n1 has scored\\nA goals and team\\n2 has scored\\nB goals. Chef wonders if it is possible for the score to become\\nC:D at a later point in the game (i.e. team\\n1 has scored\\nC goals and team\\n2 has scored\\nD goals). Can you help Chef by answering his question?\\nInput Format\\nThe first line contains a single integer\\nT - the number of test cases. Then the test cases follow.\\nThe first line of each test case contains two integers\\nA and\\nB - the intial number of goals team\\n1 and team\\n2 have scored respectively.\\nThe second line of each test case contains two integers\\nC and\\nD - the final number of goals team\\n1 and team\\n2 must be able to score respectively.\\nOutput Format\\nFor each testcase, output POSSIBLE if it is possible for the score to become\\nC:D at a later point in the game, IMPOSSIBLE otherwise.\\nYou may print each character of POSSIBLE and IMPOSSIBLE in uppercase or lowercase (for example, possible, pOSsiBLe, Possible will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n0\\xe2\\x89\\xa4A,B,C,D\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n3\\n1 5\\n3 5\\n3 4\\n2 6\\n2 2\\n2 2\\nPOSSIBLE\\nIMPOSSIBLE\\nPOSSIBLE\\nExplanation:\\nTest case 1: The current score is\\n1:5. If team\\n1 scores\\n2 more goals, the score will become\\n3:5. Thus\\n3:5 is a possible score.\\nTest case 2: The current score is\\n3:4. It can be proven that no non-negative pair of integers\\n(x,y) exists such that if team\\n1 scores\\nx more goals and team\\n2 scores\\ny more goals the score becomes\\n2:6 from\\n3:4. Thus in this case\\n2:6 is an impossible score.\\nTest case 3: The current score is already\\n2:2. Hence it is a possible score.'",
        "132": "b'The Three Topics\\nThe Chef has reached the finals of the Annual Inter-school Declamation contest.\\nFor the finals, students were asked to prepare\\n10 topics. However, Chef was only able to prepare three topics, numbered\\nA,\\nB and\\nC \\xe2\\x80\\x94 he is totally blank about the other topics. This means Chef can only win the contest if he gets the topics\\nA,\\nB or\\nC to speak about.\\nOn the contest day, Chef gets topic\\nX. Determine whether Chef has any chances of winning the competition.\\nPrint \"Yes\" if it is possible for Chef to win the contest, else print \"No\".\\nYou may print each character of the string in either uppercase or lowercase (for example, the strings yEs, yes, Yes, and YES will all be treated as identical).\\nInput Format\\nThe first and only line of input will contain a single line containing four space-separated integers\\nA,\\nB,\\nC, and\\nX \\xe2\\x80\\x94 the three topics Chef has prepared and the topic that was given to him on contest day.\\nOutput Format\\nFor each testcase, output in a single line \"Yes\" or \"No\".\\nYou may print each character of the string in either uppercase or lowercase (for example, the strings yEs, yes, Yes, and YES will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4A,B,C,X\\xe2\\x89\\xa410\\nA,B,C are distinct.\\nSubtasks\\nSubtask #1 (100 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n2 3 7 3\\nYes\\nExplanation:\\nChef had prepared the topics:\\n2,3,7. Chef gets to speak on the topic:\\n3. Since Chef had already prepared this, there is a chance that he can win the contest.\\nSample 2:\\nInput\\nOutput\\n4 6 8 5\\nNo\\nExplanation:\\nChef had prepared the topics:\\n4,6,8. Chef gets to speak on the topic:\\n5. Since Chef didn\\'t prepare this topic, there is no chance that he can win the contest.'",
        "133": "b\"Monopoly\\nThere are\\n4 companies in the markets of Chefland,\\nA,\\nB,\\nC, and\\nD.\\nThis year,\\nCompany\\nA made a profit of\\nP lakh rupees,\\nCompany\\nB made a profit of\\nQ lakh rupees,\\nCompany\\nC made a profit of\\nR lakh rupees,\\nCompany\\nD made a profit of\\nS lakh rupees.\\nThere is said to be a monopoly in the market if the profit made by one company is strictly greater than the sum of profits made by all other companies.\\nDetermine if there is a monopoly in the market or not.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first line and only line of each test case contains four space-separated integers\\nP,\\nQ,\\nR and\\nS \\xe2\\x80\\x94 the profits made by companies\\nA,\\nB,\\nC and\\nD respectively.\\nOutput Format\\nFor each test case, output YES if there is a monopoly in the market. Otherwise, output NO.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa45000\\n1\\xe2\\x89\\xa4P,Q,R,S\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n1 1 1 10\\n30 20 6 4\\n100 90 3 4\\n14 15 16 17\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nTest Case 1: Here, company\\nD's profit (\\n10) is greater than the sum of profits of all other companies (\\n1+1+1=3).\\nTest Case 2: Here, no company's profit is strictly greater than the sum of profits of all other companies.\\nTest Case 3: Here, company\\nA's profit (\\n100) is greater than the sum of profits of all other companies (\\n90+3+4=97).\"",
        "134": "b\"Problems in your to-do list\\nCodeChef recently revamped its practice page to make it easier for users to identify the next problems they should solve by introducing some new features:\\nRecent Contest Problems - contains only problems from the last 2 contests\\nSeparate Un-Attempted, Attempted, and All tabs\\nProblem Difficulty Rating - the Recommended dropdown menu has various difficulty ranges so that you can attempt the problems most suited to your experience\\nPopular Topics and Tags\\nLike most users, Chef didn\\xe2\\x80\\x99t know that he could add problems to a personal to-do list by clicking on the magic '+' symbol on the top-right of each problem page. But once he found out about it, he went crazy and added loads of problems to his to-do list without looking at their difficulty rating.\\nChef is a beginner and should ideally try and solve only problems with difficulty rating strictly less than\\n1000. Given a list of difficulty ratings for problems in the Chef\\xe2\\x80\\x99s to-do list, please help him identify how many of those problems Chef should remove from his to-do list, so that he is only left with problems of difficulty rating less than\\n1000.\\nInput Format\\nThe first line of input will contain a single integer\\nT, the number of test cases. Then the testcases follow.\\nEach testcase consists of 2 lines of input.\\nThe first line of input of each test case contains a single integer,\\nN, which is the total number of problems that the Chef has added to his to-do list.\\nThe second line of input of each test case contains\\nN space-separated integers\\nD\\n1\\n,D\\n2\\n,\\xe2\\x80\\xa6,D\\nN\\n, which are the difficulty ratings for each problem in the to-do list.\\nOutput Format\\nFor each test case, output in a single line the number of problems that Chef will have to remove so that all remaining problems have a difficulty rating strictly less than\\n1000.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4D\\ni\\n\\xe2\\x89\\xa45000\\nSubtasks\\nSubtask 1 (100 points):\\nOriginal constraints\\nSample 1:\\nInput\\nOutput\\n5\\n3\\n800 1200 900\\n4\\n999 1000 1001 1002\\n5\\n1 2 2 2 5000\\n5\\n1000 1000 1000 1000 1000\\n3\\n900 700 800\\n1\\n3\\n1\\n5\\n0\\nExplanation:\\nTest case\\n1: Among the three difficulty ratings, Chef only needs to remove the problem with difficulty rating\\n1200, since it is\\n\\xe2\\x89\\xa51000. So, the answer is\\n1.\\nTest case\\n2: Among the four difficulty ratings, Chef needs to remove the problems with difficulty ratings of\\n1000,\\n1001, and\\n1002, since they are\\n\\xe2\\x89\\xa51000. So, the answer is\\n3.\\nTest case\\n3: Among the five difficulty ratings, Chef needs to remove the problem with a difficulty rating of\\n5000, since it is\\n\\xe2\\x89\\xa51000. So, the answer is\\n1.\\nTest case\\n4: Chef needs to remove all the five problems, since they are all rated\\n\\xe2\\x89\\xa51000. So, the answer is\\n5.\\nTest case\\n5: Chef does not need to remove any problem, since they are all rated\\n<1000. So, the answer is\\n0.\"",
        "135": "b'Air Conditioner Temperature\\nThere are three people sitting in a room - Alice, Bob, and Charlie. They need to decide on the temperature to set on the air conditioner. Everyone has a demand each:\\nAlice wants the temperature to be at least\\nA degrees.\\nBob wants the temperature to be at most\\nB degrees.\\nCharlie wants the temperature to be at least\\nC degrees.\\nCan they all agree on some temperature, or not?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line which contains three integers -\\nA,B,C.\\nOutput Format\\nFor each test case, output on a new line, \"Yes\" or \"No\". \"Yes\", if they can decide on some temperature which fits all their demands. Or \"No\", if no temperature fits all their demands.\\nYou may print each character of the string in either uppercase or lowercase (for example, the strings NO, nO, No, and no will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4A,B,C\\xe2\\x89\\xa4100\\nSubtasks\\nSubtask 1 (10 points):\\n1\\xe2\\x89\\xa4M\\xe2\\x89\\xa410\\nSubtask 2 (20 points): The sum of\\nN across all test cases won\\'t exceed\\n20.\\nSubtask 3 (70 points): No further constraints.\\nSample 1:\\nInput\\nOutput\\n4\\n30 35 25\\n30 35 40\\n30 35 35\\n30 25 35\\nYes\\nNo\\nYes\\nNo\\nExplanation:\\nTest Case 1: Alice wants the temperature to be\\n\\xe2\\x89\\xa530, Bob wants it to be\\n\\xe2\\x89\\xa435, and Charlie wants it to be\\n\\xe2\\x89\\xa525. The temperatures\\n30,31,32,33,34,35 all satisfy all their demands. So they can choose any of these 6 temperatures, and so the answer is \"Yes\".\\nTest Case 2: Alice wants the temperature to be\\n\\xe2\\x89\\xa530, Bob wants it to be\\n\\xe2\\x89\\xa435, and Charlie wants it to be\\n\\xe2\\x89\\xa540. A number can\\'t be both\\n\\xe2\\x89\\xa540, and\\n\\xe2\\x89\\xa435. So there is no temperature that satisfies all their demands. So the answer is \"No\".\\nTest Case 3: Alice wants the temperature to be\\n\\xe2\\x89\\xa530, Bob wants it to be\\n\\xe2\\x89\\xa435, and Charlie wants it to be\\n\\xe2\\x89\\xa535. The temperature\\n35 satisfies all their demands. So the answer is \"Yes\".\\nTest Case 4: Alice wants the temperature to be\\n\\xe2\\x89\\xa530, Bob wants it to be\\n\\xe2\\x89\\xa425, and Charlie wants it to be\\n\\xe2\\x89\\xa535. A number can\\'t be both\\n\\xe2\\x89\\xa530, and\\n\\xe2\\x89\\xa425. So there is no temperature that satisfies all their demands. So the answer is \"No\".'",
        "136": "b'Nearest Exit\\nThere are two exits in a bus with\\n100 seats:\\nFirst exit is located beside seat number\\n1.\\nSecond exit is located beside seat number\\n100.\\nSeats are arranged in a straight line from\\n1 to\\n100 with equal spacing between any\\n2 adjacent seats.\\nA passenger prefers to choose the nearest exit while leaving the bus.\\nDetermine the exit taken by passenger sitting on seat\\nX.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists a single integer\\nX, denoting the seat number.\\nOutput Format\\nFor each test case, output LEFT if the passenger chooses the exit beside seat\\n1, RIGHT otherwise.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings LEFT, lEft, left, and lEFT will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n6\\n1\\n50\\n100\\n30\\n51\\n73\\nLEFT\\nLEFT\\nRIGHT\\nLEFT\\nRIGHT\\nRIGHT\\nExplanation:\\nTest case\\n1: The exit is located beside seat\\n1. Hence, the passenger can take this exit without moving to any other seat.\\nTest case\\n2: To take exit at seat\\n1, the passenger needs to move\\n49 seats. However, to take the exit at seat\\n100, the passenger needs to move\\n50 seats. Thus, exit at seat\\n1 is closer.\\nTest case\\n3: The exit is located beside seat\\n100. Hence, the passenger can take this exit without moving to any other seat.\\nTest case\\n4: To take exit at seat\\n1, the passenger needs to move\\n29 seats. However, to take the exit at seat\\n100, the passenger needs to move\\n70 seats. Thus, exit at seat\\n1 is closer.'",
        "137": "b'Reverse The Number\\nGiven an Integer N, write a program to reverse it.\\nInput\\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N.\\nOutput\\nFor each test case, display the reverse of the given number N, in a new line.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 1000\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 1000000\\nSample 1:\\nInput\\nOutput\\n4\\n12345\\n31203\\n2123\\n2300\\n54321\\n30213\\n3212\\n32'",
        "138": "b'Sasta Shark Tank\\nDevendra just had a million-dollar idea and he needs funds to startup. He was recently invited to Sasta Shark Tank (A TV show where entrepreneurs pitch their ideas to investors hoping to get investment in return).\\nHe was offered deals from two investors. The first investor offers\\nA dollars for\\n10% of his company and the second investor offers\\nB dollars for\\n20% of his company. Devendra will accept the offer from the investor whose valuation of the company is more. Determine which offer will Devendra accept or if both the offers are equally good.\\nFor example, if the first investor offers\\n300 dollars for\\n10% of the company, then the first investor\\'s valuation of the company is\\n3000 dollars since\\n10% of\\n3000=300. If the second investor offers\\n500 dollars for\\n20% of the company, then the second investor\\'s valuation of the company is\\n2500 dollars since\\n20% of\\n2500=500.\\nInput Format\\nThe first line contains a single integer\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two integers\\nA and\\nB - the amount offered by first investor for\\n10% of Devendra\\'s company and the amount offered by second investor for\\n20% of Devendra\\'s company respectively.\\nOutput Format\\nFor each test case, Output FIRST if Devendra should accept the first investor\\'s deal, output SECOND if he should accept the second investor\\'s deal, otherwise output ANY if both deals are equally good.\\nYou may print each character of the strings in uppercase or lowercase (for example, the strings \"FiRst\", \"First\", \"FIRST\", and \"FIrst\" will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n100\\xe2\\x89\\xa4A,B\\xe2\\x89\\xa410000\\nA and\\nB are multiples of\\n100\\nSample 1:\\nInput\\nOutput\\n3\\n100 200\\n200 100\\n200 500\\nANY\\nFIRST\\nSECOND\\nExplanation:\\nTest case 1: First investor\\'s valuation of Devendra\\'s company was\\n1000 since\\n10% of\\n1000=100 which is the amount he offered for\\n10% of the company.\\nSecond investor\\'s valuation of Devendra\\'s company was also\\n1000 since\\n20% of\\n1000=200 which is the amount he offered for\\n20% of the company.\\nTherefore he can accept any of the deal.\\nTest case 2: First investor offered a better deal as he valued Devendra\\'s company at\\n2000 dollars (since\\n10% of\\n2000=200) compared to the second investor who valued Devendra\\'s company at\\n500 dollars (since\\n20% of\\n500=100).\\nTest case 3: Second investor offered a better deal as he valued Devendra\\'s company at\\n2500 dollars compared to the first investor who valued Devendra\\'s company\\n2000 dollars.'",
        "139": "b'Good Program\\nIn computing, the collection of four bits is called a nibble.\\nChef defines a program as:\\nGood, if it takes exactly\\nX nibbles of memory, where\\nX is a positive integer.\\nNot Good, otherwise.\\nGiven a program which takes\\nN bits of memory, determine whether it is Good or Not Good.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains a single integer\\nN, the number of bits taken by the program.\\nOutput Format\\nFor each test case, output\\nGood or\\nNot Good in a single line. You may print each character of\\nGood or\\nNot Good in uppercase or lowercase (for example,\\nGoOd,\\nGOOD,\\ngood will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n4\\n8\\n17\\n52\\n3\\nGood\\nNot Good\\nGood\\nNot Good\\nExplanation:\\nTest case 1: The program requires\\n8 bits of memory. This is equivalent to\\n4\\n8\\n=2 nibbles. Since\\n2 is an integer, this program is good.\\nTest case 2: The program requires\\n17 bits of memory. This is equivalent to\\n4\\n17\\n=4.25 nibbles. Since\\n4.25 is not an integer, this program is not good.\\nTest case 3: The program requires\\n52 bits of memory. This is equivalent to\\n4\\n52\\n=13 nibbles. Since\\n13 is an integer, this program is good.\\nTest case 4: The program requires\\n3 bits of memory. This is equivalent to\\n4\\n3\\n=0.75 nibbles. Since\\n0.75 is not an integer, this program is not good.'",
        "140": "b\"Qualify the round\\nIn a coding contest, there are two types of problems:\\nEasy problems, which are worth\\n1 point each\\nHard problems, which are worth\\n2 points each\\nTo qualify for the next round, a contestant must score at least\\nX points. Chef solved\\nA Easy problems and\\nB Hard problems. Will Chef qualify or not?\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nEach test case consists of a single line of input containing three space-separated integers \\xe2\\x80\\x94\\nX,A, and\\nB.\\nOutput Format\\nFor each test case, output a new line containing the answer \\xe2\\x80\\x94 Qualify if Chef qualifies for the next round, and NotQualify otherwise.\\nEach character of the answer may be printed in either uppercase or lowercase. For example, if the answer is Qualify, outputs such as qualify, quALiFy, QUALIFY and QuAlIfY will also be accepted as correct.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4A,B\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n15 9 3\\n5 3 0\\n6 2 8\\nQualify\\nNotQualify\\nQualify\\nExplanation:\\nTest Case\\n1: Chef solved\\n9 easy problems and\\n3 hard problems, making his total score\\n9\\xe2\\x8b\\x851+3\\xe2\\x8b\\x852=15. He needs at least\\n15 points to qualify, which he has and hence he qualifies.\\nTest Case\\n2: Chef solved\\n3 easy problems and\\n0 hard problems, making his total score\\n3\\xe2\\x8b\\x851+0\\xe2\\x8b\\x852=3. He needs at least\\n5 points to qualify, which he doesn't have and hence doesn't qualify.\\nTest Case\\n3: Chef solved\\n2 easy problems and\\n8 hard problems, making his total score\\n2\\xe2\\x8b\\x851+8\\xe2\\x8b\\x852=18. He needs at least\\n6 points to qualify, which he has and hence he qualifies.\"",
        "141": "b'Elections in Chefland\\nElection season has started in Chefland and the election commission wants to know the count of eligible voters.\\nThere are\\nN people in Chefland where the age of the\\ni\\nth\\nperson in\\nA\\ni\\n.\\nGiven that a person needs to be at least\\nX years old to vote, find the number of eligible voters.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains two space-separated integers\\nN and\\nX \\xe2\\x80\\x94 the number of people in Chefland, and the minimum age required for a person to vote in Chefland.\\nThe next line contains\\nN space-separated integers, where the\\ni\\nth\\ninteger denotes the age of the\\ni\\nth\\nperson.\\nOutput Format\\nFor each test case, output on a new line, the number of eligible voters in Chefland.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4200\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4A\\ni\\n,X\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n4 3\\n5 3 1 2\\n3 2\\n1 3 4\\n4 2\\n2 1 2 4\\n5 6\\n1 2 3 4 5\\n2\\n2\\n3\\n0\\nExplanation:\\nTest case\\n1: The minimum age to vote in Chefland is\\n3 years. There are\\n2 people with age greater than equal to\\n3 and thus, there are\\n2 eligible voters.\\nTest case\\n2: The minimum age to vote in Chefland is\\n2 years. There are\\n2 people with age greater than equal to\\n2 and thus, there are\\n2 eligible voters.\\nTest case\\n3: The minimum age to vote in Chefland is\\n2 years. There are\\n3 people with age greater than equal to\\n2 and thus, there are\\n3 eligible voters.\\nTest case\\n4: The minimum age to vote in Chefland is\\n6 years. There are no people with age greater than equal to\\n6 and thus, there are no eligible voters.'",
        "142": "b'Minimum Cars required\\nA single car can accommodate at most\\n4 people.\\nN friends want to go to a restaurant for a party. Find the minimum number of cars required to accommodate all the friends.\\nInput Format\\nThe first line contains a single integer\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains an integer\\nN - denoting the number of friends.\\nOutput Format\\nFor each test case, output the minimum number of cars required to accommodate all the friends.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n4\\n4\\n2\\n7\\n98\\n1\\n1\\n2\\n25\\nExplanation:\\nTest Case\\n1: There are only\\n4 friends and a single car can accommodate\\n4 people. Thus, only\\n1 car is required.\\nTest Case\\n2: There are only\\n2 friends and a single car can accommodate\\n4 people. Thus, only\\n1 car is required\\nTest Case\\n3: There are\\n7 friends and\\n2 cars can accommodate\\n8 people. Thus,\\n2 cars are required.'",
        "143": "b'Test Score\\nIn a test, there are\\nN problems, each carrying\\nX marks.\\nIn each problem, Chef either received\\nX marks or\\n0 marks.\\nDetermine whether is it possible for Chef to achieve exactly\\nY marks.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of three integers\\nN,X, and\\nY, the number of problems, the maximum score for each problem, and the score Chef wants.\\nOutput Format\\nFor each test case, output YES if Chef can achieve exactly\\nY marks, NO otherwise.\\nYou can print each character of the string in uppercase or lowercase. For example, the strings Yes, YES, yes, and yEs, are all considered identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa410\\n0\\xe2\\x89\\xa4Y\\xe2\\x89\\xa4N\\xe2\\x8b\\x85X\\nSample 1:\\nInput\\nOutput\\n5\\n1 8 4\\n3 6 12\\n4 5 0\\n10 10 100\\n8 5 36\\nNO\\nYES\\nYES\\nYES\\nNO\\nExplanation:\\nTest case\\n1: There is no way for Chef to score exactly\\n4 marks.\\nTest case\\n2: Chef can score\\n12 marks by receiving\\n6 marks in\\n2 problems and\\n0 marks in\\n1 problem.\\nTest case\\n3: Chef can score\\n0 marks by receiving\\n0 marks in each of the\\n4 problems.\\nTest case\\n4: Chef can score\\n100 marks by receiving\\n10 marks in each of the\\n10 problems.\\nTest case\\n5: There is no way for Chef to score exactly\\n36 marks.'",
        "144": "b'Jenga Night\\nChef hosts a party for his birthday. There are\\nN people at the party. All these\\nN people decide to play Jenga.\\nThere are\\nX Jenga tiles available. In one round, all the players pick\\n1 tile each and place it in the tower.\\nThe game is valid if:\\nAll the players have a tile in each round;\\nAll the tiles are used at the end.\\nGiven\\nN and\\nX, find whether the game is valid.\\nInput Format\\nFirst line will contain\\nT, the number of test cases. Then the test cases follow.\\nEach test case contains a single line of input, containing two space-separated integers\\nN and\\nX representing the number of people at the party and the number of available tiles respectively.\\nOutput Format\\nFor each test case, output in a single line\\nYES if the game is valid, else output\\nNO.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings\\nYeS,\\nyEs,\\nyes and\\nYES will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N,X\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n3\\n3 3\\n4 2\\n2 4\\nYES\\nNO\\nYES\\nExplanation:\\nTest case\\n1: The game will last for\\n1 round after which the tiles will finish.\\nTest case\\n2: There are not enough Jenga tiles for everyone to place.\\nTest case\\n3: The game will last for\\n2 rounds as after round\\n2 all Jenga tiles are used.'",
        "145": "b'Bus Seat Numbering\\nThere is a bus with 30 seats. The seats are numbered from 1 to 30, and the numbering is as depicted in this image.\\nAs can be seen in the image, the bus is divided into two decks - The Lower deck, and the Upper deck, with 15 seats each. And some of the seats come as Single and some as Double. For example, Seats 1 and 2 are Double, whereas Seat 11 is a Single.\\nYou will be given a Seat number, and your job is to classify it as one of these 4 types:\\nLower Single\\nLower Double\\nUpper Single\\nUpper Double\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line of input which contains a single integers\\nN \\xe2\\x80\\x94 the seat number.\\nOutput Format\\nFor each test case, output on a new line, the type of seat.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa430\\nSample 1:\\nInput\\nOutput\\n5\\n6\\n28\\n16\\n13\\n10\\nLower Double\\nUpper Single\\nUpper Double\\nLower Single\\nLower Double\\nExplanation:\\nTestcase 1: The seat number 6 is in the Lower deck, and it is a Double. Hence the output is \"Lower Double\".\\nTestcase 2: The seat number 28 is in the Upper deck, and it is a Single. Hence the output is \"Upper Single\".\\nTestcase 3: The seat number 16 is in the Upper deck, and it is a Double. Hence the output is \"Upper Double\".\\nTestcase 4: The seat number 13 is in the Lower deck, and it is a Single. Hence the output is \"Lower Single\".\\nTestcase 5: The seat number 10 is in the Lower deck, and it is a Double. Hence the output is \"Lower Double\".'",
        "146": "b'Discus Throw\\nIn discus throw, a player is given\\n3 throws and the throw with the longest distance is regarded as their final score.\\nYou are given the distances for all\\n3 throws of a player. Determine the final score of the player.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains of a single line of input, three integers\\nA,B, and\\nC denoting the distances in each throw.\\nOutput Format\\nFor each test case, output the final score of the player.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4A,B,C\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n10 15 8\\n32 32 32\\n82 45 54\\n15\\n32\\n82\\nExplanation:\\nTest Case\\n1: The longest distance is achieved in the second throw, which is equal to\\n15 units. Thus, the answer is\\n15.\\nTest Case\\n2: In all throws, the distance is\\n32 units. Thus, the final score is\\n32.\\nTest Case\\n3: The longest distance is achieved in the first throw which is equal to\\n82 units. Thus, the answer is\\n82.'",
        "147": "b'Maximise the Tastiness\\nChef is making a dish that consists of exactly two ingredients. He has four ingredients\\nA,B,C and\\nD with tastiness\\na,b,c, and\\nd respectively. He can use either\\nA or\\nB as the first ingredient and either\\nC or\\nD as the second ingredient.\\nThe tastiness of a dish is the sum of tastiness of its ingredients. Find the maximum possible tastiness of the dish that the chef can prepare.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case contains four space-separated integers\\na,b,c, and\\nd \\xe2\\x80\\x94 the tastiness of the four ingredients.\\nOutput Format\\nFor each test case, output on a new line the maximum possible tastiness of the dish that chef can prepare.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4a,b,c,d\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n2\\n3 5 6 2\\n16 15 5 4\\n11\\n21\\nExplanation:\\nTest case\\n1: Chef can prepare a dish with ingredients\\nB and\\nC with a tastiness of\\n5+6=11.\\nTest case\\n2: Chef can prepare a dish with ingredients\\nA and\\nC with a tastiness of\\n16+5=21.'",
        "148": "b'Watching Movies at 2x\\nChef started watching a movie that runs for a total of\\nX minutes.\\nChef has decided to watch the first\\nY minutes of the movie at twice the usual speed as he was warned by his friends that the movie gets interesting only after the first\\nY minutes.\\nHow long will Chef spend watching the movie in total?\\nNote: It is guaranteed that\\nY is even.\\nInput Format\\nThe first line contains two space separated integers\\nX,Y - as per the problem statement.\\nOutput Format\\nPrint in a single line, an integer denoting the total number of minutes that Chef spends in watching the movie.\\nConstraints\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa41000\\nY is an even integer.\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n100 20\\n90\\nExplanation:\\nFor the first\\nY=20 minutes, Chef watches at twice the usual speed, so the total amount of time spent to watch this portion of the movie is\\n2\\nY\\n=10 minutes.\\nFor the remaining\\nX\\xe2\\x88\\x92Y=80 minutes, Chef watches at the usual speed, so it takes him\\n80 minutes to watch the remaining portion of the movie.\\nIn total, Chef spends\\n10+80=90 minutes watching the entire movie.\\nSample 2:\\nInput\\nOutput\\n50 24\\n38\\nExplanation:\\nFor the first\\nY=24 minutes, Chef watches at twice the usual speed, so the total amount of time spent to watch this portion of the movie is\\n2\\nY\\n=12 minutes.\\nFor the remaining\\nX\\xe2\\x88\\x92Y=26 minutes, Chef watches at the usual speed, so it takes him\\n26 minutes to watch the remaining portion of the movie.\\nIn total, Chef spends\\n12+26=38 minutes watching the entire movie.'",
        "149": "b'Police and Thief\\nChef discovered that his secret recipe has been stolen. He immediately informs the police of the theft.\\nIt is known that the policeman and thief move on the number line. You are given that:\\nThe initial location of the policeman on the number line is\\nX and his speed is\\n2 units per second.\\nThe initial location of the thief on the number line is\\nY and his speed is\\n1 unit per second.\\nFind the minimum time (in seconds) in which the policeman can catch the thief. Note that, the policeman catches the thief as soon as their locations become equal and the thief will try to evade the policeman for as long as possible.\\nInput Format\\nThe first line of input will contain an integer\\nT \\xe2\\x80\\x94 the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains two integers\\nX and\\nY, as described in the problem statement.\\nOutput Format\\nFor each test case, output in a single line the minimum time taken by the policeman to catch the thief.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n\\xe2\\x88\\x9210\\n5\\n\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa410\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n1 3\\n2 1\\n1 1\\n2\\n1\\n0\\nExplanation:\\nTest case\\n1: The initial locations of the policeman and thief are\\n1 and\\n3 respectively. The minimum time taken by the policeman to catch the thief is\\n2 seconds, and this happens when both the policeman and the thief move towards the right.\\nTest case\\n2: The initial location of the policeman and thief are\\n2 and\\n1 respectively. The minimum time taken by the policeman to catch the thief is\\n1 second, and this happens when both the policeman and the thief move towards the left.\\nTest case\\n3: The initial locations of the policeman and thief are\\n1 and\\n1 respectively. Because the police is already present at the location of thief, the time taken by police to catch the thief is\\n0 seconds.'",
        "150": "b'Flip the cards\\nThere are\\nN cards on a table, out of which\\nX cards are face-up and the remaining are face-down.\\nIn one operation, we can do the following:\\nSelect any one card and flip it (i.e. if it was initially face-up, after the operation, it will be face-down and vice versa)\\nWhat is the minimum number of operations we must perform so that all the cards face in the same direction (i.e. either all are face-up or all are face-down)?\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two space-separated integers\\nN and\\nX \\xe2\\x80\\x94 the total number of cards and the number of cards which are initially face-up.\\nOutput Format\\nFor each test case, output the minimum number of cards you must flip so that all the cards face in the same direction.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa45000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4X\\xe2\\x89\\xa4N\\nSample 1:\\nInput\\nOutput\\n4\\n5 0\\n4 2\\n3 3\\n10 2\\n0\\n2\\n0\\n2\\nExplanation:\\nTest Case 1: All the cards are already facing down. Therefore we do not need to perform any operations.\\nTest Case 2:\\n2 cards are facing up and\\n2 cards are facing down. Therefore we can flip the\\n2 cards which are initially facing down.\\nTest Case 3: All the cards are already facing up. Therefore we do not need to perform any operations.\\nTest Case 4:\\n2 cards are facing up and\\n8 cards are facing down. Therefore we can flip the\\n2 cards which are initially facing up.'",
        "151": "b'Bath in Winters\\nA geyser has a capacity of\\nX litres of water and a bucket has a capacity of\\nY litres of water.\\nOne person requires exactly\\n2 buckets of water to take a bath. Find the maximum number of people that can take bath using water from one completely filled geyser..\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains a single line of input, two integers\\nX,Y.\\nOutput Format\\nFor each test case, output the maximum number of people that can take bath.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n10 6\\n25 1\\n100 10\\n30 40\\n0\\n12\\n5\\n0\\nExplanation:\\nTest Case\\n1: One bucket has a capacity of\\n6 litres. This means that one person requires\\n2\\xe2\\x8b\\x856=12 litres of water to take a bath. Since this is less than the total water present in geyser,\\n0 people can take bath.\\nTest Case\\n2: One bucket has a capacity of\\n1 litre. This means that one person requires\\n2\\xe2\\x8b\\x851=2 litres of water to take a bath. The total amount of water present in geyser is\\n25 litres. Thus,\\n12 people can take bath. Note that\\n1 litre water would remain unused in the geyser.\\nTest Case\\n3: One bucket has a capacity of\\n10 litres. This means that one person requires\\n2\\xe2\\x8b\\x8510=20 litres of water to take a bath. The total amount of water present in geyser is\\n100 litres. Thus,\\n5 people can take bath. Note that\\n0 litres of water would remain unused in the geyser after this.'",
        "152": "b\"Finding Shoes\\nChef has\\nN friends. Chef promised that he would gift a pair of shoes (consisting of one left shoe and one right shoe) to each of his\\nN friends. Chef was about to go to the marketplace to buy shoes, but he suddenly remembers that he already had\\nM left shoes.\\nWhat is the minimum number of extra shoes that Chef will have to buy to ensure that he is able to gift a pair of shoes to each of his\\nN friends?\\nFor example, if\\nN=2,\\nM=4, then Chef already has\\n4 left shoes, so he must buy\\n2 extra right shoes to form\\n2 pairs of shoes.\\nTherefore Chef must buy at least\\n2 extra shoes to ensure that he is able to get\\nN=2 pairs of shoes.\\nInput Format\\nThe first line contains a single integer\\nT - the number of test cases. Then the test cases follow.\\nThe first line of each test case contains two integers\\nN and\\nM - the number of Chef's friends and the number of left shoes Chef has.\\nOutput Format\\nFor each test case, output the minimum number of extra shoes that Chef will have to buy to ensure that he is able to get\\nN pairs of shoes.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4M\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n2 4\\n6 0\\n4 3\\n2\\n12\\n5\\nExplanation:\\nTest Case 1: Discussed in the problem statement\\nTest Case 2: Chef initially has no left shoes. He must buy\\n6 more left shoes and\\n6 more right shoes to form\\n6 pairs of shoes.\\nTest Case 3: Chef initially has\\n3 left shoes. He must buy\\n1 more left shoe and\\n4 more right shoes to form\\n4 pairs of shoes.\"",
        "153": "b'Small factorials\\nYou are asked to calculate factorials of some small positive integers.\\nInput\\nAn integer t, 1<=t<=100, denoting the number of testcases, followed by t lines, each containing a single integer n, 1 <= n <= 100\\nOutput\\nFor each integer n given at input, display a line with the value of n!\\nNote: For larger numbers, their factorial can overflows any available numeric data type in C.\\nSample 1:\\nInput\\nOutput\\n4\\n1\\n2\\n5\\n3\\n1\\n2\\n120\\n6'",
        "154": "b\"Mario and Transformation\\nMario transforms each time he eats a mushroom as follows:\\nIf he is currently small, he turns normal.\\nIf he is currently normal, he turns huge.\\nIf he is currently huge, he turns small.\\nGiven that Mario was initially normal, find his size after eating\\nX mushrooms.\\nInput Format\\nThe first line of input will contain one integer\\nT, the number of test cases. Then the test cases follow.\\nEach test case contains a single line of input, containing one integer\\nX.\\nOutput Format\\nFor each test case, output in a single line Mario's size after eating\\nX mushrooms.\\nPrint:\\nNORMAL, if his final size is normal.\\nHUGE, if his final size is huge.\\nSMALL, if his final size is small.\\nYou may print each character of the answer in either uppercase or lowercase (for example, the strings\\nHuge,\\nhUgE,\\nhuge and\\nHUGE will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n2\\n4\\n12\\nSMALL\\nHUGE\\nNORMAL\\nExplanation:\\nTest case\\n1: Mario's initial size is normal. On eating the first mushroom, he turns huge. On eating the second mushroom, he turns small.\\nTest case\\n2: Mario's initial size is normal. On eating the first mushroom, he turns huge. On eating the second mushroom, he turns small. On eating the third mushroom, he turns normal. On eating the fourth mushroom, he turns huge.\"",
        "155": "b\"Mario and Bullet\\nMario's bullet moves at\\nX pixels per frame. He wishes to shoot a goomba standing\\nY pixels away from him. The goomba does not move.\\nFind the minimum time (in seconds) after which Mario should shoot the bullet, such that it hits the goomba after at least\\nZ seconds from now.\\nInput Format\\nThe first line of input will contain an integer\\nT, the number of test cases. Then the test cases follow.\\nEach test case consists of a single line of input, containing three space-separated integers\\nX,Y, and\\nZ.\\nOutput Format\\nFor each test case, output in a single line the minimum time (in seconds) after which Mario should shoot the bullet, such that it hits the goomba after at least\\nZ seconds from now.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y,Z\\xe2\\x89\\xa4100\\nX divides\\nY\\nSample 1:\\nInput\\nOutput\\n3\\n3 3 5\\n2 4 1\\n3 12 8\\n4\\n0\\n4\\nExplanation:\\nTest case\\n1: The speed of the bullet is\\n3 pixels per frame and the goomba is\\n3 pixels away from Mario. Thus, it would take\\n1 second for the bullet to reach the goomba. Mario wants the bullet to reach goomba after at least\\n5 seconds. So, he should fire the bullet after\\n4 seconds.\\nTest case\\n2: The speed of the bullet is\\n2 pixels per frame and the goomba is\\n4 pixels away from Mario. Thus, it would take\\n2 seconds for the bullet to reach the goomba. Mario wants the bullet to reach the goomba after at least\\n1 second. So, he should fire the bullet after\\n0 seconds. Note that, this is the minimum time after which he can shoot a bullet.\\nTest case\\n3: The speed of the bullet is\\n3 pixels per frame and the goomba is\\n12 pixels away from Mario. Thus, it would take\\n4 seconds for the bullet to reach the goomba. Mario wants the bullet to reach goomba after at least\\n8 seconds. So, he should fire the bullet after\\n4 seconds.\"",
        "156": "b\"Chess Ratings\\nAlice has recently started playing Chess. Her current rating is\\nX. She noticed that when she wins a game, her rating increases by\\n8 points.\\nCan you help Alice in finding out the minimum number of games she needs to win in order to make her rating greater than or equal to\\nY?\\nInput Format\\nThe first line of input will contain an integer\\nT \\xe2\\x80\\x94 the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains two integers\\nX and\\nY, as described in the problem statement.\\nOutput Format\\nFor each test case, output the minimum number of games that Alice needs to win in order to make her rating greater than or equal to\\nY.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4Y\\xe2\\x89\\xa410\\n4\\nSample 1:\\nInput\\nOutput\\n4\\n10 10\\n10 17\\n10 18\\n10 19\\n0\\n1\\n1\\n2\\nExplanation:\\nTest case\\n1: Since Alice's current rating\\nX is already equal to her desired rating\\nY, she doesn't need to win any game.\\nTest case\\n2: Alice's current rating is\\n10. After winning\\n1 game, her rating will become\\n10+8=18, which is greater than her desired rating of\\n17. Thus, she has to win at least\\n1 game.\\nTest case\\n3: Alice's current rating is\\n10. After winning\\n1 game, her rating will become\\n10+8=18, which is equal to her desired rating of\\n18. Thus, she has to win at least\\n1 game.\\nTest case\\n4: Alice's current rating is\\n10. After winning\\n1 game, her rating will become\\n18, which is less than her desired rating of\\n19. She will need to win one more game in order to make her rating\\n26, which is greater than\\n19. Thus, she has to win at least\\n2 games.\"",
        "157": "b'Complementary Strand in a DNA\\nYou are given the sequence of Nucleotides of one strand of DNA through a string\\nS of length\\nN.\\nS contains the character\\nA,T,C, and\\nG only.\\nChef knows that:\\nA is complementary to\\nT.\\nT is complementary to\\nA.\\nC is complementary to\\nG.\\nG is complementary to\\nC.\\nUsing the string\\nS, determine the sequence of the complementary strand of the DNA.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nFirst line of each test case contains an integer\\nN - denoting the length of string\\nS.\\nSecond line contains\\nN characters denoting the string\\nS.\\nOutput Format\\nFor each test case, output the string containing\\nN characters - sequence of nucleotides of the complementary strand.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\nS contains A, T, C, and G only\\nSample 1:\\nInput\\nOutput\\n4\\n4\\nATCG\\n4\\nGTCC\\n5\\nAAAAA\\n3\\nTAC\\nTAGC\\nCAGG\\nTTTTT\\nATG\\nExplanation:\\nTest case\\n1: Based on the rules, the complements of A, T, C, and G are T, A, G, and C respectively. Thus, the complementary string of the given string ATCG is TAGC.\\nTest case\\n2: Based on the rules, the complements of G, T, and C are C, A, and G respectively. Thus, the complementary string of the given string GTCC is CAGG.\\nTest case\\n3: Based on the rules, the complement of A is T. Thus, the complementary string of the given string AAAAA is TTTTT.\\nTest case\\n4: Based on the rules, the complements of T, A, and C are A, T, and G respectively. Thus, the complementary string of the given string TAC is ATG.'",
        "158": "b'Chef and Water Bottles\\nChef has\\nN empty bottles where each bottle has a capacity of\\nX litres.\\nThere is a water tank in Chefland having\\nK litres of water. Chef wants to fill the empty bottles using the water in the tank.\\nAssuming that Chef does not spill any water while filling the bottles, find out the maximum number of bottles Chef can fill completely.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains of a single line of input, three integers\\nN,X, and\\nK.\\nOutput Format\\nFor each test case, output in a single line answer, the maximum number of bottles Chef can fill completely.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N,X\\xe2\\x89\\xa410\\n5\\n0\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n5 2 8\\n10 5 4\\n3 1 4\\n4\\n0\\n3\\nExplanation:\\nTest Case\\n1: The amount of water in the tank is\\n8 litres. The capacity of each bottle is\\n2 litres. Hence,\\n4 water bottles can be filled completely.\\nTest Case\\n2: The amount of water in the tank is\\n4 litres. The capacity of each bottle is\\n5 litres. Hence, no water bottle can be filled completely.\\nTest Case\\n3: The amount of water in the tank is\\n4 litres. The capacity of each bottle is\\n1 litre. Chef has\\n3 bottles available. He can fill all these bottles completely using\\n3 litres of water.'",
        "159": "b\"Candy Distribution\\nChef has\\nN candies. He has to distribute them to exactly\\nM of his friends such that each friend gets equal number of candies and each friend gets even number of candies. Determine whether it is possible to do so.\\nNOTE: Chef will not take any candies himself and will distribute all the candies.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains of a single line of input, two integers\\nN and\\nM, the number of candies and the number of friends.\\nOutput Format\\nFor each test case, the output will consist of a single line containing Yes if Chef can distribute the candies as per the conditions and No otherwise.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings yes, Yes, yEs, and YES will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n4\\n9 3\\n4 1\\n4 2\\n8 3\\nNo\\nYes\\nYes\\nNo\\nExplanation:\\nTest case\\n1: Since Chef has\\n9 candies and\\n3 friends, each friend will get\\n3\\n9\\n=3 candies. Since\\n3 is not even, Chef doesn't satisfy the conditions.\\nTest case\\n2: Since Chef has\\n4 candies and\\n1 friend, each friend will get\\n1\\n4\\n=4 candies. Since\\n4 is even, Chef satisfies all the conditions.\\nTest case\\n3: Since Chef has\\n4 candies and\\n2 friends, each friend will get\\n2\\n4\\n=2 candies. Since\\n2 is even, Chef satisfies all the conditions.\\nTest case\\n4: Since Chef has\\n8 candies and\\n3 friends. Since Chef won't be able to distribute all the candies equally, Chef does not satisfy all the conditions.\"",
        "160": "b\"Finding Square Roots\\nIn olden days finding square roots seemed to be difficult but nowadays it can be easily done using in-built functions available across many languages .\\nAssume that you happen to hear the above words and you want to give a try in finding the square root of any given integer using in-built functions. So here's your chance.\\nInput\\nThe first line of the input contains an integer T, the number of test cases. T lines follow. Each line contains an integer N whose square root needs to be computed.\\nOutput\\nFor each line of the input, output the square root of the input integer, rounded down to the nearest integer, in a new line.\\nConstraints\\n1<=T<=20\\n1<=N<=10000\\nSample 1:\\nInput\\nOutput\\n3\\n10\\n5\\n10000\\n3\\n2\\n100\"",
        "161": "b\"The Last Levels\\nChef is playing a videogame, and is getting close to the end. He decides to finish the rest of the game in a single session.\\nThere are\\nX levels remaining in the game, and each level takes Chef\\nY minutes to complete. To protect against eye strain, Chef also decides that every time he completes\\n3 levels, he will take a\\nZ minute break from playing. Note that there is no need to take this break if the game has been completed.\\nHow much time (in minutes) will it take Chef to complete the game?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of input will contain three space-separated integers\\nX,\\nY, and\\nZ.\\nOutput Format\\nFor each test case, output on a new line the answer \\xe2\\x80\\x94 the length of Chef's gaming session.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\n5\\xe2\\x89\\xa4Y\\xe2\\x89\\xa4100\\n5\\xe2\\x89\\xa4Z\\xe2\\x89\\xa415\\nSample 1:\\nInput\\nOutput\\n4\\n2 12 10\\n3 12 10\\n7 20 8\\n24 45 15\\n24\\n36\\n156\\n1185\\nExplanation:\\nTest case 1: 2 12 10\\nX = 2 (2 levels remain)\\nY = 12 (each level takes 12 minutes)\\nZ = 10 (Chef would take a 10-minute break every 3 levels, but since there are only 2 levels, no break is needed)\\nSince there are only 2 levels, and no break is needed (because Chef takes a break only after every 3 levels).\\nThe total time = X \\xc3\\x97 Y = 2 \\xc3\\x97 12 = 24 minutes.\\nTest case 3: 7 20 8\\nX = 7 (7 levels remain)\\nY = 20 (each level takes 20 minutes)\\nZ = 8 (Chef takes an 8-minute break after every 3 levels)\\nNow, let's break this down:\\nChef completes the first 3 levels: 3 x 20 = 60 minutes.\\nAfter completing these 3 levels, Chef takes an 8-minute break.\\nChef completes another 3 levels: 3 x 20 = 60 minutes.\\nAfter completing these 3 levels, Chef takes another 8-minute break.\\nNow, Chef completes the remaining 1 level: 1 x 20 = 20 minutes.\\nSo, the total time = 60 + 8 + 60 + 8 + 20 = 156 minutes.\"",
        "162": "b'Blackjack\\nChef is playing a variant of Blackjack, where\\n3 numbers are drawn and each number lies between\\n1 and\\n10 (with both\\n1 and\\n10 inclusive). Chef wins the game when the sum of these\\n3 numbers is exactly\\n21.\\nGiven the first two numbers\\nA and\\nB, that have been drawn by Chef, what should be\\n3-rd number that should be drawn by the Chef in order to win the game?\\nNote that it is possible that Chef cannot win the game, no matter what is the\\n3-rd number. In such cases, report\\n\\xe2\\x88\\x921 as the answer.\\nInput Format\\nThe first line will contain an integer\\nT - number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two integers\\nA and\\nB - the first and second number drawn by the Chef.\\nOutput Format\\nFor each testcase, output the\\n3-rd number that should be drawn by the Chef in order to win the game. Output\\n\\xe2\\x88\\x921 if it is not possible for the Chef to win the game.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4A,B\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n3\\n1 10\\n1 5\\n4 9\\n10\\n-1\\n8\\nExplanation:\\nTest case\\n1: The first two numbers are\\n1 and\\n10. If the third number will be\\n10, the resulting sum will be\\n1+10+10=21. So Chef will win the game if the third number is\\n10.\\nTest case\\n2: The first two numbers are\\n1 and\\n5. There is no number between\\n1 and\\n10, that can make the resulting sum\\n21. Hence, the answer will be\\n\\xe2\\x88\\x921 in this test case.'",
        "163": "b'Fill Candies\\nChef received\\nN candies on his birthday. He wants to put these candies in some bags. A bag has\\nK pockets and each pocket can hold at most\\nM candies. Find the minimum number of bags Chef needs so that he can put every candy into a bag.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line containing three space-separated integers\\nN,K,M.\\nOutput Format\\nFor each test case, print the minimum number of bags Chef needs so that he can put all the candies in one of the bags.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N,K,M\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n6 2 3\\n3 1 2\\n8 4 1\\n25 4 2\\n1\\n2\\n2\\n4\\nExplanation:\\nTest case\\n1: Chef puts\\n3 candies in the first pocket of a bag and the remaining\\n3 candies in the second pocket. Thus Chef will need only one bag.\\nTest case\\n2: Chef puts\\n2 candies in the only pocket of the first bag and the remaining\\n1 candy in the only pocket of the second bag. Thus Chef will need two bags.\\nTest case\\n3: Chef puts\\n4 candies in the first bag, one candy in each of the\\n4 pockets and the same for the second bag. Thus Chef will need two bags.\\nTest case\\n4: Chef puts\\n2 candies in each of the\\n4 pockets of three bags, one candy in a pocket of the fourth bag.'",
        "164": "b'X Jumps\\nChef is currently standing at stair\\n0 and he wants to reach stair numbered\\nX.\\nChef can climb either\\nY steps or\\n1 step in one move.\\nFind the minimum number of moves required by him to reach exactly the stair numbered\\nX.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line of input containing two space separated integers\\nX and\\nY denoting the number of stair Chef wants to reach and the number of stairs he can climb in one move.\\nOutput Format\\nFor each test case, output the minimum number of moves required by him to reach exactly the stair numbered\\nX.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4500\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n4 2\\n8 3\\n3 4\\n2 1\\n2\\n4\\n3\\n2\\nExplanation:\\nTest case\\n1: Chef can make\\n2 moves and climb\\n2 steps in each move to reach stair numbered\\n4.\\nTest case\\n2: Chef can make a minimum of\\n4 moves. He can climb\\n3 steps in\\n2 of those moves and\\n1 step each in remaining\\n2 moves to reach stair numbered\\n8.\\nTest case\\n3: Chef can make\\n3 moves and climb\\n1 step in each move to reach stair numbered\\n3.\\nTest case\\n4: Chef can make\\n2 moves and climb\\n1 step in each move to reach stair numbered\\n2.'",
        "165": "b'Chessboard Distance\\nThe Chessboard Distance for any two points\\n(X\\n1\\n,Y\\n1\\n) and\\n(X\\n2\\n,Y\\n2\\n) on a Cartesian plane is defined as\\nmax(\\xe2\\x88\\xa3X\\n1\\n\\xe2\\x88\\x92X\\n2\\n\\xe2\\x88\\xa3,\\xe2\\x88\\xa3Y\\n1\\n\\xe2\\x88\\x92Y\\n2\\n\\xe2\\x88\\xa3).\\nYou are given two points\\n(X\\n1\\n,Y\\n1\\n) and\\n(X\\n2\\n,Y\\n2\\n). Output their Chessboard Distance.\\nNote that,\\n\\xe2\\x88\\xa3P\\xe2\\x88\\xa3 denotes the absolute value of integer\\nP. For example,\\n\\xe2\\x88\\xa3\\xe2\\x88\\x924\\xe2\\x88\\xa3=4 and\\n\\xe2\\x88\\xa37\\xe2\\x88\\xa3=7.\\nInput Format\\nFirst line will contain\\nT, the number of test cases. Then the test cases follow.\\nEach test case consists of a single line of input containing\\n4 space separated integers -\\nX\\n1\\n,Y\\n1\\n,X\\n2\\n,Y\\n2\\n- as defined in the problem statement.\\nOutput Format\\nFor each test case, output in a single line the chessboard distance between\\n(X\\n1\\n,Y\\n1\\n) and\\n(X\\n2\\n,Y\\n2\\n)\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X\\n1\\n,Y\\n1\\n,X\\n2\\n,Y\\n2\\n\\xe2\\x89\\xa410\\n5\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n2 4 5 1\\n5 5 5 3\\n1 4 3 3\\n3\\n2\\n2\\nExplanation:\\nIn the first case, the distance between\\n(2,4) and\\n(5,1) is\\nmax(\\xe2\\x88\\xa32\\xe2\\x88\\x925\\xe2\\x88\\xa3,\\xe2\\x88\\xa34\\xe2\\x88\\x921\\xe2\\x88\\xa3)=max(\\xe2\\x88\\xa3\\xe2\\x88\\x923\\xe2\\x88\\xa3,\\xe2\\x88\\xa33\\xe2\\x88\\xa3)=3.\\nIn the second case, the distance between\\n(5,5) and\\n(5,3) is\\nmax(\\xe2\\x88\\xa35\\xe2\\x88\\x925\\xe2\\x88\\xa3,\\xe2\\x88\\xa35\\xe2\\x88\\x923\\xe2\\x88\\xa3)=max(\\xe2\\x88\\xa30\\xe2\\x88\\xa3,\\xe2\\x88\\xa32\\xe2\\x88\\xa3)=2.\\nIn the third case, the distance between\\n(1,4) and\\n(3,3) is\\nmax(\\xe2\\x88\\xa31\\xe2\\x88\\x923\\xe2\\x88\\xa3,\\xe2\\x88\\xa34\\xe2\\x88\\x923\\xe2\\x88\\xa3)=max(\\xe2\\x88\\xa3\\xe2\\x88\\x922\\xe2\\x88\\xa3,\\xe2\\x88\\xa31\\xe2\\x88\\xa3)=2.'",
        "166": "b\"Valentine is Coming\\nValentine's Day is approaching and thus Chef wants to buy some chocolates for someone special.\\nChef has a total of\\nX rupees and one chocolate costs\\nY rupees. What is the maximum number of chocolates Chef can buy?\\nInput Format\\nFirst line will contain\\nT, the number of test cases. Then the test cases follow.\\nEach test case contains a single line of input, two integers\\nX,Y - the amount Chef has and the cost of one chocolate respectively.\\nOutput Format\\nFor each test case, output the maximum number of chocolates Chef can buy.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n5 10\\n16 5\\n35 7\\n100 1\\n0\\n3\\n5\\n100\\nExplanation:\\nTest case-1: Chef has\\n5 rupees but the cost of one chocolate is\\n10 rupees. Therefore Chef can not buy any chocolates.\\nTest case-2: Chef has\\n16 rupees and the cost of one chocolate is\\n5 rupees. Therefore Chef can buy at max\\n3 chocolates since buying\\n4 chocolates would cost\\n20 rupees.\\nTest case-3: Chef has\\n35 rupees and the cost of one chocolate is\\n7 rupees. Therefore Chef can buy at max\\n5 chocolates for\\n35 rupees.\\nTest case-4: Chef has\\n100 rupees and the cost of one chocolate is\\n1 rupee. Therefore Chef can buy at max\\n100 chocolates for\\n100 rupees.\"",
        "167": "b\"It is My Serve\\nAlice and Bob are playing a game of table tennis where irrespective of the point scored, every player makes\\n2 consecutive serves before the service changes. Alice makes the first serve of the match. Therefore the first\\n2 serves will be made by Alice, then the next\\n2 serves will be made by Bob and so on.\\nLet's consider the following example match for more clarity:\\nAlice makes the\\n1\\nst\\nserve.\\nLet us assume, Bob wins this point. (Score is\\n0 for Alice and\\n1 for Bob)\\nAlice makes the\\n2\\nnd\\nserve.\\nLet us assume, Alice wins this point. (Score is\\n1 for Alice and\\n1 for Bob)\\nBob makes the\\n3\\nrd\\nserve.\\nLet us assume, Alice wins this point. (Score is\\n2 for Alice and\\n1 for Bob)\\nBob makes the\\n4\\nth\\nserve.\\nLet us assume, Alice wins this point. (Score is\\n3 for Alice and\\n1 for Bob)\\nAlice makes the\\n5\\nth\\nserve.\\nAnd the game continues\\n\\xe2\\x80\\xa6\\nAfter the score reaches\\nP and\\nQ for Alice and Bob respectively, both the players forgot whose serve it is. Help them determine whose service it is.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first line of each test case contains two integers\\nP and\\nQ \\xe2\\x80\\x94 the score of Alice and Bob respectively.\\nOutput Format\\nFor each test case, determine which player's (Alice or Bob) serve it is.\\nYou may print each character of Alice and Bob in uppercase or lowercase (for example, Bob, BOB, boB will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4200\\n0\\xe2\\x89\\xa4P,Q\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n4\\n0 0\\n0 2\\n2 2\\n4 7\\nAlice\\nBob\\nAlice\\nBob\\nExplanation:\\nTest Case 1: Since no points have been scored yet, this is the first serve of the match. Alice makes the\\n1\\nst\\nserve of the match.\\nTest Case 2: Two points have been scored yet. Thus, it is the third serve of the match. Bob makes the\\n3\\nrd\\nserve of the match.\\nTest Case 3: Four points have been scored yet. Thus, it is the fifth serve of the match. Alice makes the\\n5\\nth\\nserve of the match.\\nTest Case 4: Eleven points have been scored yet. Thus, it is the twelfth serve of the match. Bob makes the\\n12\\nth\\nserve of the match.\"",
        "168": "b'Water Mixing\\nChef is setting up a perfect bath for himself. He has\\nX litres of hot water and\\nY litres of cold water.\\nThe initial temperature of water in his bathtub is\\nA degrees. On mixing water, the temperature of the bathtub changes as following:\\nThe temperature rises by\\n1 degree on mixing\\n1 litre of hot water.\\nThe temperature drops by\\n1 degree on mixing\\n1 litre of cold water.\\nDetermine whether he can set the temperature to\\nB degrees for a perfect bath.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of four space-separated integers\\nA,B,X, and\\nY \\xe2\\x80\\x94 the initial temperature of bathtub, the desired temperature of bathtub, the amount of hot water in litres, and the amount of cold water in litres respectively.\\nOutput Format\\nFor each test case, output on a new line, YES if Chef can get the desired temperature for his bath, and NO otherwise.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42000\\n20\\xe2\\x89\\xa4A,B\\xe2\\x89\\xa440\\n0\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa420\\nSample 1:\\nInput\\nOutput\\n4\\n24 25 2 0\\n37 37 2 9\\n30 20 10 9\\n30 31 0 20\\nYES\\nYES\\nNO\\nNO\\nExplanation:\\nTest case\\n1: The initial temperature of water is\\n24 and the desired temperature is\\n25. Chef has\\n2 litres of hot water. He can add\\n1 litre hot water in the tub and change the temperature to\\n24+1=25 degrees.\\nTest case\\n2: The initial temperature of water is\\n37 and the desired temperature is also\\n37. Thus, Chef does not need to add any more water in the bathtub.\\nTest case\\n3: The initial temperature of water is\\n30 and the desired temperature is\\n20. Chef needs to add\\n10 litres of cold water to reach the desired temperature. Since he only has\\n9 litres of cold water, he cannot reach the desired temperature.\\nTest case\\n4: The initial temperature of water is\\n30 and the desired temperature is\\n31. Chef needs to add\\n1 litre of hot water to reach the desired temperature. Since he has no hot water, he cannot reach the desired temperature.'",
        "169": "b'Weights\\nChef is playing with weights. He has an object weighing\\nW units. He also has three weights each of\\nX,Y, and\\nZ units respectively. Help him determine whether he can measure the exact weight of the object with one or more of these weights.\\nIf it is possible to measure the weight of object with one or more of these weights, print YES, otherwise print NO.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of single line containing a four positive integers\\nW,X,Y, and\\nZ.\\nOutput Format\\nFor each test case, output on a new line YES if it is possible to measure the weight of object with one or more of these weights, otherwise print NO.\\nYou may print each character of the string in either uppercase or lowercase (for example, the strings yes, YES, Yes, and yeS will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4W,X,Y,Z\\xe2\\x89\\xa410\\n5\\nSample 1:\\nInput\\nOutput\\n4\\n5 2 1 6\\n7 9 7 2\\n20 8 10 12\\n20 10 11 12\\nNO\\nYES\\nYES\\nNO\\nExplanation:\\nTest Case\\n1: It is not possible to measure\\n5 units using any combination of given weights.\\nTest Case\\n2: Chef can use the second weight of\\n7 units to measure the object exactly.\\nTest Case\\n3: Chef can use combination of first and third weights to measure\\n8+12=20 units.\\nTest Case\\n4: Chef cannot measure\\n20 units of weight using any combination of given weights.'",
        "170": "b\"Chef and his Apps\\nChef's phone has a total storage of\\nS MB. Also, Chef has\\n2 apps already installed on his phone which occupy\\nX MB and\\nY MB respectively.\\nHe wants to install another app on his phone whose memory requirement is\\nZ MB. For this, he might have to delete the apps already installed on his phone. Determine the minimum number of apps he has to delete from his phone so that he has enough memory to install the third app.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains four integers\\nS,X,Y and\\nZ \\xe2\\x80\\x94 the total memory of Chef's phone, the memory occupied by the two already installed apps and the memory required by the third app.\\nOutput Format\\nFor each test case, output the minimum number of apps Chef has to delete from his phone so that he can install the third app.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4S\\xe2\\x89\\xa4500\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4Y\\xe2\\x89\\xa4S\\nX+Y\\xe2\\x89\\xa4S\\nZ\\xe2\\x89\\xa4S\\nSample 1:\\nInput\\nOutput\\n4\\n10 1 2 3\\n9 4 5 1\\n15 5 10 15\\n100 20 30 75\\n0\\n1\\n2\\n1\\nExplanation:\\nTest Case 1: The unused memory in the phone is\\n7 MB. Therefore Chef can install the\\n3 MB app without deleting any app.\\nTest Case 2: There is no unused memory in the phone. Chef has to first delete one of the apps from the phone and then only he can install the\\n1 MB app.\\nTest Case 3: There is no unused memory in the phone. Chef has to first delete both the apps from the phone and then only he can install the\\n15 MB app.\\nTest Case 4: The unused memory in the phone is\\n50 MB. Chef has to first delete the\\n30 MB app from the phone and then only he can install the\\n75 MB app.\"",
        "171": "b'Chef Eren\\nChef is a very big fan of Eren Yeager.\\nIn the last season of Attack on Titan, there were\\nN episodes numbered from\\n1 to\\nN.\\nEach even indexed episode was\\nA minutes long and each odd indexed episode was\\nB minutes long.\\nCalculate the total duration (in minutes) of the last season.\\nInput Format\\nThe first line of input contains a single integer\\nT, the number of test cases.\\nThe first and only line of each test case contains three integers\\nN,\\nA, and\\nB, the number of episodes and the durations of each even-indexed and odd-indexed episodes respectively in minutes.\\nOutput Format\\nFor each test case, print a single integer on a new line, the total duration of the last season in minutes.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa460\\n1\\xe2\\x89\\xa4A,B\\xe2\\x89\\xa460\\nSample 1:\\nInput\\nOutput\\n3\\n1 2 2\\n2 3 4\\n4 20 30\\n2\\n7\\n100\\nExplanation:\\nTest case\\n1: There is only one episode, so there is\\n1 odd-indexed episode, and\\n0 even-indexed episode. The total duration of the season\\n=0\\xe2\\x8b\\x85A+1\\xe2\\x8b\\x85B=0\\xe2\\x8b\\x852+1\\xe2\\x8b\\x852=2.\\nTest case\\n2: There are two episodes with indices\\n{1,2}. Thus, there is\\n1 odd-indexed episode\\n({1}), and\\n1 even-indexed episode\\n({2}). The total duration of the season\\n=1\\xe2\\x8b\\x85A+1\\xe2\\x8b\\x85B=1\\xe2\\x8b\\x853+1\\xe2\\x8b\\x854=7.\\nTest case\\n3: There are four episodes with indices\\n{1,2,3,4}. Thus, there are\\n2 odd-indexed episodes\\n({1,3}), and\\n2 even-indexed episodes\\n({2,4}). The total duration of the season\\n=2\\xe2\\x8b\\x85A+2\\xe2\\x8b\\x85B=2\\xe2\\x8b\\x8520+2\\xe2\\x8b\\x8530=100.'",
        "172": "b'Minimum number of coins\\nChef has infinite coins in denominations of rupees\\n5 and rupees\\n10.\\nFind the minimum number of coins Chef needs, to pay exactly\\nX rupees. If it is impossible to pay\\nX rupees in denominations of rupees\\n5 and\\n10 only, print\\n\\xe2\\x88\\x921.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains of a single integer\\nX.\\nOutput Format\\nFor each test case, print a single integer - the minimum number of coins Chef needs, to pay exactly\\nX rupees. If it is impossible to pay\\nX rupees in denominations of rupees\\n5 and\\n10 only, print\\n\\xe2\\x88\\x921.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa41000\\nSubtasks\\nSubtask 1 (100 points): Original constraints.\\nSample 1:\\nInput\\nOutput\\n3\\n50\\n15\\n8\\n5\\n2\\n-1\\nExplanation:\\nTest Case\\n1: Chef would require at least\\n5 coins to pay\\n50 rupees. All these coins would be of rupees\\n10.\\nTest Case\\n2: Chef would require at least\\n2 coins to pay\\n15 rupees. Out of these,\\n1 coin would be of rupees\\n10 and\\n1 coin would be of rupees\\n5.\\nTest Case\\n3: Chef cannot pay exactly\\n8 rupees in denominations of rupees\\n5 and\\n10 only.'",
        "173": "b\"Airlines\\nAn airline operates\\nX aircraft every day. Each aircraft can carry up to\\n100 passengers.\\nOne day,\\nN passengers would like to travel to the same destination. What is the minimum number of new planes that the airline must buy to carry all\\nN passengers?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line containing two space-separated integers\\nX and\\nN \\xe2\\x80\\x94 the number of aircraft the airline owns and the number of passengers travelling, respectively.\\nOutput Format\\nFor each test case, output the minimum number of planes the airline needs to purchase.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa410\\n6\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n6\\nSample 1:\\nInput\\nOutput\\n3\\n4 600\\n3 523\\n8 245\\n2\\n3\\n0\\nExplanation:\\nTest case\\n1: The airline needs at least\\n6 planes to carry\\n600 passengers. They already have\\n4, so they must purchase\\n2 more.\\nTest case\\n2: The airline needs at least\\n6 planes to carry\\n523 passengers. They already have\\n3, so they must purchase\\n3 more.\\nTest case\\n3: The airline needs at least\\n3 planes to carry\\n245 passengers. They already have\\n8, so there's no need to purchase any more.\"",
        "174": "b'Self Defence Training\\nAfter the phenomenal success of the 36th Chamber of Shaolin, San Te has decided to start 37th Chamber of Shaolin. The aim this time is to equip women with shaolin self-defence techniques.\\nThe only condition for a woman to be eligible for the special training is that she must be between\\n10 and\\n60 years of age, inclusive of both\\n10 and\\n60.\\nGiven the ages of\\nN women in his village, please help San Te find out how many of them are eligible for the special training.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN, the number of women.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,...,A\\nN\\n, the ages of the women.\\nOutput Format\\nFor each test case, output in a single line the number of women eligible for self-defence training.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa420\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n3\\n15 23 65\\n3\\n15 62 16\\n2\\n35 9\\n2\\n2\\n1\\nExplanation:\\nTest Case\\n1: Out of the women, only the\\n1\\nst\\nand\\n2\\nnd\\nwomen are eligible for the training because their ages lie in the interval\\n[10,60]. Hence the answer is 2.\\nTest Case\\n2: Only the\\n1\\nst\\nand\\n3\\nrd\\nwomen are eligible for the training because their ages lie in the interval\\n[10,60]. Hence the answer is again 2.\\nTest Case\\n3: Only the\\n1\\nst\\nwoman with age\\n35 is eligible for the training. Hence the answer is\\n1.'",
        "175": "b'Cup Finals\\nIt is the World Cup Finals. Chef only finds a match interesting if the skill difference of the competing teams is less than or equal to\\nD.\\nGiven that the skills of the teams competing in the final are\\nX and\\nY respectively, determine whether Chef will find the game interesting or not.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of testcases. The description of\\nT testcases follows.\\nEach testcase consists of a single line of input containing three space-separated integers\\nX,\\nY, and\\nD \\xe2\\x80\\x94 the skill levels of the teams and the maximum skill difference.\\nOutput Format\\nFor each testcase, output \"YES\" if Chef will find the game interesting, else output \"NO\" (without the quotes). The checker is case-insensitive, so \"YeS\" and \"nO\" etc. are also acceptable.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42000\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4D\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n5 3 4\\n5 3 1\\n5 5 0\\nYES\\nNO\\nYES\\nExplanation:\\nTest case\\n1: The skill difference between the teams is\\n2, which is less than the maximum allowed difference of\\n4.\\nTest case\\n2: The skill difference between the teams is\\n2, which is more than the maximum allowed difference of\\n1.'",
        "176": "b\"Too many Floors\\nChef and Chefina are residing in a hotel.\\nThere are\\n10 floors in the hotel and each floor consists of\\n10 rooms.\\nFloor\\n1 consists of room numbers\\n1 to\\n10.\\nFloor\\n2 consists of room numbers\\n11 to\\n20.\\n\\xe2\\x80\\xa6\\nFloor\\ni consists of room numbers\\n10\\xe2\\x8b\\x85(i\\xe2\\x88\\x921)+1 to\\n10\\xe2\\x8b\\x85i.\\nYou know that Chef's room number is\\nX while Chefina's Room number is\\nY.\\nIf Chef starts from his room, find the number of floors he needs to travel to reach Chefina's room.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains of a single line of input, two integers\\nX,Y, the room numbers of Chef and Chefina respectively.\\nOutput Format\\nFor each test case, output the number of floors Chef needs to travel to reach Chefina's room.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\nX\\n\\xee\\x80\\xa0\\n=Y\\nSample 1:\\nInput\\nOutput\\n4\\n1 100\\n42 50\\n53 30\\n81 80\\n9\\n0\\n3\\n1\\nExplanation:\\nTest Case\\n1: Since Room\\n1 is on\\n1\\nst\\nfloor and Room\\n100 is on\\n10\\nth\\nfloor, Chef needs to climb\\n9 floors to reach Chefina's Room.\\nTest Case\\n2: Since Room\\n42 is on\\n5\\nth\\nfloor and Room\\n50 is also on\\n5\\nth\\nfloor, Chef does not need to climb any floor.\\nTest Case\\n3: Since Room\\n53 is on\\n6\\nth\\nfloor and Room\\n30 is on\\n3\\nrd\\nfloor, Chef needs to go down\\n3 floors to reach Chefina's Room.\\nTest Case\\n4: Since Room\\n81 is on\\n9\\nth\\nfloor and Room\\n80 is on\\n8\\nth\\nfloor, Chef needs to go down\\n1 floors to reach Chefina's Room.\"",
        "177": "b'Speed Limit Test\\nAlice is driving from her home to her office which is\\nA kilometers away and will take her\\nX hours to reach.\\nBob is driving from his home to his office which is\\nB kilometers away and will take him\\nY hours to reach.\\nDetermine who is driving faster, else, if they are both driving at the same speed print EQUAL.\\nInput Format\\nThe first line will contain\\nT, the number of test cases. Then the test cases follow.\\nEach test case consists of a single line of input, containing four integers\\nA,X,B, and\\nY, the distances and and the times taken by Alice and Bob respectively.\\nOutput Format\\nFor each test case, if Alice is faster, print ALICE. Else if Bob is faster, print BOB. If both are equal, print EQUAL.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings equal, equAL, EquAl, and EQUAL will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4A,X,B,Y\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n3\\n20 6 20 5\\n10 3 20 6\\n9 1 1 1\\nBob\\nEqual\\nAlice\\nExplanation:\\nTest case\\n1: Since Bob travels the distance between his office and house in\\n5 hours, whereas Alice travels the same distance of\\n20 kms in\\n6 hours, BOB is faster.\\nTest case\\n2: Since Alice travels the distance of\\n10 km between her office and house in\\n3 hours and Bob travels a distance of\\n20 km in\\n6 hours, they have equal speeds.\\nTest case\\n3: Since Alice travels the distance of\\n9 km between her office and house in\\n1 hour and Bob travels only a distance of\\n1 km in the same time, ALICE is faster.'",
        "178": "b'Decrement OR Increment\\nWrite a program to obtain a number\\nN and increment its value by 1 if the number is divisible by 4\\notherwise decrement its value by 1.\\nInput Format\\nFirst line will contain a number\\nN.\\nOutput Format\\nOutput a single line, the new value of the number.\\nConstraints\\n0\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n5\\n4\\nExplanation:\\nSince 5 is not divisible by 4 hence, its value is decreased by 1.'",
        "179": "b'A or B\\nThere are two problems in a contest.\\nProblem A is worth\\n500 points at the start of the contest.\\nProblem B is worth\\n1000 points at the start of the contest.\\nOnce the contest starts, after each minute:\\nMaximum points of Problem A reduce by\\n2 points .\\nMaximum points of Problem B reduce by\\n4 points.\\nIt is known that Chef requires\\nX minutes to solve Problem A correctly and\\nY minutes to solve Problem B correctly.\\nFind the maximum number of points Chef can score if he optimally decides the order of attempting both the problems.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains of a single line of input, two integers\\nX and\\nY - the time required to solve problems\\nA and\\nB in minutes respectively.\\nOutput Format\\nFor each test case, output in a single line, the maximum number of points Chef can score if he optimally decides the order of attempting both the problems.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n10 20\\n8 40\\n15 15\\n20 10\\n1360\\n1292\\n1380\\n1400\\nExplanation:\\nTest Case\\n1: If Chef attempts in the order\\nA\\xe2\\x86\\x92B then he submits Problem A after\\n10 minutes and Problem B after\\n30 minutes.\\nThus, he gets\\n500\\xe2\\x88\\x9210\\xe2\\x8b\\x852=480 points for problem A and\\n1000\\xe2\\x88\\x9230\\xe2\\x8b\\x854=880 points for problem B. Thus, total\\n480+880=1360 points for both the problems.\\nIf Chef attempts in the order\\nB\\xe2\\x86\\x92A then he submits Problem B after\\n20 minutes and Problem A after\\n30 minutes.\\nThus, he gets\\n1000\\xe2\\x88\\x9220\\xe2\\x8b\\x854=920 points for Problem B and\\n500\\xe2\\x88\\x9230\\xe2\\x8b\\x852=440 points for Problem A. Thus total\\n920+440=1360 points for both the problems.\\nSo, in both cases Chef gets\\n1360 points in total.\\nTest Case\\n2: If Chef attempts in the order\\nA\\xe2\\x86\\x92B then he submits Problem A after\\n8 minutes and Problem B after\\n48 minutes.\\nThus, he gets\\n500\\xe2\\x88\\x928\\xe2\\x8b\\x852=484 points for problem A and\\n1000\\xe2\\x88\\x9248\\xe2\\x8b\\x854=808 points for problem B. Thus, total\\n484+808=1292 points for both the problems.\\nIf Chef attempts in the order\\nB\\xe2\\x86\\x92A then he submits Problem B after\\n40 minutes and Problem A after\\n48 minutes.\\nThus, he gets\\n1000\\xe2\\x88\\x9240\\xe2\\x8b\\x854=840 points for Problem B and\\n500\\xe2\\x88\\x9248\\xe2\\x8b\\x852=404 points for Problem A. Thus total\\n840+404=1244 points for both the problems.\\nSo, Chef will attempt in the order\\nA\\xe2\\x86\\x92B and thus obtain\\n1292 points.\\nTest Case\\n3: If Chef attempts in the order\\nA\\xe2\\x86\\x92B then he submits Problem A after\\n15 minutes and Problem B after\\n30 minutes.\\nThus, he gets\\n500\\xe2\\x88\\x9215\\xe2\\x8b\\x852=470 points for problem A and\\n1000\\xe2\\x88\\x9230\\xe2\\x8b\\x854=880 points for problem B. Thus, total\\n470+880=1350 points for both the problems.\\nIf Chef attempts in the order\\nB\\xe2\\x86\\x92A then he submits Problem B after\\n15 minutes and Problem A after\\n30 minutes.\\nThus, he gets\\n1000\\xe2\\x88\\x9215\\xe2\\x8b\\x854=940 points for Problem B and\\n500\\xe2\\x88\\x9230\\xe2\\x8b\\x852=440 points for Problem A. Thus total\\n940+440=1380 points for both the problems.\\nSo, Chef will attempt in the order\\nB\\xe2\\x86\\x92A and thus obtain\\n1380 points.\\nTest Case\\n4: If Chef attempts in the order\\nA\\xe2\\x86\\x92B then he submits Problem A after\\n20 minutes and Problem B after\\n30 minutes.\\nThus, he gets\\n500\\xe2\\x88\\x9220\\xe2\\x8b\\x852=460 points for problem A and\\n1000\\xe2\\x88\\x9230\\xe2\\x8b\\x854=880 points for problem B. Thus, total\\n460+880=1340 points for both the problems.\\nIf Chef attempts in the order\\nB\\xe2\\x86\\x92A then he submits Problem B after\\n10 minutes and Problem A after\\n30 minutes.\\nThus, he gets\\n1000\\xe2\\x88\\x9210\\xe2\\x8b\\x854=960 points for Problem B and\\n500\\xe2\\x88\\x9230\\xe2\\x8b\\x852=440 points for Problem A. Thus total\\n960+440=1400 points for both the problems.\\nSo, Chef will attempt in the order\\nB\\xe2\\x86\\x92A and thus obtain\\n1400 points.'",
        "180": "b'Second Largest\\nThree numbers A, B and C are the inputs. Write a program to find second largest among them.\\nInput Format\\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains three integers A, B and C.\\nOutput Format\\nFor each test case, display the second largest among A, B and C, in a new line.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 1000\\n1 \\xe2\\x89\\xa4 A,B,C \\xe2\\x89\\xa4 1000000\\nSample 1:\\nInput\\nOutput\\n3 \\n120 11 400\\n10213 312 10\\n10 3 450\\n120\\n312\\n10'",
        "181": "b'Pass or Fail\\nChef is struggling to pass a certain college course.\\nThe test has a total of\\nN questions, each question carries\\n3 marks for a correct answer and\\n\\xe2\\x88\\x921 for an incorrect answer. Chef is a risk-averse person so he decided to attempt all the questions. It is known that Chef got\\nX questions correct and the rest of them incorrect. For Chef to pass the course he must score at least\\nP marks.\\nWill Chef be able to pass the exam or not?\\nInput Format\\nFirst line will contain\\nT, number of testcases. Then the testcases follow.\\nEach testcase contains of a single line of input, three integers\\nN,X,P.\\nOutput Format\\nFor each test case output \"PASS\" if Chef passes the exam and \"FAIL\" if Chef fails the exam.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"pASs\", \"pass\", \"Pass\" and \"PASS\" will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4X\\xe2\\x89\\xa4N\\n0\\xe2\\x89\\xa4P\\xe2\\x89\\xa43\\xe2\\x8b\\x85N\\nSample 1:\\nInput\\nOutput\\n3\\n5 2 3\\n5 2 4\\n4 0 0\\nPASS\\nFAIL\\nFAIL\\nExplanation:\\nTest case\\n1: Chef gets\\n2 questions correct giving him\\n6 marks and since he got\\n3 questions incorrect so he faces a penalty of\\n\\xe2\\x88\\x923. So Chef\\'s final score is\\n3 and the passing marks are also\\n3, so he passes the exam :)\\nTest case\\n2: Chef\\'s total marks are\\n3 and since the passing marks are\\n4, Chef fails the test :(\\nTest case\\n3: Chef got all the problems wrong and thus his total score is\\n\\xe2\\x88\\x924. Since the passing marks are\\n0, Chef fails the exam :('",
        "182": "b'Cyclic Quadrilateral\\nRead problem statements in Mandarin Chinese, Russian, and Vietnamese as well.\\nYou are given the sizes of angles of a simple quadrilateral (in degrees)\\nA,\\nB,\\nC and\\nD, in some order along its perimeter. Determine whether the quadrilateral is cyclic.\\nNote: A quadrilateral is cyclic if and only if the sum of opposite angles is\\n180\\n\\xe2\\x88\\x98\\n.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains four space-separated integers\\nA,\\nB,\\nC and\\nD.\\nOutput\\nPrint a single line containing the string \"YES\" if the given quadrilateral is cyclic or \"NO\" if it is not (without quotes).\\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4A,B,C,D\\xe2\\x89\\xa4357\\nA+B+C+D=360\\nSample 1:\\nInput\\nOutput\\n3\\n10 20 30 300\\n10 20 170 160\\n179 1 179 1\\nNO\\nYES\\nNO\\nExplanation:\\nExample case 1: The sum of two opposite angles\\nA+C=10\\n\\xe2\\x88\\x98\\n+30\\n\\xe2\\x88\\x98\\n\\xee\\x80\\xa0\\n=180\\n\\xe2\\x88\\x98\\n.\\nExample case 2: The sum of two opposite angles\\nA+C=10\\n\\xe2\\x88\\x98\\n+170\\n\\xe2\\x88\\x98\\n=180\\n\\xe2\\x88\\x98\\nand\\nB+D=20\\n\\xe2\\x88\\x98\\n+160\\n\\xe2\\x88\\x98\\n=180\\n\\xe2\\x88\\x98\\n.\\nExample case 3: The sum of two opposite angles\\nB+D=1\\n\\xe2\\x88\\x98\\n+1\\n\\xe2\\x88\\x98\\n\\xee\\x80\\xa0\\n=180\\n\\xe2\\x88\\x98\\n.'",
        "183": "b'Too many items\\nChef bought\\nN items from a shop. Although it is hard to carry all these items in hand, so Chef has to buy some polybags to store these items.\\n1 polybag can contain at most\\n10 items. What is the minimum number of polybags needed by Chef?\\nInput Format\\nThe first line will contain an integer\\nT - number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains an integer\\nN - the number of items bought by Chef.\\nOutput Format\\nFor each test case, output the minimum number of polybags required.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n3\\n20\\n24\\n99\\n2\\n3\\n10\\nExplanation:\\nTest case-1: Chef will require\\n2 polybags. Chef can fit\\n10 items in the first and second polybag each.\\nTest case-2: Chef will require\\n3 polybags. Chef can fit\\n10 items in the first and second polybag each and fit the remaining\\n4 items in the third polybag.'",
        "184": "b\"Chef Fantasy 11\\nAll of Chef's friends are playing fantasy cricket based upon the ODI World Cup, and Chef would like to join them.\\nFor a certain cricket match, Chef has decided upon his team of\\n11 players. However, he hasn't yet decided who should be the captain and who should be the vice-captain.\\nHe's narrowed his decision down to\\nN players out of the\\n11, from which he'll choose one to be the captain and one to be the vice captain.\\nHow many different choices does he have?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and the only line of each testcase contains a single integer\\nN, the number of players Chef is considering.\\nOutput Format\\nFor each test case, output on a new line the number of possible choices of captain and vice-captain.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa411\\nSample 1:\\nInput\\nOutput\\n2\\n2\\n3\\n2\\n6\\nExplanation:\\nTest case\\n1: With\\nN=2, there are only two possibilities: one of the players must be selected as the captain, and the other will become the vice-captain.\\nTest case\\n2: It can be shown that there are\\n6 possibilities in total for captain\/vice-captain choices.\"",
        "185": "b'Building Race\\nTwo friends Chef and Chefina are currently on floors\\nA and\\nB respectively. They hear an announcement that prizes are being distributed on the ground floor and so decide to reach the ground floor as soon as possible.\\nChef can climb down\\nX floors per minute while Chefina can climb down\\nY floors per minute. Determine who will reach the ground floor first (ie. floor number 0). In case both reach the ground floor together, print Both.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first line of each test case contains four space-separated integers\\nA,\\nB,\\nX, and\\nY \\xe2\\x80\\x94 the current floor of Chef, the current floor of Chefina, speed of Chef and speed of Chefina in floors per minute respectively.\\nOutput Format\\nFor each test case, output on a new line:\\nChef if Chef reaches the ground floor first.\\nChefina if she reaches the ground floor first.\\nBoth if both reach the ground floor at the same time.\\nYou may print each character of the string in uppercase or lowercase. For example, the strings CHEF, chef, Chef, and chEF are all considered the same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42500\\n1\\xe2\\x89\\xa4A,B\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n4\\n2 2 2 2\\n4 2 1 5\\n3 2 4 1\\n3 2 2 1\\nBoth\\nChefina\\nChef\\nChef\\nExplanation:\\nTest case\\n1: Chef is on the second floor and has a speed of\\n2 floors per minute. Thus, Chef takes\\n1 minute to reach the ground floor. Chefina is on the second floor and and has a speed of\\n2 floors per minute. Thus, Chefina takes\\n1 minute to reach the ground floor. Both Chef and Chefina reach the ground floor at the same time.\\nTest case\\n2: Chef is on the fourth floor and has a speed of\\n1 floor per minute. Thus, Chef takes\\n4 minute to reach the ground floor. Chefina is on the second floor and and has a speed of\\n5 floors per minute. Thus, Chefina takes\\n0.4 minutes to reach the ground floor. Chefina reaches the ground floor first.\\nTest case\\n3: Chef is on the third floor and has a speed of\\n4 floors per minute. Thus, Chef takes\\n0.75 minutes to reach the ground floor. Chefina is on the second floor and and has a speed of\\n1 floor per minute. Thus, Chefina takes\\n2 minutes to reach the ground floor. Chef reaches the ground floor first.\\nTest case\\n4: Chef is on the third floor and has a speed of\\n2 floors per minute. Thus, Chef takes\\n1.5 minutes to reach the ground floor. Chefina is on the second floor and and has a speed of\\n1 floor per minute. Thus, Chefina takes\\n2 minutes to reach the ground floor. Chef reaches the ground floor first.'",
        "186": "b\"Chef and Races\\nThe National Championships are starting soon. There are\\n4 race categories, numbered from\\n1 to\\n4, that Chef is interested in. Chef is participating in exactly\\n2 of these categories.\\nChef has an arch-rival who is, unfortunately, the only person participating who is better than Chef, i.e, Chef can't defeat the arch-rival in any of the four race categories but can defeat anyone else. Chef's arch-rival is also participating in exactly\\n2 of the four categories.\\nChef hopes to not fall into the same categories as that of the arch-rival.\\nGiven\\nX,Y,A,B where\\nX,Y are the races that Chef participates in, and\\nA,B are the races that Chef's arch-rival participates in, find the maximum number of gold medals (first place) that Chef can win.\\nInput Format\\nThe first line of input contains an integer\\nT, denoting the number of testcases. The description of\\nT testcases follows.\\nEach testcase consists of a single line containing four space-separated integers \\xe2\\x80\\x94 the values of\\nX,Y,A, and\\nB respectively.\\nOutput Format\\nFor each testcase, print a single line containing one integer \\xe2\\x80\\x94 the maximum number of gold medals that Chef can win.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4144\\n1\\xe2\\x89\\xa4X,Y,A,B\\xe2\\x89\\xa44\\nX\\n\\xee\\x80\\xa0\\n=Y\\nA\\n\\xee\\x80\\xa0\\n=B\\nSubtasks\\nSubtask #1 (100 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n4 3 1 2\\n4 2 1 2\\n2 1 1 2\\n2\\n1\\n0\\nExplanation:\\nTest case\\n1: Chef participates in the races\\n4,3, whereas Chef's rival participates in\\n1,2. As Chef's only rival does not participate in any of the races that Chef takes part in, Chef can win the gold medal in both of the races, thus the answer is\\n2.\\nTest case\\n2: Chef participates in the races\\n4,2, whereas Chef's rival participates in\\n1,2. Chef cannot win race\\n2 as Chef will be beaten by the arch-rival, however Chef can win the gold medal for race\\n4. Thus the answer is\\n1.\\nTest case\\n3: Chef participates in the races\\n2,1, whereas Chef's rival participates in\\n1,2. Chef will be beaten by the arch-rival in both races, thus the answer is\\n0.\"",
        "187": "b'Endless Appetizers\\nLife is a like a box of of mozzarella sticks. You never know what you\\'re gonna get, but you can predict with 100 percent accuracy that it will be a mozzarella stick.\\nChef\\'s colleague issued a challenge to Chef: \"If you eat more than\\nX mozzarella sticks, I\\'ll give you\\n30 rupees for each extra one you eat\".\\nFor example, if\\nX=5 and Chef eats\\n8 sticks, he would receive\\n90 rupees because he ate\\n3 extra sticks.\\nYou know that the restaurant serves\\nY mozzarella sticks per plate.\\nYou also know that Chef received\\nR rupees from his colleague as a result of the challenge.\\nWhat\\'s the maximum number of plates of mozzarella sticks that Chef could have ordered?\\nNote:\\nChef won\\'t order a new plate till he finishes eating all the sticks from the previous one.\\nHowever, it\\'s possible that Chef didn\\'t finish all the sticks from the final plate he ordered.\\nSee the explained examples below for more clarification.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of one line of input, containing three space-separated integers\\nX,Y, and\\nR \\xe2\\x80\\x94 the lower limit on the number of sticks, the number of sticks on a single plate, and the money received by Chef.\\nOutput Format\\nFor each test case, output on a new line the answer: the maximum number of plates Chef could have ordered.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4Y\\xe2\\x89\\xa410\\n0\\xe2\\x89\\xa4R\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n4\\nIt is guaranteed that\\nR is a multiple of\\n30.\\nSample 1:\\nInput\\nOutput\\n4\\n7 5 30\\n16 5 0\\n15 9 120\\n23 1 2130\\n2\\n4\\n3\\n94\\nExplanation:\\nTest case\\n1: Chef received\\n30 rupees; meaning he ate\\n1 extra stick.\\nSince\\nX=7, this means he must\\'ve eaten exactly\\n8 sticks.\\nAt\\n5 sticks per plate, Chef would need\\n2 plates to eat\\n8 sticks (and two sticks from the second plate will remain uneaten).\\nTest case\\n2: Chef received\\n0 rupees. Since\\nX=16, this means he ate\\n\\xe2\\x89\\xa416 sticks.\\nThe maximum he could\\'ve eaten is exactly\\n16; and this would require\\n4 plates since each plate has\\n5 sticks.\\nTest case\\n3: Chef received\\n120 rupees, meaning he ate\\n4 extra sticks.\\nThis makes for a total of\\n15+4=19 sticks, and at\\n9 sticks per plate he would need\\n3 plates.'",
        "188": "b'Presents for Cheffina\\nChef has fallen in love with Cheffina, and wants to buy\\nN gifts for her. On reaching the gift shop, Chef got to know the following two things:\\nThe cost of each gift is\\n1 coin.\\nOn the purchase of every\\n4\\nth\\ngift, Chef gets the\\n5\\nth\\ngift free of cost.\\nWhat is the minimum number of coins that Chef will require in order to come out of the shop carrying\\nN gifts?\\nInput Format\\nThe first line of input will contain an integer\\nT \\xe2\\x80\\x94 the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains an integer\\nN, the number of gifts in the shop.\\nOutput Format\\nFor each test case, output on a new line the minimum number of coins that Chef will require to obtain all\\nN gifts.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n2\\n5\\n4\\n4\\n4\\nExplanation:\\nTest case\\n1: After purchasing\\n4 gifts, Chef will get the\\n5\\nth\\ngift free of cost. Hence Chef only requires\\n4 coins in order to get\\n5 gifts.\\nTest case\\n2: Chef will require\\n4 coins in order to get\\n4 gifts.'",
        "189": "b'Small Factorial\\nWrite a program to find the factorial value of any number entered by the user.\\nInput Format\\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains an integer N.\\nOutput Format\\nFor each test case, display the factorial of the given number N in a new line.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 1000\\n0 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 20\\nSample 1:\\nInput\\nOutput\\n3 \\n3 \\n4\\n5\\n6\\n24\\n120'",
        "190": "b'Dracula Eats\\nEat, drink, and be scary\\nThere are\\nN spooky days left until Halloween.\\nDracula dines at a mysterious restaurant that changes its spooky menu daily. He particularly enjoys what they serve on Tuesday.\\nToday is Monday, so he wishes to calculate how many times he can indulge in his favourite menu in the next\\nN days (including today) before Halloween.\\nNote that Dracula follows the standard\\n7-day calendar, with Tuesday immediately following Monday.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe only line of each test case contains a single integer\\nN, denoting the number of spooky days.\\nOutput Format\\nFor each test case, output on a new line the number of times Dracula would have had his favorite meal after\\nN days.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n4\\n1\\n10\\n15\\n16\\n0\\n2\\n2\\n3\\nExplanation:\\nTest case\\n1: The first day is Monday, and Dracula has only one day. So, no Tuesdays are encountered, and the answer is\\n0.\\nTest case\\n2: The first day is Monday, so the second and ninth days are Tuesdays.\\nDracula can eat his favorite meal twice.\\nTest case\\n3: Once again, the second and ninth days are Tuesday, so in\\n15 days, Dracula still gets to eat his favorite meal only twice.\\nTest case\\n4: After the ninth day, the\\n16-th day is also a Tuesday. So, this time Dracula gets to eat his favorite meal three times - on days\\n2,9,16.'",
        "191": "b'Possible Victory\\nChef is playing in a T20 cricket match. In a match, Team A plays for 20 overs. In a single over, the team gets to play 6 times, and in each of these 6 tries, they can score a maximum of 6 runs. After Team A\\'s 20 overs are finished, Team B similarly plays for 20 overs and tries to get a higher total score than the first team. The team with the higher total score at the end wins the match.\\nChef is in Team B. Team A has already played their 20 overs, and have gotten a score of\\nR. Chef\\'s Team B has started playing, and have already scored\\nC runs in the first\\nO overs. In the remaining\\n20\\xe2\\x88\\x92O overs, find whether it is possible for Chef\\'s Team B to get a score high enough to win the game. That is, can their final score be strictly larger than\\nR?\\nInput Format\\nThere is a single line of input, with three integers,\\nR,O,C.\\nOutput Format\\nOutput in a single line, the answer, which should be \"YES\" if it\\'s possible for Chef\\'s Team B to win the match and \"NO\" if not.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\\nConstraints\\n0\\xe2\\x89\\xa4C\\xe2\\x89\\xa4R\\xe2\\x89\\xa4720\\n1\\xe2\\x89\\xa4O\\xe2\\x89\\xa419\\n0\\xe2\\x89\\xa4C\\xe2\\x89\\xa436\\xe2\\x88\\x97O\\nSample 1:\\nInput\\nOutput\\n719 18 648\\nYES\\nExplanation:\\nIn the remaining\\n20\\xe2\\x88\\x92O=2 overs, Team B gets to play\\n2\\xe2\\x88\\x976=12 times, and in each try, they can get a maximum of 6 score. Which means that the maximum score that they can acheieve in these 2 overs is\\n12\\xe2\\x88\\x976=72. Thus, the maximum total score that Team B can achieve is\\nC+72=720.\\n720 is strictly more than Team A\\'s score of\\n719, and hence Chef\\'s Team B can win this match.\\nSample 2:\\nInput\\nOutput\\n720 18 648\\nNO\\nExplanation:\\nSimilar to the previous explanation, the maximum total score that Team B can achieve is\\n720, which isn\\'t strictly greater than Team A\\'s\\n720.Hence Chef\\'s Team B can\\'t win this match.'",
        "192": "b\"Chef And Operators\\nChef has just started Programming, he is in first year of Engineering. Chef is reading about Relational Operators.\\nRelational Operators are operators which check relationship between two values. Given two numerical values A and B you need to help chef in finding the relationship between them that is,\\nFirst one is greater than second or, First one is less than second or, First and second one are equal.\\n  Input\\nFirst line contains an integer T, which denotes the number of testcases. Each of the T lines contain two integers A and B.\\nOutput\\nFor each line of input produce one line of output. This line contains any one of the relational operators\\n'<' , '>' , '='.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 10000 1 \\xe2\\x89\\xa4 A, B \\xe2\\x89\\xa4 1000000001\\nSample 1:\\nInput\\nOutput\\n3\\n10 20\\n20 10\\n10 10\\n<\\n>\\n=\\nExplanation:\\nIn this example 1 as 10 is lesser than 20\"",
        "193": "b\"Mutated Minions\\nGru has not been in the limelight for a long time and is, therefore, planning something particularly nefarious. Frustrated by his minions' incapability which has kept him away from the limelight, he has built a transmogrifier \\xe2\\x80\\x94 a machine which mutates minions.\\nEach minion has an intrinsic characteristic value (similar to our DNA), which is an integer. The transmogrifier adds an integer K to each of the minions' characteristic value.\\nGru knows that if the new characteristic value of a minion is divisible by 7, then it will have Wolverine-like mutations.\\nGiven the initial characteristic integers of N minions, all of which are then transmogrified, find out how many of them become Wolverine-like.\\nInput Format\\nThe first line contains one integer, T, which is the number of test cases.\\nEach test case contains of\\n2 lines of input.\\nThe first line contains two integers N and K, as described in the statement\\nThe next line contains N integers, which denote the initial characteristic values for the minions\\nOutput Format\\nFor each testcase, output one integer in a new line, which is the number of Wolverine-like minions after the transmogrification.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 100\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 100\\n1 \\xe2\\x89\\xa4 K \\xe2\\x89\\xa4 100\\nAll initial characteristic values lie between 1 and 105, both inclusive.\\nSample 1:\\nInput\\nOutput\\n1\\n5 10\\n2 4 1 35 1\\n1\\nExplanation:\\nAfter transmogrification, the characteristic values become {12,14,11,45,11}, out of which only 14 is divisible by 7. So only the second minion becomes Wolverine-like.\"",
        "194": "b'Reach fast\\nChef is standing at coordinate\\nA while Chefina is standing at coordinate\\nB.\\nIn one step, Chef can increase or decrease his coordinate by at most\\nK.\\nDetermine the minimum number of steps required by Chef to reach Chefina.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of three integers\\nA,B, and\\nK, the initial coordinate of Chef, the initial coordinate of Chefina and the maximum number of coordinates Chef can move in one step.\\nOutput Format\\nFor each test case, output the minimum number of steps required by Chef to reach Chefina.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4A,B\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n10 20 3\\n36 36 5\\n50 4 100\\n30 4 2\\n4\\n0\\n1\\n13\\nExplanation:\\nTest case\\n1: In the first three steps, Chef increases his coordinate by\\nK=3. In the fourth step, Chef increases his coordinate by\\n1 which is less than equal to\\nK. It can be shown that this is the minimum number of steps required by Chef.\\nTest case\\n2: Chef is already at the same coordinate as Chefina. Thus, he needs\\n0 steps.\\nTest case\\n3: Chef can use\\n1 step to decrease his coordinate by\\n46 which is less than\\nK=100 and reach Chefina.\\nTest case\\n4: Chef can use\\n13 steps to decrease his coordinate by\\nK=2 and reach the coordinate\\n30\\xe2\\x88\\x9213\\xe2\\x8b\\x852=4.'",
        "195": "b'Single-use Attack\\nChef is playing a video game, and is now fighting the final boss.\\nThe boss has\\nH health points. Each attack of Chef reduces the health of the boss by\\nX.\\nChef also has a special attack that can be used at most once, and will decrease the health of the boss by\\nY.\\nChef wins when the health of the boss is\\n\\xe2\\x89\\xa40.\\nWhat is the minimum number of attacks needed by Chef to win?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case will contain three space-separated integers\\nH,X,Y \\xe2\\x80\\x94 the parameters described in the statement.\\nOutput Format\\nFor each test case, output on a new line the minimum number of attacks needed by Chef to win.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X<Y\\xe2\\x89\\xa4H\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n100 25 40\\n100 29 45\\n46 1 2\\n78 15 78\\n4\\n3\\n45\\n1\\nExplanation:\\nTest case\\n1: Chef can attack the boss\\n4 times normally. This results in\\n25+25+25+25=100 damage, which is enough to defeat the boss.\\nTest case\\n2: Chef can attack the boss\\n2 times normally, then use the special attack. This results in\\n29+29+45=103 damage, which is enough to defeat the boss.\\nTest case\\n3: Chef can proceed as follows:\\nFirst, use the special attack. This leaves the boss with\\n46\\xe2\\x88\\x922=44 health.\\nThen, use\\n44 normal attacks to defeat the boss, since each one does\\n1 damage.\\nThis takes a total of\\n44+1=45 attacks.\\nTest case\\n4: Chef can use the special attack to immediately bring the health of the boss to zero, hence only needing one attack.'",
        "196": "b\"Get Lowest Free\\nChef goes to the supermarket to buy some items. Luckily there's a sale going on under which Chef gets the following offer:\\nIf Chef buys\\n3 items then he gets the item (out of those\\n3 items) having the lowest price as free.\\nFor e.g. if Chef bought\\n3 items with the cost\\n6,\\n2 and\\n4, then he would get the item with cost\\n2 as free. So he would only have to pay the cost of the other two items which will be\\n6+4=10.\\nChef buys\\n3 items having prices\\nA,\\nB and\\nC respectively. What is the amount of money Chef needs to pay?\\nInput Format\\nThe first line will contain an integer\\nT - number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains three integers\\nA,B,C - the prices of the items bought by Chef.\\nOutput Format\\nFor each test case, output the price paid by Chef.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4A,B,C\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n3\\n6 2 4\\n3 3 3\\n8 4 4\\n10\\n6\\n12\\nExplanation:\\nTest case-1: Explained in the problem statement.\\nTest case-2: Since all the three items have the same price, Chef will get one of them free and will have to pay the cost of the other two items which will be\\n3+3=6.\\nTest case-3: Chef will get one of the items having price\\n4 as free and will have to pay the cost of the other two items which will be\\n8+4=12.\"",
        "197": "b'Minimum number of Flips\\nChef has an array\\nA of length\\nN consisting of\\n1 and\\n\\xe2\\x88\\x921 only.\\nIn one operation, Chef can choose any index\\ni\\n(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N) and multiply the element\\nA\\ni\\nby\\n\\xe2\\x88\\x921.\\nFind the minimum number of operations required to make the sum of the array equal to\\n0. Output -1 if the sum of the array cannot be made\\n0.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nFirst line of each test case consists of a single integer\\nN denoting the length of the array.\\nSecond line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\ndenoting the array\\nA.\\nOutput Format\\nFor each test case, output the minimum number of operations to make the sum of the array equal to\\n0. Output -1 if it is not possible to make the sum equal to\\n0.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\nA\\ni\\n=1 or\\nA\\ni\\n=\\xe2\\x88\\x921\\nSample 1:\\nInput\\nOutput\\n4\\n4\\n1 1 1 1\\n5\\n1 -1 1 -1 1\\n6\\n1 -1 -1 1 1 1\\n2\\n1 -1\\n2\\n-1\\n1\\n0\\nExplanation:\\nTest case\\n1: The minimum number of operations required is\\n2. In the first operation, change\\nA\\n3\\nfrom\\n1 to\\n\\xe2\\x88\\x921. Similarly, in the second operation, change\\nA\\n4\\nfrom\\n1 to\\n\\xe2\\x88\\x921. Thus, the sum of the final array is\\n1+1\\xe2\\x88\\x921\\xe2\\x88\\x921=0.\\nTest case\\n2: It can be proven that the sum of the array cannot be made equal to zero by making any number of operations.\\nTest case\\n3: We can change\\nA\\n1\\nfrom\\n1 to\\n\\xe2\\x88\\x921 in one operation. Thus, the sum of the array becomes\\n\\xe2\\x88\\x921\\xe2\\x88\\x921\\xe2\\x88\\x921+1+1+1=0.\\nTest case\\n4: The sum of the array is already zero. Thus we do not need to make any operations.'",
        "198": "b'Binary Battles\\nN teams have come to participate in a competitive coding event called \\xe2\\x80\\x9cBinary Battles\\xe2\\x80\\x9d. It is a single-elimination tournament consisting of several rounds.\\nNote: It is known that\\nN is a power of\\n2.\\nIn one round, each team will be paired up with and compete against one of the other teams. If there are\\nX teams before the start of a round,\\n2\\nX\\nmatches are held simultaneously during the round between\\n2\\nX\\npairs of teams. The winning team of each match will move on to the next round, while the losing team of each match will be eliminated. There are no ties involved. The next round will then take place in the same format between the remaining teams. The process will continue until only one team remains, which will be declared the overall winner.\\nThe organizers want to find the total time the event will take to complete. It is given that each round spans\\nA minutes, and that there is a break of\\nB minutes between every two rounds (no break after the last round).\\nFor example, consider a case when\\nN=4,\\nA=10 and\\nB=5. The first round will consist of two matches and will take\\n10 minutes to complete. Two teams move on to round 2 and the other two get eliminated. Then there is a break of\\n5 minutes. The two remaining teams compete in round 2, which lasts\\n10 more minutes. The team that wins is declared the overall winner. Thus the total time taken is\\n10+5+10=25 minutes.\\nCan you help the organizers determine how long the event will take to finish?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains three space-separated integers\\nN,\\nA and\\nB respectively \\xe2\\x80\\x94 the number of teams, the duration of each round and the length of the breaks between rounds.\\nOutput Format\\nFor each test case, output on a new line the time taken in minutes for the whole event to finish.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\n20\\n1\\xe2\\x89\\xa4A\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4B\\xe2\\x89\\xa4100\\nN is a power of\\n2.\\nSample 1:\\nInput\\nOutput\\n4\\n4 10 5\\n16 30 5\\n32 45 15\\n1024 23 9\\n25\\n135\\n285\\n311\\nExplanation:\\nTest case 1: As explained above, the total time the competition will take is\\n10+5+10=25 minutes.\\nTest case 2:\\n4 rounds will take place. The total time it will take is\\n30+5+30+5+30+5+30=135 minutes.'",
        "199": "b\"Best of Two\\nAlice and Bob are playing a game. Each player rolls a regular six faced dice\\n3 times.\\nThe score of a player is the sum of the values of the highest\\n2 rolls. The player with the highest score wins, and the game ends in a Tie if both players have the same score.\\nFind the winner of the game or determine whether it is a tie.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case contains six space-separated integers\\nA\\n1\\n,\\nA\\n2\\n,\\nA\\n3\\n,\\nB\\n1\\n,\\nB\\n2\\nand\\nB\\n3\\n\\xe2\\x80\\x94 the values Alice gets in her\\n3 dice rolls, followed by the values which Bob gets in his\\n3 dice rolls.\\nOutput Format\\nFor each test case, output on a new line Alice if Alice wins, Bob if Bob wins and Tie in case of a tie.\\nNote that you may print each character in uppercase or lowercase. For example, the strings tie, TIE, Tie, and tIe are considered identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4A\\n1\\n,A\\n2\\n,A\\n3\\n,B\\n1\\n,B\\n2\\n,B\\n3\\n\\xe2\\x89\\xa46\\nSample 1:\\nInput\\nOutput\\n3\\n3 2 5 6 1 1\\n4 4 5 6 4 1\\n6 6 6 6 6 1\\nAlice\\nBob\\nTie\\nExplanation:\\nTest Case\\n1: Alice's score is\\n8=(3+5) which is greater than Bob's score\\n7=(6+1).\\nTest Case\\n2: Alice's score is\\n9=(5+4) which is less than Bob's score\\n10=(6+4).\\nTest Case\\n3: Alice's score is\\n12=(6+6) which is same as Bob's score\\n12=(6+6).\"",
        "200": "b'The Lead Game\\nThe game of billiards involves two players knocking 3 balls around on a green baize table. Well, there is more to it, but for our purposes this is sufficient.\\nThe game consists of several rounds and in each round both players obtain a score, based on how well they played. Once all the rounds have been played, the total score of each player is determined by adding up the scores in all the rounds and the player with the higher total score is declared the winner.\\nThe Siruseri Sports Club organises an annual billiards game where the top two players of Siruseri play against each other. The Manager of Siruseri Sports Club decided to add his own twist to the game by changing the rules for determining the winner. In his version, at the end of each round, the cumulative score for each player is calculated, and the leader and her current lead are found. Once all the rounds are over the player who had the maximum lead at the end of any round in the game is declared the winner.\\nConsider the following score sheet for a game with 5 rounds:\\nRound Player 1 Player 2\\n1 140 82\\n2 89 134\\n3 90 110\\n4 112 106\\n5 88 90\\nThe total scores of both players, the leader and the lead after each round for this game is given below:\\nRound Player 1 Player 2 Leader Lead\\n1 140 82 Player 1 58\\n2 229 216 Player 1 13\\n3 319 326 Player 2 7\\n4 431 432 Player 2 1\\n5 519 522 Player 2 3\\nNote that the above table contains the cumulative scores.\\nThe winner of this game is Player 1 as he had the maximum lead (58 at the end of round 1) during the game.\\nYour task is to help the Manager find the winner and the winning lead. You may assume that the scores will be such that there will always be a single winner. That is, there are no ties.\\nInput\\nThe first line of the input will contain a single integer N (N \\xe2\\x89\\xa4 10000) indicating the number of rounds in the game. Lines 2,3,...,N+1 describe the scores of the two players in the N rounds. Line i+1 contains two integer Si and Ti, the scores of the Player 1 and 2 respectively, in round i. You may assume that 1 \\xe2\\x89\\xa4 Si \\xe2\\x89\\xa4 1000 and 1 \\xe2\\x89\\xa4 Ti \\xe2\\x89\\xa4 1000.\\nOutput\\nYour output must consist of a single line containing two integers W and L, where W is 1 or 2 and indicates the winner and L is the maximum lead attained by the winner.\\nSample 1:\\nInput\\nOutput\\n5\\n140 82\\n89 134\\n90 110\\n112 106\\n88 90\\n1 58'",
        "201": "b'Degree of Polynomial\\nIn mathematics, the degree of polynomials in one variable is the highest power of the variable in the algebraic expression with non-zero coefficient.\\nChef has a polynomial in one variable\\nx with\\nN terms. The polynomial looks like\\nA\\n0\\n\\xe2\\x8b\\x85x\\n0\\n+A\\n1\\n\\xe2\\x8b\\x85x\\n1\\n+\\xe2\\x80\\xa6+A\\nN\\xe2\\x88\\x922\\n\\xe2\\x8b\\x85x\\nN\\xe2\\x88\\x922\\n+A\\nN\\xe2\\x88\\x921\\n\\xe2\\x8b\\x85x\\nN\\xe2\\x88\\x921\\nwhere\\nA\\ni\\xe2\\x88\\x921\\ndenotes the coefficient of the\\ni\\nth\\nterm\\nx\\ni\\xe2\\x88\\x921\\nfor all\\n(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N).\\nFind the degree of the polynomial.\\nNote: It is guaranteed that there exists at least one term with non-zero coefficient.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nFirst line of each test case contains of a single integer\\nN - the number of terms in the polynomial.\\nSecond line of each test case contains of\\nN space-separated integers - the\\ni\\nth\\ninteger\\nA\\ni\\xe2\\x88\\x921\\ncorresponds to the coefficient of\\nx\\ni\\xe2\\x88\\x921\\n.\\nOutput Format\\nFor each test case, output in a single line, the degree of the polynomial.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\n\\xe2\\x88\\x921000\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa41000\\nA\\ni\\n\\xee\\x80\\xa0\\n=0 for at least one\\n(0\\xe2\\x89\\xa4i<N).\\nSample 1:\\nInput\\nOutput\\n4\\n1\\n5\\n2\\n-3 3\\n3\\n0 0 5\\n4\\n1 2 4 0\\n0\\n1\\n2\\n2\\nExplanation:\\nTest case\\n1: There is only one term\\nx\\n0\\nwith coefficient\\n5. Thus, we are given a constant polynomial and the degree is\\n0.\\nTest case\\n2: The polynomial is\\n\\xe2\\x88\\x923\\xe2\\x8b\\x85x\\n0\\n+3\\xe2\\x8b\\x85x\\n1\\n=\\xe2\\x88\\x923+3\\xe2\\x8b\\x85x. Thus, the highest power of\\nx with non-zero coefficient is\\n1.\\nTest case\\n3: The polynomial is\\n0\\xe2\\x8b\\x85x\\n0\\n+0\\xe2\\x8b\\x85x\\n1\\n+5\\xe2\\x8b\\x85x\\n2\\n=0+0+5\\xe2\\x8b\\x85x\\n2\\n. Thus, the highest power of\\nx with non-zero coefficient is\\n2.\\nTest case\\n4: The polynomial is\\n1\\xe2\\x8b\\x85x\\n0\\n+2\\xe2\\x8b\\x85x\\n1\\n+4\\xe2\\x8b\\x85x\\n2\\n+0\\xe2\\x8b\\x85x\\n3\\n=1+2\\xe2\\x8b\\x85x+4\\xe2\\x8b\\x85x\\n2\\n. Thus, the highest power of\\nx with non-zero coefficient is\\n2.'",
        "202": "b'Recent contest problems\\nCodeChef recently revamped its practice page to make it easier for users to identify the next problems they should solve by introducing some new features:\\nRecent Contest Problems - Contains only problems from the last 2 contests\\nSeparate Un-Attempted, Attempted, and All tabs\\nProblem Difficulty Rating - The Recommended dropdown menu has various difficulty ranges so that you can attempt the problems most suited to your experience\\nPopular Topics and Tags\\nChef has been participating regularly in rated contests but missed the last two contests due to his college exams. He now wants to solve them and so he visits the practice page to view these problems.\\nGiven a list of\\nN contest codes, where each contest code is either START38 or LTIME108, help Chef count how many problems were featured in each of the contests.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains of two lines of input.\\nFirst line of input contains the total count of problems that appeared in the two recent contests -\\nN.\\nSecond line of input contains the list of\\nN contest codes. Each code is either START38 or LTIME108, to which each problem belongs.\\nOutput Format\\nFor each test case, output two integers in a single new line - the first integer should be the number of problems in START38, and the second integer should be the number of problems in LTIME108.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\nEach of the contest codes will be either START38 or LTIME108.\\nSample 1:\\nInput\\nOutput\\n4\\n3\\nSTART38 LTIME108 START38\\n4\\nLTIME108 LTIME108 LTIME108 START38\\n2\\nLTIME108 LTIME108\\n6\\nSTART38 LTIME108 LTIME108 LTIME108 START38 LTIME108\\n2 1\\n1 3\\n0 2\\n2 4\\nExplanation:\\nTest case\\n1: There are\\n2 START38s in the input, which means that there were\\n2 problems in START38. Similarly, there was\\n1 problem in LTIME108.\\nTest case\\n2: There is\\n1 START38 in the input, which means that there was\\n1 problem in START38. Similarly, there were\\n3 problems in LTIME108.\\nTest case\\n3: There are no START38s in the input, which means that were\\n0 problems in START38. Similarly, there were\\n2 problems in LTIME108.\\nTest case\\n4: There are\\n2 START38s in the input, which means that there were\\n2 problems in START38. Similarly, there were\\n4 problems in LTIME108.'",
        "203": "b'Primality Test\\nAlice and Bob are meeting after a long time. As usual they love to play some math games. This times Alice takes the call and decides the game. The game is very simple, Alice says out an integer and Bob has to say whether the number is prime or not. Bob as usual knows the logic but since Alice doesn\\'t give Bob much time to think, so Bob decides to write a computer program.\\nHelp Bob accomplish this task by writing a computer program which will calculate whether the number is prime or not.\\nNote that 1 is not a prime number.\\nInput\\nThe first line of the input contains an integer T, the number of testcases. T lines follow.\\nEach of the next T lines contains an integer N which has to be tested for primality.\\nOutput\\nFor each test case output in a separate line, \"yes\" if the number is prime else \"no.\"\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 20\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 100000\\nSample 1:\\nInput\\nOutput\\n5\\n23\\n13\\n20\\n1000\\n99991\\nyes\\nyes\\nno\\nno\\nyes'",
        "204": "b'The Cooler Dilemma 2\\nThe summer is at its peak in Chefland. Chef is planning to purchase a water cooler to keep his room cool. He has two options available:\\nRent a cooler at the cost of\\nX coins per month.\\nPurchase a cooler for\\nY coins.\\nChef wonders what is the maximum number of months for which he can rent the cooler such that the cost of renting is strictly less than the cost of purchasing it.\\nInput Format\\nThe first line of input will contain an integer\\nT \\xe2\\x80\\x94 the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains two integers\\nX and\\nY, as described in the problem statement.\\nOutput Format\\nFor each test case, output the maximum number of months for which he can rent the cooler such that the cost of renting is strictly less than the cost of purchasing it.\\nIf Chef should not rent a cooler at all, output\\n0.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n2\\n5 12\\n5 5\\n2\\n0\\nExplanation:\\nTest case\\n1: Cost of renting the cooler\\n=5 coins per month. Cost of purchasing the cooler\\n=12 coins. So, Chef can rent the cooler for\\n2 months at the cost of\\n10 coins, which is strictly less than\\n12 coins.\\nTest case\\n2: Cost of renting the cooler\\n=5 coins per month. Cost of purchasing the cooler\\n=5 coins. If Chef rents the cooler for\\n1 month, it will cost\\n5 coins, which is not strictly less than the cost of purchasing it. So, Chef should not rent the cooler.'",
        "205": "b'Easy Pronunciation\\nWords that contain many consecutive consonants, like \"schtschurowskia\", are generally considered somewhat hard to pronounce.\\nWe say that a word is hard to pronounce if it contains\\n4 or more consonants in a row; otherwise it is easy to pronounce. For example, \"apple\" and \"polish\" are easy to pronounce, but \"schtschurowskia\" is hard to pronounce.\\nYou are given a string\\nS consisting of\\nN lowercase Latin characters. Determine whether it is easy to pronounce or not based on the rule above \\xe2\\x80\\x94 print YES if it is easy to pronounce and NO otherwise.\\nFor the purposes of this problem, the vowels are the characters\\n{a,e,i,o,u} and the consonants are the other\\n21 characters.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains a single integer\\nN, the length of string\\nS.\\nThe second line of each test case contains the string\\nS.\\nOutput Format\\nFor each test case, output on a new line the answer \\xe2\\x80\\x94 YES if\\nS is easy to pronounce, and NO otherwise.\\nEach character of the output may be printed in either uppercase or lowercase. For example, the strings YES, yeS, yes, and YeS will all be treated as identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\nS contains only lowercase Latin characters, i.e, the characters\\n{a,b,c,\\xe2\\x80\\xa6,z}\\nSample 1:\\nInput\\nOutput\\n5\\n5\\napple\\n15\\nschtschurowskia\\n6\\npolish\\n5\\ntryst\\n3\\ncry\\nYES\\nNO\\nYES\\nNO\\nYES\\nExplanation:\\nTest case\\n1: \"\\napple\" doesn\\'t have\\n4 or move consecutive consonants, which makes it easy to pronounce.\\nTest case\\n2: \"\\nschtschurowskia\" has\\n7 consecutive consonants, which makes it hard to pronounce.\\nTest case\\n3:\\npolish doesn\\'t contain\\n4 or more consecutive consonants, so it\\'s easy to pronounce.\\nTest case\\n4:\\ntryst contains\\n5 consecutive consonants, making it hard to pronounce.\\nTest case\\n5:\\ncry doesn\\'t contain any vowels, but its length is less than\\n4 so it\\'s still easy to pronounce.'",
        "206": "b\"ATM Machine\\n###Read problems statements Bengali , Mandarin chinese , Russian and Vietnamese as well.\\nThere is an ATM machine. Initially, it contains a total of\\nK units of money.\\nN people (numbered\\n1 through\\nN) want to withdraw money; for each valid\\ni, the\\ni-th person wants to withdraw\\nA\\ni\\nunits of money.\\nThe people come in and try to withdraw money one by one, in the increasing order of their indices. Whenever someone tries to withdraw money, if the machine has at least the required amount of money, it will give out the required amount. Otherwise, it will throw an error and not give out anything; in that case, this person will return home directly without trying to do anything else.\\nFor each person, determine whether they will get the required amount of money or not.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains two space-separated integers\\nN and\\nK.\\nThe second line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nOutput\\nFor each test case, print a single line containing a string with length\\nN. For each valid\\ni, the\\ni-th character of this string should be '1' if the\\ni-th person will successfully withdraw their money or '0' otherwise.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa41,000,000 for each valid\\ni\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa41,000,000\\nSample 1:\\nInput\\nOutput\\n2\\n5 10\\n3 5 3 2 1\\n4 6\\n10 8 6 4\\n11010\\n0010\\nExplanation:\\nExample case 1: The ATM machine initially contains\\n10 units of money. The first person comes and withdraws\\n3 units, so the amount remaining in the machine is\\n7. Then the second person withdraws\\n5 units and the remaining amount is\\n2. The third person wants to withdraw\\n3 units, but since there are only\\n2 units of money in the machine, it throws an error and the third person must leave without getting anything. Then the fourth person withdraws\\n2 units, which leaves nothing in the machine, so the last person does not get anything.\\nExample case 2: The ATM machine initially contains\\n6 units of money, so it cannot give anything to the first and second person. When the third person comes, it gives them all the money it has, so the last person does not get anything either.\"",
        "207": "b'TCS Examination\\nTwo friends, Dragon and Sloth, are writing a computer science examination series. There are three subjects in this series:\\nDSA,\\nTOC, and\\nDM. Each subject carries\\n100 marks.\\nYou know the individual scores of both Dragon and Sloth in all\\n3 subjects. You have to determine who got a better rank.\\nThe rank is decided as follows:\\nThe person with a bigger total score gets a better rank\\nIf the total scores are tied, the person who scored higher in\\nDSA gets a better rank\\nIf the total score and the\\nDSA score are tied, the person who scored higher in\\nTOC gets a better rank\\nIf everything is tied, they get the same rank.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains three space-separated integers denoting the scores of Dragon in\\nDSA,\\nTOC and\\nDM respectively.\\nThe second line of each test case contains three space-separated integers denoting the scores of Sloth in\\nDSA,\\nTOC and\\nDM respectively.\\nOutput Format\\nFor each test case, if Dragon got a better rank then output \"Dragon\", else if Sloth got a better rank then output \"Sloth\". If there was a tie then output \"Tie\". Note that the string you output should not contain quotes.\\nThe output is case insensitive. For example, If the output is \"Tie\" then \"TiE\", \"tiE\", \"tie\", etc are also considered correct.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\nEach score of both Dragon and Sloth lies between\\n0 and\\n100.\\nSubtasks\\nSubtask #1 (100 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n4\\n10 20 30\\n30 20 10\\n5 23 87\\n5 23 87\\n0 15 100\\n100 5 5\\n50 50 50\\n50 49 51\\nSLOTH\\nTIE\\nDRAGON\\nDRAGON\\nExplanation:\\nFor the first test case, Sloth and Dragon have the same total score but Sloth gets a better rank because he has a higher score in\\nDSA.\\nFor the second test case, Sloth and Dragon have the same rank because they have the same score among all subjects.\\nFor the third test case, Dragon gets a better rank because he has a greater total score.\\nFor the fourth test case, Sloth and Dragon have the same total score and same\\nDSA score. Dragon gets a better rank because he has a greater\\nTOC score.'",
        "208": "b'Adjacent Sum Parity\\nChef has an array\\nA of length\\nN.\\nChef forms a binary array\\nB of length\\nN using the parity of the sums of adjacent elements in\\nA. Formally,\\nB\\ni\\n=(A\\ni\\n+A\\ni+1\\n)%2 for\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\xe2\\x88\\x921\\nB\\nN\\n=(A\\nN\\n+A\\n1\\n)%2\\nHere\\nx%y denotes the remainder obtained when\\nx is divided by\\ny.\\nChef lost the array\\nA and needs your help. Given array\\nB, determine whether there exists any valid array\\nA which could have formed\\nB.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the size of the array\\nA.\\nThe second line of each test case contains\\nN space-separated integers\\nB\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nN\\ndenoting the array\\nB.\\nOutput Format\\nFor each testcase, output YES if there exists a valid array\\nA, NO otherwise.\\nYou can print any character in any case. For example YES, Yes, yEs are all considered same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nB\\ni\\n\\xe2\\x88\\x88{0,1}\\nThe sum of\\nN over all test cases do not exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n2\\n0 0\\n2\\n1 0\\n4\\n1 0 1 0\\n3\\n1 0 0\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nTest case 1: One such valid array is\\nA=[3,3].\\nTest case 2: It can be shown that no such arrays exist and are valid.\\nTest case 3: One such valid array is\\nA=[1,2,4,5].\\nB\\n1\\n=1 since\\nA\\n1\\n+A\\n2\\n=1+2=3 and\\n3%2=1\\nB\\n2\\n=0 since\\nA\\n2\\n+A\\n3\\n=2+4=6 and\\n6%2=0\\nB\\n3\\n=1 since\\nA\\n3\\n+A\\n4\\n=4+5=9 and\\n9%2=1\\nB\\n4\\n=0 since\\nA\\n4\\n+A\\n1\\n=5+1=6 and\\n6%2=0'",
        "209": "b'Candies\\nAbhi is a salesman. He was given two types of candies, which he is selling in\\nN different cities.\\nFor the prices of the candies to be valid, Abhi\\'s boss laid down the following condition:\\nA given type of candy must have distinct prices in all\\nN cities.\\nIn his excitement, Abhi wrote down the prices of both the candies on the same page and in random order instead of writing them on different pages. Now he is asking for your help to find out if the prices he wrote are valid or not.\\nYou are given an array\\nA of size\\n2N. Find out whether it is possible to split\\nA into two arrays, each of length\\nN, such that both arrays consist of distinct elements.\\nBoth arrays can have distinct elements only if no element in the original array is repeated more than twice.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains one integer\\nN, denoting the number of cities\\nThe second line contains\\n2N space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\n2N\\n\\xe2\\x80\\x94 the elements of the array\\nA.\\nOutput Format\\nFor each test case output the answer on a new line \\xe2\\x80\\x94 Yes if the given array represents a valid list of prices, and No otherwise.\\nEach letter of the output may be printed in either uppercase or lowercase, i.e, Yes, YES, and yEs will all be treated as equivalent.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n3\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n3\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN over all testcases does not exceed\\n2\\xe2\\x8b\\x8510\\n3\\nSample 1:\\nInput\\nOutput\\n4\\n3\\n4 8 4 6 7 3\\n3\\n4 8 6 8 7 8\\n2\\n2 4 5 3\\n4\\n8 7 9 8 4 6 2 8\\nYes\\nNo\\nYes\\nNo\\nExplanation:\\nTest case\\n1: One valid way of assigning prices is as follows:\\nThe first candy can have a price of\\n4 in city\\n1,\\n6 in city\\n2, and\\n8 in city\\n3.\\nThe second candy can have a price of\\n4 in city\\n1,\\n3 in city\\n2, and\\n7 in city\\n3.\\nSince a valid assignment exists, the answer is \"Yes\".\\nTest case\\n2: No valid set of prices exists that could give this array, since\\n8 would be repeated somewhere.\\nTest case\\n3: One way of splitting the prices is\\n[2,5] and\\n[4,3].\\nTest case\\n4: No valid set of prices exists that could give this array.'",
        "210": "b'Chef Diet\\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\\nChef decided to go on a diet during the following\\nN days (numbered\\n1 through\\nN). Part of the diet plan is to eat\\nK grams of protein during each day. For each valid\\ni, Chef wants to buy\\nA\\ni\\ngrams of protein in the morning of the\\ni-th day and then eat\\nK grams of protein as part of his dinner. If he has any protein remaining, he can store it and use it in later dinners. Initially, Chef is storing\\n0 grams of protein.\\nDetermine whether Chef will have enough protein all the time during his diet. In case he will not have enough, find the first day on which Chef will be unable to eat\\nK grams of protein.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains two space-separated integers\\nN and\\nK.\\nThe second line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nOutput\\nFor each test case:\\nIf Chef will have enough protein during his diet, print a single line containing the string \"YES\".\\nOtherwise, print a single line containing the string \"NO\", followed by a space and one integer \\xe2\\x80\\x94 the first day when Chef will be unable to eat\\nK grams of protein.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4200\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n6\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n6\\nfor each valid\\ni\\nSample 1:\\nInput\\nOutput\\n3\\n4 5\\n7 3 6 5\\n3 4\\n3 10 10\\n3 4\\n8 1 1\\nYES\\nNO 1\\nNO 3\\nExplanation:\\nExample case 1: On the first day, Chef buys\\n7 grams, eats\\n5 and stores\\n2 grams for later. On the second day, he buys\\n3 grams, so he has\\n5 grams, which is just enough for the dinner on this day. On the third day, he buys\\n6 grams, eats\\n5 and stores\\n1, and on the fourth day, he buys\\n5 grams, so he has\\n6 grams \\xe2\\x80\\x94 enough for dinner. In the end, he had enough protein to eat during all four dinners.\\nExample case 2: Chef needs to eat\\n4 grams of protein on the first day, but he only has\\n3 grams, so he does not have a sufficient amount of protein already for the first dinner.'",
        "211": "b'Break the Stick\\nChef has a stick of length\\nN.\\nHe can break the stick into\\n2 or more parts such that the parity of length of each part is same. For example, a stick of length\\n11 can be broken into three sticks of lengths\\n{3,3,5} since each part is odd, but it cannot be broken into two sticks of lengths\\n{5,6} since one is even and the other is odd.\\nChef can then continue applying this operation on the smaller sticks he obtains, as many times as he likes.\\nCan Chef obtain a stick of length exactly\\nX by doing this?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases. The description of the test cases follows.\\nEach test case consists of a single line of input, containing two space-separated integers\\nN,X.\\nOutput Format\\nFor each test case, output on a new line YES if Chef can obtain a stick of length exactly\\nX, and NO otherwise.\\nEach letter of the output may be printed in either lowercase or uppercase. For example, the strings YES, yEs, and Yes will be considered identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X<N\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n3\\n6 1\\n3 2\\n4 3\\nYES\\nNO\\nYES\\nExplanation:\\nTest case\\n1: Chef can initially break the stick into\\n3 parts of length\\n2 each. After that, Chef can pick any segment of length\\n2 and break it into\\n2 sticks of length\\n1 each.\\nTest case\\n2: Chef cannot obtain a stick of length\\n2, since the only way to break a stick of length\\n3 following the given conditions is into three parts of length\\n1 each.\\nTest case\\n3: Chef can break the stick into lengths\\n3 and\\n1.'",
        "212": "b'Encoding Message\\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\\nChef recently graduated Computer Science in university, so he was looking for a job. He applied for several job offers, but he eventually settled for a software engineering job at ShareChat. Chef was very enthusiastic about his new job and the first mission assigned to him was to implement a message encoding feature to ensure the chat is private and secure.\\nChef has a message, which is a string\\nS with length\\nN containing only lowercase English letters. It should be encoded in two steps as follows:\\nSwap the first and second character of the string\\nS, then swap the 3rd and 4th character, then the 5th and 6th character and so on. If the length of\\nS is odd, the last character should not be swapped with any other.\\nReplace each occurrence of the letter \\'a\\' in the message obtained after the first step by the letter \\'z\\', each occurrence of \\'b\\' by \\'y\\', each occurrence of \\'c\\' by \\'x\\', etc, and each occurrence of \\'z\\' in the message obtained after the first step by \\'a\\'.\\nThe string produced in the second step is the encoded message. Help Chef and find this message.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN.\\nThe second line contains the message string\\nS.\\nOutput\\nFor each test case, print a single line containing one string \\xe2\\x80\\x94 the encoded message.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41,000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n\\xe2\\x88\\xa3S\\xe2\\x88\\xa3=N\\nS contains only lowercase English letters\\nSample 1:\\nInput\\nOutput\\n2\\n9\\nsharechat\\n4\\nchef\\nshizxvzsg\\nsxuv\\nExplanation:\\nExample case 1: The original message is \"sharechat\". In the first step, we swap four pairs of letters (note that the last letter is not swapped), so it becomes \"hsraceaht\". In the second step, we replace the first letter (\\'h\\') by \\'s\\', the second letter (\\'s\\') by \\'h\\', and so on, so the resulting encoded message is \"shizxvzsg\".'",
        "213": "b'Bear and Candies 123\\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\\nBears love candies and games involving eating them. Limak and Bob play the following game. Limak eats 1 candy, then Bob eats 2 candies, then Limak eats 3 candies, then Bob eats 4 candies, and so on. Once someone can\\'t eat what he is supposed to eat, he loses.\\nLimak can eat at most A candies in total (otherwise he would become sick), while Bob can eat at most B candies in total. Who will win the game? Print \"Limak\" or \"Bob\" accordingly.\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\\nThe only line of each test case contains two integers A and B denoting the maximum possible number of candies Limak can eat and the maximum possible number of candies Bob can eat respectively.\\nOutput\\nFor each test case, output a single line containing one string \\xe2\\x80\\x94 the name of the winner (\"Limak\" or \"Bob\" without the quotes).\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 1000\\n1 \\xe2\\x89\\xa4 A, B \\xe2\\x89\\xa4 1000\\nSample 1:\\nInput\\nOutput\\n10\\n3 2\\n4 2\\n1 1\\n1 2\\n1 3\\n9 3\\n9 11\\n9 12\\n9 1000\\n8 11\\nBob\\nLimak\\nLimak\\nBob\\nBob\\nLimak\\nLimak\\nBob\\nBob\\nBob\\nExplanation:\\nTest case 1. We have A = 3 and B = 2. Limak eats 1 candy first, and then Bob eats 2 candies. Then Limak is supposed to eat 3 candies but that would mean 1 + 3 = 4 candies in total. It\\'s impossible because he can eat at most A candies, so he loses. Bob wins, and so we print \"Bob\".\\nTest case 2. Now we have A = 4 and B = 2. Limak eats 1 candy first, and then Bob eats 2 candies, then Limak eats 3 candies (he has 1 + 3 = 4 candies in total, which is allowed because it doesn\\'t exceed A). Now Bob should eat 4 candies but he can\\'t eat even a single one (he already ate 2 candies). Bob loses and Limak is the winner.\\nTest case 8. We have A = 9 and B = 12. The game looks as follows:\\nLimak eats 1 candy.\\nBob eats 2 candies.\\nLimak eats 3 candies (4 in total).\\nBob eats 4 candies (6 in total).\\nLimak eats 5 candies (9 in total).\\nBob eats 6 candies (12 in total).\\nLimak is supposed to eat 7 candies but he can\\'t \\xe2\\x80\\x94 that would exceed A. Bob wins.'",
        "214": "b'Elections in Chefland\\nThere are\\n101 citizens in Chefland. It is election time in Chefland and\\n3 parties,\\nA,B, and\\nC are contesting the elections. Party\\nA receives\\nX\\nA\\nvotes, party\\nB receives\\nX\\nB\\nvotes, and party\\nC receives\\nX\\nC\\nvotes.\\nThe constitution of Chefland requires a particular party to receive a clear majority to form the government. A party is said to have a clear majority if it receives strictly greater than\\n50 votes.\\nIf any party has a clear majority, print the winning party (A, B or C). Otherwise, print NOTA.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains\\n3 space-separated integers \\xe2\\x80\\x94\\nX\\nA\\n,\\nX\\nB\\n, and\\nX\\nC\\n.\\nOutput Format\\nFor each test case, if any party has a clear majority, print the winning party (A, B or C). Otherwise, print NOTA.\\nYou can print each letter of the string in any case (upper or lower) (for instance, strings Nota, nOtA and notA will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4500\\n0\\xe2\\x89\\xa4X\\nA\\n,X\\nB\\n,X\\nC\\n\\xe2\\x89\\xa4101\\nX\\nA\\n+X\\nB\\n+X\\nC\\n=101\\nSample 1:\\nInput\\nOutput\\n3\\n80 19 2\\n20 55 26\\n50 1 50\\nA\\nB\\nNOTA\\nExplanation:\\nTest Case\\n1: Party\\nA has received\\n80 votes, which is strictly greater than\\n50.\\nTest Case\\n2: Party\\nB has received\\n55 votes, which is strictly greater than\\n50.\\nTest Case\\n3: None of the parties have received strictly more than\\n50 votes.'",
        "215": "b\"Chef and Two Strings\\nRead problems statements in Mandarin Chinese and Russian.\\nChef has found two very old sheets of paper, each of which originally contained a string of lowercase Latin letters. The strings on both the sheets have equal lengths. However, since the sheets are very old, some letters have become unreadable.\\nChef would like to estimate the difference between these strings. Let's assume that the first string is named S1, and the second S2. The unreadable symbols are specified with the question mark symbol '?'. The difference between the strings equals to the number of positions i, such that S1i is not equal to S2i, where S1i and S2i denote the symbol at the i the position in S1 and S2, respectively.\\nChef would like to know the minimal and the maximal difference between the two strings, if he changes all unreadable symbols to lowercase Latin letters. Now that you're fully aware of Chef's programming expertise, you might have guessed that he needs you help solving this problem as well. Go on, help him!\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\\nThe first line of a test case contains a string S1.\\nThe second line of a test case contains a string S2.\\nBoth strings consist of lowercase Latin letters and question marks in places where the symbols are unreadable.\\nOutput\\nFor each test case, output the minimal and the maximal difference between two given strings separated with a single space.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 100\\n1 \\xe2\\x89\\xa4 |S1|, |S2| \\xe2\\x89\\xa4 100\\nSubtask 1 (25 points): |S1| = 1\\nSubtask 2 (10 points): neither S1 nor S2 contains unreadable symbols\\nSubtask 3 (65 points): 1 \\xe2\\x89\\xa4 |S1|, |S2| \\xe2\\x89\\xa4 100\\nSample 1:\\nInput\\nOutput\\n3\\na?c\\n??b\\n???a\\n???a\\n?abac\\naba?w\\n1 3\\n0 3\\n3 5\\nExplanation:\\nExample case 1. You can change the question marks in the strings so that you obtain S1 = abc and S2 = abb. Then S1 and S2 will differ in one position. On the other hand, you can change the letters so that S1 = abc and S2 = bab. Then, the strings will differ in all three positions.\\nExample case 2. Change the question marks this way: S1 = dcba, S2 = dcba, then the strings will differ in 0 positions. You can also change the question marks so that S1 = aaaa, S2 = dcba, then the strings will differ in 3 positions.\\nExample case 3. Change the question marks this way: S1 = aabac, S2 = abaaw, then the strings will differ in 3 positions. Then, change the question marks this way: S1 = xabac, S2 = abayw, then they will differ in 5 positions.\"",
        "216": "b'Card Removal\\nYou have\\nN cards placed in front of you on the table. The\\ni\\nth\\ncard has the number\\nA\\ni\\nwritten on it.\\nIn one move, you can remove any one card from the remaining cards on the table.\\nFind the minimum number of moves required so that all the cards remaining on the table have the same number written on them.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the number of cards on the table.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nwhere\\nA\\ni\\nis the number written on the\\ni\\nth\\ncard.\\nOutput Format\\nFor each test case, output the minimum number of moves required so that all the cards remaining on the table have the same number written on them.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n3\\n5\\n1 1 2 2 3\\n4\\n8 8 8 8\\n6\\n5 6 7 8 9 10\\n3\\n0\\n5\\nExplanation:\\nTest case\\n1: The minimum number of moves required such that all remaining cards have same values is\\n3:\\nMove\\n1: Remove a card with number\\n1. Remaining cards are\\n[1,2,2,3].\\nMove\\n2: Remove a card with number\\n1. Remaining cards are\\n[2,2,3].\\nMove\\n3: Remove a card with number\\n3. Remaining cards are\\n[2,2].\\nTest case\\n2: All cards have the same number initially. Thus, no moves are required.\\nTest case\\n3: The minimum number of moves required such that all remaining cards have same values is\\n5:\\nMove\\n1: Remove a card with number\\n5. Remaining cards are\\n[6,7,8,9,10].\\nMove\\n2: Remove a card with number\\n6. Remaining cards are\\n[7,8,9,10].\\nMove\\n3: Remove a card with number\\n7. Remaining cards are\\n[8,9,10].\\nMove\\n4: Remove a card with number\\n8. Remaining cards are\\n[9,10].\\nMove\\n5: Remove a card with number\\n9. Remaining cards are\\n[10].'",
        "217": "b'Even-tual Reduction\\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\\nYou are given a string\\nS with length\\nN. You may perform the following operation any number of times: choose a non-empty substring of\\nS (possibly the whole string\\nS) such that each character occurs an even number of times in this substring and erase this substring from\\nS. (The parts of\\nS before and after the erased substring are concatenated and the next operation is performed on this shorter string.)\\nFor example, from the string \"acabbad\", we can erase the highlighted substring \"abba\", since each character occurs an even number of times in this substring. After this operation, the remaining string is \"acd\".\\nIs it possible to erase the whole string using one or more operations?\\nNote: A string\\nB is a substring of a string\\nA if\\nB can be obtained from\\nA by deleting several (possibly none or all) characters from the beginning and several (possibly none or all) characters from the end.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN.\\nThe second line contains a single string\\nS with length\\nN.\\nOutput\\nFor each test case, print a single line containing the string \"YES\" if it is possible to erase the whole string or \"NO\" otherwise (without quotes).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4200\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41,000\\nS contains only lowercase English letters\\nSample 1:\\nInput\\nOutput\\n4\\n6\\ncabbac\\n7\\nacabbad\\n18\\nfbedfcbdaebaaceeba\\n21\\nyourcrushlovesyouback\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nExample case 1: We can perform two operations: erase the substring \"abba\", which leaves us with the string \"cc\", and then erase \"cc\".'",
        "218": "b\"Zero String\\nYou are given a binary string\\nS of length\\nN. You are allowed to perform the following types of operations on string\\nS:\\nDelete any one character from\\nS, and concatenate the remaining parts of the string. For example, if we delete the third character of\\nS=1101, it becomes\\nS=111.\\nFlip all the characters of\\nS. For example, if we flip all character of\\nS=1101, it becomes\\nS=0010.\\nGiven that you can use either type of operation any number of times, find the minimum number of operations required to make all characters of the string\\nS equal to\\n0.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the length of the string.\\nThe next line contains a binary string\\nS of length\\nN.\\nOutput Format\\nFor each test case, output on a new line, the minimum number of operations required to make all characters of the string\\nS equal to\\n0.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nS contains\\n0 and\\n1 only.\\nThe sum of\\nN over all test cases won't exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n2\\n01\\n3\\n101\\n3\\n111\\n4\\n0000\\n1\\n2\\n1\\n0\\nExplanation:\\nTest case\\n1: You can use one operation to delete the second character of the string\\nS. Thus, the string becomes\\n0. Note that all characters of this string are\\n0 and thus, it satisfies the conditions.\\nTest case\\n2: You can perform the following operations:\\nOperation\\n1: Flip all characters of the string. Thus, string becomes\\n010.\\nOperation\\n2: Delete the second character of the string. Thus, string becomes\\n00.\\nNote that we have obtained a string having all characters as\\n0 in two operations. It can be shown that this is the minimum number of operations required.\\nTest case\\n3: You can use one operation to flip all characters of the string\\nS. Thus, the string becomes\\n000. Note that all characters of this string are\\n0 and thus, it satisfies the conditions.\\nTest case\\n4: The existing string satisfies the conditions. Thus, we require zero operations.\"",
        "219": "b'Airline Restrictions\\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nChef has\\n3 bags that she wants to take on a flight. They weigh\\nA,\\nB, and\\nC kgs respectively. She wants to check-in exactly two of these bags and carry the remaining one bag with her.\\nThe airline restrictions says that the total sum of the weights of the bags that are checked-in cannot exceed\\nD kgs and the weight of the bag which is carried cannot exceed\\nE kgs. Find if Chef can take all the three bags on the flight.\\nInput Format\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nEach testcase contains a single line of input, five space separated integers\\nA,B,C,D,E.\\nOutput Format\\nFor each testcase, output in a single line answer \"YES\" if Chef can take all the three bags with her or \"NO\" if she cannot.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa436000\\n1\\xe2\\x89\\xa4A,B,C\\xe2\\x89\\xa410\\n15\\xe2\\x89\\xa4D\\xe2\\x89\\xa420\\n5\\xe2\\x89\\xa4E\\xe2\\x89\\xa410\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n1 1 1 15 5\\n8 7 6 15 5\\n8 5 7 15 6\\nYES\\nNO\\nYES\\nExplanation:\\nTest case\\n1: Chef can check-in the first and second bag (since\\n1+1=2\\xe2\\x89\\xa415) and carry the third bag with her (since\\n1\\xe2\\x89\\xa45).\\nTest case\\n2: None of the three bags can be carried in hand without violating the airport restrictions.\\nTest case\\n3: Chef can check-in the first and the third bag (since\\n8+7\\xe2\\x89\\xa415) and carry the second bag with her (since\\n5\\xe2\\x89\\xa46).'",
        "220": "b'Odd Pairs\\nGiven an integer\\nN, determine the number of pairs\\n(A,B) such that:\\n1\\xe2\\x89\\xa4A,B\\xe2\\x89\\xa4N;\\nA+B is odd.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single integer\\nN.\\nOutput Format\\nFor each test case, output the number of required pairs.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n5\\n1\\n2\\n3\\n100\\n199\\n0\\n2\\n4\\n5000\\n19800\\nExplanation:\\nTest case\\n1: There are no pairs satisfying the given conditions.\\nTest case\\n2: The pairs satisfying both conditions are:\\n(1,2) and\\n(2,1).\\nTest case\\n3: The pairs satisfying both conditions are:\\n(1,2),(2,1),(2,3), and\\n(3,2).'",
        "221": "b'Chef and his Students\\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\\nChef is instructor of the famous course \"Introduction to Algorithms\" in a famous univerisity. There are n students in his class. There is not enough space in the class room, so students sit in a long hallway in a linear fashion.\\nOne day Chef was late to class. As a result, some of the students have formed pairs and are talking to each other, while the others are busy studying. This information is given to you by a string s of length n, consisting of characters \\'*\\', <\\' and \\'>\\', where \\'*\\' denotes that the student is studying, \\'>\\' denotes that the corresponding student is talking to the student to the right, and \\'<\\' denotes that the corresponding student is talking to the student to the left.\\nFor example, consider a sample configuration of students - *><*. Here students numbered 1 and 4 are busy studying, while the student 2 and 3 are talking to each other. In this example, ><><, student 1 and 2 are talking to each other, and 3 and 4 are also talking to each other. You are guaranteed that the given input is a valid configuration, i.e. <> can not be a valid string s, as here student 1 is shown to be talking to left, but there is no student to the left. Same is the case for right. Similarly, >><< is also not a valid configuration, as students 2 and 3 are talking to each other, so student 1 won\\'t be able to talk to student 2.\\nWhen the students see their teacher coming, those who were talking get afraid and immediately turn around, i.e. students talking to left have now turned to the right, and the one talking to right have turned to the left. When Chef sees two students facing each other, he will assume that they were talking. A student who is busy studying will continue doing so. Chef will call each pair of students who were talking and punish them. Can you find out how many pairs of students will get punished?\\nFor example, in case *><*, when students see Chef, their new configuration will be *<>*. Chef sees that no students are talking to each other. So no one is punished. While in case ><><, the new configuration of students will be <><>, Chef sees that student 2 and 3 are talking to each other and they will be punished.\\nInput\\nThe first line of the input contains an integer T denoting the number of the test cases.\\nEach test case contains a string s denoting the activities of students before students see Chef entering the class.\\nOutput\\nFor each test case, output a single integer denoting the number of pairs of students that will be punished.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 10\\n1 \\xe2\\x89\\xa4 |s| \\xe2\\x89\\xa4 105\\nSubtasks\\nSubtask #1: (30 points)\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 10\\n1 \\xe2\\x89\\xa4 |s| \\xe2\\x89\\xa4 105\\nNo student is studying.\\n\\nSubtask #2: (70 points)\\nOriginal Constraints.\\nSample 1:\\nInput\\nOutput\\n4\\n><\\n*><*\\n><><\\n*><><><*\\n0\\n0\\n1\\n2\\nExplanation:\\nExample case 1. The updated configuration will be <>. No students are talking to each other, so no one will be punished.\\nExample case 2 and 3. These examples are already explained in the problem statement.'",
        "222": "b'End Sorted\\nChef considers a permutation\\nP of\\n{1,2,3,\\xe2\\x80\\xa6,N} End Sorted if and only if\\nP\\n1\\n=1 and\\nP\\nN\\n=N.\\nChef is given a permutation\\nP.\\nIn one operation Chef can choose any index\\ni (1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\xe2\\x88\\x921) and swap\\nP\\ni\\nand\\nP\\ni+1\\n. Determine the minimum number of operations required by Chef to make the permutation\\nP End Sorted.\\nNote: An array\\nP is said to be a permutation of\\n{1,2,3,\\xe2\\x80\\xa6,N} if\\nP contains each element of\\n{1,2,3,\\xe2\\x80\\xa6,N} exactly once.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains a single integer\\nN, denoting the length of the permutation\\nP.\\nThe second line contains\\nN space-separated integers\\nP\\n1\\n,P\\n2\\n,P\\n3\\n,\\xe2\\x80\\xa6,P\\nN\\n, denoting the permutation\\nP.\\nOutput Format\\nFor each test case, output minimum number of operations required by Chef to make the permutation\\nP End Sorted.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nP is a permutation of\\n{1,2,3,\\xe2\\x80\\xa6N}\\nThe sum of\\nN over all test cases does not exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n4\\n1 3 2 4\\n3\\n3 2 1\\n2\\n2 1\\n3\\n2 1 3\\n0\\n3\\n1\\n1\\nExplanation:\\nTest case\\n1:\\nP is already End Sorted.\\nTest case\\n2:\\nP can be made End Sorted using\\n3 operations as follows:\\n[3,2,1]\\xe2\\x86\\x92[2,3,1]\\xe2\\x86\\x92[2,1,3]\\xe2\\x86\\x92[1,2,3]. It can be shown that achieving this in fewer than\\n3 moves is impossible.\\nTest case\\n3:\\nP can be made End Sorted using one operation, by swapping\\n1 and\\n2.\\nTest case\\n4:\\nP can be made End Sorted using one operation, by swapping\\n1 and\\n2.'",
        "223": "b\"Prime Reversal\\nYou are given two binary strings\\nA and\\nB, each of length\\nN. You can perform the following operation on string\\nA any number of times:\\nSelect a prime number\\nX.\\nChoose any substring of string\\nA having length\\nX and reverse the substring.\\nDetermine whether you can make the string\\nA equal to\\nB using any (possibly zero) number of operations.\\nA substring is obtained by deleting some (possibly zero) elements from the beginning and some (possibly zero) elements from the end of the string.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the length of the strings\\nA and\\nB.\\nThe second line contains the binary string\\nA.\\nThe third line contains the binary string\\nB.\\nOutput Format\\nFor each test case, output on a new line, YES, if you can make the string\\nA equal to\\nB using any number of operations and NO otherwise.\\nYou can print each character in uppercase or lowercase. For example, YES, yes, Yes, and yES are all identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nA\\ni\\nand\\nB\\ni\\ncontain\\n0 and\\n1 only.\\nThe sum of\\nN over all test cases won't exceed\\n10\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n2\\n00\\n00\\n4\\n1001\\n0111\\n5\\n11000\\n10010\\n5\\n11000\\n11010\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nTest case\\n1: Both the strings are equal. Thus, we do not need any operations.\\nTest case\\n2: It can be shown that we cannot make the string\\nA equal to\\nB using any number of operations.\\nTest case\\n3: Choose\\nX=3 and reverse the substring\\nA[2,4]=100. Thus, the string\\nA becomes\\n10010 which is equal to\\nB.\\nTest case\\n4: It can be shown that we cannot make the string\\nA equal to\\nB using any number of operations.\"",
        "224": "b\"Hungry Ashish\\nIt's dinner time. Ashish is very hungry and wants to eat something. He has\\nX rupees in his pocket. Since Ashish is very picky, he only likes to eat either PIZZA or BURGER. In addition, he prefers eating PIZZA over eating BURGER. The cost of a PIZZA is\\nY rupees while the cost of a BURGER is\\nZ rupees.\\nAshish can eat at most one thing. Find out what will Ashish eat for his dinner.\\nInput Format\\nThe first line will contain\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains three integers\\nX,\\nY and\\nZ - the money Ashish has, the cost of a PIZZA and the cost of a BURGER.\\nOutput Format\\nFor each test case, output what Ashish will eat. (PIZZA, BURGER or NOTHING).\\nYou may print each character of the string in uppercase or lowercase. (for example, the strings Pizza, pIzZa and piZZa will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X,Y,Z\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n50 40 60\\n40 55 39\\n30 42 37\\nPIZZA\\nBURGER\\nNOTHING\\nExplanation:\\nTest case-1: Ashish has\\n50 rupees while the cost of PIZZA is\\n40. Therefore he can buy a PIZZA for his dinner.\\nTest case-2: Ashish has\\n40 rupees. The cost of PIZZA is\\n55 and the cost of BURGER is\\n39. Therefore Ashish can not buy a PIZZA but can buy a BURGER for his dinner.\\nTest case-3: Ashish has\\n30 rupees which are not sufficient to buy either PIZZA or BURGER. Thus he can not buy anything and remains hungry :(.\"",
        "225": "b'Mask Policy\\nA city has been infected by a contagious virus.\\nIn a survey, it was found that\\nA out of the\\nN people living in the city are currently infected. It has been observed that the only way for a person to get infected is if he comes in contact with an already infected person, and both of them are NOT wearing a mask.\\nThe mayor of the city wants to make a new Mask Policy and find out the minimum number of people that will be required to wear a mask to avoid the further spread of the virus. Help the mayor in finding this number.\\nNote: The only aim of the mayor is to stop virus spread, not to mask every infected person.\\nInput Format\\nThe first line contains\\nT - number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two integers\\nN and\\nA - the total number of people living in the city and the number of people already affected by the virus respectively.\\nOutput Format\\nFor each test case, output the minimum number of people that will be required to wear a mask so as to curb the virus spread.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa4400\\n1\\xe2\\x89\\xa4A<N\\nSample 1:\\nInput\\nOutput\\n3\\n2 1\\n3 2\\n3 1\\n1\\n1\\n1\\nExplanation:\\nTest Case #1: There is\\n1 infected person and\\n1 uninfected person. We can ask any of them to wear a mask, and no more infections will occur. Hence the answer is\\n1.\\nTest Case #2: There are\\n2 infected people and\\n1 uninfected person. We can ask the uninfected person to wear a mask, and no more infections will occur. Hence the answer is\\n1.\\nTest Case #3: There is\\n1 infected person and\\n2 uninfected people. We can ask the single infected person to wear a mask, and no more infections will occur. Hence the answer is\\n1.'",
        "226": "b\"Counting Problem\\nYou are given an array\\nA=[A\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n].\\nIs it possible to partition\\nA into two non-empty subsequences\\nS\\n1\\nand\\nS\\n2\\nsuch that\\nsum(S\\n1\\n)\\xc3\\x97sum(S\\n2\\n) is odd?\\nHere,\\nsum(S\\n1\\n) denotes the sum of elements in\\nS\\n1\\n, and\\nsum(S\\n2\\n) is defined similarly.\\nNote:\\nS\\n1\\nand\\nS\\n2\\nmust partition\\nA, that is:\\nS\\n1\\nand\\nS\\n2\\nmust be non-empty\\nEvery element of\\nA must be in either\\nS\\n1\\nor\\nS\\n2\\nS\\n1\\nand\\nS\\n2\\nmust be disjoint (in terms of which indices their subsequences represent)\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of 2 lines of input.\\nThe first line of each test case contains a single integer\\nN, the size of the array.\\nThe next line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n: the elements of the array.\\nOutput Format\\nFor each test case, print on a new line the answer: YES if the array can be partitioned into two subsequences satisfying the condition, and NO otherwise.\\nEach character of the output may be printed in either uppercase or lowercase, i.e, YES, yes, YEs, and yEs will all be treated as equivalent.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN across all test cases won't exceed\\n10\\n6\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n4\\n1 1 2 2\\n6\\n1 2 4 6 8 10\\n2\\n3 5\\n3\\n1 3 5\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nTest case\\n1: We have\\nA=[\\n1\\n,1,\\n2\\n,2]. Let\\nS\\n1\\nbe the underlined elements and\\nS\\n2\\nbe the other ones.\\nsum(S\\n1\\n)\\xc3\\x97sum(S\\n2\\n)=3\\xc3\\x973=9.\\nTest case\\n2: It can be proved that no partition of\\nA into\\nS\\n1\\n,S\\n2\\nsatisfies the condition.\\nTest case\\n4: Choose\\nS\\n1\\n={3},S\\n2\\n={5}.\\nTest case\\n4: It can be proved that no partition of\\nA into\\nS\\n1\\n,S\\n2\\nsatisfies the condition.\"",
        "227": "b'Tanu and Head-bob\\nRead problems statements in Mandarin Chinese and Russian.\\nTanu has got interested in signs and gestures that we use for communication. One such gesture is the head-bob.\\nWhen we want to signal \"Yes\" to someone, we move the head up-and-down. For \"No\", the head is moved left-and-right, rotating about the vertical axis.\\nThere is a peculiar way of gesturing \"Yes\", commonly seen in India, by moving head sideways (rotating about the forward-back axis). This is called the Indian head-bob.\\nTanu observed many people on the railways station, and made a list of gestures that they made. Usual \"Yes\" gesture is recorded as \"Y\", no as \"N\" and Indian \"Yes\" gesture as \"I\". (Assume no foreigner uses the Indian \"Yes\" gesture and vice-versa). Identify which of them were Indians, which were not Indian, and which one you cannot be sure about.\\nInput\\nFirst line contains T, number of people observed by Tanu.\\nEach person is described in two lines. First line of the description contains a single integer N, the number of gestures recorded for this person. Next line contains a string of N characters, each character can be \"Y\", \"N\" or \"I\".\\nOutput\\nFor each person, print \"INDIAN\" if he\/she is from India, \"NOT INDIAN\" if not from India, and \"NOT SURE\" if the information is insufficient to make a decision.\\nConstraints\\nFor 30 points: 1 \\xe2\\x89\\xa4 T,N \\xe2\\x89\\xa4 100For 70 points: 1 \\xe2\\x89\\xa4 T,N \\xe2\\x89\\xa4 1000\\nSample 1:\\nInput\\nOutput\\n3\\n5\\nNNNYY\\n6\\nNNINNI\\n4\\nNNNN\\nNOT INDIAN\\nINDIAN\\nNOT SURE'",
        "228": "b'Pseudo Sorted Array\\nAn array\\nA of length\\nN is said to be pseudo-sorted if it can be made non-decreasing after performing the following operation at most once.\\nChoose an\\ni such that\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\xe2\\x88\\x921 and swap\\nA\\ni\\nand\\nA\\ni+1\\nGiven an array\\nA, determine if it is pseudo-sorted or not.\\nInput Format\\nThe first line contains a single integer\\nT - the number of test cases. Then the test cases follow.\\nThe first line of each test case contains an integer\\nN - the size of the array\\nA.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\ndenoting the array\\nA.\\nOutput Format\\nFor each testcase, output YES if the array\\nA is pseudo-sorted, NO otherwise.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nSum of\\nN over all test cases do not exceed\\n2\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n5\\n3 5 7 8 9\\n4\\n1 3 2 3\\n3\\n3 2 1\\nYES\\nYES\\nNO\\nExplanation:\\nTest case 1: The array is already sorted in non-decreasing order.\\nTest case 2: We can choose\\ni=2 and swap\\nA\\n2\\nand\\nA\\n3\\n. The resulting array will be\\n[1,2,3,3], which is sorted in non-decreasing order.\\nTest case 3: It can be proven that the array cannot be sorted in non-decreasing order in at most one operation.'",
        "229": "b'Prime Generator\\nRam wants to generate some prime numbers for his cryptosystem. Help him please! Your task is to generate all prime numbers between two given numbers.\\nWarning: large Input\/Output data, be careful with certain languages (though most should be OK if the algorithm is well designed)\\nInput Format\\nThe first line contains t, the number of test cases (less then or equal to 10).\\nFollowed by t lines which contain two numbers m and n (1 <= m <= n <= 1000000000, n-m<=100000) separated by a space.\\nOutput Format\\nFor every test case print all prime numbers p such that m <= p <= n, one number per line. Separate the answers for each test case by an empty line.\\nConstraints\\n(1 <= m <= n <= 1000000000, n-m<=100000)\\nSample 1:\\nInput\\nOutput\\n2\\n1 10\\n3 5\\n2\\n3\\n5\\n7\\n3\\n5'",
        "230": "b'Equalize AB\\nYou are given two numbers\\nA and\\nB along with an integer\\nX. In one operation you can do one of the following:\\nSet\\nA=A+X and\\nB=B\\xe2\\x88\\x92X\\nSet\\nA=A\\xe2\\x88\\x92X and\\nB=B+X\\nDetermine if you can make\\nA and\\nB equal after applying the operation any number of times (possibly zero).\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two space-separated integers\\nA,B and\\nX \\xe2\\x80\\x94 the parameters mentioned in the statement.\\nOutput Format\\nFor each test case, output YES if you can make\\nA and\\nB equal after applying the operation any number of times (possibly zero). Otherwise, output NO.\\nYou can output each letter in any case i.e. YES, yes, yEs are all considered the same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4A,B,X\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n4\\n5 7 1\\n3 4 2\\n4 4 6\\n2 5 3\\nYES\\nNO\\nYES\\nNO\\nExplanation:\\nTest Case 1: The initial values of\\n(A,B) is\\n(5,7). We can perform the following operation:\\n(5,7)\\nA=A+X,B=B\\xe2\\x88\\x92X\\n(6,6).\\nTest Case 2: It can be proven that we can not make\\nA equal to\\nB using the given operations.\\nTest Case 3:\\nA and\\nB are already equal.'",
        "231": "b'Three Friends\\n###Read problems statements Mandarin , Bengali , Hindi , Russian and Vietnamese as well.\\nThere are three friends; let\\'s call them A, B, C. They made the following statements:\\nA: \"I have\\nx Rupees more than B.\"\\nB: \"I have\\ny rupees more than C.\"\\nC: \"I have\\nz rupees more than A.\"\\nYou do not know the exact values of\\nx,y,z. Instead, you are given their absolute values, i.e.\\nX=\\xe2\\x88\\xa3x\\xe2\\x88\\xa3,\\nY=\\xe2\\x88\\xa3y\\xe2\\x88\\xa3 and\\nZ=\\xe2\\x88\\xa3z\\xe2\\x88\\xa3. Note that\\nx,\\ny,\\nz may be negative; \"having\\n\\xe2\\x88\\x92r rupees more\" is the same as \"having\\nr rupees less\".\\nFind out if there is some way to assign amounts of money to A, B, C such that all of their statements are true.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains three space-separated integers\\nX,\\nY and\\nZ.\\nOutput\\nFor each test case, print a single line containing the string \"yes\" if the presented scenario is possible or \"no\" otherwise (without quotes).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41,000\\n1\\xe2\\x89\\xa4X,Y,Z\\xe2\\x89\\xa41,000\\nSubtasks\\nSubtask #1 (30 points):\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa430\\n1\\xe2\\x89\\xa4X,Y,Z\\xe2\\x89\\xa43\\nSubtask #2 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n1 2 1\\n1 1 1\\nyes\\nno\\nExplanation:\\nExample 1: One possible way to satisfy all conditions is: A has\\n10 rupees, B has\\n9 rupees and C has\\n11 rupees. Therefore, we have\\nx=1,\\ny=\\xe2\\x88\\x922,\\nz=1.\\nExample 2: There is no way for all conditions to be satisfied.'",
        "232": "b'The Attack of Queen\\nChef has started developing interest in playing chess, and was learning how the Queen moves.\\nChef has an empty\\nN\\xc3\\x97N chessboard. He places a Queen at\\n(X,Y) and wonders - What are the number of cells that are under attack by the Queen?\\nNotes:\\nThe top-left cell is\\n(1,1), the top-right cell is\\n(1,N), the bottom-left cell is\\n(N,1) and the bottom-right cell is\\n(N,N).\\nThe Queen can be moved any number of unoccupied cells in a straight line vertically, horizontally, or diagonally.\\nThe cell on which the Queen is present, is not said to be under attack by the Queen.\\nInput Format\\nThe first line contains a single integer\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains three integers\\nN,\\nX and\\nY, as described in the problem statement.\\nOutput Format\\nFor each test case, output in a single line, the total number of cells that are under attack by the Queen.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n6\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa4N\\nSample 1:\\nInput\\nOutput\\n5\\n1 1 1\\n3 2 2\\n3 2 1\\n2 2 2\\n150 62 41\\n0\\n8\\n6\\n3\\n527\\nExplanation:\\nTest case 1: The only cell on the board is\\n(1,1). Since Queen stands on this cell, it is not under attack.\\nTest case 2: The Queen can attack the following cells:\\n{(1,1),(1,2),(1,3),(2,1),(2,3),(3,1),(3,2),(3,3)}.\\nTest case 3: The Queen can attack the following cells:\\n{(1,1),(1,2),(2,2),(2,3),(3,1),(3,2)}.\\nTest case 4: The Queen can attack the following cells:\\n{(1,1),(1,2),(2,1)}.'",
        "233": "b'Covid and Theatre Tickets\\nMr. Chef is the manager of the Code cinemas and after a long break, the theatres are now open to the public again. To compensate for the loss in revenue due to Covid-19, Mr. Chef wants to maximize the profits for every show from now on and at the same time follow the guidelines set the by government. The guidelines are:\\nIf two people are seated in the same row, there must be at least one empty seat between them.\\nIf two people are seated in different rows, there must be at least one completely empty row between them. That is, if there are people seated in rows\\ni and\\nj where\\ni<j, there must be some row\\nk such that\\ni<k<j and nobody is seated in row\\nk.\\nGiven the information about the number of rows and the number of seats in each row, find the maximum number of tickets Mr. Chef can sell.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nEach test case consists of a single line of input containing two space-separated integers\\nN,M \\xe2\\x80\\x94 the number of rows and the number of seats in each row, respectively.\\nOutput Format\\nFor each test case, output a single line containing one integer \\xe2\\x80\\x93 the maximum number of tickets Mr. Chef can sell.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n1 5\\n3 3\\n4 4\\n3\\n4\\n4\\nExplanation:\\nTest Case 1: There is only one row with five seats. Mr. Chef can sell a maximum of 3 tickets for seat numbers 1, 3 and 5.\\nTest Case 2: There are three rows with three seats each. Mr. Chef can sell a maximum of 4 tickets, for seats at the start and end of row numbers 1 and 3.\\nTest Case 3: There are four rows with four seats each. Mr. Chef can sell a maximum of 4 tickets, for example by choosing the seats at the start and end of row numbers 1 and 4.'",
        "234": "b'Digit Sum Parities\\nFor a positive integer\\nM, MoEngage defines\\ndigitSum(M) as the sum of digits of the number\\nM (when written in decimal).\\nFor example,\\ndigitSum(1023)=1+0+2+3=6.\\nGiven a positive integer\\nN, find the smallest integer\\nX strictly greater than\\nN such that:\\ndigitSum(N) and\\ndigitSum(X) have different parity, i.e. one of them is odd and the other is even.\\nInput Format\\nThe first line contains an integer\\nT, the number of test cases. The description of the\\nT test cases follow.\\nEach test case consists of a single line of input with a single integer, the number\\nN.\\nOutput Format\\nFor each test case, print in a single line, an integer, the answer to the problem.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N<10\\n9\\nSample 1:\\nInput\\nOutput\\n3\\n123\\n19\\n509\\n124\\n21\\n511\\nExplanation:\\nTest Case\\n1:\\ndigitSum(123)=1+2+3=6 is even and\\ndigitSum(124)=1+2+4=7 is odd, so the answer is\\n124.\\nTest Case\\n2:\\ndigitSum(19)=1+9=10 is even,\\ndigitSum(20)=2+0=2 is also even, whereas\\ndigitSum(21)=2+1=3 is odd. Hence, the answer is\\n21.\\nTest Case\\n3:\\ndigitSum(509)=5+0+9=14 is even,\\ndigitSum(510)=5+1+0=6 is also even, whereas\\ndigitSum(511)=5+1+1=7 is odd. Hence, the answer is\\n511.'",
        "235": "b'Magician versus Chef\\n###Read problems statements Hindi ,Bengali , Mandarin chinese , Russian and Vietnamese as well.\\nWhen Chef was visiting a fair in Byteland, he met a magician. The magician had\\nN boxes (numbered\\n1 through\\nN) and a gold coin. He challenged Chef to play a game with him; if Chef won the game, he could have the coin, but if he lost, the magician would kidnap Chef.\\nAt the beginning of the game, the magician places the gold coin into the\\nX-th box. Then, he performs\\nS swaps. To win, Chef needs to correctly identify the position of the coin after all swaps.\\nIn each swap, the magician chooses two boxes\\nA and\\nB, moves the contents of box\\nA (before the swap) to box\\nB and the contents of box\\nB (before the swap) to box\\nA.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains three space-separated integers\\nN,\\nX and\\nS.\\nS lines follow. Each of these lines contains two space-separated integers\\nA and\\nB denoting a pair of swapped boxes.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x94 the number of the box containing the gold coin after all swaps are performed.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4S\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4X,A,B\\xe2\\x89\\xa4N\\nA\\n\\xee\\x80\\xa0\\n=B\\nthe sum of\\nS for all test cases does not exceed\\n2\\xe2\\x88\\x9710\\n5\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n1\\n5 2 4\\n4 2\\n3 4\\n3 2\\n1 2\\n1\\nExplanation:\\nExample case 1:\\nafter the first swap, the coin is in box\\n4\\nafter the second swap, the coin is in box\\n3\\nafter the third swap, the coin is in box\\n2\\nafter the fourth swap, the coin is in box\\n1'",
        "236": "b\"Far Away\\nChef has an array\\nA of size\\nN and an integer\\nM, such that\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4M for every\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N.\\nThe distance of an array\\nB from array\\nA is defined as:\\nd(A,B)=\\ni=1\\n\\xe2\\x88\\x91\\nN\\n\\xe2\\x88\\xa3A\\ni\\n\\xe2\\x88\\x92B\\ni\\n\\xe2\\x88\\xa3\\nChef wants an array\\nB of size\\nN, such that\\n1\\xe2\\x89\\xa4B\\ni\\n\\xe2\\x89\\xa4M and the value\\nd(A,B) is as large as possible, i.e, the distance of\\nB from\\nA is maximum.\\nFind the maximum distance for any valid array\\nB.\\nNote:\\n\\xe2\\x88\\xa3X\\xe2\\x88\\xa3 denotes the absolute value of an integer\\nX. For example,\\n\\xe2\\x88\\xa3\\xe2\\x88\\x924\\xe2\\x88\\xa3=4 and\\n\\xe2\\x88\\xa37\\xe2\\x88\\xa3=7.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains two space-separated integers\\nN and\\nM \\xe2\\x80\\x94 the length of array\\nA and the limit on the elements of\\nA and\\nB.\\nThe second line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nOutput Format\\nFor each test case, output on a new line the maximum distance of an array from\\nA.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4M\\xe2\\x89\\xa410\\n9\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4M\\nThe sum of\\nN over all test cases won't exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n2 6\\n3 5\\n4 1\\n1 1 1 1\\n5 7\\n2 3 4 5 6\\n7 24\\n23 7 6 16 12 4 24\\n7\\n0\\n21\\n127\\nExplanation:\\nTest case\\n1: The array having maximum distance from\\nA is\\nB=[6,1]. Thus the distance is\\n\\xe2\\x88\\xa33\\xe2\\x88\\x926\\xe2\\x88\\xa3+\\xe2\\x88\\xa35\\xe2\\x88\\x921\\xe2\\x88\\xa3=3+4=7.\\nTest case\\n2: The only array possible is\\nB=[1,1,1,1]. The distance of this array from\\nA is\\n0.\\nTest case\\n3: One of the possible arrays having maximum distance from\\nA is\\nB=[7,7,1,1,1]. Thus the distance is\\n\\xe2\\x88\\xa32\\xe2\\x88\\x927\\xe2\\x88\\xa3+\\xe2\\x88\\xa33\\xe2\\x88\\x927\\xe2\\x88\\xa3+\\xe2\\x88\\xa34\\xe2\\x88\\x921\\xe2\\x88\\xa3+\\xe2\\x88\\xa35\\xe2\\x88\\x921\\xe2\\x88\\xa3+\\xe2\\x88\\xa36\\xe2\\x88\\x921\\xe2\\x88\\xa3=5+4+3+4+5=21.\"",
        "237": "b'Group Assignment\\nChef is hosting a party at his house and\\nN people are invited to it. Everyone has arrived and they are eager to make a group and chit-chat.\\nThe\\ni\\nth\\nperson prefers to be in a group of exactly\\nP\\ni\\npeople (including himself). A person who is not in a group of preferred size gets upset. Find whether Chef would be able to assign every person to a group such that everyone remains happy.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the number of people at the party.\\nThe next line contains the array\\nP \\xe2\\x80\\x94 where\\nP\\ni\\ndenotes the preferred group size for\\ni\\nth\\nperson.\\nOutput Format\\nFor each test case, output YES, if Chef can assign every person to a group such that everyone remains happy. Otherwise output NO.\\nThe output is case-insensitive, meaning that outputs such as yES, YeS, YES and yes mean the same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n2\\xe2\\x89\\xa4P\\ni\\n\\xe2\\x89\\xa4N\\nSum of\\nN over all test cases does not exceed\\n10\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n5\\n2 3 2 3 3\\n5\\n5 5 5 5 5\\n5\\n3 2 2 3 2\\n4\\n4 4 4 3\\nYES\\nYES\\nNO\\nNO\\nExplanation:\\nTest case\\n1:\\nPerson\\n1 and\\n3 can make a group (As both want to be in a group of\\n2).\\nPerson\\n2,\\n4 and\\n5 can make a group (As they all want to be in a group of\\n3).\\nSo, there is a possible arrangement that Chef can make so that all of them are happy.\\nTest case\\n2:\\nAll of the\\n5 people can make a group (As all want to be in a group of\\n5).\\nSo, there is a possible arrangement that Chef can make so that all of them are happy.\\nTest case\\n3: It can be shown that there is no possible arrangement that Chef can make so that all of them are happy.\\nTest case\\n4: It can be shown that there is no possible arrangement that Chef can make so that all of them are happy.'",
        "238": "b'Uncle Johny\\nRead problems statements in Mandarin Chinese and Russian.\\nVlad enjoys listening to music. He lives in Sam\\'s Town. A few days ago he had a birthday, so his parents gave him a gift: MP3-player! Vlad was the happiest man in the world! Now he can listen his favorite songs whenever he wants!\\nVlad built up his own playlist. The playlist consists of N songs, each has a unique positive integer length. Vlad likes all the songs from his playlist, but there is a song, which he likes more than the others. It\\'s named \"Uncle Johny\".\\nAfter creation of the playlist, Vlad decided to sort the songs in increasing order of their lengths. For example, if the lengths of the songs in playlist was {1, 3, 5, 2, 4} after sorting it becomes {1, 2, 3, 4, 5}. Before the sorting, \"Uncle Johny\" was on K-th position (1-indexing is assumed for the playlist) in the playlist.\\nVlad needs your help! He gives you all the information of his playlist. Your task is to find the position of \"Uncle Johny\" in the sorted playlist.\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\\nThe first line of each test case contains one integer N denoting the number of songs in Vlad\\'s playlist. The second line contains N space-separated integers A1, A2, ..., AN denoting the lenghts of Vlad\\'s songs. The third line contains the only integer K - the position of \"Uncle Johny\" in the initial playlist.\\n  Output\\nFor each test case, output a single line containing the position of \"Uncle Johny\" in the sorted playlist.\\n  Constraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 1000\\n1 \\xe2\\x89\\xa4 K \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 100\\n1 \\xe2\\x89\\xa4 Ai \\xe2\\x89\\xa4 109\\n  Sample 1:\\nInput\\nOutput\\n3\\n4\\n1 3 4 2\\n2\\n5\\n1 2 3 9 4\\n5\\n5\\n1 2 3 9 4 \\n1\\n3\\n4\\n1\\nExplanation:\\nIn the example test there are T=3 test cases.\\nTest case 1\\nIn the first test case N equals to 4, K equals to 2, A equals to {1, 3, 4, 2}. The answer is 3, because {1, 3, 4, 2} -> {1, 2, 3, 4}. A2 now is on the 3-rd position.\\nTest case 2\\nIn the second test case N equals to 5, K equals to 5, A equals to {1, 2, 3, 9, 4}. The answer is 4, because {1, 2, 3, 9, 4} -> {1, 2, 3, 4, 9}. A5 now is on the 4-th position.\\nTest case 3\\nIn the third test case N equals to 5, K equals to 1, A equals to {1, 2, 3, 9, 4}. The answer is 1, because {1, 2, 3, 9, 4} -> {1, 2, 3, 4, 9}. A1 stays on the 1-th position.\\nNote\\n\"Uncle Johny\" is a real song performed by The Killers.'",
        "239": "b\"That Is My Score!\\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nYou are participating in a contest which has\\n11 problems (numbered\\n1 through\\n11). The first eight problems (i.e. problems\\n1,2,\\xe2\\x80\\xa6,8) are scorable, while the last three problems (\\n9,\\n10 and\\n11) are non-scorable \\xe2\\x80\\x95 this means that any submissions you make on any of these problems do not affect your total score.\\nYour total score is the sum of your best scores for all scorable problems. That is, for each scorable problem, you look at the scores of all submissions you made on that problem and take the maximum of these scores (or\\n0 if you didn't make any submissions on that problem); the total score is the sum of the maximum scores you took.\\nYou know the results of all submissions you made. Calculate your total score.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN denoting the number of submissions you made.\\nN lines follow. For each\\ni (\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N), the\\ni-th of these lines contains two space-separated integers\\np\\ni\\nand\\ns\\ni\\n, denoting that your\\ni-th submission was on problem\\np\\ni\\nand it received a score\\ns\\ni\\n.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 your total score.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41,000\\n1\\xe2\\x89\\xa4p\\ni\\n\\xe2\\x89\\xa411 for each valid\\ni\\n0\\xe2\\x89\\xa4s\\ni\\n\\xe2\\x89\\xa4100 for each valid\\ni\\nSubtasks\\nSubtask #1 (15 points): all submissions are on the same problem, i.e.\\np\\n1\\n=p\\n2\\n=\\xe2\\x80\\xa6=p\\nN\\nSubtask #2 (15 points): there is at most one submission made on each problem, i.e.\\np\\ni\\n\\xee\\x80\\xa0\\n=p\\nj\\nfor each valid\\ni,j (\\ni\\n\\xee\\x80\\xa0\\n=j)\\nSubtask #3 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n5\\n2 45\\n9 100\\n8 0\\n2 15\\n8 90\\n1\\n11 1\\n135\\n0\\nExplanation:\\nExample case 1: The scorable problems with at least one submission are problems\\n2 and\\n8. For problem\\n2, there are two submissions and the maximum score among them is\\n45. For problem\\n8, there are also two submissions and the maximum score is\\n90. Hence, the total score is\\n45+90=135.\\nExample case 2: No scorable problem is attempted, so the total score is\\n0.\"",
        "240": "b'Chef and Strings\\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nHaving already mastered cooking, Chef has now decided to learn how to play the guitar. Often while trying to play a song, Chef has to skip several strings to reach the string he has to pluck. Eg. he may have to pluck the\\n1\\nst\\nstring and then the\\n6\\nth\\nstring. This is easy in guitars with only\\n6 strings; However, Chef is playing a guitar with\\n10\\n6\\nstrings. In order to simplify his task, Chef wants you to write a program that will tell him the total number of strings he has to skip while playing his favourite song.\\nThis is how guitar strings are numbered (In ascending order from right to left). Eg. to switch from string\\n1 to\\n6, Chef would have to skip\\n4 strings\\n(2,3,4,5).\\n###Input:\\nFirst line will contain\\nT, number of testcases. Then the testcases follow.\\nThe first line of each test case contains\\nN, the number of times Chef has to pluck a string\\nThe second line of each test case contains\\nN space separated integers -\\nS\\n1\\n,\\nS\\n2\\n, ...,\\nS\\nN\\n, where\\nS\\ni\\nis the number of the\\ni\\nth\\nstring Chef has to pluck.\\n###Output: For each testcase, output the total number of strings Chef has to skip over while playing his favourite song.\\n###Constraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4S\\ni\\n\\xe2\\x89\\xa410\\n6\\nFor each valid\\ni,\\nS\\ni\\n\\xee\\x80\\xa0\\n=S\\ni+1\\n###Subtasks\\n30 points : for each valid\\ni,\\nS\\ni\\n<S\\ni+1\\n70 points : No additional constraints\\nSample 1:\\nInput\\nOutput\\n2\\n6\\n1 6 11 6 10 11\\n4\\n1 3 5 7\\n15\\n3\\nExplanation:\\nTest Case\\n1\\nChef skips\\n4 strings\\n(2,3,4,5) to move from\\n1 to\\n6\\nChef skips\\n4 strings\\n(7,8,9,10) to move from\\n6 to\\n11\\nChef skips\\n4 strings\\n(10,9,8,7) to move from\\n11 to\\n6\\nChef skips\\n3 strings\\n(7,8,9) to move from\\n6 to\\n10\\nChef skips\\n0 strings to move from\\n10 to\\n11\\nTherefore, the answer is\\n4+4+4+3+0=15\\nTest Case\\n2\\nChef skips\\n1 string to move from\\n1 to\\n3\\nChef skips\\n1 string to move from\\n3 to\\n5\\nChef skips\\n1 string to move from\\n5 to\\n7\\nTherefore, the answer is\\n1+1+1=3'",
        "241": "b'Bi_lindrome!\\nYou are given a string\\nS of length\\nN.\\nYour task is to delete a subsequence of maximum length from the string, such that, after concatenating the remaining parts of the string, it becomes a palindrome of length greater than\\n1.\\nIf this is possible, print the maximum length of the subsequence that can be deleted. Otherwise, print\\n\\xe2\\x88\\x921.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of\\n2 lines of input:\\nThe first line consists the a single integer\\nN - the length of string\\nS.\\nThe second line contains string\\nS, consisting of lowercase english alphabets.\\nOutput Format\\nFor each test case, if it is possible to delete a subsequence under the given conditions, print a single integer, denoting the maximum length of the subsequence that can be deleted. Otherwise, print\\n\\xe2\\x88\\x921.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42500\\n3\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\nS consists of lowercase english alphabets.\\nSample 1:\\nInput\\nOutput\\n3\\n6\\nbabkhj\\n3 \\nabc \\n4 \\nqtoo\\n4\\n-1\\n2\\nExplanation:\\nTest case\\n1: Possible ways to delete a subsequence are:\\nDelete subsequence khj to get palindrome bab.\\nDelete subsequence akhj to get palindrome bb.\\nThe subsequence having maximum length that can be deleted is akhj, having length\\n4.\\nTest case\\n2: We cannot delete any subsequence under the given conditions.\\nTest case\\n3: We can delete the subsequence qt to obtain the string oo, which is a palindrome. This is the only subsequence that can be deleted and it has length\\n2.'",
        "242": "b'Remove Bad elements\\nChef has an array\\nA of length\\nN.\\nIn one operation, Chef can remove any one element from the array.\\nDetermine the minimum number of operations required to make all the elements same.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains a single integer\\nN \\xe2\\x80\\x94the length of Array\\nA.\\nNext line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,A\\n3\\n,\\xe2\\x80\\xa6,A\\nN\\n- denoting the array\\nA.\\nOutput Format\\nFor each test case, output the minimum number of operations required to make all the elements same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa44000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4N\\nSum of\\nN over all test cases do not exceed\\n3\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n4\\n3\\n3 3 3\\n6\\n1 3 2 1 2 2\\n4\\n1 2 1 2\\n5\\n1 3 2 4 5\\n0\\n3\\n2\\n4\\nExplanation:\\nTest case\\n1: All the elements are already same. Thus we need to perform zero operations.\\nTest case\\n2: We remove the elements\\nA\\n1\\n,A\\n2\\n, and\\nA\\n4\\nusing three operations. The array becomes\\n[2,2,2] where all elements are same.\\nTest case\\n3: We remove the elements\\nA\\n1\\nand\\nA\\n3\\nusing two operations. The array becomes\\n[2,2] where all elements are same.\\nTest case\\n4: We remove the elements\\nA\\n1\\n,A\\n2\\n,A\\n3\\n, and\\nA\\n4\\nusing four operations. The array becomes\\n[5].'",
        "243": "b'Make Money\\nChef has\\nN bags and an integer\\nX. The\\ni\\nth\\nbag contains\\nA\\ni\\ncoins such that\\nA\\ni\\n\\xe2\\x89\\xa4X.\\nIn one operation, Chef can:\\nPick any bag and increase its coins to\\nX. Formally, if he choses the\\ni\\nth\\nbag, he can set\\nA\\ni\\n=X.\\nGiven that the cost of performing each operation is\\nC\\n(C\\xe2\\x89\\xa4X) coins and Chef can perform the above operation any (possibly zero) number of times, determine the maximum value of\\n(\\xe2\\x88\\x91\\ni=1\\nN\\nA\\ni\\n)\\n\\xe2\\x88\\x92 (total cost paid by Chef),\\nif Chef performs the operations optimally.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains three space-separated integers\\nN,\\nX, and\\nC \\xe2\\x80\\x94 the number of bags, maximum limit of coins on each bag and cost of each operation respectively.\\nThe next line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n- denoting the number of coins in each bag.\\nOutput Format\\nFor each test case, output the maximum value of\\n\\xe2\\x88\\x91\\ni=1\\nN\\nA\\ni\\n\\xe2\\x88\\x92 total cost paid by Chef.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4C\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4X\\nSample 1:\\nInput\\nOutput\\n3\\n5 5 2\\n1 2 3 4 5\\n3 4 4\\n1 1 1\\n5 3 2\\n3 2 3 1 1\\n18\\n3\\n10\\nExplanation:\\nTest case\\n1: It is optimal for Chef to perform\\n2 operations:\\nOperation\\n1: Choose\\ni=1 and set\\nA\\n1\\n=5 by using\\n2 coins.\\nOperation\\n2: Choose\\ni=2 and set\\nA\\n2\\n=5 by using\\n2 coins.\\nThe final array is\\nA=[5,5,3,4,5] and the total cost is\\n2+2=4. Thus, the value of\\n\\xe2\\x88\\x91\\ni=1\\nN\\nA\\ni\\n\\xe2\\x88\\x92 total cost is\\n(5+5+3+4+5)\\xe2\\x88\\x924=22\\xe2\\x88\\x924=18.\\nTest case\\n2: It is optimal for Chef to perform\\n0 operations. Thus, the final array remains\\n[1,1,1] and the cost is\\n0. The value of\\n\\xe2\\x88\\x91\\ni=1\\nN\\nA\\ni\\n\\xe2\\x88\\x92 total cost is\\n(1+1+1)\\xe2\\x88\\x920=3.\\nTest case\\n3: It is optimal for Chef to perform\\n0 operations. Thus, the final array remains\\n[3,2,3,1,1] and the cost is\\n0. The value of\\n\\xe2\\x88\\x91\\ni=1\\nN\\nA\\ni\\n\\xe2\\x88\\x92 total cost is\\n(3+2+3+1+1)\\xe2\\x88\\x920=10.'",
        "244": "b'Football\\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nA football competition has just finished. The players have been given points for scoring goals and points for committing fouls. Now, it is up to Alex to find the best player in the tournament. As a programmer, your job is to help Alex by telling him the highest number of points achieved by some player.\\nYou are given two sequences\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nand\\nB\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nN\\n. For each valid\\ni, player\\ni scored\\nA\\ni\\ngoals and committed\\nB\\ni\\nfouls. For each goal, the player that scored it gets\\n20 points, and for each foul,\\n10 points are deducted from the player that committed it. However, if the resulting number of points of some player is negative, this player will be considered to have\\n0 points instead.\\nYou need to calculate the total number of points gained by each player and tell Alex the maximum of these values.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN.\\nThe second line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nThe third line contains\\nN space-separated integers\\nB\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nN\\n.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 the maximum number of points.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4150\\n0\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa450 for each valid\\ni\\n0\\xe2\\x89\\xa4B\\ni\\n\\xe2\\x89\\xa450 for each valid\\ni\\nSubtasks\\nSubtask #1 (30 points):\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\nSubtask #2 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n3\\n40 30 50\\n2 4 20\\n1\\n0\\n10\\n800\\n0\\nExplanation:\\nExample case 1: The first player gets\\n800 points for scoring goals and has\\n20 points deducted for fouls. Likewise, the second player gets\\n560 points and the third player gets\\n800 points. The third player is the one with the maximum number of points.'",
        "245": "b'String Game\\nAlice and Bob are playing a game. They have a common string\\nS of length\\nN. The players also have their individual strings\\nA (belonging to Alice) and\\nB (belonging to Bob) which are empty in the beginning. Game begins with Alice and both players take alternate turns.\\nIn her\/his turn, the player picks a single character from string\\nS, adds it to the end of their individual string and deletes the picked character from string\\nS.\\nThe game continues until string\\nS is empty. Find whether there exists a sequence of moves such that the strings\\nA and\\nB are same at the end of the game.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the length of the string.\\nThe next line contains the strings\\nS consisting of lowercase english alphabets.\\nOutput Format\\nFor each test case, output on a new line, YES if there exists a sequence of moves such that the strings\\nA and\\nB are same at the end of the game, and NO otherwise.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n3\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nS consists of lowercase english alphabets\\nThe sum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n4\\nabab\\n5\\ncbcba\\n4\\nabcd\\n6\\npqprqr\\nYES\\nNO\\nNO\\nYES\\nExplanation:\\nTest case\\n1: Consider the following sequence of moves:\\nAlice picks the first character of string\\nS and adds it to the end of string\\nA. Thus,\\nS becomes bab and\\nA becomes a.\\nBob picks the second character of string\\nS and adds it to the end of string\\nB. Thus, the strings are\\nS= bb,\\nA= a, and\\nB= a .\\nAlice picks the second character of string\\nS and adds it to the end of string\\nA. Thus, the strings are\\nS= b,\\nA= ab, and\\nB= a .\\nBob picks the first character of string\\nS and adds it to the end of string\\nB. Thus,\\nS becomes empty,\\nA= ab, and\\nB= ab .\\nWe can see that using this sequence of moves, the final strings\\nA and\\nB are equal.\\nTest case\\n2: There exists no sequence of moves such that the strings\\nA and\\nB become equal in the end.\\nTest case\\n3: There exists no sequence of moves such that the strings\\nA and\\nB become equal in the end.\\nTest case\\n4: Consider the following sequence of moves:\\nAlice picks the first character of string\\nS and adds it to the end of string\\nA. Thus,\\nS becomes qprqr and\\nA becomes p.\\nBob picks the second character of string\\nS and adds it to the end of string\\nB. Thus, the strings are\\nS= qrqr,\\nA= p, and\\nB= p .\\nAlice picks the second character of string\\nS and adds it to the end of string\\nA. Thus, the strings are\\nS= qqr,\\nA= pr, and\\nB= p .\\nBob picks the third character of string\\nS and adds it to the end of string\\nB. Thus,\\nS becomes qq,\\nA becomes pr, and\\nB becomes pr.\\nAlice picks the second character of string\\nS and adds it to the end of string\\nA. Thus, the strings are\\nS= q,\\nA= prq, and\\nB= pr .\\nBob picks the first character of string\\nS and adds it to the end of string\\nB. Thus,\\nS becomes empty,\\nA= prq, and\\nB= prq .\\nWe can see that using this sequence of moves, the final strings\\nA and\\nB are equal.'",
        "246": "b'Chef and Glove\\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\\nWinter has finally come to Chefland, so Chef bought a glove for herself. Chef has a hand with N fingers (for the sake of simplicity, let us consider the thumb a finger too) numbered 1 through N and the glove has N sheaths numbered 1 through N. Exactly one finger has to be inserted into each sheath. You are given the lengths of Chef\\'s fingers, as seen from left to right. You are also given the lengths of the sheaths of the glove, from left to right, as seen from the front.\\nChef can wear the glove normally (the front side of the glove matching the front of Chef\\'s hand), or she can flip the glove and then insert her hand in it. In the first case, the first finger will go into the first sheath, the second finger into the second one, and so on. However, when she flips the glove, her first finger will go into the N-th sheath, the second finger into the (N-1)-th and so on \\xe2\\x80\\x94 the i-th finger will go into the N+1-i-th sheath for each valid i. Of course, for her to wear the glove comfortably, each finger\\'s length should be less than or equal to the length of the sheath it goes into.\\nFind out whether Chef can wear the glove by keeping its front side facing her, or if she can wear it by flipping it over and facing its back side. If she can only wear the glove in the former way, output \"front\"; if she can wear it only in the latter way, output \"back\". If both front and back orientations can be used, output \"both\", and if she can\\'t wear it either way, output \"none\".\\nInput\\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\\nThe first line of each test case contains a single integer N denoting the number of Chef\\'s fingers.\\nThe second line contains N space-separated integers L1, L2, ..., LN denoting the lengths of Chef\\'s fingers.\\nThe third line contains N space-separated integers G1, G2, ..., GN, denoting the lengths of sheaths of the glove.\\nOutput\\nFor each test case, print a single line containing one of the strings \"front\", \"back\", \"both\", or \"none\".\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 10\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 105\\n1 \\xe2\\x89\\xa4 Li \\xe2\\x89\\xa4 109 for each valid i\\n1 \\xe2\\x89\\xa4 Gi \\xe2\\x89\\xa4 109 for each valid i\\nSubtasks\\nSubtask #1 (30 points): 1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 102\\nSubtask #2 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n4\\n3\\n1 2 3\\n2 3 4\\n3\\n1 2 1\\n1 2 1\\n3\\n3 2 1\\n1 2 3\\n4\\n1 3 2 4\\n1 2 3 5\\nfront\\nboth\\nback\\nnone\\nExplanation:\\nExample case 1: The glove can be worn normally, with its front side facing Chef. The lengths of the glove sheaths are 2, 3, 4. The lengths of the fingers are 1, 2, 3. Each of the fingers will fit in the corresponding glove sheath, that is, 1 ? 2, 2 ? 3 and 3 ? 4.\\nHowever, if Chef tries to wear the glove with its back facing her, then the lengths of the sheaths will be 4, 3, 2. The first two fingers, which have lengths 1 and 2, will fit into the corresponding sheaths, but the 3rd finger won\\'t fit because its length is 3, and the length of the corresponding sheath is 2. Hence, this glove can be worn only in one way, and we output \"front\".'",
        "247": "b\"Laptop Recommendation\\nChef wants to buy a new laptop. However, he is confused about which laptop to buy out of\\n10 different laptops. He asks his\\nN friends for their recommendation. The\\ni\\nth\\nfriend recommends the Chef to buy the\\nA\\ni\\nth\\nlaptop\\n(1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410).\\nChef will buy the laptop which is recommended by maximum number of friends. Determine which laptop Chef buys.\\nPrint CONFUSED if there are multiple laptops having maximum number of recommendations.\\nInput Format\\nThe first line contains a single integer\\nT - the number of test cases. Then the test cases follow.\\nThe first line of each test case contains an integer\\nN - the number of Chef's friends.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nwhere\\nA\\ni\\ndenotes the recommendation of the\\ni\\nth\\nfriend.\\nOutput Format\\nFor each test case, output in a single line, the laptop which has the maximum number of recommendations. Print CONFUSED if there are multiple laptops having maximum number of recommendations.\\nYou may print each character of CONFUSED in uppercase or lowercase (for example, Confused, coNFused, CONFused will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4200\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n4\\n5\\n4 4 4 2 1\\n7\\n1 2 3 4 5 6 6\\n6\\n2 2 3 3 10 8\\n4\\n7 7 8 8\\n4\\n6\\nCONFUSED\\nCONFUSED\\nExplanation:\\nTest case 1: Laptop\\n4 has the maximum number of recommendations. Therefore, Chef will buy the\\n4\\nth\\nlaptop.\\nTest case 2: Laptop\\n6 has the maximum number of recommendations. Therefore, Chef will buy the\\n6\\nth\\nlaptop.\\nTest case 3: Laptops\\n2,\\n3 have the maximum number of recommendations. Therefore, Chef will still be CONFUSED.\\nTest case 4: Laptops\\n7,\\n8 have the maximum number of recommendations. Therefore, Chef will still be CONFUSED.\"",
        "248": "b'Playing with Strings\\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\\nChef usually likes to play cricket, but now, he is bored of playing it too much, so he is trying new games with strings. Chef\\'s friend Dustin gave him binary strings\\nS and\\nR, each with length\\nN, and told him to make them identical. However, unlike Dustin, Chef does not have any superpower and Dustin lets Chef perform only operations of one type: choose any pair of integers\\n(i,j) such that\\n1\\xe2\\x89\\xa4i,j\\xe2\\x89\\xa4N and swap the\\ni-th and\\nj-th character of\\nS. He may perform any number of operations (including zero).\\nFor Chef, this is much harder than cricket and he is asking for your help. Tell him whether it is possible to change the string\\nS to the target string\\nR only using operations of the given type.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN.\\nThe second line contains a binary string\\nS.\\nThe third line contains a binary string\\nR.\\nOutput\\nFor each test case, print a single line containing the string \"YES\" if it is possible to change\\nS to\\nR or \"NO\" if it is impossible (without quotes).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4400\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n\\xe2\\x88\\xa3S\\xe2\\x88\\xa3=\\xe2\\x88\\xa3R\\xe2\\x88\\xa3=N\\nS and\\nR will consist of only \\'1\\' and \\'0\\'\\nSample 1:\\nInput\\nOutput\\n2\\n5\\n11000\\n01001\\n3\\n110\\n001\\nYES\\nNO\\nExplanation:\\nExample case 1: Chef can perform one operation with\\n(i,j)=(1,5). Then,\\nS will be \"01001\", which is equal to\\nR.\\nExample case 2: There is no sequence of operations which would make\\nS equal to\\nR.'",
        "249": "b'N Queens Puzzle Solved !\\nChef, being a Chess fan, was thrilled after he read the following news:\\nMichael Simkin, a postdoctoral fellow at Harvard University\\xe2\\x80\\x99s Center of Mathematical Sciences and Applications proved that for a large value of\\nN\\nN, there are approximately\\n(0.143\\xe2\\x8b\\x85N)\\nN\\nconfigurations in which\\nN\\nN queens can be placed on a\\nN\\nN\\xc3\\x97N chessboard so that none attack each other.\\nAlthough the formula is valid for large\\nN, Chef is interested in finding the value of function\\nf(N) =\\n(0.143\\xe2\\x8b\\x85N)\\nN\\nfor a given small value of\\nN. Since Chef is busy understanding the proof of the formula, please help him calculate this value.\\nPrint the answer rounded to the nearest integer. That is, if the actual value of\\nf(N) is\\nx,\\nPrint\\n\\xe2\\x8c\\x8ax\\xe2\\x8c\\x8b if\\nx\\xe2\\x88\\x92\\xe2\\x8c\\x8ax\\xe2\\x8c\\x8b<0.5\\nOtherwise, print\\n\\xe2\\x8c\\x8ax\\xe2\\x8c\\x8b+1\\nwhere\\n\\xe2\\x8c\\x8ax\\xe2\\x8c\\x8b denotes the floor of\\nx.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nEach test case consists of a single line of input containing one integer\\nN.\\nOutput Format\\nFor each test case, output in a single line the value of\\nf(N) rounded to the nearest integer.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa412\\n4\\xe2\\x89\\xa4N\\xe2\\x89\\xa415\\nSubtasks\\nSubtask #1 (100 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n4\\n10\\n0\\n36\\nExplanation:\\nTest case\\n1:\\nf(N)=(0.143\\xe2\\x8b\\x854)\\n4\\n=0.107, which when rounded to nearest integer gives\\n0.\\nTest case\\n2:\\nf(N)=(0.143\\xe2\\x8b\\x8510)\\n10\\n=35.7569, which when rounded to nearest integer gives\\n36.'",
        "250": "b'Chef and Steps\\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nIn order to establish dominance amongst his friends, Chef has decided that he will only walk in large steps of length exactly\\nK feet. However, this has presented many problems in Chef\\xe2\\x80\\x99s life because there are certain distances that he cannot traverse. Eg. If his step length is\\n5 feet, he cannot travel a distance of\\n12 feet. Chef has a strict travel plan that he follows on most days, but now he is worried that some of those distances may become impossible to travel. Given\\nN distances, tell Chef which ones he cannot travel.\\nInput:\\nThe first line will contain a single integer\\nT, the number of test cases.\\nThe first line of each test case will contain two space separated integers -\\nN, the number of distances, and\\nK, Chef\\xe2\\x80\\x99s step length.\\nThe second line of each test case will contain\\nN space separated integers, the\\ni\\nth\\nof which represents\\nD\\ni\\n, the distance of the\\ni\\nth\\npath.\\nOutput:\\nFor each testcase, output a string consisting of\\nN characters. The\\ni\\nth\\ncharacter should be\\n1 if the distance is traversable, and\\n0 if not.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n9\\n1\\xe2\\x89\\xa4D\\ni\\n\\xe2\\x89\\xa410\\n9\\nSubtasks\\n100 points : No additional constraints.\\nSample 1:\\nInput\\nOutput\\n1\\n5 3\\n12 13 18 20 27216\\n10101\\nExplanation:\\nThe first distance can be traversed in\\n4 steps.\\nThe second distance cannot be traversed.\\nThe third distance can be traversed in\\n6 steps.\\nThe fourth distance cannot be traversed.\\nThe fifth distance can be traversed in\\n9072 steps.'",
        "251": "b\"Sort the String\\nYou have a binary string\\nS of length\\nN. In one operation you can select a substring of\\nS and reverse it. For example, on reversing the substring\\nS[2,4] for\\nS=11000, we change\\n11000\\xe2\\x86\\x9210010.\\nFind the minimum number of operations required to sort this binary string.\\nIt can be proven that the string can always be sorted using the above operation finite number of times.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of\\n2 lines of input.\\nThe first line of each test case contains a single integer\\nN \\xe2\\x80\\x94 the length of the binary string.\\nThe second line of each test case contains a binary string\\nS of length\\nN.\\nOutput Format\\nFor each test case, output on a new line \\xe2\\x80\\x94 the minimum number of operations required to sort the binary string.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\nSum of\\nN over all test cases does not exceed\\n10\\n6\\n.\\nString\\nS consists of only '\\n0's and '\\n1's.\\nSample 1:\\nInput\\nOutput\\n4\\n3\\n000\\n4\\n1001\\n4\\n1010\\n6\\n010101\\n0\\n1\\n2\\n2\\nExplanation:\\nTest case\\n1: The string is already sorted, hence, zero operations are required to sort it.\\nTest case\\n2: We can sort the string in the following way:\\n1001\\n\\xe2\\x86\\x92\\n0011.\\nTest case\\n3: We can sort the string in the following way:\\n1010\\n\\xe2\\x86\\x92\\n1100\\n\\xe2\\x86\\x92\\n0011.\\nIt can be proven that this string cannot be sorted in less than\\n2 operations.\\nTest case\\n4: We can sort the string in the following way:\\n010101\\n\\xe2\\x86\\x92\\n001011\\n\\xe2\\x86\\x92\\n000111.\\nIt can be proven that this string cannot be sorted in less than\\n2 operations.\"",
        "252": "b'Discrepancies in the Voters List\\nAs you might remember, the collector of Siruseri had ordered a complete revision of the Voters List. He knew that constructing the list of voters is a difficult task, prone to errors. Some voters may have been away on vacation, others may have moved during the enrollment and so on.\\nTo be as accurate as possible, he entrusted the task to three different officials. Each of them was to independently record the list of voters and send it to the collector. In Siruseri, every one has a ID number and the list would only list the ID numbers of the voters and not their names. The officials were expected to arrange the ID numbers in ascending order in their lists. Voter ID numbers are unique and not duplicated in any lists.\\nOn receiving the lists, the Collector realised that there were discrepancies - the three lists were not identical. He decided to go with the majority. That is, he decided to construct the final list including only those ID numbers that appeared in at least 2 out of the 3 lists. For example if the three lists were\\n23  30  42  57  90\\n21  23  35  57  90  92\\n21  23  30  57  90 \\nthen the final list compiled by the collector would be:\\n21  23  30  57  90\\nThe ID numbers 35, 42 and 92 which appeared in only one list each do not figure in the final list.\\nYour task is to help the collector by writing a program that produces the final list from the three given lists.\\nInput format\\nThe first line of the input contains 3 integers N1, N2 and N3. N1 is the number of voters in the first list, N2 is the number of voters in the second list and N3 is the number of voters in the third list. The next N1 lines (lines 2,...,N1+1) contain one positive integer each and describe the first list in ascending order. The following\\nN2 lines (lines N1+2,...,N1+N2+1) describe the second list in ascending order and the final N3 lines (lines\\nN1+N2+2,...,N1+N2+N3+1) describe the third list in ascending order.\\nOutput format\\nThe first line of the output should contain a single integer M indicating the number voters in the final list. The next M lines (lines 2,...,M+1) should contain one positive integer each, describing the list of voters in the final list, in ascending order.\\nTest data\\nYou may assume that 1 \\xe2\\x89\\xa4 N1,N2,N3 \\xe2\\x89\\xa4 50000.\\nSample 1:\\nInput\\nOutput\\n5 6 5\\n23\\n30\\n42\\n57\\n90\\n21 \\n23 \\n35 \\n57 \\n90 \\n92 \\n21 \\n23 \\n30 \\n57 \\n90\\n5\\n21 \\n23 \\n30 \\n57 \\n90'",
        "253": "b'Alternating String\\nA binary string is called alternating if no two adjacent characters of the string are equal. Formally, a binary string\\nT of length\\nM is called alternating if\\nT\\ni\\n\\xee\\x80\\xa0\\n=T\\ni+1\\nfor each\\n1\\xe2\\x89\\xa4i<M.\\nFor example, 0, 1, 01, 10, 101, 010, 1010 are alternating strings while 11, 001, 1110 are not.\\nYou are given a binary string\\nS of length\\nN. You would like to rearrange the characters of\\nS such that the length of the longest alternating substring of\\nS is maximum. Find this maximum value.\\nA binary string is a string that consists of characters 0 and 1. A string\\na is a substring of a string\\nb if\\na can be obtained from\\nb by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\\nInput Format\\nThe first line of input contains an integer\\nT, denoting the number of test cases. The\\nT test cases then follow:\\nThe first line of each test case contains an integer\\nN.\\nThe second line of each test case contains the binary string\\nS.\\nOutput Format\\nFor each test case, output the maximum possible length of the longest alternating substring of\\nS after rearrangement.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nS contains only the characters 0 and 1.\\nSum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n3\\n110\\n4\\n1010\\n4\\n0000\\n7\\n1101101\\n3\\n4\\n1\\n5\\nExplanation:\\nTest case\\n1: Swapping the second and third characters makes\\nS=101. Hence the length of the longest alternating substring is\\n3 (choosing the entire string as a substring).\\nTest case\\n2: The given string\\nS=1010 is an alternating string of length\\n4.\\nTest case\\n3: The length of the longest alternating substring is\\n1 for any rearrangement of\\nS=0000.\\nTest case\\n4: One possible rearrangement of\\nS is\\n1\\n10101\\n1, which has an alternating substring of length\\n5 (the substring starting at index\\n2 and ending at index\\n6).'",
        "254": "b'Lazy Jem\\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\\nJem is famous for his laziness at school. He always leaves things to last minute. Now Jem has N problems in the assignment of \"Advanced topics in algorithm\" class to solved. The assignment is due tomorrow and as you may guess he hasn\\'t touch any of the problems. Fortunately he got a plan as always.\\nThe first step will be buying a pack of Red Bull and then to work as hard as he can. Here is how he is going to spend the remaining time:\\nJem will not take a break until he finishes at least half of the remaining problems. Formally, if N is even then he will take he first break after finishing N \/ 2 problems. If N is odd then the break will be after he done (N + 1) \/ 2 problems. Each of his break will last for B minutes. Initially, he takes M minutes in solving a problem, after each break he will take twice more time in solving a problem, i.e. 2 * M minutes per problem after the first break.\\nJem will start working soon and ask you to help him calculate how much time it will take until he finish the last problem!\\nInput\\nThe first line contains a single integer T represents the number of test cases in the input.\\nEach line in the next T line contains three integers N, B and M represents a test case.\\nOutput\\nFor each test case output a single line containing an integer represent how much time Jem will need (in minutes).\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 100\\n1 \\xe2\\x89\\xa4 N, B, M \\xe2\\x89\\xa4 108\\nSample 1:\\nInput\\nOutput\\n2\\n9 1 2\\n123456 123456 123456\\n45\\n131351258112\\nExplanation:\\nIn the first test case, Jem will proceed as below:\\nInitially, Jem has 9 problems to solve. since it is an odd number, Jem will finish the first (9 + 1) \/ 2 = 5 problems with speed of 2 minutes\/problem.\\nAfter that, Jem takes 1 minute break.\\nNow he has 4 problems to solve, which is an even number, so Jem will solve the next 4 \/ 2 = 2 problems. his speed after the first break has now became 4 minutes\/problem.\\nAgain, he takes a 1 minute break.\\nhe has now 2 problems left so he do one more problem in 8 minutes.\\nHe takes 1 minute break.\\nhe solves the last problem in 16 minutes.\\nSo, Jem will need time = 5 \\xc3\\x97 2 + 1 + 2 \\xc3\\x97 4 + 1 + 8 + 1 + 16 = 45'",
        "255": "b\"Game of Pooks\\nWe have found a new chess character \\xe2\\x80\\x94 pook. It has the qualities of both a rook and a pawn. Specifically, treating the chessboard to be an\\nN\\xc3\\x97N grid where\\n(i,j) denotes the intersection of the\\ni-th row and the\\nj-th column, a pook placed at square\\n(x,y) threatens the following squares:\\n(i,y) for every\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\n(x,i) for every\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\n(x+1,y\\xe2\\x88\\x921), if\\nx<N and\\ny\\xe2\\x89\\xa52\\n(x+1,y+1), if\\nx<N and\\ny<N\\nFind the maximum number of pooks that can be placed on an empty\\nN\\xc3\\x97N chessboard such that none of them threaten each other.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases. Then the test cases follow.\\nEach test case consists of a single line of input, containing a single integer\\nN.\\nOutput Format\\nFor each test case, output in a single line the maximum number of pooks that can be placed on the chessboard such that they don't threaten each other.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n3\\n1\\n2\\n3\\n1\\n1\\n2\\nExplanation:\\nTest case\\n1: There is a single square, so we have a single pook.\\nTest case\\n2: We can only place one pook. No matter where the first is placed, placing a second will lead to one of the two being threatened.\\nTest case\\n3: Placing\\n2 pooks on a\\n3\\xc3\\x973 grid is easy \\xe2\\x80\\x94 for example, place one at\\n(1,2) and another at\\n(3,3). It can be shown that placing three is not possible.\"",
        "256": "b'Chef and Proportion\\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\\nChef recently learned about ratios and proportions. He wrote some positive integers a, b, c, d on a paper. Chef wants to know whether he can shuffle these numbers so as to make some proportion? Formally, four numbers x, y, z, w are said to make a proportion if ratio of x : y is same as that of z : w.\\nInput\\nOnly line of the input contains four space separated positive integers - a, b, c, d.\\nOutput\\nPrint \"Possible\" if it is possible to shuffle a, b, c, d to make proportion, otherwise \"Impossible\" (without quotes).\\nConstraints\\n1 \\xe2\\x89\\xa4 a, b, c, d \\xe2\\x89\\xa4 1000\\nSample 1:\\nInput\\nOutput\\n1 2 4 2\\nPossible\\nExplanation:\\nBy swapping 4 and the second 2, we get 1 2 2 4. Note that 1 2 2 4 make proportion as 1 : 2 = 2 : 4. Hence answer is \"Possible\"'",
        "257": "b'Stick Break\\nChef has a stick of length\\nL. Chef wants to break the stick into\\nK parts such that each part has a non-zero length.\\nLet the lengths of the\\nK parts be\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nK\\n(Note that\\nA\\n1\\n+A\\n2\\n+\\xe2\\x80\\xa6+A\\nK\\n=L and\\nA\\ni\\nis a positive integer for all\\ni). Chef wants to minimize the value of\\ni=1\\n\\xe2\\x88\\x91\\nK\\xe2\\x88\\x921\\n\\xe2\\x88\\xa3A\\ni+1\\n\\xe2\\x88\\x92A\\ni\\n\\xe2\\x88\\xa3. Can you help Chef? (Here\\n\\xe2\\x88\\xa3x\\xe2\\x88\\xa3 denotes the absolute value of\\nx)\\nUnder the given constraints it will always be possible to break the stick into\\nK parts of non-zero lengths.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two space-separated integers\\nL and\\nK \\xe2\\x80\\x94 the initial length of the stick and the number of parts Chef wants to break the stick into.\\nOutput Format\\nFor each test case, output the minimum value of\\ni=1\\n\\xe2\\x88\\x91\\nK\\xe2\\x88\\x921\\n\\xe2\\x88\\xa3A\\ni+1\\n\\xe2\\x88\\x92A\\ni\\n\\xe2\\x88\\xa3.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n2\\xe2\\x89\\xa4K\\xe2\\x89\\xa4L\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n2\\n4 3\\n2 2\\n1\\n0\\nExplanation:\\nTest Case 1: It is optimal to break the stick of length\\n4 into\\n3 parts in the following manner:\\n[2,1,1]. The value of\\ni=1\\n\\xe2\\x88\\x91\\nK\\xe2\\x88\\x921\\n\\xe2\\x88\\xa3A\\ni+1\\n\\xe2\\x88\\x92A\\ni\\n\\xe2\\x88\\xa3=\\xe2\\x88\\xa31\\xe2\\x88\\x922\\xe2\\x88\\xa3+\\xe2\\x88\\xa31\\xe2\\x88\\x921\\xe2\\x88\\xa3=1.\\nTest Case 2: It is optimal to break the stick of length\\n2 into\\n2 parts in the following manner:\\n[1,1]. The value of\\ni=1\\n\\xe2\\x88\\x91\\nK\\xe2\\x88\\x921\\n\\xe2\\x88\\xa3A\\ni+1\\n\\xe2\\x88\\x92A\\ni\\n\\xe2\\x88\\xa3=\\xe2\\x88\\xa31\\xe2\\x88\\x921\\xe2\\x88\\xa3=0.'",
        "258": "b'Processing a string\\nGiven an alphanumeric string made up of digits and lower case Latin characters only, find the sum of all the digit characters in the string.\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases. Then T test cases follow.\\nEach test case is described with a single line containing a string S, the alphanumeric string.\\nOutput\\nFor each test case, output a single line containing the sum of all the digit characters in that string.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 1000\\n1 \\xe2\\x89\\xa4 |S| \\xe2\\x89\\xa4 1000, where |S| is the length of the string S.\\nSample 1:\\nInput\\nOutput\\n1\\nab1231da\\n7\\nExplanation:\\nThe digits in this string are 1, 2, 3 and 1. Hence, the sum of all of them is 7.'",
        "259": "b\"Chef and Card Game\\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nChef is playing a card game with his friend Morty Smith.\\nThe rules of the game are as follows:\\nThere are two piles of cards, pile\\nA and pile\\nB, each with\\nN cards in it. Pile\\nA belongs to Chef and pile\\nB belongs to Morty.\\nEach card has one positive integer on it\\nThe \\xe2\\x80\\x98power\\xe2\\x80\\x99 of a card is defined as the sum of digits of the integer on that card\\nThe game consists of\\nN rounds\\nIn each round, both players simultaneously draw one card each from the top of their piles and the player who draws the card with higher power wins this round and gets a point. If the powers of both players' cards are equal then they get\\n1 point each.\\nThe winner of the game is the player who has more points at the end of\\nN rounds. If both players have equal number of points then the game ends in a draw.\\nThe game is now over and Chef has told Morty to find the winner. Unfortunately, this task is too complex for him. Help Morty find the winner.\\nInput:\\nFirst line will contain\\nT, number of testcases.\\nThe first line of each test case will contain\\nN, the number of rounds played.\\nThe\\ni\\nth\\nof the next\\nN lines of each test case will contain\\nA\\ni\\nand\\nB\\ni\\n, the number on the card drawn by Chef and Morty respectively in round\\ni.\\nOutput:\\nFor each test case, output two space separated integers on a new line:\\nOutput\\n0 if Chef wins,\\n1 if Morty wins,\\n2 if it is a draw,\\nfollowed by the number of points the winner had.\\n(If it is a draw then output either player\\xe2\\x80\\x99s points).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4A\\ni\\n,B\\ni\\n\\xe2\\x89\\xa410\\n9\\nSubtasks\\n100 points : No additional constraints\\nSample 1:\\nInput\\nOutput\\n2\\n3\\n10 4\\n8 12\\n7 6\\n2\\n5 10\\n3 4\\n0 2\\n2 1\\nExplanation:\\nTest Case\\n1:\\nRound\\n1:\\nChef\\xe2\\x80\\x99s card has power\\n1+0 =\\n1,\\nMorty\\xe2\\x80\\x99s card has power\\n4.\\nTherefore, Morty wins the round.\\nRound\\n2:\\nChef\\xe2\\x80\\x99s card has power\\n8,\\nMorty\\xe2\\x80\\x99s card has power\\n1+2 =\\n3.\\nTherefore, Chef wins the round.\\nRound\\n3:\\nChef\\xe2\\x80\\x99s card has power\\n7,\\nMorty\\xe2\\x80\\x99s card has power\\n6.\\nTherefore, Chef wins the round.\\nTherefore, Chef wins the game with\\n2 points (Morty has\\n1 point).\\nTest Case\\n2:\\nRound\\n1:\\nChef\\xe2\\x80\\x99s card has power\\n5,\\nMorty\\xe2\\x80\\x99s card has power\\n1+0=1.\\nTherefore, Chef wins the round.\\nRound\\n2:\\nChef\\xe2\\x80\\x99s card has power\\n3,\\nMorty\\xe2\\x80\\x99s card has power\\n4.\\nTherefore, Morty wins the round.\\nTherefore, the game ends in a draw and both players have\\n1 point each.\"",
        "260": "b\"Pet Store\\nAlice and Bob went to a pet store. There are\\nN animals in the store where the\\ni\\nth\\nanimal is of type\\nA\\ni\\n.\\nAlice decides to buy some of these\\nN animals. Bob decides that he will buy all the animals left in the store after Alice has made the purchase.\\nFind out whether it is possible that Alice and Bob end up with exactly same multiset of animals.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the number of animals in the store.\\nThe next line contains\\nN space separated integers, denoting the type of each animal.\\nOutput Format\\nFor each test case, output on a new line, YES, if it is possible that Alice and Bob end up with exactly same multiset of animals and NO otherwise.\\nYou may print each character in uppercase or lowercase. For example, the strings YES, yes, Yes, and yES are considered identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4100\\nThe sum of\\nN over all test cases won't exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n3\\n4 4 4\\n4\\n2 3 3 2\\n4\\n1 2 2 3\\n6\\n5 5 1 5 1 5\\nNO\\nYES\\nNO\\nYES\\nExplanation:\\nTest case\\n1: There are\\n4 possible cases:\\nAlice does not buy anything: Bob will buy all the animals and will have\\n3 animals of type\\n4.\\nAlice buys\\n1 animal of type\\n4: Bob will buy the remaining two animals of type\\n4.\\nAlice buys\\n2 animals of type\\n4: Bob will buy the remaining one animal of type\\n4.\\nAlice buys all\\n3 animals of type\\n4: Bob will not buy anything.\\nIn no case, both Alice and Bob can have the exactly same multiset of pets.\\nTest case\\n2: If Alice buys animals\\n1 and\\n2, having types\\n2 and\\n3 respectively, Bob will buy animals\\n3 and\\n4, having types\\n3 and\\n2 respectively. Thus, both Alice and Bob have\\n1 animal of type\\n2 and\\n1 animal of type\\n3.\\nTest case\\n3: It can be proven that Alice and Bob cannot have the same multiset of pets in any case.\\nTest case\\n4: If Alice buys animals\\n1,2, and\\n5, having types\\n5,5, and\\n1 respectively, Bob will buy animals\\n3,4, and\\n6, having types\\n1,5, and\\n5 respectively. Thus, both Alice and Bob have\\n1 animal of type\\n1 and\\n2 animals of type\\n5.\"",
        "261": "b\"Mathison and pangrams\\nRead problems statements in mandarin chinese, russian and vietnamese as well.\\nMathison recently inherited an ancient papyrus that contained some text. Unfortunately, the text was not a pangram. Now, Mathison has a particular liking for holoalphabetic strings and the text bothers him. The good news is that Mathison can buy letters from the local store in order to turn his text into a pangram.\\nHowever, each letter has a price and Mathison is not very rich. Can you help Mathison find the cheapest way to obtain a pangram?\\nInput\\nThe first line of the input file will contain one integer, T, representing the number of tests.\\nEach test will be formed from two lines. The first one contains 26 space-separated integers, representing the prices of all letters. The second will contain Mathison's initial text (a string of N lowercase letters).\\nOutput\\nThe output file will contain T lines, one for each test. Each line will contain the answer for the corresponding test.\\nConstraints and notes\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 10\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 50,000\\nAll prices are natural numbers between 1 and 1,000,000 (i.e. 106).\\nA pangram is a string that contains every letter of the Latin alphabet at least once.\\nAll purchased letters are added to the end of the string.\\nSubtaks\\nSubtask #1 (30 points):\\nN = 1\\nSubtask #2 (70 points):\\nOriginal constraints\\nSample 1:\\nInput\\nOutput\\n2\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\\nabcdefghijklmopqrstuvwz\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\\nthequickbrownfoxjumpsoverthelazydog\\n63\\n0\\nExplanation:\\nFirst test\\nThere are three letters missing from the original string: n (price 14), x (price 24), and y (price 25).\\nTherefore the answer is 14 + 24 + 25 = 63.\\n\\nSecond test\\nNo letter is missing so there is no point in buying something. The answer is 0.\"",
        "262": "b'Valid Minimum\\nThere are\\n3 hidden numbers\\nA,B,C.\\nYou somehow found out the values of\\nmin(A,B),min(B,C), and\\nmin(C,A).\\nDetermine whether there exists any tuple\\n(A,B,C) that satisfies the given values of\\nmin(A,B),min(B,C),min(C,A).\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case contains\\n3 space-separated integers denoting the values of\\nmin(A,B),min(B,C), and\\nmin(C,A).\\nOutput Format\\nFor each test case, output YES if there exists any valid tuple\\n(A,B,C), and NO otherwise.\\nYou can print each letter of the output in any case. For example YES, yes, yEs will all be considered equivalent.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4min(A,B),min(B,C),min(C,A)\\xe2\\x89\\xa410\\nSample 1:\\nInput\\nOutput\\n3\\n5 5 5\\n2 3 4\\n2 2 4\\nYES\\nNO\\nYES\\nExplanation:\\nTest case\\n1: One valid tuple\\n(A,B,C) is\\n(5,5,5).\\nTest case\\n2: It can be shown that there is no valid tuple\\n(A,B,C).\\nTest case\\n3: One valid tuple\\n(A,B,C) is\\n(4,2,5).'",
        "263": "b'Easy Math\\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nChef is attending math classes. On each day, the teacher gives him homework. Yesterday, the teacher gave Chef a sequence of positive integers and asked him to find the maximum product of two different elements of this sequence. This homework was easy for Chef, since he knew that he should select the biggest two numbers.\\nHowever, today, the homework is a little bit different. Again, Chef has a sequence of positive integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n, but he should find two different elements of this sequence such that the sum of digits (in base\\n10) of their product is maximum possible.\\nChef thought, mistakenly, that he can still select the two largest elements and compute the sum of digits of their product. Show him that he is wrong by finding the correct answer \\xe2\\x80\\x95 the maximum possible sum of digits of a product of two different elements of the sequence\\nA.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of the input contains a single integer\\nN.\\nThe second line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 the maximum sum of digits.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n4\\nfor each valid\\ni\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n2\\n2 8\\n3 \\n8 2 8\\n3\\n9 10 11\\n7\\n10\\n18\\nExplanation:\\nExample case 1: The only two numbers Chef can choose are\\n2 and\\n8. Their product is\\n16 and the sum of digits of\\n16 is\\n7.\\nExample case 2: Chef can choose\\n8 and\\n8; their product is\\n64. Note that it is allowed to choose two different elements with the same value.\\nExample case 3: Chef can choose\\n9 and\\n11. Their product is\\n99 and the sum of its digits is\\n18. Note that choosing\\n10 and\\n11 will result in a larger product (\\n110), but the sum of its digits is just\\n2.'",
        "264": "b'Fit in Data Type\\nChef wants to store some important numerical data on his personal computer. He is using a new data type that can store values only from\\n0 till\\nN both inclusive. If this data type receives a value greater than\\nN then it is cyclically converted to fit into the range\\n0 to\\nN. For example:\\nValue\\nN+1 will be stored as\\n0.\\nValue\\nN+2 will be stored as\\n1.\\nand so on...\\nGiven\\nX, the value chef wants to store in this new data type. Determine what will be the actual value in memory after storing\\nX.\\nInput Format\\nFirst line will contain\\nT, number of testcases. Then the testcases follow.\\nEach testcase contains a single line of input, two space separated integers\\nN,X - the maximum value a data type can store and the value Chef wants to store in the data type respectively.\\nOutput Format\\nFor each testcase, output in a single line the value which will be actually stored in memory.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa43000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa450\\n0\\xe2\\x89\\xa4X\\xe2\\x89\\xa450\\nSample 1:\\nInput\\nOutput\\n5\\n15 0\\n15 10\\n11 12\\n27 37\\n50 49\\n0\\n10\\n0\\n9\\n49\\nExplanation:\\nTest Case\\n1: The data type can store values from\\n0 to\\n15. If we try to put\\n0 in this data type, then the stored value will be the same, that is\\n0.\\nTest Case\\n2: The data type can store values from\\n0 to\\n15. If we try to put\\n10 in this data type, then the stored value will be the same, that is\\n10.\\nTest Case\\n3: The data type can store values from\\n0 to\\n11. If we try to put\\n12 in this data type, then the stored value will cyclically come back to\\n0. Hence the output is\\n0.\\nTest Case\\n4: The data type can store values from\\n0 to\\n27. If we try to put\\n37 in this data type, then the stored value will cyclically convert to\\n9. Hence the output is\\n9.'",
        "265": "b'Coin Flip\\nLittle Elephant was fond of inventing new games. After a lot of research, Little Elephant came to know that most of the animals in the forest were showing less interest to play the multi-player games. Little Elephant had started to invent single player games, and succeeded in inventing the new single player game named COIN FLIP.\\nIn this game the player will use\\nN coins numbered from\\n1 to\\nN, and all the coins will be facing in \"Same direction\" (Either Head or Tail), which will be decided by the player before starting of the game.\\nThe player needs to play\\nN rounds. In the\\nk-th round the player will flip the face of the all coins whose number is less than or equal to\\nk. That is, the face of coin\\ni will be reversed, from Head to Tail, or, from Tail to Head, for\\ni\\xe2\\x89\\xa4k.\\nElephant needs to guess the total number of coins showing a particular face after playing\\nN rounds. Elephant really becomes quite fond of this game COIN FLIP so Elephant plays\\nG times. Please help the Elephant to find out the answer.\\nInput:\\nThe first line of input contains an integer\\nT, denoting the number of test cases. Then\\nT test cases follow.\\nThe first line of each test contains an integer\\nG, denoting the number of games played by Elephant. Each of the following\\nG lines denotes a single game, and contains\\n3 space-separated integers\\nI,\\nN,\\nQ, where\\nI denotes the initial state of the coins,\\nN denotes the number of coins and rounds, and\\nQ, which is either\\n1, or\\n2 as explained below.\\nHere\\nI=1 means all coins are showing Head in the start of the game, and\\nI=2 means all coins are showing Tail in the start of the game.\\nQ=1 means Elephant needs to guess the total number of coins showing Head in the end of the game, and\\nQ=2 means Elephant needs to guess the total number of coins showing Tail in the end of the game.\\nOutput:\\nFor each game, output one integer denoting the total number of coins showing the particular face in the end of the game.\\nConstraints:\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4G\\xe2\\x89\\xa42000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4I\\xe2\\x89\\xa42\\n1\\xe2\\x89\\xa4Q\\xe2\\x89\\xa42\\nSample 1:\\nInput\\nOutput\\n1\\n2\\n1 5 1\\n1 5 2\\n2\\n3\\nExplanation:\\nIn the 1st game in Example,\\nI=1, so initial arrangement of coins are H H H H H, and now Elephant will play 5 rounds and coin faces will be changed as follows< After the 1st Round: T H H H H After the 2nd Round: H T H H H After the 3rd Round: T H T H H After the 4th Round: H T H T H After the 5th Round: T H T H T Finally Q=1, so we need to find the total number of coins showing Head, which is 2\\nIn the 2nd game in Example: This is similar to the 1st game, except Elephant needs to find the total number of coins showing Tail. So the Answer is\\n3. (Please see the final state of the coins in the\\n1\\nst\\ngame)'",
        "266": "b\"Ciel and A-B Problem\\nIn Ciel's restaurant, a waiter is training. Since the waiter isn't good at arithmetic, sometimes he gives guests wrong change. Ciel gives him a simple problem. What is A-B (A minus B) ?\\nSurprisingly, his answer is wrong. To be more precise, his answer has exactly one wrong digit. Can you imagine this? Can you make the same mistake in this problem?\\nInput\\nAn input contains 2 integers A and B.\\nOutput\\nPrint a wrong answer of A-B. Your answer must be a positive integer containing the same number of digits as the correct answer, and exactly one digit must differ from the correct answer. Leading zeros are not allowed. If there are multiple answers satisfying the above conditions, anyone will do.\\nConstraints\\n1 \\xe2\\x89\\xa4 B < A \\xe2\\x89\\xa4 10000\\nSample 1:\\nInput\\nOutput\\n5858 1234\\n1624\\nExplanation:\\nThe correct answer of 5858-1234 is 4624. So, for instance, 2624, 4324, 4623, 4604 and 4629 will be accepted, but 0624, 624, 5858, 4624 and 04624 will be rejected.\\nNotes\\nThe problem setter is also not good at arithmetic.\"",
        "267": "b\"Average of Three\\nIt is Chef's birthday. You know that Chef's favourite number is\\nX. You also know that Chef loves averages. Therefore you decide it's best to gift Chef\\n3 integers\\nA\\n1\\n,A\\n2\\n,A\\n3\\n, such that:\\nThe mean of\\nA\\n1\\n,A\\n2\\nand\\nA\\n3\\nis\\nX.\\n1\\xe2\\x89\\xa4A\\n1\\n,A\\n2\\n,A\\n3\\n\\xe2\\x89\\xa41000.\\nA\\n1\\n,A\\n2\\nand\\nA\\n3\\nare distinct.\\nOutput any suitable\\nA\\n1\\n,A\\n2\\nand\\nA\\n3\\nwhich you could gift to Chef.\\nAs a reminder, the mean of three numbers\\nP,Q,R is defined as:\\nmean(P,Q,R)=\\n3\\nP+Q+R\\n.\\nFor example,\\nmean(2,3,5)=\\n3\\n2+3+5\\n=\\n3\\n10\\n=3.33\\n3\\n\\xcb\\x89\\n,\\nmean(2,2,5)=\\n3\\n2+2+5\\n=\\n3\\n9\\n=3.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains one integer\\nX \\xe2\\x80\\x94 Chef's favourite number.\\nOutput Format\\nFor each test case, one line containing\\n3 space-separated integers \\xe2\\x80\\x94\\nA\\n1\\n,A\\n2\\n, and\\nA\\n3\\n, which satisfy the given conditions. If there are multiple possible answers you may output any of them.\\nIt can be shown that an answer always exists, under the given constraints.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n2\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n3\\n5\\n5\\n1 3 5\\n1 6 8\\n3 5 7\\nExplanation:\\nTest Case\\n1:\\nmean(1,3,5)=\\n3\\n1+3+5\\n=\\n3\\n9\\n=3\\nTest Case\\n2:\\nmean(1,6,8)=\\n3\\n1+6+8\\n=\\n3\\n15\\n=5\\nTest Case\\n3:\\nmean(3,5,7)=\\n3\\n3+5+7\\n=\\n3\\n15\\n=5\"",
        "268": "b\"Max Binary\\nChef has a binary strings\\nS of length\\nN, and an integer\\nK.\\nHitesh wants to maximize the decimal representation of\\nS using\\nK operations of the following type:\\nType\\n1: Insert\\n0 at any position in the string.\\nType\\n2: Change any\\n0 to\\n1.\\nHelp Hitesh find the modified string with maximum possible decimal representation after performing at most\\nK operations.\\nNote that the decimal representation of a binary string refers to the numeric value it represents when converted to the decimal number system. For instance, the decimal representation of\\n101 will be\\n5\\n(2\\n2\\n+2\\n0\\n), and that of\\n000110 will be\\n6\\n(2\\n2\\n+2\\n1\\n)\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nThe first line of each test case contains two integers\\nN and\\nK.\\nThe second line contains the string\\nS.\\nOutput Format\\nFor each test case, output on a new line, the modified string with maximum possible decimal representation after performing at most\\nK operations.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n6\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n6\\nS consists of\\n0 and\\n1 only.\\nThe sum of\\nN and\\nK over all test cases won't exceed\\n5\\xe2\\x8b\\x8510\\n6\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n4 2\\n1101\\n6 3\\n001110\\n5 4\\n00110\\n3 1\\n000\\n110100\\n10111000\\n10110000\\n100\\nExplanation:\\nTest case\\n1: We are allowed to perform two operations. We can perform both operations of type\\n1 to obtain\\n110100, having decimal value\\n52.\\nTest case\\n2: We are allowed to perform three operations. We can perform two operations of type\\n1 to obtain\\n00111000, and one operation of type\\n2 to obtain\\n10111000, having decimal value\\n184.\"",
        "269": "b'Journey of the Knight\\nChef has an\\n8\\xc3\\x978 chessboard. He placed a knight on the square\\n(X\\n1\\n,Y\\n1\\n). Note that, the square at the intersection of the\\ni\\nth\\nrow and\\nj\\nth\\ncolumn is denoted by\\n(i,j).\\nChef wants to determine whether the knight can end up at the square\\n(X\\n2\\n,Y\\n2\\n) in exactly\\n100 moves or not.\\nFor reference, a knight can move to a square which is:\\nOne square horizontally and two squares vertically away from the current square, or\\nOne square vertically and two squares horizontally away from the current square\\nA visual description of this may be found here.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains\\n4 integers\\nX\\n1\\n,Y\\n1\\n,X\\n2\\n,Y\\n2\\n\\xe2\\x80\\x94 where\\n(X\\n1\\n,Y\\n1\\n) denotes the starting square of the knight and\\n(X\\n2\\n,Y\\n2\\n) denotes the ending square of the knight.\\nOutput Format\\nFor each test case, output YES if knight can move from\\n(X\\n1\\n,Y\\n1\\n) to\\n(X\\n2\\n,Y\\n2\\n) in exactly\\n100 moves. Otherwise, output NO.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X\\n1\\n,Y\\n1\\n,X\\n2\\n,Y\\n2\\n\\xe2\\x89\\xa48\\nSample 1:\\nInput\\nOutput\\n3\\n1 1 1 1\\n8 8 7 6\\n8 8 8 6\\nYES\\nNO\\nYES\\nExplanation:\\nTest Case 1: Knight can first move to\\n(2,3) and then back to\\n(1,1). He can repeat this\\n50 times and he will end up at\\n(1,1) after\\n100 moves.\\nTest Case 2: It can be proven that it is not possible for the knight to end at\\n(7,6) after\\n100 moves.\\nTest Case 3: Knight can first move to\\n(6,7) and then to\\n(8,6). After that, he can alternate between\\n(6,7) and\\n(8,6) for\\n49 times and he will end up at\\n(8,6) after\\n100 moves.'",
        "270": "b'Rectangle\\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\\nYou are given four integers a, b, c and d. Determine if there\\'s a rectangle such that the lengths of its sides are a, b, c and d (in any order).\\nInput\\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\\nThe first and only line of each test case contains four space-separated integers a, b, c and d.\\nOutput\\nFor each test case, print a single line containing one string \"YES\" or \"NO\".\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 1,000\\n1 \\xe2\\x89\\xa4 a, b, c, d \\xe2\\x89\\xa4 10,000\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n1 1 2 2\\n3 2 2 3\\n1 2 2 2\\nYES\\nYES\\nNO'",
        "271": "b'Download file\\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\\nChef has recently got a broadband internet connection. His history of internet data usage is provided as below.\\nDuring the first T1 minutes, the internet data used was D1 MBs per minute, and during the next T2 minutes, it was D2 MBs per minute, and so on till during last TN minutes it was DN MBs per minute.\\nThe internet provider charges the Chef 1 dollar for every 1 MB data used, except for the first K minutes, when the internet data is free as part of the plan provided to Chef.\\nPlease find out the total amount that Chef has to pay the internet provider (in dollars).\\nInput\\nFirst line of the input contains a single integer TC the number of test cases. Description of TC test cases follow.\\nFirst line of each test case contains two space separated integers N and K.\\nNext N lines of each test case contains information about the internet data usage. Specifically, in the i-th line, there will be two space separated integers: Ti and Di.\\nOutput\\nFor each test case output a single integer in separate line, the amount that Chef has to pay in dollars.\\nConstraints\\n1 \\xe2\\x89\\xa4 TC \\xe2\\x89\\xa4 1,000\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 10\\n0 \\xe2\\x89\\xa4 K \\xe2\\x89\\xa4 T1 + T2 + ... + TN\\n1 \\xe2\\x89\\xa4 Ti, Di \\xe2\\x89\\xa4 10\\nSample 1:\\nInput\\nOutput\\n3\\n2 2\\n2 1\\n2 3\\n2 2\\n1 2\\n2 3\\n3 0\\n1 2\\n2 4\\n10 10\\n6\\n3\\n110\\nExplanation:\\nExample case 1. For the first two minutes, internet data of usage of Chef is free. He has to pay for last 2 minutes only, for which he will be charged at 3 dollars per minute, i.e. total 6 dollars.\\nExample case 2. For the first two minutes, internet data of usage of Chef is free. He has to pay for last 1 minute only, for which he is being charged at 3 dollars per minute. So, in total he has to pay 3 dollars.\\nExample case 3. This time, Chef is not provided any free data usage. He has to pay for entire data usage, which comes out to be 1 * 2 + 2 * 4 + 10 * 10 = 110 dollars.'",
        "272": "b\"Farmer Feb\\nRead problems statements in Mandarin Chinese and Russian.\\n  Farmer Feb has three fields with potatoes planted in them. He harvested x potatoes from the first field, y potatoes from the second field and is yet to harvest potatoes from the third field. Feb is very superstitious and believes that if the sum of potatoes he harvests from the three fields is a prime number (http:\/\/en.wikipedia.org\/wiki\/Prime_number), he'll make a huge profit. Please help him by calculating for him the minimum number of potatoes that if harvested from the third field will make the sum of potatoes prime. At least one potato should be harvested from the third field.\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contain 2 integers separated by single space: x and y.\\n  Output\\nFor each test case, output a single line containing the answer.\\n  Constraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 1000\\n1 \\xe2\\x89\\xa4 x \\xe2\\x89\\xa4 1000\\n1 \\xe2\\x89\\xa4 y \\xe2\\x89\\xa4 1000\\n  Sample 1:\\nInput\\nOutput\\n2\\n1 3\\n4 3\\n1\\n4\\nExplanation:\\nIn example case 1: the farmer harvested a potato from the first field and 3 potatoes from the second field. The sum is 4. If he is able to harvest a potato from the third field, that will make the sum 5, which is prime. Hence the answer is 1(he needs one more potato to make the sum of harvested potatoes prime.)\"",
        "273": "b'Minimum XOR\\nYou have\\nN integers -\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nYou have to make the Bitwise XOR of all the elements as minimum as possible.\\nYou are allowed to remove at most one element. Note that this means that you can also choose to not remove any element.\\nWhat is the final minimum XOR that you can achieve after removing at most one element?\\nNote: In most programming languages, the XOR of two variables x and y can be computed using x ^ y.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the number of elements.\\nThe next line contains\\nN space separated integers\\nOutput Format\\nFor each test case, output on a new line the final minimum XOR of the elements.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n5\\nSum of\\nN over all the testcases\\n\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n4\\n2 4 3 6\\n2\\n4 4\\n5\\n1 3 5 17 9\\n0\\n0\\n14\\nExplanation:\\nTestcase 1: The bitwise XOR of all elements\\n{2,4,3,6} is\\n3. If we remove the element\\n3, the total XOR of the remaining elements becomes\\n0 which is minimum possible XOR.\\nTestcase 2: The bitwise XOR of all elements\\n{4,4} is\\n0. This is already the minimum possible total XOR, and so we will not remove any element.\\nTestcase 3: The bitwise XOR of all elements\\n{1,3,5,17,9} is\\n31. If we remove the element\\n17, the total XOR of the remaining elements becomes\\n14 which is minimum possible XOR.'",
        "274": "b\"Large Square\\nRead problem statements in Mandarin Chinese and Bengali.\\nYou are given\\nN identical squares, each with side length\\nA. All the squares have their sides parallel to the\\nx\\xe2\\x88\\x92axis and\\ny\\xe2\\x88\\x92axis. That is, the squares are not tilted. You have to take several (possibly, zero or all) squares and rearrange them to obtain a mega square. The mega square can't have any gap in the enclosed region or have overlapping squares. Also, you cannot rotate any square.\\nOutput the side length of the largest mega square that you can obtain.\\nInput Format\\nThe first line of input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains two space-separated integers\\nN,A.\\nOutput Format\\nFor each test case, print a single line containing one integer - the side length of the largest square you can obtain.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\xe2\\x89\\xa410\\n4\\nSample 1:\\nInput\\nOutput\\n5\\n3 2\\n5 3\\n16 18\\n11 8\\n8 6\\n2\\n6\\n72\\n24\\n12\\nExplanation:\\nTest case\\n1: You can choose just one square to form the mega square. So the side length will be\\n2.\\nTest case\\n2: You can choose\\n4 squares to form a mega square with side-length\\n2\\xe2\\x8b\\x85A\\n=6.\"",
        "275": "b'Make Multiple\\nChef has two integers\\nA and\\nB\\n(A\\xe2\\x89\\xa4B).\\nChef can choose any non-negative integer\\nX and add them to both\\nA and\\nB. Find whether it is possible to make\\nA a divisor of\\nB.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two integers\\nA and\\nB.\\nOutput Format\\nFor each test case, output YES if it is possible to make\\nA a factor of\\nB, NO otherwise.\\nYou can print each character of the string in uppercase or lowercase. For example, the strings Yes, YES, yes, and yEs, are all considered identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\xe2\\x89\\xa4B\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n3\\n3 6\\n4 14\\n9 10\\nYES\\nYES\\nNO\\nExplanation:\\nTest case\\n1: We can choose\\nX=0 and add them to\\n3 and\\n6. Thus,\\n3 is a factor of\\n6.\\nTest case\\n2: We can choose\\nX=1 and add them to\\n4 and\\n14. Thus,\\n4+1=5 is a factor of\\n14+1=15.\\nTest case\\n3: There is no possible value of\\nX to add such that\\nA becomes a factor of\\nB.'",
        "276": "b'Balanced Reversals\\nChef is given a binary string\\nA of length\\nN. He can perform the following operation on\\nA any number of times:\\nChoose\\nL and\\nR\\n(1\\xe2\\x89\\xa4L\\xe2\\x89\\xa4R\\xe2\\x89\\xa4N), such that, in the substring\\nA[L,R], the number of\\n1s is equal to the number of\\n0s and reverse the substring\\nA[L,R].\\nFind the lexicographically smallest string that Chef can obtain after performing the above operation any (possibly zero) number of times on\\nA.\\nString\\nX is lexicographically smaller than string\\nY, if either of the following satisfies:\\nX is a prefix of\\nY and\\nX\\n\\xee\\x80\\xa0\\n=Y.\\nThere exists an index\\ni such that\\nX\\ni\\n<Y\\ni\\nand\\nX\\nj\\n=Y\\nj\\n,\\xe2\\x88\\x80j such that\\n1\\xe2\\x89\\xa4j<i.\\nInput Format\\nFirst line will contain\\nT, the number of test cases. Then the test cases follow. Each test case contains two lines.\\nThe first line contains the integer\\nN, the length of the binary string.\\nThe second line contains the binary string\\nA.\\nOutput Format\\nFor each test case, print the lexicographically smallest binary string that can be obtained after performing the operation any (possibly zero) number of times.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nSum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n2\\n5\\n01100\\n4\\n0000\\n00011\\n0000\\nExplanation:\\nTest Case\\n1: Chef can choose\\nL=2 and\\nR=5. The chosen substring,\\nA[2,5]=1100. On reversing this, we get\\n0011. Thus, the final string is\\nA=00011. Note that this is the lexicographically smallest string possible.\\nTest Case\\n2: Since the string is already lexicographically minimum, Chef does not need to apply any operation.'",
        "277": "b\"IPL and RCB\\nIt's IPL time and as usual RCB are finding it tough to qualify for playoffs. RCB needs a minimum of\\nX more points to qualify for playoffs in their remaining\\nY matches. A win, tie and loss in a match will yield\\n2,1,0 points respectively to a team.\\nYou being a true RCB supporter want to find the minimum number of matches RCB needs to win to qualify for playoffs. It is guaranteed that RCB will qualify for playoffs if they win all their remaining\\nY matches.\\nInput:\\nFirst line will contain\\nT, number of testcases. Then the testcases follow.\\nEach testcase contains of a single line of input, two space separated integers\\nX,Y\\nOutput:\\nFor each testcase, output in a single line the minimum number of matches RCB must win to qualify for playoffs.\\nConstraints :\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410000\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4Y\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa42\\xe2\\x8b\\x85Y\\nSample 1:\\nInput\\nOutput\\n2\\n10 5\\n1 5\\n5\\n0\\nExplanation:\\nIn first case\\nX=10 and\\nY=5, so RCB needs\\n10 points from remaining\\n5 matches to qualify for playoffs. It is only possible if they win all their remaining\\n5 matches.\\nIn second case\\nX=1 and\\nY=5, so RCB needs\\n1 points from their remaining\\n5 matches to qualify for playoffs. It can be done if they tie any one of their\\n5 matches and lose the remaining\\n4. So they need to win\\n0 matches.\"",
        "278": "b'Hostel Room\\nThere are initially\\nX people in a room.\\nYou are given an array\\nA of length\\nN which describes the following events:\\nIf\\nA\\ni\\n\\xe2\\x89\\xa50, then\\nA\\ni\\npeople enter the room at\\ni-th minute. For e.g. if\\nA\\n2\\n=3, then\\n3 people enter the room at the\\n2-nd minute.\\nIf\\nA\\ni\\n<0, then\\n\\xe2\\x88\\xa3A\\ni\\n\\xe2\\x88\\xa3 people leave the room at\\ni-th minute. Here\\n\\xe2\\x88\\xa3A\\ni\\n\\xe2\\x88\\xa3 denotes the absolute value of\\nA\\ni\\n. For e.g. if\\nA\\n4\\n=\\xe2\\x88\\x922, then\\n2 people leave the room at the\\n4-th minute.\\nDetermine the maximum number of people in the room at any moment of time.\\nIt is guaranteed in the input that at any moment of time, the number of people in the room does not become negative.\\nInput Format\\nThe first line will contain\\nT - the number of test cases. Then the test cases follow.\\nThe first line of each test case consists of two integers\\nN and\\nX - the length of the array\\nA and the number of people in the room initially.\\nThe second line of each test case contains\\nN integers\\nA\\n1\\n,A\\n2\\n,A\\n3\\n,\\xe2\\x80\\xa6A\\nN\\n.\\nOutput Format\\nFor each testcase, output the maximum number of people in the room at any point of time.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\n\\xe2\\x88\\x92100\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n5 8\\n0 3 3 -13 5\\n4 5\\n0 -2 2 3\\n3 5\\n-2 5 -2\\n14\\n8\\n8\\nExplanation:\\nTest case-1: In the\\n3-rd minute, the room contains\\n8+0+3+3=14 people which is the maximum number of people in the room at any point of time.\\nTest case-2: In the\\n4-th minute, the room contains\\n5+0\\xe2\\x88\\x922+2+3=8 people which is the maximum number of people in the room at any point of time.\\nTest case-3: In the\\n2-nd minute, the room contains\\n5\\xe2\\x88\\x922+5=8 people which is the maximum number of people in the room at any point of time.'",
        "279": "b\"Card Swipe\\nIn the bustling CodeChef office, the entrance is equipped with a high-tech card swipe system. Each employee is assigned a unique ID card that they use to swipe in and out of the building.\\nThe system records every swipe, capturing the first swipe of an ID as in, second as out, third as in, and so on. Given an array\\nA consisting of\\nN IDs denoting\\nN swipes throughout the day, find the maximum number of people in the office at any time.\\nNote that there is nobody inside the office before the first swipe.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the number of swipes throughout the day.\\nThe next line contains\\nN space-separated integers denoting the ID of the\\ni\\nth\\nswipe.\\nOutput Format\\nFor each test case, output on a new line, the maximum number of people in the office at any time.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4N\\nThe sum of\\nN over all test cases won't exceed\\n10\\n6\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n4\\n1 2 2 1\\n4\\n1 1 1 2\\n5\\n3 5 2 4 1\\n5\\n1 2 1 5 4\\n2\\n2\\n5\\n3\\nExplanation:\\nTest case\\n1: Consider the following order of swipes:\\nPerson\\n1 swipes and enters the office.\\nPerson\\n2 swipes and enters the office.\\nPerson\\n2 swipes and leaves the office.\\nPerson\\n1 swipes and leaves the office.\\nThus, the maximum number of people in the office at any time is\\n2.\\nTest case\\n2: Consider the following order of swipes:\\nPerson\\n1 swipes and enters the office.\\nPerson\\n1 swipes and leaves the office.\\nPerson\\n1 swipes and enters the office.\\nPerson\\n2 swipes and enters the office.\\nThus, the maximum number of people in the office at any time is\\n2.\\nTest case\\n3: Five people swipe and enter the office. Thus, the maximum number of people in the office is\\n5.\\nTest case\\n4: Consider the following order of swipes:\\nPerson\\n1 swipes and enters the office.\\nPerson\\n2 swipes and enters the office.\\nPerson\\n1 swipes and leaves the office.\\nPerson\\n5 swipes and enters the office.\\nPerson\\n4 swipes and enters the office.\\nThus, the maximum number of people in the office at any time is\\n3. Their IDs are\\n2,5, and\\n4.\"",
        "280": "b\"Movie Weekend\\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\\nLittle Egor is a huge movie fan. He likes watching different kinds of movies: from drama movies to comedy movies, from teen movies to horror movies. He is planning to visit cinema this weekend, but he's not sure which movie he should watch.\\nThere are n movies to watch during this weekend. Each movie can be characterized by two integers Li and Ri, denoting the length and the rating of the corresponding movie. Egor wants to watch exactly one movie with the maximal value of Li \\xc3\\x97 Ri. If there are several such movies, he would pick a one with the maximal Ri among them. If there is still a tie, he would pick the one with the minimal index among them.\\nYour task is to help Egor to pick a movie to watch during this weekend.\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases.\\nThe first line of the test case description contains an integer n.\\nThe second line of the test case description contains n integers L1, L2, ...,Ln. The following line contains n integers R1, R2, ..., Rn.\\nOutput\\nFor each test case, output a single integer i denoting the index of the movie that Egor should watch during this weekend. Note that we follow 1-based indexing.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 5\\n1 \\xe2\\x89\\xa4 n \\xe2\\x89\\xa4 100\\n1 \\xe2\\x89\\xa4 Li, Ri \\xe2\\x89\\xa4 100\\nSample 1:\\nInput\\nOutput\\n2\\n2\\n1 2\\n2 1\\n4\\n2 1 4 1\\n2 4 1 4\\n1\\n2\\nExplanation:\\nIn the first example case, both films have the same value of L \\xc3\\x97 R, but the first film has a better rating.\\nIn the second example case, the second and the fourth movies are equally good, but the second movie has a smaller index.\"",
        "281": "b\"Chef and Groups\\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nThere are\\nN seats in a row. You are given a string\\nS with length\\nN; for each valid\\ni, the\\ni-th character of\\nS is '0' if the\\ni-th seat is empty or '1' if there is someone sitting in that seat.\\nTwo people are friends if they are sitting next to each other. Two friends are always part of the same group of friends. Can you find the total number of groups?\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains a single string\\nS.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 the number of groups.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa450\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n4\\n000\\n010\\n101\\n01011011011110\\n0\\n1\\n2\\n4\\nExplanation:\\nExample case 1: Since all seats are empty, the number of groups is\\n0.\\nExample case 2: Since only one seat is occupied, the number of groups is\\n1.\\nExample case 3: Here, two seats are occupied, but since they are not adjacent, the people sitting on them belong to different groups.\\nExample case 4: Here, we have\\n4 groups of friends with size\\n1,\\n2,\\n2 and\\n4 respectively. That is, first group is sitting at\\n2nd seat, second group at\\n4th and\\n5th seat, third group at\\n7th and\\n8th seat and fourth group at\\n10th to\\n13th seat.\"",
        "282": "b'Positive Products\\nYou are given an array\\nA of length\\nN. Find the number of pairs of indices\\n(i,j) such that\\n1\\xe2\\x89\\xa4i<j\\xe2\\x89\\xa4N\\nA\\ni\\n\\xe2\\x8b\\x85A\\nj\\n>0\\nInput Format\\nThe first line contains a single integer\\nT - the number of test cases. Then the test cases follow.\\nThe first line of each test case contains an integer\\nN - the size of the array\\nA.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\ndenoting the array\\nA.\\nOutput Format\\nFor each test case, output the number of pairs which satisfy the above conditions.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n\\xe2\\x88\\x9210\\n4\\n\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n4\\nSum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n5\\n1 -3 0 2 -1\\n4\\n-1 -1 -1 -1\\n4\\n0 1 2 3\\n2\\n6\\n3\\nExplanation:\\nTest case 1: The pairs which satisfy the conditions are\\n(1,4) and\\n(2,5).\\nTest case 2: The pairs which satisfy the conditions are\\n(1,2),\\n(1,3),\\n(1,4),\\n(2,3),\\n(2,4) and\\n(3,4).\\nTest case 3: The pairs which satisfy the conditions are\\n(2,3),\\n(2,4) and\\n(3,4).'",
        "283": "b'Count of Maximum\\nGiven an array\\nA of length\\nN, your task is to find the element which repeats in\\nA maximum number of times as well as the corresponding count. In case of ties, choose the smaller element first.\\nInput Format\\nFirst line of input contains an integer\\nT, denoting the number of test cases. Then follows description of\\nT cases. Each case begins with a single integer\\nN, the length of\\nA. Then follow\\nN space separated integers in next line.\\nOutput Format\\nFor each test case, output two space separated integers\\nV &\\nC.\\nV is the value which occurs maximum number of times and\\nC is its count.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\nFor all i in [1..N] :\\n1\\xe2\\x89\\xa4A[i]\\xe2\\x89\\xa410000\\nSample 1:\\nInput\\nOutput\\n2\\n5\\n1 2 3 2 5\\n6\\n1 2 2 1 1 2\\n2 2\\n1 3\\nExplanation:\\nIn first case 2 occurs twice whereas all other elements occur only once. In second case, both 1 and 2 occur 3 times but 1 is smaller than 2.'",
        "284": "b'A Balanced Contest\\nRead problems statements in mandarin chinese, russian and vietnamese as well.\\nChef wants to organize a contest. Predicting difficulty levels of the problems can be a daunting task. Chef wants his contests to be balanced in terms of difficulty levels of the problems.\\nAssume a contest had total P participants. A problem that was solved by at least half of the participants (i.e. P \/ 2 (integer division)) is said to be cakewalk difficulty. A problem solved by at max P \/ 10 (integer division) participants is categorized to be a hard difficulty.\\nChef wants the contest to be balanced. According to him, a balanced contest must have exactly 1 cakewalk and exactly 2 hard problems. You are given the description of N problems and the number of participants solving those problems. Can you tell whether the contest was balanced or not?\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases.\\nThe first line of each test case contains two space separated integers, N, P denoting the number of problems, number of participants respectively.\\nThe second line contains N space separated integers, i-th of which denotes number of participants solving the i-th problem.\\nOutput\\nFor each test case, output \"yes\" or \"no\" (without quotes) denoting whether the contest is balanced or not.\\nConstraints\\n1 \\xe2\\x89\\xa4 T, N \\xe2\\x89\\xa4 500\\n1 \\xe2\\x89\\xa4 P \\xe2\\x89\\xa4 108\\n1 \\xe2\\x89\\xa4 Number of participants solving a problem \\xe2\\x89\\xa4 P\\nSubtasks\\nSubtask #1 (40 points): P is a multiple of 10\\nSubtask #2 (60 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n6\\n3 100\\n10 1 100\\n3 100\\n11 1 100\\n3 100\\n10 1 10\\n3 100\\n10 1 50\\n4 100\\n50 50 50 50\\n4 100\\n1 1 1 1\\nyes\\nno\\nno\\nyes\\nno\\nno\\nExplanation:\\nExample case 1.: The problems are of hard, hard and cakewalk difficulty. There is 1 cakewalk and 2 hard problems, so the contest is balanced.\\nExample case 2.: The second problem is hard and the third is cakewalk. There is 1 cakewalk and 1 hard problem, so the contest is not balanced.\\nExample case 3.: All the three problems are hard. So the contest is not balanced.\\nExample case 4.: The problems are of hard, hard, cakewalk difficulty. The contest is balanced.\\nExample case 5.: All the problems are cakewalk. The contest is not balanced.\\nExample case 6.: All the problems are hard. The contest is not balanced.'",
        "285": "b'Divisible by i\\nYou are given an integer\\nN.\\nConstruct a permutation\\nP of length\\nN such that\\nFor all\\ni\\n(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\xe2\\x88\\x921),\\ni divides\\nabs(P\\ni+1\\n\\xe2\\x88\\x92P\\ni\\n).\\nRecall that a permutation of length\\nN is an array where every integer from\\n1 to\\nN occurs exactly once.\\nIt can be proven that for the given constraints at least one such\\nP always exists.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follow.\\nThe only line of each test case contains an integer\\nN - the length of the array to be constructed.\\nOutput Format\\nFor each test case, output a single line containing\\nN space-separated integers\\nP\\n1\\n,P\\n2\\n,\\xe2\\x80\\xa6,P\\nN\\n, denoting the elements of the array\\nP.\\nIf there exist multiple such arrays, print any.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa45\\xe2\\x8b\\x8510\\n4\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nThe sum of\\nN over all test cases does not exceed\\n10\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n2\\n2\\n3\\n1 2\\n2 1 3\\nExplanation:\\nTest case 1: A possible array satisfying all the conditions is\\n[1,2]:\\nFor\\ni=1:\\nabs(A\\n2\\n\\xe2\\x88\\x92A\\n1\\n)=abs(2\\xe2\\x88\\x921)=1 is divisible by\\n1.\\nTest case 2: A possible array satisfying all the conditions is\\n[2,1,3]:\\nFor\\ni=1:\\nabs(A\\n2\\n\\xe2\\x88\\x92A\\n1\\n)=abs(1\\xe2\\x88\\x922)=1 is divisible by\\n1.\\nFor\\ni=2:\\nabs(A\\n3\\n\\xe2\\x88\\x92A\\n2\\n)=abs(3\\xe2\\x88\\x921)=2 is divisible by\\n2.'",
        "286": "b\"Chef and Work\\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\\nChef has\\nN small boxes arranged on a line from\\n1 to\\nN. For each valid\\ni, the weight of the\\ni-th box is\\nW\\ni\\n. Chef wants to bring them to his home, which is at the position\\n0. He can hold any number of boxes at the same time; however, the total weight of the boxes he's holding must not exceed K at any time, and he can only pick the ith box if all the boxes between Chef's home and the ith box have been either moved or picked up in this trip.\\nTherefore, Chef will pick up boxes and carry them home in one or more round trips. Find the smallest number of round trips he needs or determine that he cannot bring all boxes home.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains two space-separated integers\\nN and\\nK.\\nThe second line contains\\nN space-separated integers\\nW\\n1\\n,W\\n2\\n,\\xe2\\x80\\xa6,W\\nN\\n.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 the smallest number of round trips or\\n\\xe2\\x88\\x921 if it is impossible for Chef to bring all boxes home.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N,K\\xe2\\x89\\xa410\\n3\\n1\\xe2\\x89\\xa4W\\ni\\n\\xe2\\x89\\xa410\\n3\\nfor each valid\\ni\\nSample 1:\\nInput\\nOutput\\n4\\n1 1 \\n2\\n2 4\\n1 1\\n3 6\\n3 4 2\\n3 6\\n3 4 3\\n-1\\n1\\n2\\n3\\nExplanation:\\nExample case 1: Since the weight of the box higher than\\nK, Chef can not carry that box home in any number of the round trip.\\nExample case 2: Since the sum of weights of both boxes is less than\\nK, Chef can carry them home in one round trip.\\nExample case 3: In the first round trip, Chef can only pick up the box at position\\n1. In the second round trip, he can pick up both remaining boxes at positions\\n2 and\\n3.\\nExample case 4: Chef can only carry one box at a time, so three round trips are required.\"",
        "287": "b'Hungry Chef\\nChef is very hungry. So, Chef goes to a shop selling burgers. The shop has\\n2 types of burgers:\\nNormal burgers, which cost\\nX rupees each\\nPremium burgers, which cost\\nY rupees each (where\\nY>X)\\nChef has\\nR rupees. Chef wants to buy exactly\\nN burgers. He also wants to maximize the number of premium burgers he buys. Determine the number of burgers of both types Chef must buy.\\nOutput\\n\\xe2\\x88\\x921 if it is not possible for Chef to buy\\nN burgers.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains four space-separated integers\\nX,\\nY,\\nN and\\nR \\xe2\\x80\\x94 the cost of a normal burger, the cost of a premium burger, the number of burgers Chef wants to buy and the amount of money Chef has.\\nOutput Format\\nFor each test case, output on a new line two integers: the number of normal burgers and the number of premium burgers Chef must buy satisfying the given conditions.\\nOutput\\n\\xe2\\x88\\x921 if he cannot buy\\nN burgers.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4X<Y\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n6\\n1\\xe2\\x89\\xa4R\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n4\\n2 10 4 12\\n4 8 10 50\\n99 100 5 10\\n9 10 10 200\\n4 0\\n8 2\\n-1\\n0 10\\nExplanation:\\nTest case\\n1: Chef has to buy\\n4 normal burgers only. Even if he buys\\n1 premium burger, he would not be able to buy\\n4 burgers.\\nTest case\\n2: Chef can buy\\n8 normal burgers and\\n2 premium burgers.\\nTest case\\n3: It is not possible for Chef to buy\\n5 burgers.'",
        "288": "b'Train Partner\\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\\nRahul and Rashi are off to the wedding of a close relative. This time they have to travel without their guardians. Rahul got very interested in the arrangement of seats inside the train coach.\\nThe entire coach could be viewed as an arrangement of consecutive blocks of size 8.\\nBerth Number    Compartment\\n1 -  8               1\\n9 - 16               2\\n17 - 24               3\\n... and so on\\nEach of these size-8 blocks are further arranged as:\\n 1LB,  2MB,  3UB,  4LB,  5MB,  6UB,  7SL,  8SU  \\n 9LB, 10MB, ...\\n ...   \\n ...\\nHere LB denotes lower berth, MB middle berth and UB upper berth.\\nThe following berths are called Train-Partners:\\n3UB   |  6UB  \\n2MB   |  5MB  \\n1LB   |  4LB  \\n7SL   |  8SU  \\nand the pattern is repeated for every set of 8 berths.\\nRahul and Rashi are playing this game of finding the train partner of each berth. Can you write a program to do the same?\\nInput\\nThe first line of input contains a single integer T, denoting the number of test cases to follow.\\nEach of the next T lines contain a single integer N, the berth number whose neighbor is to be found out.\\nOutput\\nThe output should contain exactly T lines each containing the berth of the neighbor of the corresponding seat.\\nConstraints\\nSubtasks\\nSubtask #1 (50 points):\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 8\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 8\\nSubtask #2 (50 points):\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 100\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 500\\nSample 1:\\nInput\\nOutput\\n3\\n1\\n5\\n3\\n4LB\\n2MB\\n6UB'",
        "289": "b\"Buy1-Get1\\nOne day Alice visited Byteland to purchase jewels for her upcoming wedding anniversary.\\nIn Byteland, every Jewelry shop has their own discount methods to attract the customers. One discount method called Buy1-Get1 caught Alice's attention. That is, Alice buys one jewel, then she can get one additional jewel with the same color without charge by Buy1-Get1.\\nAlice lists the needed jewels as a string S, each letter denotes one jewel, and the same letters denote the same colors of jewels, and the different letters denote the different colors of jewels. The cost of each jewel is 1. Your task is to calculate the minimum cost for getting all the jewels Alice listed.\\nInput\\nThe first line of input contains a single line T, which represents the number of test cases. Then T lines will follow, and each contains a string S, which represents the jewels Alice needed.\\nOutput\\nOutput the minimum cost for each test case.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 100\\n1 \\xe2\\x89\\xa4 |S| \\xe2\\x89\\xa4 200, where |S| represents the length of the string S.\\nThe string S is case sensitive, and will contain only English characters in the range [a-z], [A-Z].\\nSample 1:\\nInput\\nOutput\\n4\\nssss\\nssas\\nsa\\ns\\n2\\n3\\n2\\n1\\nExplanation:\\nIn the first sample case, Alice needs 4 jewel of color s. One of the optimal way is the following:\\nBuy the first s with cost 1, and she can get the second s without charge. Then buy the third s with cost 1, and she can get the last s without charge. In this case, she get 4 jewels with only cost 2.\\nIn the second sample case, Alice needs 3 jewels of color s and 1 jewel of color a. One of the optimal way is the following:\\nBuy the second s with cost 1, and she can get the last s without charge. Then buy the a and the first s with cost 2. In this case, she get 4 jewels with only cost 3.\\nIn the third and fourth sample cases, she cannot save her money by using Buy1-Get1.\"",
        "290": "b'Chef and Subarray\\nRead problems statements in Mandarin Chinese and Russian.\\nChef loves research! Now he is looking for subarray of maximal length with non-zero product.\\nChef has an array A with N elements: A1, A2, ..., AN.\\nSubarray Aij of array A is elements from index i to index j: Ai, Ai+1, ..., Aj.\\nProduct of subarray Aij is product of all its elements (from ith to jth).\\nInput\\nFirst line contains sinlge integer N denoting the number of elements.\\nSecond line contains N space-separated integers A1, A2, ..., AN denoting the elements of array.\\n  Output\\nIn a single line print single integer - the maximal length of subarray with non-zero product.\\n  Constraints\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 100000\\n0 \\xe2\\x89\\xa4 Ai \\xe2\\x89\\xa4 10000\\n  Sample 1:\\nInput\\nOutput\\n6\\n1 0 2 3 0 4\\n2\\nExplanation:\\nFor the first sample subarray is: {2, 3}.\\nSample 2:\\nInput\\nOutput\\n1\\n0\\n0\\nExplanation:\\nFor the second sample there are no subbarays with non-zero product.\\nSample 3:\\nInput\\nOutput\\n3\\n1 0 1\\n1\\nExplanation:\\nFor the third sample subbarays is {1}, (the first element, or the third one).'",
        "291": "b'Retrieve the Array\\nChef has an array\\nA of length\\nN.\\nLet\\nf(i) denote the sum\\nA\\n1\\n+A\\n2\\n+\\xe2\\x8b\\xaf+A\\ni\\nand let\\ng(i) denote the sum\\nA\\ni\\n+A\\ni+1\\n+\\xe2\\x8b\\xaf+A\\nN\\n.\\nChef creates another array\\nB of length\\nN such that\\nB\\ni\\n=f(i)+g(i) for all\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N.\\nNow, Chef has lost the original array\\nA and needs your help to recover it, given array\\nB. It is guaranteed that Chef has obtained the array\\nB from a valid array\\nA.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the size of the array\\nA.\\nThe second line of each test case contains\\nN space-separated integers\\nB\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nN\\ndenoting the array\\nB.\\nOutput Format\\nFor each testcase, output\\nN space separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\ndenoting the array\\nA.\\nNote that\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n5\\nmust hold for all\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N and it is guaranteed that a valid array\\nA that meets these constraints exists.\\nIf there are multiple answers, output any.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4B\\ni\\n\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n10\\nTh sum of\\nN over all test cases does not exceed\\n10\\n5\\n.\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n5\\nIt is guaranteed that a valid array\\nA always exists.\\nSample 1:\\nInput\\nOutput\\n4\\n1\\n6\\n3\\n7 8 9\\n4\\n13 15 13 14\\n2\\n25 20\\n3 \\n1 2 3 \\n2 4 2 3 \\n10 5\\nExplanation:\\nTest case 1: For\\nA=[3],\\nB=[6].\\nB\\n1\\n=f(1)+g(1)=3+3=6.\\nTest case 2: For\\nA=[1,2,3],\\nB=[7,8,9].\\nB\\n1\\n=f(1)+g(1)=\\n1\\n+\\n1+2+3\\n=7\\nB\\n2\\n=f(2)+g(2)=\\n1+2\\n+\\n2+3\\n=8\\nB\\n3\\n=f(3)+g(3)=\\n1+2+3\\n+\\n3\\n=9'",
        "292": "b'Convert to permutation\\nYou are given an array\\nA of size\\nN. In one operation, you can:\\nChoose an index\\ni\\n(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N) and increase\\nA\\ni\\nby\\n1.\\nFind the minimum number of operations required to convert the array\\nA into a permutation of size\\nN. If it is impossible to do so, print\\n\\xe2\\x88\\x921.\\nNote that a permutation of size\\nN contains each element from\\n1 to\\nN exactly once.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains the integer\\nN \\xe2\\x80\\x94 the size of the array.\\nThe next line contains\\nN space-separated integers, the elements of the array\\nA.\\nOutput Format\\nFor each test case, output on a new line, the minimum number of operations required to convert the array\\nA into a permutation of size\\nN.\\nIf it is impossible to do so, print\\n\\xe2\\x88\\x921.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4500\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\n0\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n4\\n4\\n3 1 1 2\\n3\\n0 3 3\\n3\\n3 2 1\\n3\\n2 0 1\\n3\\n-1\\n0\\n3\\nExplanation:\\nTest case\\n1: We can convert the array\\nA into a permutation using\\n3 operations:\\nOperation\\n1: Choose\\ni=3 and increase\\nA\\ni\\nby\\n1. Thus, the array becomes\\nA=[3,1,2,2].\\nOperation\\n2: Choose\\ni=3 and increase\\nA\\ni\\nby\\n1. Thus, the array becomes\\nA=[3,1,3,2].\\nOperation\\n3: Choose\\ni=3 and increase\\nA\\ni\\nby\\n1. Thus, the array becomes\\nA=[3,1,4,2].\\nIt can be shown that this is the minimum number of operations required to convert\\nA into a permutation.\\nTest case\\n2: The given array cannot be converted into a permutation using any number of operations.\\nTest case\\n3: The given array is already a permutation. Thus, we require\\n0 operations.\\nTest case\\n4: We can convert the array\\nA into a permutation using\\n3 operations:\\nOperation\\n1: Choose\\ni=1 and increase\\nA\\ni\\nby\\n1. Thus, the array becomes\\nA=[3,0,1].\\nOperation\\n2: Choose\\ni=2 and increase\\nA\\ni\\nby\\n1. Thus, the array becomes\\nA=[3,1,1].\\nOperation\\n3: Choose\\ni=3 and increase\\nA\\ni\\nby\\n1. Thus, the array becomes\\nA=[3,1,2].\\nIt can be shown that this is the minimum number of operations required to convert\\nA into a permutation.'",
        "293": "b'Ups and Downs\\nRead problems statements in Mandarin Chinese and Russian as well.\\nProblem description\\nYou will be given a zero-indexed array A. You need to rearrange its elements in such a way that the following conditions are satisfied:\\nA[i] \\xe2\\x89\\xa4 A[i+1] if i is even.\\nA[i] \\xe2\\x89\\xa5 A[i+1] if i is odd.\\nIn other words the following inequality should hold: A[0] \\xe2\\x89\\xa4 A[1] \\xe2\\x89\\xa5 A[2] \\xe2\\x89\\xa4 A[3] \\xe2\\x89\\xa5 A[4], and so on. Operations \\xe2\\x89\\xa4 and \\xe2\\x89\\xa5 should alter.\\nInput\\nThe first line contains a single integer T denoting the number of test cases. The first line of each test case contains an integer N, that is the size of the array A. The second line of each test case contains the elements of array A\\nOutput\\nFor each test case, output a single line containing N space separated integers, which are the elements of A arranged in the required order. If there are more than one valid arrangements, you can output any of them.\\nConstraints\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 100000\\nSum of N in one test file \\xe2\\x89\\xa4 600000\\n1 \\xe2\\x89\\xa4 A[i] \\xe2\\x89\\xa4 10^9\\nSample 1:\\nInput\\nOutput\\n2\\n2\\n3 2\\n3\\n10 5 2\\n2 3\\n2 10 5\\nExplanation:\\nExample case 1.\\nA[0] ? A[1] is satisfied, 2 ? 3.\\nExample case 2.\\nA[0] ? A[1] is satisfied, 2 ? 10.\\nA[1] ? A[2] is satisfied, 10 ? 5.\\nNote: 5 10 2 is also valid answer.'",
        "294": "b'Trace of Matrix\\nRead problems statements in Mandarin chinese and Vietnamese as well.\\nChef is learning linear algebra. Recently, he learnt that for a square matrix\\nM,\\ntrace(M) is defined as the sum of all elements on the main diagonal of\\nM (an element lies on the main diagonal if its row index and column index are equal).\\nNow, Chef wants to solve some excercises related to this new quantity, so he wrote down a square matrix\\nA with size\\nN\\xc3\\x97N. A square submatrix of\\nA with size\\nl\\xc3\\x97l is a contiguous block of\\nl\\xc3\\x97l elements of\\nA. Formally, if\\nB is a submatrix of\\nA with size\\nl\\xc3\\x97l, then there must be integers\\nr and\\nc (\\n1\\xe2\\x89\\xa4r,c\\xe2\\x89\\xa4N+1\\xe2\\x88\\x92l) such that\\nB\\ni,j\\n=A\\nr+i\\xe2\\x88\\x921,c+j\\xe2\\x88\\x921\\nfor each\\n1\\xe2\\x89\\xa4i,j\\xe2\\x89\\xa4l.\\nHelp Chef find the maximum trace of a square submatrix of\\nA.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN.\\nN lines follow. For each\\ni (\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N), the\\ni-th of these lines contains\\nN space-separated integers\\nA\\ni,1\\n,A\\ni,2\\n,\\xe2\\x80\\xa6,A\\ni,N\\ndenoting the\\ni-th row of the matrix\\nA.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x94 the maximum possible trace.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4A\\ni,j\\n\\xe2\\x89\\xa4100 for each valid\\ni,j\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n1\\n3\\n1 2 5\\n6 3 4\\n2 7 1\\n13\\nExplanation:\\nExample case 1: The submatrix with the largest trace is\\n6 3\\n2 7\\nwhich has trace equal to\\n6+7=13. (This submatrix is obtained for\\nr=2,c=1,l=2.)'",
        "295": "b\"Average Permutation\\nYou are given an integer\\nN.\\nFind a permutation\\nP=[P\\n1\\n,P\\n2\\n,\\xe2\\x80\\xa6,P\\nN\\n] of the integers\\n{1,2,\\xe2\\x80\\xa6,N} such that sum of averages of all consecutive triplets is minimized, i.e.\\ni=1\\n\\xe2\\x88\\x91\\nN\\xe2\\x88\\x922\\n3\\nP\\ni\\n+P\\ni+1\\n+P\\ni+2\\nis minimized.\\nIf multiple permutations are possible, print any of them.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case contains an integer N, the size of the permutation.\\nOutput Format\\nFor each test case, output on a new line a permutation which satisfies the above conditions.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n3\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nThe sum of\\nN over all test cases won't exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n2\\n4\\n3\\n3 2 1 4\\n3 2 1\\nExplanation:\\nTest case\\n1: The sum is\\n3\\nP\\n1\\n+P\\n2\\n+P\\n3\\n+\\n3\\nP\\n2\\n+P\\n3\\n+P\\n4\\n=\\n3\\n3+2+1\\n+\\n3\\n2+1+4\\n=6\/3+7\/3=4.333\\xe2\\x80\\xa6 Among all possible permutations of\\n{1,2,3,4}, this is one of the permutations which provides the minimum result.\\nTest case\\n2: The sum is\\n3\\n3+2+1\\n=6\/3=2. Every permutation of size\\n3 will have this value, hence it is the minimum possible.\"",
        "296": "b'Hotel Bytelandia\\nA holiday weekend is coming up, and Hotel Bytelandia needs to find out if it has enough rooms to accommodate all potential guests. A number of guests have made reservations. Each reservation consists of an arrival time, and a departure time. The hotel management has hired you to calculate the maximum number of guests that will be at the hotel simultaneously. Note that if one guest arrives at the same time another leaves, they are never considered to be at the hotel simultaneously (see the second example).\\nInput\\nInput will begin with an integer T, the number of test cases. Each test case begins with an integer N, the number of guests. Two lines follow, each with exactly N positive integers. The i-th integer of the first line is the arrival time of the i-th guest, and the i-th integer of the second line is the departure time of the i-th guest (which will be strictly greater than the arrival time).\\nOutput\\nFor each test case, print the maximum number of guests that are simultaneously at the hotel.\\nConstraints\\nT\\xe2\\x89\\xa4100\\nN\\xe2\\x89\\xa4100\\nAll arrival\/departure times will be between 1 and 1000, inclusive\\nSample 1:\\nInput\\nOutput\\n3\\n3\\n1 2 3\\n4 5 6\\n5\\n1 2 3 4 5\\n2 3 4 5 6\\n7\\n13 6 5 8 2 10 12\\n19 18 6 9 9 11 15\\n3\\n1\\n3'",
        "297": "b'Mighty Friend\\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\\nMotu and Tomu are very good friends who are always looking for new games to play against each other and ways to win these games. One day, they decided to play a new type of game with the following rules:\\nThe game is played on a sequence\\nA\\n0\\n,A\\n1\\n,\\xe2\\x80\\xa6,A\\nN\\xe2\\x88\\x921\\n.\\nThe players alternate turns; Motu plays first, since he\\'s earlier in lexicographical order.\\nEach player has a score. The initial scores of both players are\\n0.\\nOn his turn, the current player has to pick the element of\\nA with the lowest index, add its value to his score and delete that element from the sequence\\nA.\\nAt the end of the game (when\\nA is empty), Tomu wins if he has strictly greater score than Motu. Otherwise, Motu wins the game.\\nIn other words, Motu starts by selecting\\nA\\n0\\n, adding it to his score and then deleting it; then, Tomu selects\\nA\\n1\\n, adds its value to his score and deletes it, and so on.\\nMotu and Tomu already chose a sequence\\nA for this game. However, since Tomu plays second, he is given a different advantage: before the game, he is allowed to perform at most\\nK swaps in\\nA; afterwards, the two friends are going to play the game on this modified sequence.\\nNow, Tomu wants you to determine if it is possible to perform up to\\nK swaps in such a way that he can win this game.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains two space-separated integers\\nN and\\nK denoting the number of elements in the sequence and the maximum number of swaps Tomu can perform.\\nThe second line contains\\nN space-separated integers\\nA\\n0\\n,A\\n1\\n,\\xe2\\x80\\xa6,A\\nN\\xe2\\x88\\x921\\n.\\nOutput\\nFor each test case, print a single line containing the string \"YES\" if Tomu can win the game or \"NO\" otherwise (without quotes).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410,000\\n0\\xe2\\x89\\xa4K\\xe2\\x89\\xa410,000\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410,000 for each valid\\ni\\nSubtasks\\nSubtask #1 (20 points):\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\nSubtask #2 (80 points): original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n6 0\\n1 1 1 1 1 1\\n5 1\\n2 4 6 3 4\\nNO\\nYES\\nExplanation:\\nExample case 1: At the end of the game, both Motu and Tomu will have scores\\n1+1+1=3. Tomu is unable to win that game, so the output is \"NO\".\\nExample case 2: If no swaps were performed, Motu\\'s score would be\\n2+6+4=12 and Tomu\\'s score would be\\n4+3=7. However, Tomu can swap the elements\\nA\\n2\\n=6 and\\nA\\n3\\n=3, which makes Motu\\'s score at the end of the game equal to\\n2+3+4=9 and Tomu\\'s score equal to\\n4+6=10. Tomu managed to score higher than Motu, so the output is \"YES\".'",
        "298": "b\"Array Halves\\nChef has a permutation\\nP of length\\n2\\xe2\\x8b\\x85N. He can perform the following operation on\\nP:\\nSelect an index\\ni\\n(1\\xe2\\x89\\xa4i<2\\xe2\\x8b\\x85N) and swap\\nP\\ni\\nand\\nP\\ni+1\\n.\\nChef would call the permutation\\nP good, if the maximum element of the first half of\\nP is less than the minimum element of the second half of\\nP.\\nFormally\\n(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N)\\nmax\\nP\\ni\\n<\\n(N<i\\xe2\\x89\\xa42\\xe2\\x8b\\x85N)\\nmin\\nP\\ni\\n.\\nFind the minimum number of operations Chef needs to apply to make\\nP good.\\nNote: A permutation of length\\nN is an array where every integer from\\n1 to\\nN occurs exactly once.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 half the size of the permutation\\nP.\\nThe second line of each test case contains\\n2\\xe2\\x8b\\x85N space-separated integers\\nP\\n1\\n,P\\n2\\n,\\xe2\\x80\\xa6,P\\n2\\xe2\\x8b\\x85N\\ndenoting the permutation\\nP.\\nOutput Format\\nFor each test case, output the minimum number of operations required to make\\nP good.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nP is a permutation of length\\n2\\xe2\\x8b\\x85N\\nThe sum of\\nN over all test cases won't exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n2\\n3 2 1 4\\n3\\n1 2 3 4 5 6\\n3\\n6 5 4 3 2 1\\n2\\n0\\n9\\nExplanation:\\nTest case\\n1: We can perform the following operations:\\nApply operation at\\ni=1:\\n[3,2,1,4]\\xe2\\x86\\x92[2,3,1,4]\\nApply operation at\\ni=2:\\n[2,3,1,4]\\xe2\\x86\\x92[2,1,3,4]\\nTest case\\n2:\\nP is already good.\"",
        "299": "b'Bella ciao\\nRead problem statements in Vietnamese, Bengali, Mandarin Chinese, and Russian as well.\\nChef is planning a heist in the reserve bank of Chefland. They are planning to hijack the bank for\\nD days and print the money. The initial rate of printing the currency is\\nP dollars per day and they increase the production by\\nQ dollars after every interval of\\nd days. For example, after\\nd days the rate is\\nP+Q dollars per day, and after\\n2d days the rate is\\nP+2Q dollars per day, and so on. Output the amount of money they will be able to print in the given period.\\nInput\\nThe first line contains an integer\\nT, the number of test cases. Then the test cases follow.\\nEach test case contains a single line of input, four integers\\nD,d,P,Q.\\nOutput\\nFor each test case, output in a single line the answer to the problem.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4d\\xe2\\x89\\xa4D\\xe2\\x89\\xa410\\n6\\n1\\xe2\\x89\\xa4P,Q\\xe2\\x89\\xa410\\n6\\nSubtasks\\nSubtask #1 (15 points):\\nd\\xe2\\x89\\xa4D\\xe2\\x89\\xa4100\\nSubtask #2 (85 points): original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n2 1 1 1\\n3 2 1 1\\n5 2 1 2\\n3\\n4\\n13\\nExplanation:\\nTest Case\\n1:\\nOn the first day, the rate of production is\\n1 dollar per day so\\n1 dollar is printed on the first day.\\nOn the second day, the rate of production is\\n1+1=2 dollars per day so\\n2 dollars are printed on the second day.\\nThe total amount of money printed in\\n2 days is\\n1+2=3 dollars.\\nTest Case\\n2:\\nFor the first two days, the rate of production is\\n1 dollar per day so\\n1\\xe2\\x8b\\x852=2 dollars are printed on the first two days.\\nOn the third day, the rate of production is\\n1+1=2 dollars per day so\\n2 dollars are printed on the third day.\\nThe total amount of money printed in\\n3 days is\\n2+2=4 dollars.\\nTest Case\\n3:\\nFor the first two days, the rate of production is\\n1 dollar per day so\\n1\\xe2\\x8b\\x852=2 dollars are printed on the first two days.\\nOn the next two days, the rate of production is\\n1+2=3 dollars per day so\\n3\\xe2\\x8b\\x852=6 dollars are printed on the next two days.\\nOn the last day, the rate of production is\\n3+2=5 dollars per day so\\n5 dollars are printed on the last day.\\nThe total amount of money printed in\\n5 days is\\n2+6+5=13 dollars.'",
        "300": "b'Plusle and Minun on Array\\nChef has an array\\nA of length\\nN. He defines the alternating sum of the array as:\\nS=\\xe2\\x88\\xa3A\\n1\\n\\xe2\\x88\\xa3\\xe2\\x88\\x92\\xe2\\x88\\xa3A\\n2\\n\\xe2\\x88\\xa3+\\xe2\\x88\\xa3A\\n3\\n\\xe2\\x88\\xa3\\xe2\\x88\\x92\\xe2\\x88\\xa3A\\n4\\n\\xe2\\x88\\xa3+\\xe2\\x80\\xa6(\\xe2\\x88\\x921)\\nN\\xe2\\x88\\x921\\n\\xe2\\x8b\\x85\\xe2\\x88\\xa3A\\nN\\n\\xe2\\x88\\xa3\\nChef is allowed to perform the following operation on the array at most once:\\nChoose two indices\\ni and\\nj\\n(1\\xe2\\x89\\xa4i<j\\xe2\\x89\\xa4N) and swap the elements\\nA\\ni\\nand\\nA\\nj\\n.\\nFind the maximum alternating sum Chef can achieve by performing the operation at most once.\\nNote:\\n\\xe2\\x88\\xa3X\\xe2\\x88\\xa3 denotes the absolute value of\\nX. For example,\\n\\xe2\\x88\\xa3\\xe2\\x88\\x924\\xe2\\x88\\xa3=4 and\\n\\xe2\\x88\\xa37\\xe2\\x88\\xa3=7.\\nInput Format\\nThe first line will contain\\nT - the number of test cases. Then the test cases follow.\\nFirst line of each test case contains a single integer\\nN - size of the array\\nA.\\nSecond line of each test case contains\\nN space separated integers - denoting the elements of array\\nA.\\nOutput Format\\nFor each testcase, output in a single line, the maximum alternating sum Chef can obtain by performing the operation at most once.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n\\xe2\\x88\\x9210\\n9\\n\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nSum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n2\\n2\\n10 -10\\n7\\n-3 -2 -1 0 1 2 3\\n0\\n6\\nExplanation:\\nTest Case\\n1: One optimal way is to perform no operations. Thus the alternating sum is\\n\\xe2\\x88\\xa310\\xe2\\x88\\xa3\\xe2\\x88\\x92\\xe2\\x88\\xa3\\xe2\\x88\\x9210\\xe2\\x88\\xa3=10\\xe2\\x88\\x9210=0.\\nTest Case\\n2: One optimal way is to choose\\ni=2 and\\nj=5. After swapping, the array is\\n[\\xe2\\x88\\x923,1,\\xe2\\x88\\x921,0,\\xe2\\x88\\x922,2,3]. The alternating sum in this case is\\n\\xe2\\x88\\xa3\\xe2\\x88\\x923\\xe2\\x88\\xa3\\xe2\\x88\\x92\\xe2\\x88\\xa31\\xe2\\x88\\xa3+\\xe2\\x88\\xa3\\xe2\\x88\\x921\\xe2\\x88\\xa3\\xe2\\x88\\x92\\xe2\\x88\\xa30\\xe2\\x88\\xa3+\\xe2\\x88\\xa3\\xe2\\x88\\x922\\xe2\\x88\\xa3\\xe2\\x88\\x92\\xe2\\x88\\xa32\\xe2\\x88\\xa3+\\xe2\\x88\\xa33\\xe2\\x88\\xa3=6.'",
        "301": "b\"String Game\\nZlatan and Ramos are playing a game on a binary string\\nS of length\\nN.\\nZlatan and Ramos make alternating moves with Zlatan going first.\\nIn one move, a player will:\\nSelect an index\\ni\\n(1\\xe2\\x89\\xa4i<N) such that\\nS\\ni\\n\\xee\\x80\\xa0\\n=S\\ni+1\\nand delete both\\nS\\ni\\nand\\nS\\ni+1\\nfrom the string\\nS. Note that\\nN gets reduced by\\n2 when both characters are deleted. If a player cannot select any such index\\ni, he loses the game.\\nDetermine the winner of the game if both players play optimally.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the length of the binary string.\\nThe next line contains a binary string\\nS of length\\nN.\\nOutput Format\\nFor each test case, if Zlatan will win the game, output Zlatan. Otherwise, output Ramos.\\nYou can output each letter of the string in uppercase or lowercase. For example, Ramos, ramos, RAMOS, and rAmOS are all considered same.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n.\\nS consists of\\n0 and\\n1 only.\\nThe sum of\\nN over all test cases won't exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n5\\n1\\n0\\n2\\n11\\n2\\n10\\n3\\n111\\n3\\n101\\nRamos\\nRamos\\nZlatan\\nRamos\\nZlatan\\nExplanation:\\nTest case\\n1: Zlatan goes first and has no move to make. Thus, Ramos wins.\\nTest case\\n2: Zlatan goes first and has no move to make. Thus, Ramos wins.\\nTest case\\n3: Zlatan goes first and selects\\ni=1 where\\nS\\n1\\n\\xee\\x80\\xa0\\n=S\\n2\\n. Thus, he removes\\nS\\n1\\nand\\nS\\n2\\n.\\nSince the string is empty now, Ramos has no move to make and Zlatan wins.\\nTest case\\n4: Zlatan goes first and has no move to make. Thus, Ramos wins.\\nTest case\\n5: Zlatan goes first and selects\\ni=1 where\\nS\\n1\\n\\xee\\x80\\xa0\\n=S\\n2\\n. Thus, he removes\\nS\\n1\\nand\\nS\\n2\\n.\\nSince the string only has length\\n1 now, Ramos has no move to make and Zlatan wins.\"",
        "302": "b'Remove Element\\nYou are given an array\\nA=[A\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n] consisting of\\nN positive integers.\\nYou are also given a constant\\nK, using which you can perform the following operation on\\nA:\\nChoose two distinct indices\\ni and\\nj such that\\nA\\ni\\n+A\\nj\\n\\xe2\\x89\\xa4K, and remove either\\nA\\ni\\nor\\nA\\nj\\nfrom\\nA.\\nIs it possible to obtain an array consisting of only one element using several (possibly, zero) such operations?\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains two space-separated integers\\nN and\\nK.\\nThe second line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nOutput Format\\nFor each test case, print \"YES\" if it is possible to obtain an array consisting of only one element using the given operation, otherwise print \"NO\".\\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n3\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n,K\\xe2\\x89\\xa410\\n9\\nSum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n1 3\\n1\\n3 3\\n2 2 2\\n4 7\\n1 4 3 5\\nYES\\nNO\\nYES\\nExplanation:\\nTest case\\n1: The length of the array is already\\n1.\\nTest case\\n2: There is no way to delete an element from the given array.\\nTest case\\n3: One possible sequence of operations is:\\nChoose\\ni=1,j=4 and remove\\nA\\nj\\n=5. Hence the array becomes\\n[1,4,3].\\nChoose\\ni=2,j=3 and remove\\nA\\ni\\n=4. Hence the array becomes\\n[1,3].\\nChoose\\ni=1,j=2 and remove\\nA\\ni\\n=1. Hence the array becomes\\n[3], which is of length\\n1.'",
        "303": "b'Maximize Colours\\nFor the human eye, primary colours are red, green, and blue.\\nCombining\\n1 drop each of any two primary colours produces a new type of secondary colour. For example, mixing red and green gives yellow, mixing green and blue gives cyan, and, mixing red and blue gives magenta.\\nYou have\\nX,Y, and\\nZ drops of red, green, and blue colours respectively. Find the maximum total number of distinct colours (both primary and secondary) you can have at any particular moment.\\nNote: You cannot mix a secondary colour with a primary or another secondary colour to get a new type of colour.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of three space separated integers\\nX,Y, and\\nZ, the number of drops of red, green, and blue colours respectively.\\nOutput Format\\nFor each test case, output on a new line the maximum total number of colours (both primary and secondary) you can have using the given primary colours.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n0\\xe2\\x89\\xa4X,Y,Z\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n4\\n1 0 1\\n3 3 0\\n1 1 1\\n0 0 0\\n2\\n3\\n3\\n0\\nExplanation:\\nTest case\\n1: We have\\n1 drop each of red and blue colour. If we mix these colours, we will have magenta but no red or blue. Thus, to maximize the total number of colours, it is better that we keep the red and blue colours as it is. The maximum number of colours we can have is\\n2.\\nTest case\\n2: We have\\n3 drops each of red and green colour. We can use\\n1 drop each of red and green to have yellow. We still have\\n2 drops each of red and green left. Thus, we have\\n3 different types of colours now.\\nTest case\\n3: If we mix any two colours, we will loose two colours and get only one colour in return. Thus, it is best to keep all colours as it is and keep\\n3 different varieties of colours.\\nTest case\\n4: There are no types of colours available.'",
        "304": "b'Fit to Play\\nRayne Wooney has been one of the top players for his football club for the last few years. But unfortunately, he got injured during a game a few months back and has been out of play ever since.\\nHe\\'s got proper treatment and is eager to go out and play for his team again. Before doing that, he has to prove to his fitness to the coach and manager of the team. Rayne has been playing practice matches for the past few days. He\\'s played N practice matches in all.\\nHe wants to convince the coach and the manager that he\\'s improved over time and that his injury no longer affects his game. To increase his chances of getting back into the team, he\\'s decided to show them stats of any 2 of his practice games. The coach and manager will look into the goals scored in both the games and see how much he\\'s improved. If the number of goals scored in the 2nd game(the game which took place later) is greater than that in 1st, then he has a chance of getting in. Tell Rayne what is the maximum improvement in terms of goal difference that he can show to maximize his chances of getting into the team. If he hasn\\'t improved over time, he\\'s not fit to play. Scoring equal number of goals in 2 matches will not be considered an improvement. Also, he will be declared unfit if he doesn\\'t have enough matches to show an improvement.\\nNote: Large input data. Use faster I\/O methods. Prefer scanf,printf over cin\/cout.\\nInput Format\\nThe first line of the input contains a single integer\\nT, the number of test cases.\\nEach test case begins with a single integer\\nN, the number of practice matches Rayne has played.\\nThe next line contains\\nN integers. The\\ni\\nth\\ninteger,\\ng\\ni\\n, on this line represents the number of goals Rayne scored in his\\ni\\nth\\npractice match. The matches are given in chronological order i.e.\\nj>i means match number\\nj took place after match number\\ni.\\nOutput Format\\nFor each test case output a single line containing the maximum goal difference that Rayne can show to his coach and manager. If he\\'s not fit yet, print \"UNFIT\".\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100000\\n0\\xe2\\x89\\xa4g\\ni\\n\\xe2\\x89\\xa41000000 (Well, Rayne\\'s a legend! You can expect him to score so many goals!)\\nSample 1:\\nInput\\nOutput\\n3\\n6\\n3 7 1 4 2 4\\n5\\n5 4 3 2 1\\n5\\n4 3 2 2 3\\n4\\nUNFIT\\n1\\nExplanation:\\nIn the first test case, Rayne can choose the first and second game. Thus he gets a difference of 7-3=4 goals. Any other pair would give him a lower improvement. In the second test case, Rayne has not been improving in any match. Thus he\\'s declared UNFIT.'",
        "305": "b\"Equality\\nRead problems statements in Mandarin Chinese and Russian as well.\\nAn equation is an equality containing one or more variables. Solving the equation consists of determining which values of the variables make the equality true. In this situation, variables are also known as unknowns and the values which satisfy the equality are known as solutions. An equation differs from an identity in that an equation is not necessarily true for all possible values of the variable.\\nThere are many types of equations, and they are found in all areas of mathematics. For instance, a linear equation is an algebraic equation in which each term is either a constant or the product of a constant and (the first power of) a single variable.\\nIn this problem we'll consider quite a special kind of systems of linear equations. To be more specific, you are given a system of N linear equations of the following form:\\nx2 + x3 + ... + xN - 1 + xN = a1\\nx1 + x3 + ... + xN - 1 + xN = a2\\n...\\nx1 + x2 + ... + xN - 2 + xN = aN - 1\\nx1 + x2 + ... + xN - 2 + xN - 1 = aN\\nIn other words, i'th equation of the system consists of the sum of all the variable x1, ..., xN except xi to the left of the equality sign and the constant ai to the right of the equality sign.\\nOne can easily prove, that a system of linear equations as described above always have exactly one solution in case N is greater than one. Your task is to find the solution of the system(such a sequence x1, x2, ..., xN, that turns each of the equations into equality). It's guaranteed, that the solution of the system is a sequence consisting only of integers from the range [1, 108].\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\\nThe first line of the test case description contains one integer N denoting the number of equations in the system.\\nThe second line contains N integers a1, a2, ..., aN denoting the constants defining a system of linear equations, that you are asked to solve.\\nOutput\\nFor each test case, output a single line containing N integers: a sequence x1, x2, ..., xN, which is the solution of the system.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 25000\\n2 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 50000\\n1 \\xe2\\x89\\xa4 ai \\xe2\\x89\\xa4 5 \\xc3\\x97 1012\\n1 \\xe2\\x89\\xa4 xi \\xe2\\x89\\xa4 108\\nThe sum of all N in the input is not greater than 50000\\nSample 1:\\nInput\\nOutput\\n2\\n3\\n9 6 5\\n4\\n13 11 10 8\\n1 4 5 \\n1 3 4 6\\nExplanation:\\nIn the first test case, we can simply replace the variables with the values from the correct output to make sure, that all the conditions are satisfied:\\nx2 + x3 = 4 + 5 = 9 = a1\\nx1 + x3 = 1 + 5 = 6 = a2\\nx1 + x2 = 1 + 4 = 5 = a3\\nIn the second test case, we can repeat the same process to make sure, that all the conditions are satisfied:\\nx2 + x3 + x4 = 3 + 4 + 6 = 13 = a1\\nx1 + x3 + x4 = 1 + 4 + 6 = 11 = a2\\nx1 + x2 + x4 = 1 + 3 + 6 = 10 = a3\\nx1 + x2 + x3 = 1 + 3 + 4 = 8 = a4\"",
        "306": "b'Decreasing Srrnmieeda\\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\\nYou are given two integers\\nL and\\nR. Find the smallest non-negative integer\\nN such that\\nN%L>N%(L+1)>\\xe2\\x80\\xa6>N%(R\\xe2\\x88\\x921)>N%R.\\nHere,\\n% is the modulo operator, so\\nA%B is the remainder of\\nA after division by\\nB. For example,\\n11%3=2.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains two space-separated integers\\nL and\\nR.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 the smallest possible\\nN, or\\n\\xe2\\x88\\x921 if no solution exists.\\nIt is guaranteed that when a solution exists, the smallest solution does not exceed\\n10\\n18\\n.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4L<R\\xe2\\x89\\xa410\\n6\\nSample 1:\\nInput\\nOutput\\n2\\n4 6\\n1 2\\n6\\n-1\\nExplanation:\\nExample case 1:\\nN=6 satisfies the given condition, since\\n6%4(=2)>6%5(=1)>6%6(=0). Notice that\\nN=7 also satisfies the condition, but it is larger.\\nExample case 2: It is impossible to find a valid solution because for any non-negative integer\\nN, we have\\nN%1(=0)\\xe2\\x89\\xa4N%2.'",
        "307": "b'Parallel Processing\\nThere are\\nN tasks waiting in line to be executed. The execution time for the\\ni\\nth\\ntask is\\nA\\ni\\nseconds.\\nChef has two processors to execute these\\nN tasks. Both these processors work simultaneously. Each processor executes the assigned tasks one by one.\\nChef assigns a prefix of these tasks to the first processor and the remaining tasks to the second processor.\\nFor example, if there are\\n3 tasks, Chef can do one of the following:\\nAssign no task to the first processor. This means, the second processor will execute tasks\\n1,2 and\\n3.\\nAssign task\\n1 to the first processor. This means, the second processor will execute tasks\\n2 and\\n3.\\nAssign tasks\\n1 and\\n2 to the first processor. This means, the second processor will execute task\\n3.\\nAssign tasks\\n1,2 and\\n3 to the first processor. Thus, second processor would execute no tasks.\\nFind the minimum time in which all the tasks can be executed.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nThe first line of each test case contains a single integer\\nN, the number of tasks waiting to be executed.\\nThe second line of each test case contains\\nN space separated positive integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\ndenoting the execution time for each task.\\nOutput Format\\nFor each test case, output in a single line, the minimum time in which all tasks can be executed.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n5\\nThe sum of\\nN over all test cases is not more than\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n3\\n4 2 3\\n6\\n1 1 1 1 1 1\\n1\\n5\\n5\\n3\\n5\\nExplanation:\\nTest Case 1: Chef assigns task\\n1 to the first processor and tasks\\n2 and\\n3 to the second processor. The first processor takes\\n4 seconds to execute task\\n1. The second processor takes\\n2+3=5 seconds to execute tasks\\n2 and\\n3. Thus, atleast\\n5 seconds are required to execute all tasks.\\nTest Case 2: Chef assigns tasks\\n1,2 and\\n3 to the first processor. Processes\\n4,5 ad\\n6 are executed by second processor.\\nTest Case 3: Chef assigns task\\n1 to the first processor. No task is executed by second processor.'",
        "308": "b'Reversing directions\\nChef recently printed directions from his home to a hot new restaurant across the town, but forgot to print the directions to get back home. Help Chef to transform the directions to get home from the restaurant.\\nA set of directions consists of several instructions. The first instruction is of the form \"Begin on XXX\", indicating the street that the route begins on. Each subsequent instruction is of the form \"Left on XXX\" or \"Right on XXX\", indicating a turn onto the specified road.\\nWhen reversing directions, all left turns become right turns and vice versa, and the order of roads and turns is reversed. See the sample input for examples.\\nInput\\nInput will begin with an integer T, the number of test cases that follow. Each test case begins with an integer N, the number of instructions in the route. N lines follow, each with exactly one instruction in the format described above.\\nOutput\\nFor each test case, print the directions of the reversed route, one instruction per line. Print a blank line after each test case.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 15\\n2 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 40\\nEach line in the input will contain at most 50 characters, will contain only alphanumeric characters and spaces and will not contain consecutive spaces nor trailing spaces. By alphanumeric characters we mean digits and letters of the English alphabet (lowercase and uppercase).\\nSample 1:\\nInput\\nOutput\\n2\\n4\\nBegin on Road A\\nRight on Road B\\nRight on Road C\\nLeft on Road D\\n6\\nBegin on Old Madras Road\\nLeft on Domlur Flyover\\nLeft on 100 Feet Road\\nRight on Sarjapur Road\\nRight on Hosur Road\\nRight on Ganapathi Temple Road\\nBegin on Road D\\nRight on Road C\\nLeft on Road B\\nLeft on Road A\\nBegin on Ganapathi Temple Road\\nLeft on Hosur Road\\nLeft on Sarjapur Road\\nLeft on 100 Feet Road\\nRight on Domlur Flyover\\nRight on Old Madras Road\\nExplanation:\\nIn the first test case, the destination lies on Road D, hence the reversed route begins on Road D. The final turn in the original route is turning left from Road C onto Road D. The reverse of this, turning right from Road D onto Road C, is the first turn in the reversed route.'",
        "309": "b\"Full Barrier Alchemist\\nEdward Elric is chasing after Scar. To stop Edward, Scar creates\\nN barriers in the way, numbered from\\n1 to\\nN. Each barrier Scar created is either one of the following two types.\\nType 1 barrier - This barrier starts from a height\\nX above the ground and extends till the sky.\\nType 2 barrier - This barrier starts from the ground and extends up to height\\nX above the ground.\\nThe height of Edward is\\nH units and he has an alchemic life force of\\nL units. Moreover, he can duck by\\nY\\n1\\nunits and jump by height\\nY\\n2\\nunits (as explained in the figures). He starts crossing barriers in sequence, starting from barrier\\n1 till the barrier\\nN. Whenever he can't pass a barrier by ducking or jumping (considered passed even when the barrier just touches him), he uses Alchemy to break the barrier. However, this costs him a single unit of his alchemic life force.\\nIf after breaking a barrier no life force is left, Edward gets completely exhausted, unable to pass that barrier.\\nHow many barriers can Edward cross?\\nAnd remember never to call him a pipsqueak if his height is too short!\\nInput:\\nThe first line contains\\nT, the number of test cases. Then the test cases follow.\\nFor each test case, the first line contains five integers\\nN,\\nH,\\nY\\n1\\n,\\nY\\n2\\nand\\nL.\\nThe i-th of the next\\nN lines contains two integers\\nt\\ni\\nand\\nX\\ni\\nfor the\\ni\\nth\\nbarrier where\\nt\\ni\\n=1 denotes a Type 1 Barrier and\\nt\\ni\\n=2 denotes a Type 2 barrier.\\nOutput:\\nFor each test case print a single line containing the number of barriers Edward can pass.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n3\\n2\\xe2\\x89\\xa4H\\xe2\\x89\\xa410\\n3\\n1\\xe2\\x89\\xa4Y\\n1\\n<H\\n1\\xe2\\x89\\xa4Y\\n2\\n\\xe2\\x89\\xa410\\n3\\n1\\xe2\\x89\\xa4L\\xe2\\x89\\xa4N\\n1\\xe2\\x89\\xa4t\\ni\\n\\xe2\\x89\\xa42\\n1\\xe2\\x89\\xa4X\\ni\\n\\xe2\\x89\\xa410\\n3\\nSample 1:\\nInput\\nOutput\\n3\\n6 5 1 2 3\\n2 2\\n2 1\\n1 10\\n2 8\\n2 4\\n1 2\\n1 4 2 5 1\\n2 6\\n6 5 1 2 3\\n2 2\\n2 1\\n1 10\\n2 8\\n2 4\\n1 6\\n5\\n0\\n6\\nExplanation:\\nTest Case 1:\\nGiven\\nN=6,\\nH=5,\\nY\\n1\\n=1,\\nY\\n2\\n=2 and\\nL=3.\\nHe passes the first three barriers by either ducking or jumping. He uses alchemic life force for breaking\\n4\\nth\\n,\\n5\\nth\\nand\\n6\\nth\\nbarriers because he cannot pass them by either jumping or ducking. He gets exhausted after breaking the\\n6\\nth\\nbarrier and is unable to pass it. So, in total he passes\\n5 barriers.\"",
        "310": "b'Balanced and Unique Arrays\\nRead problem statements in Mandarin, Bengali, Russian, and Vietnamese as well.\\nFor a positive,\\neven integer\\nN, we call a pair of arrays\\nA and\\nB to be interesting if they satisfy the following conditions :\\n\\xe2\\x88\\xa3A\\xe2\\x88\\xa3=\\xe2\\x88\\xa3B\\xe2\\x88\\xa3=N\/2 i.e. the length of array\\nA is equal to the length of array\\nB.\\nEach integer from\\n1 to\\nN occurs exactly once in exactly one of the arrays.\\nThe\\ni\\nth\\nprefix sum of\\nA is not equal to\\ni\\nth\\nprefix sum of\\nB for all\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\/2\\xe2\\x88\\x921.\\nFormally,\\nj=1\\n\\xe2\\x88\\x91\\ni\\nA\\nj\\n!=\\nj=1\\n\\xe2\\x88\\x91\\ni\\nB\\nj\\nfor all\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\/2\\xe2\\x88\\x921\\nSum of all elements in\\nA is equal to sum of all elements in\\nB i.e.\\nj=1\\n\\xe2\\x88\\x91\\nN\/2\\nA\\nj\\n=\\nj=1\\n\\xe2\\x88\\x91\\nN\/2\\nB\\nj\\nYou are given a positive, even integer\\nN. If there exists an interesting pair of arrays, then print \"YES\" followed by an interesting pair for this given\\nN. If there exists multiple interesting pairs of arrays for given\\nN, you can print any. Print \"NO\" in a single line if no such pair exists.\\nInput Format\\nFirst line of input will contain\\nT, the number of test cases. Then the test cases follow.\\nEach test case contains a single line of input, the integer\\nN.\\nOutput Format\\nFor each test case, if there exists an interesting pair of arrays, say\\n(A,B), then in the first line print \"YES\", in the second line print array\\nA separated by spaces, and in third line print array\\nB separated by spaces. Print \"NO\" in a single line if no such pair exists. If there are multiple answers, print any of them.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nN is guaranteed to be even.\\nSum of\\nN over all test cases doesn\\'t exceed\\n10\\n6\\nSubtasks\\nSubtask 1 (100 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n2\\n4\\nNO\\nYES\\n1 4\\n2 3\\nExplanation:\\nTest case 2: Consider\\nA=[1,4] and\\nB=[2,3]. Every integer from\\n1 to\\n4 occurs exactly once in exactly one of the arrays. Also,\\n1st prefix sum of\\nA is not equal to\\n1st prefix sum of\\nB (\\n1\\n\\xee\\x80\\xa0\\n=2). And sum of the elements is equal to\\n5 for both arrays. So,\\n(A,B) is an interesting pair.'",
        "311": "b\"Maximum Angriness\\nAlice and Bob were playing a game yet again but this time, Bob already lost the game. Now he wants to take revenge.\\nBob saw a jigsaw puzzle which was solved by Alice and decided to jumble the puzzle pieces again. There are\\nN puzzle pieces in a line numbered from\\n1 to\\nN in increasing order and he has\\nK minutes before Alice catches him.\\nBob can swap any two pieces of the puzzle. Each swap takes\\n1 minute, and so Bob can make at most\\nK swaps.\\nLet\\nA\\ni\\ndenote the piece in the\\ni-th position after Bob finishes making his swaps.\\nAlice's angriness is defined to be the number of pairs\\n(i,j) such that\\n1\\xe2\\x89\\xa4i<j\\xe2\\x89\\xa4N and\\nA\\ni\\n>A\\nj\\n.\\nBob would like to make Alice as angry as possible, so he asks for your help: if he performs his swaps optimally, what is the maximum angriness he can achieve?\\nInput Format\\nThe first line of input contains an integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case contains two space-separated integers\\nN and\\nK: the number of pieces and the number of swaps Bob can make.\\nOutput Format\\nFor each test case, output on a new line a single integer: Alice's maximum possible angriness.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n9\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n4\\n7 3\\n1 4\\n8 2\\n5 3\\n21\\n0\\n22\\n10\\nExplanation:\\nTest case\\n1:\\nN=7, so the pieces are initially arranged as\\n[1,2,3,4,5,6,7]. Bob can make\\nK=3 swaps. One optimal way of swapping is as follows:\\nFirst, swap\\n2 and\\n6. Now the pieces are\\n[1,6,3,4,5,2,7]\\nNext, swap\\n1 and\\n7. Now the pieces are\\n[7,6,3,4,5,2,1]\\nFinally, swap\\n3 and\\n5. Now the pieces are\\n[7,6,5,4,3,2,1]\\nThe angriness of this sequence is\\n21, which is the maximum possible.\\nTest case\\n2:\\nN=1, so no swaps can be made. The answer is always\\n0.\"",
        "312": "b\"Permutation Xority\\nYou are given an integer\\nN. Construct a permutation\\nA of length\\nN which is attractive.\\nA permutation is called attractive if the bitwise XOR of all absolute differences of adjacent pairs of elements is equal to\\n0.\\nFormally, a permutation\\nA=[A\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n] of length\\nN is said to be attractive if:\\n\\xe2\\x88\\xa3A\\n1\\n\\xe2\\x88\\x92A\\n2\\n\\xe2\\x88\\xa3\\xe2\\x8a\\x95\\xe2\\x88\\xa3A\\n2\\n\\xe2\\x88\\x92A\\n3\\n\\xe2\\x88\\xa3\\xe2\\x8a\\x95\\xe2\\x80\\xa6\\xe2\\x8a\\x95\\xe2\\x88\\xa3A\\nN\\xe2\\x88\\x921\\n\\xe2\\x88\\x92A\\nN\\n\\xe2\\x88\\xa3=0\\nwhere\\n\\xe2\\x8a\\x95 denotes the bitwise XOR operation.\\nOutput any attractive permutation of length\\nN. If no attractive permutation exists, print\\n\\xe2\\x88\\x921 instead.\\nNote: A permutation of length\\nN is an array\\nA=[A\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n] such that every integer from\\n1 to\\nN occurs exactly once in\\nA. For example,\\n[1,2,3] and\\n[2,3,1] are permutations of length\\n3, but\\n[1,2,1],\\n[4,1,2], and\\n[2,3,1,4] are not.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nEach test case consists of a single line of input, containing one integer\\nN.\\nOutput Format\\nFor each test case, output on a single line an attractive permutation of\\nN integers, or\\n\\xe2\\x88\\x921 if no attractive permutation exists.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nSum of\\nN over all cases won't exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n2\\n3\\n6\\n3 2 1\\n5 2 3 6 4 1\\nExplanation:\\nTest Case\\n1:\\n\\xe2\\x88\\xa33\\xe2\\x88\\x922\\xe2\\x88\\xa3\\xe2\\x8a\\x95\\xe2\\x88\\xa32\\xe2\\x88\\x921\\xe2\\x88\\xa3=1\\xe2\\x8a\\x951=0\\nNote that there are other correct answers \\xe2\\x80\\x94 for example,\\n[1,2,3] would also be accepted as correct.\\nTest Case\\n2:\\n\\xe2\\x88\\xa35\\xe2\\x88\\x922\\xe2\\x88\\xa3\\xe2\\x8a\\x95\\xe2\\x88\\xa32\\xe2\\x88\\x923\\xe2\\x88\\xa3\\xe2\\x8a\\x95\\xe2\\x88\\xa33\\xe2\\x88\\x926\\xe2\\x88\\xa3\\xe2\\x8a\\x95\\xe2\\x88\\xa36\\xe2\\x88\\x924\\xe2\\x88\\xa3\\xe2\\x8a\\x95\\xe2\\x88\\xa34\\xe2\\x88\\x921\\xe2\\x88\\xa3=3\\xe2\\x8a\\x951\\xe2\\x8a\\x953\\xe2\\x8a\\x952\\xe2\\x8a\\x953=0\"",
        "313": "b\"Akash and Dinner\\nAkash got his money from CodeChef today, so he decided to have dinner outside.\\nHe went to a restaurant having\\nN items on the menu. The\\ni\\nth\\nitem on the menu belongs to the category\\nA\\ni\\nand requires\\nB\\ni\\ntime to be cooked.\\nAkash wants to have a complete meal. Thus, his meal should have at least\\nK distinct categories of food.\\nThe total time required to get all the food Akash orders, is the sum of the cooking time of all the items in the order.\\nHelp Akash find the minimum time required to have a complete meal or tell if it is not possible to do so.\\nInput Format\\nFirst line will contain\\nT, the number of test cases. Then the test cases follow.\\nEach test case contains three lines:\\nThe first line of each test case contains two space-separated integers\\nN and\\nK, denoting the number of dishes on the menu and the number of distinct categories in a complete meal.\\nThe second line contains\\nN space-separated integers where the\\ni\\nth\\ninteger is\\nA\\ni\\n, denoting the category of the\\ni\\nth\\ndish in the menu.\\nThe third line contains\\nN space-separated integers where the\\ni\\nth\\ninteger is\\nB\\ni\\n, denoting the time required to cook the\\ni\\nth\\ndish in the menu.\\nOutput Format\\nFor each test case, output in a single line, the minimum time required to have a complete meal.\\nIf it is impossible to have a complete meal, print\\n\\xe2\\x88\\x921 instead.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N,K\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n5\\n0\\xe2\\x89\\xa4B\\ni\\n\\xe2\\x89\\xa410\\n5\\nThe sum of\\nN over all test cases won't exceed\\n10\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n3 1\\n1 2 3\\n2 1 3\\n8 3\\n1 3 2 2 4 1 3 5\\n3 3 0 1 2 4 1 4\\n1 1\\n5\\n1\\n5 3\\n1 1 2 2 1\\n1 1 0 3 5\\n1\\n3\\n1\\n-1\\nExplanation:\\nTest case\\n1: Akash can choose dish with index\\n2 having category\\n2. The total time required to get the complete meal is\\n1.\\nTest case\\n2: Akash can choose dishes with index\\n3,5, and\\n7 from the menu.\\nDish\\n3: The dish has category\\n2 and requires time\\n0.\\nDish\\n5: The dish has category\\n4 and requires time\\n2.\\nDish\\n7: The dish has category\\n3 and requires time\\n1.\\nThus, there are\\n3 distinct categories and the total time to get the meal is\\n0+2+1=3. It can be shown that this is the minimum time to get the complete meal.\\nTest case\\n3: Akash can choose the only available dish having category\\n5. The total time required to get the complete meal is\\n1.\\nTest case\\n4: The total number of distinct categories available is\\n2, which is less than\\nK. Thus, it is impossible to have a complete meal.\"",
        "314": "b'HTML Tags\\nRead problem statements in Mandarin, Bengali, Russian, and Vietnamese as well.\\nIn addition to Competitive Programming, Chef recently developed an interest in Web Dev and started learning HTML. Now he wants to create his own HTML Code Editor. As a subproblem, he wants to check if a typed HTML closing tag has correct syntax or not.\\nA closing HTML tag must:\\nStart with \"<\/\"\\nEnd with \">\"\\nHave only lower-case alpha-numeric characters as its body (between \"<\/\" and \">\"). That is, each character of the body should either be a digit or a lower-case English letter.\\nHave a non-empty body.\\nHelp Chef by printing \"Success\" if the tag is fine. If not, print \"Error\".\\nInput Format\\nThe first line contains an integer\\nT, the number of test cases. Then\\nT test cases follow.\\nEach test case is a single line of input, a string describing the tag.\\nOutput Format\\nFor each test case, output in a single line, \"Success\" if it is a valid closing tag and \"Error\" otherwise (without quotes).\\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"SuccEss\", \"success\", \"Success\", \"SUCCESS\" etc. will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4\\nlength(Tag)\\n\\xe2\\x89\\xa41000\\nThe characters of the string belong to the ASCII range\\n[33,126] (note that this excludes space.)\\nSample 1:\\nInput\\nOutput\\n5 \\n<\/h1> \\nClearly_Invalid \\n<\/singlabharat> \\n<\/5> \\n<\/\/aA>\\nSuccess \\nError \\nSuccess\\nSuccess\\nError\\nExplanation:\\nTest Cases\\n1,3,4: The tags follow all mentioned constraints.\\nTest Case\\n2: The tag doesn\\'t contain opening and closing symbols and also includes characters other than lower-case alpha-numeric characters in its body.\\nTest Case\\n5: The tag also includes an upper-case alpha-numeric character \"A\" and a non alpha-numeric character \"\/\" in its body.'",
        "315": "b'Chef and Coins Game\\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\\nChef is playing a game with his friend Misha. They have a pile containg N coins. Players take alternate turns, removing some coins from the pile. On each turn, a player can remove either one coin or coins equal to some prime power (i.e. px coins, where p - prime number and x - positive integer). Game ends when the pile becomes empty. The player who can not make a move in his turn loses.\\nChef plays first. Your task is to find out who will win the game, provided that both of the player play optimally.\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\\nThe only line of each test case contains one integer N.\\nOutput\\nFor each test case, output a single line containing one word - the name of the winner of the game. Print \"Chef\" (without quotes) if Chef wins the game, print \"Misha\" (without quotes) otherwise.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 1000\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 109\\nSubtasks\\nSubtask #1 (20 points):\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 10\\nSubtask #2 (30 points):\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 104\\nSubtask #3 (50 points): No additional constraints.\\nSample 1:\\nInput\\nOutput\\n2\\n1\\n8\\nChef\\nChef\\nExplanation:\\nExample case 1. Chef will remove the only coin from the pile and will win the game.\\nExample case 2. Chef will remove all 8 coins from the pile and win the game. Chef can remove 8 coins because 8 is a prime power, as 8 = 23.'",
        "316": "b\"Make Array Odd\\nYou are given an array\\nA and an integer\\nX. You are allowed to perform the following operation on the array:\\nSelect two distinct indices\\ni and\\nj and set both\\nA\\ni\\nand\\nA\\nj\\nas\\n((A\\ni\\n\\xe2\\x8a\\x95A\\nj\\n)\\xe2\\x88\\xa3X) simultaneously. Here\\n\\xe2\\x8a\\x95 and\\n\\xe2\\x88\\xa3 denote the bitwise XOR and bitwise OR operations respectively.\\nFind the minimum number of operations required to make all elements of the array odd. If it is not possible to do so, print\\n\\xe2\\x88\\x921 instead.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains two space-separated integers\\nN, the size of the array and\\nX.\\nThe next line contains\\nN space-separated integers denoting the elements of the array\\nA.\\nOutput Format\\nFor each test case, output on a new line, the minimum number of operations required to make all elements of the array odd. If it is not possible to do so, print\\n\\xe2\\x88\\x921 instead.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n0\\xe2\\x89\\xa4X<2\\n30\\n0\\xe2\\x89\\xa4A\\ni\\n<2\\n30\\nThe sum of\\nN over all test cases won't exceed\\n10\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n2\\n3 6\\n5 7 9\\n5 4\\n2 3 4 17 9\\n0\\n2\\nExplanation:\\nTest case\\n1: All elements are already odd. Thus, the number of operation required will be\\n0.\\nTest case\\n2: We can make all elements odd using\\n2 operations -\\nIn first operation, we choose\\ni=1,j=5.\\nHere,\\n(A\\ni\\n\\xe2\\x8a\\x95A\\nj\\n)\\xe2\\x88\\xa3X=(2\\xe2\\x8a\\x959)\\xe2\\x88\\xa34=11\\xe2\\x88\\xa34=15. Thus, the new array becomes\\n[15,3,4,17,15].\\nIn second operation, we choose\\ni=4,j=3.\\nHere,\\n(A\\ni\\n\\xe2\\x8a\\x95A\\nj\\n)\\xe2\\x88\\xa3X=(17\\xe2\\x8a\\x954)\\xe2\\x88\\xa34=21\\xe2\\x88\\xa34=21. Thus, the new array becomes\\n[15,3,21,21,15].\\nAll elements of the array are odd now. It can be shown that we cannot achieve this in less than\\n2 operations.\"",
        "317": "b'Cutting Pizza\\nVasya has ordered a pizza delivery. The pizza can be considered a perfect circle. There were\\nn premade cuts in the pizza when it was delivered. Each cut is a straight segment connecting the center of the pizza with its boundary.\\nLet\\nO be the center of the pizza,\\nP\\ni\\nbe the endpoint of the\\ni-th cut lying on the boundary, and\\nR be the point of the boundary straight to the right of\\nO. Then the counterclockwise-measured angle\\n\\xe2\\x88\\xa0ROP\\ni\\nis equal to\\na\\ni\\ndegrees, where\\na\\ni\\nis an integer between\\n0 and\\n359. Note that angles between\\n0 and\\n180 angles correspond to\\nP\\ni\\nin the top half of the pizza, while angles between\\n180 and\\n360 angles correspond to the bottom half.\\nVasya may cut his pizza a few more times, and the new cuts still have to be straight segments starting at the center. He wants to make the pizza separated into several equal slices, with each slice being a circular sector with no cuts inside of it. How many new cuts Vasya will have to make?\\n###Input:\\nThe first line of input contains\\nT , i.e number of test cases per file.\\nThe first line of each test case contains a single integer\\nn\\xe2\\x88\\x92 the numbers of premade cuts (\\n2\\xe2\\x89\\xa4n\\xe2\\x89\\xa4360).\\nThe second lines contains\\nn integers\\na\\n1\\n,\\xe2\\x80\\xa6,a\\nn\\n\\xe2\\x88\\x92 angles of the cuts\\n1,\\xe2\\x80\\xa6,n respectively (\\n0\\xe2\\x89\\xa4a\\n1\\n<\\xe2\\x80\\xa6,a\\nn\\xe2\\x88\\x921\\n<360).\\n###Output: Print a single integer\\n\\xe2\\x88\\x92 the smallest number of additional cuts Vasya has to make so that the pizza is divided into several equal slices.\\n###Constraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa436\\n2\\xe2\\x89\\xa4n\\xe2\\x89\\xa4360\\n0\\xe2\\x89\\xa4a\\n1\\n<\\xe2\\x80\\xa6,a\\nn\\xe2\\x88\\x921\\n<360\\nSample 1:\\nInput\\nOutput\\n3\\n4 \\n0 90 180 270\\n2\\n90 210\\n2\\n0 1\\n0\\n1\\n358\\nExplanation:\\nIn the first sample the pizza is already cut into four equal slices.\\nIn the second sample the pizza will be cut into three equal slices after making one extra cut at\\n330 degrees.\\nIn the third sample Vasya will have to cut his pizza into\\n360 pieces of\\n1 degree angle each.'",
        "318": "b\"Counting Flags\\nRead problems statements in Mandarin Chinese and Russian as well.\\nMike is a famous traveler. He visits about 100 countries a year and buys the flag of each country he has been to.\\nMike knows, that there are some flags, that correspond to one pattern, but colored in different ways. E.g. the flag of Ireland(link) and the flag of Belgium(link). In this problem we consider only five 2,2cm\\xe2\\x9c\\x951,1cm patterns of flags:\\nThere are N different colors available to paint the flags and the colors are denoted by integers from 1 to N.\\nMike wants you to count the number of different well-painted flags. We call a flag well-painted if it's made according to the following algorithm:\\nPick up one of the flag patterns considered above;\\nPaint each one-colored polygon on the pattern in a color encoded by an integer from 1 to N. Different colors are encoded with different integers. If two different one-colored polygons share a common side(not corner), than they must be painted in different colors. In any other case they can be painted in both equal and different colors.\\nTwo flags are different, if they look different(have at least one pixel painted with different color).\\nHelp Mike!\\nText version of the pictures:\\nPicture 1\\n112233\\n\\n112233\\n\\n112233\\n111111\\n\\n222222\\n\\n333333\\n112222\\n\\n112222\\n\\n113333\\n122223\\n\\n111333\\n\\n144443\\n111222\\n\\n333222\\n\\n333444\\nPicture 2\\n112211\\n\\n112211\\n\\n112211\\n221122\\n\\n221122\\n\\n221122\\n111111\\n\\n222222\\n\\n111111\\n222222\\n\\n111111\\n\\n222222\\nInput\\nThe first line of the input contains integer T, denoting the number of testcases. The description of T testcases follows.\\nThe only line of each test case contains integer N, denoting the number of different colors, that can be used while painting a flag pattern.\\n  Output\\nFor each testcase, output a single line containing an integer - the answer for the corresponding query.\\n  Constraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 10 000;\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 10 000 for each testcase.\\n  Sample 1:\\nInput\\nOutput\\n3\\n1\\n2\\n3\\n0\\n4\\n42\\nExplanation:\\nThere are four different well-painted flags for N = 2 different colors :\"",
        "319": "b'Control the Pollution\\nThere are two types of vehicles in Chefland.\\nBus which has a capacity of\\n100 people.\\nCar which has a capacity of\\n4 people.\\nThere are\\nN people who want to travel from place\\nA to place\\nB. You know that a single bus emits\\nX units of smoke while a single car emits\\nY units of smoke in their journey from\\nA to\\nB.\\nYou want to arrange some buses and cars to carry all these\\nN people such that total smoke emitted is minimized. Output the minimized smoke value.\\nInput Format\\nFirst line will contain\\nT, the number of test cases. Then the test cases follow.\\nEach test case contains three integers\\nN,\\nX,\\nY - the number of people who want to travel, the units of smoke emitted by a bus and the units of smoke emitted by a car respectively.\\nOutput Format\\nFor each test case, output the minimum units of smoke emitted in transporting the\\nN people.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n3\\n9 40 8\\n15 20 20\\n105 80 10\\n24\\n20\\n100\\nExplanation:\\nTest case-1: In the optimal case, we will use\\n3 cars where the\\n1-st and\\n2-nd car will carry\\n4 people each and the\\n3-rd car will carry\\n1 person.\\nTherefore smoke emitted\\n=3\\xc3\\x978=24 units.\\nTest case-2: In the optimal case, we will use\\n1 bus to carry all the\\n15 people.\\nTherefore smoke emitted\\n=1\\xc3\\x9720=20 units.\\nTest case-3: In the optimal case, we will use\\n1 bus to carry\\n100 people and use\\n2 cars to carry the remaining\\n5 people.\\nTherefore smoke emitted\\n=1\\xc3\\x9780+2\\xc3\\x9710=100 units.'",
        "320": "b'Yet another SOD problem\\nRead problem statements in Mandarin, Bengali, Russian, and Vietnamese as well.\\nUjan is a software developer. He is developing a software that takes two integers\\nL and\\nR and outputs the count of integers in the sequence\\nL,L+1,\\xe2\\x80\\xa6,R\\xe2\\x88\\x921,R whose sum of digits (SOD) is divisible by\\n3.\\nHe has developed the user interface (UI) quite easily. He is having a hard time finding the logic to solve the problem. As you are not only a good friend of Ujan but also a good problem solver, he asks you to help him out.\\nCan you solve the problem for your friend, Ujan?\\nInput Format\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe only line of each test case contains two integer\\nL,R.\\nOutput Format\\nFor each test case, print a single line containing one integer equal to the count of of integers in the sequence, whose sum of digits is divisible by\\n3 .\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4L\\xe2\\x89\\xa4R\\xe2\\x89\\xa410\\n18\\nSubtasks\\nSubtask\\n1 (\\n100 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n5\\n139 141\\n100 1235\\n1000 2537\\n998244353 1000000007\\n27182818284 31415926535897\\n1\\n378\\n512\\n585218\\n10462914572538\\nExplanation:\\nTest case 1: The numbers are\\n139,\\n140 and\\n141. Their sum of digits is\\n13,\\n5 and\\n6 respectively. So, only\\n141 is the number that has its sum of digits divisible by\\n3.'",
        "321": "b'Triangle Classification\\nRead problems statements in Mandarin Chinese , Russian and Vietnamese as well.\\nTriangle classification is an important problem in modern mathematics. Mathematicians have developed many criteria according to which a triangle can be classified. In this problem, you will be asked to classify some triangles according to their sides and angles.\\nAccording to their measure, angles may be:\\nAcute \\xe2\\x80\\x94 an angle that is less than 90 degrees\\nRight \\xe2\\x80\\x94 a 90-degrees angle\\nObtuse \\xe2\\x80\\x94 an angle that is greater than 90 degrees\\nAccording to their sides, triangles may be:\\nScalene \\xe2\\x80\\x94 all sides are different\\nIsosceles \\xe2\\x80\\x94 exactly two sides are equal\\nAccording to their angles, triangles may be:\\nAcute \\xe2\\x80\\x94 all angles are acute\\nRight \\xe2\\x80\\x94 one angle is right\\nObtuse \\xe2\\x80\\x94 one angle is obtuse\\nTriangles with three equal sides (equilateral triangles) will not appear in the test data.\\nThe triangles formed by three collinear points are not considered in this problem. In order to classify a triangle, you should use only the adjactives from the statement. There is no triangle which could be described in two different ways according to the classification characteristics considered above.\\nInput\\nThe first line of input contains an integer SUBTASK_ID denoting the subtask id this input belongs to.\\nThe second line of input contains an integer T denoting the number of test cases. The description of T test cases follows.\\nThe only line of each test case contains six integers x1, y1, x2, y2, x3 and y3 denoting Cartesian coordinates of points, that form the triangle to be classified.\\nIt is guaranteed that the points are non-collinear.\\nOutput\\nFor each test case, output a single line containing the classification of the given triangle.\\nIf SUBTASK_ID equals 1, then the classification should follow the \"<Side classification starting with a capital letter> triangle\" format.\\nIf SUBTASK_ID equals 2, then the classification should follow the \"<Side classification starting with a capital letter> <angle classification> triangle\" format.\\nPlease, check out the samples section to better understand the format of the output.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 60\\n|xi|, |yi| \\xe2\\x89\\xa4 100\\nSubtask 1 (50 points): no additional constraints\\nSubtask 2 (50 points): no additional constraints\\nNote\\nThe first test of the first subtask and the first test of the second subtask are the example tests (each in the corresponding subtask). It\\'s made for you to make sure that your solution produces the same verdict both on your machine and our server.\\nTip\\nConsider using the following condition in order to check whether two floats or doubles A and B are equal instead of traditional A == B: |A - B| < 10-6.\\nSample 1:\\nInput\\nOutput\\n1\\n2\\n0 0 1 1 1 2\\n3 0 0 4 4 7\\nScalene triangle\\nIsosceles triangle\\nSample 2:\\nInput\\nOutput\\n2\\n6\\n0 0 4 1 1 3\\n0 0 1 0 1 2\\n0 0 1 1 1 2\\n0 0 2 1 1 2\\n3 0 0 4 4 7\\n0 0 2 1 4 0\\nScalene acute triangle\\nScalene right triangle\\nScalene obtuse triangle\\nIsosceles acute triangle\\nIsosceles right triangle\\nIsosceles obtuse triangle'",
        "322": "b'Chef and Adventures\\n###Read problems statements Hindi ,Bengali , Mandarin chinese , Russian and Vietnamese as well.\\nMysterious Chefland... Recently, Chef realised that Discuss, the educational system of Chefland, is out of date. Therefore, he is trying to find ways to update the infrastructure in the country. One possible way is to move all materials from Discuss to Discourse.\\nChef will have access to Discourse if his knowledge and power become exactly equal to\\nN and\\nM respectively. Initially, he has power\\n1 and knowledge\\n1.\\nChef can perform actions of the following types to improve his skills:\\nsolve a problem \\xe2\\x80\\x94 increase his knowledge by\\nX\\ndo a push-up \\xe2\\x80\\x94 increase his power by\\nY\\ninstall ShareChat to keep in touch with friends \\xe2\\x80\\x94 increase both knowledge and power by\\n1\\nChef can only install ShareChat at most once. The remaining actions may be performed any number of times and the actions may be performed in any order.\\nHelp Chef find out whether it is possible to move from Discuss to Discourse.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains four space-separated integers\\nN,\\nM,\\nX and\\nY.\\nOutput\\nFor each test case, print a single line containing the string \"Chefirnemo\" if it is possible to reach the required knowledge and power or \"Pofik\" if it is impossible.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41,000\\n1\\xe2\\x89\\xa4N,M,X,Y\\xe2\\x89\\xa410\\n9\\nSubtasks\\nSubtask #1 (30 points):\\n1\\xe2\\x89\\xa4N,M,X,Y\\xe2\\x89\\xa4100\\nSubtask #2 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n5\\n2 2 1 2\\n11 10 5 9\\n11 11 5 9\\n12 11 5 9\\n1 2 1 100\\nChefirnemo\\nChefirnemo\\nPofik\\nChefirnemo\\nPofik\\nExplanation:\\nExample case 2: We add\\nY=9 once to the power to get power\\n10. We add\\nX=5 twice to the knowledge to get knowledge\\n11.\\nExample case 3: We can see that it is impossible to reach power\\nM=11 no matter which or how many operations we do. Note that the ShareChat operation will increase both knowledge and power by\\n1, and hence it will still be impossible to attain the given values of knowledge and power at the same time.\\nExample case 4: We can reach knowledge\\n11 and power\\n10 like in example case 2, the only difference is that we also use the ShareChat operation to increase both by\\n1.'",
        "323": "b\"Magical Planks\\nRyan is a boy from a small town, who has been given a task by his father. He has\\nN wooden planks, numbered from\\n1 to\\nN, which are colored either black or white.\\nHis task is to color all planks the same color! But there is some magic in the winds of his small town. Whenever he colors the\\ni\\nth\\n( plank which has the color\\nS\\ni\\n) to a color\\nP then following events happen:\\nif\\n2\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N and\\nS\\ni\\n=S\\ni\\xe2\\x88\\x921\\n, then color of\\n(i\\xe2\\x88\\x921)\\nth\\nplank changes to\\nP.\\nif\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\xe2\\x88\\x921 and\\nS\\ni\\n=S\\ni+1\\n, then color of\\n(i+1)\\nth\\nplank changes to\\nP.\\nNow this process continues for the newly colored planks also. If none of the neighbors have same color, then nothing happens to the neighbors.\\nSuppose Ryan has planks which have their coloring :\\nBBWWWB If Ryan colors the fourth plank( whose color is\\nW ) to color\\nB, then the finally the planks would be colored as following:\\nBBBBBB\\nRyan can choose any one of the\\nN planks and change its color as many times as he wants. Determine the minimum number of times Ryan has to paint a plank such that all planks get the same color at the end.\\nInput Format\\nFirst line will contain\\nT, number of testcases. Then the testcases follow.\\nThe first line of each test case consists of an integer\\nN the number of planks\\nSecond line of each test case consists of a string\\nS of size\\nN,where the\\ni th character denotes the color of plank\\ni\\nOutput Format\\nFor each testcase, output a single integer denoting the minimum number of times Ryan has to paint a single plank such that all planks get the same color at the end.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nS consists only of characters\\nB and\\nW\\nThe sum of\\nN over all cases doesn't exceed\\n10\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n6\\nBBWWWB\\n5\\nWWBWB\\n2\\nBB\\n9\\nWWBBBBBWW\\n1\\n2\\n0\\n1\\nExplanation:\\nTest case 1: The first test case is already described in the question.\\nTest case 2: Ryan can paint the third plank to\\nW. After doing so the color string of planks become\\nWWWWB. Then he can again paint the third plank to the color\\nB. After doing so the string goes through following transitions:\\nThe color of third plank changes to\\nB. ( The string becomes\\nWWBWB )\\nThe color of second and fourth plank changes to\\nB. ( The string becomes\\nWBBBB )\\nThe color of first plank changes to\\nB. ( The string becomes\\nBBBBB )\\nFinally, all planks have same color.\\nTest case 3: All planks have the same color.\\nTest case 4: Ryan can paint any of the planks numbered from\\n3 to\\n7 to\\nW, and all these planks will be colored to\\nW!\"",
        "324": "b'Approximately II\\nRead problems statements in Mandarin Chinese and Russian.\\nYou are given an array of N integers a1, a2, ..., aN and an integer K. Find the number of such unordered pairs {i, j} that\\ni \\xe2\\x89\\xa0 j\\n|ai + aj - K| is minimal possible\\nOutput the minimal possible value of |ai + aj - K| (where i \\xe2\\x89\\xa0 j) and the number of such pairs for the given array and the integer K.\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\\nThe first line of each test case consists of two space separated integers - N and K respectively.\\nThe second line contains N single space separated integers - a1, a2, ..., aN respectively.\\nOutput\\nFor each test case, output a single line containing two single space separated integers - the minimal possible value of |ai + aj - K| and the number of unordered pairs {i, j} for which this minimal difference is reached.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 50\\n1 \\xe2\\x89\\xa4 ai, K \\xe2\\x89\\xa4 109\\nN = 2 - 31 point.\\n2 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 1000 - 69 points.\\n  Sample 1:\\nInput\\nOutput\\n1 \\n4 9\\n4 4 2 6\\n1 4\\nExplanation:\\nThe minimal possible absolute difference of 1 can be obtained by taking the pairs of a1 and a2, a1 and a4, a2 and a4, a3 and a4.'",
        "325": "b'Magic Set\\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\\nKatya has a sequence of integers\\na\\n1\\n,a\\n2\\n,\\xe2\\x80\\xa6,a\\nn\\nand an integer\\nm.\\nShe defines a good sequence of integers as a non-empty sequence such that the sum of the elements in each of its non-empty subsequences is divisible by\\nm.\\nKatya wants to know the number of good subsequences of the sequence\\na. Can you help her?\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains two space-separated integers\\nn and\\nm.\\nThe second line contains\\nn space-separated integers\\na\\n1\\n,a\\n2\\n,\\xe2\\x80\\xa6,a\\nn\\n.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x94 the number of good subsequences.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41,000\\n1\\xe2\\x89\\xa4n\\xe2\\x89\\xa430\\n1\\xe2\\x89\\xa4m\\xe2\\x89\\xa41,000\\n1\\xe2\\x89\\xa4a\\ni\\n\\xe2\\x89\\xa41,000 for each valid\\ni\\nSubtasks\\nSubtask #1 (30 points):\\n1\\xe2\\x89\\xa4n\\xe2\\x89\\xa45\\nSubtask #2 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n2 3\\n1 2\\n2 3\\n1 3\\n0\\n1\\nExplanation:\\nExample case 1: There are no good subsequences.\\nExample case 2: There is exactly one good subsequence of\\na:\\n[3].'",
        "326": "b'Chef and Three Dogs\\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\\nChef has three dogs sitting at the vertices of an equilateral triangle. The length of each side of the triangle equals to s meters. Chef gives the command \"Start!\" and each dog starts to run with constant speed v meters per second. At each moment, each dog is running towards the dog just right to him (in counter-clockwise direction). Therefore, their trajectories are forming some spirals that converging to one point as illustrated below.\\nHow long does it takes dogs to meet each other after the command \"Start!\"?\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\\nThe only line of each test case contains two space-separated integers s and v.\\nOutput\\nFor each test case, output a single line containing a real number corresponding to the answer of the problem. The answer will be considered correct if its absolute or relative error does not exceed 10-6.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 10\\n1 \\xe2\\x89\\xa4 s, v \\xe2\\x89\\xa4 109\\nSubtasks\\nSubtask #1 (40 points): 1 \\xe2\\x89\\xa4 s, v \\xe2\\x89\\xa4 10\\nSubtask #2 (60 points): original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n2 5\\n1 1000000000\\n0.266667\\n0.0000001\\nExplanation:\\nDue to the triangle being very small, but the dogs running extremely fast, they will meet after less than 1e-6 seconds. Thus, due to remark about absolute or relative error in the output section, any answer within [0, 1e-6] will be considered correct.'",
        "327": "b'Order by XOR\\nYou are given three distinct integers\\nA,B, and\\nC.\\nFind any integer\\nX (0\\xe2\\x89\\xa4X<2\\n30\\n) such that:\\n(A\\xe2\\x8a\\x95X)<(B\\xe2\\x8a\\x95X)<(C\\xe2\\x8a\\x95X), where\\n\\xe2\\x8a\\x95 denotes the Bitwise XOR operation.\\nIf no such\\nX exists, print\\n\\xe2\\x88\\x921 instead.\\nInput Format\\nThe first line of the input contains a single integer\\nT, the number of test cases.\\nThe first and only line of each test case contains three space-separated integers\\nA,B, and\\nC.\\nOutput Format\\nFor each test case, output a single integer on a new line, the value of\\nX that satisfies the above conditions or\\n\\xe2\\x88\\x921 if no such\\nX exists.\\nIf multiple such\\nX satisfy the condition, you may print any.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A,B,C<2\\n30\\nA,B,C are distinct.\\nSample 1:\\nInput\\nOutput\\n3\\n1 2 3\\n3 1 2\\n3 2 1\\n4\\n-1\\n3\\nExplanation:\\nTest case\\n1: For\\nX=4,\\nA\\xe2\\x8a\\x95X=1\\xe2\\x8a\\x954 =5\\nB\\xe2\\x8a\\x95X=2\\xe2\\x8a\\x954 =6\\nC\\xe2\\x8a\\x95X=3\\xe2\\x8a\\x954 =7\\nThus,\\n(A\\xe2\\x8a\\x95X)<(B\\xe2\\x8a\\x95X)<(C\\xe2\\x8a\\x95X).\\nTest case\\n2: No\\nX (0\\xe2\\x89\\xa4X<2\\n30\\n) exists that satisfies the above conditions.\\nTest case\\n3: For\\nX=3,\\nA\\xe2\\x8a\\x95X=3\\xe2\\x8a\\x953 =0\\nB\\xe2\\x8a\\x95X=2\\xe2\\x8a\\x953 =1\\nC\\xe2\\x8a\\x95X=1\\xe2\\x8a\\x953 =2\\nThus,\\n(A\\xe2\\x8a\\x95X)<(B\\xe2\\x8a\\x95X)<(C\\xe2\\x8a\\x95X).'",
        "328": "b'Chef and Numbers\\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\\nChef likes problems related to numbers a lot. He is generally quite good at solving these kinds of problems, but today he got stuck at one number theory problem, and so he asks your help to solve it.\\nGiven a positive integer N, find out how many positive integers X satisfy the equation X + S(X) + S(S(X)) = N, where S(X) denoting sum of digits of X in decimal (base 10) representation.\\nInput\\nThe only line of the input contains one integer number - N.\\nOutput\\nOutput single integer in a line denoting the count of number of positive integers X satisfying the above given equation.\\nConstraints\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 109\\nSample 1:\\nInput\\nOutput\\n6\\n1\\nExplanation:\\nExample 1. Only one positive integer X = 2 satisfies the equation X + S(X) + S(S(X)) = 6, as X + S(X) + S(S(X)) = 2 + 2 + 2 = 6.\\nSample 2:\\nInput\\nOutput\\n9939\\n4\\nExplanation:\\nExample 2.X can be 9898, 9907, 9910 and 9913.\\n9898 + S(9898) + S(S(9898)) = 9898 + 34 + 7 = 9939\\n9907 + S(9907) + S(S(9907)) = 9907 + 25 + 7 = 9939\\n9910 + S(9910) + S(S(9910)) = 9910 + 19 + 10 = 9939\\n9913 + S(9913) + S(S(9913)) = 9913 + 22 + 4 = 9939\\nYou can verify that there is not other positive value of X satisfying the given equation.'",
        "329": "b\"Majin Vegeta\\nBabidi has summoned Majin Vegeta. He orders him to kill Supreme Kai. But Vegeta wants to get out of his control.\\nBabidi has laid out a trap. Vegeta is standing at the\\nnth level of mind control. In order to defeat Babidi's trap, he needs to reach\\nmth level. The levels are continuous increasing integers. At each increment of level,\\nnth to\\n(n+1)th level, for example, the energy used is - number of distinct prime factors of\\nn.\\nVegeta needs your help in order to figure out how much total minimum energy he needs to defeat Babidi's trap. The total energy is the sum of energy used at each increment of a level.In the calculation of energy,\\nn and\\nm are inclusive.\\n###Input:\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follow.\\nThe first and only line of each test case contains the two integers\\nn and\\nm, separated by a single space.\\n###Output: For each test case, print a single line containing one integer denoting the energy needed by Vegeta to escape Babidi's mind control and continue his battle with Kakarot.\\n###Constraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42\\n1\\xe2\\x89\\xa4n\\xe2\\x89\\xa4m\\xe2\\x89\\xa410\\n6\\nSample 1:\\nInput\\nOutput\\n2\\n3 7\\n1 1023\\n5\\n2177\\nExplanation:\\nExample case 1: Vegeta is standing at\\nn=3. As he moves from 3 to 4, energy used is 1. From 4 to 5, energy used is 1. Similarly, as he continues to move towards m=7, the total energy used is 1+1+1+2=5.\"",
        "330": "b\"Digital clock\\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\\n3:33\\nIt's possible for all the digits displayed on a digital clock in the hours:minutes format to be identical. The time shown above (3:33) is an example of such a situation. Other examples are 2:2 and 1:11. Note that the digits of 33:33 are identical, but it is not a valid time on a usual digital clock.\\nThe above example was for a usual 24-hour format digital clock. Let's consider a more general clock, where an hour lasts M minutes and a day lasts H hours (therefore, the clock can show any number of hours between 0 and H-1, inclusive, and any number of minutes between 0 and M-1, inclusive). Both the hours and the minutes are shown without leading zeroes in decimal notation and their separator (e.g., ':') doesn't matter.\\nCan you tell how many minutes during a day will the digital clock have identical digits displayed on it?\\nInput\\nThe first line of the input contains an integer T - the number of test cases.\\nEach of the next T lines contains two space-separated integers H and M for one test case.\\nOutput\\nFor each test case, output a single line corresponding to the answer of the problem.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 50\\n1 \\xe2\\x89\\xa4 H, M \\xe2\\x89\\xa4 100\\nSample 1:\\nInput\\nOutput\\n6\\n24 60\\n34 50\\n10 11\\n10 12\\n11 11\\n1 1\\n19\\n20\\n10\\n11\\n10\\n1\\nExplanation:\\nExample case 1. A clock shows two identical digits at times 0:0, 1:1, .., 9:9, three identical digits at times 11:1, 22:2, 1:11, 2:22, 3:33, 4:44, 5:55, and four identical digits at times 11:11 and 22:22. So, there are 19 minutes during which the time displayed by the clock will have identical digits.\\nExample case 2. Compared to the previous case, the clock doesn't show 5:55, but can show 33:3 and 33:33.\\nExample case 6. In this example, our day consists of one hour and one hour consists of one minute. Hence, the entire day is just 1 minute - the only time the digital clock will display is 0:0 during the entire day, (i.e. the entire hour, i.e. entire minute). And 0:0 has all digits identical, so the answer is 1.\"",
        "331": "b\"Alternating Divisibility\\nJJ challenges the Chef to construct an array\\nA of length\\nN such that the following conditions hold:\\nA\\ni\\ndivides\\nA\\ni+1\\nwhen\\ni is odd and\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\xe2\\x88\\x921\\nA\\ni\\ndoes not divide\\nA\\ni+1\\nwhen\\ni is even and\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\xe2\\x88\\x921\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa42\\xe2\\x8b\\x85N\\nAll\\nA\\ni\\nare pairwise distinct\\nCan you help Chef complete JJ's challenge?\\nIf multiple arrays satisfying the above conditions exist print any one of them.\\nIt is guaranteed that under the given constraints, at least one array satisfying the above conditions exists.\\nInput Format\\nThe first line will contain\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains an integer\\nN - the length of the array\\nA to be constructed.\\nOutput Format\\nFor each test case, output a single line containing\\nN space-separated integers, denoting the elements of the array\\nA you constructed.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nIt is guaranteed that the sum of\\nN over all test cases does not exceed\\n5\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n4\\n1\\n6\\n1 3 2 4\\n2\\n1 5 6 12 3 9\\nExplanation:\\nTest case-1:\\n[1,3,2,4] is a valid array because:\\nA\\n1\\n=1 divides\\nA\\n2\\n=3.\\nA\\n2\\n=3 does not divide\\nA\\n3\\n=2.\\nA\\n3\\n=2 divides\\nA\\n4\\n=4.\\nTest case-3:\\n[1,5,6,12,3,9] is a valid array because:\\nA\\n1\\n=1 divides\\nA\\n2\\n=5.\\nA\\n2\\n=5 does not divide\\nA\\n3\\n=6.\\nA\\n3\\n=6 divides\\nA\\n4\\n=12.\\nA\\n4\\n=12 does not divide\\nA\\n5\\n=3.\\nA\\n5\\n=3 divides\\nA\\n6\\n=9.\"",
        "332": "b'Jogging\\nAlice jogs everyday to keep herself fit and active. She noticed that she burns\\nX calories when jogging the first kilometer, and for\\nK>1, jogging the\\nK\\nth\\nkilometer burns calories equivalent to the total number of calories burned while jogging the first\\nK\\xe2\\x88\\x921 kilometers.\\nWhat is the total number of calories that Alice burns after jogging for\\nN kilometers? The answer can be very large, so report it modulo\\n10\\n9\\n+7 (\\n1000000007).\\nInput Format\\nThe first line of input will contain an integer\\nT \\xe2\\x80\\x94 the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains two space-separated integers\\nN and\\nX, as described in the problem statement.\\nOutput Format\\nFor each test case, output on a new line the total number of calories that Alice burns after jogging for\\nN kilometers, modulo\\n10\\n9\\n+7.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n6\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n3\\n1 2\\n2 1\\n12548 1\\n2\\n2\\n588809226\\nExplanation:\\nTest case\\n1: Alice only jogs one kilometer, which burns\\n2 calories since\\nX=2.\\nTest case\\n2: Alice jogs two kilometers. The first burns\\nX=1 calorie, and the second also burns\\n1 calorie since the total amount burnt before this is\\n1 calorie. So, the total is\\n1+1=2 calories burned.'",
        "333": "b'Correct Sentence\\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nChef knows about two languages spoken in Chefland, but he is not proficient in any of them. The first language contains lowercase English letters between \\'a\\' and \\'m\\' inclusive and the second language contains only uppercase English letters between \\'N\\' and \\'Z\\' inclusive.\\nDue to Chef\\'s limited vocabulary, he sometimes mixes the languages when forming a sentence \\xe2\\x80\\x94 each word of Chef\\'s sentence contains only characters from one of the languages, but different words may come from different languages.\\nYou are given a sentence as a sequence of\\nK words\\nS\\n1\\n,S\\n2\\n,\\xe2\\x80\\xa6,S\\nK\\n. Determine whether it could be a sentence formed by Chef, i.e. if it contains only the characters from the two given languages and each word contains only characters from a single language.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains an integer\\nK followed by a space and\\nK space-separated strings\\nS\\n1\\n,S\\n2\\n,\\xe2\\x80\\xa6,S\\nK\\n.\\nOutput\\nFor each test case, print a single line containing the string \"YES\" if the given sentence can be formed by Chef or \"NO\" if it cannot.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4\\xe2\\x88\\xa3S\\ni\\n\\xe2\\x88\\xa3\\xe2\\x89\\xa4100 for each valid\\ni\\nthe sum of lengths of all the strings on the input does not exceed\\n10\\n5\\neach string contains only lowercase and uppercase English letters\\nSample 1:\\nInput\\nOutput\\n3\\n1 aN\\n2 ab NO\\n3 A N D\\nNO\\nYES\\nNO\\nExplanation:\\nExample case 1: A single word cannot contain characters from both languages.\\nExample case 2: This could be a sentence formed by Chef since each word contains only characters from a single language.\\nExample case 3: Letters \\'A\\' and \\'D\\' do not belong to either of the two languages.'",
        "334": "b'Chef Odd\\nYou want to partition the set\\nS={1,2,\\xe2\\x80\\xa6,N} into\\nK sets\\nS\\n1\\n,S\\n2\\n,\\xe2\\x80\\xa6,S\\nK\\n, such that\\n\\xe2\\x88\\xa3S\\ni\\n\\xe2\\x88\\xa3\\xe2\\x89\\xa52, and the sum of elements in each\\nS\\ni\\nis odd.\\nIs it possible to do so?\\nNote 1: Partitioning the set\\nS={1,2,\\xe2\\x80\\xa6,N} into\\nK sets\\nS\\n1\\n,S\\n2\\n,\\xe2\\x80\\xa6,S\\nK\\nmeans that every element of\\nS should be in exactly one of the sets\\nS\\n1\\n,S\\n2\\n,\\xe2\\x80\\xa6,S\\nK\\n, and\\nS\\ni\\n\\xe2\\x8a\\x86S, for all\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4K.\\nNote 2:\\n\\xe2\\x88\\xa3A\\xe2\\x88\\xa3 denotes the number of elements in the set\\nA.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first line and only line of each test case contains two space-separated integers,\\nN and\\nK.\\nOutput Format\\nFor each test case, output YES if you can partition the set satisfying the requirements. Otherwise, output NO.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n18\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n18\\nSample 1:\\nInput\\nOutput\\n2\\n5 2\\n14 5\\nNO\\nYES\\nExplanation:\\nTest case\\n1: There is no way you can partition\\n{1,2,3,4,5} into\\n2 subsets such that each has an odd sum and each subset contains at least\\n2 integers.\\nTest case\\n2: One of the ways to partition is\\n{1,4,6,12},{2,5},{3,14},{7,10,11,13},{9,8}. The sum of elements in each subset is\\n23,7,17,41,17, each of which is odd and each subset contains at least\\n2 integers.'",
        "335": "b'Weird Palindrome Making\\nRead problem statements in Bengali, Russian, Mandarin and Vietnamese as well.\\nNaveej is from a tribe that speaks some weird language - their alphabet consists of\\nN distinct characters. He has an array\\nA=[A\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n], where\\nA\\ni\\ndenotes the number of occurrences of the\\ni-th character with him.\\nHe wants to make a palindromic string using all the characters he has (every character he has must be used in this string).\\nIn order to make this possible, he can perform the following operation:\\nSelect an\\ni\\n(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N) and convert all occurrences of\\ni-th alphabet to any other alphabet of his choice.\\nNote that Naveej just wants to be able to make any palindrome, as long as every character is used. For example, if\\nN=2 and\\nA=[2,2] and we consider the characters to be\\na and\\nb, he can make both\\nabba and\\nbaab, but\\naba is not allowed because it uses only\\n3 characters.\\nFind the minimum number of operations required such that Naveej can make a palindromic string using all the characters he has. It can be proven that there always exists at least one sequence of operations allowing for the formation of a palindrome.\\nInput Format\\nThe first line of input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN - the size of the alphabet.\\nThe second line contains\\nN space-separated integers:\\nA\\n1\\n,A\\n2\\n,...,A\\nN\\n, where\\nA\\ni\\nis the number of occurrences of the\\ni-th character with Naveej.\\nOutput Format\\nFor each test case, output a single line containing one integer - the minimum number of operations required so that Naveej can make a palindromic string using all the characters he has.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nIt is guaranteed that the sum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\nSubtasks\\nSubtask 1 (100 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n1\\n4\\n3\\n4 3 1\\n0\\n1\\nExplanation:\\nIn the first test case,\\nN=1. Let the character be\\na. We can make the following palindromic string:\\naaaa.\\nIn the second test case,\\nN=3. Let the characters be\\na,\\nb,\\nc. It is initially not possible to make a palindrome with the given occurrences of the characters. We perform 1 operation: Convert all the occurrences of\\nb to\\nc. Then, we can make the following palindromic string:\\nacaccaca.'",
        "336": "b'Interesting XOR!\\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nYou are given an integer\\nC. Let\\nd be the smallest integer such that\\n2\\nd\\nis strictly greater than\\nC.\\nConsider all pairs of non-negative integers\\n(A,B) such that\\nA,B<2\\nd\\nand\\nA\\xe2\\x8a\\x95B=C (\\n\\xe2\\x8a\\x95 denotes the bitwise XOR operation). Find the maximum value of\\nA\\xe2\\x8b\\x85B over all these pairs.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains a single integer\\nC.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 the maximum possible product\\nA\\xe2\\x8b\\x85B.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4C\\xe2\\x89\\xa410\\n9\\nSubtasks\\nSubtask #1 (30 points):\\n1\\xe2\\x89\\xa4C\\xe2\\x89\\xa410\\n3\\nSubtask #2 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n13\\n10\\n70\\n91\\nExplanation:\\nExample case 1: The binary representation of\\n13 is \"1101\". We can use\\nA=10 (\"1010\" in binary) and\\nB=7 (\"0111\" in binary). This gives us the product\\n70. No other valid pair\\n(A,B) can give us a larger product.\\nExample case 2: The binary representation of\\n10 is \"1010\". We can use\\nA=13 (\"1101\") and\\nB=7 (\"0111\"). This gives us the maximum product\\n91.'",
        "337": "b\"CAO Stage-1\\nProblem Statement\\nPast\\nIn the year of 2048, the Virtual Reality Massively Multiplayer Online Role-Playing Game (VRMMORPG), Code Art Online (CAO), is released. With the Chef Gear, a virtual reality helmet that stimulates the user's five senses via their brain, players can experience and control their in-game characters with their minds.\\nOn August the 2nd, 2048, all the players log in for the first time, and subsequently discover that they are unable to log out. They are then informed by Code Master, the creator of CAO, that if they wish to be free, they must reach the second stage of the game.\\nKirito is a known star player of CAO. You have to help him log out.\\nPresent\\nStage 1\\nA map is described by a 2D grid of cells. Each cell is either labelled as a # or a ^. # denotes a wall. A monster exists in a cell if the cell is not a wall and the cell is a centre of Prime-Cross (CPC).\\nLet L be the number of contiguous ^ to the left of X, in the same row as X.\\nR be the number of contiguous ^ to the right of X, in the same row as X.\\nT be the number of contiguous ^ above X, in the same column as X.\\nB be the number of contiguous ^ below X, in the same column as X.\\nA cell X is said to be a CPC if there exists a prime number P such that P \\xe2\\x89\\xa4 minimum of [L, R, T, B].\\nNote: While computing L, R, T, B for a cell X, you should not count the ^ of the cell X.\\nGiven a map, you have to tell Kirito the number of cells where monsters exist.\\nFuture\\nIf you are done with this task, go help Kirito with Stage 2 :-)\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each case starts with a line containing two space separated integers R, C denoting the number of rows and columns in the map respectively. The next R lines contain C characters each, describing the map.\\nOutput\\nFor each test case, output a single line containing the number of cells where monsters exist.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 100\\n1 \\xe2\\x89\\xa4 R \\xe2\\x89\\xa4 50\\n1 \\xe2\\x89\\xa4 C \\xe2\\x89\\xa4 50\\nSample 1:\\nInput\\nOutput\\n2\\n5 5\\n^^^^^\\n^^^^^\\n^^^^#\\n^^^^^\\n^^^^^\\n5 7\\n^^#^^^^\\n^^#^#^#\\n#^^^^^^\\n^^#^^#^\\n^^^^^^^\\n0\\n1\\nExplanation:\\nExample case 1. There is no cell for which minimum of L, R, T, B is greater than some prime P.\\nExample case 2. The cell at [3, 4], (1-based indexing) is the only CPC.\"",
        "338": "b\"Anti Palindrome\\nDefinitions:\\nA string\\nT is called semi-palindrome if you can rearrange the characters of\\nT to make it into a palindrome.\\nFor eg. if\\nT=aabb, it isn't a palindrome as of now, but it can be rearranged to form\\nabba, which is a palindrome. Thus,\\nT=aabb is a semi-palindrome.\\nAn anti-palindrome is the opposite of a semi-palindrome. In particular, a string\\nT is called an anti-palindrome if it is not possible to rearrange the characters of\\nT to make it into a palindrome.\\nFor eg. if\\nT=abc, there is no rearrangement of this string which makes it into a palindrome. Hence,\\nT=abc is an anti-palindrome.\\nNow on to the problem:\\nYou are given a string\\nS=S\\n1\\nS\\n2\\n\\xe2\\x80\\xa6S\\nN\\nconsisting of\\nN english lowercase letters.\\nYour aim is to convert\\nS into an anti-palindrome. For this, you are allowed to do the following operation as many times as you want (even 0 times) :\\nSelect an index\\ni\\n(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N) and change\\nS\\ni\\nto any other english lowercase letter.\\nFind the minimum number of operations needed to make\\nS into an anti-palindrome.\\nNote: It can be proven that for the given constraints (\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n), it is always possible to make\\nS into an anti-palindrome using the operations.\\nInput Format\\nThe first line of input will contain a single integer\\nC, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the length of the string\\nS.\\nThe next line contains the string\\nS of length\\nN.\\nOutput Format\\nFor each test case, output the minimum number of operations needed to make\\nS into an anti-palindrome.\\nConstraints\\n1\\xe2\\x89\\xa4C\\xe2\\x89\\xa45\\xe2\\x8b\\x8510\\n5\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nS contains only english lowercase letters.\\nThe sum of\\nN over all testcases won't exceed\\n10\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n5\\n2\\nab\\n2\\naa\\n3\\nabc\\n3\\naaa\\n3\\nabb\\n0\\n1\\n0\\n2\\n1\\nExplanation:\\nTestcase 1: The given string\\nab is already an anti-palindrome, since there is no way to rearrange the letters to make it into a palindrome. So, we don't need to do any operations on it to make it an anti-palindrome. Hence the answer is\\n0.\\nTestcase 2: The given string\\naa is a palindrome, and so it is not an anti-palindrome. We can change it to\\nab using\\n1 operation, and it becomes an anti-palindrome. Hence the answer is\\n1.\\nTestcase 3: The given string\\nabc is already an anti-palindrome, since there is no way to rearrange the letters to make it into a palindrome. So, we don't need to do any operations on it to make it an anti-palindrome. Hence the answer is\\n0.\\nTestcase 4: The given string\\naaa is a palindrome, and so it is not an anti-palindrome. We can change it to\\nabc using\\n2 operations, and it becomes an anti-palindrome. There is no way to make it into an anti-palindrome using only 1 operation. Hence the answer is\\n2.\\nTestcase 5: The given string\\nabb is a semi-palindrome, since it can be rearranged to form\\nbab which is a palindrome. So\\nabb is not an anti-palindrome. We can change it to\\nabc using\\n1 operation, and it becomes an anti-palindrome. Hence the answer is\\n1.\"",
        "339": "b\"Chef Goes to the Cinema\\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\\nChef lives in Chefcity. Chefcity can be represented as a straight line with Chef's house at point 0 on this line. There is an infinite number of subway stations in Chefcity, numbered by positive integers. The first station is located at point 1 and for each i \\xe2\\x89\\xa5 1, the distance between stations i and i+1 is equal to i+1. (Station i+1 is always located at a higher coordinate than station i, i.e., the subway stations are located at points 1, 3, 6, 10, 15 etc.)\\nSubway trains in Chefcity allow Chef to move between any pair of adjacent stations in one minute, regardless of the distance between them. Chef can also move by walking; his walking speed is one unit of distance in one minute. Chef can enter or exit the subway at any station.\\nChef has decided to go to the cinema. The only cinema in Chefcity is located at point X. (Note that the cinema can be placed at the same point as a subway station.) Help Chef determine the minimum possible time required to get to the cinema from his house.\\nInput\\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\\nThe first and only line of each test case contains a single integer X.\\nOutput\\nFor each test case, print a single line containing one integer - the minimum possible travel time.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 200\\n1 \\xe2\\x89\\xa4 X \\xe2\\x89\\xa4 109\\nSample 1:\\nInput\\nOutput\\n4\\n1\\n2\\n3\\n9\\n1\\n2\\n2\\n5\\nExplanation:\\nExample case 4: Chef will walk from x = 0 to x = 1 in one minute, then he will enter the subway and move from station 1 (at x = 1) to station 2 (at x = 3) in one minute, then from station 2 to station 3 (at x = 6) in one minute, from station 3 to station 4 (at x = 10) in one minute, and finally, he will walk from x = 10 to x = 9 in one minute, which makes the total travel time 5 minutes.\"",
        "340": "b\"Harrenhal\\nRead problems statements in Mandarin Chinese and Russian.\\nHarrenhal is the largest castle in the Seven Kingdoms and is the seat of House Whent in the Riverlands, on the north shore of the Gods Eye lake. Since the War of Conquest, however, it has become a dark and ruinous place.\\n(c) A Wiki of Ice and Fire\\nNow Harrenhal is too dangerous since it's a nice place for bandits to hide, or even for rebels to start planning overthrowing of the king. So, the current Lord of the Seven Kingdoms has decided, that it's time to completely ruin the castle. For that puposes, he's planning to send some military troops.\\nIn this problem we assume, that Harrenhal can be described as a string H, which consists only of symbols 'a' and 'b'. Harrenhal is completely ruined if and only if the length of H is equal to zero.\\nSo, how to make H empty? Send a military troop! When a military troop of the king reach the castle, they delete some palindromic subsequence S of H. For example, let H = 'abbabaab'. Then the current military troop can choose S = 'ababa'(Let's make symbols of S bold in H: 'abbabaab'). After deleting S, H will be equal to 'bab'. Military troops are free to choose any possible palindromic subsequence of H.\\nYour task is pretty simple: determine the minimal number of military troops, that the Lord of the Seven Kingdoms has to send in order to ruin Harrenhal.\\nNote\\nMaybe, some of you aren't familiar with definitions from the statement. Here're some articles that could help you to understand the problem correctly:\\nSubsequence: http:\/\/en.wikipedia.org\/wiki\/Subsequence\\nPalindrome: http:\/\/en.wikipedia.org\/wiki\/Palindrome\\nInput\\nThe first line of the input contains an integer T, denoting the number of test cases.\\nThe next T lines contain a string H each, denoting the string, that describes the current state of Harrenhal for the corresponding test cases.\\nIt's guaranteed, that each H consists only of symbols 'a' and 'b'.\\nOutput\\nThe output should contain exactly T lines. i'th line of the output should contain the only integer: the minimal number of military troops, that the Lord of the Seven Kingdoms has to send in order to ruin Harrenhal for the corresponding test cases.\\nConstraints\\n1 \\xe2\\x89\\xa4 |H| \\xe2\\x89\\xa4 100000, for each H.\\nSubtask 1(30 points): each H in the input is a palindrome, 1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 6;\\nSubtask 2(70 points): 1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 9.\\nSample 1:\\nInput\\nOutput\\n1\\nabbabaab\\n2\\nExplanation:\\nThere're multiple ways to ruin Harrenhal in the example test. Let's consider one of them.\\nThe first troop can delete S = 'ababa'('abbabaab'). After that, H = 'bab'.\\nThe second troop can delete S = 'bab'('bab'). After that, H is empty and that's it.\"",
        "341": "b'Exactly N plus 1 Values\\nRead problem statements in Mandarin, Russian, and Vietnamese as well.\\nYou are given a positive integer\\nN. You have to print exactly\\nN+1 positive integers satisfying the following conditions:\\nExactly one value should appear twice, all the remaining values should appear only once.\\nSum of all these values should be equal to\\n2\\nN\\n.\\nYou have to print the values in non-decreasing order. If there are multiple solutions, you can print any of them.\\nInput Format\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains a single integer\\nN.\\nOutput Format\\nFor each test case, print a single line containing\\nN+1 positive integers in non-decreasing order that satisfy the given conditions. If there are multiple solutions, you may print any of them.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa460\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa460\\nSubtasks\\nSubtask 1 (100 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n3\\n4\\n1 2 2 3\\n1 2 3 3 7\\nExplanation:\\nTest Case\\n1:\\n2 is repeated twice and the remaining elements occurred only once and the sum of all the elements is equal to\\n8, which is\\n2\\n3\\n.\\nTest Case\\n2:\\n3 is repeated twice and the remaining elements occurred only once and the sum of all the elements is equal to\\n16, which is\\n2\\n4\\n.'",
        "342": "b\"Gcd of Subarrays\\nYou are given positive integers\\nN and\\nK.\\nYou have to construct an array\\nA of length\\nN such that :\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n18\\n\\xe2\\x88\\x91\\ni=1\\nN\\n\\xe2\\x88\\x91\\nj=i\\nN\\nF(i,j)=K, where\\nF(i,j) denotes the gcd of all elements of the subarray\\nA[i,j].\\nIf multiple such arrays exist, print any.\\nReport\\n\\xe2\\x88\\x921 if no such array exists.\\nNote that\\nA[l,r] denotes the subarray\\n[A\\nl\\n,A\\nl+1\\n,\\xe2\\x80\\xa6,A\\nr\\xe2\\x88\\x921\\n,A\\nr\\n].\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of single line of input.\\nThe only line of each test case contains two space-separated integers\\nN and\\nK \\xe2\\x80\\x94 the number of elements and required sum.\\nOutput Format\\nFor each test case, output on a new line\\nN space-separated integers, denoting array\\nA.\\nReport\\n\\xe2\\x88\\x921 if no such array exists.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n18\\nThe sum of\\nN over all test cases won't exceed\\n1000.\\nSample 1:\\nInput\\nOutput\\n3\\n1 5\\n2 4\\n3 1\\n5\\n1 2\\n-1\\nExplanation:\\nTest case\\n1: The only possible array of size\\n1 such that the sum of gcd of all subarrays is\\n5 is\\nA=[5].\\nTest case\\n2: Consider an array of size\\n2 as\\nA=[1,2]. The subarrays of the array are:\\n[1]: The gcd of this subarray is\\n1.\\n[1,2]: The gcd of this subarray is\\ngcd(1,2)=1.\\n[2]: The gcd of this subarray is\\n2.\\nThe sum of gcd of all subarrays is\\n1+1+2=4.\\nTest case\\n3: It can be proven that there exists no subarray of size\\n3 such that the sum of gcd of all subarrays of the array is\\n1.\"",
        "343": "b'Total Correct Submissions\\nRead problem statements in Mandarin Chinese, Russian, and Vietnamese as well.\\nCodechef challenges have three divisions. In one challenge, there are\\nN problems in each division, but some problems may be shared among multiple divisions. Each problem is uniquely identified by a code \\xe2\\x80\\x94 a string containing only uppercase English letters. Each participant can only submit in one of the divisions.\\nChef wants to find the number of correct solutions, in total among all\\n3 divisions, for each problem. Given a list of\\nN problem codes with the numbers of correct solutions for each problem in each division, find the total number of correct solutions for each problem and sort them in non-decreasing order.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN.\\nN lines follow. For each valid\\ni, the\\ni-th of these lines contains a string\\nS\\n3,i\\nfollowed by a space and an integer\\nC\\n3,i\\n\\xe2\\x80\\x94 the problem code and the number of correct solutions on the\\ni-th problem in the third division.\\nN more lines follow. For each valid\\ni, the\\ni-th of these lines contains a string\\nS\\n2,i\\nfollowed by a space and an integer\\nC\\n2,i\\n\\xe2\\x80\\x94 the problem code and the number of correct solutions on the\\ni-th problem in the second division.\\nFinally,\\nN more lines follow. For each valid\\ni, the\\ni-th of these lines contains a string\\nS\\n1,i\\nfollowed by a space and an integer\\nC\\n1,i\\n\\xe2\\x80\\x94 the problem code and the number of correct solutions on the\\ni-th problem in the first division.\\nOutput\\nFor each test case, let\\nP be the number of distinct problems; you should print\\nP space-separated integers \\xe2\\x80\\x94 the number of solutions for each of these problems, sorted in non-decreasing order.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n4\\n1\\xe2\\x89\\xa4\\xe2\\x88\\xa3S\\n1,i\\n\\xe2\\x88\\xa3,\\xe2\\x88\\xa3S\\n2,i\\n\\xe2\\x88\\xa3,\\xe2\\x88\\xa3S\\n3,i\\n\\xe2\\x88\\xa3\\xe2\\x89\\xa48 for each valid\\ni\\nS\\n1,i\\n,S\\n2,i\\n,S\\n3,i\\ncontain only uppercase English letters for each valid\\ni\\n1\\xe2\\x89\\xa4C\\n1,i\\n,C\\n2,i\\n,C\\n3,i\\n\\xe2\\x89\\xa45\\xe2\\x8b\\x8510\\n8\\nfor each valid\\ni\\nthe problem codes in each division are pairwise distinct, but some problem codes may appear in multiple divisions\\nthe sum of\\nN over all test cases does not exceed\\n10\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n1\\nA 1\\nB 2\\nC 3\\n2\\nAA 1\\nAB 1\\nAB 1\\nAC 1\\nAC 1\\nAD 1\\n1\\nZ 100\\nZ 100\\nZ 100\\n1 2 3\\n1 1 2 2\\n300\\nExplanation:\\nExample case 1: There is only\\n1 problem in each division and no problems are shared among divisions, so the total number of distinct problems is\\n3 and the numbers of solutions are:\\n1 for \"A\",\\n2 for \"B\",\\n3 for \"C\".\\nExample case 2: There are\\n2 problems in each division and each pair of consecutive divisions shares\\n1 problem, so the total number of distinct problems is\\n4 and the numbers of solutions are:\\n1 for \"AA\",\\n2 for \"AB\",\\n2 for \"AC\",\\n1 for \"AD\". We need to sort them in non-decreasing order, so the final answer is\\n(1,1,2,2).\\nExample case 3: There is only\\n1 problem \"Z\" in the entire contest, shared among all divisions, and the number of solutions for it is\\n300.'",
        "344": "b'Odd Sum\\nRead problem statements in Mandarin, Bengali, and Russian as well.\\nGiven an integer\\nN, consider all arrays\\nA of size\\nN such that:\\nAll the elements are non-negative and distinct.\\nAll prefix sums are odd. Formally, for all\\ni such that\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N,\\n\\xe2\\x88\\x91\\nj=1\\ni\\nA\\ni\\nis odd.\\nAmong all possible arrays\\nA, output the smallest possible sum of the elements of the array.\\nNote: Since the Input\/Output may be large, it is preferred to use fast I\/O.\\nInput Format\\nThe first line contains\\nT - the number of test cases. Then the test cases follow.\\nThe first line of each test case contains\\nN - the size of the array.\\nOutput Format\\nFor each test case, output on one line the smallest sum among all arrays satisfying the constraints.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n6\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n1\\n3\\n3\\nExplanation:\\nTest case\\n1: A possible array is\\n[1,2,0].\\n[1,0,0] is not valid because\\n0 occurs twice in it;\\n[0,1,2] is not valid because the prefix sum until the first index is\\n0, which is even. Another possible array is\\n[5,2,4].\\n[1,2,0] yields the sum\\n3, and we can prove that there are no valid arrays that have sum less than\\n3.'",
        "345": "b\"Chef and Bulb Invention\\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nChef is trying to invent the light bulb that can run at room temperature without electricity. So he has\\nN gases numbered from\\n0 to\\nN\\xe2\\x88\\x921 that he can use and he doesn't know which one of the\\nN gases will work but we do know it.\\nNow Chef has worked on multiple search algorithms to optimize search. For this project, he uses a modulo-based search algorithm that he invented himself. So first he chooses an integer\\nK and selects all indices\\ni in increasing order such that\\nimodK=0 and test the gases on such indices, then all indices\\ni in increasing order such that\\nimodK=1, and test the gases on such indices, and so on.\\nGiven\\nN, the index of the gas\\np that will work, and\\nK, find after how much time will he be able to give Chefland a new invention assuming that testing\\n1 gas takes\\n1 day.\\nFor example, consider\\nN=5,p=2 and\\nK=3.\\nOn the\\n1\\nst\\nday, Chef tests gas numbered\\n0 because\\n0mod3=0.\\nOn the\\n2\\nnd\\nday, Chef tests gas numbered\\n3 because\\n3mod3=0.\\nOn the\\n3\\nrd\\nday, Chef tests gas numbered\\n1 because\\n1mod3=1.\\nOn the\\n4\\nth\\nday, Chef tests gas numbered\\n4 because\\n4mod3=1.\\nOn the\\n5\\nth\\nday, Chef tests gas numbered\\n2 because\\n2mod3=2.\\nSo after\\n5 days, Chef will be able to give Chefland a new invention\\nInput Format\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains three space-separated integers\\nN,\\np, and\\nK.\\nOutput Format\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x94 after how much time Chef will be able to give Chefland a new invention assuming that testing\\n1 gas takes\\n1 day.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N,K\\xe2\\x89\\xa410\\n9\\n0\\xe2\\x89\\xa4p<N\\nSubtasks\\nSubtask #1 (100 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n4\\n10 5 5\\n10 6 5\\n10 4 5\\n10 8 5\\n2\\n4\\n9\\n8\\nExplanation:\\nTest case\\n1: On the day\\n1 Chef will test gas numbered\\n0 and on the day\\n2 Chef will test gas numbered\\n5.\\nTest case\\n2: On the day\\n1 Chef will test gas numbered\\n0, on the day\\n2 Chef will test gas numbered\\n5, on the day\\n3 Chef will test gas numbered\\n1, and on the day\\n4 Chef will test gas numbered\\n6.\\nTest case\\n3: On the day\\n1 Chef will test gas numbered\\n0, on the day\\n2 Chef will test gas numbered\\n5, on the day\\n3 Chef will test gas numbered\\n1, on the day\\n4 Chef will test gas numbered\\n6, on the day\\n5 Chef will test gas numbered\\n2, on the day\\n6 Chef will test gas numbered\\n7, on the day\\n7 Chef will test gas numbered\\n3, on the day\\n8 Chef will test gas numbered\\n8, and on the day\\n9 Chef will test gas numbered\\n4.\\nTest case\\n4: On the day\\n1 Chef will test gas numbered\\n0, on the day\\n2 Chef will test gas numbered\\n5, on the day\\n3 Chef will test gas numbered\\n1, on the day\\n4 Chef will test gas numbered\\n6, on the day\\n5 Chef will test gas numbered\\n2, on the day\\n6 Chef will test gas numbered\\n7, on the day\\n7 Chef will test gas numbered\\n3, and on the day\\n8 Chef will test gas numbered\\n8.\"",
        "346": "b'Chain of Doughnuts\\nRead problems statements in Mandarin and Russian. Translations in Vietnamese to be uploaded soon.\\nThere is new delicious item in Chef\\'s menu - a doughnut chain. Doughnuts connected successively in line forming a chain.\\n\\nChain of 3 doughnuts\\nChef has received an urgent order for making a chain of N doughnuts. He noticed that there are exactly N cooked doughnuts in the kitchen, some of which are already connected in chains. The only thing he needs to do is connect them in one chain.\\nHe can cut one doughnut (from any position in a chain) into two halves and then use this cut doughnut to link two different chains.\\nHelp Chef determine the minimum number of cuts needed to complete the order.\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases.\\nThe first line of each test case contains two integer N and M denoting the size of order and number of cooked chains respectively.\\nThe second line contains M space-separated integers A1, A2, ..., AM denoting the size of the chains.\\nIt is guaranteed that N is equal to the sum of all Ai\\'s over 1<=i<=M.\\nOutput\\nFor each test case, output a single line containing an integer corresponding to the number of cuts needed Chef to make the order.\\nConstraints and Subtasks\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 200\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 2*109\\n1 \\xe2\\x89\\xa4 Ai \\xe2\\x89\\xa4 105\\nSubtask 1: 10 points\\n1 \\xe2\\x89\\xa4 M \\xe2\\x89\\xa4 2*104\\nAi = 1\\nSubtask 2: 30 points\\n1 \\xe2\\x89\\xa4 M \\xe2\\x89\\xa4 100\\nSubtask 3: 60 points\\n1 \\xe2\\x89\\xa4 M \\xe2\\x89\\xa4 2*104\\nSample 1:\\nInput\\nOutput\\n2\\n11 3\\n4 3 4\\n6 3\\n3 2 1\\n2\\n1\\nExplanation:\\nExample 1: We could cut 2 doughnut from any \"chain\" and use them to connect chains to the one.\\nFor example, let\\'s cut it from the first chain. After this we will have chains of sizes 2, 3, 4 and two doughnuts that have been cut. So we could connect the first chain with second and second with third using these two doughnuts.\\nExample 2: We cut doughnut from the last \"chain\" and connect the first two chains.\\nImage for second example. Yellow doughnut has been cut.'",
        "347": "b\"Consecutive Xor\\nChef has an array\\nA of length\\nN. He can perform the following operation on\\nA:\\n1) Select an index\\ni\\n(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\xe2\\x88\\x921) and select an integer\\nX\\n(1\\xe2\\x89\\xa4X<2\\n20\\n).\\n2) Set\\nA\\ni\\n:=(A\\ni\\n\\xe2\\x8a\\x95X) and\\nA\\ni+1\\n:=(A\\ni+1\\n\\xe2\\x8a\\x95X). (Here,\\n\\xe2\\x8a\\x95 denotes the bitwise XOR operation)\\nDetermine if Chef can make all the elements of\\nA equal by applying the above operation any number of times (possibly zero).\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the size of the array\\nA.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\ndenoting the array\\nA.\\nOutput Format\\nFor each test case, output YES if it is possible to make all the elements of\\nA equal by applying the given operation any number of times. Otherwise, output NO.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n0\\xe2\\x89\\xa4A\\ni\\n<2\\n20\\nThe sum of\\nN over all test cases won't exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n4\\n3 2 2 3\\n6\\n0 1 2 3 4 5\\n3\\n1 2 4\\nYES\\nNO\\nYES\\nExplanation:\\nTest Case 1: We can apply the following operation:\\n[3,2,2,3]\\ni=2,X=1\\n[3,3,3,3]\\nTest Case 2: It can be proved that we can not make all the elements of\\nA equal by applying the given operation.\\nTest Case 3: We can apply the following operations:\\n[1,2,4]\\ni=1,X=6\\n[7,4,4]\\ni=2,X=3\\n[7,7,7]\"",
        "348": "b'Bench Press\\nIn the gym, Chef prefers to lift at least\\nW grams during a bench press and if that\\'s impossible, Chef considers his workout to be incomplete and feels bad.\\nThe rod weighs\\nW\\nr\\ngrams and there are\\nN other weights lying on the floor that weigh\\nw\\n1\\n,w\\n2\\n,...,w\\nN\\ngrams. To maintain balance and to ensure that there is no unnecessary load due to torque, it\\'s important that the weights added to the left side are symmetric to the weights added to the right side. It is not required to use all of the weights. It is also not required to use any weights at all, if Chef feels satisfied lifting only the rod.\\nFor example:\\n1\\n2\\n2\\n1\\n\\xe2\\x88\\xa3Rod Center\\n\\xe2\\x88\\xa3\\n1\\n1\\n1\\n3 is a wrong configuration, but\\n1\\n2\\n3\\n1\\n\\xe2\\x88\\xa3Rod Center\\n\\xe2\\x88\\xa3\\n1\\n3\\n2\\n1 is a right configuration.\\nFind whether Chef will be able to collect the required weights to feel satisfied.\\n###Input\\nThe first line contains an integer\\nT, the number of test cases. Then the test cases follow.\\nEach test case contains two lines of input.\\nThe first line contains three space-separated integers\\nN,W,W\\nr\\n.\\nThe second line contains\\nN space-separated integers\\nw\\n1\\n,w\\n2\\n,\\xe2\\x80\\xa6,w\\nN\\n.\\n###Output For each test case, output the answer in a single line: \"YES\" if Chef will be satisfied after his workout and \"NO\" if not (without quotes).\\nYou may print each character of each string in uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\\n###Constraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4W\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4w\\ni\\n\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4W\\nr\\n\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n4\\n###Subtasks Subtask #1 (30 points):\\nw\\ni\\n=1 for all valid\\ni\\nSubtask #2 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n2 5 10 \\n2 2\\n7 100 50\\n100 10 10 10 10 10 90 \\n6 100 40 \\n10 10 10 10 10 10\\nYES\\nNO\\nYES\\nExplanation:\\nTest case 1: Since the weight of the rod is at least the required weight to be lifted, Chef will feel satisfied after the workout.\\nTest case 2: The configuration having maximum weight is:\\n10\\n10\\n\\xe2\\x88\\xa3Rod Center\\n\\xe2\\x88\\xa3\\n10\\n10\\nSo the maximum total weight Chef can lift is\\n50+4\\xe2\\x8b\\x8510=90 which is less than the required amount to get satisfied.\\nTest case 3: The configuration having maximum weight is:\\n10\\n10\\n10\\n\\xe2\\x88\\xa3Rod Center\\n\\xe2\\x88\\xa3\\n10\\n10\\n10\\nSo the maximum total weight Chef can lift is\\n40+6\\xe2\\x8b\\x8510=100 which is equal to the required amount to get satisfied.'",
        "349": "b\"Different String\\nRead problems statements in Mandarin Chinese, Russian, and Bengali as well.\\nYou are given\\nN binary strings of length\\nN each. You need to find a binary string of length\\nN which is different from all of the given strings.\\nNote:\\nA binary string is defined as a string consisting only of '0' and '1'.\\nA string is considered different from another string when they have different lengths, or when they differ in at least one position.\\nInput Format\\nThe first line will contain\\nT - the number of test cases. Then the test cases follow.\\nThe first line of each test case contains\\nN - the number of strings and length of strings.\\nEach of the next\\nN lines contains a binary string of length\\nN.\\nOutput Format\\nFor each test case, print on one line a binary string of length\\nN, which is different from all of the given strings. If there are multiple possible answers, print any.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n2\\n3\\n101\\n110\\n100\\n4\\n1100\\n1010\\n0100\\n0010\\n111\\n1101\\nExplanation:\\nTest case\\n1:\\n111 is different from\\n101 ,\\n110 ,\\n100.\\nTest case\\n2:\\n1101 is different from\\n1100 ,\\n1010 ,\\n0100 ,\\n0010.\"",
        "350": "b'Maximum Subarray\\nGiven two arrays\\nA and\\nB of sizes\\nN and\\nM respectively. You can apply the following operation until the array\\nB is non-empty:\\nChoose either the first or the last element of array\\nB.\\nInsert the chosen element to either the front or the back of array\\nA.\\nDelete the chosen element from array\\nB.\\nFor example, let\\nA=[9,7] and\\nB=[1,3,2]. In one operation, we can choose either\\nX=1 or\\nX=2 (first or last element of array\\nB). We can insert\\nX in array\\nA and make it either\\nA=[X,9,7] or\\nA=[9,7,X]. The chosen\\nX is deleted from array\\nB. Thus, it will become either\\nB=[3,2] (when chosen\\nX is\\n1) or\\nB=[1,3] (when chosen\\nX is\\n2).\\nFind the maximum sum of any subarray of the array\\nA that you can achieve after performing exactly\\nM operations.\\nNote: A subarray of an array is formed by deleting some (possibly zero) elements from the beginning of the array and some (possible zero) elements from the end of the array. A subarray can be empty as well.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of\\n4 lines of input.\\nThe first line of each test contains a single integer\\nN, the size of array\\nA.\\nThe next line contains\\nN space-separated integers, denoting elements of array\\nA.\\nThe third line of each test contains a single integer\\nM, the size of array\\nB.\\nThe next line contains\\nM space-separated integers, denoting elements of array\\nB.\\nOutput Format\\nFor each test case, output on a new line the maximum sum of any subarray of the array\\nA that you can achieve after performing exactly\\nM operations.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4M\\xe2\\x89\\xa410\\n5\\n\\xe2\\x88\\x9210\\n8\\n\\xe2\\x89\\xa4A\\ni\\n,B\\ni\\n\\xe2\\x89\\xa410\\n8\\nSample 1:\\nInput\\nOutput\\n3\\n5\\n3 26 -79 72 23\\n2\\n66 44\\n1\\n81\\n1\\n-97\\n5\\n10 -5 14 -20 4\\n3\\n-10 5 -2\\n205\\n81\\n24\\nExplanation:\\nTest case\\n1:\\nOperation\\n1: Add the first element of array\\nB to the back of array\\nA. Thus,\\nA=[3,26,\\xe2\\x88\\x9279,72,23,66] and\\nB=[44].\\nOperation\\n2: Add the first element of array\\nB to the back of array\\nA. Thus,\\nA=[3,26,\\xe2\\x88\\x9279,72,23,66,44] and\\nB=[].\\nThe, maximum sum subarray of array\\nA is\\n[72,23,66,44] having sum\\n72+23+66+44=205.\\nTest case\\n2:\\nOperation\\n1: Add the first element of array\\nB to the front of array\\nA. Thus,\\nA=[\\xe2\\x88\\x9297,81] and\\nB=[].\\nThe, maximum sum subarray of array\\nA is\\n[81] having sum\\n81.\\nTest case\\n3:\\nOperation\\n1: Add the last element of array\\nB to the back of array\\nA. Thus,\\nA=[10,\\xe2\\x88\\x925,14,\\xe2\\x88\\x9220,4,\\xe2\\x88\\x922] and\\nB=[\\xe2\\x88\\x9210,5].\\nOperation\\n2: Add the last element of array\\nB to the front of array\\nA. Thus,\\nA=[5,10,\\xe2\\x88\\x925,14,\\xe2\\x88\\x9220,4,\\xe2\\x88\\x922] and\\nB=[\\xe2\\x88\\x9210].\\nOperation\\n3: Add the first element of array\\nB to the front of array\\nA. Thus,\\nA=[\\xe2\\x88\\x9210,5,10,\\xe2\\x88\\x925,14,\\xe2\\x88\\x9220,4,\\xe2\\x88\\x922] and\\nB=[].\\nThe, maximum sum subarray of array\\nA is\\n[5,10,\\xe2\\x88\\x925,14] having sum\\n5+10\\xe2\\x88\\x925+14=24.'",
        "351": "b'Chef And The Hiring Event\\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\\nThe Head Chef is receiving a lot of orders for cooking the best of the problems lately. For this, he organized an hiring event to hire some talented Chefs. He gave the following problem to test the skills of the participating Chefs. Can you solve this problem and be eligible for getting hired by Head Chef.\\nA non-negative number n is said to be magical if it satisfies the following property. Let S denote the multi-set of numbers corresponding to the non-empty subsequences of the digits of the number n in decimal representation. Please note that the numbers in the set S can have leading zeros. Let us take an element s of the multi-set S, prod(s) denotes the product of all the digits of number s in decimal representation. The number n will be called magical if sum of prod(s) for all elements s in S, is even.\\nFor example, consider a number 246, its all possible non-empty subsequence will be S = {2, 4, 6, 24, 46, 26, 246}. Products of digits of these subsequences will be {prod(2) = 2, prod(4) = 4, prod(6) = 6, prod(24) = 8, prod(46) = 24, prod(26) = 12, prod(246) = 48, i.e. {2, 4, 6, 8, 24, 12, 48}. Sum of all of these is 104, which is even. Hence 246 is a magical number.\\nPlease note that multi-set S can contain repeated elements, e.g. if number is 55, then S = {5, 5, 55}. Products of digits of these subsequences will be {prod(5) = 5, prod(5) = 5, prod(55) = 25}, i.e. {5, 5, 25}. Sum of all of these is 35 which is odd. Hence 55 is not a magical number.\\nConsider a number 204, then S = {2, 0, 4, 20, 04, 24, 204}. Products of digits of these subsequences will be {2, 0, 4, 0, 0, 8, 0}. Sum of all these elements will be 14 which is even. So 204 is a magical number.\\nThe task was to simply find the Kth magical number.\\nInput\\nFirst line of the input contains an integer T denoting the number of test cases.\\nEach of the next T lines contains a single integer K.\\nOutput\\nFor each test case, print a single integer corresponding to the Kth magical number.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 105\\n1 \\xe2\\x89\\xa4 K \\xe2\\x89\\xa4 1012.\\nSubtasks\\nSubtask #1 : (20 points)\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 100\\n1 \\xe2\\x89\\xa4 K \\xe2\\x89\\xa4 104.\\nSubtask 2 : (80 points)\\nOriginal Constraints\\nSample 1:\\nInput\\nOutput\\n2\\n2\\n5\\n2\\n8\\nExplanation:\\nExample case 1. 2 is the 2nd magical number, since it satisfies the property of the magical number. The first magical number will be of course 0.'",
        "352": "b\"Survive in ChocoLand\\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\\nYou are a poor person in ChocoLand. Here, people eat chocolates daily instead of normal food. There is only one shop near your home; this shop is closed on Sunday, but open on all other days of the week. You may buy at most one box of N chocolates from this shop on each day when it is open.\\nCurrently, it's Monday, and you need to survive for the next S days (including the current day). You have to eat K chocolates everyday (including the current day) to survive. Do note that you are allowed to buy the a chocolate box and eat from it on the same day.\\nCompute the minimum number of days on which you need to buy from the shop so that you can survive the next S days, or determine that it isn't possible to survive.\\nInput\\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\\nThe first and only line of each test case contains 3 integers N, K and S denoting the number of chocolates in a box, the number of chocolates you have to eat everyday to survive and the number of days you need to survive.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x94 the minimum number of days on which you need to buy from the shop to survive, or -1 if you will not be able to survive S days.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 100\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 100\\n1 \\xe2\\x89\\xa4 K \\xe2\\x89\\xa4 100\\n1 \\xe2\\x89\\xa4 S \\xe2\\x89\\xa4 1000\\nSample 1:\\nInput\\nOutput\\n2\\n16 2 10\\n50 48 7\\n2\\n-1\\nExplanation:\\nExample case 1: One possible solution is to buy a box on day 1 (Monday); it's sufficient to eat from this box up to day 8 (Monday) inclusive. Now, on day 9 (Tuesday), you buy another box and use the chocolates in it to survive days 9 and 10.\\nExample case 2: You will not be able to survive even if you buy from the shop everyday except every 7-th day.\"",
        "353": "b\"GCD of Prefixes\\nSasuke and Itachi are playing a game. Sasuke first creates an array\\nA containing\\nN positive integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n. He then creates a new array\\nB of length\\nN such that\\nB\\ni\\n=gcd(A\\n1\\n,A\\n2\\n,...,A\\ni\\n) for each\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N. Now, Sasuke gives array\\nB to Itachi and asks him to find any array\\nA (with\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\n) such that the given process applied to\\nA will produce\\nB. Can you help Itachi solve this problem?\\nHere,\\ngcd stands for greatest common divisor.\\nInput Format\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN.\\nThe second line contains\\nN space-separated integers\\nB\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nN\\nOutput Format\\nFor each test case, print a single line containing\\nN space-separated integers denoting the array\\nA you constructed. If no such array\\nA exists, print\\n\\xe2\\x88\\x921 instead.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n3\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n,B\\ni\\n\\xe2\\x89\\xa410\\n9\\nIt is guaranteed that sum of\\nN over all test cases doesn't exceed\\n5\\xc3\\x9710\\n5\\n.\\nSubtasks\\n30 points :\\n1\\xe2\\x89\\xa4R\\xe2\\x89\\xa410000\\n70 points :\\n1\\xe2\\x89\\xa4R\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n2\\n2\\n4 2\\n2\\n1 3\\n4 26\\n-1\\nExplanation:\\nTest Case 1: One possible answer is\\n[4,26] because\\nB can be generated as follows:\\nB=[gcd(4),gcd(4,26)]=[4,2].\\nTest Case 2: It can be shown that no array\\nA exists which can produce the given\\nB.\"",
        "354": "b'MaxEdges\\nTracy gives Charlie a Directed Acyclic Graph with\\nN vertices. Among these\\nN vertices,\\nK vertices are sources, and\\nL vertices are sinks.\\nFind out the maximum number of edges this graph can have.\\nNote:\\nA source is a vertex with no incoming edge.\\nA sink is a vertex with no outgoing edge.\\nA vertex can be both, a source, and a sink.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains of a single line of input, three space-separated integers\\nN,K, and\\nL - the number of vertices, the number of sources and the number of sinks respectively.\\nOutput Format\\nFor each test case, output in a single line, the maximum number of edges this graph can have.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n9\\n1\\xe2\\x89\\xa4K<N\\n1\\xe2\\x89\\xa4L<N\\nSample 1:\\nInput\\nOutput\\n2\\n3 1 1\\n5 3 3\\n3\\n4\\nExplanation:\\nTest case\\n1: Assume that the vertices are numbered\\n1,2, and\\n3. Let\\n1 be a source and\\n3 be a sink. The edges of a possible DAG are\\n1\\xe2\\x86\\x922,2\\xe2\\x86\\x923, and\\n1\\xe2\\x86\\x923.\\nThe number of edges in this graph are\\n3. It can be shown that this is the maximum number of edges possible under given constraints.\\nTest case\\n2: Assume that the vertices are numbered\\n1,2,3,4, and\\n5. Let\\n1,2, and\\n3 be sources and\\n3,4, and\\n5 be sinks. The edges of a possible DAG are\\n1\\xe2\\x86\\x924,2\\xe2\\x86\\x924,1\\xe2\\x86\\x925 and\\n2\\xe2\\x86\\x925.\\nThe number of edges in this graph are\\n4. It can be shown that this is the maximum number of edges possible under given constraints.'",
        "355": "b'Max Out\\nYou are given an array A of size N. Output the maximum value of A[i]%A[j] (ie. A[i] mod A[j]) over all 1 \\xe2\\x89\\xa4 i, j \\xe2\\x89\\xa4 N.\\nInput\\nFirst line of input contains T, the number of testcases.\\nThe first line of each test case contains N, the number of elements in the array.\\nSecond line of each testcase contains N space separated integers in which the ith integer is A[i].\\nOutput\\nFor each testcase output a single integer in a new line: the maximum value of A[i]%A[j].\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4105\\n1\\xe2\\x89\\xa4A[i]\\xe2\\x89\\xa4106\\nSample 1:\\nInput\\nOutput\\n1\\n2\\n1 2\\n1\\nExplanation:\\nThe maximum value is obtained by 1%2 = 1.'",
        "356": "b\"Construct Array\\nYou are given a positive integer\\nN.\\nConsider an array\\nA of length\\nN. Let\\nP\\ni\\ndenote the sum of the first\\ni elements of\\nA and\\nS\\ni\\ndenote the sum of the last\\ni elements of\\nA.\\nYou need to construct the array\\nA of size\\nN such that all of the following conditions are met:\\n\\xe2\\x88\\x9210\\n9\\n\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\n, for all\\n(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N)\\nP\\ni\\n>S\\ni\\nif\\ni is odd, for each\\n(1\\xe2\\x89\\xa4i<N)\\nP\\ni\\n<S\\ni\\nif\\ni is even, for each\\n(1\\xe2\\x89\\xa4i<N)\\nIf there are multiple solutions, you can print any of them.\\nIf there is no such array, print\\n\\xe2\\x88\\x921 instead.\\nInput Format\\nEach test contains multiple test cases. The first line contains the number of test cases\\nT.\\nThe only line of each test case contains a single integer\\nN, where\\nN is the length of the required array.\\nOutput Format\\nFor each test case, if a valid array exists, print\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nsatisfying all the given conditions.\\nIf there are multiple solutions, you can print any of them.\\nIf there is no such array, print\\n\\xe2\\x88\\x921 instead.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n3\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nThe sum of\\nN over all test cases won't exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n2\\n3\\n4\\n343 -343\\n-1\\n0 -5 343 -100\\nExplanation:\\nTest case\\n1: All elements are in the given range for the array\\nA=[343,\\xe2\\x88\\x92343].\\nFor\\ni=1: Since\\ni is odd,\\nP\\n1\\n=343 is greater than\\nS\\n1\\n=\\xe2\\x88\\x92343.\\nTest case\\n2: It can be proved that no array of length\\n3 exists satisfying all conditions.\\nTest case\\n3: All elements are in the given range for the array\\nA=[0,\\xe2\\x88\\x925,343,\\xe2\\x88\\x92100].\\nFor\\ni=1: Since\\ni is odd,\\nP\\n1\\n=0 is greater than\\nS\\n1\\n=\\xe2\\x88\\x92100.\\nFor\\ni=2: Since\\ni is even,\\nP\\n2\\n=0+(\\xe2\\x88\\x925)=\\xe2\\x88\\x925 is less than\\nS\\n2\\n=343+(\\xe2\\x88\\x92100)=243.\\nFor\\ni=3: Since\\ni is odd,\\nP\\n3\\n=0+(\\xe2\\x88\\x925)+343=338 is greater than\\nS\\n3\\n=(\\xe2\\x88\\x925)+343+(\\xe2\\x88\\x92100)=238.\"",
        "357": "b\"Zebra Crossing\\nRead problems statements in Russian and Bengali.\\nThere's a zebra crossing appearing in the middle of nowhere with\\nN blocks in it. The colors of the zebra crossing is represented by a binary string\\nS, where\\nS\\ni\\nis 1 if the\\ni-th block from the left is white, and 0 if the block is black.\\nChef really wants to play with the zebra crossing. Although the given zebra crossing might not have alternate black and white blocks, Chef wants to follow the alternating white-black color pattern while crossing it.\\nInitially, Chef stands at block\\n1. Chef has to jump exactly\\nK times, and in each jump he has to move forward and jump to a different color than that previously occupied by Chef. More formally, suppose that Chef is currently at block\\ni and wants to jump to block\\nj then following conditions should hold:\\ni<j\\nS\\ni\\n\\xee\\x80\\xa0\\n=S\\nj\\nOutput the farthest block Chef can reach with exactly\\nK jumps. If Chef cannot jump exactly\\nK times, output -1.\\nInput Format\\nThe first line contains an integer\\nT denoting the number of test cases. The\\nT test cases then follow.\\nThe first line of each test case contains two integers\\nN and\\nK.\\nThe second line of each test case consists of a binary string of length\\nN denoting the color of blocks of the zebra crossing.\\nOutput Format\\nFor each test case, output the farthest block Chef can reach with exactly\\nK jumps, or -1 in case Chef cannot jump exactly\\nK times.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n3\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa4N\\nSum of\\nN over all test cases does not exceed\\n5\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n6 2\\n100101\\n5 1\\n10111\\n6 1\\n000000\\n6\\n2\\n-1\\nExplanation:\\nFor the first test case, Chef can jump in the following order:\\n1\\xe2\\x86\\x925\\xe2\\x86\\x926.\\nFor the second test case, Chef can jump in the following order:\\n1\\xe2\\x86\\x922.\\nFor the third test case, Chef cannot make any jumps.\"",
        "358": "b'UEFA Champions League\\n###Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese and Bengali as well.\\nThe UEFA Champions League is the most prestigious annual sports competition in the world. In the group stage of this competition, European football clubs are divided into 8 groups; there are four teams in each group. The teams in each group are ranked based on the matches they play against each other, according to the following rules:\\nBased on the results of matches, teams are awarded points. Each football match is played between a home team and an away team. If one of the teams scores more goals than the other, this team gains\\n3 points and the other team gains\\n0 points. In case of a tie (if both teams score the same number of goals), each of those teams gains\\n1 point.\\nThe goal difference of a team is the number of goals it scored minus the number of goals it received, regardless if it scored\/received them as the home team or as the away team.\\nBetween any two teams, the team with more points is ranked higher.\\nIf they have the same number of points (in case of a tie), the team with higher goal difference is ranked higher.\\nEach team plays two matches against every other team in its group \\xe2\\x80\\x95 one match as the home team and one match as the away team. You are given the number of goals scored by each team for all twelve matches in one group. Determine the leaders of this group \\xe2\\x80\\x95 the first and second top-ranked team. It is guaranteed that there are no ties for either of these places (for the given results of the matches).\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nFor each test case,\\n12 lines follow. Each of these lines describes the result of one match in the format HomeTeamName HomeTeamGoals vs. AwayTeamGoals AwayTeamName, where HomeTeamName and AwayTeamName are strings and HomeTeamGoals and AwayTeamGoals are integers denoting the number of goals scored by the respective teams in this match.\\nOutput\\nFor each scenario, print a single line containing two space-separated strings \\xe2\\x80\\x95 the name of the top-ranked team and the name of the second top-ranked team.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa450\\nthe length of the name of each team does not exceed\\n10\\nthe name of each team contains only lowercase English letters\\n0\\xe2\\x89\\xa4 number of goals scored by each team\\n\\xe2\\x89\\xa4100\\nSample 1:\\nInput\\nOutput\\n2\\nmanutd 8 vs. 2 arsenal\\nlyon 1 vs. 2 manutd\\nfcbarca 0 vs. 0 lyon\\nfcbarca 5 vs. 1 arsenal\\nmanutd 3 vs. 1 fcbarca\\narsenal 6 vs. 0 lyon\\narsenal 0 vs. 0 manutd\\nmanutd 4 vs. 2 lyon\\narsenal 2 vs. 2 fcbarca\\nlyon 0 vs. 3 fcbarca\\nlyon 1 vs. 0 arsenal\\nfcbarca 0 vs. 1 manutd\\na 3 vs. 0 b\\na 0 vs. 0 c\\na 0 vs. 0 d\\nb 0 vs. 0 a\\nb 4 vs. 0 c\\nb 0 vs. 0 d\\nc 0 vs. 0 a\\nc 0 vs. 0 b\\nc 1 vs. 0 d\\nd 3 vs. 0 a\\nd 0 vs. 0 b\\nd 0 vs. 0 c\\nmanutd fcbarca\\nd b\\nExplanation:\\nExample case 1: The total number of points and goal difference for each team is as follows:\\nmanutd:\\n16 points, goal difference\\n12\\nfcbarca:\\n8 points, goal difference\\n4\\nmanutd:\\n5 points, goal difference\\n\\xe2\\x88\\x925\\nlyon:\\n4 points, goal difference\\n\\xe2\\x88\\x9211\\nExample case 2: The total number of points and goal difference for each team is as follows:\\nd:\\n7 points, goal difference\\n2\\nb:\\n7 points, goal difference\\n1\\na:\\n7 points, goal difference\\n0\\nc:\\n7 points, goal difference\\n\\xe2\\x88\\x923\\nNote that in this test case, all teams have the same number of points, but teams with higher goal difference are ranked higher.'",
        "359": "b'Bitwise Tuples\\nRead problem statements in Vietnamese,\\nBengali, Mandarin Chinese, and Russian as well.\\nChef has two numbers\\nN and\\nM. Help Chef to find number of integer\\nN-tuples\\n(A\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n) such that\\n0\\xe2\\x89\\xa4A\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n\\xe2\\x89\\xa42\\nM\\n\\xe2\\x88\\x921 and\\nA\\n1\\n&A\\n2\\n&\\xe2\\x80\\xa6&A\\nN\\n=0, where\\n& denotes the bitwise AND operator.\\nSince the number of tuples can be large, output it modulo\\n10\\n9\\n+7.\\nInput\\nThe first line contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains two integers\\nN and\\nM.\\nOutput\\nFor each test case, output in a single line the answer to the problem modulo\\n10\\n9\\n+7.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa410\\n6\\n###Subtasks Subtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n4\\n1 2\\n2 2\\n4 2\\n8 4\\n1\\n9\\n225\\n228250597\\nExplanation:\\nTest Case\\n1: The only possible tuple is\\n(0).\\nTest Case\\n2: The tuples are\\n(0,0),\\n(0,1),\\n(0,2),\\n(0,3),\\n(1,0),\\n(2,0),\\n(3,0),\\n(1,2),\\n(2,1).'",
        "360": "b\"XOR with smallest element\\nChef has an array\\nA of length\\nN and an integer\\nX.\\nIn one operation, Chef does the following:\\nFind the smallest element in the current array. Let this be\\nS.\\nNext, pick any one index\\ni such that\\nA\\ni\\n=S\\nFinally, replace\\nA\\ni\\nwith\\nA\\ni\\n\\xe2\\x8a\\x95X\\nHere\\n\\xe2\\x8a\\x95 denotes the bitwise XOR operation.\\nFor example, if\\nA=[1,1,2] and\\nX=4, then in one move Chef can turn the array into either\\n[5,1,2] or\\n[1,5,2].\\nChef performs this operation exactly\\nY times. Let\\nB be final array obtained.\\nOutput the array\\nB in sorted order. Note that under this restriction, the output is unique.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains three space-separated integers\\nN,\\nX, and\\nY.\\nThe second line contains\\nN space-separated integers denoting the array\\nA.\\nOutput Format\\nFor each test case, output array\\nB in sorted order.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4Y\\xe2\\x89\\xa410\\n9\\n1\\xe2\\x89\\xa4A\\ni\\n,X\\xe2\\x89\\xa42\\n30\\nThe sum of\\nN over all test cases won't exceed\\n10\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n1 6 99\\n9\\n3 7 44\\n1 2 3\\n5 20 6\\n5 10 15 20 25\\n15 \\n3 5 6 \\n5 20 25 27 30\\nExplanation:\\nTest case\\n1: The array is initially\\n[9]. Since there is only one element, it will be modified in each step. So,\\nAfter the first operation, the array is\\n[15] (since\\n9\\xe2\\x8a\\x956=15)\\nAfter the second operation, the array is\\n[9] (since\\n15\\xe2\\x8a\\x956=9)\\nContinuing the above, it can be verified that after\\n99 steps, the array is\\n[15].\\nTest case\\n3: The sequence of steps is as follows:\\nInitially, the array is\\n[5,10,15,20,25]\\nAfter operation\\n1, it is\\n[17,10,15,20,25]\\nAfter operation\\n2, it is\\n[17,30,15,20,25]\\nAfter operation\\n3, it is\\n[17,30,27,20,25]\\nAfter operation\\n4, it is\\n[5,30,27,20,25]\\nAfter operation\\n5, it is\\n[17,30,27,20,25]\\nAfter operation\\n6, it is\\n[5,30,27,20,25]\\nRemember to print the output in sorted order.\"",
        "361": "b'Concat Sort\\nJJ has an array\\nA. He can perform the following operation on\\nA:\\nDivide\\nA into two subsequences\\nP and\\nQ such that each\\nA\\ni\\nbelongs to either\\nP or\\nQ.\\nSet\\nA:=P concat Q\\nHere\\nconcat denotes the concatenation operation. For e.g.\\n[2,1,5] concat [4,3]=[2,1,5,4,3].\\nIs it possible to make\\nA sorted in non-decreasing order after applying the above operation at most once?\\nNote: An array\\nX is a subsequence of an array\\nY if\\nX can be obtained by deletion of several (possibly, zero or all) elements from\\nY.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the size of the array\\nA.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\ndenoting the array\\nA.\\nOutput Format\\nFor each test case, output YES if it is possible to make the array\\nA sorted after applying the given operation at most once. Otherwise, output NO.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nSum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n6\\n4 5 6 1 2 3\\n5\\n1 3 5 2 4\\n5\\n5 10 7 11 9\\nYES\\nNO\\nYES\\nExplanation:\\nTest case\\n1: We can select\\nP=[1,2,3] and\\nQ=[4,5,6]. Therefore\\nA will become\\n[1,2,3,4,5,6] which is sorted.\\nTest case\\n2: It can be proven that it is not possible to sort\\nA by using the given operation at most once.\\nTest case\\n3: We can select\\nP=[5,7,9] and\\nQ=[10,11]. Therefore\\nA will become\\n[5,7,9,10,11] which is sorted.'",
        "362": "b'Charges\\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nThere are\\nN subatomic particles lined up in a row. There are two types: protons and electrons. Protons have a positive charge and are represented by\\n1, while electrons have a negative charge and are represented by\\n0.\\nOur current understanding of physics gives us a way to predict how the particles will be spaced out, if we know their charges. Two adjacent particles will be separated by\\n1 unit if they have opposite charges, and\\n2 units if they have the same charge.\\nWhen Chef is not in the kitchen, he is doing physics experiments on subatomic particles. He is testing the hypothesis by having\\nN particles in a row, and he will change the charge of a particle\\nK times. In the\\ni-th update, he will change the charge of the\\nQ\\ni\\n-th particle. After each update, find the distance between the first and last particle.\\nNote: Each update is persistent for further updates.\\nInput\\nThe first line contains an integer\\nT, the number of test cases. Then the test cases follow.\\nEach test case contains three lines of input.\\nThe first line contains two integers\\nN,\\nK.\\nThe second line contains a string\\nS of length\\nN, where\\nS\\ni\\nrepresents the initial charge on\\ni-th particle.\\nThe third line contains\\nK integers\\nQ\\n1\\n,Q\\n2\\n,\\xe2\\x80\\xa6,Q\\nK\\n, the positions of the changed particles.\\nOutput\\nFor each test case, output\\nK lines, where the\\ni-th line contains the answer after the updates\\nQ\\n1\\n,\\xe2\\x80\\xa6,Q\\ni\\nhave been made.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa45\\n1\\xe2\\x89\\xa4N,K\\xe2\\x89\\xa410\\n5\\nS contains only\\n0 and\\n1 characters.\\n1\\xe2\\x89\\xa4Q\\ni\\n\\xe2\\x89\\xa4N\\nThe sum of\\nK over all testcases is at most\\n2\\xe2\\x8b\\x8510\\n5\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n1\\n3 3\\n010\\n2 1 3\\n4\\n3\\n2\\nExplanation:\\nUpdate 1: After reversing the parity of particle\\n2, the new configuration is\\n000. Since all the particles have a similar charge, each is separated from the previous by a distance of\\n2 units. So the location of particle\\n3 is\\n2+2=4 units from the first particle.\\nUpdate 2: After reversing the parity of particle\\n1, the new configuration is\\n100. Here, the charges of particles\\n1 and\\n2 differ, so they are separated by\\n1 unit. The charges of particles\\n2 and\\n3 agree, so they are separated by\\n2 units. So, the location of particle\\n3 is\\n1+2=3 units from the first particle.\\nUpdate 3: After reversing the charge of particle\\n3, the new configuration is\\n101. Here, particles\\n1 and\\n2 are separated by\\n1 unit and particles\\n2 and\\n3 are separated by\\n1 unit. So the location of particle\\n3 is\\n1+1=2 units from the first particle.'",
        "363": "b'Chef and Interesting Subsequences\\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nChef has a sequence\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n. This sequence has exactly\\n2\\nN\\nsubsequences. Chef considers a subsequence of\\nA interesting if its size is exactly\\nK and the sum of all its elements is minimum possible, i.e. there is no subsequence with size\\nK which has a smaller sum.\\nHelp Chef find the number of interesting subsequences of the sequence\\nA.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains two space-separated integers\\nN and\\nK.\\nThe second line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 the number of interesting subsequences.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa4N\\xe2\\x89\\xa450\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4100 for each valid\\ni\\nSubtasks\\nSubtask #1 (30 points):\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa420\\nSubtask #2 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n1\\n4 2\\n1 2 3 4\\n1\\nExplanation:\\nExample case 1: There are six subsequences with length\\n2:\\n(1,2),\\n(1,3),\\n(1,4),\\n(2,3),\\n(2,4) and\\n(3,4). The minimum sum is\\n3 and the only subsequence with this sum is\\n(1,2).'",
        "364": "b\"Range Assign, Number of Distinct Elements Minimize\\nYou are given an array\\nA of\\nN positive integers.\\nIn one operation, you can do the following:\\nChoose integers\\ni and\\nj\\n(1\\xe2\\x89\\xa4i<j\\xe2\\x89\\xa4N), such that\\nA\\ni\\n=A\\nj\\n;\\nFor all\\nk\\n(i<k<j), change the value of\\nA\\nk\\nto\\nA\\ni\\n.\\nFind out whether\\nA can have at most\\n2 distinct values after using any (possibly zero) number of operations.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input:\\nThe first line of each test case contains\\nN - the size of the array.\\nThe next line contains\\nN integers,\\nA\\n1\\n,A\\n2\\n,A\\n3\\n,\\xe2\\x80\\xa6,A\\nN\\n- the elements of the array.\\nOutput Format\\nFor each test case, print YES if\\nA can have at most\\n2 distinct values after using any (possibly zero) number of operations and NO otherwise.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN over all test cases won't exceed\\n10\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n5\\n5 9 5 5 5\\n3\\n1 2 3\\n4\\n1 2 1 3\\n4\\n1 2 3 1\\nYES\\nNO\\nYES\\nYES\\nExplanation:\\nTest case\\n1: The array\\nA already has\\n2 distinct elements.\\nTest case\\n2: It is impossible to make operations such that\\nA has\\n2 distinct elements.\\nTest case\\n3: We can make an operation as:\\nChoose\\ni=1 and\\nj=3. Thus, we change\\nA\\n2\\nto\\nA\\n1\\n=1.\\nThe final array is\\n[1,1,1,3] which has two distinct elements.\\nTest case\\n4: We can make an operation as:\\nChoose\\ni=1 and\\nj=4. Thus, we change\\nA\\n2\\nand\\nA\\n3\\nto\\nA\\n1\\n=1.\\nThe final array is\\n[1,1,1,1] which has one distinct element.\"",
        "365": "b'Permutation and Palindrome\\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\\nYou are given a string s with length n. You should find a permutation P of numbers 1 through n such that if you apply this permutation on the string s, you will get a palindromic string.\\nThe result of applying a permutation P on the string s is a string t with length n such that for each i (1 \\xe2\\x89\\xa4 i \\xe2\\x89\\xa4 n), the i-th character of t is given as as t[i] = s[Pi].\\nInput\\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\\nThe first and only line of each test case contains the string s.\\nOutput\\nFor each test case, print a single line. If it is impossible to find a valid permutation P, this line should contain a single integer -1. Otherwise, it should contain n space-separated integers P1, P2, ..., Pn.\\nIf there are multiple valid permutations, you may print any one.\\nConstraints\\n1 \\xe2\\x89\\xa4 n \\xe2\\x89\\xa4 105\\ns will consist only of lowercase English letters (i.e. characters \\'a\\' through \\'z\\')\\nSubtasks\\nSubtask #1 (20 points): 1 \\xe2\\x89\\xa4 T, n \\xe2\\x89\\xa4 10\\nSubtask #2 (20 points): 1 \\xe2\\x89\\xa4 T, n \\xe2\\x89\\xa4 100\\nSubtask #3 (60 points): 1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 10\\nSample 1:\\nInput\\nOutput\\n4\\naa\\nbaa\\nabc\\nabab\\n1 2\\n2 1 3\\n-1\\n1 2 4 3\\nExplanation:\\nExample case 1: The string t obtained using the identity permutation will have t[1] = s[1] and t[2] = s[2]. That means t = \"aa\", which is a palindrome.\\nExample case 2: The characters of the string t obtained by applying the permutation 2, 1, 3 are t[1] = s[2], t[2] = s[1] and t[3] = s[3]. Therefore, t = \"aba\", which is a palindrome.\\nExample case 3: There is no way to find a permutation P such that we can obtain a palindrome from s using it.\\nExample case 4: Applying the permutation 1, 2, 4, 3 on s results in t = \"abba\", which is a palindrome. Another permutation that you may apply is 2, 1, 3, 4; this results in t = \"baab\", which is also a palindrome.'",
        "366": "b'Find eX\\nChef has\\n4 positive integers\\nA,\\nB,\\nC, and\\nD such that\\nA\\n%\\nB=C\\n%\\nD.\\nFind the smallest positive integer\\nX such that\\n(A+X)\\n%\\nB=(C+X)\\n%\\nD holds.\\nIt is guaranteed that such\\nX always exists.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case contains four space-separated integers\\nA,\\nB,\\nC, and\\nD.\\nOutput Format\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x94\\nX, the smallest integer satisfying the conditions.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A,B,C,D\\xe2\\x89\\xa410\\n9\\nA\\n%\\nB=C\\n%\\nD\\nSample 1:\\nInput\\nOutput\\n3\\n4 7 4 8\\n5 1 8 2\\n3 2 4 3\\n1\\n2\\n5\\nExplanation:\\nTest case\\n1: The smallest\\nX satisfying the equation is\\n1, as\\n(4+1)\\n%\\n7=(4+1)\\n%\\n8=5.\\nTest case\\n2: The smallest\\nX satisfying the equation is\\n2, as\\n(5+2)\\n%\\n1=(8+2)\\n%\\n2=0.'",
        "367": "b\"Frequency Array Retrieval\\nConsider an array\\nA consisting of\\nN positive elements. The frequency array of\\nA is the array\\nB of size\\nN such that\\nB\\ni\\n= frequency of element\\nA\\ni\\nin\\nA.\\nFor example, if\\nA=[4,7,4,11,2,7,7], the frequency array\\nB=[2,3,2,1,1,3,3].\\nYou have lost the array\\nA, but fortunately you have the array\\nB.\\nYour task is to construct the lexicographically smallest array\\nA such that:\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n5\\n;\\nThe frequency array of\\nA is equal to\\nB.\\nIf no such array\\nA exists, print\\n\\xe2\\x88\\x921.\\nNote: Array\\nX is lexicographically smaller than array\\nY, if\\nX\\ni\\n<Y\\ni\\n, where\\ni is the first index where\\nX and\\nY differ.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains a single integer\\nN \\xe2\\x80\\x94 the size of the array.\\nThe next line contains\\nN space-separated integers -\\nB\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nN\\n, the frequency array.\\nOutput Format\\nFor each test case, output on a new line,\\nN space separated integers -\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n, the lexicographically smallest array\\nA. If no such array\\nA exists, print\\n\\xe2\\x88\\x921.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4B\\ni\\n\\xe2\\x89\\xa410\\n5\\nThe sum of\\nN over all test cases won't exceed\\n10\\n6\\n.\\nSample 1:\\nInput\\nOutput\\n5\\n5\\n2 3 3 3 2\\n5\\n1 1 1 1 1\\n5\\n5 5 5 5 5\\n3\\n1 2 4\\n8\\n1 3 2 3 2 2 2 3\\n1 2 2 2 1\\n1 2 3 4 5\\n1 1 1 1 1\\n-1\\n1 2 3 2 3 4 4 2\\nExplanation:\\nTest case\\n1: The lexicographically smallest array\\nA having the given frequency array\\nB is\\nA=[1,2,2,2,1]. The element\\nA\\n1\\nand\\nA\\n5\\nhave frequency\\n2 while\\nA\\n2\\n,A\\n3\\n, and\\nA\\n4\\nhave frequency\\n3.\\nTest case\\n2: The lexicographically smallest array\\nA having the given frequency array\\nB is\\nA=[1,2,3,4,5]. Each element in\\nA has frequency\\n1.\\nTest case\\n3: The lexicographically smallest array\\nA having the given frequency array\\nB is\\nA=[1,1,1,1,1]. Each element in\\nA has frequency\\n5.\\nTest case\\n4: No possible array\\nA exists having the given frequency array.\"",
        "368": "b'OR Matrix\\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\\nYou are given a matrix of integers\\nA with\\nN rows (numbered\\n1 through\\nN) and\\nM columns (numbered\\n1 through\\nM). Each element of this matrix is either\\n0 or\\n1.\\nA move consists of the following steps:\\nChoose two different rows\\nr\\n1\\nand\\nr\\n2\\nor two different columns\\nc\\n1\\nand\\nc\\n2\\n.\\nApply the bitwise OR operation with the second row\/column on the first row\/column. Formally, if you chose two rows, this means you should change\\nA\\nr\\n1\\n,k\\nto\\nA\\nr\\n1\\n,k\\n\\xe2\\x88\\xa8A\\nr\\n2\\n,k\\nfor each\\n1\\xe2\\x89\\xa4k\\xe2\\x89\\xa4M; if you chose two columns, then you should change\\nA\\nk,c\\n1\\nto\\nA\\nk,c\\n1\\n\\xe2\\x88\\xa8A\\nk,c\\n2\\nfor each\\n1\\xe2\\x89\\xa4k\\xe2\\x89\\xa4N.\\nFor each element of the matrix, compute the minimum number of moves required to make it equal to\\n1 or determine that it is impossible. Note that these answers are independent, i.e. we are starting with the initial matrix for each of them.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains two space-separated integers\\nN and\\nM.\\nN lines follow. For each\\ni (\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N), the\\ni-th of these lines contains\\nM integers\\nA\\ni,1\\n,A\\ni,2\\n,\\xe2\\x80\\xa6,A\\ni,M\\nNOT separated by spaces.\\nOutput\\nFor each test case, print\\nN lines. For each valid\\ni, the\\ni-th of these lines should contain\\nM space-separated integers; for each valid\\nj, the\\nj-th of these integers should be the minimum number of moves required to make\\nA\\ni,j\\nequal to\\n1, or\\n\\xe2\\x88\\x921 if it is impossible.\\n###Constraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa41,000\\nA\\ni,j\\n\\xe2\\x88\\x88{0,1} for each valid\\ni,j\\nthe sum of\\nN\\xe2\\x8b\\x85M for all test cases does not exceed\\n1,000,000\\nSample 1:\\nInput\\nOutput\\n1\\n3 3\\n010\\n000\\n001\\n1 0 1\\n2 1 1\\n1 1 0'",
        "369": "b'Fire Escape Routes\\nThere are\\nN people working in a building, and each one works in a separate cabin. Chef\\xe2\\x80\\x99s employees are numbered by integers from\\n1 to\\nN, inclusive. Chef wants to ensure the safety of his employees. He wants to have fire escapes in the building and wants to train the employees to use these by conducting mock drills.\\nChef knows that the number of people working in his office can be very large. In order to avoid crowding of a common fire escape route during emergency, Chef has decided to build multiple fire escapes. For the safety of every employee, each cabin has a fire exit which is connected to one of the fire escape routes.\\nA lot of employees are friends with each other. The friendship is mutual. This means that if employee\\ni is a friend of employee\\nj then employee\\nj is a friend of employee\\ni as well. But friendship is NOT necessarily transitive. This means that if employee\\ni is a friend of employee\\nj AND employee\\nj is a friend of employee\\nk, then employee\\ni and employee\\nk need not necessarily be friends.\\nIf two employees are friends, they do not want to escape through different routes. This complicates the task for the Chef. As already mentioned, he wants to have the maximum number of fire escape routes to ensure maximum safety. Also, for every escape route, one of the employees using that route needs to be appointed as the fire drill captain. The captain will be responsible for conducting the mock drills and train all the employees using that route. Your task is simple. Given the number of employees and the friendship list, you need to tell the Chef the maximum number of fire escape routes that he can have in the building and the number of ways of selecting the captains for every route. Since the number of ways can be really large, output this value modulo\\n10\\n9\\n+7.\\nInput\\nThe first line of the input contains a single integer\\nT, denoting the number of test cases. The description of T test cases follows.\\nThe first line of each test case contains two space-separated integers\\nN and\\nM, denoting the number of employees and the number of friendship relations, respectively.\\nEach of the following\\nM lines contains two space-separated integers\\ni and\\nj, denoting that employee\\ni and employee\\nj are friends.\\nOutput\\nFor each test case, output a single line containing two space separated integers, denoting the maximum number of distinct fire escape routes that can be constructed and the number of ways of selecting the captains modulo\\n10\\n9\\n+7.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa45\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n0\\xe2\\x89\\xa4M\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4i,j\\xe2\\x89\\xa4N\\ni\\n\\xee\\x80\\xa0\\n=j\\nFor any pair of employees\\ni and\\nj such that\\n1\\xe2\\x89\\xa4i,j\\xe2\\x89\\xa4N, at most one pair among\\n(i,j) and\\n(j,i) will appear in the input\\nSample 1:\\nInput\\nOutput\\n3\\n4 2\\n1 2\\n2 3\\n5 3\\n1 2\\n2 3\\n1 3\\n6 3\\n1 2\\n3 4\\n5 6\\n2 3\\n3 3\\n3 8\\nExplanation:\\nExample case 1: Here employees\\n1 and\\n2 are friends and should share the same fire escape. Also employees\\n2 and\\n3 share the same fire escape. This means employees\\n1,\\n2, and\\n3 will have a common route. But to maximize number of routes Chef could assign another route to employee\\n4 since it is not a friend of other employee. So we have two escape routes with the following distribution of employees by routes:\\n{1,2,3},\\n{4}. Therefore, there are\\n3 ways to chose drill captains:\\n(1,4),\\n(2,4),\\n(3,4), where first element in the pair denotes the captain for the first route and second element denotes the captain for the second route.\\nExample case 2: Here the optimal distribution of employees by routes is\\n{1,2,3},\\n{4},\\n{5}. Therefore, there are\\n3 ways to chose drill captains:\\n(1,4,5),\\n(2,4,5),\\n(3,4,5).\\nExample case 3: Here the optimal distribution of employees by routes is\\n{1,2},\\n{3,4},\\n{5,6}. Therefore, there are 8 ways to chose drill captains:\\n(1,3,5),\\n(1,3,6),\\n(1,4,5),\\n(1,4,6),\\n(2,3,5),\\n(2,3,6),\\n(2,4,5),\\n(2,4,6).'",
        "370": "b'Three Numbers\\nChef has three numbers\\nA,B, and\\nC.\\nHe can do the following type of operation:\\nSelect two numbers amongst\\nA,B, and\\nC;\\nAdd\\n1 to the selected numbers;\\nSubtract\\n1 from the remaining number.\\nDetermine whether Chef can make all the three numbers equal after applying the above operation any number of times.\\nIf yes, output the minimum number of operations required by Chef.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of single line containing\\n3 space-separated integers\\nA,B, and\\nC.\\nOutput Format\\nFor each test case, output\\n\\xe2\\x88\\x921 if the numbers cannot be made equal, else output the minimum number of operations required to make them equal.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4A,B,C\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n4\\n1 1 2\\n3 7 3\\n4 4 4\\n1 2 3\\n-1\\n2\\n0\\n-1\\nExplanation:\\nTest case\\n1: It can be proven that we cannot make the numbers equal using any number of operations.\\nTest case\\n2: We require a minimum of\\n2 operations to make the numbers equal:\\nOperation\\n1: Select the numbers\\nA and\\nC. Thus,\\nA and\\nC become\\n3+1=4 and\\n3+1=4 respectively. Also,\\nB becomes\\n7\\xe2\\x88\\x921=6.\\nOperation\\n2: Select the numbers\\nA and\\nC. Thus,\\nA and\\nC become\\n4+1=5 and\\n4+1=5 respectively. Also,\\nC becomes\\n6\\xe2\\x88\\x921=5.\\nThus, all\\n3 numbers are equal after\\n2 operations.\\nTest case\\n3: Since all\\n3 numbers are already equal, we require no operations.\\nTest case\\n4: It can be proven that we cannot make the numbers equal using any number of operations.'",
        "371": "b\"Chef and Water Car\\nRead problem statements in Mandarin, Russian, and Vietnamese as well.\\nChef is a great mechanic. As the cost of petrol is increasing day by day he decided to build a water car to take his girlfriend Natasha on a date. Water car has great build quality but is able to travel only\\n1 Km on every\\n1 liter of water. To show off his water car to Natasha he took her to the formula racing track which is an (\\nN\\xe2\\x88\\x921) km long road with checkpoints numbered\\n1 to\\nN from left to right. The distance between two adjacent checkpoints is\\n1 Km.\\nInitially, Chef is at checkpoint number\\n1 and the tank of the water car is empty. At every checkpoint, there is a water station, but the cost of filling\\n1 liter of water at a checkpoint is equal to the checkpoint number. Chef can not store more than\\nV liters of water in the tank of a car. Chef is interested in both minimum as well as the maximum cost of filling that can happen to reach the checkpoint number\\nN.\\nYou shouldn't have any water left after reaching\\nN\\nth\\ncheckpoint. Also, you are not allowed to pour out water.\\nInput Format\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains two space-separated integers\\nN,V.\\nOutput Format\\nFor each test case, output two integers separated by space representing the maximum and minimum cost of filling respectively.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n3\\n1\\xe2\\x89\\xa4N,V\\xe2\\x89\\xa410\\n9\\nSubtasks\\nSubtask 1 (20 points):\\nV=1\\nSubtask 2 (80 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n3 1\\n4 2\\n4 3\\n3 3\\n6 4\\n6 3\\nExplanation:\\nTest case\\n1: Given\\nN=3 and\\nV=1, Chef will start at checkpoint\\n1, fill\\n1 liter of water at a cost of\\n1 and move\\n1 Km right to reach checkpoint\\n2. At checkpoint\\n2, Chef will fill\\n1 liter of water again at a cost of\\n2 and move\\n1 Km right to reach the destination i.e checkpoint\\n3. Hence total cost incurred is\\n3. There is no other way to reach the destination with a different expense.\"",
        "372": "b\"The Vowel Matrix\\nWelcome to The Mega City!\\nNeo finds himself in a high-stakes situation. He has a string\\nS of length\\nN and his task is to crack the string using the vowel matrix.\\nThe vowel matrix is a unique cryptographic scheme where the string is sliced into multiple pieces, such that, each piece contains exactly\\nK vowels.\\nDetermine the number of ways you can slice the string\\nS using vowel matrix scheme. Since the number can be huge, print it modulo\\n10\\n9\\n+7.\\nNote:\\nThe characters a, e, i, o, and u are considered vowels in lowercase english alphabets.\\nIt is guaranteed that\\nS contains at least one vowel and the number of vowels in\\nS is a multiple of\\nK.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains two space-separated integers\\nN and\\nK, the length of string and the number of vowels required in each piece of string.\\nThe second line contains the string\\nS, consisting of lowercase english letters.\\nOutput Format\\nFor each test case, output on a single line, the number of ways you can slice the string\\nS using vowel matrix scheme. Since the number can be huge, print it modulo\\n10\\n9\\n+7.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n6\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa4N\\nThe sum of\\nN over all test cases won't exceed\\n10\\n6\\n.\\nIt is guaranteed that the number of vowels in\\nS is a multiple of\\nK.\\nSample 1:\\nInput\\nOutput\\n2 \\n3 1\\nneo\\n10 2\\nbabylonian\\n1\\n2\\nExplanation:\\nTest case\\n1: There is only one possible way to slice the string such that all pieces have\\n1 vowel each:\\nne\\n\\xe2\\x88\\xa3 o.\\nTest case\\n2: There are two possible ways to slice the string such that all pieces have\\n2 vowels each:\\nbabylo\\n\\xe2\\x88\\xa3 nian\\nbabylon\\n\\xe2\\x88\\xa3 ian\"",
        "373": "b\"Fencing\\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nThere is a field with plants \\xe2\\x80\\x94 a grid with\\nN rows (numbered\\n1 through\\nN) and\\nM columns (numbered\\n1 through\\nM); out of its\\nNM cells,\\nK cells contain plants, while the rest contain weeds. Two cells are adjacent if they have a common side.\\nYou want to build fences in the field in such a way that the following conditions hold for each cell that contains a plant:\\nit is possible to move from this cell to each adjacent cell containing a plant without crossing any fences\\nit is impossible to move from this cell to any cell containing weeds or to leave the grid without crossing any fences\\nThe fences can only be built between cells or on the boundary of the grid, i.e. on the sides of cells. The total length of the built fences is the number of pairs of side-adjacent cells such that there is a fence built on their common side plus the number of sides of cells on the boundary of the grid which have fences built on them. Find the minimum required total length of fences that need to be built.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains three space-separated integers\\nN,\\nM and\\nK.\\nK lines follow. Each of these lines contains two space-separated integers\\nr and\\nc denoting that the cell in row\\nr and column\\nc contains a plant.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x94 the minimum required length of fences.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa410\\n9\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4r\\xe2\\x89\\xa4N\\n1\\xe2\\x89\\xa4c\\xe2\\x89\\xa4M\\nthe cells containing plants are pairwise distinct\\nSubtasks\\nSubtask #1 (30 points):\\n1\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa41,000\\nSubtask #2 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n4 4 9\\n1 4\\n2 1 \\n2 2\\n2 3\\n3 1\\n3 3\\n4 1\\n4 2\\n4 3\\n4 4 1\\n1 1\\n20\\n4\\nExplanation:\\nExample case 1: The field looks like this ('x' denotes a cell containing a plant, '.' denotes a cell containing weeds):\\n...x\\nxxx.\\nx.x.\\nxxx.\\nAn optimal solution is to build fences around the topmost plant (with length\\n4), around the remaining eight plants (with length\\n12) and around the hole between them (with length\\n4). The total length is\\n4+12+4=20.\"",
        "374": "b\"Beautiful Array\\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\\nA sequence of integers is beautiful if each element of this sequence is divisible by 4.\\nYou are given a sequence a1, a2, ..., an. In one step, you may choose any two elements of this sequence, remove them from the sequence and append their sum to the sequence. Compute the minimum number of steps necessary to make the given sequence beautiful.\\nInput\\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\\nThe first line of each test case contains a single integer n.\\nThe second line contains n space-separated integers a1, a2, ..., an.\\nOutput\\nFor each test case, print a single line containing one number \\xe2\\x80\\x94 the minimum number of steps necessary to make the given sequence beautiful. If it's impossible to make the sequence beautiful, print -1 instead.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 105\\n1 \\xe2\\x89\\xa4 n \\xe2\\x89\\xa4 105\\n1 \\xe2\\x89\\xa4 sum of n over all test cases \\xe2\\x89\\xa4 106\\n0 \\xe2\\x89\\xa4 ai \\xe2\\x89\\xa4 109\\nSample 1:\\nInput\\nOutput\\n1\\n7\\n1 2 3 1 2 3 8\\n3\"",
        "375": "b\"Magnet Sort\\nThere is an array\\nA with\\nN elements. Each element of\\nA has a fixed polarity: either north or south.\\nChef is allowed to perform some (possibly zero) operations on the array\\nA. In one operation, Chef can:\\nPick some subarray of array\\nA, such that, the first and last elements of the subarray have different polarities, and, rearrange the elements in this subarray any way he wants.\\nNote that the polarity of each element remains unchanged after an operation.\\nFind the minimum number of operations required to sort the array in non-decreasing order, or state that it is impossible.\\nA subarray of\\nA is obtained by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\\nInput Format\\nThe first line contains an integer\\nT, denoting the number of test cases. The\\nT test cases then follow.\\nThe first line of each test case contains a single integer\\nN.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nThe third line of each test case contains a string of length\\nN, the\\nith character of which is either\\nN or\\nS, representing that the\\nith element of\\nA has north or south polarity, respectively.\\nOutput Format\\nFor each test case, if it impossible to sort the array, output\\n\\xe2\\x88\\x921. Otherwise, output a single integer: the minimum number of operations required to sort the array.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN across all test cases doesn't exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n6\\n5\\n1 3 2 3 7\\nNNSNS\\n2\\n2 1\\nSS\\n3\\n1 8 12\\nSNS\\n3\\n3 2 1\\nNSN\\n5\\n1 2 3 5 4\\nNSNSN\\n5\\n1 1 2 2 1\\nSNSNN\\n1\\n-1\\n0\\n2\\n1\\n1\\nExplanation:\\nLet's represent elements with a polarity of north in\\nred, and elements with a polarity of south in\\nblue. The polarity of each element is also labelled above it.\\nIn the first test case, we can sort the array in a single operation as follows.\\nRearrange the subarray\\n[A\\n1\\n,A\\n2\\n,A\\n3\\n]:\\n[\\n1\\nN\\n,\\n3\\nN\\n,\\n2\\nS\\n,\\n3\\nN\\n,\\n7\\nS\\n]\\xe2\\x86\\x92[\\n1\\nN\\n,\\n2\\nS\\n,\\n3\\nN\\n,\\n3\\nN\\n,\\n7\\nS\\n].\\nIn the second test case, the array\\n[\\n2\\nS\\n,\\n1\\nS\\n] cannot be sorted, since no operations can be performed.\\nIn the third test case, the array is already sorted, so the answer is\\n0.\\nIn the fourth test case, we can sort the array in two operations as follows.\\nRearrange the subarray\\n[A\\n2\\n,A\\n3\\n]:\\n[\\n3\\nN\\n,\\n2\\nS\\n,\\n1\\nN\\n]\\xe2\\x86\\x92[\\n3\\nN\\n,\\n1\\nN\\n,\\n2\\nS\\n].\\nRearrange the subarray\\n[A\\n1\\n,A\\n2\\n,A\\n3\\n]:\\n[\\n3\\nN\\n,\\n1\\nN\\n,\\n2\\nS\\n]\\xe2\\x86\\x92[\\n1\\nN\\n,\\n2\\nS\\n,\\n3\\nN\\n].\"",
        "376": "b'The One with All the Candy\\nMonica decides that she would like to get to know the neighbours in the apartment better. She makes a batch of wonderful chocolates and hangs them on the door in a basket hoping that her neighbors will take some and they can meet. The neighbours (including Joey) eventually go crazy over the candy and demand more. Eventually, she keeps a bowl full of chocolates at the door for the last time.\\nThere are\\nN neighbours. The\\ni\\nth\\nneigbhour has initial energy equal to\\nA\\ni\\n. There is one bowl filled with chocolates. The neighbours are made to stand in a row and the bowl is passed around by obeying the following rules:\\nAny person can hold the bowl initially.\\nIf the person holding the bowl has positive energy, he\/she passes the bowl to the person on the immediate right of him\/her. The rightmost person in the row passes the bowl to the leftmost person in the row.\\nThe act of passing the bowl takes\\n1 second.\\nIf the person holding the bowl has non-positive energy, he\/she drops the bowl.\\nAfter each pass, the energy of the person reduces by\\n1.\\nAmong all possible ways in which the\\nN neighbours start the game, find the maximum time until the bowl is dropped.\\nInput Format\\nFirst line will contain\\nT, number of testcases. Then the testcases follow.\\nFirst line of each testcase contains one integer\\nN.\\nSecond line of each testcase contains of\\nN integers, denoting the elements of array\\nA.\\nOutput Format\\nFor each testcase, output in a single line the maximum time until the bowl is dropped.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n0\\xe2\\x89\\xa4A[i]\\xe2\\x89\\xa410\\n6\\nSum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n3\\n2 1 1\\n3\\n0 5 0\\n4\\n3 0 2 1\\n4\\n1\\n3\\nExplanation:\\nTest case 1: One of the optimal orders in which all the neighbours can stand in the row is:\\n1\\n\\xe2\\x86\\x92\\n2\\n\\xe2\\x86\\x92\\n3\\n\\xe2\\x86\\x92\\n1. The bowl is initially with person\\n1.\\nPerson\\n1, in one second, passes the bowl to person\\n2 and his\/her own energy becomes\\n1.\\nPerson\\n2, in one second, passes the bowl to person\\n3 and his\/her own energy becomes\\n0.\\nPerson\\n3, in one second, passes the bowl to person\\n1 and his\/her own energy becomes\\n0.\\nPerson\\n1, in one second, passes the bowl to person\\n2 and his\/her own energy becomes\\n0.\\nPerson\\n2 has\\n0 energy, so he\/she drops the bowl. Thus, the bowl is dropped after\\n4 seconds.\\nTest case 2: One of the optimal orders in which all the neighbours can stand in the row is:\\n2\\n\\xe2\\x86\\x92\\n1\\n\\xe2\\x86\\x92\\n3\\n\\xe2\\x86\\x92\\n2. The bowl is initially with person\\n2. Thus, it would travel as\\n2\\n\\xe2\\x86\\x92\\n1. The bowl can not be passed further due to\\n0 energy of person\\n1.'",
        "377": "b\"Subsegment Divisibility\\nJJ challenges his friend GG to construct an array\\nA containing\\nN distinct elements such that the following conditions hold:\\nFor all\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N,\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n5\\nFor every subarray of length\\n\\xe2\\x89\\xa52, the sum of all the elements of the subarray is not divisible by the length of the subarray\\nPlease help perplexed GG to complete JJ's challenge.\\nInput Format\\nThe first line contains\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains an integer\\nN - the size of the array\\nA to be constructed.\\nOutput Format\\nFor each test case, output an array\\nA containing\\nN distinct elements which satisfy the given conditions.\\nIf there are multiple arrays that satisfy the conditions, print any.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4500\\nSample 1:\\nInput\\nOutput\\n2\\n3\\n4\\n7 2 5\\n3 18 11 2\\nExplanation:\\nTest case-1: Following are the subarrays of length\\n\\xe2\\x89\\xa52:\\nLength=2:\\nsum([7,2])=9,\\nsum([2,5])=7\\nLength=3:\\nsum([7,2,5])=14\\nWe can see that for each of these subarrays, the sum is not divisible by the length.\\nTest case-2: Following are the subarrays of length\\n\\xe2\\x89\\xa52:\\nLength=2:\\nsum([3,18])=21,\\nsum([18,11])=29,\\nsum([11,2])=13\\nLength=3:\\nsum([3,18,11])=32,\\nsum([18,11,2])=31\\nLength=4:\\nsum([3,18,11,2])=34\\nWe can see that for each of these subarrays, the sum is not divisible by the length.\"",
        "378": "b'Chef and Pepperoni Pizza\\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\\nChef has a pepperoni pizza in the shape of a\\nN\\xc3\\x97N grid; both its rows and columns are numbered\\n1 through\\nN. Some cells of this grid have pepperoni on them, while some do not. Chef wants to cut the pizza vertically in half and give the two halves to two of his friends. Formally, one friend should get everything in the columns\\n1 through\\nN\/2 and the other friend should get everything in the columns\\nN\/2+1 through\\nN.\\nBefore doing that, if Chef wants to, he may choose one row of the grid and reverse it, i.e. swap the contents of the cells in the\\ni-th and\\nN+1\\xe2\\x88\\x92i-th column in this row for each\\ni (\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\/2).\\nAfter the pizza is cut, let\\'s denote the number of cells containing pepperonis in one half by\\np\\n1\\nand their number in the other half by\\np\\n2\\n. Chef wants to minimise their absolute difference. What is the minimum value of\\n\\xe2\\x88\\xa3p\\n1\\n\\xe2\\x88\\x92p\\n2\\n\\xe2\\x88\\xa3?\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN.\\nN lines follow. For each\\ni (\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N), the\\ni-th of these lines contains a string with length\\nN describing the\\ni-th row of the grid; this string contains only characters \\'1\\' (denoting a cell with pepperonis) and \\'0\\' (denoting a cell without pepperonis).\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x94 the minimum absolute difference between the number of cells with pepperonis in the half-pizzas given to Chef\\'s friends.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41,000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa41,000\\nN is even\\nthe sum of\\nN\\xe2\\x8b\\x85N over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n6\\nSample 1:\\nInput\\nOutput\\n2\\n6\\n100000\\n100000\\n100000\\n100000\\n010010\\n001100\\n4\\n0011\\n1100\\n1110\\n0001\\n2\\n0\\nExplanation:\\nExample case 1: Initially,\\n\\xe2\\x88\\xa3p\\n1\\n\\xe2\\x88\\x92p\\n2\\n\\xe2\\x88\\xa3=4, but if Chef reverses any one of the first four rows from \"100000\" to \"000001\",\\n\\xe2\\x88\\xa3p\\n1\\n\\xe2\\x88\\x92p\\n2\\n\\xe2\\x88\\xa3 becomes\\n2.\\nExample case 2: Initially,\\n\\xe2\\x88\\xa3p\\n1\\n\\xe2\\x88\\x92p\\n2\\n\\xe2\\x88\\xa3=0. We cannot make that smaller by reversing any row.'",
        "379": "b\"A Weird Device\\nYou were strolling outside the restaurant at the end of the universe. On a metaspiral path you stumble upon a weird device which takes a three-digit number as input and processes it. The Hitchhiker's guide to the galaxy explains that it processes the input in the following manner:\\nMultiplies it with 13, followed by 11 and then 7\\nOutputs all the distinct three-digit numbers possible from the digits of the new number (each digit can only be used once)\\nYour friend Zaphod is in a playful mood, and does the following with the device-\\nGiven a three-digit positive number\\nK, he feeds it to the device for processing.\\nHe then takes the numbers it gives as output, and send each of them through the device and again collect all the numbers sent out.\\nRepeats the above step\\nN times.\\nTo test your wit, he challenges you to find the number of distinct 3-digit numbers which the device outputs over the\\nN steps. Can you?\\nInput:\\nFirst line will contain\\nT, number of testcases. Then the testcases follow.\\nEach testcase contains of a single line of input, two integers\\nK,N.\\nOutput:\\nFor each testcase, output a single integer denoting the number of distinct 3-digit numbers which the device outputs over the\\nN steps.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n5\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n9\\nEach digit of\\nK is non-zero\\nSample 1:\\nInput\\nOutput\\n1\\n123 5\\n27\"",
        "380": "b\"Joker and Batman\\nRead problem statements in Russian, Mandarin Chinese, Bengali, and Vietnamese as well.\\nDuring a fight with the Joker, Batman's eyes lose the capability to distinguish between some pairs of colors.\\nEach color has an integer ID from\\n1 to\\nN. There are\\nM lists where each color belongs to exactly one list. Batman can distinguish colors belonging to different lists, but he cannot distinguish colors belonging to the same list.\\nGiven a strip of\\nL colors, find the different number of segments Batman will see as a result of his disability. Two positions of the strip are said to belong to the same segment if they are adjacent on the strip and Batman cannot distinguish their colors. See the sample explanation for clarity.\\nInput Format\\nThe first line contains an integer\\nT, the number of test cases. Then the test cases follow.\\nThe first line contain three integers\\nN,\\nM, and\\nL - the number of colors, the number of lists, and the length of the strip, respectively.\\nEach of the next\\nM lines describes a list. It begins with an integer\\nK\\ni\\n, the length of the\\ni-th list, followed by\\nK\\ni\\nintegers\\nA\\ni1\\n,A\\ni2\\n,\\xe2\\x80\\xa6,A\\niK\\ni\\n- the color IDs of the\\ni-th list.\\nThe next line contains\\nL integers\\nS\\n1\\n,S\\n2\\n,\\xe2\\x80\\xa6,S\\nL\\n- the color IDs of the strip.\\nOutput Format\\nFor each test case, output in a single line the answer to the problem.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4M\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4L\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4K\\ni\\n,A\\nij\\n,S\\ni\\n\\xe2\\x89\\xa4N\\n\\xe2\\x88\\x91\\ni=1\\nM\\nK\\ni\\n=N\\nEach color belongs to exactly one list.\\nSample 1:\\nInput\\nOutput\\n3\\n2 2 2\\n1 2\\n1 1\\n2 1\\n2 2 4\\n1 1\\n1 2\\n1 2 2 1\\n3 2 3\\n2 1 3\\n1 2\\n1 3 1\\n2\\n3\\n1\\nExplanation:\\nTest Case 1: Since the strip is composed of colors from different lists, the answer is the length of the strip, which is\\n2.\\nTest Case 2: The first and second index have colors from different lists, and the third and fourth index have colors from different lists. So the strip is seen to be composed of\\n3 consecutive segments.\\nTest Case 3: Since the strip is composed of colors from the same list, the answer is\\n1 segment.\"",
        "381": "b'Worthy Matrix\\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nChef found a matrix\\nA with\\nN rows (numbered\\n1 through\\nN) and\\nM columns (numbered\\n1 through\\nM), where for each row\\nr and column\\nc, the cell in row\\nr and column\\nc (denoted by\\n(r,c)) contains an integer\\nA\\nr,c\\n.\\nThis matrix has two interesting properties:\\nThe integers in each row form a non-decreasing sequence, i.e. for each valid\\ni,\\nA\\ni,1\\n\\xe2\\x89\\xa4A\\ni,2\\n\\xe2\\x89\\xa4\\xe2\\x80\\xa6\\xe2\\x89\\xa4A\\ni,M\\n.\\nThe integers in each column also form a non-decreasing sequence, i.e. for each valid\\nj,\\nA\\n1,j\\n\\xe2\\x89\\xa4A\\n2,j\\n\\xe2\\x89\\xa4\\xe2\\x80\\xa6\\xe2\\x89\\xa4A\\nN,j\\n.\\nA\\nK-worthy submatrix is a square submatrix of\\nA, i.e. a submatrix with\\nl rows and\\nl columns, for any integer\\nl, such that the average of all the integers in this submatrix is\\n\\xe2\\x89\\xa5K.\\nChef wants you to find the number of\\nK-worthy submatrices of\\nA.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains three space-separated integers\\nN,\\nM and\\nK.\\nN lines follow. For each valid\\ni, the\\ni-th of these lines contains\\nM space-separated integers\\nA\\ni,1\\n,A\\ni,2\\n,A\\ni,3\\n,\\xe2\\x80\\xa6,A\\ni,M\\n.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 the number of\\nK-worthy submatrices of\\nA.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4N\\xe2\\x8b\\x85M\\xe2\\x89\\xa410\\n6\\nN\\xe2\\x89\\xa4M\\n0\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n9\\n0\\xe2\\x89\\xa4A\\nr,c\\n\\xe2\\x89\\xa410\\n9\\nfor each valid\\nr,c\\nthe sum of\\nN\\xe2\\x8b\\x85M over all test cases does not exceed\\n10\\n6\\nSubtasks\\nSubtask #1 (15 points): the sum of\\nN\\xe2\\x8b\\x85M over all test cases does not exceed\\n10\\n3\\nSubtask #2 (25 points): the sum of\\nN\\xe2\\x8b\\x85M over all test cases does not exceed\\n4\\xe2\\x8b\\x8510\\n5\\nSubtask #3 (60 points): original constraints\\nSample 1:\\nInput\\nOutput\\n1\\n3 3 4\\n2 2 3\\n3 4 5\\n4 5 5\\n7\\nExplanation:\\nExample case 1: The following are the seven\\n4-worthy submatrices:\\n[\\n[\\n3\\n4\\n4\\n5\\n] with average\\n4; this matrix occurs only once\\n[\\n[\\n4\\n5\\n5\\n5\\n] with average\\n4.75; this matrix also occurs only once\\n[\\n[\\n4\\n] with average\\n4; we find this matrix twice in\\nA\\n[\\n[\\n5\\n] with average\\n5; we find this matrix\\n3 times in\\nA'",
        "382": "b'Dazzling Even-Odd Challenge\\nDazzler has an interesting task for you.\\nYou will be given an array\\nA of\\nN positive integers such that:\\nN is always even.\\nExactly\\n2\\nN\\nelements in the array are even and\\n2\\nN\\nelements are odd.\\nIn one operation, you should do the following steps:\\nChoose two different indices\\ni and\\nj\\n(1\\xe2\\x89\\xa4i,j\\xe2\\x89\\xa4N).\\nSet\\nA\\ni\\n:=A\\ni\\n+1.\\nSet\\nA\\nj\\n:=A\\nj\\n\\xe2\\x88\\x921.\\nYou need to apply some finite (possibly zero) number of operations on the array such that:\\nThe parity of the final element at each index is same as the parity of the initial element at that index. For example, if the\\ni\\nth\\nelement in the initial array is even, then, the\\ni\\nth\\nelement in the final array must be even as well.\\nAll the\\n2\\nN\\nodd elements in the final array are equal.\\nAll the\\n2\\nN\\neven elements in the final array are equal.\\nPrint YES if it is possible to meet all the above conditions after doing some finite (possibly zero) number of operations. Otherwise, print NO.\\nInput Format\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nFirst line of each test case contains\\nN, number of elements in the array\\nA. Note that,\\nN is even.\\nSecond line of each test case contains\\nN space-separated positive integers, the elements of the array.\\nOutput Format\\nFor each test case, output in a single line, YES if it is possible to meet all the given conditions after doing some finite (possibly zero) number of operations. Otherwise, print NO.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings YeS, yEs, yes and YES will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4A[i]\\xe2\\x89\\xa410\\n9\\nN%2=0\\nSum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n4\\n1 1 2 4\\n4\\n1 2 5 6\\n2\\n1 2\\n4\\n1 2 3 4\\nNO\\nYES\\nYES\\nYES\\nExplanation:\\nTest case\\n1: It is not possible to satisfy all the given conditions using any number of operations.\\nTest case\\n2: One of the possible sequence of operations is listed below:\\nIn the first operation, choose\\ni=2 and\\nj=4. Thus,\\nA\\n2\\n=2+1=3 and\\nA\\n4\\n=6\\xe2\\x88\\x921=5. The array will become\\n[1,3,5,5].\\nIn the second operation, choose\\ni=2 and\\nj=4. Thus,\\nA\\n2\\n=3+1=4 and\\nA\\n4\\n=5\\xe2\\x88\\x921=4. The array will become\\n[1,4,5,4].\\nIn the third operation, choose\\ni=1 and\\nj=3. Thus,\\nA\\n1\\n=1+1=2 and\\nA\\n3\\n=5\\xe2\\x88\\x921=4. The array will become\\n[2,4,4,4].\\nIn the fourth operation, choose\\ni=1 and\\nj=3. Thus,\\nA\\n1\\n=2+1=3 and\\nA\\n3\\n=4\\xe2\\x88\\x921=3. The array will become\\n[3,4,3,4].\\nHere, all the odd elements are equal and all the even elements are equal. Also, the parity at each index is preserved.\\nTest case\\n3: The array\\n[1,2] satisfies all the conditions. Thus,\\n0 operations are needed.'",
        "383": "b\"Array Rotation Returns\\nRead problem statements in Mandarin, Bengali, Russian, and Vietnamese as well.\\nYou are given a sequence\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nwhich contains pairwise distinct elements and a sequence\\nB\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nN\\n, which also contains pairwise distinct elements (but not necessarily distinct from elements of\\nA). For each valid\\ni,\\n1\\xe2\\x89\\xa4A\\ni\\n,B\\ni\\n\\xe2\\x89\\xa42\\xe2\\x8b\\x85N.\\nYou may rotate\\nB as many times as you want. A rotation consists of moving the first element of the sequence to the end. Afterwards, let's define a sequence\\nC\\n1\\n,C\\n2\\n,\\xe2\\x80\\xa6,C\\nN\\nas\\nC\\ni\\n=(A\\ni\\n+B\\ni\\n)%N for each valid\\ni.\\nThere are\\nN possible sequences\\nC. Find the lexicographically smallest of these sequences.\\nNote: A sequence\\nx is lexicographically smaller than a different sequence\\ny if\\nx\\ni\\n<\\xe2\\x80\\x89y\\ni\\n, where\\ni is the smallest valid index where the sequences\\nx and\\ny differ.\\nInput Format\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN.\\nThe second line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nThe third line contains\\nN space-separated integers\\nB\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nN\\n.\\nOutput Format\\nFor each test case, print a single line containing\\nN space-separated integers\\nC\\n1\\n,C\\n2\\n,\\xe2\\x80\\xa6,C\\nN\\ndenoting the lexicographically smallest sequence.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n,B\\ni\\n\\xe2\\x89\\xa42\\xe2\\x8b\\x85N for each valid\\ni\\nthe sum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n1\\n3\\n1 4 5\\n1 3 4\\n1 2 0\\nExplanation:\\nExample case 1: After rotating\\nB once, it becomes\\n(3,4,1). Now\\nC=(1,2,0). This is the lexicographically smallest of all possible sequences\\nC.\"",
        "384": "b'Fibonacci String\\nFor a string\\nS let the unique set of characters that occur in it one or more times be\\nC. Consider a permutation of the elements of\\nC as\\n(c\\n1\\n,c\\n2\\n,c\\n3\\n...). Let\\nf(c) be the number of times\\nc occurs in\\nS.\\nIf any such permutation of the elements of\\nC satisfies\\nf(c\\ni\\n)=f(c\\ni\\xe2\\x88\\x921\\n)+f(c\\ni\\xe2\\x88\\x922\\n) for all\\ni\\xe2\\x89\\xa53, the string is said to be a dynamic string.\\nMr Bancroft is given the task to check if the string is dynamic, but he is busy playing with sandpaper. Would you help him in such a state?\\nNote that if the number of distinct characters in the string is less than 3, i.e. if\\n\\xe2\\x88\\xa3C\\xe2\\x88\\xa3<3, then the string is always dynamic.\\n###Input:\\nFirst line will contain\\nT, number of testcases. Then the testcases follow.\\nEach testcase contains of a single line of input, a string\\nS.\\n###Output: For each testcase, output in a single line \"Dynamic\" if the given string is dynamic, otherwise print \"Not\". (Note that the judge is case sensitive)\\n###Constraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4\\xe2\\x88\\xa3S\\xe2\\x88\\xa3\\xe2\\x89\\xa410\\n5\\nS contains only lower case alphabets:\\na,\\nb, ...,\\nz\\nSample 1:\\nInput\\nOutput\\n3\\naaaabccc\\naabbcc\\nppppmmnnoooopp\\nDynamic\\nNot\\nDynamic\\nExplanation:\\nTestase 1: For the given string,\\nC={a,b,c} and\\nf(a)=4,f(b)=1,f(c)=3.\\nf(a)=f(c)+f(b) so the permutation\\n(b,c,a) satisfies the requirement.\\nTestcase 2: Here too\\nC={a,b,c} but no permutation satisfies the requirement of a dynamic string.\\nTestcase 3: Here\\nC={m,n,o,p} and\\n(m,n,o,p) is a permutation that makes it a dynamic string.'",
        "385": "b\"OR of ANDs\\nRead problems statements in Mandarin Chinese, Russian, and Bengali as well.\\nYou are given an array\\nA with\\nN integers. An array's score is defined as the bitwise AND of all its elements. You need to find the bitwise OR of the scores of all possible non-empty subarrays of\\nA.\\nFurthermore, there are\\nQ queries. Each query consists of two integers\\nX and\\nV. You need to change the value of the element at index\\nX to\\nV. After each query, you again need to find the bitwise OR of the scores of all possible non-empty subarrays.\\nSee the example for more clarification.\\n###Input: The first line of the input contains a single integer\\nT - the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains two space-separated integers\\nN and\\nQ - the size of the array and the number of queries, respectively.\\nThe second line contains\\nN space-separated integers\\nA\\n1\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nEach of the next\\nQ lines contains two space-separated integers\\nX and\\nV - the position and the new value of the query, respectively.\\n###Output: For each test case print\\nQ+1 lines. In the first line print the answer for the original array and in the next\\nQ lines print the answer after every query.\\n###Constraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N,Q\\xe2\\x89\\xa410\\n5\\n0\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa42\\n31\\n\\xe2\\x88\\x921\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4N\\n0\\xe2\\x89\\xa4V\\xe2\\x89\\xa42\\n31\\n\\xe2\\x88\\x921\\nThe sum of\\nN over all test cases does not exceed\\n10\\n5\\nThe sum of\\nQ over all test cases does not exceed\\n10\\n5\\nSample 1:\\nInput\\nOutput\\n2\\n3 2\\n1 2 3\\n1 4\\n3 0\\n4 1\\n1 2 3 4\\n4 0\\n3\\n7\\n6\\n7\\n3\\nExplanation:\\nExample case 1: For the original array, all possible subarrays and their scores are as follows.\\nAND(1)=1,\\nAND(2)=2,\\nAND(3)=3,\\nAND(1,2)=0,\\nAND(2,3)=2,\\nAND(1,2,3)=0.\\nThe bitwise OR of all possible subarray's score is\\nOR(1,2,3,0,2,0)=3.\\nAfter the first query new array will be\\n[4,2,3] and the answer will be\\n7.\\nAfter the second query new array will be\\n[4,2,0] and the answer will be\\n6.\"",
        "386": "b\"Good Permutations\\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\\nYou have a sequence\\na with length\\nN created by removing some elements (possibly zero) from a permutation of numbers\\n(1,2,\\xe2\\x80\\xa6,N). When an element is removed, the length of the sequence doesn't change, but there is an empty spot left where the removed element was. You also have an integer\\nK.\\nLet's call a permutation\\np\\n1\\n,p\\n2\\n,\\xe2\\x80\\xa6,p\\nN\\ngood if:\\nit is possible replace empty spots in\\na by numbers in such a way that we obtain the permutation\\np\\nthe number of positions\\ni (\\n1<i\\xe2\\x89\\xa4N) such that\\np\\ni\\n>p\\ni\\xe2\\x88\\x921\\nis equal to\\nK\\nYour task is to find the number of good permutations.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains two space-separated integers\\nN and\\nK.\\nThe second line contains\\nN space-separated integers\\na\\n1\\n,a\\n2\\n,\\xe2\\x80\\xa6,a\\nN\\n. Each element of this sequence is either\\n0 (indicating an empty spot previously occupied by a removed element) or an integer between\\n1 and\\nN inclusive.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x94 the number of good permutations.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4300\\n0\\xe2\\x89\\xa4K<N\\xe2\\x89\\xa48\\neach integer between\\n1 and\\nN inclusive appears in\\na at most once\\nSample 1:\\nInput\\nOutput\\n1\\n3 1\\n2 0 0\\n2\\nExplanation:\\nExample case 1: The two possible good permutations are\\n(2,3,1) and\\n(2,1,3).\"",
        "387": "b'Adjacent Xors\\nJJ has an array\\nA of length\\nN and an integer\\nX. JJ can perform the following operation at most once:\\nSelect a subsequence of\\nA and add\\nX to all the elements of that subsequence.\\nFor example, if\\nA=[2,1,6,3,5] and\\nX=7, we can select the subsequence\\n[2,3,5] and add\\nX to all the elements. Now the array\\nA becomes\\n[2+7,1,6,3+7,5+7]=[9,1,6,10,12].\\nJJ wants to maximize the value of\\ni=2\\n\\xe2\\x88\\x91\\nN\\n(A\\ni\\xe2\\x88\\x921\\n\\xe2\\x8a\\x95A\\ni\\n). Can you help him to do so?\\nHere,\\n\\xe2\\x8a\\x95 denotes the bitwise XOR operation.\\n& & kya &\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first line of each test case contains two space-separated integers\\nN and\\nX \\xe2\\x80\\x94 the size of the array\\nA and the parameter\\nX mentioned in the statement.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\ndenoting the array\\nA.\\nOutput Format\\nFor each test case, output the maximum value of\\ni=2\\n\\xe2\\x88\\x91\\nn\\n(A\\ni\\xe2\\x88\\x921\\n\\xe2\\x8a\\x95A\\ni\\n) which can be obtained after applying the given operation at most once.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa410\\n9\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n2 1\\n1 2\\n4 1\\n2 2 3 3\\n5 2\\n5 3 6 2 8\\n3\\n15\\n43\\nExplanation:\\nTest case\\n1: It is optimal to not perform the given operation. So the answer will equal\\n1\\xe2\\x8a\\x952=3.\\nTest case\\n2: It is optimal to add\\nX=1 to the\\n2\\nnd\\nand the\\n3\\nrd\\nelement. So\\nA will become\\n[2,3,4,3] and the answer will be\\n(2\\xe2\\x8a\\x953)+(3\\xe2\\x8a\\x954)+(4\\xe2\\x8a\\x953)=15.'",
        "388": "b\"Minions and Voting\\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\\nThere are N minions who are competing in an election of the president of the ACM (Association of Cute Minions). They are standing in a line in the order from minion 1 to minion N. For each i (1 \\xe2\\x89\\xa4 i \\xe2\\x89\\xa4 N), the i-th minion has an influence level of Si.\\nA single minion may cast any number of votes. Minion j will vote for minion i (i \\xe2\\x89\\xa0 j) if and only if the influence level of the j-th minion is greater than or equal to the sum of influence levels of all the minions standing between them (excluding the i-th and j-th minion).\\nYour task is to find the number of votes received by each minion.\\nInput\\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\\nThe first line of each test case contains a single integer N denoting the number of minions.\\nThe second line contains N space-separated integers S1, S2, ..., SN.\\nOutput\\nFor each test case, print a single line containing N space-separated integers. For each valid i, the i-th of these integers should denote the number of votes the i-th minion will get.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 105\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 105\\n1 \\xe2\\x89\\xa4 Si \\xe2\\x89\\xa4 109 for each valid i\\nsum of N over all test cases won't exceed 106\\nSubtasks\\nSubtask #1 (30 points):\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 500\\nsum of N over all test cases won't exceed 10,000\\nSubtask #2 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n4\\n4 3 2 1\\n5\\n1 2 2 3 1\\n1 2 3 2\\n2 3 2 3 1\\nExplanation:\\nExample case 1:\\nThe first minion will get only a vote of the second minion.\\nThe second minion will get votes of the first and third minion.\\nThe third minion will get votes of the first, second and fourth minion.\\nThe fourth minion will get votes of the second and third minion.\"",
        "389": "b'Air Blimp\\nThere are\\nN cities in a row. The\\ni-th city from the left has a sadness of\\nA\\ni\\n.\\nIn an attempt to reduce the sadness of the cities, you can send blimps from the left of city\\n1 that move rightwards (i.e, a blimp crosses cities\\n1,2,\\xe2\\x80\\xa6 in order)\\nYou are given two integers\\nX and\\nY. For each blimp sent, you can make one of the following choices:\\nLet the blimp fly over every city, in which case the sadness of every city will decrease by\\nY, or,\\nChoose a city\\ni\\n(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N), and shower confetti over city\\ni. In this case, the sadness of cities\\n1,2,\\xe2\\x80\\xa6,i\\xe2\\x88\\x921 will decrease by\\nY, the sadness of city\\ni will decrease by\\nX, and cities\\ni+1,\\xe2\\x80\\xa6,N see no change in sadness.\\nFind the minimum number of blimps needed such that, by making the above choice optimally for each blimp, you can ensure that no city is sad (i.e, in the end every city has sadness\\n\\xe2\\x89\\xa40).\\nInput Format\\nThe first line of input contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first line of each test case contains three space-separated integers\\nN,X,Y \\xe2\\x80\\x94 the size of the array, and the parameters mentioned in the statement.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n, denoting the sadness of the\\nN cities.\\nOutput Format\\nFor each test case, output on a new line the minimum number of blimps needed such that no city is sad.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa410\\n9\\n0\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN over all test cases does not exceed\\n3\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n4 4 4\\n1 5 4 4\\n5 4 3\\n1 4 3 3 5\\n4 3 1\\n3 1 3 9\\n2\\n2\\n3\\nExplanation:\\nTest case\\n1: One way of using two blimps is as follows:\\nInitially,\\nA=[1,5,4,4]\\nShower confetti on city\\n2. Now,\\nA=[\\xe2\\x88\\x923,1,4,4].\\nShower confetti on city\\n4. Now,\\nA=[\\xe2\\x88\\x927,\\xe2\\x88\\x923,0,0] and we are done.\\nTest case\\n2: One way of using two blimps is as follows:\\nInitially,\\nA=[1,4,3,3,5]\\nLet a blimp fly over every city. Now,\\nA=[\\xe2\\x88\\x922,1,0,0,2].\\nShower confetti on city\\n5. Now,\\nA=[\\xe2\\x88\\x925,\\xe2\\x88\\x922,\\xe2\\x88\\x923,\\xe2\\x88\\x923,\\xe2\\x88\\x922], and we are done.'",
        "390": "b'Connecting Soldiers\\nTo protect people from evil, a long and tall wall was constructed a few years ago. But just a wall is not safe, there should also be soldiers on it, always keeping vigil. The wall is very long and connects the left and the right towers. There are exactly N spots (numbered 1 to N) on the wall for soldiers. The Kth spot is K miles far from the left tower and (N+1-K) miles from the right tower.\\nGiven a permutation of spots P of {1, 2, ..., N}, soldiers occupy the N spots in that order. The P[i]th spot is occupied before the P[i+1]th spot. When a soldier occupies a spot, he is connected to his nearest soldier already placed to his left. If there is no soldier to his left, he is connected to the left tower. The same is the case with right side. A connection between two spots requires a wire of length equal to the distance between the two.\\nThe realm has already purchased a wire of M miles long from Nokia, possibly the wire will be cut into smaller length wires. As we can observe, the total length of the used wire depends on the permutation of the spots P. Help the realm in minimizing the length of the unused wire. If there is not enough wire, output -1.\\nInput\\nFirst line contains an integer T (number of test cases, 1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 10 ). Each of the next T lines contains two integers N M, as explained in the problem statement (1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 30 , 1 \\xe2\\x89\\xa4 M \\xe2\\x89\\xa4 1000).\\nOutput\\nFor each test case, output the minimum length of the unused wire, or -1 if the the wire is not sufficient.\\nSample 1:\\nInput\\nOutput\\n4\\n3 8\\n3 9\\n2 4\\n5 25\\n0\\n0\\n-1\\n5\\nExplanation:\\nIn the 1st case, for example, the permutation P = {2, 1, 3} will use the exact 8 miles wires in total.\\n\\nIn the 2nd case, for example, the permutation P = {1, 3, 2} will use the exact 9 miles wires in total.\\n\\nTo understand the first two cases, you can see the following figures:\\n\\n\\n\\n\\n\\n\\nIn the 3rd case, the minimum length of wire required is 5, for any of the permutations {1,2} or {2,1}, so length 4 is not sufficient.\\n\\nIn the 4th case, for the permutation {1, 2, 3, 4, 5} we need the maximum length of the wire = 20. So minimum possible unused wire length = 25 - 20 = 5.'",
        "391": "b\"Angled Flip\\nYou are given two\\nN\\xc3\\x97M integer matrices\\nA and\\nB. You are allowed to perform the following operation on\\nA as many times as you like (possibly, zero):\\nPick any square submatrix of\\nA and flip it about either its main diagonal or its antidiagonal.\\nFor example, suppose you choose the submatrix\\n\\xe2\\x8e\\xa3\\n\\xe2\\x8e\\xa1\\n123\\n456\\n789\\n\\xe2\\x8e\\xa6\\n\\xe2\\x8e\\xa4\\n.\\nIt can be converted into either\\n\\xe2\\x8e\\xa3\\n\\xe2\\x8e\\xa1\\n147\\n258\\n369\\n\\xe2\\x8e\\xa6\\n\\xe2\\x8e\\xa4\\nby flipping about the main diagonal, or\\n\\xe2\\x8e\\xa3\\n\\xe2\\x8e\\xa1\\n963\\n852\\n741\\n\\xe2\\x8e\\xa6\\n\\xe2\\x8e\\xa4\\nby flipping about the antidiagonal.\\nIs it possible to convert\\nA to\\nB by performing this operation several (possibly, zero) times?\\nNote: For the purposes of this problem, a submatrix of a matrix is the intersection of a contiguous segment of rows with a contiguous segment of columns.\\nFor example, if\\nA=\\n\\xe2\\x8e\\xa3\\n\\xe2\\x8e\\xa1\\n123\\n456\\n789\\n\\xe2\\x8e\\xa6\\n\\xe2\\x8e\\xa4\\nthen\\n[\\n[\\n2\\n],\\n[\\n[\\n56\\n89\\n], and\\n[\\n[\\n1\\n4\\n] are submatrices of\\nA, while\\n[\\n[\\n13\\n79\\n] is not.\\nA square submatrix is a submatrix with the same number of rows and columns.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains two space-separated integers\\nN and\\nM \\xe2\\x80\\x94 the number of rows and columns of the matrices, respectively.\\nThe next\\nN lines describe the matrix\\nA. The\\ni-th of these lines contains\\nM space-separated integers \\xe2\\x80\\x95 the values\\nA\\ni,1\\n,A\\ni,2\\n,\\xe2\\x80\\xa6,A\\ni,M\\n.\\nThe next\\nN lines describe the matrix\\nB. The\\ni-th of these lines contains\\nM space-separated integers \\xe2\\x80\\x95 the values\\nB\\ni,1\\n,B\\ni,2\\n,\\xe2\\x80\\xa6,B\\ni,M\\n.\\nOutput Format\\nFor each test case, print YES if its possible to convert\\nA to\\nB, else print NO.\\nEach character of the output may be printed in either uppercase or lowercase. For example, the strings YES, yes, yeS, YeS will all be treated as identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4A\\ni,j\\n,B\\ni,j\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN\\xe2\\x8b\\x85M over all test cases won't exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n2\\n2 3\\n1 2 3\\n4 5 6\\n1 4 3\\n6 5 2\\n3 3\\n12 11 8\\n7 1 1\\n9 2 4\\n4 1 8\\n2 1 11\\n9 7 12\\nYES\\nYES\\nExplanation:\\nTest case\\n1:\\nA can be converted to\\nB as follows:\\n[\\n[\\n123\\n456\\n]\\xe2\\x86\\x92[\\n163\\n452\\n]\\xe2\\x86\\x92[\\n143\\n652\\n]\"",
        "392": "b\"Minimum Absolute Score\\nYou are given two strings\\nA and\\nB of length\\nN consisting of lowercase English letters. Your objective is to make both the strings equal.\\nYou can apply one of the following\\n2 operations at each index\\ni:\\nConvert char\\nA\\ni\\nto\\nB\\ni\\nby doing right cyclic shift of character\\nA\\ni\\n. This increases your score by amount equal to cyclic shifts done.\\nConvert char\\nB\\ni\\nto\\nA\\ni\\nby doing right cyclic shift of character\\nB\\ni\\n. This decreases your score by amount equal to cyclic shifts done.\\nYour starting score is zero.\\nIf the operations are applied optimally, find the minimum absolute score possible after making both the strings equal.\\nNote: A single right cyclic shift converts one character to the next in alphabetical order, except for\\nz which goes to\\na. That is, the sequence looks like\\na\\xe2\\x86\\x92b\\xe2\\x86\\x92c\\xe2\\x86\\x92\\xe2\\x80\\xa6\\xe2\\x86\\x92y\\xe2\\x86\\x92z\\xe2\\x86\\x92a\\xe2\\x86\\x92b\\xe2\\x86\\x92\\xe2\\x80\\xa6\\nSo, for example converting\\na to\\ne requires\\n4 right cyclic shifts, and converting\\nk to\\ni requires\\n24.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of three lines of input.\\nThe first line of each test case contains one integer\\nN \\xe2\\x80\\x94 the length of strings\\nA and\\nB.\\nThe second line contains string\\nA.\\nThe third line contains string\\nB.\\nOutput Format\\nFor each test case, output on a new line the minimum absolute score possible after making both the strings equal.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nBoth strings\\nA and\\nB have same length\\nN and contain only lowercase English letters.\\nThe sum of\\nN over all test cases won't exceed\\n10\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n3\\nabb\\nbaz\\n3\\nzzc\\naaa\\n4\\nfxbs\\ndkrc\\n5\\neaufq\\ndrtkn\\n2\\n0\\n11\\n9\\nExplanation:\\nTest case\\n1: The minimum absolute score can be obtained as follows:\\nApply operation\\n1 at position\\n1, converting\\na to\\nb for a cost of\\n+1.\\nApply operation\\n2 at position\\n2, converting\\na to\\nb for a cost of\\n\\xe2\\x88\\x921.\\nApply operation\\n2 at position\\n3, converting\\nz to\\nb for a cost of\\n\\xe2\\x88\\x922.\\nThe score is then\\n1\\xe2\\x88\\x921\\xe2\\x88\\x922=\\xe2\\x88\\x922, with absolute value\\n2. This is the lowest possible absolute value attainable.\\nTest case\\n2: Apply operations as follows:\\nOperation\\n1 at index\\n1,\\nz\\xe2\\x86\\x92a for a cost of\\n+1\\nOperation\\n1 at index\\n2,\\nz\\xe2\\x86\\x92a for a cost of\\n+1\\nOperation\\n2 at index\\n3,\\na\\xe2\\x86\\x92c for a cost of\\n\\xe2\\x88\\x922\\nThis gives us a final score of\\n1+1\\xe2\\x88\\x922=0, which has absolute value\\n0. It is not possible to do better than this.\"",
        "393": "b'Binary Mismatch\\nYou have a binary string\\nS of length\\nN.\\nYou must perform the following operation on the binary string\\nS exactly once:\\nChoose two integers\\nL and\\nR\\n(1\\xe2\\x89\\xa4L\\xe2\\x89\\xa4R\\xe2\\x89\\xa4N) and invert the substring\\nS\\nL\\xe2\\x80\\xa6R\\n(i.e change\\n1 to\\n0 and change\\n0 to\\n1).\\nDetermine whether you can make the number of zeroes in\\nS equal to number of ones in\\nS by performing the above operation exactly once. If there exists a way, also output the bounds of the chosen substring.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases.\\nThe first line of each test case contains a single integer\\nN \\xe2\\x80\\x94 the length of string\\nS.\\nThe second line of each test case contains a binary string\\nS of length\\nN.\\nOutput Format\\nFor each test case, output NO if there is no way to make the number of zeroes equal to number of ones.\\nOtherwise, output YES. In the next line, output two integers\\nL and\\nR\\n(1\\xe2\\x89\\xa4L\\xe2\\x89\\xa4R\\xe2\\x89\\xa4N) \\xe2\\x80\\x94 bounds of the chosen substring. If there are multiple answers, print any.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nS is a binary string, i.e, contains only characters\\n0 and\\n1\\nSum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n2\\n01\\n3\\n010\\n4\\n1000\\nYES\\n1 2\\nNO\\nYES\\n4 4\\nExplanation:\\nTest case 1: We can pick\\nL=1 and\\nR=2 to obtain:\\n01\\n\\xe2\\x86\\x9210, which contains equal number of zeroes and ones.\\nTest case 2: It can be proven that there is no way to make the number of zeroes equal to number of ones.\\nTest case 3: We can pick\\nL=4 and\\nR=4 to obtain:\\n100\\n0\\n\\xe2\\x86\\x921001, which contains equal number of zeroes and ones.'",
        "394": "b'Find A, B, C\\nChef has\\n3 hidden numbers\\nA,B, and\\nC such that\\n0\\xe2\\x89\\xa4A,B,C\\xe2\\x89\\xa4N.\\nLet\\nf be a function such that\\nf(i)=(A\\xe2\\x8a\\x95i)+(B\\xe2\\x8a\\x95i)+(C\\xe2\\x8a\\x95i). Here\\n\\xe2\\x8a\\x95 denotes the bitwise XOR operation.\\nGiven the values of\\nf(0),f(1),\\xe2\\x80\\xa6,f(N), determine the values of\\nA,B, and\\nC.\\nIt is guaranteed that at least one tuple exists for the given input. If there are multiple valid tuples of\\nA,B,C, print any one.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains a single integer\\nN denoting the upper bound on the values of\\nA,B,C.\\nNext line contains\\nN+1 space-separated integers denoting\\nf(0),f(1),\\xe2\\x80\\xa6,f(N).\\nOutput Format\\nFor each test case, output on a new line, three space-separated integers, the values of\\nA,B, and\\nC. If there are multiple valid tuples of\\nA,B,C, print any one.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n4\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nSum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n2\\n0 3 6\\n2\\n4 7 2\\n5\\n9 6 11 8 13 10\\n0 0 0\\n2 0 2\\n1 3 5\\nExplanation:\\nTest case\\n1: The tuple\\nA=0,B=0,C=0 satisfies as:\\nf(0)=0\\xe2\\x8a\\x950+0\\xe2\\x8a\\x950+0\\xe2\\x8a\\x950=0.\\nf(1)=0\\xe2\\x8a\\x951+0\\xe2\\x8a\\x951+0\\xe2\\x8a\\x951=3.\\nf(2)=0\\xe2\\x8a\\x952+0\\xe2\\x8a\\x952+0\\xe2\\x8a\\x952=6.\\nTest case\\n2: The tuple\\nA=2,B=0,C=2 satisfies as:\\nf(0)=2\\xe2\\x8a\\x950+0\\xe2\\x8a\\x950+2\\xe2\\x8a\\x950=4.\\nf(1)=2\\xe2\\x8a\\x951+0\\xe2\\x8a\\x951+2\\xe2\\x8a\\x951=7.\\nf(2)=2\\xe2\\x8a\\x952+0\\xe2\\x8a\\x952+2\\xe2\\x8a\\x952=2.\\nTest case\\n3: The tuple\\nA=1,B=3,C=5 satisfies as:\\nf(0)=1\\xe2\\x8a\\x950+3\\xe2\\x8a\\x950+5\\xe2\\x8a\\x950=9.\\nf(1)=1\\xe2\\x8a\\x951+3\\xe2\\x8a\\x951+5\\xe2\\x8a\\x951=6.\\nf(2)=1\\xe2\\x8a\\x952+3\\xe2\\x8a\\x952+5\\xe2\\x8a\\x952=11.\\nf(3)=1\\xe2\\x8a\\x953+3\\xe2\\x8a\\x953+5\\xe2\\x8a\\x953=8.\\nf(4)=1\\xe2\\x8a\\x954+3\\xe2\\x8a\\x954+5\\xe2\\x8a\\x954=13.\\nf(5)=1\\xe2\\x8a\\x955+3\\xe2\\x8a\\x955+5\\xe2\\x8a\\x955=10.'",
        "395": "b\"XOR Product\\nChef has an array\\nA of length\\nN.\\nHe can modify this array by applying a special operation any number of times. In one operation, he can:\\nSelect two indices\\ni and\\nj\\n(1\\xe2\\x89\\xa4i<j\\xe2\\x89\\xa4\\xe2\\x88\\xa3A\\xe2\\x88\\xa3).\\nAppend\\nA\\ni\\n\\xe2\\x8a\\x95A\\nj\\nto the end of the array, where\\n\\xe2\\x8a\\x95 denotes the bitwise XOR operation\\nRemove\\nA\\ni\\nand\\nA\\nj\\nfrom the array.\\nChef wants to maximize the product of all the elements of the array after applying these operations.\\nHelp Chef determine the maximum product he can achieve by applying this operation any (possibly zero) number of times. As this number can be large, print it modulo\\n998244353.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains one integer\\nN \\xe2\\x80\\x94 the number of elements in the array.\\nThe second line consists of\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\ndenoting the elements of the array initially.\\nOutput Format\\nFor each test case, output the maximum product he can achieve modulo\\n998244353.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa45\\xe2\\x8b\\x8510\\n4\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN over all test cases won't exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n4\\n1 2 1 2\\n2\\n3 3\\n2\\n2 1\\n9\\n9\\n3\\nExplanation:\\nTest case\\n1: Chef can make the following operations:\\nOperation\\n1: Choose\\ni=1 and\\nj=2, append\\nA\\n1\\n\\xe2\\x8a\\x95A\\n2\\n=1\\xe2\\x8a\\x952=3 to the end of the array and remove elements\\nA\\n1\\nand\\nA\\n2\\n. Thus, the array becomes\\n[1,2,3].\\nOperation\\n2: Choose\\ni=1 and\\nj=2, append\\nA\\n1\\n\\xe2\\x8a\\x95A\\n2\\n=1\\xe2\\x8a\\x952=3 to the end of the array and remove elements\\nA\\n1\\nand\\nA\\n2\\n. Thus, the array becomes\\n[3,3].\\nThe product of all elements of the array is\\n3\\xc3\\x973=9. It can be shown that this is the maximum product that can be obtained by applying any number of operations on the array.\\nTest case\\n2: The product of all elements of the array is\\n3\\xc3\\x973=9. It can be shown that this is the maximum product that can be obtained by applying any number of operations on the array.\\nThus, Chef does not need to perform any operations.\\nTest case\\n3: Chef can make the following operation:\\nOperation\\n1: Choose\\ni=1 and\\nj=2, append\\nA\\n1\\n\\xe2\\x8a\\x95A\\n2\\n=1\\xe2\\x8a\\x952=3 to the end of the array and remove elements\\nA\\n1\\nand\\nA\\n2\\n. Thus, the array becomes\\n[3].\\nThe product of all elements is\\n3. It can be shown that this is the maximum product that can be obtained by applying any number of operations on the array.\"",
        "396": "b\"Chef and Round Run\\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\\nChef cooks nice receipes in the cafeteria of his company. The cafe contains N boxes with food enumerated from 1 to N and are placed in a circle in clocwise order (boxes 1 and N are adjacent). Each box has unlimited amount of food with a tastyness level of Ai. Chef invented a definition of a magic box!\\nChef picks a box i and stays in front of it.\\nNow Chef eats food from box i and skips next Ai boxes.\\nNow Chef is staying at some other (probably even the same!) box and repeats.\\nBox i is a magic box if at some point of such game started from box i, Chef will find himself staying in front of it again.\\nWhen Chef came home, Chef's dog Tommy asked him about how many magic boxes were in the cafe? Help Chef to in finding that!\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\\nThe first line of each test case contains a single integer N denoting the number of boxes.\\nThe second line contains N space-separated integers A1, A2, ..., AN denoting the tastyness levels of each box.\\nOutput\\nFor each test case, output a single line containing number of magical boxes.\\nConstraints\\n1 \\xe2\\x89\\xa4 sum of all N over all the test cases in a single test file \\xe2\\x89\\xa4 106\\n0 \\xe2\\x89\\xa4 Ai \\xe2\\x89\\xa4 109\\nSubtasks\\nSubtask #1 (30 points): 1 \\xe2\\x89\\xa4 sum of all N over all the test cases \\xe2\\x89\\xa4 104; 1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 1000\\nSubtask #2 (70 points): 1 \\xe2\\x89\\xa4 sum of all N over all the test cases \\xe2\\x89\\xa4 106; 1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 105\\nSample 1:\\nInput\\nOutput\\n3\\n4\\n1 1 1 1\\n4\\n3 0 0 0\\n4\\n0 0 0 2\\n4\\n1\\n2\\nExplanation:\\nExample case 1.\\nHere are Chef's paths if he starting from each the box:\\n1->3->1\\n2->4->2\\n3->1->3\\n4->2->4\\nAs you see, all 4 boxes are magical.\\nExample case 2.\\nHere are Chef's paths if he starts from each box appropriately:\\n1->1\\n2->3->4->1->1\\n3->4->1->1\\n4->1->1\\nAS you see, only box 1 is magical.\"",
        "397": "b'Equal LIS\\nFor a permutation\\nP of length\\nN, we define\\nL(P) to be the length of the longest increasing subsequence in\\nP. That is,\\nL(P) is the largest integer\\nK such that there exist indices\\ni\\n1\\n<i\\n2\\n<\\xe2\\x80\\xa6<i\\nK\\nsuch that\\nP\\ni\\n1\\n<P\\ni\\n2\\n<\\xe2\\x80\\xa6<P\\ni\\nK\\n.\\nDefine\\nP\\nR\\nto be the permutation\\n(P\\nN\\n,P\\nN\\xe2\\x88\\x921\\n,\\xe2\\x80\\xa6,P\\n1\\n).\\nYou are given a positive integer\\nN. You need to output a permutation\\nP of length\\nN such that\\nL(P)=L(P\\nR\\n), or say that none exist.\\nNote:\\nP is said to be a permutation of length\\nN if\\nP is a sequence of length\\nN consisting of\\nN distinct integers between\\n1 and\\nN. For example,\\n(3,1,2) is a permutation of length\\n3, but\\n(1,4,2),\\n(2,2,3) and\\n(2,1) are not.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nEach test case consists of a single line containing one integer\\nN \\xe2\\x80\\x94 the length of the permutation to be constructed.\\nOutput Format\\nFor each test case, output on a new line \"YES\" if there exists a valid permutation, and \"NO\" if there doesn\\'t. If you outputted \"YES\", on the next line, output a valid permutation\\nP as\\nN space-separated integers, the\\ni\\nth\\nof which is\\nP\\ni\\n.\\nYou can print each letter of the string in any case (upper or lower) (for instance, strings YES, yEs, and yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\nThe sum of\\nN across all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n2\\n2\\n3\\nNO\\nYES\\n1 3 2\\nExplanation:\\nTest Case\\n1: There are two permutations of length\\n2 \\xe2\\x80\\x94\\n(1,2) and\\n(2,1). The length of the LIS of\\n(1,2) is\\n2 and the length of the LIS of\\n(2,1) is\\n1. Since these permutations are reverses of each other and have unequal LIS lengths, there is no valid permutation of length\\n2.\\nTest Case\\n2: The length of the LIS of\\n(1,3,2) is\\n2, and the length of the LIS of its reverse,\\n(2,3,1), is also\\n2. Therefore, this is a valid permutation of length\\n3.'",
        "398": "b\"Divisors and Reciprocals\\nAlice is teaching Bob maths via a game called\\nN-guesser.\\nAlice has a positive integer\\nN which Bob needs to guess. She gives him two pieces of information with which to do this:\\nA positive integer\\nX, which denotes the sum of divisors of\\nN.\\nTwo positive integers\\nA and\\nB, which denote that the sum of reciprocals of divisors of\\nN is\\nA\/B.\\nBob either needs to guess\\nN or tell that no such number exists.\\nIt can be shown that if a valid\\nN exists, it is unique.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nEach test case consists of a single line of input, containing three space-separated integers\\nX,A,B.\\nOutput Format\\nFor each test case, output a new line containing the answer \\xe2\\x80\\x94 Alice's number\\nN, or\\n\\xe2\\x88\\x921 if no such number exists.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa410\\n9\\n1\\xe2\\x89\\xa4A,B\\xe2\\x89\\xa410\\n9\\ngcd(A,B)=1\\nSample 1:\\nInput\\nOutput\\n2\\n4 4 3\\n4 1 1\\n3\\n-1\\nExplanation:\\nTest case\\n1: The divisors of\\n3 are\\n1 and\\n3. Their sum is\\n4 and the sum of their reciprocals is\\n4\/3.\\nTest case\\n2: It can be proved that no positive integer\\nN exists whose divisors sum to\\n4 and reciprocals of divisors sum to\\n1.\"",
        "399": "b'Restaurant Rating\\nChef has opened up a new restaurant. Like every other restaurant, critics critique this place. The Chef wants to gather as much positive publicity as he can. Also, he is very aware of the fact that people generally do not tend to go through all the reviews. So he picks out the positive reviews and posts it on the website of the restaurant. A review is represented by an integer which is the overall rating of the restaurant as calculated by that particular review. A review is considered to be positive if it is among the top one-third of the total reviews when they are sorted by their rating. For example, suppose the ratings given by 8 different reviews are as follows:\\n2 8 3 1 6 4 5 7\\nThen the top one-third reviews will be 8 and 7. Note that we considered one-third to be 8\/3=2 top reviews according to integer division. (see Notes)\\nSo here is what the Chef wants from you: Given the reviews(ratings) by different critics, the Chef needs you to tell him what is the minimum rating that his website will be displaying. For example in the above case, the minimum rating that will be displayed is 7. Also, different critics keep reviewing the restaurant continuosly. So the new reviews keep coming in. The Chef wants your website ratings to be up-to-date. So you should keep updating the ratings there. At any point of time, the Chef might want to know the minimum rating being displayed. You\\'ll have to answer that query. An interesting thing to note here is that a review might be in the website for some time and get knocked out later because of new better reviews and vice-versa.\\nNotes: To be precise, the number of reviews displayed website will be floor(n \/ 3), where n denotes the current number of all reviews.\\nInput\\nFirst line of the input file consists of a single integer N, the number of operations to follow. The next N lines contain one operation each on a single line. An operation can be of 2 types:\\n1 x : Add a review with rating \\'x\\' to the exisiting list of reviews (x is an integer)\\n2 : Report the current minimum rating on the website\\nOutput\\nFor every test case, output a single integer each for every operation of type 2 mentioned above. If no review qualifies as a positive review, print \"No reviews yet\".\\nConstraints\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 250000\\n1 \\xe2\\x89\\xa4 x \\xe2\\x89\\xa4 1000000000\\nSample 1:\\nInput\\nOutput\\n10\\n1 1\\n1 7\\n2\\n1 9\\n1 21\\n1 8\\n1 5\\n2\\n1 9\\n2\\nNo reviews yet\\n9\\n9\\nExplanation:\\nBefore the first query of the Chef, i.e. the first operation of type 2 in the input, the only ratings were 1 & 7. Thus, there will be total of 2\/3 = 0 positive ratings. For the next two, the ratings list now looks like: 1 5 7 8 9 21. Hence, top one-third will have 6\/3 = 2 ratings as positive. And lowest displayed rating will be 9. Similarly for the last operation of type 2. Note that there are two ratings of the same value 9 now and only one of them can be in the top reviews. In such a case, you can choose any one of them.'",
        "400": "b'College Life 4\\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nChef and\\nN\\xe2\\x88\\x921 more of his friends go to the night canteen. The canteen serves only three items (well, they serve more, but only these three are edible!), which are omelette, chocolate milkshake, and chocolate cake. Their prices are\\nA,\\nB and\\nC respectively.\\nHowever, the canteen is about to run out of some ingredients. In particular, they only have\\nE eggs and\\nH chocolate bars left. They need:\\n2 eggs to make an omelette\\n3 chocolate bars for a chocolate milkshake\\n1 egg and\\n1 chocolate bar for a chocolate cake\\nEach of the\\nN friends wants to order one item. They can only place an order if the canteen has enough ingredients to prepare all the ordered items. Find the smallest possible total price they have to pay or determine that it is impossible to prepare\\nN items.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains six space-separated integers\\nN,\\nE,\\nH,\\nA,\\nB and\\nC.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 the minimum cost of\\nN items, or\\n\\xe2\\x88\\x921 if it is impossible to prepare\\nN items.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n6\\n0\\xe2\\x89\\xa4E,H\\xe2\\x89\\xa410\\n6\\n1\\xe2\\x89\\xa4A,B,C\\xe2\\x89\\xa410\\n6\\nthe sum of\\nN over all test cases does not exceed\\n10\\n6\\nSubtasks\\nSubtask #1 (30 points):\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\nSubtask #2 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n5 4 4 2 2 2\\n4 5 5 1 2 3\\n4 5 5 3 2 1\\n-1\\n7\\n4\\nExplanation:\\nExample case 1: The maximum number of items that can be produced using\\n4 eggs and\\n4 chocolates is\\n4, so the answer is\\n\\xe2\\x88\\x921.\\nExample case 2: In the optimal solution, the friends should order\\n2 omelettes,\\n1 chocolate milkshake and\\n1 chocolate cake, with cost\\n1\\xe2\\x8b\\x852+2\\xe2\\x8b\\x851+3\\xe2\\x8b\\x851=7.\\nExample case 3: In the optimal solution, the friends should order\\n4 chocolate cakes, with cost\\n1\\xe2\\x8b\\x854=4.'",
        "401": "b\"Pythagorean Pair\\nChef has an integer\\nN. It is known that the largest odd divisor of\\nN does not exceed\\n10\\n5\\n.\\nDetermine two non-negative integers\\nA and\\nB such that\\nA\\n2\\n+B\\n2\\n=N, or report that no such pair exists.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single integer\\nN.\\nOutput Format\\nFor each test case, output space-separated\\nA and\\nB such that\\nA\\n2\\n+B\\n2\\n=N or\\n\\xe2\\x88\\x921 if no such pair exists.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n15\\nLargest odd divisor of\\nN won't exceed\\n10\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n100\\n6\\n13\\n4\\n8 6\\n-1\\n2 3\\n0 2\\nExplanation:\\nTest case\\n1: A possible pair\\n(A,B) such that\\nA\\n2\\n+B\\n2\\n=N is\\n(8,6). Here,\\n8\\n2\\n+6\\n2\\n=64+36=100.\\nTest case\\n2: There is no pair\\n(A,B) such that\\nA\\n2\\n+B\\n2\\n=N.\\nTest case\\n3: A possible pair\\n(A,B) such that\\nA\\n2\\n+B\\n2\\n=N is\\n(2,3). Here,\\n2\\n2\\n+3\\n2\\n=4+9=13\\nTest case\\n4: A possible pair\\n(A,B) such that\\nA\\n2\\n+B\\n2\\n=N is\\n(0,2). Here,\\n0\\n2\\n+2\\n2\\n=0+4=4.\"",
        "402": "b'Minimize Digitsum\\n###Read problems statements Hindi ,Bengali , Mandarin chinese , Russian and Vietnamese as well.\\nYou are given positive integers\\nN and\\nD. You may perform operations of the following two types:\\nadd\\nD to\\nN, i.e. change\\nN to\\nN+D\\nchange\\nN to\\ndigitsum(N)\\nHere,\\ndigitsum(x) is the sum of decimal digits of\\nx. For example,\\ndigitsum(123)=1+2+3=6,\\ndigitsum(100)=1+0+0=1,\\ndigitsum(365)=3+6+5=14.\\nYou may perform any number of operations (including zero) in any order. Please find the minimum obtainable value of\\nN and the minimum number of operations required to obtain this value.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains two space-separated integers\\nN and\\nD.\\nOutput\\nFor each test case, print a single line containing two space-separated integers \\xe2\\x80\\x94 the minimum value of\\nN and the minimum required number of operations.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4N,D\\xe2\\x89\\xa410\\n10\\nSubtasks\\nSubtask #1 (30 points):\\n1\\xe2\\x89\\xa4N,D\\xe2\\x89\\xa4100\\nSubtask #2 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n2 1\\n9 3\\n11 13\\n1 9\\n3 2\\n1 4\\nExplanation:\\nExample case 1: The value\\nN=1 can be achieved by 8 successive \"add\" operations (changing\\nN to\\n10) and one \"digit-sum\" operation.\\nExample case 2: You can prove that you cannot obtain\\nN=1 and\\nN=2, and you can obtain\\nN=3. The value\\nN=3 can be achieved by one \"add\" and one \"digitsum\" operation, changing\\n9 to\\n12 and\\n12 to\\n3.\\nExample case 3:\\nN=1 can be achieved by operations \"add\", \"add\", \"digitsum\", \"digitsum\":\\n11\\xe2\\x86\\x9224\\xe2\\x86\\x9237\\xe2\\x86\\x9210\\xe2\\x86\\x921.'",
        "403": "b'Matrix XOR\\nRead problems statements in Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\\nChef has a tasty ingredient \\xe2\\x80\\x95 an integer\\nK. He defines a tasty matrix\\nA with\\nN rows (numbered\\n1 through\\nN) and\\nM columns (numbered\\n1 through\\nM) as\\nA\\ni,j\\n=K+i+j for each valid\\ni,j.\\nCurrently, Chef is busy in the kitchen making this tasty matrix. Help him find the bitwise XOR of all elements of this matrix.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains three space-separated integers\\nN,\\nM and\\nK.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 the bitwise XOR of all elements of the tasty matrix with the given dimensions made with the given special ingredient.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n6\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n9\\nthe sum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n6\\nthe sum of\\nM over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n6\\nSample 1:\\nInput\\nOutput\\n2\\n2 2 5\\n2 3 7\\n14\\n5\\nExplanation:\\nExample case 1: The matrix is\\n5 + 1 + 1 & 5 + 1 + 2\\\\\\\\ 5 + 2 + 1 & 5 + 2 + 2\\\\end{pmatrix} = \\\\begin{pmatrix} 7 & 8 \\\\\\\\ 8 & 9 \\\\end{pmatrix} \\\\,.$$ The XOR of all its elements is $7 \\\\oplus 8 \\\\oplus 8 \\\\oplus 9 = 14$. **Example case 2:** The matrix is $$A = \\\\begin{pmatrix} 7 + 1 + 1 & 7 + 1 + 2 & 7 + 1 + 3\\\\\\\\ 7 + 2 + 1 & 7 + 2 + 2 & 7 + 2 + 3 \\\\end{pmatrix} = \\\\begin{pmatrix} 9 & 10 & 11\\\\\\\\ 10 & 11 & 12 \\\\end{pmatrix} \\\\,.$$ The XOR of all its elements is $9 \\\\oplus 10 \\\\oplus 11 \\\\oplus 10 \\\\oplus 11 \\\\oplus 12 = 5$. <\/div>'",
        "404": "b'Binary Inversion\\nYou are given\\nN binary strings\\nS\\n1\\n,S\\n2\\n,\\xe2\\x80\\xa6,S\\nN\\n, each of length\\nM. You want to concatenate all the\\nN strings in some order to form a single large string of length\\nN\\xe2\\x8b\\x85M. Find the minimum possible number of inversions the resulting string can have.\\nA binary string is defined as a string consisting only of \\'\\n0\\' and \\'\\n1\\'.\\nAn inversion in a binary string\\nS is a pair of indices\\n(i,j) such that\\ni<j and\\nS\\ni\\n= \\'\\n1\\',\\nS\\nj\\n= \\'\\n0\\'. For example, the string\\nS= \"\\n01010\" contains\\n3 inversions :\\n(2,3),\\n(2,5),\\n(4,5).\\nNote that you are not allowed to change the order of characters within any of the strings\\nS\\ni\\n- you are only allowed to concatenate the strings themselves in whatever order you choose. For example, if you have \"\\n00\" and \"\\n10\" you can form \"\\n0010\" and \"\\n1000\", but not \"\\n0001\".\\nInput Format\\nThe first line of input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains two space-separated integers\\nN,M.\\nN lines follow, the\\ni\\nth\\nof which contains the string\\nS\\ni\\nof length\\nM.\\nOutput Format\\nFor each test case, print a single line containing one integer - the minimum possible number of inversions in the resulting string.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n3\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4M\\xe2\\x89\\xa410\\n5\\n2\\xe2\\x89\\xa4N\\xe2\\x8b\\x85M\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n\\xe2\\x88\\xa3S\\ni\\n\\xe2\\x88\\xa3=M\\nS\\ni\\ncontains only characters \\'\\n0\\' and \\'\\n1\\'.\\nSum of\\nN\\xe2\\x8b\\x85M over all test cases does not exceed\\n10\\n6\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n2 1\\n0\\n1\\n3 2\\n10\\n00\\n01\\n2 4\\n0010\\n1011\\n3 4\\n1011\\n1101\\n0101\\n0\\n2\\n3\\n11\\nExplanation:\\nTest case\\n1: Two strings can be formed :\\nS\\n1\\n+S\\n2\\n=\"\\n01\",\\nS\\n2\\n+S\\n1\\n= \"\\n10\". The first string does not have any inversion while the second has one inversion :\\n(1,2).\\nTest case\\n2: Both\\nS\\n2\\n+S\\n1\\n+S\\n3\\n=\"\\n001001\",\\nS\\n2\\n+S\\n3\\n+S\\n1\\n=\"\\n000110\" contain\\n2 inversions. It can be verified that no other order results in fewer inversions.'",
        "405": "b\"Triplets Min\\nYou are given an integer array\\nA of size\\nN.\\nA triplet array is defined as the collection of\\nmin(A\\ni\\n,A\\nj\\n,A\\nk\\n) for all triplets\\n(i,j,k), where\\n1\\xe2\\x89\\xa4i<j<k\\xe2\\x89\\xa4N.\\nYou are given\\nQ queries of the following type:\\nGiven an integer\\nK, return the value of\\nK\\nth\\nsmallest element in the triplet array.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains two space-separated integers\\nN and\\nQ \\xe2\\x80\\x94 the size of array\\nA and the number of queries, respectively.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nThe following\\nQ lines describe the queries. Each of these lines contain a single positive integer\\nK.\\nOutput Format\\nFor each query, print a single line containing the\\nK\\nth\\nsmallest element in the triplet array.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n3\\xe2\\x89\\xa4N\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4Q\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\n\\xe2\\x88\\x9210\\n9\\n\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa4(\\n3\\nN\\n)\\nThe sum of\\nN over all test cases won't exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nThe sum of\\nQ over all test cases won't exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n2\\n6 2\\n3 3 3 3 3 3\\n18\\n1\\n4 4\\n2 4 2 1\\n1\\n2\\n3\\n4\\n3\\n3\\n1\\n1\\n1\\n2\\nExplanation:\\nTest case 1: Here, all elements of triplet array are equal to\\n3.\\nTest case 2: The sorted triplet array is\\n[1,1,1,2].\"",
        "406": "b\"Swap the numbers\\nYou're given an array\\nA=[A\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n] containing\\nN integers.\\nYou also have an integer\\nK.\\nYou can perform the following operation on this array:\\nChoose indices\\ni and\\nj such that\\n\\xe2\\x88\\xa3i\\xe2\\x88\\x92j\\xe2\\x88\\xa3\\xe2\\x89\\xa5K, and swap\\nA\\ni\\nand\\nA\\nj\\n.\\nThat is, you can swap the values of two indices that are at a distance of at least\\nK from each other.\\nFind the lexicographically smallest array that can be reached, if you perform the above operation several (possibly, zero) times.\\nNote: For two arrays\\nX and\\nY of the same length,\\nX is said to be lexicographically smaller than\\nY if there exists an index\\ni (\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N) such that:\\nX\\n1\\n=Y\\n1\\n,X\\n2\\n=Y\\n2\\n,\\xe2\\x80\\xa6,X\\ni\\xe2\\x88\\x921\\n=Y\\ni\\xe2\\x88\\x921\\n; and\\nX\\ni\\n<Y\\ni\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains two space-separated integers\\nN and\\nK.\\nThe next line contains\\nN space-separated numbers, the values\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nOutput Format\\nFor each test case, print on a new line\\nN space-separated integers \\xe2\\x80\\x94 the lexicographically smallest array possible after applying the above operation several times.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N,K\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN across all tests won't exceed\\n10\\n6\\n.\\nSample 1:\\nInput\\nOutput\\n2\\n3 2\\n3 2 1\\n4 3\\n3 2 4 1\\n1 2 3\\n1 2 4 3\\nExplanation:\\nTest case\\n1: Initially, we have\\nA=[3,2,1].\\nChoose\\ni=1 and\\nj=3, which is valid because\\n\\xe2\\x88\\xa31\\xe2\\x88\\x923\\xe2\\x88\\xa3=2\\xe2\\x89\\xa5K=2.\\nSwapping\\nA\\n1\\nand\\nA\\n3\\n, we have the array\\n[1,2,3], which is the best we can do.\\nTest case\\n2:\\nA=[3,2,4,1] and\\nK=3 here.\\nThe only possible swap is\\ni=1 and\\nj=4; the other two elements can't be moved.\\nPerforming this swap gives us\\nA=[1,2,4,3], which is the best we can do.\"",
        "407": "b'Atleast and Atmost\\nThere are\\nN hidden integer arrays of length\\nN each. You are given the mex of each of these\\nN arrays.\\nAshish likes lower bounds and Kryptonix likes upper bounds. So, for each\\n0\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\xe2\\x88\\x921, find:\\nThe least possible number of occurrences of\\ni across all the arrays\\nThe most possible number of occurrences of\\ni across all the arrays\\nNote that these values must be computed independently, i.e, it is allowed to choose different configurations of arrays to attempt to minimize\/maximize the number of occurrences of different integers.\\nPlease see the samples for an example.\\nRecall that the mex of an array is the smallest non-negative integer that is not present in it. For example, the mex of\\n[0,2,4,1,1,5] is\\n3, and the mex of\\n[3,8,101,99,100] is\\n0.\\nInput Format\\nThe first line of input contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the size of the array.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n, denoting the mexes of the\\nN arrays.\\nOutput Format\\nFor each test case, output\\nN lines, each containing two space-separated integers. The\\ni-th line should contain the least and the most possible number of occurrences of\\ni across all the arrays.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\n0\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4N\\nThe sum of\\nN over all test cases does not exceed\\n3\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n2\\n1 0\\n5\\n3 1 5 0 2\\n3\\n1 2 1\\n1 2\\n0 2\\n4 13\\n3 13\\n2 13\\n1 13\\n1 15\\n3 8\\n1 2\\n0 4\\nExplanation:\\nTest case\\n1: We have the following:\\nFor\\ni=0, the two arrays can be\\n[0,3] and\\n[2,4] giving us one zero, or\\n[0,0] and\\n[3,1] giving us\\n2 zeros.\\nFor\\ni=1,\\n[0,4] and\\n[3,4] give no ones, while\\n[0,9] and\\n[1,1] give\\n2 ones.\\nTest case\\n3: We have the following:\\nFor\\ni=0, the arrays\\n[0,3,2],[1,0,4],[5,0,2] give the least number of zeros (i.e,\\n3), and the arrays\\n[0,0,0],[1,0,0],[0,0,0] give the most.\\nFor\\ni=1, the arrays\\n[5,7,0],[0,3,1],[6,0,3] give the least number of ones and the arrays\\n[0,3,2],[1,1,0],[5,0,2] give the most.\\nFor\\ni=2, the arrays\\n[3,0,9],[0,0,1],[0,0,0] give the least number of twos and the arrays\\n[2,0,2],[0,1,0],[2,2,0] give the most.'",
        "408": "b\"Maximum Sum Permutation\\nYou are given an array\\nA of size\\nN. The array will be used to perform\\nQ queries, where each query is comprised of a pair of integers, denoted by\\nL\\ni\\nand\\nR\\ni\\n.\\nBefore the queries are executed, you are allowed to rearrange the elements in array\\nA as desired.\\nNext, an integer variable\\nX is initialized to 0. For each of the\\ni-th queries, calculate the sum of elements from\\nA\\nL\\ni\\nthrough\\nA\\nR\\ni\\ninclusive (i.e.\\nA\\nL\\ni\\n+A\\nL\\ni\\n+1\\n+\\xe2\\x8b\\xaf+A\\nR\\ni\\n), and add this sum to\\nX.\\nThe objective of this problem is to find an arrangement of array\\nA that maximizes the final value of\\nX after all\\nQ queries have been processed.\\nIf there are multiple possible arrangements of\\nA which achieve this maximum value, you can output any.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains two space-separated integers\\nN and\\nQ \\xe2\\x80\\x94 the length of array and number of queries, respectively.\\nThe next line contains\\nN space-separated integers denoting the elements of the array.\\nThe next\\nQ lines describe the queries. The\\ni-th of these\\nQ lines contains two space-separated integers\\nL\\ni\\nand\\nR\\ni\\n, describing the range for the\\ni-th query.\\nOutput Format\\nFor each test case, output on a new line the maximum possible value of\\nX. And in the next line, output the rearranged array\\nA, which achieves that maximum possible value.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4200000\\n1\\xe2\\x89\\xa4Q\\xe2\\x89\\xa4200000\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4100000\\n1\\xe2\\x89\\xa4L\\ni\\n\\xe2\\x89\\xa4R\\ni\\n\\xe2\\x89\\xa4N\\nThe sum of\\nN over all test cases won't exceed\\n2\\xe2\\x8b\\x8510\\n5\\nThe sum of\\nQ over all test cases won't exceed\\n2\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n2\\n5 2\\n1 2 3 4 5\\n1 4\\n2 3\\n2 3\\n1 1\\n1 1\\n1 2\\n2 2\\n23\\n2 4 5 3 1 \\n4\\n1 1\\nExplanation:\\nTestcase 1: The given array is\\n[1,2,3,4,5]. Suppose we rearrange it as\\n[2,4,5,3,1].\\nInitially,\\nX=0\\nIn the first query, we add\\nA\\n1\\n+A\\n2\\n+A\\n3\\n+A\\n4\\nto\\nX. So\\nX=0+14=14.\\nIn the second query, we add\\nA\\n2\\n+A\\n3\\nto\\nX. So\\nX=14+9=23.\\nThis is the maximum possible value of\\nX that we can achieve after the\\nQ queries. And so, the output is\\n23, and this rearranged array.\"",
        "409": "b'Equal Hamming Distance\\nChef is given two binary strings\\nA and\\nB, each having length\\nN.\\nChef wants to find the number of binary strings\\nC, of length\\nN, such that\\nH(A,C)=H(B,C), where\\nH(X,Y) denotes the hamming distance between the strings\\nX and\\nY.\\nSince the answer can be large, output it modulo\\n10\\n9\\n+7.\\nNote: Hamming distance between two strings of equal length is the number of positions at which the corresponding characters are different.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains a single integer\\nN, the length of the strings.\\nThe second line contains the binary string\\nA.\\nThe third line contains the binary string\\nB.\\nOutput Format\\nFor each test case, output in a new line, the number of binary strings\\nC which satisfy the given conditions modulo\\n10\\n9\\n+7.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\nA and\\nB consist of\\n0 and\\n1 only.\\nSum of\\nN over all test cases do not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n2\\n11\\n00\\n5\\n10101\\n10101\\n3\\n101\\n011\\n2\\n32\\n4\\nExplanation:\\nTest case\\n1: The number of strings\\nC, of length\\n2, such that\\nH(A,C)=H(B,C) is\\n2. The strings are:\\nC=10: Here,\\nH(11,10)=H(00,10)=1, as there is only one position where the corresponding characters are different.\\nC=01: Here,\\nH(11,01)=H(00,01)=1.\\nTest case\\n3: The number of strings\\nC, of length\\n3, such that\\nH(A,C)=H(B,C) is\\n4. The strings are:\\nC=000: Here,\\nH(101,000)=H(011,000)=2, as there are two positions where the corresponding characters are different.\\nC=111: Here,\\nH(101,111)=H(011,111)=1, as there is only one position where the corresponding characters are different.\\nC=001: Here,\\nH(101,001)=H(011,001)=1, as there is only one position where the corresponding characters are different.\\nC=110: Here,\\nH(101,110)=H(011,110)=2, as there are two positions where the corresponding characters are different.'",
        "410": "b'PerMEXuation\\nYou are given an integer\\nN and a (\\n0-indexed) binary string\\nA having length\\nN+1.\\nFind any permutation\\nP of\\n0,1,2,...,N\\xe2\\x88\\x921 (or determine that it does not exist) that satisfies the following conditions for all\\ni (\\n0\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N):\\nif\\nA\\ni\\n=0: No contiguous segment of\\nP has\\nmex equal to\\ni\\nif\\nA\\ni\\n=1: There exists at least one contiguous segment of\\nP that has\\nmex equal to\\ni\\nIf multiple permutations exist that satisfy the given conditions, print any.\\nNote:\\nmex of a segment is the smallest non-negative number that does not occur in that segment.\\nInput Format\\nThe first line contains the number of test cases\\nT. Description of the test cases follows.\\nThe first line of each test case contains a single integer\\nN.\\nThe second line of each test case contains the binary string\\nA of length\\nN+1.\\nOutput Format\\nFor each test case print :\\nYes if there exists a permutation\\nP that satisfies the conditions described in the statement, followed by the permutation\\nP in the next line (If multiple permutations exist that satisfy the given conditions, print any).\\nNo otherwise.\\nYou may print each character of\\nYes and\\nNo in uppercase or lowercase (for example,\\nyes,\\nyEs,\\nYES will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\n\\xe2\\x88\\xa3A\\xe2\\x88\\xa3=N+1\\nIt is guaranteed that the sum of\\nN over all test cases does not exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n2\\n111\\n5\\n110100\\n5\\n110101\\n7\\n11100111\\nYes\\n0 1\\nNo\\nYes\\n0 2 1 4 3\\nYes\\n0 1 3 4 2 5 6\\nExplanation:\\nTest case-1: One of the possible permutations satisfying the given conditions is [\\n0,1] because:\\nmex([1])=0. Therefore the condition is satisfied for\\ni=0.\\nmex([0])=1. Therefore the condition is satisfied for\\ni=1.\\nmex([0,1])=2. Therefore the condition is satisfied for\\ni=2.\\nTest case-2: It can be proven that no permutation exists that satisfies the given conditions.\\nTest case-3: One of the possible permutations satisfying the given conditions is [\\n0,2,1,4,3] because:\\nmex([2])=0. Therefore the condition is satisfied for\\ni=0.\\nmex([0,2])=1. Therefore the condition is satisfied for\\ni=1.\\nThere does not exist any segment with\\nmex=2. Therefore the condition is satisfied for\\ni=2.\\nmex([0,2,1])=3. Therefore the condition is satisfied for\\ni=3.\\nThere does not exist any segment with\\nmex=4. Therefore the condition is satisfied for\\ni=4.\\nmex([0,2,1,4,3])=5. Therefore the condition is satisfied for\\ni=5.'",
        "411": "b\"Alter Ego\\nConsider an array\\nA of size\\nN:\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n, where\\nN is even. The\\nAlterEgo of this array\\nA, is another array\\nB, which is computed as follows:\\nStart with an empty array\\nB.\\nFor\\ni ranging from\\n1 to\\n2\\nN\\n, insert the elements\\n(A\\ni\\n+A\\ni+\\n2\\nN\\n) and\\n\\xe2\\x88\\xa3A\\ni\\n\\xe2\\x88\\x92A\\ni+\\n2\\nN\\n\\xe2\\x88\\xa3 to the end of array\\nB. Here\\n\\xe2\\x88\\xa3x\\xe2\\x88\\xa3 refers to absolute value of\\nx.\\nRearrange the array\\nB in some random order.\\nAs you can see, because of the third point, an array\\nA can have multiple\\nAlterEgo arrays.\\nGiven an array\\nB of even length\\nN, your job is to find if there exists an array\\nA such that\\nB is the\\nAlterEgo of\\nA. And if it does exist, find such an array\\nA with the maximum possible sum of elements.\\nThat is, if there is no array\\nA such that\\nB is an\\nAlterEgo of\\nA, print\\n\\xe2\\x88\\x921. Else print an array\\nA such that\\nB is an\\nAlterEgo of\\nA, and the sum of the elements of this array\\nA is as large as possible. If there are multiple arrays possible with the maximum sum, print any.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains a single integer\\nN \\xe2\\x80\\x94 the number of elements in the array.\\nThe second line of each test case contains\\nN space-separated integers\\nB\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nN\\n\\xe2\\x80\\x94 the elements of the array.\\nOutput Format\\nFor each test case, output on a new line, either\\n\\xe2\\x88\\x921, or\\nN space separated integers denoting array\\nA. If there are multiple arrays possible with the maximum sum, print any.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\nN is even.\\n1\\xe2\\x89\\xa4B\\ni\\n\\xe2\\x89\\xa410\\n5\\nThe sum of\\nN over all test cases won't exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n6\\n4 2 8 2 10 4\\n4\\n3 5 4 4\\n2\\n2 3\\n7 5 3 3 3 1 \\n4 4 0 1 \\n-1\\nExplanation:\\nTest Case\\n1: Consider the array\\nA=[7,5,3,3,3,1]. Let us try to compute the\\nAlterEgo of this array by following the steps:\\nFor\\ni=1,7+3=10 and\\n\\xe2\\x88\\xa37\\xe2\\x88\\x923\\xe2\\x88\\xa3=4\\nFor\\ni=2,5+3=8 and\\n\\xe2\\x88\\xa35\\xe2\\x88\\x923\\xe2\\x88\\xa3=2\\nFor\\ni=3,3+1=4 and\\n\\xe2\\x88\\xa33\\xe2\\x88\\x921\\xe2\\x88\\xa3=2\\nSo, an\\nAlterEgo of\\nA would be a rearrangement of the array\\n[10,4,8,2,4,2]. We see that the input array is indeed a rearrangement of this, and so,\\nA is a valid array. It also turns out that this sum of\\n7+5+3+3+3+1=22, is the largest possible sum.\\nTest Case\\n2: Consider the array\\nA=[4,4,0,1]. Let us try to compute the\\nAlterEgo of this array by following the steps:\\nFor\\ni=1,4+0=4 and\\n\\xe2\\x88\\xa34\\xe2\\x88\\x920\\xe2\\x88\\xa3=4\\nFor\\ni=2,4+1=5 and\\n\\xe2\\x88\\xa34\\xe2\\x88\\x921\\xe2\\x88\\xa3=3\\nSo, an\\nAlterEgo of\\nA would be a rearrangement of the array\\n[4,4,5,3]. We see that the input array is indeed a rearrangement of this, and so,\\nA is a valid array. It also turns out that this sum of\\n4+4+0+1=9, is the largest possible sum.\\nTest Case\\n3: It can be proved that there is no such array\\nA whose\\nAlterEgo is the given array\\nB.\"",
        "412": "b\"Alice Potter And Dumbledore Army\\nDumbledore's Army consists of\\nN members. Alice Potter is planning to hold\\nM Dumbledore's Army sessions, where the members will perform training tasks to improve their skills in Defense Against the Dark Arts.\\nInitially, each member of the Army has no tasks. Before the\\ni-th training session, Alice gives the\\nP\\ni\\n-th participant a task that he can complete in\\nT\\ni\\nseconds. And each subsequent session Alice will add more and more difficult tasks, i.e.\\nT\\ni\\n\\xe2\\x89\\xa4T\\ni+1\\n.\\nLet's assume that by the\\ni-th session, the\\nj-th participant has accumulated\\nC\\nj\\ntasks. Alice knows that sometimes there is not enough time to complete all the tasks in a single session, so instead of forcing them to complete all\\nC\\n1\\n+C\\n2\\n+\\xe2\\x80\\xa6+C\\nN\\ntasks, she can allow them to complete only a certain number\\nk of them. In this case, each participant can choose a subset of their tasks (in total, they have to choose\\nk tasks) and perform only those tasks. Each participant performs his tasks sequentially and spends time equal to the sum of the times of his tasks. However, different participants can perform tasks in parallel, so the total time of the session is equal to the maximum of the times of each participant. We denote the minimum possible value of this time by\\nans\\ni,k\\n.\\nIn order to optimally train participants, for each session\\ni Alice needs to know the value of\\nans\\ni,1\\n+ans\\ni,2\\n+\\xe2\\x80\\xa6+ans\\ni,i\\n. Help Alice \\xe2\\x80\\x94 calculate these sums for her.\\nInput Format\\nThe first line contains two integers\\nN and\\nM \\xe2\\x80\\x94 the number of members of Dumbledore's Army and the number of classes.\\nThe\\ni-th of the next\\nM lines contains two integers\\nP\\ni\\nand\\nT\\ni\\n\\xe2\\x80\\x94 the participant who will receive the next task and the amount of time it will take to complete it.\\nOutput Format\\nPrint\\nM integers. The\\ni-th of them should be equal to\\nans\\ni,1\\n+ans\\ni,2\\n+\\xe2\\x80\\xa6+ans\\ni,i\\n.\\nConstraints\\n1\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa410\\n6\\n1\\xe2\\x89\\xa4P\\ni\\n\\xe2\\x89\\xa4N,\\n1\\xe2\\x89\\xa4T\\ni\\n\\xe2\\x89\\xa410\\n6\\nT\\n1\\n\\xe2\\x89\\xa4T\\n2\\n\\xe2\\x89\\xa4\\xe2\\x80\\xa6\\xe2\\x89\\xa4T\\nM\\nSample 1:\\nInput\\nOutput\\n5 12\\n5 1\\n3 2\\n5 2\\n1 2\\n4 3\\n4 3\\n4 3\\n5 3\\n1 5\\n3 5\\n1 8\\n2 10\\n1\\n3\\n6\\n8\\n11\\n17\\n26\\n32\\n39\\n46\\n61\\n71\\nExplanation:\\nConsider the third session in the example. The fifth participant has tasks with\\nT=1 and\\nT=2, and the third participant has a single task with\\nT=2. It takes\\n1 unit of time to complete one task (only the fifth participant will complete the task with\\nT=1),\\n2 unit of time to complete two tasks, and\\n3 unit of time to complete all three tasks. Therefore, the third number in the answer is\\n1+2+3=6.\"",
        "413": "b\"Array Filling\\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nYou are given an array\\nA of size\\nN. Initially, the array is filled with\\n0-s.\\nThere are\\nM types of operations that you can perform on array\\nA. The\\ni\\nth\\noperation can be described by two integers\\n(x\\ni\\n,y\\ni\\n). In this operation, you choose a set of indices\\nS such that\\n1\\xe2\\x89\\xa4j\\xe2\\x89\\xa4N,\\n(jmody\\ni\\n)\\n\\xee\\x80\\xa0\\n=0,\\nA\\nj\\n=0,\\n, then you set\\nA\\nj\\n=x\\ni\\nfor all\\nj\\xe2\\x88\\x88S.\\nYou can perform the operations in any order, but one type of operation can't be done more than once. What is the maximum sum of integers of the array\\nA you obtain if you perform the\\nM operations optimally?\\nFor example, consider the array\\nA=[0,0,0,0].\\nSuppose\\nx=3,y=2. Here you can choose indices\\n1 and\\n3 and set\\nA\\n1\\n=A\\n3\\n=3. So the array A becomes\\n[3,0,3,0]. In this operation you can't choose the indices\\n2 and\\n4 because\\n(2mod2)=0,\\n(4mod2)=0.\\nSuppose\\nx=5,y=3 and you set\\nA\\n2\\n=5. So the array\\nA becomes\\n[3,5,3,0]. Here you can't choose index\\n1 because\\nA\\n1\\n>0 and index\\n3 because\\n(3mod3)=0 and\\nA\\n3\\n>0. However, you could also set\\nA\\n4\\n=5.\\nSuppose\\nx=4,y=4. Now you can't choose any index because\\nA\\nj\\n>0 for all\\n1\\xe2\\x89\\xa4j\\xe2\\x89\\xa43 and\\n(4mod4)=0. So the array remains same.\\nNote: Since input-output is large, prefer using fast input-output methods.\\nInput Format\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nEach testcase contains\\nM+1 lines of input.\\nThe first line of each test case contains two space-separated integers\\nN,M.\\nM lines follow. For each valid\\ni, the\\ni\\nth\\nof these lines contains two space-separated integers\\nx\\ni\\n,y\\ni\\n- parameters of the\\ni\\nth\\noperation.\\nOutput Format\\nFor each test case, output in a single line the maximum sum of integers of the array\\nA after\\nM operations.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa412600\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n9\\n1\\xe2\\x89\\xa4M\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4x\\ni\\n\\xe2\\x89\\xa410\\n9\\n2\\xe2\\x89\\xa4y\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nM over all test cases does not exceed\\n10\\n6\\n.\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n10 1\\n5 2\\n8 2\\n5 2\\n6 3\\n3 2\\n2 2\\n1 3\\n25\\n41\\n5\\nExplanation:\\nTest case\\n1: Optimal filling is\\n[5,0,5,0,5,0,5,0,5,0].\\nTest case\\n2: Optimal filling is\\n[6,6,5,6,6,0,6,6].\\nTest case\\n3: Optimal filling is\\n[2,1,2].\"",
        "414": "b'Jump to Sibling\\nLav has an array\\nA of size\\nN. He noticed that Chef is initially standing at the first index of the array.\\nWhile standing at the\\ni\\nth\\nindex\\n(1\\xe2\\x89\\xa4i<N) of the array, Chef can perform the following types of jumps:\\nJump 1: Jump to the immediate next index\\nj such that\\nA\\ni\\nand\\nA\\nj\\nhave the same parity.\\nJump 2: Jump to the immediate next index\\nj such that\\nA\\ni\\nand\\nA\\nj\\nhave different parity.\\nGiven that Chef can perform\\nJump 2 at most once, Lav wants to find the minimum number of jumps required by the Chef to reach the last index of the array.\\nInput Format\\nFirst line will contain\\nT, the number of test cases. Then the test cases follow.\\nThe first line of each test case contains a single integer\\nN - the size of the array\\nA.\\nThe second line of each test case contains\\nN integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n- the elements of the array\\nA.\\nOutput Format\\nFor each test case, output the minimum number of jumps required by the Chef to reach the last index of the array.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n2\\n4\\n1 2 3 4\\n4\\n2 1 3 4\\n2\\n1\\nExplanation:\\nTest Case\\n1: The minimum number of jumps required by the Chef to reach the last index is\\n2. Chef is initially standing at index\\n1.\\nChef chooses\\nJump 2 and jumps to index\\n2 as it is the immediate next element with different parity.\\nChef chooses\\nJump 1 and jumps to index\\n4 as it is the immediate next element with the same parity.\\nTest Case\\n2: The minimum number of jumps required by the Chef to reach the last index is\\n1. Chef is currently standing at index\\n1.\\nChef chooses\\nJump 1 and jumps to index\\n4 as it is the immediate next element with the same parity.'",
        "415": "b'Total Components\\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nYou are given all\\nN\\xe2\\x88\\x921 integers in the range\\n[2,N]. In each step, you choose\\n2 distinct integers and if they share a common factor greater than\\n1, you combine them into the same group. You keep doing it until no further merging is possible.\\nBelonging to a group is an equivalence relation. So if integers\\na and\\nb are in the same group and integers\\nb and\\nc are in the same group, then integers\\na and\\nc are also said to be in the same group.\\nFind the total number of groups formed in the end.\\n###Input\\nFirst line will contain\\nT, number of test cases. Then the test cases follow.\\nEach test case contains a single line of input, a single integer\\nN.\\n###Output For each test case, output in a single line the answer to the problem.\\n###Constraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n7\\nSubtasks\\nSubtask #1 (30 points):\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4200\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\nSubtask #2 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n2\\n4\\n8\\n1\\n2\\n3\\nExplanation:\\nTest Case\\n1: The final group is\\n{2}.\\nTest Case\\n2: The final groups are\\n{2,4}, and\\n{3}.\\nTest Case\\n3: The final groups are\\n{2,3,4,6,8},\\n{5}, and\\n{7}.'",
        "416": "b'Chef, Chefina and Their Friendship\\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\\nIn Chefland, each person has their own non-empty personal string. When two people with personal strings\\nT\\n1\\nand\\nT\\n2\\n(possibly identical) become friends in Chefland, their strings are replaced by a new string\\nS=T\\n1\\n+T\\n1\\n+T\\n2\\n+T\\n2\\n, where\\n+ denotes string concatenation.\\nChef recently became friends with Chefina. However, Chefina\\'s personal string was her favourite and she got upset when it was replaced by\\nS. She wanted her personal string back. Chef does not remember\\nT\\n1\\nand\\nT\\n2\\nnow, he only knows\\nS.\\nFind the number of ways in which Chef can retrieve valid strings\\nT\\n1\\nand\\nT\\n2\\nfrom the given string\\nS. It is also possible that Chef does not remember\\nS correctly, in which case there is no way to retrieve\\nT\\n1\\nand\\nT\\n2\\n.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains a single string\\nS.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 the number of ways to retrieve\\nT\\n1\\nand\\nT\\n2\\nfrom\\nS.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n4\\xe2\\x89\\xa4\\xe2\\x88\\xa3S\\xe2\\x88\\xa3\\xe2\\x89\\xa410\\n5\\n\\xe2\\x88\\xa3S\\xe2\\x88\\xa3 is divisible by\\n2\\nS contains only lowercase English letters\\nthe sum of\\n\\xe2\\x88\\xa3S\\xe2\\x88\\xa3 over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n6\\nSample 1:\\nInput\\nOutput\\n3\\nabcd\\naaaa\\nababcdccdc\\n0\\n1\\n1\\nExplanation:\\nExample case 1: There is no way to choose\\nT\\n1\\nand\\nT\\n2\\n.\\nExample case 2: Both\\nT\\n1\\nand\\nT\\n2\\nmust be \"a\".'",
        "417": "b'Maximum Factors Problem\\nYou are given an integer\\nN. Let\\nK be a divisor of\\nN of your choice such that\\nK>1, and let\\nM=\\nK\\nN\\n. You need to find the smallest\\nK such that\\nM has as many divisors as possible.\\nNote:\\nU is a divisor of\\nV if\\nV is divisible by\\nU.\\nInput Format\\nThe first line of the input contains an integer\\nT - the number of test cases. The test cases then follow.\\nThe only line of each test case contains an integer\\nN.\\nOutput Format\\nFor each test case, output in a single line minimum value of\\nK such that\\nM has as many divisors as possible.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa43000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n3\\n3\\n4\\n6\\n3\\n2\\n2\\nExplanation:\\nTest case\\n1: The only possible value for\\nK is\\n3, and that is the answer.\\nTest case\\n2: There are two cases:\\nK=2. Then\\nM=\\n2\\n4\\n=2, which has\\n2 divisors (\\n1 and\\n2).\\nK=4. Then\\nM=\\n4\\n4\\n=1, which has\\n1 divisor (\\n1).\\nTherefore the answer is\\n2.\\nTest case\\n3: There are three cases:\\nK=2. Then\\nM=\\n2\\n6\\n=3, which has\\n2 divisors (\\n1 and\\n3).\\nK=3. Then\\nM=\\n3\\n6\\n=2, which has\\n2 divisors (\\n1 and\\n2).\\nK=6. Then\\nM=\\n6\\n6\\n=1, which has\\n1 divisor (\\n1).\\nTherefore the answer is\\n2.'",
        "418": "b'Winter\\nUneori \\xc3\\xaemi spun: am s\\xc4\\x83 mor\\nat\\xc3\\xa2t de singuratec\\xc4\\x83-n mijlocul lor;\\nlimba simpl\\xc4\\x83 a bucuriilor n-am \\xc3\\xaenv\\xc3\\xa2\\xc8\\x9bat;\\nam s\\xc4\\x83 mor ca o pas\\xc4\\x83re care prea mult a zburat,\\ndar n-a f\\xc4\\x83cut cuib nic\\xc4\\x83ieri.\\n\\xe2\\x80\\x95 Oamenii ma uimesc, Magda Isafost\\nAs of writing the informal statement, the winter just came and the statement was in season. Now, it is not winter anymore, so here is the formal statement instead:\\nYou are given a connected graph with\\nN nodes and\\nM edges. You are given\\nQ queries of the following types:\\n1 u: Given node\\nu\\n(1\\xe2\\x89\\xa4u\\xe2\\x89\\xa4N), set the state of the node\\nu to frozen.\\n2 t: Given\\nt, let\\nt units of time pass by.\\n3 v: Given node\\nv\\n(1\\xe2\\x89\\xa4v\\xe2\\x89\\xa4N), answer if node\\nv is currently frozen.\\nInitially, no node is frozen.\\nThe graph has the following property:\\nIf, at time\\nT, a node\\nu is frozen, then, at time\\n(T+1), all neighbours of\\nu become frozen.\\nFor each query of type\\n3, answer whether the node is currently frozen.\\nNote:\\nIf a node is already frozen, it remains unaffected after a type\\n1 query.\\nIf, for a frozen node\\nu, a neighbour\\nv of node\\nu is frozen at time\\nT, node\\nv remains unaffected at time\\n(T+1).\\nInput Format\\nThe first line of input contains three integers\\nN,M, and\\nQ.\\nM lines follow, the\\ni\\nth\\nof which contains two integers\\nu\\ni\\nand\\nv\\ni\\n, representing there is an edge between nodes\\nu\\ni\\nand\\nv\\ni\\n.\\nThen,\\nQ lines follow, the\\nj\\nth\\nof which contains two integers\\ntype\\nj\\nand\\nx\\nj\\n.\\nIf\\ntype\\nj\\nis\\n1 or\\n2, it indicates that you must effectuate an update of the type\\ntype\\nj\\nwith parameter\\nx\\nj\\n. Otherwise, answer the query with parameter\\nx\\nj\\nOutput Format\\nFor each query of type\\n3, print\\nYES if the queried node is frozen. Otherwise, print\\nNO.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings\\nYeS,\\nyEs,\\nyes and\\nYES will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4N,Q\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4M\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4u\\ni\\n,v\\ni\\n\\xe2\\x89\\xa4N\\n1\\xe2\\x89\\xa4type\\nj\\n\\xe2\\x89\\xa43\\n1\\xe2\\x89\\xa4x\\nj\\n\\xe2\\x89\\xa4N, if the query type is\\n1 or\\n3.\\n1\\xe2\\x89\\xa4x\\nj\\n\\xe2\\x89\\xa410\\n9\\n, if the query type is\\n2.\\nSubtasks\\nSubtask 1 (10 points):\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000,1\\xe2\\x89\\xa4Q\\xe2\\x89\\xa42000,1\\xe2\\x89\\xa4M\\xe2\\x89\\xa43000.\\nSubtask 2 (30 points): Each node in the given graph has at most two neighbours.\\nSubtask 3 (60 points): Original constraints.\\nSample 1:\\nInput\\nOutput\\n6 6 6\\n1 2\\n2 3\\n4 1\\n5 4\\n6 1\\n6 5\\n1 1\\n3 1\\n1 5\\n2 1\\n3 4\\n3 3\\nYES\\nYES\\nNO\\nExplanation:\\nTest Case\\n1: The graph looks like:\\nQuery\\n1: Freeze the node\\n1. The graph looks like:\\nQuery\\n2: Find the status of node\\n1. Since node\\n1 is frozen, we print\\nYES.\\nQuery\\n3: Freeze the node\\n5. The graph looks like:\\nQuery\\n4:\\n1 unit of time passes. Before this, nodes\\n1 and\\n5 were frozen.\\nAfter\\n1 second, all the neighbours of node\\n1, i.e., nodes\\n2,4, and\\n6, and all the neighbours of node\\n5, i.e., nodes\\n4 and\\n6 are frozen.\\nThus, after this query, the frozen nodes in the graph are\\n1,2,4,5, and\\n6. The graph looks like:\\nQuery\\n5: Find the status of node\\n4. Since node\\n4 is frozen, we print\\nYES.\\nQuery\\n6: Find the status of node\\n3. Since node\\n3 is not frozen, we print\\nNO.'",
        "419": "b'Subarray Removal\\nChef has a permutation\\nA of length\\nN. Chef can perform the following operation on\\nA:\\n1) Select\\nL and\\nR such that\\n(1\\xe2\\x89\\xa4L\\xe2\\x89\\xa4R\\xe2\\x89\\xa4N) and\\n(R\\xe2\\x88\\x92L+1<N)\\n2) Remove the subarray\\nA\\nL\\xe2\\x80\\xa6R\\nfrom\\nA. (The remaining parts of\\nA are concatenated)\\nThe score of this operation\\n= length of the subarray removed\\n=R\\xe2\\x88\\x92L+1\\nFor e.g., if\\nA=[3,1,4,6,5,2], and Chef selects\\nL=3,R=5, then the score of this operation\\n=3 and\\nA becomes\\n[3,1,2].\\nChef wants to perform this operation exactly once such that, after the operation,\\nA still remains a permutation. What is the maximum score that Chef can achieve in doing so?\\nAs a reminder, a permutation of length\\nM is an array where every integer from\\n1 to\\nM occurs exactly once.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the size of the permutation\\nA.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\ndenoting the permutation\\nA.\\nOutput Format\\nFor each test case, output the maximum score that Chef can achieve after applying the operation exactly once such that\\nA still remains a permutation.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nA is a permutation\\nSum of\\nN over all test cases does not exceed\\n5\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n3\\n2 1 3\\n7\\n1 2 3 4 5 6 7\\n6\\n3 1 4 6 5 2\\n1\\n6\\n3\\nExplanation:\\nTest Case 1: Chef can remove subarray\\nA\\n3\\xe2\\x80\\xa63\\nafter which\\nA becomes\\n[2,1] which is still a permutation.\\nTest Case 2: Chef can remove subarray\\nA\\n2\\xe2\\x80\\xa67\\nafter which\\nA becomes\\n[1] which is still a permutation.\\nTest Case 3: Chef can remove subarray\\nA\\n3\\xe2\\x80\\xa65\\nafter which\\nA becomes\\n[3,1,2] which is still a permutation.'",
        "420": "b\"Alternative Sufferings\\nYou are given a binary string\\nS.\\nIn one second, the following scenario happens simultaneously and independently for all the bits which are set to\\n1 in the string:\\nChange the bit from\\n1 to\\n0.\\nIf the left neighbour exists and is\\n0, change it to\\n1.\\nIf the right neighbour exists and is\\n0, change it to\\n1.\\nFor example, if\\nS=010 initially, then after\\n1 second,\\nS=101 (the\\n1 bit and both its neighbours were changed). After another second,\\nS=010. Here, the first and the last bit were changed to\\n0 because earlier they were\\n1. The middle bit was changed because it was\\n0 earlier and it was a neighbour of a\\n1 bit.\\nFind out the string\\nS after\\nK seconds.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains two space-separated integers\\nN and\\nK \\xe2\\x80\\x94 the length of string\\nS and the number of seconds.\\nThe next line describes the string\\nS.\\nOutput Format\\nFor each test case, output the string\\nS after exactly\\nK seconds.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN over all test cases won't exceed\\n10\\n6\\n.\\nS can only contain the characters\\n0 or\\n1.\\nSample 1:\\nInput\\nOutput\\n3\\n3 1\\n101\\n5 2\\n10001\\n14 3\\n10011010111000\\n010\\n10101\\n01100101010101\\nExplanation:\\nTest case\\n1: The middle bit is changed to\\n1 since it had a neighbouring set bit (in this case both left and right) and both the set bits are changed to\\n0. Hence, after one second, it is\\n101.\\nTest case\\n2: After first second, the string\\nS will be\\n01010. After another second , the string becomes\\n10101.\"",
        "421": "b\"Rock Paper Scissors\\nThere are\\nN players standing in a line, indexed\\n1 to\\nN from left to right. They all play a game of Rock, Paper, Scissors. Each player has already decided which move they want to play. You are given this information as a string\\nS of length\\nN, i.e,\\nS\\ni\\nis equal to\\nR if player\\ni will play Rock.\\nS\\ni\\nis equal to\\nP if player\\ni will play Paper.\\nS\\ni\\nis equal to\\nS if player\\ni will play Scissors.\\nLet\\nW(i,j) denote the move played by the winner if players\\ni,i+1,\\xe2\\x80\\xa6,j compete in order from left to right. That is,\\nFirst, players\\ni and\\ni+1 play a game\\nThe winner of this game plays against player\\ni+2\\nThe winner of the second game plays against player\\ni+3\\n\\xe2\\x8b\\xae\\nThe winner of the first\\nj\\xe2\\x88\\x92i\\xe2\\x88\\x921 games plays against player\\nj, and the move played by the winner of this game is declared to be\\nW(i,j).\\nIf\\ni=j, then player\\ni is considered to be the winner and\\nW(i,i)=S\\ni\\n.\\nYour task is to find the value of\\nW(i,N) for all\\ni from\\n1 to\\nN.\\nNote : If a person with index\\ni and index\\nj (\\ni<j) play against each other, then:\\nIf\\nS\\ni\\n\\xee\\x80\\xa0\\n=S\\nj\\n, the winner is decided by classical rules, i.e, rock beats scissors, scissors beats paper, and paper beats rock.\\nIf\\nS\\ni\\n=S\\nj\\n, the player with lower index (in this case,\\ni) wins.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN, the number of players.\\nThe second line of each test case contains the string\\nS of length\\nN, denoting the moves chosen by the players.\\nOutput Format\\nFor each test case, print a single line containing a string of length\\nN, whose\\ni-th character is\\nW(i,N).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa45\\xe2\\x8b\\x8510\\n5\\nS\\ni\\nis either\\nR,\\nP or\\nS\\nSum of\\nN over all test cases doesn't exceed\\n5\\xe2\\x8b\\x8510\\n5\\nSubtasks\\nSubtask 1 (10 points):\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa45000\\nSum of\\nN over all test cases doesn't exceed\\n5000\\nSubtask 2 (90 points):\\nOriginal constraints\\nSample 1:\\nInput\\nOutput\\n2\\n1\\nS\\n4\\nSSPR\\nS\\nRRPR\\nExplanation:\\nTest Case 1.\\nW(1,1)=S as there is only one player.\\nTest Case 2.\\nFor\\nW(1,4) the game is played as follows :\\nPlayer\\n1 and\\n2 compete, player\\n1 wins.\\nPlayer\\n1 and\\n3 compete, player\\n1 wins.\\nPlayer\\n1 and\\n4 compete, player\\n4 wins.\\nHence, we print\\nW(1,4)=S\\n4\\n=R\\nFor\\nW(3,4) the game is played as follows :\\nPlayer\\n3 and\\n4 compete, player\\n3 wins.\\nHence, we print\\nW(3,4)=S\\n3\\n=P\"",
        "422": "b\"NASA\\nI'ma need space, I'ma, I'ma need\\nYou know I'm a star; space, I'ma need space\\nI'ma need space, I'ma, I'ma need space (N-A-S-A)\\nGiven an array\\nA of size\\nN.\\nFind total number of pairs in the array\\n(i,j)\\n(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4j\\xe2\\x89\\xa4N) such that:\\nA\\ni\\n\\xe2\\x8a\\x95A\\nj\\nis a palindrome (in decimal representation), where\\n\\xe2\\x8a\\x95 denotes the bitwise xor operator.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains one integer\\nN - the size of the array.\\nThe next line contains\\nN space-seperated integers as array elements.\\nOutput Format\\nFor each test case, output on a new line, the number of pairs satisfying the given condition.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n2\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n0\\xe2\\x89\\xa4A\\ni\\n<2\\n15\\nThe sum of N over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n2\\n4\\n13 27 12 26\\n3\\n2 2 2\\n8\\n6\\nExplanation:\\nTest case\\n1: The pairs which form palindrome are :\\n13\\xe2\\x8a\\x9513=0\\n13\\xe2\\x8a\\x9527=22\\n13\\xe2\\x8a\\x9512=1\\n27\\xe2\\x8a\\x9527=0\\n27\\xe2\\x8a\\x9526=1\\n12\\xe2\\x8a\\x9512=0\\n12\\xe2\\x8a\\x9526=22\\n26\\xe2\\x8a\\x9526=0\\nTest case\\n2: All the pairs form palindrome.\"",
        "423": "b'K Distinct Array\\nAn array is said to be good if all its elements are distinct, i.e. no two elements of the array are equal to each other.\\nYou are given a positive integer\\nN and an integer\\nK such that\\nN\\xe2\\x89\\xa4K\\xe2\\x89\\xa4(\\n2\\nN+1\\n).\\nConstruct an array\\nA of length\\nN that satisfies the following conditions\\nA has exactly\\nK good (contiguous) subarrays, and\\nEvery element of\\nA is an integer from\\n1 to\\nN (both inclusive).\\nIf there are multiple such arrays, you can print any of them.\\nNote: It can be shown that for all inputs satisfying the given constraints, there is always a valid solution.\\nInput Format\\nThe first line contains an integer\\nT, the number of testcases. The description of the\\nT testcases follow.\\nEach testcase consists of a single line with two space separated integers,\\nN and\\nK respectively.\\nOutput Format\\nFor each testcase print\\nN space separated integers, the elements of the constructed array.\\nIf there are multiple outputs, you can print any of them.\\nYour output will be considered correct only if the following conditions are satisfied,\\nEvery element of the array is between\\n1 and\\nN, and\\nThe array has exactly\\nK good subarrays\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nN\\xe2\\x89\\xa4K\\xe2\\x89\\xa4(\\n2\\nN+1\\n)\\nSum of\\nN over all testcases is atmost\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n5 5\\n5 15\\n5 7\\n1 1 1 1 1\\n1 2 3 4 5\\n1 2 2 1 1\\nExplanation:\\nTest Case 1:\\nN=5,K=5. All subarrays of length\\n1 are good, therefore every array of size\\nN has at least\\nN good subarrays. If all elements are equal then these will be the only good subarrays so the given array\\n{1,1,1,1,1} is a valid solution. Observe that under the constraints there are\\n5 different solutions (one for each value\\n1 through\\n5) and all of them will be considered correct.\\nTest Case 2:\\nN=5,K=15. There are only\\n(\\n2\\nN+1\\n)=15 subarrays, including the array itself. Therefore the array itself must be good which leads us to the solution given above. Any permutation of\\n{1,2,3,4,5} is also a valid solution, thus there are\\n5!=120 different solutions to this case and all of them will be considered correct.\\nTest Case 3:\\nN=5,K=7. The constructed array is\\nA={1,2,2,1,1}. You may verify that the only good subarrays of\\nA, in addition to the\\n5 subarrays of length\\n1, are those shown below (subarrays are highlighted red).\\n{1,2,2,1,1}\\n{1,2,2,1,1}'",
        "424": "b\"Prime Factor Division\\nMario has reached Bowser's Castle and is inches away from rescuing Princess Peach. He has to answer the following problem at the gate to be allowed to enter. Can you help him?\\nLet\\nS(M) denote the set of all prime factors of\\nM.\\nGiven two positive integers\\nA and\\nB, determine whether\\nA is divisible by all elements in\\nS(B).\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line of input,\\nA and\\nB, as mentioned in the statement.\\nOutput Format\\nFor each test case, print YES if\\nA is divisible by all elements in\\nS(B) and NO otherwise.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A,B\\xe2\\x89\\xa410\\n18\\nSample 1:\\nInput\\nOutput\\n3\\n21 63\\n72 72\\n25 20\\nYES\\nYES\\nNO\\nExplanation:\\nTest case\\n1: The set of all prime factors of\\nB=63 is given by\\nS(B)={3,7}. Also,\\nA=21 is divisible by all elements in\\nS(B).\\nTest case\\n2: The set of all prime factors of\\nB=72 is given by\\nS(B)={2,3}. Also,\\nA=72 is divisible by all elements in\\nS(B).\\nTest case\\n3: The set of all prime factors of\\nB=20 is given by\\nS(B)={2,5}. Here,\\nA=25 is not divisible by\\n2 in\\nS(B).\"",
        "425": "b'Queries About Numbers\\nChef loves number theory very much. Now it is time to solve a new kind of problem.\\nThere is given a natural number N. Chef has to answer Q queries of the form T K.\\nHere T is the type of query and K is the natural number.\\nIf T=1, Chef must find the number of natural numbers which is divisor of both N and K.\\nIf T=2, Chef must find the number of natural numbers which is divisor of N and is divisible by K.\\nIf T=3, Chef must find the number of natural numbers which is divisor of N and is not divisible by K.\\n\\nChef can solve all these queries, but you will be hungry for night if this happens, because Chef will not have free time to cook a meal. Therefore you compromise with him and decided that everyone must do his\/her own job. You must program and Chef must cook.\\nInput\\nThere will be 2 numbers in the first line: N and Q.\\nQ lines follow with 2 numbers each: T and K\\nOutput\\nFor each of the Q lines you must output the result for corresponding query in separat line.\\nConstraints\\n1<=N<=1012\\n1<=Q<=5*105\\n1<=T<=3\\n1<=K<=1012\\nSample 1:\\nInput\\nOutput\\n12 6\\n1 6\\n1 14\\n2 4\\n2 3\\n3 12\\n3 14\\n4\\n2\\n2\\n3\\n5\\n6\\nExplanation:\\nNumbers for each query:\\n{1,2,3,6}\\n{1,2}\\n{4,12}\\n{3,6,12}\\n{1,2,3,4,6}\\n{1,2,3,4,6,12}'",
        "426": "b'Maximum And Or\\nChef has been recently introduced to bitwise operations.\\nChefina defines a function\\nF(P,Q,R)=(R\\n\\xe2\\x88\\xa3\\nP)\\xe2\\x88\\x92(Q\\n&\\nP)\\nwhere\\n\\xe2\\x88\\xa3 represents the bitwise or and\\n& represents the bitwise and operator.\\nChef has three non-negative integers\\nA,B, and\\nC.\\nChef has to count the number of integers\\nX, such that:\\n0\\xe2\\x89\\xa4X<2\\nC\\n;\\nF(X,A,B) has the maximum possible value among all values of\\nX.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line containing three space-separated integers\\nA,B,C\\xe2\\x88\\x92 as defined in the statement.\\nOutput Format\\nFor each test case, output on a new line, the count of\\nX such that\\nF(X,A,B) is maximum possible.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n0\\xe2\\x89\\xa4C\\xe2\\x89\\xa430\\n0\\xe2\\x89\\xa4A,B<2\\nC\\nSample 1:\\nInput\\nOutput\\n3\\n1 2 3\\n0 0 2\\n87 986 15\\n4\\n1\\n64\\nExplanation:\\nTest case\\n1: There are\\n4 possible values of\\nX which give maximum value for\\nF(X,A,B). These values are\\n4,5,6,7.\\nFor all these values,\\nF(X,A,B) is\\n5.\\nTest case\\n2: The only possible value of\\nX which gives maximum value for\\nF(X,A,B) is\\n3.\\nFor\\nX=3:\\n0\\xe2\\x89\\xa4X<2\\n2\\nF(3,0,0)=(0\\n\\xe2\\x88\\xa3\\n3)\\xe2\\x88\\x92(0\\n&\\n3)=3\\nIt can be shown that\\nF(X,0,0) cannot have a value greater than\\n3 for\\n0\\xe2\\x89\\xa4X<2\\n2\\n.'",
        "427": "b'No sequence\\nAlice gave Bob\\n3 integers\\nN,K, and\\nS. Help Bob find an\\nS-good sequence.\\nA sequence\\nB of length\\nN is called\\nS-good if the following conditions are met:\\nB\\ni\\n\\xe2\\x88\\x88{\\xe2\\x88\\x921,0,1} for each\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\n\\xe2\\x88\\x91\\ni=1\\nN\\nB\\ni\\n\\xe2\\x8b\\x85K\\ni\\xe2\\x88\\x921\\n=S\\nIf there are multiple\\nS-good sequences, print any of them.\\nIf no\\nS-good sequence exists, print\\n\\xe2\\x88\\x922.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line of input containing three space-separated integers \\xe2\\x80\\x94\\nN,K, and\\nS.\\nOutput Format\\nFor each test case:\\nIf no\\nS-good sequence exists, print\\n\\xe2\\x88\\x922.\\nOtherwise, output\\nN space-separated integers denoting the\\nS-good sequence.\\nIf multiple\\nS-good sequences exist, you may print any of them.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\n2\\xe2\\x89\\xa4K\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4S\\xe2\\x89\\xa410\\n18\\nSample 1:\\nInput\\nOutput\\n3\\n4 2 15\\n3 6 36\\n5 5 7\\n1 1 1 1\\n0 0 1\\n-2\\nExplanation:\\nTest case\\n1: We have\\nB=[1,1,1,1] and\\nS=15\\n\\xe2\\x88\\x91\\ni=1\\nN\\nB\\ni\\n\\xe2\\x8b\\x85K\\ni\\xe2\\x88\\x921\\n=1\\xe2\\x8b\\x851+2\\xe2\\x8b\\x851+4\\xe2\\x8b\\x851+8\\xe2\\x8b\\x851=15, hence\\nB is an\\nS-good sequence.\\nTest case\\n2: We have\\nB=[0,0,1] and\\nS=36.\\n6\\n2\\n=36 so clearly\\nB is\\nS-good.\\nTest case\\n3: No\\nS-good sequence of length\\n5 exists.'",
        "428": "b'Gold Mining\\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nChef and Chefu are working as gold miners. There are a total of\\nN gold mines, numbered\\n1 through\\nN. For each valid\\ni, the\\ni-th gold mine contains\\nG\\ni\\ngold in total; if only Chef worked in it, it would take him\\nA\\ni\\ndays to completely mine it, while if only Chefu worked in it, it would take him\\nB\\ni\\ndays.\\nEach of our miners may only work in one mine at a time, but they may decide to start working in another mine at any time (even in the middle of some day), any number of times. They also choose the mines to work in independently from each other and they may work in the same mine at the same time. Mining gold is a continuous process, i.e. if a miner works for\\nt days (where\\nt is a real number) in a mine where this miner has mining speed\\ng gold per day, then he will mine\\ng\\xe2\\x8b\\x85t gold. Obviously, it is impossible to work in a mine after no gold remains in it. For example, if a gold mine contains\\n30 gold and Chef needs\\n2 days to completely mine it, but he spends\\n1 day in it, then he will mine\\n15 gold; if Chefu needs\\n1 day to completely mine the same gold mine, and both Chef and Chefu start working in this mine at the same time, it will be empty after\\n2\/3 days \\xe2\\x80\\x95 Chefu will mine\\n20 gold, while Chef will mine\\n10 gold.\\nAt each point of time, both Chef and Chefu know the gold mine in which the other miner is working. Each of them wants to gather the maximum amount of gold for himself. Find the amounts of gold the miners will have if they both act optimally.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN.\\nN lines follow. For each valid\\ni, the\\ni-th of these lines contains three space-separated integers\\nG\\ni\\n,\\nA\\ni\\nand\\nB\\ni\\n.\\nOutput\\nFor each test case, print a single line containing two space-separated real numbers \\xe2\\x80\\x95 the amount of gold mined by Chef and the amount of gold mined by Chefu. Your answer will be considered correct if the absolute or relative error of each amount of gold does not exceed\\n10\\n\\xe2\\x88\\x926\\n.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41,000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4G\\ni\\n\\xe2\\x89\\xa410\\n5\\nfor each valid\\ni\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n5\\nfor each valid\\ni\\n1\\xe2\\x89\\xa4B\\ni\\n\\xe2\\x89\\xa410\\n5\\nfor each valid\\ni\\nthe sum of\\nN over all test cases does not exceed\\n10\\n6\\nSubtasks\\nSubtask #1 (50 points):\\nN\\xe2\\x89\\xa42\\nSubtask #2 (50 points): original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n1\\n30 2 1\\n3\\n10 1 1\\n20 2 2\\n30 3 3\\n10.00000 20.00000\\n30.00000 30.00000'",
        "429": "b'Consecutive Adding\\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nYou are given two matrices\\nA and\\nB, each with\\nR rows (numbered\\n1 through\\nR) and\\nC columns (numbered\\n1 through\\nC). Let\\'s denote an element of\\nA or\\nB in row\\ni and column\\nj by\\nA\\ni,j\\nor\\nB\\ni,j\\nrespectively.\\nYou are also given an integer\\nX. You may perform the following operation on\\nA any number of times:\\nChoose an integer\\nv.\\nChoose\\nX consecutive elements of\\nA, either in the same row or in the same column.\\nAdd\\nv to each of the chosen elements of\\nA.\\nDetermine whether it is possible to change\\nA to\\nB in a finite number of operations.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains three space-separated integers\\nR,\\nC and\\nX.\\nR lines follow. For each valid\\ni, the\\ni-th of these lines contains\\nC space-separated integers\\nA\\ni,1\\n,A\\ni,2\\n,\\xe2\\x80\\xa6,A\\ni,C\\n.\\nR more lines follow. For each valid\\ni, the\\ni-th of these lines contains\\nC space-separated integers\\nB\\ni,1\\n,B\\ni,2\\n,\\xe2\\x80\\xa6,B\\ni,C\\n.\\nOutput\\nFor each test case, print a single line containing the string \"Yes\" if there is a sequence of operations that changes the matrix\\nA to\\nB, or \"No\" if such a sequence of operations does not exist.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n3\\n2\\xe2\\x89\\xa4R,C\\xe2\\x89\\xa410\\n3\\n2\\xe2\\x89\\xa4X\\xe2\\x89\\xa4min(R,C)\\n\\xe2\\x88\\xa3A\\ni,j\\n\\xe2\\x88\\xa3,\\xe2\\x88\\xa3B\\ni,j\\n\\xe2\\x88\\xa3\\xe2\\x89\\xa410\\n9\\nfor each valid\\ni,j\\nthe sum of\\nR over all test cases does not exceed\\n10\\n3\\nthe sum of\\nC over all test cases does not exceed\\n10\\n3\\nSubtasks\\nSubtask #1 (5 points):\\nX=2\\nSubtask #2 (10 points):\\nX=3\\nSubtask #3 (85 points): original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n2 2 2\\n1 2\\n0 1\\n0 0\\n0 0\\n2 2 2\\n1 2\\n0 1\\n0 0\\n-1 0\\n3 2 2\\n1 1\\n2 2\\n3 3\\n1 0\\n2 0\\n3 0\\nYes\\nNo\\nNo\\nExplanation:\\nExample case 1: We can add\\n\\xe2\\x88\\x921 to both elements in row\\n1 and add\\n\\xe2\\x88\\x921 to both elements in column\\n2.\\nExample case 2: After any operation, the sum of elements of\\nA remains even. However, the sum of elements of\\nB is odd, so\\nA cannot be changed to\\nB.'",
        "430": "b'K Increment Palindrome\\nChef has an array\\nA of size\\nN and an integer\\nK. He can perform the following operation on\\nA any number of times:\\nSelect any\\nK distinct indices\\ni\\n1\\n,i\\n2\\n,\\xe2\\x80\\xa6,i\\nK\\nand increment the array elements at these\\nK indices by\\n1.\\nFormally, set\\nA\\ni\\nj\\n:=A\\ni\\nj\\n+1 for all\\n1\\xe2\\x89\\xa4j\\xe2\\x89\\xa4K.\\nFor example, if\\nA=[3,2,8,4,6] and we select the indices\\n2,3,5, then\\nA becomes\\n[3,2+1,8+1,4,6+1] i.e.\\n[3,3,9,4,7].\\nDetermine if Chef can make the array\\nA palindromic by applying the given operation any number of times.\\nNote: An array is called palindrome if it reads the same backwards and forwards, for e.g.\\n[4,10,10,4] and\\n[7,1,7] are palindromic arrays.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first line of each test case contains two integers\\nN and\\nK \\xe2\\x80\\x94 the size of the array\\nA and the parameter mentioned in the statement.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\ndenoting the array\\nA.\\nOutput Format\\nFor each test case, output YES if we can make\\nA palindromic by applying the given operation. Otherwise, output NO.\\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n6\\nSum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n5 3\\n2 4 5 4 2\\n6 1\\n4 5 5 4 6 4\\n6 2\\n4 5 5 4 6 4\\n4 2\\n1 2 3 3\\nYES\\nYES\\nYES\\nNO\\nExplanation:\\nTest case\\n1: The given array\\nA is already palindromic.\\nTest case\\n2: We can apply the following operations:\\nSelect index\\n[4]:\\nA becomes\\n[4,5,5,5,6,4]\\nSelect index\\n[2]:\\nA becomes\\n[4,6,5,5,6,4]\\nTest case\\n3: We can apply the following operations:\\nSelect index\\n[2,4]:\\nA becomes\\n[4,6,5,5,6,4]\\nTest case\\n4: It can be proven that\\nA can not be converted into a palindrome using the given operations.'",
        "431": "b\"Symmetric Swaps\\nChef has two arrays\\nA and\\nB of the same size\\nN.\\nIn one operation, Chef can:\\nChoose an index\\ni\\n(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N) and swap the elements\\nA\\ni\\nand\\nB\\ni\\n.\\nChef came up with a task to find the minimum possible value of (\\nA\\nmax\\n\\xe2\\x88\\x92A\\nmin\\n) after performing the swap operation any (possibly zero) number of times.\\nSince Chef is busy, can you help him solve this task?\\nNote that\\nA\\nmax\\nand\\nA\\nmin\\ndenote the maximum and minimum elements of the array\\nA respectively.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains one integer\\nN \\xe2\\x80\\x94 the number of elements in each array.\\nThe second line consists of\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\ndenoting the elements of the array\\nA.\\nThe third line consists of\\nN space-separated integers\\nB\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nN\\ndenoting the elements of the array\\nB.\\nOutput Format\\nFor each test case, output on a new line, the minimum possible value of (\\nA\\nmax\\n\\xe2\\x88\\x92A\\nmin\\n) in the array\\nA after doing swap operation any number of times.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n,B\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN over all test cases won't exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n2\\n1 2\\n2 1\\n3\\n1 5 3\\n2 3 1\\n4\\n4 2 5 1\\n5 3 4 1\\n0\\n1\\n3\\nExplanation:\\nTest case\\n1: Chef can make the following operations:\\nOperation\\n1: Choose\\ni=1 and swap\\nA\\n1\\nwith\\nB\\n1\\n.\\nBy doing the above operations, array\\nA becomes\\n[2,2]. Here\\n(A\\nmax\\n\\xe2\\x88\\x92A\\nmin\\n)=0. It can be shown that this is the minimum value possible.\\nTest case\\n2: Chef can make the following operations:\\nOperation\\n1: Choose\\ni=1 and swap\\nA\\n1\\nwith\\nB\\n1\\n.\\nOperation\\n2: Choose\\ni=2 and swap\\nA\\n2\\nwith\\nB\\n2\\n.\\nBy doing the above operations, array\\nA becomes\\n[2,3,3]. Here\\n(A\\nmax\\n\\xe2\\x88\\x92A\\nmin\\n)=1. It can be shown that this is the minimum value possible.\\nTest case\\n3: Chef can make the following operations:\\nOperation\\n1: Choose\\ni=2 and swap\\nA\\n2\\nwith\\nB\\n2\\n.\\nOperation\\n2: Choose\\ni=3 and swap\\nA\\n3\\nwith\\nB\\n3\\n.\\nBy doing the above operations, array\\nA becomes\\n[4,3,4,1]. Here\\n(A\\nmax\\n\\xe2\\x88\\x92A\\nmin\\n)=3. It can be shown that this is the minimum value possible.\"",
        "432": "b\"Mountain\\nYou're given an\\nN\\xc3\\x97M matrix\\nA, where\\nA\\n(i,j)\\n=i.\\nA mountain in the matrix is defined as a set of cells and is expressed using\\nK+2 integers:\\nP,K,L\\n1\\n,L\\n2\\n,\\xe2\\x80\\xa6,L\\nK\\n.\\nThis translates to: from the\\n(P+i\\xe2\\x88\\x921)\\nth\\nrow, select the first\\nL\\ni\\ncells\\n(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4K) in the row. Refer samples for more clarity.\\nYour task is to answer\\nQ queries. For the\\ni\\nth\\nquery:\\nYou are given an integer\\nS\\ni\\nand you need to find a mountain with sum\\nS\\ni\\n.\\nInput Format\\nThe first line contains three space-separated integers\\nN,\\nM, and\\nQ, the dimensions of the matrix and the number of queries.\\nThe second line contains\\nQ space-separated integers\\nS\\n1\\n,S\\n2\\n,\\xe2\\x80\\xa6,S\\nQ\\n, denoting each query.\\nOutput Format\\nFor each query, if no possible mountain with given sum exists, output\\n\\xe2\\x88\\x921.\\nOtherwise, output two lines:\\nThe first line contains two space-separated integers\\nP,\\nK\\n(1\\xe2\\x89\\xa4P\\xe2\\x89\\xa4N,P+K\\xe2\\x88\\x921\\xe2\\x89\\xa4N);\\nThe second line contains\\nK space-separated integers\\nL\\n1\\n,L\\n2\\n,\\xe2\\x80\\xa6,L\\nK\\n(1\\xe2\\x89\\xa4L\\ni\\n\\xe2\\x89\\xa4M).\\nIf multiple mountains satisfy the condition, you may print any.\\nConstraints\\n2\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n4\\n1\\xe2\\x89\\xa4Q\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4S\\ni\\n\\xe2\\x89\\xa4M\\xe2\\x8b\\x85N\\xe2\\x8b\\x85\\n2\\n(N+1)\\nSample 1:\\nInput\\nOutput\\n5 4 4\\n20 36 1 60\\n2 3\\n2 4 1\\n1 5\\n3 1 4 1 3\\n1 1\\n1\\n1 5\\n4 4 4 4 4\\nExplanation:\\nQuery\\n1: A possible mountain that satisfies the condition is highlighted below:\\nHere,\\nP=2 and\\nK=3 and we are selecting\\n2,4, and\\n1 cells from the second, third, and fourth row respectively. The sum of the highlighted cells is\\n20.\\nQuery\\n2: A possible mountain that satisfies the condition is highlighted below:\\nHere,\\nP=1 and\\nK=5 and we are selecting\\n3,1,4,1, and\\n3 cells from the first, second, third, fourth and fifth rows respectively. The sum of the highlighted cells is\\n36.\"",
        "433": "b'No Palindrome\\nGiven positive integers\\nN and\\nK, let\\nS denote the smallest number of\\nN digits (with no leading zeros) such that:\\nNo substring of\\nS having length strictly greater than\\nK is a palindrome.\\nFind the sum of digits of\\nS.\\nNote:\\nA substring of a number is obtained by deleting some (possibly zero) digits from the beginning of the number and some (possibly zero) digits from the end of the number. For example, some substrings of the number\\n3010 are\\n3010,301,010,01,10 and\\n0.\\nLeading zeros are considered in a substring. In the above example,\\n010 and\\n01 are valid substrings.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two space-separated integers\\nN and\\nK \\xe2\\x80\\x94 as mentioned in the statement.\\nOutput Format\\nFor each test case, output on a new line, the sum of digits of the smallest number of\\nN digits satisfying the given condition.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa45000\\n1\\xe2\\x89\\xa4K<N\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n2\\n2 1\\n3 2\\n1\\n1\\nExplanation:\\nTest case\\n1: The smallest number of\\n2 digits satisfying the condition is\\n10. Here no substring of length greater than\\n1 is a palindrome.\\nTest case\\n2: The smallest number of\\n3 digits satisfying the condition is\\n100. The sum of its digits is\\n1.'",
        "434": "b\"Max Range Queries\\n###Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese and Bengali as well.\\nYou have\\nC=100,000 cakes, numbered\\n1 through\\nC. Each cake has an integer height; initially, the height of each cake is\\n0.\\nThere are\\nN operations. In each operation, you are given two integers\\nL and\\nR, and you should increase by\\n1 the height of each of the cakes\\nL,L+1,\\xe2\\x80\\xa6,R. One of these\\nN operations should be removed and the remaining\\nN\\xe2\\x88\\x921 operations are then performed.\\nChef wants to remove one operation in such a way that after the remaining\\nN\\xe2\\x88\\x921 operations are performed, the number of cakes with height exactly\\nK is maximum possible. Since Chef is a bit busy these days, he has asked for your help. You need to find the maximum number of cakes with height exactly\\nK that can be achieved by removing one operation.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains two space-separated integers\\nN and\\nK.\\nEach of the next\\nN lines contains two space-separated integers\\nL and\\nR describing one operation.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x94 the maximum possible number of cakes with height\\nK.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa4N\\n1\\xe2\\x89\\xa4L\\xe2\\x89\\xa4R\\xe2\\x89\\xa410\\n5\\nthe sum of\\nN over all test cases does not exceed\\n10\\n6\\nSample 1:\\nInput\\nOutput\\n1\\n3 2\\n2 6\\n4 9\\n1 4\\n3\\nExplanation:\\nExample case 1: Let's look at what happens after an operation is removed.\\nRemoving operation\\n1: The heights of cakes\\n4 through\\n9 increase by\\n1. Then, the heights of cakes\\n1 through\\n4 increase by\\n1. The resulting sequence of heights is\\n[1,1,1,2,1,1,1,1,1] (for cakes\\n1 through\\n9; the other cakes have heights\\n0). The number of cakes with height\\n2 is\\n1.\\nRemoving operation\\n2: The resulting sequence of heights of cakes\\n1 through\\n9 is\\n[1,2,2,2,1,1,0,0,0]. The number of cakes with height\\n2 is\\n3.\\nRemoving operation\\n3: The resulting sequence of heights of cakes\\n1 through\\n9 is\\n[0,1,1,2,2,2,1,1,1]. The number of cakes with height\\n2 is\\n3.\\nThe maximum number of cakes with height\\n2 is\\n3.\"",
        "435": "b'Tetris\\nChef and Chefina are playing a game of Tetris together. In a single move, a player can either clear\\n1,\\n2,\\n3, or\\n4 lines of blocks. Clearing\\n4 lines in a single move is called getting a \"Tetris\".\\nChef and Chefina take turns playing, with Chef starting first.\\nWhenever the current player clears only one line, the turn shifts to the other player; otherwise it remains with the current player.\\nThey will stop playing as soon as at least\\nL lines are cleared in total. That is, the game stops when the sum of the number of lines cleared by both the players is at least\\nL.\\nChef wants to end the game in style, and so would like to be the one who finishes the game and do so by getting a \"Tetris\", i.e, by clearing\\n4 lines.\\nHow many sequences of moves are there in which this happens?\\nThe number of sequences may be large, so print it modulo\\n10\\n9\\n+7.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach of the next\\nT lines contains one integer\\nL \\xe2\\x80\\x94 the number of lines to be cleared.\\nOutput Format\\nFor each test case, output on a new line the total number of ways in which Chef can finish the game by getting a \"Tetris\", modulo\\n10\\n9\\n+7.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4L\\xe2\\x89\\xa410\\n5\\nSample 1:\\nInput\\nOutput\\n4\\n3\\n2\\n4\\n100000\\n3\\n1\\n4\\n246691813\\nExplanation:\\nTest case\\n1: For\\nL=3, there are\\n3 possible ways such that Chef can finish the game with a \"Tetris\":\\nClear\\n4 lines immediately.\\nClear\\n2 lines first, then\\n4.\\nClear one line, transferring the turn to Chefina. Chefina then clears one line, transferring the turn back to Chef, who then gets a \"Tetris\".\\nTest case\\n2: For\\nL=2, the only possibility is that Chef gets a \"Tetris\" on the very first move.\\nTest case\\n3: For\\nL=4, there are\\n4 valid sequences of moves:\\n(2,4),(1,1,4),(3,4),(4).'",
        "436": "b\"Parity Permutation\\nYou are given an array\\nA of length\\nN containing distinct integers and an integer\\nK (either\\n0 or\\n1).\\nYour task is to find the total number of permutations of array\\nA such that for all pairs\\n(i,j) with\\n1\\xe2\\x89\\xa4i<j\\xe2\\x89\\xa4N, and\\n(i+j) being an odd number:\\n(A\\ni\\n+A\\nj\\n)%2\\n=K\\nYou should output the count of such permutations modulo\\n10\\n9\\n+7.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains two space-separated integers\\nN and\\nK, as mentioned in statement.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n\\xe2\\x80\\x94 the elements of the array.\\nOutput Format\\nFor each test case, output on a new line, the total number of permutations of array\\nA satisfying the conditions, modulo\\n10\\n9\\n+7.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\n0\\xe2\\x89\\xa4K\\xe2\\x89\\xa41\\nThe sum of\\nN over all test cases won't exceed\\n5\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n5 0\\n6 10 1 4 8\\n4 0\\n17 13 21 3\\n3 1\\n1 2 3\\n0\\n24\\n2\\nExplanation:\\nTest Case\\n1: There is no permutation that satisfies the required conditions.\\nTest Case\\n2: All the permutations of the array satisfy the required conditions.\\nTest Case\\n3: Two permutations satisfy the conditions. They are:\\n[1,2,3]: The pairs under consideration are\\n(1,2) and\\n(2,3). Here\\n(A\\n1\\n+A\\n2\\n)%2=1=K. Similarly\\n(A\\n2\\n+A\\n3\\n)%2=1=K.\\n[3,2,1] The pairs under consideration are\\n(1,2) and\\n(2,3). Here\\n(A\\n1\\n+A\\n2\\n)%2=1=K. Similarly\\n(A\\n2\\n+A\\n3\\n)%2=1=K.\"",
        "437": "b'Angry Cyborg\\nCyborg Jenish is angry.\\nHe has so much rage that he decided to go on a demolition spree for\\nQ days.\\nThere are\\nN cities in his world numbered\\n1 to\\nN, in a row from left to right. That is the\\ni\\nth\\ncity from left side is city-\\ni where\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N. The supreme leader of the world is VSM and there are infinite statues of VSM in each city.\\nOn each day Jenish chooses two cities\\nL and\\nR. He starts at city-\\nL and moves along the row towards right side till he reaches the city-\\nR. In city-\\nL he destroys\\n1 statue, in the next city (i.e. city-\\nL+1) he destroys\\n2 statues, and so on till city-\\nR where he destroys\\nR\\xe2\\x88\\x92L+1 statues. In other words, he destroys\\ni\\xe2\\x88\\x92L+1 statues in the\\ni\\nth\\ncity (\\nL\\xe2\\x89\\xa4i\\xe2\\x89\\xa4R ).\\nFind the total number of VSM statues he destroyed in each city after\\nQ days.\\nInput:\\nThe first line contains an integer\\nT, denoting the number of test cases.\\nThe first line of each test case, contains two space-separated integers\\nN and\\nQ denoting the number of cities in his world and the number of days he goes on a demolition spree respectively.\\nThe\\ni\\nth\\nline of next\\nQ lines of each test case contains two space-separated integers\\nL and\\nR denoting the starting city and the ending city respectively on\\ni\\nth\\nday.\\n###Output:\\nFor each test case, output a single line containing\\nN space-separated integers.\\nThe\\ni\\nth\\ninteger should denote the total number of VSM statues destroyed by cyborg Jenish in the city-\\ni after\\nQ days.\\nConstraints:\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n3\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4Q\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4L\\xe2\\x89\\xa4R\\xe2\\x89\\xa4N\\nThe sum of\\nN over all test cases is less than\\n10\\n6\\nThe sum of\\nQ over all test cases is less than\\n10\\n6\\nSample 1:\\nInput\\nOutput\\n2\\n5 3\\n1 3\\n1 2\\n4 5\\n2 1\\n1 1\\n2 4 3 1 2\\n1 0\\nExplanation:\\nIn the first test case, the cyborg does the following:\\nStarts at city-1 and goes till city-3, hence destroys\\n1 statue in city-1,\\n2 in city-2, and\\n3 in city-3.\\nStarts at city-1 and goes till city-2, hence destroys\\n1 statue in city-1 and\\n2 in city-2.\\nStarts at city-4 and goes till city-5, hence destroys\\n1 statue in city-4 and\\n2 in city-5.\\nHence he destroyed total\\n2 statues in city-1,\\n4 in city-2,\\n3 in city-3,\\n1 in city-4, and\\n2 in city-5.'",
        "438": "b'Double Burgers\\nRead problems statements in Mandarin Chinese, Russian, Vietnamese and Bengali as well.\\nYou have taken an eating challenge from Chef and now you have to eat exactly\\nY burgers. You will eat in the following way:\\nIn the first minute you will eat exactly\\nX burgers and every minute after that you will eat exactly twice the number of burgers you ate in the previous minute.\\nSince you can get tired of eating, Chef also allows you take a break from eating for exactly\\n1 minute.\\nWhen you start eating again after taking a break, your eating streak resets, i.e. in the first minute after the break you will eat exactly\\nX burgers and every minute after that you will eat exactly double the burgers you ate on the previous minute.\\nLet\\na\\n1\\n,a\\n2\\n,...,a\\nk\\nbe the lengths of your eating streaks in minutes. Chef requires that all\\na\\ni\\nare pairwise distinct.\\nFind the minimum number of minutes you need to eat exactly\\nY burgers or determine it is impossible to do so.\\n###Input\\nThe first line contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains two space-separated integers\\nX and\\nY.\\n###Output For each test case, print a single line containing one integer \\xe2\\x80\\x94 the minimum number of minutes you need to eat exactly\\nY burgers, or\\n\\xe2\\x88\\x921 if it is impossible.\\n###Constraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4X,Y\\xe2\\x89\\xa410\\n18\\nSample 1:\\nInput\\nOutput\\n2\\n1 7\\n1 4\\n3\\n4'",
        "439": "b\"Array Sum\\nYou are given an even integer\\nN and an integer\\nK.\\nGenerate an array\\nA of size\\nN such that:\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n5\\nfor all\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N;\\nThe number of odd elements in the array is same as the number of even elements.\\nThe sum of all elements of the array is\\nK.\\nIf multiple such arrays exist, print any. If no such array exists, print\\n\\xe2\\x88\\x921 instead.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two space-separated integers\\nN and\\nK \\xe2\\x80\\x94 the size of the array and the required sum.\\nOutput Format\\nFor each test case, output on a new line,\\nN space-separated integers, denoting the array\\nA satisfying the given conditions.\\nIf multiple such arrays exist, print any. If no such array exists, print\\n\\xe2\\x88\\x921 instead.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n,\\nN is even\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN over all test cases won't exceed\\n10\\n6\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n2 5\\n4 1\\n4 20\\n4 1\\n-1\\n3 4 5 8\\nExplanation:\\nTest case\\n1: Consider the array\\nA=[4,1]. It contains\\n1 even as well as\\n1 odd element. Also, the sum of elements of the array is\\n4+1=5.\\nTest case\\n2: It can be proven that there exists no array which satisfies the given conditions.\\nTest case\\n3: Consider the array\\nA=[3,4,5,8]. It contains\\n2 even as well as\\n2 odd elements. Also, the sum of elements of the array is\\n3+4+5+8=20.\"",
        "440": "b'Equivalent Numbers\\nChef calls a pair of integers\\n(A,B) equivalent if there exist some positive integers\\nX and\\nY such that\\nA\\nX\\n=B\\nY\\n.\\nGiven\\nA and\\nB, determine whether the pair is equivalent or not.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two space-separated integers\\nA and\\nB, as mentioned in statement.\\nOutput Format\\nFor each test case, output YES if\\n(A,B) is an equivalent pair, NO otherwise.\\nThe output is case-insensitive. Thus, the strings Yes, YES, yes, and yeS are all considered identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n2\\xe2\\x89\\xa4A,B\\xe2\\x89\\xa410\\n6\\nSample 1:\\nInput\\nOutput\\n3\\n2 3\\n8 4\\n12 24\\nNO\\nYES\\nNO\\nExplanation:\\nTest case\\n1: There are no positive integers\\nX and\\nY which satisfy\\nA\\nX\\n=B\\nY\\n.\\nTest case\\n2: Let\\nX=2 and\\nY=3. Thus,\\nA\\nX\\n=8\\n2\\n=64 and\\nB\\nY\\n=4\\n3\\n=64. Thus, the pair\\n(8,4) is equivalent.\\nTest case\\n3: There are no positive integers\\nX and\\nY which satisfy\\nA\\nX\\n=B\\nY\\n.'",
        "441": "b\"Segment Three\\nToday is an important day for Chef Hammoda as a lot of customers will be visiting his restaurant.\\nThe restaurant contains\\nN tables, and each customer will sit at one table.\\nInitially, Chef Hammoda plans for the dish served to the\\ni-th table to contain\\nA\\ni\\ningredients.\\nHowever, he thinks that a group of three dishes is delicious if the sum of the number of ingredients of the three dishes is divisible by\\n3.\\nHammoda wants every consecutive group of\\n3 tables to have delicious dishes. To achieve this, he can add as many ingredients as he wants to each dish.\\nHelp him determine the minimum number of additional ingredients needed to make every group of three consecutive tables delicious.\\nMore formally, solve the following problem:\\nYou are given an array\\nA=[A\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n] of length\\nN. You're allowed to increment each element however much you like.\\nFind the minimum number of increments needed so that in the resulting array, the sum of every three consecutive elements is divisible by\\n3\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains one integer\\nN \\xe2\\x80\\x94 the number of tables.\\nThe next line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n\\xe2\\x80\\x94 number of ingredients initially present in the\\ni\\nth\\ndish.\\nOutput Format\\nFor each test case, print on a new line a single integer: the minimum number of increments needed to make every length-\\n3 subarray of\\nA have a sum that's divisible by\\n3.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n3\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4a\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN over all test cases won't exceed\\n10\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n3\\n1 2 3 \\n10\\n2 3 10 25 12 7 10 12 1 46\\n7\\n10 12 15 16 17 200 132\\n0\\n3\\n4\\nExplanation:\\nTest case\\n1: There is only one subarray of length\\n3, and its sum already divisible by\\n3.\\nTest case\\n2: The array after increments can be:\\n[2,3,10,\\n26\\n,12,7,\\n11\\n,12,1,\\n47\\n]\\nfor a total of\\n3 increments (the elements underlined were all incremented by\\n1 each). Every subarray of length\\n3 now has a sum that's divisible by\\n3.\\nIt can be proved that it's not possible to achieve this using two or fewer increments.\\nTest case\\n3: The array after increments can be:\\n[10,12,\\n17\\n,16,\\n18\\n,200,\\n133\\n]\\nfor a total of\\n4 increments.\\nHere,\\n15 was incremented twice to reach\\n17, and the other two elements were incremented once each.\"",
        "442": "b'Full Path Eraser\\nThere is a rooted tree of\\nN vertices rooted at vertex\\n1. Each vertex\\nv has a value\\nA\\nv\\nassociated with it.\\nYou choose a vertex\\nv (possibly the root) from the tree and remove all vertices on the path from the root to the vertex\\nv, also including\\nv. This will result in a forest of zero or more connected components.\\nThe beauty of a connected component is the\\nGCD of the values of all vertices in the component. Find the maximum value of the sum of beauties of the obtained connected components for any choice of\\nv.\\nHere,\\nGCD stands for Greatest Common Divisor.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the size of the tree.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\ndenoting the values associated with each vertex.\\nThe next\\nN\\xe2\\x88\\x921 lines contain two space-separated integers\\nu and\\nv \\xe2\\x80\\x94 denoting an undirected edge between nodes\\nu and\\nv.\\nIt is guaranteed that the edges given in the input form a tree.\\nOutput Format\\nFor each test case output the maximum value of the sum of beauties of the obtained connected components for any choice of\\nv.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n4\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\n1\\xe2\\x89\\xa4u,v\\xe2\\x89\\xa4N and\\nu\\n\\xee\\x80\\xa0\\n=v\\nIt is guaranteed that the edges given in the input form a tree.\\nThe sum of\\nN over all test cases does not exceed\\n3\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n1\\n10\\n15 30 15 5 3 15 3 3 5 5\\n1 2\\n1 5\\n2 3\\n2 4\\n5 6\\n5 7\\n5 8\\n7 9\\n7 10\\n33\\nExplanation:\\nThe tree from the sample is as follows.\\n![tree_basic](https:\/\/s3.amazonaws.com\/codechef_shared\/download\/Images\/the_hyp0cr1t3\/tree_basic.png =450x450)\\nIf vertex\\nv=7 is chosen, vertices\\n1,\\n5 and\\n7 are removed.\\n![tree_remove](https:\/\/s3.amazonaws.com\/codechef_shared\/download\/Images\/the_hyp0cr1t3\/tree_remove.png =450x450)\\nThe resulting forest contains five connected components\\n{8},{6},{10},{9} and\\n{2,3,4}.\\n![tree_value](https:\/\/s3.amazonaws.com\/codechef_shared\/download\/Images\/the_hyp0cr1t3\/tree_value.png =450x450)\\nThe beauties of the connected components are\\n3,\\n15,\\n5,\\n5 and\\n5 respectively. Thus the answer is\\n3+15+5+5+5=33.\\nIt can be shown that this is the maximum value possible for any choice of\\nv.'",
        "443": "b\"Can You Reach The End\\nRead problem statements in Mandarin, Bengali, and Russian as well.\\nYou are given a positive integer\\nN. Consider a square grid of size\\nN\\xc3\\x97N, with rows numbered\\n1 to\\nN from top to bottom and columns numbered\\n1 to\\nN from left to right. Initially you are at\\n(1,1) and you have to reach\\n(N,N). From a cell you can either move one cell to the right or one cell down (if possible). Formally, if you are at\\n(i,j), then you can either move to\\n(i+1,j) if\\ni<N, or to\\n(i,j+1) if\\nj<N.\\nThere are exactly\\nN blocks in the grid, such that each row contains exactly one block and each column contains exactly one block. You can't move to a cell which contains a block. It is guaranteed that blocks will not placed in\\n(1,1) and\\n(N,N).\\nYou have to find out whether you can reach\\n(N,N).\\nInput Format\\nThe first line contains\\nT - the number of test cases. Then the test cases follow.\\nThe first line of each test case contains\\nN - the size of the square grid.\\nThe\\ni-th line of the next\\nN lines contains two integers\\nX\\ni\\nand\\nY\\ni\\nindicating that\\n(X\\ni\\n,Y\\ni\\n) is the position of a block in the grid.\\nOutput Format\\nFor each test case, if there exists a path from\\n(1,1) to\\n(N,N), output YES, otherwise output NO.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings yEs, yes, Yes and YES will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n6\\n1\\xe2\\x89\\xa4X\\ni\\n,Y\\ni\\n\\xe2\\x89\\xa4N\\n(X\\ni\\n,Y\\ni\\n)\\n\\xee\\x80\\xa0\\n=(1,1) and\\n(X\\ni\\n,Y\\ni\\n)\\n\\xee\\x80\\xa0\\n=(N,N) for all\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\nX\\ni\\n\\xee\\x80\\xa0\\n=X\\nj\\nand\\nY\\ni\\n\\xee\\x80\\xa0\\n=Y\\nj\\nfor all\\n1\\xe2\\x89\\xa4i<j\\xe2\\x89\\xa4N\\nSum of\\nN over all test cases does not exceed\\n10\\n6\\nSample 1:\\nInput\\nOutput\\n2\\n3\\n1 2\\n2 3\\n3 1\\n2\\n1 2\\n2 1\\nYES\\nNO\\nExplanation:\\nTest case\\n1: We can follow the path\\n(1,1)\\xe2\\x86\\x92(2,1)\\xe2\\x86\\x92(2,2)\\xe2\\x86\\x92(3,2)\\xe2\\x86\\x92(3,3).\\nTest case\\n2: We can't move from the starting point, so it is impossible to reach\\n(N,N).\"",
        "444": "b\"TripTastic\\nA school wants to plan a trip for a group of\\nK students and one mentor.\\nA hotel is booked for their stay, where the rooms are formatted in form of a matrix\\nA with\\nN rows and\\nM columns. There are a total of\\nN\\xc3\\x97M rooms where the room\\n(i,j) has a capacity of\\nA\\n(i,j)\\npeople.\\nThe distance between the rooms\\n(i\\n1\\n,j\\n1\\n) and\\n(i\\n2\\n,j\\n2\\n) is given by\\nmax(\\xe2\\x88\\xa3i\\n1\\n\\xe2\\x88\\x92i\\n2\\n\\xe2\\x88\\xa3,\\xe2\\x88\\xa3j\\n1\\n\\xe2\\x88\\x92j\\n2\\n\\xe2\\x88\\xa3), where\\n\\xe2\\x88\\xa3X\\xe2\\x88\\xa3 denotes the absolute value of\\nX.\\nTo ensure that the trip goes smoothly, the rooms should be booked in a way such that the distance between the mentor's room and the farthest room of a student is minimal.\\nNote that the mentor and students can stay in the same room.\\nYour task is to find the minimal distance between the mentor's room and the farthest room of a student.\\nIn case the total capacity of the hotel is less than\\nK+1, print\\n\\xe2\\x88\\x921 instead.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first line of each test case contains three space-separated integers\\nN,M, and\\nK \\xe2\\x80\\x94 the number of rows, columns, and students, respectively.\\nThe next\\nN lines contain\\nM space-separated integers each, denoting the capacity of each room.\\nOutput Format\\nFor each test case, output on a new line, the minimal distance between the mentor's room and the farthest room of a student.\\nIn case the total capacity of the hotel is less than\\nK+1, print\\n\\xe2\\x88\\x921 instead.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4500\\n1\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa410\\n6\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n9\\n0\\xe2\\x89\\xa4A\\n(i,j)\\n\\xe2\\x89\\xa410\\n5\\nThe sum of\\nN\\xe2\\x8b\\x85M over all test cases won't exceed\\n10\\n6\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n1 7 5\\n2 1 0 1 3 0 1\\n2 4 3\\n1 0 4 0\\n0 2 0 3\\n2 2 7\\n1 0\\n4 1\\n3 2 3\\n0 2\\n1 0\\n1 0\\n3\\n0\\n-1\\n1\\nExplanation:\\nTest case\\n1: Mentor can stay in room\\n(1,2), two students in room\\n(1,1), one student in room\\n(1,4) and two students in room\\n(1,5).\\nThe farthest room of a student would be\\n(1,5) with distance\\n3.\\nWe can show that in no other arrangement, we can achieve a distance less than\\n3.\\nTest case\\n2: Mentor and all\\n3 students can stay in room\\n(1,3). Thus, the distance is\\n0.\\nTest case\\n3: The hotel does not have enough capacity.\"",
        "445": "b'LCM Mania\\nhErd gives you an integer\\nN. Find any three positive integers\\nA,B,C such that:\\nN=lcm(A,B)+lcm(B,C)+lcm(C,A); where\\nlcm denotes the least common multiple.\\nIf there is no solution, print\\n\\xe2\\x88\\x921.\\nIf there are multiple solutions, you may print any of them.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first and only line of each test case contains an integer\\nN.\\nOutput Format\\nFor each test case, output on a new line, three space-separated integers\\nA,B,C satisfying the condition.\\nIf there is no solution, print\\n\\xe2\\x88\\x921.\\nIf there are multiple solutions, you may print any of them.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n3\\n1\\n6\\n15\\n-1\\n2 2 2\\n5 5 1\\nExplanation:\\nTest case\\n1: It can be shown that no solution exists.\\nTest case\\n2: Consider\\nA=2,B=2,C=2. Thus,\\n6=lcm(2,2)+lcm(2,2)+lcm(2,2).\\nTest case\\n3: Consider\\nA=5,B=5,C=1. Thus,\\n15=lcm(5,5)+lcm(5,1)+lcm(5,1).\\nNote that\\n(5,5,1),(1,5,5) and\\n(5,1,5) are all considered valid.'",
        "446": "b\"Non Zero Subarray Xor\\nJJ is back with another challenge. He challenges you to construct an array\\nA containing\\nN integers such that the following conditions hold:\\nFor all\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N,\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n6\\nEvery subarray has non-zero XOR. That is, for every\\n1\\xe2\\x89\\xa4L\\xe2\\x89\\xa4R\\xe2\\x89\\xa4N,\\nA\\nL\\n\\xe2\\x8a\\x95A\\nL+1\\n\\xe2\\x8a\\x95\\xe2\\x80\\xa6\\xe2\\x8a\\x95A\\nR\\n\\xee\\x80\\xa0\\n=0. Here,\\n\\xe2\\x8a\\x95 denotes the bitwise XOR operation.\\nCan you complete JJ's challenge?\\nUnder the given constraints, it can be proved that there always exists at least one array satisfying these conditions. If there are multiple possible arrays, print any of them.\\nInput Format\\nThe first line contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains an integer\\nN \\xe2\\x80\\x94 the size of the array\\nA to be constructed.\\nOutput Format\\nFor each test case, output a single line containing\\nN space-separated integers, denoting the elements of array\\nA. The\\ni\\nth\\nof these\\nN integers is\\nA\\ni\\n. If multiple arrays exist which satisfy the conditions, print any of them.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nIt is guaranteed that the sum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n1\\n6\\n6\\n7\\n1 2 4 8 16 32\\n2 3 5 7 11 13\\nExplanation:\\nTest Case\\n1: There is only one subarray,\\n[7]. Its XOR is non-zero.\\nTest Case\\n2: Some of the subarray XORS are:\\nXOR([2,4,8])=14\\n\\xee\\x80\\xa0\\n=0\\nXOR([1,2])=3\\n\\xee\\x80\\xa0\\n=0\\nXOR([4,8,16,32])=60\\n\\xee\\x80\\xa0\\n=0.\\nSimilarly, it can be checked that every subarray has non-zero XOR.\\nTest Case\\n3: Some of the subarray XORS are:\\nXOR([2,3,5,7])=3\\n\\xee\\x80\\xa0\\n=0\\nXOR([7,11])=12\\n\\xee\\x80\\xa0\\n=0\\nXOR([2,3,5,7,11,13])=5\\n\\xee\\x80\\xa0\\n=0\\nSimilarly, it can be checked that every subarray has non-zero XOR.\"",
        "447": "b\"Wishcraft\\nMagic is really very simple, all you\\xe2\\x80\\x99ve got to do is want something and then let yourself have it.\\nChadda and his Wizard friend PSC were exploring the enchanted forest on Halloween, when Chadda stumbled upon an array\\nA of\\nN magical numbers which took him into a different world.\\nChadda remembered that PSC gave him two integers\\nP and\\nQ for such a situation.\\nUsing these integers, Chadda can modify the array\\nA as follows:\\nAt most\\nP times, perform the following operation:\\nPick two elements\\nx and\\ny from\\nA, delete them both from\\nA, and insert\\n(x+y) into\\nA.\\nThis operation can be performed only if\\nA has at least two elements.\\nAt most\\nQ times, perform the following operation:\\nPick two elements\\nx and\\ny from\\nA, delete them both from\\nA, and insert\\n(x\\xe2\\x88\\x92y) into\\nA.\\nThis operation can also be performed only if\\nA has at least two elements.\\nNote that each operation reduces the size of\\nA by one.\\nThe two types of operations (addition and subtraction) can be performed in any order, as long as at most\\nP addition operations and\\nQ subtraction operations are made.\\nLet\\nB denote the final array obtained after performing some (possibly, zero) operations.\\nTo return to his original world, Chadda has to find the maximum possible value of\\nmax(B)\\xe2\\x88\\x92min(B)\\nacross all possible final arrays\\nB.\\nCan you help Chadda find this value?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of three lines of input.\\nThe first line of each test case contains a single integer\\nN \\xe2\\x80\\x94 the size of the array.\\nThe second line contains two space-separated integers\\nP and\\nQ \\xe2\\x80\\x94 the maximum number of addition and subtraction operations, respectively.\\nThe third line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n: the elements of array\\nA.\\nOutput Format\\nFor each test case, output on a new line the answer: the maximum possible value of\\nmax(B)\\xe2\\x88\\x92min(B) across all possible final arrays\\nB.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n0\\xe2\\x89\\xa4P,Q\\xe2\\x89\\xa4N\\xe2\\x88\\x921\\n\\xe2\\x88\\x9210\\n9\\n\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN over all test cases won't exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n2\\n0 0\\n5 1\\n6\\n1 2\\n8 -1 -4 2 6 -3\\n7\\n6 6\\n-2 -4 2 -2 -3 -1 -1\\n4\\n23\\n15\\nExplanation:\\nTest case\\n1:\\nP=Q=0, so no operations can be performed at all.\\nThe answer is just\\nmax([5,1])\\xe2\\x88\\x92min([5,1])=5\\xe2\\x88\\x921=4.\\nTest case\\n2: The array is\\nA=[8,\\xe2\\x88\\x921,\\xe2\\x88\\x924,2,6,\\xe2\\x88\\x923]. The following sequence of operations can be performed:\\nChoose\\n2 and\\n\\xe2\\x88\\x923, remove them, and insert\\n2\\xe2\\x88\\x92(\\xe2\\x88\\x923)=5 into the array.\\nThe elements are now\\n[8,\\xe2\\x88\\x921,\\xe2\\x88\\x924,6,5].\\nChoose\\n8 and\\n5, remove them, and add\\n8+5=13 to the array.\\nThe elements are now\\n[13,\\xe2\\x88\\x921,\\xe2\\x88\\x924,6].\\nChoose\\n\\xe2\\x88\\x924 and\\n6, remove them and add\\n(\\xe2\\x88\\x924)\\xe2\\x88\\x92(6) to the array.\\nThe elements are now\\n[13,\\xe2\\x88\\x921,\\xe2\\x88\\x9210].\\nThe difference between maximum and minimum for this array is\\n13\\xe2\\x88\\x92(\\xe2\\x88\\x9210)=23.\\nWith one addition and two subtraction operations available, it can be proved that this is the maximum attainable value.\\nTest Case\\n3:: It can be proven that\\n15 is the maximum attainable value.\"",
        "448": "b\"Travelling in the Graph\\nYou are given a graph with\\nN vertices (numbered\\n1 to\\nN) and\\nM bidirectional edges, which doesn't contain multiple edges or self-loops \\xe2\\x80\\x94 that is, the given graph is a simple undirected graph.\\nFor each pair of vertices\\na,b such that\\n1\\xe2\\x89\\xa4a,b\\xe2\\x89\\xa4N, it is possible to add a new edge between vertices\\na and\\nb to the graph, with a cost of\\n(a\\xe2\\x88\\x92b)\\n2\\n.\\nFind the minimum cost of adding edges so that vertex\\nN is reachable from vertex\\n1.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains\\n2 space-separated integers,\\nN and\\nM.\\nThe\\ni\\nth\\nof the next\\nM lines contains\\n2 space-separated integers\\nu\\ni\\nand\\nv\\ni\\n, denoting a bidirectional edge between vertex\\nu\\ni\\nand vertex\\nv\\ni\\nin the graph.\\nOutput Format\\nFor each test case, output the answer in a single line.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n0\\xe2\\x89\\xa4M\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4u\\ni\\n,v\\ni\\n\\xe2\\x89\\xa4N\\nThe graph doesn't contain self-loops or multiple edges\\nSum of\\nN over all testcases is no more than\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSum of\\nM over all testcases is no more than\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n2 0\\n5 4\\n3 2\\n1 4\\n5 3\\n4 2\\n6 3\\n1 2\\n3 2\\n1 3\\n1\\n0\\n3\\nExplanation:\\nTest Case\\n1: Add an edge between vertices\\n1 and\\n2, with cost\\n(1\\xe2\\x88\\x922)\\n2\\n=1.\\nTest Case\\n2: Vertices\\n1 and\\n5 are already connected, so no edges need to be added.\"",
        "449": "b'Maximal Expression\\nYou are given two integers\\nN and\\nK.\\nLet\\nF(X)=(XmodK)\\xc3\\x97((N\\xe2\\x88\\x92X)modK), where\\nmod denotes the modulo operator.\\nFind an integer\\nX such that the value of\\nF(X) is the maximum over all\\n0\\xe2\\x89\\xa4X\\xe2\\x89\\xa4N.\\nIf there are multiple answers, you may print any.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line of input containing two integers\\nN and\\nK.\\nOutput Format\\nFor each testcase, print a single integer\\nX\\n(0\\xe2\\x89\\xa4X\\xe2\\x89\\xa4N) such that the value of\\nF(X) is the maximum over all possible\\nX from\\n0 to\\nN.\\nIf there are multiple answers, you may print any.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n0\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n9\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n3\\n5 2\\n4 7\\n8 3\\n0\\n2\\n4\\nExplanation:\\nTest case\\n1:\\nF(X)=0 for all\\n0\\xe2\\x89\\xa4X\\xe2\\x89\\xa45.\\nTest case\\n2:\\nF(0)=(0mod7)\\xc3\\x97(4mod7)=0\\nF(1)=(1mod7)\\xc3\\x97(3mod7)=3\\nF(2)=(2mod7)\\xc3\\x97(2mod7)=4\\nF(3)=(3mod7)\\xc3\\x97(1mod7)=3\\nF(4)=(4mod7)\\xc3\\x97(0mod7)=0\\nSo,\\nX=2 is the only correct answer.\\nTest case\\n3:\\nF(X)=0 for\\nX\\xe2\\x88\\x88{0,2,3,5,6,8}\\nF(X)=1 for\\nX\\xe2\\x88\\x88{1,4,7}\\nSo,\\n1,\\n4 and\\n7 are all correct answers.'",
        "450": "b\"Interesting Array\\nAn array is called interesting if no subarray of length greater than\\n2 is non-increasing or non-decreasing.\\nChef has an array\\nA of length\\nN. He wants to make the array interesting by rearranging the elements in any order.\\nIf there exist multiple such arrays, output any one.\\nIf no such array exists, print\\n\\xe2\\x88\\x921 instead.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains an integer\\nN denoting the length of array\\nA.\\nThe next line contains\\nN space separated integers,\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nOutput Format\\nFor each test case, output on a single line, any possible interesting array. If no such array is possible, output\\n\\xe2\\x88\\x921.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN over all test cases won't exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n3\\n2 2 2\\n4\\n2 6 5 2\\n5\\n5 5 2 4 2\\n-1\\n6 2 5 2\\n5 2 4 2 5\\nExplanation:\\nTest case\\n1: There is no way of arranging the elements such that no subarray of length greater than\\n2 is non-increasing or non-decreasing.\\nTest case\\n2: A possible rearrangement of the elements is\\n[6,2,5,2]. Note that the subarrays of length greater than\\n2 are\\n{[6,2,5],[2,5,2],[6,2,5,2]}. None of these subarrays are non-increasing or non-decreasing.\\nTest case\\n3: A possible rearrangement of the elements is\\n[5,2,4,2,5]. Note that the subarrays of length greater than\\n2 are\\n{[5,2,4],[2,4,2],[4,2,5],[5,2,4,2],[2,4,2,5],[5,2,4,2,5]}. None of these subarrays are non-increasing or non-decreasing.\"",
        "451": "b\"Maximising Vacations\\nYou are given Chef's calendar for the next\\nN days, defined as a binary string\\nS of length\\nN where\\nS\\ni\\n=0 means that Chef has a holiday on the\\ni\\nth\\nday from now, and\\nS\\ni\\n=1 means that Chef has to work on that day.\\nChef wants to plan his vacations. For each vacation, Chef needs\\nX consecutive holidays in his calendar. Obviously, he can only go on one vacation at a time.\\nChef can take at most one extra holiday. That is, he can flip at most one digit in\\nS from\\n1 to\\n0. If he does this optimally, what is the maximum number of vacations that he can go on?\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains two space-separated integers\\nN and\\nX.\\nThe second line of each test case contains a binary string\\nS of length\\nN \\xe2\\x80\\x94 Chef's schedule.\\nOutput Format\\nFor each test case, output on a new line the answer \\xe2\\x80\\x94 the maximum number of vacations Chef can take if he takes at most one more extra holiday.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4N\\nThe sum of\\nN across all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n7 2\\n0010001\\n4 3\\n1010\\n5 2\\n00100\\n3\\n1\\n2\\nExplanation:\\nTest Case\\n1: Chef can flip the\\n3\\nrd\\ndigit to make his calendar\\n0000001. This allows him to take\\n3 vacations in the first\\n6 days.\\nTest Case\\n2: Chef can flip the\\n3\\nrd\\ndigit to make his calendar\\n1000. This allows him to take one vacation using the last\\n3 days.\\nTest Case\\n3: Regardless of whether Chef flips the\\n3\\nrd\\ndigit or not, he can take at most\\n2 vacations.\"",
        "452": "b'Love Squares Hate Cubes\\nKulyash loves perfect squares and hates perfect cubes.\\nFor any natural number\\nN,\\nF(N)=number of perfect squares smaller than or equal to N\\xe2\\x88\\x92number of positive perfect cubes smaller than or equal to N.\\nKulyash gives you an integer\\nX and asks you to find the minimum value of\\nN, such that\\nF(N)\\xe2\\x89\\xa5X.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single line of input.\\nThe first and only line of each test case contains an integer\\nX.\\nOutput Format\\nFor each test case, output on a new line, the minimum value of\\nN such that\\nF(N)\\xe2\\x89\\xa5X.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n3\\n1\\n3\\n3151\\n4\\n25\\n11397376\\nExplanation:\\nTest case\\n1: There are\\n2 perfect squares from\\n1 to\\n4, and\\n1 perfect cube from\\n1 to\\n4, so\\nF(4)=2\\xe2\\x88\\x921=1, as required.\\nTest case\\n2: There are\\n5 perfect squares from\\n1 to\\n25, and\\n2 perfect cubes from\\n1 to\\n25, so\\nF(25)=5\\xe2\\x88\\x922=3, as required.\\nTest case\\n3: There are\\n3376 perfect squares from\\n1 to\\n11397376, and\\n225 perfect cubes from\\n1 to\\n11397376, so\\nF(11397376)=3376\\xe2\\x88\\x92225=3151, as required.'",
        "453": "b\"Lexicographically Largest\\nYou are given a positive integer\\nM and an array\\nA (1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4M) consisting of\\nN positive integers.\\nFind the lexicographically largest array\\nB such that:\\n\\xe2\\x88\\xa3B\\xe2\\x88\\xa3=N;\\n1\\xe2\\x89\\xa4B\\ni\\n\\xe2\\x89\\xa4M for all\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N;\\nA\\ni\\n=gcd(B\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\ni\\n), where\\ngcd denotes the greatest common divisor.\\nNote that the input\\nA guarantees that\\nB always exists.\\nFor two arrays\\nX and\\nY, both of size\\nN, the array\\nX is said to be lexicographically larger than array\\nY, if, in the first position where\\nX and\\nY differ,\\nX\\ni\\n>Y\\ni\\n.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains two space separated integers\\nN and\\nM \\xe2\\x80\\x94 the length of array\\nA and upper bound on array elements.\\nThe next line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nrepresenting the array\\nA.\\nOutput Format\\nFor each test case, output on a new line, the lexicographically largest array\\nB, satisfying the given conditions.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4M\\xe2\\x89\\xa410\\n9\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4M\\nThe sum of\\nN over all test cases won't exceed\\n5\\xe2\\x8b\\x8510\\n4\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n1 1\\n1\\n2 2\\n2 1\\n4 3\\n2 2 2 2\\n4 5\\n2 2 2 2\\n1\\n2 1\\n2 2 2 2\\n2 4 4 4\\nExplanation:\\nTest case\\n1: The only possible array is\\nB=[1] which satisfies the given conditions.\\nTest case\\n2: The only possible array is\\nB=[2,1] which satisfies the given conditions.\\nHere\\nA\\n1\\n=B\\n1\\n=2, and\\nA\\n2\\n=gcd(B\\n1\\n,B\\n2\\n)=1.\\nTest case\\n4: The lexicographically largest valid array is\\nB=[2,4,4,4]. Some other arrays that are valid include\\n[2,2,2,2],[2,2,4,2],[2,2,4,4].\"",
        "454": "b'SUM OR\\nYou are given a positive integer\\nN.\\nFind the number of triples\\n(X,Y,Z) such that:\\n0<X,Y,Z<N;\\nX+Y+Z=N;\\nX\\n\\xe2\\x88\\xa3\\nY\\n\\xe2\\x88\\xa3\\nZ=N, where\\n\\xe2\\x88\\xa3 represents the bitwise OR operation.\\nSince the number of triples can be huge, print them modulo\\n10\\n9\\n+7.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of a single integer\\nN, as mentioned in the statement.\\nOutput Format\\nFor each test case, output on a new line, the number of triples satisfying the condition, modulo\\n10\\n9\\n+7.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N<2\\n60\\nSample 1:\\nInput\\nOutput\\n2\\n3\\n7\\n0\\n6\\nExplanation:\\nTest case\\n1: There are no triples\\n(X,Y,Z) satisfying the given conditions.\\nTest case\\n2: The following\\n6 tuples satisfy the conditions:\\n{(1,2,4),(1,4,2),(2,1,4),(2,4,1),(4,1,2),(4,2,1)}.\\nFor example, in the tuple\\n(1,2,4),\\n1+2+4=7 and\\n1\\n\\xe2\\x88\\xa3\\n2\\n\\xe2\\x88\\xa3\\n4=7.'",
        "455": "b\"Musical Rods\\nYou have\\nN rods with you. The\\ni-th rod has a length of\\nA\\ni\\nand a beauty of\\nB\\ni\\n.\\nYou'd like to arrange these rods side-by-side in some order on the number line, starting from\\n0.\\nLet\\nx\\ni\\nbe the starting position of the\\ni-th rod in an arrangement. The beauty of this arrangement is\\ni=1\\n\\xe2\\x88\\x91\\nN\\nx\\ni\\n\\xe2\\x8b\\x85B\\ni\\nWhat is the maximum beauty you can attain?\\nNote that the left endpoint of the first rod you place must be\\n0, and you cannot leave any space between rods.\\nInput Format\\nThe first line of input contains an integer\\nT, denoting the number of test cases.\\nEach test case consists of three lines of input.\\nThe first line of each test case contains a single integer\\nN, the number of rods.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nThe third line of each test case contains\\nN space-separated integers\\nB\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nN\\nOutput Format\\nFor each test case print on a new line the answer: the maximum value of\\n\\xe2\\x88\\x91\\ni=1\\nN\\nx\\ni\\nB\\ni\\nif the order of rods is chosen optimally.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n3\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4B\\ni\\n\\xe2\\x89\\xa410\\n4\\nThe sum of\\nN across all testcases won't exceed\\n10\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n2\\n2\\n1 2\\n4 6\\n4\\n2 8 9 11\\n25 27 100 45\\n8\\n2960\\nExplanation:\\nTest case\\n1: Place the second rod followed by the first one. This makes\\nx\\n2\\n=0 and\\nx\\n1\\n=2, giving us a beauty of\\n2\\xe2\\x8b\\x854+0\\xe2\\x8b\\x856=8, which is the maximum possible.\\nTest case\\n2: Place the rods in the order\\n[2,4,3,1]. This gives us\\nx=[28,0,19,8], and the beauty is\\n28\\xe2\\x8b\\x8525+0\\xe2\\x8b\\x8527+19\\xe2\\x8b\\x85100+8\\xe2\\x8b\\x8545=2960.\"",
        "456": "b'Binary Substitution\\nChef has binary string\\nS of length\\nN.\\nChef can perform the following operation on the string:\\nChoose a contiguous subarray\\nS\\nL\\n,S\\nL+1\\n,\\xe2\\x80\\xa6,S\\nR\\nsuch that the count of set bits in the subarray is equal to the count of unset bits in the subarray.\\nReplace the chosen subarray with either a set bit or an unset bit.\\nChef wants to reduce the string to minimum possible length using minimum number of given operations. Help Chef by telling him the minimum length and also the operations required to obtain that. If there are multiple ways to obtain the answer, print any.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe first line of each test case contains a single integer\\nN, denoting the length of the binary string.\\nThe second line of each test case contains a binary string\\nS.\\nOutput Format\\nFor each test case, output\\nK+1 lines:\\nThe first line should contain two space-separated integers\\nM and\\nK, denoting the minimum length that can be obtained and the minimum number of operations required to obtain it respectively.\\nThen,\\nK lines follow, where the\\ni\\nth\\nline denotes the\\ni\\nth\\noperation:\\nEach operation is denoted using three space separated integers\\nL,\\nR, and\\nB.\\nThe integers\\nL and\\nR denote the chosen substring such that\\n(1\\xe2\\x89\\xa4L<R\\xe2\\x89\\xa4\\xe2\\x88\\xa3S\\xe2\\x88\\xa3) and the substring\\nS[L,R] has equal count of set and unset bits. Note that,\\n\\xe2\\x88\\xa3S\\xe2\\x88\\xa3 denotes the length of the current string.\\nThe integer\\nB denotes the bit with which the substring is replaced.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n3\\n4\\n1100\\n1\\n1\\n5\\n11000\\n1 1\\n1 4 0\\n1 0\\n1 2\\n1 4 1\\n1 2 1\\nExplanation:\\nTest case\\n1: We can reduce the string to a string of length\\n1. We require only\\n1 operation to do so:\\nChoose\\nL=1,R=4, and\\nB=0. We chose the substring\\nS[1,4] which contains\\n2 set bits and\\n2 unset bits. We can replace the chosen substring with bit\\n0.\\nTest case\\n2: The given string is of length\\n1. Thus, we cannot reduce it any further.\\nTest case\\n3: We can reduce the string to a string of length\\n1. We require\\n2 operations to do so:\\nOperation\\n1: Choose\\nL=1,R=4, and\\nB=1. We chose the substring\\nS[1,4] which contains\\n2 set bits and\\n2 unset bits. We can replace the chosen substring with bit\\n1. Thus, the string after this operation is\\nS=10.\\nOperation\\n2: Choose\\nL=1,R=2, and\\nB=1. We chose the substring\\nS[1,2] which contains\\n1 set bit and\\n1 unset bit. We can replace the chosen substring with bit\\n1. Thus, the string after this operation is\\nS=1.'",
        "457": "b\"Chef Goes Shopping\\nMoEngage goes shopping with Chef. There are\\nN ingredients placed on a line, numbered\\n1 to\\nN from left to right.\\nAt any point in time, MoEngage can choose the ingredient numbered\\nx and do one of the following operations:\\nIf the chosen ingredient is not the leftmost amongst the remaining ingredients, remove the left neighbor. This operation costs\\nL\\nx\\ncoins.\\nIf the chosen ingredient is not the rightmost amongst the remaining ingredients, remove the right neighbor. This operation costs\\nR\\nx\\ncoins.\\nNote: MoEngage can perform at most one operation of one type on a particular ingredient. For example, you can't remove elements from the left of ingredient\\nx two times. However, you can remove one ingredient each from the left and from the right of ingredient\\nx.\\nMoEngage performs the operations until only one ingredient is left.\\nFind the minimum number of coins he needs to pay so that only one ingredient is left.\\nInput Format\\nThe first line contains a positive integer\\nT - the number of test cases. Then\\nT test cases follow.\\nThe first line of each test case contains a single integer\\nN - the number of ingredients.\\nThe second line of each test case contains\\nN integers\\nL\\n1\\n,L\\n2\\n,\\xe2\\x80\\xa6,L\\nN\\n- the number of coins required to remove the ingredient from the left of an ingredient.\\nThe third line of each test case contains\\nN integers\\nR\\n1\\n,R\\n2\\n,\\xe2\\x80\\xa6,R\\nN\\n- the number of coins required to remove the ingredient from the right of an ingredient.\\nOutput Format\\nFor each test case, output in a new line, one integer - the minimum number of coins MoEngage needs to pay so that only one ingredient is left.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4L\\ni\\n,R\\ni\\n\\xe2\\x89\\xa410\\n9\\nSum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n1\\n3\\n4\\n4\\n2 1 3 2\\n4 2 4 3\\n7\\n3 10 5 2 8 3 9\\n8 6 11 5 9 13 7\\n0\\n5\\n32\\nExplanation:\\nTest case 1: The number of ingredients is already\\n1. Thus, MoEngage has to spend\\n0 coins.\\nTest case 2: Initially, the list of ingredients is\\n[1,2,3,4]. MoEngage can apply the operations in the following way:\\nApply the first operation on ingredient\\n4. Coins required for this are\\nL\\n4\\n=2. The updated list of ingredients is\\n[1,2,4].\\nApply the second operation on ingredient\\n2. Coins required for this are\\nR\\n2\\n=2. The updated list of ingredients is\\n[1,2].\\nApply the first operation on ingredient\\n2. Coins required for this are\\nL\\n2\\n=1. The updated list of ingredients is\\n[2].\\nThus, the total number of coins required is\\n2+2+1=5. It can be shown that MoEngage cannot achieve a single ingredient in less than\\n5 coins.\"",
        "458": "b\"Minimize swaps\\nYou are given a binary string\\nS.\\nIn one operation, you can pick an index\\ni\\n(1\\xe2\\x89\\xa4i<\\xe2\\x88\\xa3S\\xe2\\x88\\xa3) and swap the characters\\nS\\ni\\nand\\nS\\n(i+1)\\n.\\nFind the minimum number of operations required, such that, the decimal representation of the final binary string is divisible by\\n3. If it is impossible to do so, print\\n\\xe2\\x88\\x921 instead.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of single line of input, containing a binary string\\nS.\\nOutput Format\\nFor each test case, output on a new line, the minimum number of operations required, such that, the decimal representation of the final binary string is divisible by\\n3. If it is impossible to do so, print\\n\\xe2\\x88\\x921 instead.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4\\xe2\\x88\\xa3S\\xe2\\x88\\xa3\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\nS consists of\\n0 and\\n1 only.\\nThe sum of\\n\\xe2\\x88\\xa3S\\xe2\\x88\\xa3 over all test cases won't exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n0000\\n111\\n11001\\n0\\n-1\\n1\\nExplanation:\\nTest case\\n1: There is no need to apply any operation since the decimal representation of\\n0000 is\\n0 which is divisible by\\n3.\\nTest case\\n2: It can be shown that we cannot make the decimal representation of the string divisible by\\n3 using any number of operations.\\nTest case\\n3: The decimal representation of\\n11001 is\\n25 . Using one operation, we pick\\ni=2 and swap\\nS\\n2\\nand\\nS\\n3\\n. Thus, the string becomes\\n10101, whose decimal representation is\\n21, which is divisible by\\n3.\"",
        "459": "b'Sum of Goodness\\nYou are given an array\\nA=A\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nof size\\nN.\\nConsider a subsequence\\nS=S\\n1\\n,S\\n2\\n,\\xe2\\x80\\xa6,S\\nM\\nof\\nA. Let us define the Goodness of subsequence\\nS as follows:\\nSort the subsequence\\nS in non-decreasing order.\\nThen, the Goodness of subsequence\\nS is the number of indices such that\\nS\\ni\\n=i, where\\n(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4\\xe2\\x88\\xa3S\\xe2\\x88\\xa3).\\nFor example, suppose\\nA=[10,3,2,5,11,3,1,12], and the subsequence is\\nS=[3,2,5,3,1]. After sorting,\\nS=[1,2,3,3,5], and so the Goodness of\\nS is\\n4.\\nConsider all the\\n2\\nN\\n\\xe2\\x88\\x921 possible non-empty subsequences of array\\nA, and find the sum of all their Goodness.\\nSince the answer can be large, output the answer modulo\\n10\\n9\\n+7.\\nNote: A sequence\\nS is a subsequence of array\\nA if\\nS can be obtained from\\nA by deletion of several (possibly, zero) elements. For example,\\n[3,1] is a subsequence of\\n[3,2,1] and\\n[4,3,1], but not a subsequence of\\n[1,3,3,7] and\\n[3,10,4].\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases. Then the test cases follow.\\nThe first line of each test case contains an integer\\nN - the size of the array\\nA.\\nThe second line of each test case contains\\nN space-separated integers,\\nA\\n1\\n,A\\n2\\n,A\\n3\\n,...,A\\nN\\n.\\nOutput Format\\nFor each test case, output the answer modulo\\n10\\n9\\n+7.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4N for each\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N.\\nThe sum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n4\\n2\\n1 2\\n5\\n3 2 5 5 3\\n4\\n1 1 2 1\\n6\\n6 4 5 2 3 1\\n3\\n5\\n17\\n63\\nExplanation:\\nTestcase 1: The given array is\\n[1,2]. There are 3 possible non-empty subsequences:\\n[1]. The Goodness of this subsequence is\\n1, since\\nS\\n1\\n=1.\\n[2]. The Goodness of this subsequence is\\n0.\\n[1,2]. The Goodness of this subsequence is\\n2, since\\nS\\n1\\n=1 and\\nS\\n2\\n=2.\\nThus the total sum is\\n1+0+2=3, which is the answer.'",
        "460": "b\"Minimum Operation\\nYou are given positive integers\\nN and\\nM\\n(M\\xe2\\x89\\xa52).\\nYou are also given an array\\nA of size\\nN, such that\\n2\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4M.\\nIn one operation on the array, you can:\\nSelect an integer\\nX\\n(2\\xe2\\x89\\xa4X\\xe2\\x89\\xa4M) and change\\nA\\ni\\nto\\ngcd(A\\ni\\n,X) for all\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N.\\nNote that\\ngcd denotes the greatest common divisor.\\nYour task is to make all the elements of\\nA equal.\\nFind the minimum number of operations required to do so and also print the selected integer\\nX for each operation.\\nIf there are multiple ways to do so, you may print any.\\nIt can be proven that it is always possible to make all the elements of\\nA equal in finite number of operations.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains two integers\\nN and\\nM \\xe2\\x80\\x94 the length of the array\\nA and maximum value of\\nX allowed.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n, representing the array\\nA.\\nOutput Format\\nFor each test case, in the first line, print an integer\\nZ, denoting the number of operations required.\\nIn case\\nZ>0, print another line with\\nZ space-separated integers where the\\ni\\nth\\ninteger represents the selected integer\\nX selected in the\\ni\\nth\\noperation in order.\\nIf there are multiple ways to do so, you may print any.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n2\\xe2\\x89\\xa4M\\xe2\\x89\\xa410\\n6\\n2\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4M\\nThe sum of\\nN over all test cases won't exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nNote that sum of\\nM over all test case isn't bounded.\\nSample 1:\\nInput\\nOutput\\n2\\n3 343\\n343 343 343\\n5 100\\n4 8 12 16 20\\n0\\n1\\n4\\nExplanation:\\nTest case\\n1: Since all elements of the array are already equal, we require\\n0 operations.\\nTest case\\n2: We require only one operation:\\nSelect\\nX=4: Thus, the array becomes\\n[gcd(4,4),gcd(4,8),gcd(4,12),gcd(4,16),gcd(4,20)]=[4,4,4,4,4], where all elements are equal.\\nNote that this is the minimum number of operations required.\"",
        "461": "b'Increase 2 consecutive characters\\nChef has\\n2 strings\\nA and\\nB of equal length\\nN. Both strings contain lowercase english alphabets only.\\nChef can perform several moves on string\\nA. In one move, Chef has to:\\nSelect an index\\ni (1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\xe2\\x88\\x921).\\nReplace\\nA[i] with\\n(A[i]+1).\\nReplace\\nA[i+1] with\\n(A[i+1]+1).\\nFor example, if\\nA=abcze, a valid move would be to select index\\n3. This way the string becomes\\nabdae after performing the move. Note that the value at an index is cyclically incremented. This means that,\\na\\xe2\\x86\\x92b,\\nb\\xe2\\x86\\x92c,\\n\\xe2\\x80\\xa6,\\nz\\xe2\\x86\\x92a.\\nChef has been asked to answer\\nQ queries. Each query is of the form:\\nL\\nR: Given\\n1\\xe2\\x89\\xa4L\\xe2\\x89\\xa4R\\xe2\\x89\\xa4N, Chef wants to know if it is possible to convert the substring\\nA[L,R] to\\nB[L,R] by performing the above mentioned move any number of times.\\nFor each query, output in a single line\\nYes, if the conversion is possible using any number of moves. Otherwise, print\\nNo.\\nNOTE: Queries are independent. Thus, the original strings\\nA and\\nB would be retained to process next query. For each query solve for substrings\\nA[L,R] and\\nB[L,R] only. So valid values for\\ni will be among\\nL to\\nR\\xe2\\x88\\x921 only.\\nInput Format\\nThe first line will contain\\nT - the number of test cases. Then the test cases follow.\\nFirst line of each test case contains two integers\\nN,Q.\\nSecond line of each test case contains string\\nA.\\nThird line of each test case contains string\\nB.\\nQ lines follow, where the\\ni\\nth\\nline contains two integers\\nL\\ni\\nR\\ni\\n- the\\ni\\nth\\nquery.\\nOutput Format\\nOutput\\nQ lines, where the\\ni\\nth\\nline contains the answer to the\\ni\\nth\\nquery. The answer is\\nYes, if the conversion is possible using any number of moves. Otherwise, the answer is\\nNo.\\nYou may print each character of the string in uppercase or lowercase (for example, the strings\\nyEs,\\nyes,\\nYes and\\nYES will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4Q\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4L\\xe2\\x89\\xa4R\\xe2\\x89\\xa4N\\nSum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSum of\\nQ over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n1\\n5 3\\nabcdz\\nnbhea\\n2 2\\n1 3\\n4 5\\nYes\\nNo\\nYes\\nExplanation:\\nTest Case\\n1:\\nFor the first query, the substring\\nA[2,2]=b is already same as\\nB[2,2]=b. Thus, the answer is\\nYes.\\nFor the second query, it can be proven that the substring\\nA[1,3] can never be made equal to\\nB[1,3] using any number of moves.\\nFor the third query, the substring\\nA[4,5]=dz and\\nB[4,5]=ea. Applying the move on index\\n4, we get\\nA[4]=e and\\nA[5]=a. Hence, after one move,\\nA[4,5]=B[4,5]. Thus, the answer is\\nYes in this case.'",
        "462": "b'Expected Value\\nStack has a positive integer\\nP(P>1).\\nHe starts a game where his initial score is\\n0.\\nIn the\\ni\\nth\\nturn, with a probability of\\n2\\n1\\n, Stack adds\\nP\\ni\\xe2\\x88\\x921\\n1\\nto his score.\\nStack stops after\\nN turns.\\nLet\\nS\\ni\\nbe his score after\\ni turns and\\nF(i) denote the expected value of\\nS\\ni\\n2\\n.\\nFor each integer\\ni(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N), find the value of\\nF(i) modulo\\n998244353.\\nInput Format\\nThe only line of input contains two space-separated positive integers\\nN and\\nP, as mentioned in the statement.\\nOutput Format\\nPrint\\nN space-separated integers. For each integer\\ni(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N), output the value of\\nF(i) modulo\\n998244353.\\nFormally, let\\nM=998244353. It can be shown that the answer can be expressed as an irreducible fraction\\ny\\nx\\n, where\\nx and\\ny are integers and\\ny\\n\\xee\\x80\\xa0\\n\\xe2\\x89\\xa10(modM).\\nOutput the integer equal to\\nx\\xe2\\x8b\\x85y\\n\\xe2\\x88\\x921\\nmodM.\\nIn other words, output such an integer\\nz that\\n0\\xe2\\x89\\xa4z<M and\\nz\\xe2\\x8b\\x85y\\xe2\\x89\\xa1x(modM). .\\nConstraints\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\n2\\xe2\\x89\\xa4P\\xe2\\x89\\xa410\\n5\\nSample 1:\\nInput\\nOutput\\n2 2\\n499122177 124780545\\nExplanation:\\nS\\n1\\ncan be\\n0 or\\n1 with equal probability. Thus\\nF(1)=\\n2\\n0\\xe2\\x8b\\x850\\n+\\n2\\n1\\xe2\\x8b\\x851\\n=\\n2\\n1\\n.\\nF(2)=\\n8\\n7\\n.\\nSample 2:\\nInput\\nOutput\\n10 343\\n499122177 379526990 822885144 761122022 256959043 151932103 340445396 758502677 478338987 125853909'",
        "463": "b'Cherry and Bits\\nCherry has a binary matrix\\nA consisting of\\nN rows and\\nM columns. The rows are numbered from\\n1 to\\nN, columns are numbered from\\n1 to\\nM. Element at row\\ni (\\n1\\xe2\\x80\\x89\\xe2\\x89\\xa4\\ni\\xe2\\x80\\x89\\xe2\\x89\\xa4\\nN) and column\\nj (\\n1\\xe2\\x80\\x89\\xe2\\x89\\xa4\\nj\\xe2\\x80\\x89\\xe2\\x89\\xa4\\nM) is denoted as\\nA\\nij\\n. All elements of\\nA are either\\n0 or\\n1.\\nHe performs\\nQ queries on matrix. Each query is provided by four integers\\nx\\n1\\n,\\ny\\n1\\n,\\nx\\n2\\n,\\ny\\n2\\nwhich define the rectangle, where (\\nx\\n1\\n,\\ny\\n1\\n) stands for the coordinates of the top left cell of the rectangle, while (\\nx\\n2\\n,\\ny\\n2\\n) stands for the coordinates of the bottom right cell. You need to flip all the bits i.e. (\\n0 to\\n1,\\n1 to\\n0) that are located fully inside the query rectangle.\\nFinally, print the matrix after performing all the queries.\\nNote:\\nx\\n1\\nrepresents the row number while\\ny\\n1\\nrepresents the column number.\\n###Input:\\nThe first line of the input contains two integers\\nN and\\nM \\xe2\\x80\\x94 the number of rows and the number of columns in the matrix.\\nEach of the next\\nN lines contains a string of length\\nM, where the\\nj\\nth\\ncharacter of\\ni\\nth\\nline denotes the value of\\nA\\ni,j\\n.\\nNext line contains an integer\\nQ \\xe2\\x80\\x94 the number of queries.\\nThen follow\\nQ lines with queries descriptions. Each of them contains four space-seperated integers\\nx\\n1\\n,\\ny\\n1\\n,\\nx\\n2\\n,\\ny\\n2\\n\\xe2\\x80\\x94 coordinates of the up left and bottom right cells of the query rectangle.\\n###Output:\\nPrint the matrix, in the form of\\nN strings, after performing all the queries.\\n###Constraints\\n1\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa41000\\n0\\xe2\\x89\\xa4A\\nij\\n\\xe2\\x89\\xa41\\n1\\xe2\\x89\\xa4Q\\xe2\\x89\\xa410\\n6\\n1\\xe2\\x89\\xa4x\\n1\\n\\xe2\\x89\\xa4x\\n2\\n\\xe2\\x89\\xa4N\\n1\\xe2\\x89\\xa4y\\n1\\n\\xe2\\x89\\xa4y\\n2\\n\\xe2\\x89\\xa4M\\nSample 1:\\nInput\\nOutput\\n2 2\\n00\\n00\\n3\\n1 1 1 1\\n2 2 2 2\\n1 1 2 2\\n01\\n10\\nExplanation:\\nExample case 1:\\nAfter processing the 1st query 1 1 1 1, matrix becomes:\\n[\\n[\\n10\\n00\\n] After processing the 2nd query 2 2 2 2, the matrix becomes:\\n[\\n[\\n10\\n01\\n] After processing the 3rd query 1 1 2 2, matrix becomes:\\n[\\n[\\n01\\n10\\n] We need to output the matrix after processing all queries.'",
        "464": "b'Chef Is Just Throwing Random Words\\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nChef once had a deep epiphany and ended up saying: Given a sequence of positive integers\\na\\n1\\n,a\\n2\\n,\\xe2\\x80\\xa6,a\\nN\\n, if you take each of its\\n2\\nN\\nsubsequences and write down the sum of elements of this subsequence, what will the bitwise OR of the written integers be?\\nYes, you read it right, but can you solve it?\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN.\\nThe second line contains\\nN space-separated integers\\na\\n1\\n,a\\n2\\n,\\xe2\\x80\\xa6,a\\nN\\n.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 the bitwise OR of sums of all subsequences.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa45\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4a\\ni\\n<2\\n30\\nfor each valid\\ni\\nSubtasks\\nSubtask #1 (100 points): original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n2\\n1 1\\n3\\n1 9 8\\n3\\n27'",
        "465": "b\"Sardar and GCD\\nSardar Khan has finally decided to attack Ramadhir - he will bomb one of Ramadhir's businesses in Wasseypur. Sardar Khan knows that Ramadhir has\\nN businesses (numbered\\n1 to\\nN) and that there are\\nN\\xe2\\x88\\x921 roads connecting pairs of these businesses in such a way that all businesses are connected. Further, Sardar knows that each business has a specific value - the\\ni-th business has value\\nA\\ni\\n.\\nWhen Sardar Khan destroys a business, he also destroys every road directly connected to it. Formally, destroying business\\nv also destroys all existing roads of the form\\n(u,v).\\nSardar thinks that the damage dealt to Ramadhir upon destroying business\\nv equals the sum of the greatest common divisors of every remaining maximal connected set of businesses. More formally,\\nLet the connected components of the graph obtained on deleting\\nv and edges incident to it be\\nC\\n1\\n,C\\n2\\n,\\xe2\\x80\\xa6,C\\nk\\n.\\nDefine\\ngcd(C\\ni\\n) to be\\ngcd(A\\ni\\n1\\n,A\\ni\\n2\\n,\\xe2\\x80\\xa6,A\\ni\\nr\\n) where\\nC\\ni\\nconsists of vertices\\ni\\n1\\n,i\\n2\\n,\\xe2\\x80\\xa6,i\\nr\\n.\\nThe damage caused by destroying\\nv is then\\n\\xe2\\x88\\x91\\ni=1\\nk\\ngcd(C\\ni\\n).\\nSardar Khan wants to maximize the damage he deals. Can you find the maximum possible damage he can achieve, given that he destroys exactly one business?\\nIf the process of computing damage is still unclear, please refer to sample test cases for an explained example.\\nInput Format\\nThe first line of input contains an integer\\nT, denoting the total number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains an integer\\nN, denoting the number of businesses Ramadhir owns.\\nEach of the next\\nN\\xe2\\x88\\x921 lines contains\\n2 integers\\na and\\nb, denoting a road between businesses\\na and\\nb.\\nFinally, the last line of each test case contains\\nN space-separated positive integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n, where\\nA\\ni\\nis the value of the\\ni-th business.\\nOutput Format\\nFor each test case, output a single line containing one integer - the maximum possible damage that Sardar Khan can deal.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nSum of\\nN over all test cases will not exceed\\n5\\xe2\\x8b\\x8510\\n5\\n.\\nIt is guaranteed that the given roads connect every business.\\nSample 1:\\nInput\\nOutput\\n1\\n5\\n1 2\\n1 3\\n3 4\\n3 5\\n4 6 8 12 15\\n29\\nExplanation:\\nIf business\\n1 is bombed, the remaining connected components are\\n{(2),(3,4,5)}. This gives a damage of\\ngcd(A\\n2\\n)+gcd(A\\n3\\n,A\\n4\\n,A\\n5\\n)=6+1=7.\\nIf business\\n2 is bombed, the remaining connected components are\\n{(1,3,4,5)}. This gives a damage of\\ngcd(A\\n1\\n,A\\n3\\n,A\\n4\\n,A\\n5\\n)=1.\\nIf business\\n3 is bombed, the remaining connected components are\\n{(1,2),(4),(5)}. This gives a damage of\\ngcd(A\\n1\\n,A\\n2\\n)+gcd(A\\n4\\n)+gcd(A\\n5\\n)=2+12+15=29.\\nIf business\\n4 is bombed, the remaining connected components are\\n{(1,2,3,5)}. This gives a damage of\\ngcd(A\\n1\\n,A\\n2\\n,A\\n3\\n,A\\n5\\n)=1.\\nIf business\\n5 is bombed, the remaining connected components are\\n{(1,2,3,4)}. This gives a damage of\\ngcd(A\\n1\\n,A\\n2\\n,A\\n3\\n,A\\n4\\n)=2.\\nClearly, bombing business\\n3 gives the maximum possible damage, that being 29.\"",
        "466": "b\"Mexy Array\\nYou are given an array\\nB containing\\nN integers, each of which is either\\n\\xe2\\x88\\x921 or a non-negative integer. Construct any integer array\\nA of length\\nN such that:\\n0\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nfor every\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\nIf\\nB\\ni\\n\\xe2\\x89\\xa50,\\nA must satisfy\\nmex(A\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\ni\\n)=B\\ni\\nOtherwise,\\nB\\ni\\n=\\xe2\\x88\\x921, which means there is no constraint on\\nmex(A\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\ni\\n)\\nIf there does not exist any array satisfying the constraints, print\\n\\xe2\\x88\\x921 instead.\\nNote: The mex of a set of non-negative integers is the smallest non-negative integer that does not belong to it. For example,\\nmex(1,2,3)=0,mex(0,2,4,1)=3, and\\nmex(0,0,0)=1.\\nInput Format\\nThe first line of input contains an integer\\nT, denoting the number of testcases. The description of\\nT testcases follows.\\nThe first line of each testcase contains a single integer\\nN.\\nThe second line of each testcase contains\\nN space-separated integers\\nB\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nN\\n.\\nOutput Format\\nFor each testcase, output the required answer on a new line:\\n\\xe2\\x88\\x921 if no valid array exists, or\\nN space-separated integers denoting the elements of any valid array\\nA. The elements of\\nA must satisfy\\n0\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\n.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n\\xe2\\x88\\x921\\xe2\\x89\\xa4B\\ni\\n\\xe2\\x89\\xa410\\n5\\nThe sum of\\nN across all testcases won't exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n2\\n7\\n0 -1 2 -1 5 -1 -1\\n3\\n2 -1 -1\\n1 3 0 4 2 6 5\\n-1\\nExplanation:\\nTest case\\n1: We have\\nA=[1,3,0,4,2,6,5]. Let\\nC\\ni\\n=mex(A\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\ni\\n). Then, it can be seen that\\nC=[0,0,2,2,5,5,7], which matches\\nB at all positions where\\nB\\ni\\n\\xe2\\x89\\xa50.\\nTest case\\n2: It can be shown that no array\\nA exists that satisfies the given constraints.\"",
        "467": "b'Valid String\\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nGiven a binary string\\nS consisting of\\n0\\n\\xe2\\x80\\xb2\\ns and\\n1\\n\\xe2\\x80\\xb2\\ns, find whether there exists a rightwise circular rotation of the string such that every 2 adjacent\\n1\\n\\xe2\\x80\\xb2\\ns are separated by at most\\nC\\n0\\n\\xe2\\x80\\xb2\\ns.\\nNote: The last occurrence of\\n1 in the rotated string won\\'t have any\\n1 next to it, i.e, first and the last ones in the string are not considered to be adjacent.\\n###Input:\\nFirst line will contain\\nT, number of testcases. Then the testcases follow.\\nEach testcase contains of two lines of input.\\nFirst line contains two space separated integers\\nN,C, length of the string and the upper limit on a number of\\n0\\n\\xe2\\x80\\xb2\\ns between\\n2 adjacent\\n1\\n\\xe2\\x80\\xb2\\ns.\\nSecond line contains the binary string\\nS.\\n###Output: For each testcase, output in a single line \"YES\" if there exists a rightwise circular rotation of string satisfying the criteria and \"NO\" if it doesn\\'t exist.\\nNote: The output is case-insensitive \\xe2\\x80\\x95 each letter may be printed in upper case or lower case.\\n###Constraints\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa45\\xe2\\x88\\x9710\\n5\\n0\\xe2\\x89\\xa4C\\xe2\\x89\\xa4max(0,N\\xe2\\x88\\x922)\\nSum of\\nN over all tests is atmost\\n10\\n6\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n4 1\\n1100\\n4 0\\n0101\\n6 1\\n101001\\nYES\\nNO\\nYES\\nExplanation:\\nCase 1: In the original configuration maximum number of\\n0\\n\\xe2\\x80\\xb2\\ns between\\n2 adjacent\\n1\\n\\xe2\\x80\\xb2\\ns is\\n0, therefore it satisfies the criteria.\\nCase 2: The\\n4 circular rotations of the string S = {\"0101\", \"1010\", \"0101\", \"1010\"}. In all the cases the maximum number of\\n0\\n\\xe2\\x80\\xb2\\ns between\\n2 consecutive\\n1\\n\\xe2\\x80\\xb2\\ns is\\n1 which doesn\\'t satisfies the criteria.\\nCase 3: The\\n6 circular rotations of the string S = {\"101001\", \"110100\", \"011010\", \"001101\", \"100110\", \"010011\"} out of which\\nsecond,\\nthird and\\nfourth strings satisfy the criteria.'",
        "468": "b'Pyramid Traversal\\nYou are given a pyramid of the following form with an infinite number of rows:\\n1\\n2 3\\n4 5 6\\n7 8 9 10\\n...........\\nFrom a cell, you can move to either the bottom-left cell or the bottom-right cell directly in contact with the current one (For example, you can make the following moves:\\n1\\xe2\\x86\\x922,1\\xe2\\x86\\x923,6\\xe2\\x86\\x929,6\\xe2\\x86\\x9210, while you cannot make moves\\n2\\xe2\\x86\\x926 or\\n2\\xe2\\x86\\x927).\\nYou are given a starting cell\\ns and an ending cell\\ne. Starting at cell\\ns, find the number of ways to reach cell\\ne. This number can be large, so print the answer modulo\\n10\\n9\\n+7.\\nTwo ways are said to be different if there exists at least one cell which was visited in one of the ways but not the other one.\\nInput Format\\nThe first line of input contains a single integer\\nT, the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains two space-separated integers\\ns and\\ne, denoting the starting and the ending cell respectively.\\nOutput Format\\nFor each test case, output a single line containing one integer: the number of ways to go from\\ns to\\ne modulo\\n10\\n9\\n+7.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4s,e\\xe2\\x89\\xa410\\n9\\nSubtasks\\nSubtask 1(100 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n2 7\\n1 5\\n5 3\\n1\\n2\\n0\\nExplanation:\\nIn the first test case, there exists only\\n1 way to move from\\n2 to\\n7, which is:\\n2\\xe2\\x86\\x924\\xe2\\x86\\x927\\nIn the second test case, there exist\\n2 ways to move from\\n1 to\\n5, which are:\\n1\\xe2\\x86\\x922\\xe2\\x86\\x925\\n1\\xe2\\x86\\x923\\xe2\\x86\\x925\\nIn the third test case, it is not possible to move from\\n5 to\\n3.'",
        "469": "b'Chef and insomnia\\nRead problems statements in Mandarin Chinese and Russian.\\nChef sometimes suffers from insomnia. During sleepless nights, he often plays this game: He creates an array A of N integers and also decides one integer K. After that, he tries to count the number of non-empty contiguous subsequences (subsegments) of A, such that there are no bad pairs of integers in this subsegment. A pair (x, y) of integers is called bad if x is situated to the left of y in the array and x mod y = K. Finally, before going to sleep, Chef wrote down the answer on a sheet of paper. Sadly, he has forgotten it this morning and want your help regarding that.\\nInput\\nThe first line contains two integers - N and K.\\nSecond line contains N integers - A1, A2 ... AN - separated by spaces, denoting the array A.\\nOutput\\nA single line containing an integer - the answer to the problem.\\nConstraints\\n1 \\xe2\\x89\\xa4 N, Ai \\xe2\\x89\\xa4 105\\n0 \\xe2\\x89\\xa4 K \\xe2\\x89\\xa4 105\\nSubtasks\\nSubtask 1: N \\xe2\\x89\\xa4 100 (15 points)\\nSubtask 2: N \\xe2\\x89\\xa4 1000 (15 points)\\nSubtask 3: K = 0 (10 points)\\nSubtask 4: Original constraints (60 points)\\nSample 1:\\nInput\\nOutput\\n3 2\\n5 3 1\\n4'",
        "470": "b'Partition It\\nChef has the\\nN numbers\\n1,2,3,\\xe2\\x80\\xa6,N. He wants to give exactly\\nK of these numbers to his friend and keep the rest with him.\\nHe can choose any\\nK numbers such that the GCD of any number from Chef\\'s set and any number from his friend\\'s set is equal to\\n1.\\nFormally, suppose Chef gives the set of numbers\\nA to his friend and keeps\\nB with himself (where\\n\\xe2\\x88\\xa3A\\xe2\\x88\\xa3=K and\\n\\xe2\\x88\\xa3B\\xe2\\x88\\xa3=N\\xe2\\x88\\x92K). Then\\nA and\\nB must satisfy\\ngcd(a,b)=1  \\xe2\\x88\\x80a\\xe2\\x88\\x88A,b\\xe2\\x88\\x88B\\nChef needs your help in choosing these\\nK numbers. Please find any valid set of\\nK numbers that will satisfy the condition, or tell him that no such set exists.\\nInput Format\\nThe first line of input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains two space-separated integers\\nN and\\nK.\\nOutput Format\\nFor each test case first output a single line containing \"YES\" (without quotes) if a set of size\\nK satisfying Chef\\'s condition exists; and \"NO\" if no such set exists. This line is not case-sensitive so \"YeS\", \"nO\", etc. are also acceptable.\\nNext, if the answer is \"YES\", print another line containing\\nK distinct space-separated integers from\\n1 to\\nN denoting the numbers which Chef will give to his friend. The integers can be printed in any order.\\nIf there are multiple solutions, you may print any of them.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa4N\\xe2\\x88\\x921\\nSum of\\nN over all test cases does not exceed\\n5\\xe2\\x88\\x9710\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n4 1\\n4 2\\n6 3\\nYes\\n3\\nYes\\n4 2\\nNo\\nExplanation:\\nTest case\\n1: Chef can give\\n[3] to his friend and keep\\n[1,2,4] for himself.\\n3 is coprime with\\n1,2 and\\n4 so the condition is satisfied. Another possible solution is Chef giving\\n[1] to his friend.\\nTest case\\n2: Chef can give\\n[2,4] and keep\\n[1,3] (or vice versa). It can be seen that\\ngcd(2,1)=1,\\ngcd(2,3)=1,\\ngcd(4,1)=1,\\ngcd(4,3)=1 and so the condition is satisfied.\\nTest case\\n3: There is no set of 3 numbers that can satisfy the given condition.'",
        "471": "b'Is This JEE\\nEveryone loves short problem statements.\\nGiven a function\\nf(x) find its minimum value over the range\\n0<x<\\xcf\\x80\/2\\nf(x)=(x\\n2\\n+b\\xe2\\x88\\x97x+c)\/sin(x)\\n###Input:\\nFirst-line will contain\\nT, the number of test cases. Then the test cases follow.\\nEach test case contains a single line of input, two real numbers\\nb,c.\\n###Output: For each test case, output the minimum value of\\nf(x) over the given range. Absolute error of\\n10\\n\\xe2\\x88\\x926\\nis allowed.\\n###Constraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100000\\n1\\xe2\\x89\\xa4b,c\\xe2\\x89\\xa420\\n###Sample Input: 1 2 2\\n###Sample Output: 5.8831725615'",
        "472": "b\"Circular Merging\\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nN integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nare placed in a circle in such a way that for each valid\\ni,\\nA\\ni\\nand\\nA\\ni+1\\nare adjacent, and\\nA\\n1\\nand\\nA\\nN\\nare also adjacent.\\nWe want to repeat the following operation exactly\\nN\\xe2\\x88\\x921 times (until only one number remains):\\nSelect two adjacent numbers. Let's denote them by\\na and\\nb.\\nScore\\na+b penalty points.\\nErase both\\na and\\nb from the circle and insert\\na+b in the space between them.\\nWhat is the minimum number of penalty points we can score?\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN.\\nThe second line contains\\nN space-separated integers\\na\\n1\\n,a\\n2\\n,\\xe2\\x80\\xa6,a\\nN\\n.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x94 the minimum number of penalty points.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa4400\\n1\\xe2\\x89\\xa4a\\ni\\n\\xe2\\x89\\xa410\\n9\\nfor each valid\\ni\\nSubtasks\\nSubtask #1 (10 points):\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\na\\ni\\n\\xe2\\x89\\xa410 for each valid\\ni\\nSubtask #2 (10 points):\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa425\\na\\n1\\n,a\\n2\\n,\\xe2\\x80\\xa6,a\\nN\\nare distinct powers of\\n2 (including\\n1)\\nSubtask #3 (10 points):\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa4100\\nSubtask #4 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n1\\n3\\n10 10 1\\n32\\nExplanation:\\n[10,10,1]\\xe2\\x86\\x92[10,11], penalty:\\n11\\n[10,11]\\xe2\\x86\\x92[21], penalty:\\n21\\nTotal penalty:\\n11+21=32\"",
        "473": "b'Mahesh and his lost array\\nRead problems statements in Mandarin Chinese and Russian as well.\\nMahesh got a beautiful array named A as a birthday gift from his beautiful girlfriend Namratha. There are N positive integers in that array. Mahesh loved the array so much that he started to spend a lot of time on it everyday. One day, he wrote down all possible subsets of the array. Then for each subset, he calculated the sum of elements in that subset and wrote it down on a paper. Unfortunately, Mahesh lost the beautiful array :(. He still has the paper on which he wrote all subset sums. Your task is to rebuild beautiful array A and help the couple stay happy :)\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases. First line of each test case contains one integer N, the number of elements in A. Second line of each test case contains 2^N integers, the values written on paper\\nOutput\\nFor each test case, output one line with N space separated integers in non-decreasing order.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 50\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 15\\n0 \\xe2\\x89\\xa4 Values on paper \\xe2\\x89\\xa4 10^9\\nAll input values are valid. A solution always exists\\nExample\\nInput\\n2\\n1\\n0 10\\n2\\n0 1 1 2\\nOutput\\n10\\n1 1\\nExplanation\\nTest case #2 For the array [1,1], possible subsets are {}, {1}, {1}, {1,1}, respective sums are 0, 1, 1, 2.'",
        "474": "b\"String Operations\\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nTwo strings\\nA and\\nB are equivalent (denoted by\\nA\\xe2\\x88\\xbcB) if they have the same lengths and\\nA can be transformed into\\nB by performing the following operation zero or more times: choose a substring of\\nA which contains '1' an even number of times and reverse this substring.\\nYou are given a binary string\\nS. Find the number of different equivalence classes of the substrings of this string. In other words, find the smallest possible size of a set\\nC of binary strings with the following property: for each non-empty string\\nR which is a substring of\\nS (including\\nS itself), there is a string\\nX\\xe2\\x88\\x88C such that\\nR\\xe2\\x88\\xbcX.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains a single string\\nS with length\\nN.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 the number of equivalence classes among the substrings of the given string.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41,000\\nS contains only characters '0' and '1'\\nSubtasks\\nSubtask #1 (10 points):\\nN\\xe2\\x89\\xa410\\nSubtask #2 (90 points): original constraints\\nSample 1:\\nInput\\nOutput\\n10\\n00000\\n10001\\n10101\\n01111\\n11001\\n01101\\n10110\\n10010\\n10111\\n11001\\n5\\n11\\n8\\n9\\n12\\n10\\n10\\n11\\n11\\n12\"",
        "475": "b'Yet Another Crossover Episode\\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\\nYou are given an integer\\nD. Find an integer sequence\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nsuch that the following conditions are satisfied:\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n5\\nfor each valid\\ni\\n\\xe2\\x88\\x91\\ni=1\\nN\\n\\xe2\\x88\\x91\\nj=i\\nN\\n(min(A\\ni\\n,A\\ni+1\\n,\\xe2\\x80\\xa6,A\\nj\\n)\\xe2\\x88\\x92GCD(A\\ni\\n,A\\ni+1\\n,\\xe2\\x80\\xa6,A\\nj\\n))=D\\nIt can be proved that a solution always exists under the given constraints.\\nNote:\\nGCD(B\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nM\\n) is the greatest integer which divides all the integers\\nB\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nM\\n.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first and only line of each test case contains a single integer\\nD.\\nOutput\\nFor each test case, print two lines. The first of these lines should contain a single integer\\nN. The second line should contain\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nIf there are multiple solutions, you may find any one of them.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n0\\xe2\\x89\\xa4D\\xe2\\x89\\xa410\\n9\\nExample Input\\n4\\n2\\n5\\n200\\n13\\nExample Output\\n3\\n3 3 2 \\n5\\n2 8 5 1 10 \\n7\\n12 10 15 11 19 13 15\\n4\\n5 4 4 10 '",
        "476": "b\"Cute Chef Gift\\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nChef wants to give a gift to Chefina to celebrate their anniversary. Of course, he has a sequence\\na\\n1\\n,a\\n2\\n,\\xe2\\x80\\xa6,a\\nN\\nready for this occasion. Since the half-heart necklace is kind of cliche, he decided to cut his sequence into two pieces and give her a piece instead. Formally, he wants to choose an integer\\nl (\\n1\\xe2\\x89\\xa4l<N) and split the sequence into its prefix with length\\nl and its suffix with length\\nN\\xe2\\x88\\x92l.\\nChef wants his gift to be cute; he thinks that it will be cute if the product of the elements in Chefina's piece is coprime with the product of the elements in his piece. Can you tell him where to cut the sequence? Find the smallest valid\\nl such that Chef's gift would be cute.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains the integer\\nN.\\nThe second line contains\\nN space-separated integers\\na\\n1\\n,a\\n2\\n,\\xe2\\x80\\xa6,a\\nN\\n.\\nOutput\\nFor each test case, print a single line containing one integer\\nl where Chef should cut the sequence.\\nIt is guaranteed that a solution exists for the given test data.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa420\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n2\\xe2\\x89\\xa4a\\ni\\n\\xe2\\x89\\xa410\\n5\\nfor each valid\\ni\\nthe sum of\\nN over all test cases does not exceed\\n3\\xe2\\x8b\\x8510\\n5\\nSubtasks\\nSubtask #1 (25 points):\\nN\\xe2\\x89\\xa4200\\nthe sum of\\nN over all test cases does not exceed\\n600\\nSubtask #2 (40 points):\\nN\\xe2\\x89\\xa42,000\\nthe sum of\\nN over all test cases does not exceed\\n6,000\\nSubtask #3 (35 points): original constraints\\nSample 1:\\nInput\\nOutput\\n1\\n4\\n2 3 4 5\\n3\"",
        "477": "b'Existence Of X\\nYou are given non-negative integers\\nA,\\nB and\\nC.\\nDoes there exist a non-negative integer\\nX such that\\nA\\xe2\\x8a\\x95X+B\\xe2\\x8a\\x95X=C\\xe2\\x8a\\x95X?\\nAs a reminder,\\n\\xe2\\x8a\\x95 denotes the bitwise XOR operation.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe only line of each test case contains three space-separated non-negative integers\\nA,\\nB and\\nC.\\nOutput Format\\nFor each test case, print on a new line the answer: YES if valid\\nX exists, and NO otherwise.\\nEach character of the output may be printed in either uppercase or lowercase, i.e, the strings Yes, YES, yes, yEs` will all be treated as identical.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n0\\xe2\\x89\\xa4A,B,C<2\\n27\\nSample 1:\\nInput\\nOutput\\n5\\n2 5 7\\n2 3 13\\n7 0 7\\n2 7 6\\n1 6 6\\nYES\\nNO\\nYES\\nYES\\nYES\\nExplanation:\\nTest case\\n1:\\nX=0 satisfies the equation.\\nTest case\\n2: It can be proved that there does not exist a non-negative integer\\nX which satisfies the equation.\\nTest case\\n3:\\nX=0 satisfies the equation.\\nTest case\\n4:\\nX=3 satisfies the equation.\\nTest case\\n5:\\nX=1 satisfies the equation.'",
        "478": "b'Distinct Values\\nThe beauty value of an array is defined as the difference between the largest and second largest elements of the array. Note that the largest and second largest elements can have the same value in case of duplicates.\\nFor example, beauty value of\\n[2,5,3,1]=5\\xe2\\x88\\x923=2 and beauty value of\\n[7,6,7]=7\\xe2\\x88\\x927=0\\nYou are given an array\\nA of length\\nN. Your task is to find the total number of distinct beauty values among all subarrays of\\nA having length greater than\\n1.\\nNote that, a subarray is obtained by deleting some (possibly zero) elements from the beginning and some (possibly zero) elements from the end of the array.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains a single integer\\nN \\xe2\\x80\\x94 the size of the array.\\nThe second line contains\\nN space-separated numbers -\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n, the elements of the array.\\nOutput Format\\nFor each test case, output a single line, the total number of distinct beauty among all subarrays of\\nA having length greater than\\n1.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nSum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n2\\n1 1\\n3\\n4 2 1\\n4\\n8 1 7 2\\n5\\n6 9 4 2 1\\n1\\n2\\n4\\n4\\nExplanation:\\nTest case\\n1: The only subarray is\\n[1,1] whose beauty is\\n0. Thus, there is only\\n1 distinct value of beauty.\\nTest case\\n2: The subarrays are\\n[4,2],[2,1], and\\n[4,2,1] having beauty\\n2,1, and\\n2 respectively. There are\\n2 distinct values of beauty.\\nTest case\\n3: The unique values of beauty are\\n7,1,6, and\\n5.\\nTest case\\n4: The unique values of beauty are\\n3,5,2, and\\n1.'",
        "479": "b\"Little Elephant and T-Shirts\\nRead problems statements in Mandarin Chinese and Russian.\\nLittle Elephant and his friends are going to a party. Each person has his own collection of T-Shirts. There are 100 different kind of T-Shirts. Each T-Shirt has a unique id between 1 and 100. No person has two T-Shirts of the same ID.\\nThey want to know how many arrangements are there in which no two persons wear same T-Shirt. One arrangement is considered different from another arrangement if there is at least one person wearing a different kind of T-Shirt in another arrangement.\\nInput\\nFirst line of the input contains a single integer T denoting number of test cases. Then T test cases follow.\\nFor each test case, first line contains an integer N, denoting the total number of persons. Each of the next N lines contains at least 1 and at most 100 space separated distinct integers, denoting the ID's of the T-Shirts ith person has.\\nOutput\\nFor each test case, print in single line the required number of ways modulo 1000000007 = 109+7.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 10\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 10\\nExample\\nInput:\\n2\\n2\\n3 5\\n8 100\\n3\\n5 100 1\\n2\\n5 100\\nOutput:\\n4\\n4\\nExplanation\\nFor the first case, 4 possible ways are (3,8), (3,100), (5,8) and (5,100).\\nFor the second case, 4 possible ways are (5,2,100), (100,2,5), (1,2,100), and (1,2,5).\"",
        "480": "b\"Chef and Ants\\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nChef has been researching ant colonies for many years and finally discovered all their secrets.\\nAn ant colony consists of\\nN distinct lines (numbered\\n1 through\\nN) that pass through a point\\nO, which is the queen's home. For each valid\\ni, there are\\nM\\ni\\nants on the\\ni-th line.\\nFor each valid\\ni and\\nj, the\\nj-th ant on the\\ni-th line initially has a non-zero coordinate\\nX\\ni,j\\nwith the following meaning:\\nThe distance of this ant from\\nO is\\n\\xe2\\x88\\xa3X\\ni,j\\n\\xe2\\x88\\xa3.\\nLet's choose a direction along the\\ni-th line from\\nO. The exact way in which this direction is chosen does not matter here, it only needs to be the same for all ants on the same line.\\nIf\\nX\\ni,j\\nis positive, this ant is at the distance\\n\\xe2\\x88\\xa3X\\ni,j\\n\\xe2\\x88\\xa3 from\\nO in the chosen direction. Otherwise, it is at this distance from\\nO in the opposite direction.\\nIn other words, two ants\\nj and\\nk on a line\\ni are at the same side of\\nO if the signs of\\nX\\ni,j\\nand\\nX\\ni,k\\nare the same or on opposite sides if the signs are different.\\nAll ants move with the same constant speed. Initially, all of them are moving towards\\nO. Whenever two or more ants meet (possibly at\\nO), all of these ants turn around and start moving in the opposite directions with the same speed. We call this a collision. Even if an ant reaches\\nO without meeting an ant there, it keeps moving in the same direction. An ant may change direction multiple times.\\nHelp Chef find the total number of collisions between ants. Note that even if more than two ants meet, it counts as only one collision.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN.\\nN lines follow. For each valid\\ni, the\\ni-th of these lines contains an integer\\nM\\ni\\n, followed by a space and\\nM\\ni\\nspace-separated integers\\nX\\ni,1\\n,X\\ni,2\\n,\\xe2\\x80\\xa6,X\\ni,M\\ni\\n.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 the number of collisions between ants.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41,000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4M\\ni\\n\\xe2\\x89\\xa45\\xe2\\x8b\\x8510\\n5\\nfor each valid\\ni\\n1\\xe2\\x89\\xa4\\xe2\\x88\\xa3X\\ni,j\\n\\xe2\\x88\\xa3\\xe2\\x89\\xa410\\n9\\nfor each valid\\ni,j\\nX\\ni,j\\n<X\\ni,j+1\\nfor each valid\\ni,j\\nthe sum of\\nN over all test cases does not exceed\\n2\\xe2\\x8b\\x8510\\n5\\nthe sum of\\nM\\n1\\n+M\\n2\\n+\\xe2\\x80\\xa6+M\\nN\\nover all test cases does not exceed\\n10\\n6\\nSubtasks\\nSubtask #1 (30 points):\\nN=1\\nSubtask #2 (70 points): original constraints\\nSample 1:\\nInput\\nOutput\\n1\\n2\\n2 -2 1\\n1 2\\n2\\nExplanation:\\nExample case 1: First, the ants on the first line collide at the coordinate\\n\\xe2\\x88\\x921\/2 and change directions. Finally, ant\\n2 on the first line collides with the only ant on the second line; this happens at\\nO. No collisions happen afterwards.\"",
        "481": "b\"Make Them Alike\\nYou are given a permutation\\nP of length\\nN, an array\\nA of size\\nN, and an integer\\nM.\\nInitially,\\n0\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4M. Consider an array\\nA\\n\\xe2\\x80\\xb2\\nobtained from\\nA by replacing all zeros in\\nA with positive integers less than or equal to\\nM.\\nThe array\\nA\\n\\xe2\\x80\\xb2\\nwill then be transformed as follows, in\\nN steps:\\nIn the\\ni\\nth\\nstep, we set\\nA\\ni\\n\\xe2\\x80\\xb2\\n=A\\nP\\ni\\n\\xe2\\x80\\xb2\\n.\\nThe initial array\\nA\\n\\xe2\\x80\\xb2\\nis said to be beautiful, if, after the transformation of\\nN steps, all elements of array\\nA\\n\\xe2\\x80\\xb2\\nare equal.\\nFind the number of such beautiful arrays\\nA\\n\\xe2\\x80\\xb2\\nwhich can be formed by changing the zeros in array\\nA to any value\\n\\xe2\\x89\\xa4M. Since this number can be huge, print this number modulo\\n10\\n9\\n+7.\\nNote that a permutation of length\\nN contains of all elements from\\n1 to\\nN exactly once.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains two space-separated integers\\nN and\\nM, the size of the array and the maximum value it can have.\\nThe second line of each test case consists of\\nN space-separated integers\\nP\\n1\\n,P\\n2\\n,\\xe2\\x80\\xa6,P\\nN\\n, the permutation\\nP.\\nThe third line of each test case consists of\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n, the initial array\\nA.\\nOutput Format\\nFor each test case, output on a new line, the number of such beautiful arrays\\nA\\n\\xe2\\x80\\xb2\\nwhich can be formed by changing the zeros in array\\nA to any value\\n\\xe2\\x89\\xa4M.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4M\\xe2\\x89\\xa410\\n9\\n0\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4M\\nThe sum of\\nN over all test cases won't exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n4 3\\n2 1 4 3\\n0 2 0 2\\n3 2\\n3 1 2\\n0 0 0\\n8 54\\n8 1 2 4 3 6 7 5\\n0 0 0 0 0 0 0 0\\n9\\n8\\n459165024\\nExplanation:\\nTest case\\n1: The given permutation is\\n[2,1,4,3]. One of the possible beautiful arrays is:\\nA\\n\\xe2\\x80\\xb2\\n=[1,2,3,2]. This is obtained by replacing the first\\n0 with\\n1 and the second\\n0 with\\n3 in the array\\nA.\\nFor the transformation:\\nIn the first step,\\nA\\n1\\n\\xe2\\x80\\xb2\\nis replaced with\\nA\\nP\\n1\\n\\xe2\\x80\\xb2\\n=A\\n2\\n\\xe2\\x80\\xb2\\n, that is\\n2. The array becomes\\n[2,2,3,2].\\nIn the second step,\\nA\\n2\\n\\xe2\\x80\\xb2\\nis replaced with\\nA\\nP\\n2\\n\\xe2\\x80\\xb2\\n=A\\n1\\n\\xe2\\x80\\xb2\\n, that is\\n2. The array becomes\\n[2,2,3,2].\\nIn the third step,\\nA\\n3\\n\\xe2\\x80\\xb2\\nis replaced with\\nA\\nP\\n3\\n\\xe2\\x80\\xb2\\n=A\\n4\\n\\xe2\\x80\\xb2\\n, that is\\n2. The array becomes\\n[2,2,2,2].\\nIn the fourth step,\\nA\\n4\\n\\xe2\\x80\\xb2\\nis replaced with\\nA\\nP\\n4\\n\\xe2\\x80\\xb2\\n=A\\n3\\n\\xe2\\x80\\xb2\\n, that is\\n2. The array becomes\\n[2,2,2,2].\\nThus, after the transformation, all elements of the array are equal. The other beautiful arrays for this test case are:\\n[1,2,1,2],[1,2,2,2],[2,2,1,2],[2,2,2,2],[2,2,3,2],[3,2,1,2],[3,2,2,2],[3,2,3,2].\\nThere are\\n9 beautiful arrays in total.\"",
        "482": "b'Interesting Representation\\nRead problem statements in Mandarin, Bengali, Russian, and Vietnamese as well.\\nGiven a positive integer\\nN, find two positive integers\\nA and\\nB, such that\\nA\\xe2\\x88\\x92B=N and the number of distinct prime factors of\\nA and\\nB are equal. If there exist multiple pairs of values of\\nA and\\nB satisfying the given conditions, you can output any one of them.\\nInput Format\\nFirst line will contain\\nT, number of testcases. Then the testcases follow.\\nEach testcase contains of a single line of input, integer\\nN.\\nOutput Format\\nFor each testcase, output in a single line two space separated integers\\nA and\\nB. If there are multiple answers, you can output any one of them.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n16\\n1\\xe2\\x89\\xa4A,B\\xe2\\x89\\xa410\\n18\\nSubtasks\\nSubtask 1 (100 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n1\\n8\\n135\\n3 2\\n97 89\\n1071 936'",
        "483": "b\"Maximize 1s\\nYou are given a binary string\\nS. You are allowed to perform the following operation at most once:\\nPick some substring of\\nS\\nFlip all the values in this substring, i.e, convert\\n0 to\\n1 and vice versa\\nFor example, if\\nS=1\\n00101\\n011, you can pick the underlined substring and flip it to obtain\\nS=1\\n11010\\n011.\\nFor the substring of\\nS consisting of all the positions from\\nL to\\nR, we define a function\\nf(L,R) to be the number of\\n1's in this substring. For example, if\\nS=100101011, then\\nf(2,5)=1 and\\nf(4,9)=4 (the respective substrings are\\n0010 and\\n101011).\\nIf you perform the given operation optimally, find the maximum possible value of\\nL=1\\n\\xe2\\x88\\x91\\nN\\nR=L\\n\\xe2\\x88\\x91\\nN\\nf(L,R)\\nthat can be obtained. Note that the substring flip operation can be performed at most once.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of single line of input, containing a binary string\\nS.\\nOutput Format\\nFor each test case, output on a new line the maximum possible value of\\n\\xe2\\x88\\x91\\nL=1\\nN\\n\\xe2\\x88\\x91\\nR=L\\nN\\nf(L,R) that can be obtained.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4\\xe2\\x88\\xa3S\\xe2\\x88\\xa3\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\nThe sum of\\n\\xe2\\x88\\xa3S\\xe2\\x88\\xa3 over all test cases won't exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n111\\n000\\n00100\\n10\\n10\\n26\\nExplanation:\\nTest case\\n1: There is no need to apply the operation since everything is already a\\n1. The answer is thus the sum of:\\nf(1,1)=1\\nf(1,2)=2\\nf(1,3)=3\\nf(2,2)=1\\nf(2,3)=2\\nf(3,3)=1\\nwhich is\\n10.\\nTest case\\n2: Flip the entire string to obtain\\n111, whose answer has been computed above.\\nTest case\\n3: Flip the entire string to obtain\\n11011. The sum of\\nf(L,R) across all substrings is now\\n26, which is the maximum possible.\"",
        "484": "b\"Sum of Cube\\nYou are given an array\\nA consisting of\\nN positive integers.\\nFind\\n\\xe2\\x88\\x91\\ni=1\\nN\\n\\xe2\\x88\\x91\\nj=i\\nN\\nF\\n3\\n(i,j), where\\nF(i,j)=\\xe2\\x88\\x91\\nk=i\\nj\\nA\\nk\\n.\\nSince the value might be quite large, print it modulo\\n998244353.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the length of the array\\nA.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nrepresenting the array\\nA.\\nOutput Format\\nFor each test case, output on a new line, the answer, modulo\\n998244353.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa45\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n6\\nThe sum of\\nN over all test cases won't exceed\\n5\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n2\\n1 1\\n3\\n1 2 1\\n5\\n8 5 6 2 3\\n10\\n128\\n42621\\nExplanation:\\nTest case\\n1:\\nF(1,1)=1,F(1,2)=1+1=2,F(2,2)=1.\\nThus,\\n\\xe2\\x88\\x91\\ni=1\\nN\\n\\xe2\\x88\\x91\\nj=i\\nN\\nF\\n3\\n(i,j)=1\\n3\\n+2\\n3\\n+1\\n3\\n=10.\\nTest case\\n2:\\nF(1,1)=1,F(1,2)=1+2=3,F(1,3)=1+2+1=4,F(2,2)=2,F(2,3)=2+1=3,F(3,3)=1.\\nThus,\\n\\xe2\\x88\\x91\\ni=1\\nN\\n\\xe2\\x88\\x91\\nj=i\\nN\\nF\\n3\\n(i,j)=1\\n3\\n+3\\n3\\n+4\\n3\\n+2\\n3\\n+3\\n3\\n+1\\n3\\n=128.\"",
        "485": "b'Maximum K Sums\\nRead problems statements in Mandarin Chinese , Russian and Vietnamese as well.\\nChef likes arrays a lot. Today, he found an array A consisting of N positive integers.\\nLet L denote the sorted (in non-increasing order) list of size N*(N+1)\/2 containing the sums of all possible contiguous subarrays of A. Chef is interested in finding the first K elements from the list L. Can you help him in accomplishing this task?\\nInput\\nThere is only a single test case per input file.\\nThe first line of input contains two space separated integer numbers N and K denoting the size of the array and the number of the maximal sums you need to find.\\nThe following line contains N space separated integer numbers denoting the array A.\\nOutput\\nOutput K space separated integers where the ith integer denotes the ith element of L.\\nConstraints\\n1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 105\\n1 \\xe2\\x89\\xa4 K \\xe2\\x89\\xa4 min(N*(N+1)\/2, 105)\\n1 \\xe2\\x89\\xa4 Ai \\xe2\\x89\\xa4 109\\nSubtasks\\nSubtask 1 (47 pts) : 1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 1000, 1 \\xe2\\x89\\xa4 K \\xe2\\x89\\xa4 min{N*(N+1)\/2, 105}\\nSubtask 2 (53 pts) : 1 \\xe2\\x89\\xa4 N \\xe2\\x89\\xa4 105, 1 \\xe2\\x89\\xa4 K \\xe2\\x89\\xa4 min{N*(N+1)\/2, 105}\\nExample\\nInput 1\\n3 4\\n1 3 4\\nOutput 1\\n8 7 4 4\\nInput 2\\n3 3\\n10 2 7\\nOutput 2\\n19 12 10\\nExplanation\\nTest 1:\\nThe first 4 elements of it are [8, 7, 4, 4].'",
        "486": "b'ABC-Strings\\nRead problems statements in Mandarin Chinese and Russian as well.\\nMike likes strings. He is also interested in algorithms. A few days ago he discovered for himself a very nice problem:\\nYou are given an AB-string S. You need to count the number of substrings of S, which have an equal number of \\'A\\'-s and \\'B\\'-s.\\nDo you know how to solve it? Good. Mike will make the problem a little bit more difficult for you.\\nYou are given an ABC-string S. You need to count the number of substrings of S, which have an equal number of \\'A\\'-s, \\'B\\'-s and \\'C\\'-s.\\nA string is called AB-string if it doesn\\'t contain any symbols except \\'A\\' or \\'B\\'. A string is called ABC-string if it doesn\\'t contain any symbols except \\'A\\', \\'B\\' or \\'C\\'.\\nInput\\nThe first line of the input contains an ABC-string S.\\nOutput\\nYour output should contain the only integer, denoting the number of substrings of S, which have an equal number of \\'A\\'-s, \\'B\\'-s and \\'C\\'-s.\\nThe answer can go above a 32-bit integer. Please, use 64-bit integers for storing and processing data.\\nConstraints\\n1 \\xe2\\x89\\xa4 |S| \\xe2\\x89\\xa4 1 000 000; where |S| denotes the length of the given ABC-string.\\nExample\\nInput:\\nABACABA\\nOutput:\\n2\\nExplanation\\nIn the example you should count S[2..4] = \"BAC\" and S[4..6] = \"CAB\".'",
        "487": "b\"Saving a gift of love\\nRead problems statements in Mandarin Chinese and Russian.\\nSuraj, the Chief Prankster is back in action now and this time he has stolen the valentine's day gift given by Ashi (the love of Chef) to the Chef and ran away with it to Byteland.\\nByteland is a not a regular place like Chef's town. The safest way from Chef's town to Byteland is through the path of tasty dishes. The path is named so because there are magical tasty dishes which appear to the traveler that no one can resist eating. Also, Suraj has added a strong sleep potion to each of the dish on this path to stop anyone from following him.\\nKnowing the devilish nature of Suraj, Ashi is concerned about the Chef and has asked all of Chef's town people to help. The distance from Chef's town to Byteland through the the path of tasty dishes is X units. They have the location where the magic dishes are and how many people are required to eat it completely. Anyone who eats a dish would go to a long sleep and won't be able to continue. They have the information about the tribal clans that live along the the path of tasty dishes who can be of real help in this journey.\\nThe journey Chef and his friends can be described as follows: There is a total of B dishes on the path of tasty dishes. Each dish is located at some distance from Chef's town denoted by xi for the ith dish ( xi-1 < xi). To minimize the number of friends Chef has to leave behind, all of them have decided that exactly yi of them will eat the ith dish, which is the required number of people needed to finish it completely. Also, there are a total of C tribal chef clans, each with their own population and location on the path that Chef and his friends will meet on their way to Byteland. They know that for some clan (say i), they are located at a distance of pi ( pi-1 < pi) from Chef's town with a population of ri. And if a group of at least qi men approaches them, they would be able to convince them to join their forces against Suraj.\\nGiven the information about all this, help the Chef to find out the minimum size of the group (including him and his friends) he should start with to reach Byteland and get back Ashi's gift from Suraj.\\nInput\\nThe first line of the input contains an integer T denoting the number of test cases. Each test case contains three lines which are as follows:\\nFirst line of each test case contains X, the distance of Byteland from Chef's town.\\nNext line contains an integer B, the number of dishes on the path of tasty dishes. Then follows B pairs of space separated integers of the form xi yi, where xi yi are as defined above for the ith dish. Next line contains an integer C, followed C space separated triplets of integers pi qi ri as defined above.\\nOutput\\nFor each test case, print the minimum size of the group (including Chef) that is needed to reach Byteland.\\nConstraints\\n1 \\xe2\\x89\\xa4 T \\xe2\\x89\\xa4 10\\n1 \\xe2\\x89\\xa4 X \\xe2\\x89\\xa4 109\\n1 \\xe2\\x89\\xa4 B \\xe2\\x89\\xa4 10000\\nConstraints on C\\nSubproblem 1 (25 points): C = 0\\nSubproblem 2 (75 points): 1 \\xe2\\x89\\xa4 C \\xe2\\x89\\xa4 10000\\n1 \\xe2\\x89\\xa4 xi < X, xi < xi+1\\n1 \\xe2\\x89\\xa4 pi < X, pi < pi+1\\n1 \\xe2\\x89\\xa4 yi \\xe2\\x89\\xa4 1014\\n1 \\xe2\\x89\\xa4 qi \\xe2\\x89\\xa4 1014\\n1 \\xe2\\x89\\xa4 ri \\xe2\\x89\\xa4 1014\\nAll the positions, of the tasty dishes and tribal clans are distinct.\\nSample 1:\\nInput\\nOutput\\n3\\n10\\n2 1 3 8 1\\n0\\n10\\n2 1 3 8 5\\n0\\n10\\n2 2 3 8 5\\n3 1 2 1 4 3 2 9 1 1\\n5\\n9\\n6\\nExplanation:\\nExample case 1. In the first case, there are no tribal clans, and two dishes, one which needs to be eaten by 3 chefs on their way and one to be eaten by 1 chef. Hence, we have to start with atleast 5 people in total to pass the path of tasty dishes.\\nExample case 2. Similar as Example Case 1.\\nExample case 3. In this case, if we start with 5 Chefs. At point 1, we have more than or equal to 2 chefs, hence the tribal clan of size 1 adds to the Chef's party and now they have size of 6. At position 2, three of them would be left behind eating a dish, leaving 3 of them to go ahead. At position 4, since the size is exactly 3, the tribal clan joins the chef's party making it of size 5. At position 8, all 5 of them will stop to eat the dish and none would go ahead. Similarly, if we start with 6, one of them would be able to pass position 8 and reach position 9, where it will also add one of the tribal clans to its party and reach Byteland.\"",
        "488": "b\"Longest Subarray\\nYou are given an array\\nA of length\\nN.\\nFind the maximum length of any subarray of\\nA, such that, the bitwise OR of all the elements of the subarray is equal to the bitwise OR of the remaining elements of the array.\\nReport\\n\\xe2\\x88\\x921 if no such subarray exists.\\nNote:\\nA subarray is formed by deleting some (possibly zero) elements from the beginning of the array and some (possibly zero) elements from the end of the array.\\nThe bitwise OR of an empty array is considered to be\\n0.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the length of the array\\nA.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nrepresenting the array\\nA.\\nOutput Format\\nFor each test case, output on a new line, the length of longest subarray such that the bitwise OR of all elements of the subarray is equal to the bitwise OR of the remaining elements of the array, or output\\n\\xe2\\x88\\x921 if no such subarray exists.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa45\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n<2\\n30\\nThe sum of\\nN over all test cases won't exceed\\n5\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n3\\n1 2 4\\n3\\n1 3 2\\n4\\n2 3 4 7\\n-1\\n1\\n3\\nExplanation:\\nTest case\\n1: For no subarray of\\nA, the bitwise OR of the elements of the subarray equals the bitwise OR of the remaining elements.\\nTest case\\n2: Consider the subarray\\n[3] having length\\n1. The bitwise OR of the subarray is\\n3 and the bitwise OR of the remaining elements of the array is\\n1\\xe2\\x88\\xa32=3. Thus, the bitwise OR of all elements of the subarray is equal to the bitwise OR of the remaining elements of the array.\\nTest case\\n3: Consider the subarray\\n[2,3,4] having length\\n3. The bitwise OR of the subarray is\\n2\\xe2\\x88\\xa33\\xe2\\x88\\xa34=7 and the bitwise OR of the remaining elements of the array is\\n7. Thus, the bitwise OR of all elements of the subarray is equal to the bitwise OR of the remaining elements of the array.\"",
        "489": "b'Chroma Swap\\nYou have two arrays\\nA=A\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nand\\nB=B\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nN\\n. Each of these elements also has a color associated with them, which is an integer. This is denoted by the arrays\\nColorA\\n1\\n,ColorA\\n2\\n,\\xe2\\x80\\xa6,ColorA\\nN\\n, and\\nColorB\\n1\\n,ColorB\\n2\\n,\\xe2\\x80\\xa6,ColorB\\nN\\n.\\nIn a single operation, you can swap any element of array\\nA with any element of array\\nB, if they have the same color.\\nYour goal is to do as many operations as you want, and eventually have the elements in array\\nA be in non-decreasing order. That is, after you are done with the operations, you want\\nA\\n1\\n\\xe2\\x89\\xa4A\\n2\\n\\xe2\\x89\\xa4\\xe2\\x80\\xa6\\xe2\\x89\\xa4A\\nN\\n.\\nOutput \"Yes\" if this is possible to do so, and \"No\" otherwise.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of five lines of input.\\nThe first line of each test case contains a single integer\\nN, denoting the size of the arrays.\\nThe next line has\\nN integers:\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nThe next line has\\nN integers:\\nColorA\\n1\\n,ColorA\\n2\\n,\\xe2\\x80\\xa6,ColorA\\nN\\nThe next line has\\nN integers:\\nB\\n1\\n,B\\n2\\n,\\xe2\\x80\\xa6,B\\nN\\nThe next line has\\nN integers:\\nColorB\\n1\\n,ColorB\\n2\\n,\\xe2\\x80\\xa6,ColorB\\nN\\nOutput Format\\nFor each testcase, in a new line, output \"Yes\" if it is possible to end up with the array\\nA having elements in non-decreasing order. Else, print \"No\".\\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n,B\\ni\\n\\xe2\\x89\\xa410\\n9\\n0\\xe2\\x89\\xa4ColorA\\ni\\n,ColorB\\ni\\n\\xe2\\x89\\xa42N\\nThe sum of\\nN over all test cases won\\'t exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n2 \\n3 2\\n1 2 \\n1 2 \\n1 1\\n1\\n13\\n1\\n23\\n1\\n2\\n2 1 \\n2 1 \\n2 1\\n2 1\\nYes\\nYes\\nNo\\nExplanation:\\nTestcase 1: The given arrays are:\\nA=[3,2]\\nColorA=[1,2]\\nB=[1,2]\\nColorB=[1,1]\\nA\\n1\\nand\\nB\\n1\\nhave the same color (\\n1). So, we can swap them, and now we have the arrays as:\\nA=[1,2]\\nB=[3,2]\\nNow, array\\nA is sorted in non-decreasing order. So, it is possible to achieve this, and hence the answer is \"Yes\".\\nTestcase 2: The given arrays are:\\nA=[13]\\nColorA=[1]\\nB=[23]\\nColorB=[1]\\nWe see that the array\\nA is already sorted. Hence, the answer is \"Yes\".\\nTestcase 3: The given arrays are:\\nA=[2,1]\\nColorA=[2,1]\\nB=[2,1]\\nColorB=[2,1]\\nWe see that no matter how many operations we do, the two arrays will remain the same, and\\nA can never be sorted. Hence the answer is \"No\".'",
        "490": "b\"Search for 404\\nOm has a string\\nS consisting of characters\\n\\xe2\\x88\\x97,\\n4, and\\n0 only.\\nThe character\\n\\xe2\\x88\\x97 can be replaced by either\\n4 or\\n0.\\nOm wants to count the total number of subsequences of\\n404 present in all the possible strings generated after replacing\\n\\xe2\\x88\\x97.\\nAs the number can be huge, you must output the number modulo\\n10\\n9\\n+7.\\nFor example, if the given string is\\nS=\\n4\\xe2\\x88\\x974\\xe2\\x88\\x97, the possible strings after replacing\\n\\xe2\\x88\\x97 are:\\n4040: Only one subsequence of\\n404 is present, that is\\nS\\n1\\nS\\n2\\nS\\n3\\n.\\n4044: Two subsequences of\\n404 are present, that are\\nS\\n1\\nS\\n2\\nS\\n3\\nand\\nS\\n1\\nS\\n2\\nS\\n4\\n.\\n4440: No subsequence of\\n404 is present.\\n4444: No subsequence of\\n404 is present.\\nThus, total number of\\n404 subsequences present in all possible generated strings is\\n3.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 size of the given string.\\nThe second line has a string\\nS of size\\nN.\\nOutput Format\\nFor each test case, output the total number of subsequences of\\n404 present in all the possible strings generated after replacing\\n\\xe2\\x88\\x97.\\nAs the number can be huge, you must output the number modulo\\n10\\n9\\n+7.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\nS consists of\\n\\xe2\\x88\\x97,4, and\\n0 only.\\nThe sum of\\nN over all test cases won't exceed\\n10\\n6\\n.\\nSample 1:\\nInput\\nOutput\\n2\\n4\\n4*04\\n4\\n4*4*\\n4\\n3\\nExplanation:\\nTest case\\n1: All possible generated strings of\\n4\\xe2\\x88\\x9704 are:\\n4004: Two subsequences of\\n404 are present, that are\\nS\\n1\\nS\\n2\\nS\\n4\\nand\\nS\\n1\\nS\\n3\\nS\\n4\\n.\\n4404: Two subsequences of\\n404 are present, that are\\nS\\n1\\nS\\n3\\nS\\n4\\nand\\nS\\n2\\nS\\n3\\nS\\n4\\n.\\nThus, the total number of\\n404 subsequences present in all possible generated strings is\\n4.\\nTest case\\n2: Already explained in problem statement.\"",
        "491": "b'Alternating Diameter\\nChef stumbled upon\\nB black nodes and\\nW white nodes and now wants to construct a tree using them.\\nChef is bamboozled by the total number of trees that can be constructed using these nodes. To reduce this count, Chef considered only those trees which have at least one diameter that has alternating colors i.e. a black node is followed by a white node and a white node is followed by a black node.\\nHelp Chef in finding out the tree with the minimum possible diameter among all the trees that satisfies the above condition. If no tree satisfies the above conditions, print\\n\\xe2\\x88\\x921. If multiple trees satisfies the above condition, print any.\\nInput Format\\nThe first line contains a single integer\\nT - the number of test cases. Then the test cases follow.\\nThe first and only line of each test case contains two space separated integers\\nB,W representing the number of black and white nodes respectively.\\nOutput Format\\nIf a tree can be constructed that fulfils all the requirements then\\nIn the first line, output a string of length\\nB+W in which the\\ni\\nth\\ncharacter (1-based indexing) is either W or B denoting the colour of the\\ni\\nth\\nnode as black or white respectively.\\nIn the following\\nB+W\\xe2\\x88\\x921 lines, output two integers\\nU and\\nV denoting an edge between\\nU\\nth\\nand\\nV\\nth\\nnode.\\nIf no tree fulfils the requirements print -1 in a single line.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n0\\xe2\\x89\\xa4B,W\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4B+W\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n3\\n1 1\\n0 2\\n1 2\\nWB\\n2 1\\n-1\\nWBW\\n1 2\\n2 3\\nExplanation:\\nTest case\\n1: The tree has only one path between the nodes\\n1 and\\n2 which is the diameter and also alternating in color. The checker will handle multiple possible answers so you can also swap the colors of the node to achieve the same result.\\nTest case\\n2: There is only one tree possible and its diameter would consist of all white nodes only. Therefore there is no tree which satisfies the given conditions.'",
        "492": "b\"Spooky Sequences\\n\\xe2\\x80\\x9cI am not a witch. I\\xe2\\x80\\x99m your wife.\\xe2\\x80\\x9d\\n- Valerie, The Princess Bride\\nOnce upon a time, in a distant land, a mischievous witch spied on a group of people who were enjoying their time together.\\nEnveloped by a dark desire, she resolved to put an end to their merry gatherings and kill all\\nN people.\\nThere are\\nN people, and the witch knows that the\\ni-th of them has a strength of\\nA\\ni\\n.\\nThe witch also knows of\\nM friendships, each between two people. Friendship is transitive, that is, if\\nX and\\nY are friends and\\nY and\\nZ are friends, then\\nX and\\nZ are also friends.\\nThe witch wants to kill all these people in a particular sequence known as a spooky sequence.\\nA sequence\\nS is called a spooky sequence if it satisfies the following properties:\\nS contains\\nN distinct integers, each between\\n1 and\\nN.\\nThat is,\\nS is a linear order of the\\nN people.\\nFor any\\n1\\xe2\\x89\\xa4i<j\\xe2\\x89\\xa4N, if\\nS\\ni\\nand\\nS\\nj\\nare friends, then\\nA\\nS\\ni\\n\\xe2\\x89\\xa4A\\nS\\nj\\nshould hold.\\nThat is, for any two friends, one with strictly higher strength cannot appear earlier in the sequence than the other.\\nFind the total number of spooky sequences. The answer can be large, so print it modulo\\n10\\n9\\n+7.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains two space-separated integers\\nN and\\nM \\xe2\\x80\\x94 the number of people and number of friendships, respectively.\\nThe next\\nM lines describe the friendships. The\\ni-th of these\\nM lines contains two space-separated integers\\nu\\ni\\nand\\nv\\ni\\n, denoting a friendship between\\nu\\ni\\nand\\nv\\ni\\n.\\nThe last line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n\\xe2\\x80\\x94 the strengths of the people.\\nOutput Format\\nFor each test case, output on a new line the number of spooky sequences, modulo\\n10\\n9\\n+7.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n4\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n0\\xe2\\x89\\xa4M\\xe2\\x89\\xa4min(2\\xe2\\x8b\\x8510\\n5\\n,N\\xe2\\x8b\\x85(N\\xe2\\x88\\x921)\/2)\\n1\\xe2\\x89\\xa4u\\ni\\n,v\\ni\\n\\xe2\\x89\\xa4N\\nu\\ni\\n\\xee\\x80\\xa0\\n=v\\ni\\nfor each\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4M.\\nEach unordered pair\\n(u\\ni\\n,v\\ni\\n) appears at most once in a testcase.\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN over all test cases won't exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nThe sum of\\nM over all test cases won't exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n2\\n5 5\\n1 2\\n2 3\\n3 4\\n4 2\\n3 1\\n10 12 15 20 15\\n5 2\\n2 3\\n4 5\\n6 4 4 3 1\\n5\\n60\\nExplanation:\\nTest case\\n1: Each pair among\\n{1,2,3,4} are friends, while\\n5 is not friends with anyone else. Taking into account the strength condition for the group of\\n4, there are five spooky sequences:\\n[5,1,2,3,4]\\n[1,5,2,3,4]\\n[1,2,5,3,4]\\n[1,2,3,5,4]\\n[1,2,3,4,5]\\nTest case\\n2:\\n2 and\\n3 are friends,\\n4 and\\n5 are friends, and\\n1 is not a friend of anyone else.\\nSo, in any ordering:\\nA\\n2\\n=A\\n3\\n, so the order of\\n2 and\\n3 doesn't matter (even though they are friends).\\n4 should appear after\\n5, since\\nA\\n4\\n>A\\n5\\n.\\nThere are no further constraints.\\nIt can be verified that there are\\n60 sequences satisfying this.\"",
        "493": "b'XOR Sums\\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nYou are given a sequence of positive integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n. You should answer\\nQ queries. In each query:\\nYou are given a positive integer\\nM.\\nConsider all non-empty subsequences of\\nA with length\\n\\xe2\\x89\\xa4M. Recall that a subsequence is any sequence that can be created by deleting zero or more elements without changing the order of the remaining elements.\\nFor each of these subsequences, compute the bitwise XOR of its elements. Your task is to determine the sum of these values. Since this sum can be very large, compute it modulo\\n998,244,353.\\nInput\\nThe first line of the input contains a single integer\\nN.\\nThe second line contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nThe third line contains a single integer\\nQ.\\nQ lines follow. Each of these lines contains a single integer\\nM describing a query.\\nOutput\\nFor each query, print a single line containing one integer \\xe2\\x80\\x95 the sum of bitwise XORs for all subsequences of\\nA with length\\n\\xe2\\x89\\xa4M, modulo\\n998,244,353.\\nConstraints\\n1\\xe2\\x89\\xa4N,Q\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n<2\\n30\\nfor each valid\\ni\\n1\\xe2\\x89\\xa4M\\xe2\\x89\\xa4N\\nSubtask\\nSubtask #1 (10 points):\\n1\\xe2\\x89\\xa4N,Q\\xe2\\x89\\xa41,000\\nSubtask #2 (90 points): original constraints\\nSample 1:\\nInput\\nOutput\\n4\\n1 3 5 2\\n2\\n1\\n2\\n11\\n34\\nExplanation:\\nIn the first query, the answer is just the sum of elements of\\nA (modulo\\n998,244,353), which is\\n1+3+5+2=11.\\nIn the second query, the answer is the sum of bitwise XORs for all subsequences with length\\n1 or\\n2, which is\\n1+3+5+2+(1\\xe2\\x8a\\x953)+(1\\xe2\\x8a\\x955)+(1\\xe2\\x8a\\x952)+(3\\xe2\\x8a\\x955)+(3\\xe2\\x8a\\x952)+(5\\xe2\\x8a\\x952)=34.'",
        "494": "b'K-Subarrays\\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\\nYou are given two integers\\nN and\\nK, and an array\\nA of\\nN integers. You have to choose\\nK disjoint non-empty subarrays such that the score is maximized.\\nThe score is calculated as follows:\\nScore=\\ni=1\\n\\xe2\\x88\\x91\\nK\\nSum[i]\\xe2\\x8b\\x85i,\\nwhere\\nSum[i] denotes sum of elements of\\ni-th subarray. By the\\ni-th subarray, we mean the\\ni-th one in the order from left to right.\\nFind the maximum score that can be achieved.\\nNote: The subarrays are not required to cover the whole array. It is allowed for some elements of\\nA to belong to none of the subarrays.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains two space-separated integers\\nN and\\nK.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n.\\nOutput\\nFor each test case, print a single line containing one integer \\xe2\\x80\\x95 the maximum score.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa4min(100,N)\\n\\xe2\\x88\\x9210\\n6\\n\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n6\\nThe sum of\\nN over all test cases does not exceed\\n10\\n5\\nSubtasks\\nSubtask #1 (15 points):\\nK=1\\nSubtask #2 (35 points):\\nK=2\\nSubtask #3 (50 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n5 2\\n1 2 -1 3 1\\n5 2\\n-1 2 11 -23 12\\n11\\n37\\nExplanation:\\nTest Case 1: One way to choose\\n2 disjoint non-empty subarrays is:\\nS\\n1\\n=[1,2] and\\nS\\n2\\n=[3,1]\\nThe score is\\n3\\xe2\\x8b\\x851+4\\xe2\\x8b\\x852=11, which is the maximum possible.\\nTest Case 2: One way to choose\\n2 disjoint non-empty subarrays is:\\nS\\n1\\n=[2,11] and\\nS\\n2\\n=[12]\\nThe score is\\n13\\xe2\\x8b\\x851+12\\xe2\\x8b\\x852=37, which is the maximum possible.'",
        "495": "b\"Chefs Favourite Function\\nChef's new friend hErd gave him two functions\\nf and\\ng.\\nThe function\\nf is defined over\\nx\\n(x\\xe2\\x89\\xa51) as:\\nf(x)=\\n\\xe2\\x8e\\xa9\\n\\xe2\\x8e\\xa8\\n\\xe2\\x8e\\xa7\\n0,\\nf(\\n2\\nx\\n)+1,\\nf(\\xe2\\x8c\\x8a\\n2\\nx\\n\\xe2\\x8c\\x8b),\\nif x=1\\nif x is even\\nif x is odd\\nThe function\\ng is defined over\\nx\\n(x\\xe2\\x89\\xa51) as:\\ng(x)=\\n\\xe2\\x8e\\xa9\\n\\xe2\\x8e\\xa8\\n\\xe2\\x8e\\xa7\\n1,\\n2\\xe2\\x8b\\x85g(\\n2\\nx\\n)+1,\\n2\\xe2\\x8b\\x85g(\\xe2\\x8c\\x8a\\n2\\nx\\n\\xe2\\x8c\\x8b),\\nif x=1\\nif x is even\\nif x is odd\\nwhere\\n\\xe2\\x8c\\x8az\\xe2\\x8c\\x8b, denotes the greatest integer less than or equal to\\nz.\\nHe also gave Chef two integers\\nL and\\nR. Chef has to find the maximum value of\\nf(x)+g(x) for\\nL\\xe2\\x89\\xa4x\\xe2\\x89\\xa4R.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nThe only line of each test case contains two space-separated integers\\nL and\\nR, as mentioned in the statement.\\nOutput Format\\nFor each test case, output on a new line the maximum value of\\nf(x)+g(x) for\\nL\\xe2\\x89\\xa4x\\xe2\\x89\\xa4R.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4L\\xe2\\x89\\xa4R\\xe2\\x89\\xa410\\n9\\nSample 1:\\nInput\\nOutput\\n3\\n1 1\\n1 2\\n1 20\\n1\\n4\\n35\\nExplanation:\\nTest case\\n1:\\nf(1)=0 and\\ng(1)=1. Hence,\\nf(x)+g(x)=1.\\nTest case\\n2: There are\\n2 possible values of\\nx.\\nx=1:\\nf(1)+g(1)=1\\nx=2:\\nf(2)+g(2)=(f(1)+1)+(2\\xe2\\x8b\\x85g(1)+1)=1+3=4.\\nHence the maximum value of\\nf(x)+g(x)=4.\"",
        "496": "b'Merging Binary Strings\\nYou have two binary strings\\nA and\\nB, both of length\\nN. You have to merge both the binary strings to form a new binary string\\nC of length\\n2\\xe2\\x8b\\x85N. The relative order of characters in the original binary strings\\nA and\\nB should not change in the binary string\\nC.\\nFor example, if\\nA=01011 and\\nB=10100, one possible way to merge them to form\\nC is:\\nC=0101101100.\\nMinimize the number of inversions in the merged binary string\\nC.\\nAs a reminder, a pair of indices\\n(i,j) is an inversion for binary string\\nC if and only if\\n1\\xe2\\x89\\xa4i<j\\xe2\\x89\\xa4\\xe2\\x88\\xa3C\\xe2\\x88\\xa3,\\nC\\ni\\n=1 and\\nC\\nj\\n=0.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains a single integer\\nN \\xe2\\x80\\x94 the length of the binary strings\\nA and\\nB.\\nThe second line of each test case contains the binary string\\nA.\\nThe third line of each test case contains the binary string\\nB.\\nOutput Format\\nFor each test case, output a single line containing the minimum number of inversions in the merged binary string\\nC.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa41000\\nIt is guaranteed that the sum of\\nN over all test cases does not exceed\\n2000.\\n\\xe2\\x88\\xa3A\\xe2\\x88\\xa3=\\xe2\\x88\\xa3B\\xe2\\x88\\xa3=N\\nA and\\nB are binary strings, i.e, contain only\\n0 and\\n1.\\nSample 1:\\nInput\\nOutput\\n3\\n4\\n1010\\n0101\\n5\\n10010\\n11001\\n5\\n00001\\n11110\\n6\\n12\\n4\\nExplanation:\\nTest Case\\n1:\\nA=1010 and\\nB=0101. One optimal\\nC is\\n01010101. The\\n6 inversions in this\\nC are\\n{(2,3),(2,5),(2,7),(4,5),(4,7),(6,7)}.\\nTest Case\\n2:\\nA=10010 and\\nB=11001. One optimal\\nC is\\n1001100101.\\nTest Case\\n3:\\nA=00001 and\\nB=11110. One optimal\\nC is\\n0000111101.'",
        "497": "b'Red Green Grids\\nThere is an empty grid (all cells are colored white) of\\nN rows and\\nM columns.\\nChef can fill each cell with either RED or GREEN color.\\nChef defines a valid path as a path of cells starting from\\n(1,1) and ending at\\n(N,M), where, Chef moves either right or down by\\n1 cell each time.\\nFor a particular grid, Chef defines the score of the grid as the number of valid paths containing equal number of RED and GREEN cells.\\nFind the sum of scores of all possible colored grids containing\\nN rows and\\nM columns.\\nSince the answer can be large, output it modulo\\n998244353.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two integers\\nN and\\nM - denoting the dimensions of the grid.\\nOutput Format\\nFor each test case, output the sum of scores of all possible colored grids containing\\nN rows and\\nM columns, modulo\\n998244353.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa41000\\n1\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa41000\\nSample 1:\\nInput\\nOutput\\n3\\n1 1\\n1 2\\n2 3\\n0\\n2\\n72\\nExplanation:\\nTest case\\n1: There are\\n2 possible coloured grids of size\\n1\\xc3\\x971. In the first grid, the one and only cell is colored RED. In the second grid, the one and only cell is colored GREEN. Neither of the grids have a valid path with equal number of red and green cells. Thus, score of each grid is\\n0.\\nTest case\\n2: There are\\n4 possible coloured grids of the given dimension:\\nFor grids\\n1 and\\n4, the scores are\\n0 as there are no valid paths with equal red and green cells. Grids\\n2 and\\n3 have score\\n1 each. The valid path with equal red and green cells is\\n(1,1)\\xe2\\x86\\x92(1,2) in both the grids.\\nThus, the sum of scores of all possible coloured grids is\\n2.'",
        "498": "b'Palindrome In Making\\nJJ has an array\\nA of length\\nN. He can perform the following operation on\\nA:\\nSelect any\\nL,\\nR (\\n1\\xe2\\x89\\xa4L\\xe2\\x89\\xa4R\\xe2\\x89\\xa4N) and for each\\ni such that\\nL\\xe2\\x89\\xa4i\\xe2\\x89\\xa4R, set\\nA\\ni\\n:=A\\ni\\n+1.\\nJJ wants to make\\nA palindromic. Find the minimum number of moves to do so.\\nNote: An array is called a palindrome if it reads the same backwards and forwards, for e.g.\\n[1,3,3,1] and\\n[6,2,6] are palindromic.\\nInput Format\\nThe first line contains a single integer\\nT \\xe2\\x80\\x94 the number of test cases. Then the test cases follow.\\nThe first line of each test case contains an integer\\nN \\xe2\\x80\\x94 the size of the array\\nA.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\ndenoting the array\\nA.\\nOutput Format\\nFor each test case, output the minimum number of moves to make\\nA palindromic.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nSum of\\nN over all test cases does not exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n6\\n2 6 4 3 4 1\\n2\\n1 10\\n3\\n1 10 1\\n2\\n9\\n0\\nExplanation:\\nTest Case 1: We can perform the following operations:\\n[2,6,\\n4,3,4,1\\n]\\nL=3,R=6\\n[2,6,5,4,5,2]\\n[2,6,5,\\n4,5\\n,2]\\nL=4,R=5\\n[2,6,5,5,6,2]\\nTest Case 2: We perform the operation on\\n(L=1,R=1)\\n9 times after which array becomes\\n[10,10].\\nTest Case 3:\\nA is already a palindrome.'",
        "499": "b'Make that Array!\\nChef is given two arrays\\nA and\\nB, each having\\nN elements.\\nIn one move, Chef can choose an index\\ni\\n(1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N\\xe2\\x88\\x921), get\\n(A\\ni\\n\\xe2\\x88\\x92A\\ni+1\\n) points, and then swap\\nA\\ni\\nand\\nA\\ni+1\\n.\\nFor example: If Chef has the array -\\n[10,7,5] and Chef chooses index\\n1 during his move, he will get\\n10\\xe2\\x88\\x927=3 points and the new array will become\\n[7,10,5]\\nCan you help Chef in finding the maximum number of points he can get while converting the array\\nA into array\\nB?\\nNote: It is guaranteed in the input that there exists a sequence of moves which can convert array\\nA into\\nB.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of testcases. The description of the\\nT testcases follows.\\nThe first line of each test case contains a single integer\\nN denoting the number of elements in\\nA and\\nB.\\nThe second line of each test case contains\\nN space separated integers\\nA\\n1\\n,A\\n2\\n,...,A\\nN\\n.\\nThe third line of each test case contains\\nN space separated integers\\nB\\n1\\n,B\\n2\\n,...,B\\nN\\n.\\nOutput Format\\nFor each test case, print a single line containing one integer, which is the maximum number of points that Chef can get while converting the array\\nA into array\\nB\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa45\\xe2\\x8b\\x8510\\n4\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa45\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4B\\ni\\n\\xe2\\x89\\xa410\\n5\\nThe sum of\\nN over all test cases does not exceed\\n5\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n2\\n1 2\\n2 1\\n3\\n3 2 1\\n1 2 3\\n3\\n1 2 3\\n1 2 3\\n-1\\n4\\n0\\nExplanation:\\nTest Case\\n1: Chef can choose\\ni=1 in the first move, get\\n1\\xe2\\x88\\x922=\\xe2\\x88\\x921 points and swap\\nA\\n1\\nand\\nA\\n2\\n. After this move,\\nA is converted into\\nB. We can prove that there exists no other sequence of moves which can result in higher score while converting\\nA into\\nB.\\nTest Case\\n2: One possible sequence of moves is the following:\\nChoose\\ni=2. Total points\\n=1, and\\nA will become\\n[3,1,2].\\nChoose\\ni=1. Total points\\n=1+2, and\\nA will become\\n[1,3,2].\\nChoose\\ni=2. Total points\\n=1+2+1, and\\nA will become\\n[1,2,3].\\nThere are other possible sequences of moves which can result in total\\n4 points, but no such sequence exists which can result in more than\\n4 points, and simultaneously convert\\nA into\\nB.'",
        "500": "b\"Ancient Berland Roads\\nRead problems statements in Mandarin Chinese , Russian and Vietnamese as well.\\nIn Ancient Berland, there were N towns, along with M bidirectional roads connecting them. With time, some roads became unusable, and nobody repaired them.\\nAs a person who is fond of Ancient Berland history, you now want to undertake a small research study. For this purpose, you want to write a program capable of processing the following kinds of queries:\\nD K : meaning that the road numbered K in the input became unusable. The road numbers are 1-indexed.\\nP A x : meaning that the population of the Ath town became x.\\nLet's call a subset of towns a region if it is possible to get from each town in the subset to every other town in the subset by the usable (those, which haven't already been destroyed) roads, possibly, via some intermediary cities of this subset. The population of the region is, then, the sum of populations of all the towns in the region.\\nYou are given the initial road system, the initial population in each town and Q queries, each being one of two types above. Your task is to maintain the size of the most populated region after each query.\\nInput\\nThe first line of each test case contains three space-separated integers \\xe2\\x80\\x94 N, M, and Q \\xe2\\x80\\x94 denoting the number of cities, the number of roads, and the number of queries, respectively.\\nThe following line contains N space-separated integers, the ith of which denotes the initial population of the ith city.\\nThe jth of the following M lines contains a pair of space-separated integers \\xe2\\x80\\x94 Xj, Yj \\xe2\\x80\\x94 denoting that there is a bidirectional road connecting the cities numbered Xj and Yj.\\nEach of the following Q lines describes a query in one of the forms described earlier.\\nOutput\\nOutput Q lines. On the ith line, output the size of the most populated region after performing i queries.\\nConstraints\\n1 \\xe2\\x89\\xa4 Xj, Yj \\xe2\\x89\\xa4 N\\nRoads' numbers are 1-indexed.\\nThere is no road that gets removed twice or more.\\n1 \\xe2\\x89\\xa4 Pi \\xe2\\x89\\xa4 105\\nSubtask 1 (30 points) : 1 \\xe2\\x89\\xa4 N, M, Q \\xe2\\x89\\xa4 103\\nSubtask 2 (70 points) : 1 \\xe2\\x89\\xa4 N, M, Q \\xe2\\x89\\xa4 5 \\xc3\\x97 105\\nExample\\nInput:\\n3 3 6\\n1 2 3\\n1 2\\n2 3\\n3 1\\nP 1 3\\nD 1\\nP 2 3\\nD 2\\nP 3 10\\nD 3\\nOutput:\\n8\\n8\\n9\\n6\\n13\\n10\\nExplanation\\nAfter the first query, the populations are (3, 2, 3) and the most populated region is {1, 2, 3}.\\nAfter the second query the populations and the regions remain the same.\\nAfter the third query the populations are (3, 3, 3) and the most populated region is again {1, 2, 3}.\\nAfter the fourth query the populations remain the same, but we have two regions: {1, 3} and {2}. The most populated region is {1, 3}.\\nAfter the fifth query the populations become equal to (3, 3, 10) respectively, and the most populated region is again {1, 3}.\\nAfter the last query we have populations the same, but now every city forms it own separate region, and the most populated region is region {3}.\"",
        "501": "b\"Potato to Gold\\nYou are given an array\\nA of\\nN integers and an integer\\nK. Find the number of (possibly empty) subsequences of\\nA such that no two elements in the subsequence have a sum that is divisible by\\nK.\\nTwo subsequences are considered distinct if they are made up of different indices. For example,\\nA=[1,2,1,2] contains\\n[1,2] as a subsequence three times, and all\\n3 must be counted separately in the answer.\\nMore formally,\\nLet\\nS={x\\n1\\n,x\\n2\\n,\\xe2\\x80\\xa6,x\\nm\\n} be a (possibly empty) set such that\\n1\\xe2\\x89\\xa4x\\n1\\n<x\\n2\\n<\\xe2\\x80\\xa6<x\\nm\\n\\xe2\\x89\\xa4N.\\nS is said to be good if\\nA\\nx\\ni\\n+A\\nx\\nj\\nis not divisible by\\nK for any\\n1\\xe2\\x89\\xa4i<j\\xe2\\x89\\xa4m. In particular, any subsequence of size\\n\\xe2\\x89\\xa41 is good.\\nYour task is to count the number of good sets.\\nSince the answer can be very large, print it modulo\\n10\\n9\\n+7.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains two space separated integers,\\nN and\\nK.\\nThe second line of each test case contains\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\nOutput Format\\nFor each test case, output on a new line number of subsequences satisfying the condition, modulo\\n10\\n9\\n+7.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa45\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN and\\nK over all test cases won't exceed\\n10\\n6\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n3 4\\n4 5 7\\n5 4\\n1 2 3 4 5\\n5 3\\n1 2 3 4 5\\n6\\n20\\n14\\nExplanation:\\nTest case\\n1: Here,\\nK=4. There are\\n8 subsequences of the array, and they are considered as follows:\\n[]: the empty subsequence. It satisfies the condition.\\n[4],[5],[7]: size\\n1 subsequences, all are good.\\n[4,5]: good, because\\n4+5=9 is not a multiple of\\n4\\n[4,7]: good, because\\n4+7=11 is not a multiple of\\n4\\n[5,7]: not good, because\\n5+7=12 is a multiple of\\n4.\\n[4,5,7]: not good, again because it contains\\n5 and\\n7.\\nSo,\\n6 of the subsequences are good.\"",
        "502": "b'Chef and Queries\\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\\nAs part of his daily job, Chef has to solve problems involving sets. Till now, Chef has been using inefficient methods to solve his set related problem, wasting a lot of his precious time. He has agreed to pay you a lot of money for solving the following problem for him efficiently.\\nFirst, Chef needs to perform Q operations on a set. Each operation is either:\\n1. Add a number to the set (if this number is NOT already present in the set).\\n2. Erase a number from the set (if this number exists in the set).\\nThen, he needs to find the sum of all elements of the set after performing these Q queries. Your job is to find this sum for him quickly.\\nInput\\nThe first line of input contains four integers \\xe2\\x80\\x94 Q, S1, A, B. S1 is the first number in the operations. A and B are special constants explained later.\\nEvery operation Si is represented by a single integer. If Si is odd, then it represents the first operation, otherwise the second type, and in both of them the integer you have to add\/delete equals [Si \/ 2], where [] is the greatest integer (or floor) function.\\nSi = (A*Si-1 + B) mod 232 when i > 1.\\nNote: In this problem, the time limit is very tight. Using built-in data structures, such as set\/unordered_set in C++ or TreeSet\/HashSet in Java, may lead to a Time Limit Exceed verdict.\\nOutput\\nOutput a single line containing a single integer \\xe2\\x80\\x94 sum of elements in the set after Q queries.\\nConstraints\\n1 \\xe2\\x89\\xa4 Q \\xe2\\x89\\xa4 107\\n1 \\xe2\\x89\\xa4 S1, A, B \\xe2\\x89\\xa4 109\\nExample\\nInput:\\n5 1 1 1\\n\\nOutput:\\n3\\nInput:\\n10000000 777777777 777777777 777777777\\n\\nOutput:\\n5362358669068782\\nExplanation:\\nThe sequence {Si} is 1, 2, 3, 4, 5:\\nOperation 1, 1 mod 2 = 1, add number [1 \/ 2] = 0 to set, sum is 0.\\nOperation 2, 2 mod 2 = 0, erase number [2 \/ 2] = 1 from set, 1 is not in set, so nothing happens, sum is 0.\\nOperation 3, 3 mod 2 = 1, add number [3 \/ 2] = 1 to set, sum is 1.\\nOperation 4, 4 mod 2 = 0, erase number [4 \/ 2] = 2 from set, 2 is not in set, so nothing happens, sum is 1.\\nOperation 5, 5 mod 2 = 1, add number [5 \/ 2] = 2 to set, sum is 3.'",
        "503": "b\"Candies\\nChef gave you an infinite number of candies to sell. There are\\nN customers, and the budget of the\\ni\\nth\\ncustomer is\\nA\\ni\\nrupees, where\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4M.\\nYou have to choose a price\\nP, to sell the candies, where\\n1\\xe2\\x89\\xa4P\\xe2\\x89\\xa4M.\\nThe\\ni\\nth\\ncustomer will buy exactly\\n\\xe2\\x8c\\x8a\\nP\\nA\\ni\\n\\xe2\\x8c\\x8b candies.\\nChef informed you that, for each candy you sell, he will reward you with\\nC\\nP\\nrupees, as a bonus. Find the maximum amount of bonus you can get.\\nNote:\\nWe are not interested in the profit from selling the candies (as it goes to Chef), but only the amount of bonus. Refer the samples and their explanations for better understanding.\\n\\xe2\\x8c\\x8ax\\xe2\\x8c\\x8b denotes the largest integer which is not greater than\\nx. For example,\\n\\xe2\\x8c\\x8a2.75\\xe2\\x8c\\x8b=2 and\\n\\xe2\\x8c\\x8a4\\xe2\\x8c\\x8b=4.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains two space-separated integers\\nN and\\nM, the number of customers and the upper limit on budget\/price.\\nThe second line contains\\nN integers -\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n, the budget of\\ni\\nth\\nperson.\\nThe third line contains\\nM integers -\\nC\\n1\\n,C\\n2\\n,\\xe2\\x80\\xa6,C\\nM\\n, the bonus you get per candy, if you set the price as\\ni.\\nOutput Format\\nFor each test case, output on a new line, the maximum amount of bonus you can get.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4M\\n1\\xe2\\x89\\xa4C\\nj\\n\\xe2\\x89\\xa410\\n6\\nThe elements of array\\nC are not necessarily non-decreasing.\\nThe sum of\\nN and\\nM over all test cases won't exceed\\n10\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n2\\n5 6\\n3 1 4 1 5\\n1 4 5 5 8 99\\n1 2\\n1\\n4 1\\n20\\n4\\nExplanation:\\nTest case\\n1:\\nIf we choose\\nP=1, the number of candies bought by each person is\\n[\\xe2\\x8c\\x8a\\n1\\n3\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n1\\n1\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n1\\n4\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n1\\n1\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n1\\n5\\n\\xe2\\x8c\\x8b]. Thus, our bonus is\\n(3+1+4+1+5)\\xe2\\x8b\\x851=14.\\nIf we choose\\nP=2, the number of candies bought by each person is\\n[\\xe2\\x8c\\x8a\\n2\\n3\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n2\\n1\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n2\\n4\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n2\\n1\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n2\\n5\\n\\xe2\\x8c\\x8b]. Thus our bonus is\\n(1+0+2+0+2)\\xe2\\x8b\\x854=20.\\nIf we choose\\nP=3, the number of candies bought by each person is\\n[\\xe2\\x8c\\x8a\\n3\\n3\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n3\\n1\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n3\\n4\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n3\\n1\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n3\\n5\\n\\xe2\\x8c\\x8b]. Thus our bonus is\\n(1+0+1+0+1)\\xe2\\x8b\\x855=15.\\nIf we choose\\nP=4, the number of candies bought by each person is\\n[\\xe2\\x8c\\x8a\\n4\\n3\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n4\\n1\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n4\\n4\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n4\\n1\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n4\\n5\\n\\xe2\\x8c\\x8b]. Thus our bonus is\\n(0+0+1+0+1)\\xe2\\x8b\\x855=10.\\nIf we choose\\nP=5, the number of candies bought by each person is\\n[\\xe2\\x8c\\x8a\\n5\\n3\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n5\\n1\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n5\\n4\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n5\\n1\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n5\\n5\\n\\xe2\\x8c\\x8b]. Thus our bonus is\\n(0+0+0+0+1)\\xe2\\x8b\\x858=8.\\nIf we choose\\nP=6, the number of candies bought by each person is\\n[\\xe2\\x8c\\x8a\\n6\\n3\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n6\\n1\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n6\\n4\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n6\\n1\\n\\xe2\\x8c\\x8b,\\xe2\\x8c\\x8a\\n6\\n5\\n\\xe2\\x8c\\x8b]. Thus our bonus is\\n(0+0+0+0+0)\\xe2\\x8b\\x8599=0.\\nThus, the answer is\\n20.\\nTest case\\n2:\\nIf we choose\\nP=1, the number of candies bought by each person is\\n[\\xe2\\x8c\\x8a\\n1\\n1\\n\\xe2\\x8c\\x8b]. Thus, our bonus is\\n1\\xe2\\x8b\\x854=4.\\nIf we choose\\nP=2, the number of candies bought by each person is\\n[\\xe2\\x8c\\x8a\\n2\\n1\\n\\xe2\\x8c\\x8b]. Thus, our bonus is\\n0\\xe2\\x8b\\x851=0.\\nThus, the answer is\\n4.\"",
        "504": "b\"Two Piles\\nYou are given\\nN pairs of integers. The\\ni-th pair is\\n(A\\ni\\n,B\\ni\\n).\\nYou also have two piles with you, both initially empty.\\nYou will perform the following process:\\nFor each\\ni from\\n1 to\\nN, choose exactly one of\\nA\\ni\\nor\\nB\\ni\\n.\\nThen, add the chosen integer to one of your two piles.\\nAt the end of the process, both piles must be non-empty (i.e, you should have added at least one integer to both).\\nThe value of a pile is defined to be its maximum element.\\nIf you make your choices optimally, find the minimum possible difference between the values of the piles.\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains a single integer\\nN \\xe2\\x80\\x94 the number of pairs.\\nThe next\\nN lines describe the pairs. The\\ni-th of these lines contains two space-separated integers\\nA\\ni\\nand\\nB\\ni\\n\\xe2\\x80\\x94 the elements of the\\ni-th pair.\\nOutput Format\\nFor each test case, output on a new line the minimum possible difference between the values of the piles.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n2\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4A\\ni\\n,B\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN over all test cases won't exceed\\n2\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n3\\n2\\n1 6\\n4 9\\n2\\n1 9\\n4 6\\n4\\n10 10\\n23 55\\n21 80\\n105 91\\n2\\n3\\n11\\nExplanation:\\nTest case\\n1: The pairs are\\n(1,6) and\\n(4,9).\\nChoose\\n6 from the first pair, and\\n4 from the second pair, and place them on different piles.\\nThe maximums are\\n6 and\\n4, and the difference between them is\\n\\xe2\\x88\\xa36\\xe2\\x88\\x924\\xe2\\x88\\xa3=2.\\nAchieving a smaller difference is not possible.\\nTest case\\n2: The pairs are\\n(1,9) and\\n(4,6).\\nChoose\\n1 from the first pair and\\n4 from the second pair and place them on different piles, for a difference of\\n3.\\nTest case\\n3: One optimal solution is:\\nFrom the first pair, place\\n10 on pile\\n1.\\nFrom the second pair, place\\n55 on pile\\n2.\\nFrom the third pair, place\\n80 on pile\\n2.\\nFrom the fourth pair, place\\n91 on pile\\n1.\\nThe difference between the maximums of the piles is\\n\\xe2\\x88\\xa380\\xe2\\x88\\x9291\\xe2\\x88\\xa3=11. This is the smallest possible difference.\"",
        "505": "b\"Ultimate Fencing\\nYou've recently come into possession of a rather nice piece of land, on which you'd like to build a house.\\nUnfortunately, one side of this land borders a forest, and you really don't want any dangerous animals showing up at your doorstep. Naturally, you decide to build a fence to keep them out.\\nBuilding a fence requires you to place fence posts first.\\nThe border can be thought of as a segment of length\\nM on the\\nx-axis, with its endpoints at\\nx=0 and\\nx=M. Initially, there are posts only at these two endpoints.\\nYou will place\\nN posts at distinct points along this border, one at a time. The\\ni-th of them will be placed at point\\nx=A\\ni\\n.\\nAfter each post is placed, you'd like to know: what's the longest empty segment (i.e, a segment without any posts) along the border?\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of two lines of input.\\nThe first line of each test case contains two space-separated integers\\nN and\\nM \\xe2\\x80\\x94 the number of fence posts and the length of the border.\\nThe second line will contain\\nN space-separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n\\xe2\\x80\\x94 the positions at which the posts are placed, in order.\\nOutput Format\\nFor each test case, output\\nN space-separated integers on a new line. The\\ni-th of them should denote the length of the longest empty segment after the first\\ni posts have been placed.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\nN<M\\n2\\xe2\\x89\\xa4M\\xe2\\x89\\xa410\\n9\\n1\\xe2\\x89\\xa4A\\ni\\n<M\\nAll the\\nA\\ni\\nvalues are distinct.\\nThe sum of\\nN across all tests won't exceed\\n2\\xe2\\x8b\\x8510\\n5\\nSample 1:\\nInput\\nOutput\\n3\\n2 5\\n2 4\\n4 5\\n4 3 2 1\\n4 25\\n10 12 5 19\\n3 2\\n4 3 2 1\\n15 13 13 7\\nExplanation:\\nTest case\\n1: The posts are placed as follows:\\nInitially, the posts are at\\n[0,5].\\nThe first post is placed at\\nx=2. The posts are at positions\\n[0,2,5].\\nThe largest empty segment is between points\\n2 and\\n5, with a length of\\n3.\\nThe second post is placed at\\nx=4. The posts are at positions\\n[0,2,4,5].\\nThe largest empty segment is of length\\n2, between\\n2 and\\n4 (and also between\\n0 and\\n2).\\nTest case\\n2: The posts are placed as follows:\\nThe first one is at\\nx=4, so the posts are at\\n[0,4,5]. The longest empty segment is between\\n0 and\\n4, of length\\n4.\\nThe second post is at\\nx=3, so the posts are at\\n[0,3,4,5]. The longest empty segment is between\\n0 and\\n3, of length\\n3.\\nThe third post is at\\nx=2. The longest empty segment is between\\n0 and\\n2, of length\\n2.\\nThe fourth post is at\\nx=1. The longest empty segment is of length\\n1.\"",
        "506": "b'A Special Tree\\nYou are given a tree with\\nN nodes (numbered\\n1 through\\nN). There are\\nK special nodes\\nf\\n1\\n,f\\n2\\n,\\xe2\\x80\\xa6,f\\nK\\nin this tree.\\nWe define\\nd(p,q) to be the number of edges on the unique path from node\\np to node\\nq.\\nYou are given a node\\na. For each node\\nb from\\n1 to\\nN, find the maximum value of\\nd(a,u)\\xe2\\x88\\x92d(b,u) where\\nu is a special node, as well as any special node\\nu for which that maximum value is attained.\\nInput Format\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. The description of\\nT test cases follows.\\nThe first line of each test case contains three space-separated integers\\nN,\\nK,\\na.\\nThe second line contains\\nK space-separated integers\\nf\\n1\\n,f\\n2\\n,\\xe2\\x80\\xa6,f\\nK\\n.\\nN\\xe2\\x88\\x921 lines follow. For each valid\\ni, the\\ni-th of these lines contains two space-separated integers\\nu\\ni\\nand\\nv\\ni\\ndenoting an edge of the tree.\\nOutput Format\\nFor each test case, print two lines.\\nIn the first line print\\nN space-separated integers. For each valid\\ni, the\\ni-th integer should be the maximum value of\\nd(a,u)\\xe2\\x88\\x92d(i,u) where\\nu is a special node.\\nIn the second line print\\nN space-separated integers. For each valid\\ni, the\\ni-th integer should be any special node\\nu for which the maximum of\\nd(a,u)\\xe2\\x88\\x92d(i,u) is attained.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4200\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa4N\\xe2\\x89\\xa42\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4a\\xe2\\x89\\xa4N\\n1\\xe2\\x89\\xa4f\\ni\\n\\xe2\\x89\\xa4N for each valid\\ni\\nf\\ni\\n\\xee\\x80\\xa0\\n=f\\nj\\nfor each valid\\ni and\\nj such that\\ni\\n\\xee\\x80\\xa0\\n=j\\n1\\xe2\\x89\\xa4u\\ni\\n,v\\ni\\n\\xe2\\x89\\xa4N for each valid\\ni\\nthe graph described on the input is a tree\\nthe sum of\\nN over all test cases does not exceed\\n4\\xe2\\x8b\\x8510\\n5\\nSubtasks\\nSubtask #1 (10 points):\\nT\\xe2\\x89\\xa411\\nN\\xe2\\x89\\xa4200\\nthe sum of\\nN over all test cases does not exceed\\n400\\nSubtask #2 (20 points):\\nT\\xe2\\x89\\xa451\\nN\\xe2\\x89\\xa42000\\nthe sum of\\nN over all test cases does not exceed\\n4000\\nSubtask #3 (30 points):\\nIt holds that\\nu\\ni\\n=i,\\nv\\ni\\n=i+1 for each valid\\ni.\\nSubtask #4 (40 points): original constraints\\nSample 1:\\nInput\\nOutput\\n2\\n5 1 3\\n2\\n1 2\\n1 3\\n2 4\\n2 5\\n8 3 2\\n6 5 8\\n1 2\\n2 3\\n2 4\\n2 5\\n4 6\\n5 7\\n5 8\\n1 2 0 1 1\\n2 2 2 2 2\\n-1 0 -1 1 1 2 0 2\\n5 5 5 6 5 6 5 8\\nExplanation:\\nExample case 1: The following picture shows the tree in the first example case with special nodes in bold:\\nThe only special node is the node\\n2 and\\na=3. Therefore, the desired maximum is\\nd(a,2)\\xe2\\x88\\x92d(b,2)=d(3,2)\\xe2\\x88\\x92d(b,2)=2\\xe2\\x88\\x92d(b,2) for each node\\nb and it is always attained for the special node\\nu=2.\\nExample case 2: The following picture shows the tree in the second example case with special nodes bolded:\\nThe special nodes are\\n6,\\n5 and\\n8, and\\na=2. The maximum values of\\nd(a,u)\\xe2\\x88\\x92d(b,u) (\\nu being a special node) for each\\nb are as follows:\\nb=1: The maximum value of\\nd(2,u)\\xe2\\x88\\x92d(1,u) is\\n\\xe2\\x88\\x921 and it is achieved for\\nu=5 since\\nd(2,5)\\xe2\\x88\\x92d(1,5)=1\\xe2\\x88\\x922=\\xe2\\x88\\x921.\\nb=2: The maximum value of\\nd(2,u)\\xe2\\x88\\x92d(2,u) is\\n0 and it is achieved for\\nu=5 since\\nd(2,5)\\xe2\\x88\\x92d(2,5)=1\\xe2\\x88\\x921=0.\\nb=3: The maximum value of\\nd(2,u)\\xe2\\x88\\x92d(3,u) is\\n\\xe2\\x88\\x921 and it is achieved for\\nu=5 since\\nd(2,5)\\xe2\\x88\\x92d(3,5)=1\\xe2\\x88\\x922=\\xe2\\x88\\x921.\\nb=4: The maximum value of\\nd(2,u)\\xe2\\x88\\x92d(4,u) is\\n1 and it is achieved for\\nu=6 since\\nd(2,6)\\xe2\\x88\\x92d(4,6)=2\\xe2\\x88\\x921=1.\\nb=5: The maximum value of\\nd(2,u)\\xe2\\x88\\x92d(5,u) is\\n1 and it is achieved for\\nu=5 since\\nd(2,5)\\xe2\\x88\\x92d(5,5)=1\\xe2\\x88\\x920=1.\\nb=6: The maximum value of\\nd(2,u)\\xe2\\x88\\x92d(6,u) is\\n2 and it is achieved for\\nu=6 since\\nd(2,6)\\xe2\\x88\\x92d(6,6)=2\\xe2\\x88\\x920=2.\\nb=7: The maximum value of\\nd(2,u)\\xe2\\x88\\x92d(7,u) is\\n0 and it is achieved for\\nu=5 since\\nd(2,5)\\xe2\\x88\\x92d(7,5)=1\\xe2\\x88\\x921=0.\\nb=8: The maximum value of\\nd(2,u)\\xe2\\x88\\x92d(8,u) is\\n2 and it is achieved for\\nu=8 since\\nd(2,8)\\xe2\\x88\\x92d(8,8)=2\\xe2\\x88\\x920=2.'",
        "507": "b\"Two Averages\\nChef has an array\\nA of size\\nN such that\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4K for all\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N.\\nChef also has another array\\nB of size\\nM such that\\n1\\xe2\\x89\\xa4B\\ni\\n\\xe2\\x89\\xa4K for all\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4M\\nChef can perform the following operation:\\n1) Select an integer\\nX such that\\n1\\xe2\\x89\\xa4X\\xe2\\x89\\xa4K\\n2) Append\\nX to the end of exactly one array among\\nA and\\nB\\nFind the minimum number of operations required to make\\nmean(A) strictly greater than\\nmean(B) or determine it is not possible to do so.\\nFor an array\\nX of length\\nM,\\nmean(X) is defined as\\nM\\n\\xce\\xa3X\\ni\\n. For example,\\nmean([5,6])=\\n2\\n5+6\\n=5.5\\nmean([10,13,20])=\\n3\\n10+13+20\\n=14.333...\\nmean([3,3,3,3,3])=3\\nInput Format\\nThe first line of input will contain a single integer\\nT, denoting the number of test cases.\\nEach test case consists of multiple lines of input.\\nThe first line of each test case contains three space-separated integers\\nN,\\nM and\\nK - the size of array\\nA, the size of array\\nB and the upper bound of values in arrays\\nA and\\nB.\\nThe next line contains\\nN space-separated integers\\nA\\n1\\n,\\nA\\n2\\n, ...,\\nA\\nN\\ndenoting the array\\nA.\\nThe third line contains\\nM space-separated integers\\nB\\n1\\n,\\nB\\n2\\n, ...,\\nB\\nM\\ndenoting the array\\nB.\\nOutput Format\\nFor each test case, output the minimum number of operations required to make\\nmean(A)>mean(B).\\nOutput\\n\\xe2\\x88\\x921 if it is not possible to do so.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N,M\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n6\\n1\\xe2\\x89\\xa4A\\ni\\n,B\\ni\\n\\xe2\\x89\\xa4K\\nSum of\\nN over all test cases won't exceed\\n10\\n5\\n.\\nSum of\\nM over all test cases won't exceed\\n10\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n6 3 9\\n3 7 3 5 2 4\\n8 3 5\\n1 1 4\\n4\\n2\\n2 2 1\\n1 1\\n1 1\\n5 5 5\\n3 4 3 4 3\\n4 5 4 5 4\\n2\\n0\\n-1\\n3\\nExplanation:\\nTest case 1:\\nA=[3,7,3,5,2,4] and\\nB=[8,3,5]. Chef can perform the following operations:\\nAppend\\nX=8 to array\\nA\\nAppend\\nX=2 to array\\nB\\nAfter that,\\nmean(A)=\\n7\\n3+7+3+5+2+4+8\\n=4.5714... and\\nmean(B)=\\n4\\n8+3+5+2\\n=4.5\\nTest case 2: There is no need to append new elements as\\nmean(A)=4>2=mean(B).\\nTest case 3: As\\nK=1, it is impossible to make\\nmean(A)>mean(B) as\\nmean(A)=mean(B)=1 no matter how many operations Chef performs.\\nTest case 4: Chef can append\\n2,\\n1 and\\n2 to array\\nB in three operations.\"",
        "508": "b'Chef and Riffles\\nLet\\nf be a permutation of length\\nN, where\\nN is even. The riffle of\\nf is defined to be the permutation\\ng=(f(1),f(3),\\xe2\\x80\\xa6,f(N\\xe2\\x88\\x921),f(2),f(4),\\xe2\\x80\\xa6,f(N))\\nYou are given two integers\\nN and\\nK. Output the resultant permutation when you riffle the identity permutation of length\\nN,\\nK times.\\nThe identity permutation of length\\nN is\\n\\xcf\\x83\\nN\\n=(1,2,\\xe2\\x80\\xa6,N)\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases. The description of\\nT test cases follows.\\nEach test case consists of a single line of input, containing two space-separated integers\\nN and\\nK.\\nOutput Format\\nFor each test case, output the answer permutation as\\nN space-separated integers in a new line.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa410\\n9\\nN is even\\nThe sum of\\nN across test cases does not exceed\\n3\\xe2\\x8b\\x8510\\n5\\nSubtasks\\nSubtask 1 (30 points):\\nN is a power of\\n2\\nSubtask 2 (70 points): Original constraints\\nSample 1:\\nInput\\nOutput\\n3\\n6 1\\n8 2\\n14 452\\n1 3 5 2 4 6\\n1 5 2 6 3 7 4 8\\n1 10 6 2 11 7 3 12 8 4 13 9 5 14\\nExplanation:\\nTest case\\n1: Performing the riffle on\\n\\xcf\\x83\\n6\\n=(1,2,3,4,5,6) once results in\\n(1,3,5,2,4,6), by definition.\\nTest case\\n2: The process goes as follows:\\nPerforming the riffle on\\n(1,2,3,4,5,6,7,8) results in\\n(1,3,5,7,2,4,6,8)\\nPerforming the riffle on\\n(1,3,5,7,2,4,6,8) results in\\n(1,5,2,6,3,7,4,8)'",
        "509": "b'Chandelier\\nA linear chandelier is held up by\\nN supports. The\\ni\\nth\\nsupport initially holds up a weight\\nW\\ni\\n, and will collapse if the weight on it is more than or equal to\\nA\\ni\\n. Note that initially,\\nW\\ni\\n<A\\ni\\nfor all\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N.\\nWhenever\\nW\\ni\\n\\xe2\\x89\\xa5A\\ni\\nfor some support, the following happens:\\nThe\\ni\\nth\\nsupport is destroyed;\\nLet\\nx and\\ny be uniformly random non-negative integers such that\\nx+y=W\\ni\\n.\\nAdd\\nx to\\nW\\ni\\xe2\\x88\\x921\\nand add\\ny to\\nW\\ni+1\\n.\\nNote that:\\nIf either one of the neighbours do not exist, all the weight is added to the remaining neighbour.\\nIf both neighbours do not exist, the weight dissipates.\\nFor all\\n1\\xe2\\x89\\xa4i\\xe2\\x89\\xa4N, find the minimum weight you need to add to\\nW\\ni\\n, so that there is a nonzero chance all supports end up destroyed.\\nInput Format\\nThe first line of input contains a single integer\\nT, denoting the number of test cases.\\nThe first line of each test case contains\\nN, the number of supports.\\nThe second line of each test case contains\\nN integers\\nW\\n1\\n,W\\n2\\n,\\xe2\\x80\\xa6,W\\nN\\n, denoting initial weight on each support.\\nThe third line of each test case contains\\nN integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6,A\\nN\\n, denoting the minimum load at which a support destroys.\\nOutput Format\\nFor each test, output\\nN space-separated integers. The\\ni\\nth\\nof these should be the minimum weight you need to add to the\\ni\\nth\\nchandelier, so that there is a nonzero chance that all supports end up destroyed.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa410\\n4\\n1\\xe2\\x89\\xa4N\\xe2\\x89\\xa43\\xe2\\x8b\\x8510\\n5\\n1\\xe2\\x89\\xa4W\\ni\\n<A\\ni\\n\\xe2\\x89\\xa410\\n9\\nThe sum of\\nN over all test cases does not exceed\\n3\\xe2\\x8b\\x8510\\n5\\n.\\nSample 1:\\nInput\\nOutput\\n4\\n3\\n1 1 1\\n2 2 2\\n1\\n1\\n1000000000\\n2\\n1 1234\\n2 5678\\n7\\n122 179 269 184 250 104 455\\n398 203 318 340 312 489 464\\n1 1 1\\n999999999\\n4443 4444\\n276 146 49 156 291 385 9\\nExplanation:\\nTest case\\n1: The following is possible if we add weight\\n1 to support\\n2:\\nSupport\\n2 collapses, since\\nW\\n2\\n=2\\xe2\\x89\\xa52. A weight\\nx=1 gets added to\\nW\\n1\\n, and a weight\\ny=1 gets added to\\nW\\n3\\n.\\nSupport\\n1 collapses, since\\nW\\n1\\n=2\\xe2\\x89\\xa52.\\nSupport\\n3 collapses, since\\nW\\n3\\n=2\\xe2\\x89\\xa52.\\nIf we add zero weight, then nothing would happen and all supports would stay standing. So the answer for\\ni=2 is\\n1.\\nTest case\\n2: We have to add\\n999999999 weight to the only support to make it collapse.\\nTest case\\n3: Note that we could add a weight of\\n1 to support\\n1 to make it collapse, but then, there would be no way to make the second support collapse. We can show that we have to add at least\\n4443 weight to support\\n1 to make it possible for both supports to end up destroyed.'",
        "510": "b\"Minimal Travel Time\\nChef's college is starting next week. There are\\nS subjects in total, and he needs to choose\\nK of them to attend each day, to fulfill the required number of credits to pass the semester. There are\\nN+1 buildings. His hostel is in building number\\n0. Subject\\ni is taught in building\\nA\\ni\\n. After each subject, there is a break, during which he goes back to his hostel. There are\\nM bidirectional paths of length\\n1 which connects building\\nu to building\\nv. Find the minimum possible total distance Chef needs to travel each day if he chooses his subjects wisely.\\n###Input:\\nFirst line will contain\\nT, number of testcases. Then the testcases follow.\\nEach testcase contain\\nM+2 lines of input.\\nFirst line will contain\\n4 space separated integers\\nN,\\nM,\\nS,\\nK, number of buildings other than hostel building, number of edges, total number of subjects taught, number of subjects required to pass the semester.\\nNext\\nM lines have\\n2 space separated integers\\nu,\\nv representing the path connecting buildings\\nu and\\nv.\\nNext line has\\nS space separated integers\\nA\\n1\\n,A\\n2\\n,\\xe2\\x80\\xa6A\\nS\\nrepresenting the building in which\\ni\\nth\\nsubject is taught.\\n###Output: For each testcase, output in a single line answer to the problem.\\n###Constraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa43\\n1\\xe2\\x89\\xa4N,S\\xe2\\x89\\xa410\\n5\\n1\\xe2\\x89\\xa4M\\xe2\\x89\\xa42\\xe2\\x88\\x9710\\n5\\n1\\xe2\\x89\\xa4K\\xe2\\x89\\xa4S\\n1\\xe2\\x89\\xa4A\\ni\\n\\xe2\\x89\\xa4N\\n0\\xe2\\x89\\xa4u,v\\xe2\\x89\\xa4N\\nIts guaranteed that the graph is connected and has no self loops.\\nSample 1:\\nInput\\nOutput\\n3\\n2 3 2 2\\n0 1\\n1 2\\n2 0\\n1 2\\n2 2 2 2\\n0 1\\n1 2\\n1 2\\n6 7 5 3\\n0 1\\n0 2\\n0 4\\n1 3\\n1 4\\n2 5\\n2 6\\n1 2 3 5 6\\n4\\n6\\n8\\nExplanation:\\nTestCase 1: First Chef attends the subject in the building\\n2 and he travels\\n1 units to go there and\\n1 units to come back during the break to the hostel.\\nSecond subject he attends in the building\\n1 and he travels\\n1 unit to go there and\\n1 unit to come back during the break to the hostel.\\nIn total the total minimum distance to be travelled is\\n2+2=4 units.\\nTestCase 2: First Chef attends the subject in the building\\n2 and he travels\\n2 units to go there and\\n2 units to come back during the break to the hostel.\\nSecond subject he attends in the building\\n1 and he travels\\n1 unit to go there and\\n1 unit to come back during the break to the hostel.\\nIn total the total minimum distance to be travelled is\\n4+2=6 units.\\nTestCase 3: First Chef attends the subject in the building\\n3 and he travels\\n2 units to go there and\\n2 units to come back during the break to the hostel.\\nSecond subject he attends in the building\\n1 and he travels\\n1 unit to go there and\\n1 unit to come back during the break to the hostel.\\nFinal subject he attends in the building\\n2 and he travels\\n1 unit to go there and\\n1 unit to come back during the break to the hostel.\\nIn total the total minimum distance to be travelled is\\n4+2+2=8 units.\"",
        "511": "b'Tree Distances\\nRead problems statements in Mandarin Chinese, Russian, and Bengali as well.\\nA tree is defined as a connected, undirected graph with\\nn vertices and\\nn\\xe2\\x88\\x921 edges. The distance between two vertices in a tree is equal to the number of edges on the unique simple path between them.\\nYou are given two integers\\nx and\\ny. Construct a tree with the following properties:\\nThe number of pairs of vertices with an even distance between them equals\\nx.\\nThe number of pairs of vertices with an odd distance between them equals\\ny.\\nBy a pair of vertices, we mean an ordered pair of two (possibly, the same or different) vertices.\\nInput\\nThe first line of the input contains a single integer\\nT denoting the number of test cases. Each test case consists of one line containing two space-separated integers\\nx and\\ny.\\nOutput\\nFor each test case, if there is no tree satisfying the given properties, print \"NO\" (without quotes).\\nOtherwise, on the first line print \"YES\" (without quotes). Then print integer\\nn denoting the number of vertices in the tree, followed by\\nn\\xe2\\x88\\x921 lines describing the edges of the tree in any order. Vertices are numbered from\\n1 to\\nn. If there are multiple answers, print any of them.\\nConstraints\\n1\\xe2\\x89\\xa4T\\xe2\\x89\\xa4100\\n1\\xe2\\x89\\xa4x,y\\xe2\\x89\\xa410\\n9\\nx+y\\xe2\\x89\\xa410\\n9\\nExample Input\\n4\\n2 2\\n29 20\\n3 12\\n6 3\\nExample Output\\nYES\\n2\\n1 2\\nYES\\n7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\nNO\\nNO\\nExplanation\\nIn the first test case, the pairs\\n(1,1) and\\n(2,2) have an even distance, while the pairs\\n(1,2) and\\n(2,1) have an odd distance.'"
    },
    "text": {
        "0": "Cricket World Cup Qualifier\nThe cricket World Cup has started in Chefland. There are many teams participating in the group stage matches. Any team that scores\n12 or more points in the group stage matches qualifies for the next stage.\nYou know the score that a particular team has scored in the group stage matches. Determine if the team has qualified for the next stage or not.\nInput Format\nThe first and only line of input consists of an integer\nX denoting the total points scored by the given team in the group stage matches.\nOutput Format\nOutput Yes, if the team has qualified for the next stage, and No otherwise.\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\nConstraints\n1\u2264X\u226420\nSample 1:\nInput\nOutput\n3\nNo\nExplanation:\nThe team has not scored\n\u226512 points. Hence it does not qualify.\nSample 2:\nInput\nOutput\n17\nYes\nExplanation:\nThe team has scored\n\u226512 points. Hence it does qualify.",
        "1": "Lucky Seven\nChef considers the number\n7 lucky. As a result, he believes that the\n7-th letter he sees on a day is his lucky letter of the day.\nYou are given a string\nS of length\n10, denoting the first\n10 letters Chef saw today.\nWhat is Chef's lucky letter?\nInput Format\nThe only line of input contains a string\nS, of length\n10.\nOutput Format\nPrint a single character: Chef's lucky letter .\nConstraints\nS has a length of\n10\nS contains only lowercase Latin letters (i.e, the characters 'a' to 'z')\nSample 1:\nInput\nOutput\nproceeding\nd\nExplanation:\nThe\n7-th character of\n\"proceeding\" is 'd', and hence that is Chef's lucky letter.\nSample 2:\nInput\nOutput\noutofsight\ni\nExplanation:\nThe\n7-th character of\n\"outofsight\" is 'i', and hence that is Chef's lucky letter.",
        "2": "Clear Day\nChef classifies a day to be either rainy, cloudy, or clear.\nIn a particular week, Chef finds\nX days to be rainy and\nY days to be cloudy.\nFind the number of clear days in the week.\nInput Format\nThe first and only line of input will contain two space-separated integers\nX and\nY, denoting the number of rainy and cloudy days in the week.\nOutput Format\nOutput the number of clear days in the week.\nConstraints\n0\u2264X,Y\u22647\n0\u2264X+Y\u22647\nSample 1:\nInput\nOutput\n2 3\n2\nExplanation:\nThere are\n7 days in a week. If there are\n2 rainy days and\n3 cloudy days, then the remaining\n7\u22122\u22123=2 days are clear.\nSample 2:\nInput\nOutput\n3 4\n0\nExplanation:\nIf there are\n3 rainy days and\n4 cloudy days, then the remaining\n7\u22123\u22124=0 days are clear.",
        "3": "Double Rent\nChefina decided to move into Chef's apartment.\nChef was initially paying a rent of\nX rupees. Since Chefina is moving in, the owner decided to double the rent.\nFind the final rent Chef needs to pay.\nInput Format\nThe input consists of a single integer\nX, denoting the rent Chef was initially paying.\nOutput Format\nOutput on a new line, the final rent Chef needs to pay.\nConstraints\n1\u2264X\u226410\nSample 1:\nInput\nOutput\n2\n4\nExplanation:\nChef was initially paying\n2 rupees. After Chefina moves in, he needs to pay\n2\u22c52=4 rupees.\nSample 2:\nInput\nOutput\n3\n6\nExplanation:\nChef was initially paying\n3 rupees. After Chefina moves in, he needs to pay\n2\u22c53=6 rupees.\nSample 3:\nInput\nOutput\n10\n20\nExplanation:\nChef was initially paying\n10 rupees. After Chefina moves in, he needs to pay\n2\u22c510=20 rupees.",
        "4": "Saving Taxes\nIn Chefland, everyone who earns strictly more than\nY rupees per year, has to pay a tax to Chef. Chef has allowed a special scheme where you can invest any amount of money and claim exemption for it.\nYou have earned\nX\n(X>Y) rupees this year. Find the minimum amount of money you have to invest so that you don't have to pay taxes this year.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line of input consisting of two space separated integers\nX and\nY denoting the amount you earned and the amount above which you will have to pay taxes.\nOutput Format\nFor each test case, output a single integer, denoting the minimum amount you need to invest.\nConstraints\n1\u2264T\u2264100\n1\u2264Y<X\u2264100\nSample 1:\nInput\nOutput\n4\n4 2\n8 7\n5 1\n2 1\n2\n1\n4\n1\nExplanation:\nTest case\n1: The amount above which you will have to pay taxes is\n2. Since you earn\n4 rupees, you need to invest at least\n2 rupees. After investing\n2 rupees, you will remain with an effective income\n4\u22122=2 rupees which will not be taxed.\nTest case\n2: The amount above which you will have to pay taxes is\n7. Since you earn\n8 rupees, you need to invest at least\n1 rupees.\nTest case\n3: The amount above which you will have to pay taxes is\n1. Since you earn\n5 rupees, you need to invest at least\n4 rupees.\nTest case\n4: The amount above which you will have to pay taxes is\n1. Since you earn\n2 rupees, you need to invest at least\n1 rupees.",
        "5": "Masterchef finals\nChef has been working hard to compete in MasterChef.\nHe is ranked\nX out of all contestants. However, only\n10 contestants would be selected for the finals.\nCheck whether Chef made it to the top\n10 or not?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of one integers\nX \u2014 the current rank of Chef.\nOutput Format\nFor each test case, output on a new line, YES, if Chef made it to the top\n10 and NO otherwise.\nEach character of the output may be printed in either uppercase or lowercase. That is, the strings NO, no, nO, and No will be treated as equivalent.\nConstraints\n1\u2264T\u2264100\n1\u2264X\u2264100\nSample 1:\nInput\nOutput\n4\n15\n10\n1\n50\nNO\nYES\nYES\nNO\nExplanation:\nTest case\n1: Chef's rank is\n15 which is greater than\n10. Thus, Chef did not make it to the top\n10.\nTest case\n2: Chef's rank is\n10 which is equal to\n10. Thus, Chef made it to the top\n10.\nTest case\n3: Chef made it to the top\n10, as his rank is\n1.\nTest case\n4: Chef did not make it to the top\n10 as his rank is\n50.",
        "6": "Biryani classes\nAccording to a recent survey, Biryani is the most ordered food. Chef wants to learn how to make world-class Biryani from a MasterChef. Chef will be required to attend the MasterChef's classes for\nX weeks, and the cost of classes per week is\nY coins. What is the total amount of money that Chef will have to pay?\nInput Format\nThe first line of input will contain an integer\nT \u2014 the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains two space-separated integers\nX and\nY, as described in the problem statement.\nOutput Format\nFor each test case, output on a new line the total amount of money that Chef will have to pay.\nConstraints\n1\u2264T\u226410\n4\n1\u2264X,Y\u2264100\nSample 1:\nInput\nOutput\n4\n1 10\n1 15\n2 10\n2 15\n10\n15\n20\n30\nExplanation:\nTest case\n1: Chef will be required to attend the MasterChef's classes for\n1 week and the cost of classes per week is\n10 coins. Hence, Chef will have to pay\n10 coins in total.\nTest case\n2: Chef will be required to attend the MasterChef's classes for\n1 week and the cost of classes per week is\n15 coins. Hence, Chef will have to pay\n15 coins in total.\nTest case\n3: Chef will be required to attend the MasterChef's classes for\n2 weeks and the cost of classes per week is\n10 coins. Hence, Chef will have to pay\n20 coins in total.\nTest case\n4: Chef will be required to attend the MasterChef's classes for\n2 weeks and the cost of classes per week is\n15 coins. Hence, Chef will have to pay\n30 coins in total.",
        "7": "Chef Plays Ludo\nChef is playing Ludo. According to the rules of Ludo, a player can enter a new token into the play only when he rolls a\n6 on the die.\nIn the current turn, Chef rolled the number\nX on the die. Determine if Chef can enter a new token into the play in the current turn or not.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains one integer\nX \u2014 the number rolled by the Chef on the die.\nOutput Format\nFor each test case, output YES if the Chef can enter a new token in the game. Otherwise, output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n1\u2264T\u22646\n1\u2264X\u22646\nSample 1:\nInput\nOutput\n3\n1\n6\n3\nNO\nYES\nNO\nExplanation:\nTest Case 1: Since Chef did not roll a\n6, he can not enter a new token in the play.\nTest Case 2: Since Chef rolled a\n6, he can enter a new token in the play.",
        "8": "How many unattempted problems\nCodeChef recently revamped its practice page to make it easier for users to identify the next problems they should solve by introducing some new features:\nRecent Contest Problems - contains only problems from the last 2 contests\nSeparate Un-Attempted, Attempted, and All tabs\nProblem Difficulty Rating - the Recommended dropdown menu has various difficulty ranges so that you can attempt the problems most suited to your experience\nPopular Topics and Tags\nOur Chef is currently practicing on CodeChef and is a beginner. The count of \u2018All Problems\u2019 in the Beginner section is\nX. Our Chef has already \u2018Attempted\u2019\nY problems among them. How many problems are yet \u2018Un-attempted\u2019?\nInput Format\nThe first and only line of input contains two space-separated integers\nX and\nY \u2014 the count of 'All problems' in the Beginner's section and the count of Chef's 'Attempted' problems, respectively.\nOutput Format\nOutput a single integer in a single line \u2014 the number of problems that are yet 'Un-attempted'\nConstraints\n1\u2264Y\u2264X\u22641000\nSubtasks\nSubtask 1 (100 points):\nOriginal constraints.\nSample 1:\nInput\nOutput\n10 4\n6\nSample 2:\nInput\nOutput\n10 10\n0\nSample 3:\nInput\nOutput\n1000 990\n10\nSample 4:\nInput\nOutput\n500 1\n499\nExplanation:\nTest case\n1: There are\n10 problems in total in the Beginner's section, out of which\n4 have been attempted. Hence, there are\n6 Un-attempted problems.\nTest case\n2: There are\n10 problems in total in the Beginner's section, out of which all have been attempted. Hence, there are\n0 Un-attempted problems.\nTest case\n3: There are\n1000 problems in total in the Beginner's section, out of which\n990 have been attempted. Hence, there are\n10 Un-attempted problems.\nTest case\n4: There are\n500 problems in total in the Beginner's section, out of which only\n1 has been attempted. Hence, there are\n499 Un-attempted problems.",
        "9": "Determine the Score\nChef appeared for a placement test.\nThere is a problem worth\nX points. Chef finds out that the problem has exactly\n10 test cases. It is known that each test case is worth the same number of points.\nChef passes\nN test cases among them. Determine the score Chef will get.\nNOTE: See sample explanation for more clarity.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains of a single line of input, two integers\nX and\nN, the total points for the problem and the number of test cases which pass for Chef's solution.\nOutput Format\nFor each test case, output the points scored by Chef.\nConstraints\n1\u2264T\u2264100\n10\u2264X\u2264200\n0\u2264N\u226410\nX is a multiple of\n10.\nSample 1:\nInput\nOutput\n4\n10 3\n100 10\n130 4\n70 0\n3\n100\n52\n0\nExplanation:\nTest Case\n1: The problem is worth\n10 points and since there are\n10 test cases, each test case is worth\n1 point. Since Chef passes\n3 test cases, his score will be\n1\u22c53=3 points.\nTest Case\n2: The problem is worth\n100 points and since there are\n10 test cases, each test case is worth\n10 points. Since Chef passes all the\n10 test cases, his score will be\n10\u22c510=100 points.\nTest Case\n3: The problem is worth\n130 points and since there are\n10 test cases, each test case is worth\n13 points. Since Chef passes\n4 test cases, his score will be\n13\u22c54=52 points.\nTest Case\n4: The problem is worth\n70 points and since there are\n10 test cases, each test case is worth\n7 points. Since Chef passes\n0 test cases, his score will be\n7\u22c50=0 points.",
        "10": "404 Not Found\nChef's website has a specific response mechanism based on the HTTP status code received:\nIf the response code is\n404, the website will return NOT FOUND.\nFor any other response code different from\n404, the website will return FOUND.\nGiven the response code as\nX, determine the website response.\nInput Format\nThe first and only line of input contains a response code\nX.\nOutput Format\nOutput on a new line NOT FOUND, if the response code is\n404. Otherwise print FOUND.\nYou may print each character of the string in uppercase or lowercase (for example, the strings FOUND, fouND, FouND, and found will all be treated as identical).\nConstraints\n100\u2264X\u2264999\nSample 1:\nInput\nOutput\n200\nFOUND\nExplanation:\nSince the response code is not\n404, website returns FOUND.\nSample 2:\nInput\nOutput\n404\nNOT FOUND\nExplanation:\nSince the response code is\n404, website returns NOT FOUND.\nSample 3:\nInput\nOutput\n301\nFOUND\nExplanation:\nSince the response code is not\n404, website returns FOUND.",
        "11": "Off By One\nYou just bought a new calculator, but it seems to have a small problem: all its results have an extra\n1 appended to the end.\nFor example, if you ask it for 3 + 5, it'll print 81, and 4 + 12 will result in 161.\nGiven\nA and\nB, can you predict what the calculator will print when you ask it for\nA+B?\nInput Format\nThe first and only line of input will contain two space-separated integers\nA and\nB.\nOutput Format\nPrint a single integer: the calculator's output when you enter\nA+B into it.\nConstraints\n1\u2264A,B\u226450\nSample 1:\nInput\nOutput\n3 5\n81\nExplanation:\n3+5=8, and the calculator appends a\n1 to print\n81.\nSample 2:\nInput\nOutput\n4 12\n161\nExplanation:\n4+12=16, and the calculator appends a\n1 to print\n161.",
        "12": "Donation Drive\nA blood drive aims to collect\nN number of blood donations.\nThe drive has collected\nX donations so far. Find the remaining number of donations needed to reach the target.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case contains two space-separated integers\nN and\nX \u2014 the number of required donations and the number of collected donations, respectively.\nOutput Format\nFor each test case, output on a new line, the remaining number of donations needed to reach the target.\nConstraints\n1\u2264T\u2264200\n1\u2264X\u2264N\u226420\nSample 1:\nInput\nOutput\n4\n5 2\n3 3\n5 4\n7 5\n3\n0\n1\n2\nExplanation:\nTest case\n1: The drive aims to collect\n5 donations and has collected\n2 already. Thus, they need to collect\n3 more donations to reach the target.\nTest case\n2: The drive aims to collect\n3 donations and has collected\n3 already. Thus, they need to collect no more donations to reach the target.\nTest case\n3: The drive aims to collect\n5 donations and has collected\n4 already. Thus, they need to collect\n1 more donation to reach the target.\nTest case\n4: The drive aims to collect\n7 donations and has collected\n5 already. Thus, they need to collect\n2 more donations to reach the target.",
        "13": "Kitchen Timings\nThe working hours of Chef\u2019s kitchen are from\nX pm to\nY pm\n(1\u2264X<Y\u226412).\nFind the number of hours Chef works.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two space-separated integers\nX and\nY \u2014 the starting and ending time of working hours respectively.\nOutput Format\nFor each test case, output on a new line, the number of hours Chef works.\nConstraints\n1\u2264T\u2264100\n1\u2264X<Y\u226412\nSample 1:\nInput\nOutput\n4\n1 2\n3 7\n9 11\n2 10\n1\n4\n2\n8\nExplanation:\nTest case\n1: Chef starts working at\n1 pm and works till\n2 pm. Thus, he works for\n1 hour.\nTest case\n2: Chef starts working at\n3 pm and works till\n7 pm. Thus, he works for\n4 hours.\nTest case\n3: Chef starts working at\n9 pm and works till\n11 pm. Thus, he works for\n2 hours.\nTest case\n4: Chef starts working at\n2 pm and works till\n10 pm. Thus, he works for\n8 hours.",
        "14": "IPL Ticket Rush\nDAIICT college students want to attend an IPL match.\nA total of\nN students from the college want to go while only\nM tickets are available for the match.\nDetermine how many students won't be able to book tickets.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two space-separated integers\nN and\nM \u2014 the number of students wants to go and the total number of tickets available, respectively.\nOutput Format\nFor each test case, output on a new line the number of students who won't be able to book tickets.\nConstraints\n1\u2264T\u22641000\n1\u2264N,M\u226410\n5\nSample 1:\nInput\nOutput\n4\n5 3\n5 7\n4 1\n8 8\n2\n0\n3\n0\nExplanation:\nTest case\n1: There are\n5 students who want to go, and only\n3 tickets are available. Hence\n2 students won't be able to get tickets.\nTest case\n2: There are\n5 students who want to go, and\n7 tickets are available. So, every one of them will get the tickets.\nTest case\n3: There are\n4 students who want to go, and only\n1 ticket is available. Hence\n3 students won't be able to get tickets.\nTest case\n4: There are\n8 students who want to go, and\n8 tickets are available. So, every one of them will get the tickets.",
        "15": "Audible Range\nChef's dog binary hears frequencies starting from\n67 Hertz to\n45000 Hertz (both inclusive).\nIf Chef's commands have a frequency of\nX Hertz, find whether binary can hear them or not.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single integer\nX - the frequency of Chef's commands in Hertz.\nOutput Format\nFor each test case, output on a new line YES, if binary can hear Chef's commands. Otherwise, print NO.\nThe output is case-insensitive. Thus, the strings YES, yes, yeS, and Yes are all considered the same.\nConstraints\n1\u2264T\u226410\n4\n1\u2264X\u226410\n6\nSample 1:\nInput\nOutput\n5\n42\n67\n402\n45000\n45005\nNO\nYES\nYES\nYES\nNO\nExplanation:\nTest case\n1: Chef's command has a frequency of\n42 Hertz which is less than\n67. Thus, it would not be audible to binary.\nTest case\n2: Chef's command has a frequency of\n67 Hertz which lies in the range\n[67,45000]. Thus, it would be audible to binary.\nTest case\n3: Chef's command has a frequency of\n402 Hertz which lies in the range\n[67,45000]. Thus, it would be audible to binary.\nTest case\n4: Chef's command has a frequency of\n45000 Hertz which lies in the range\n[67,45000]. Thus, it would be audible to binary.\nTest case\n5: Chef's command has a frequency of\n45005 Hertz which is greater than\n45000. Thus, it would not be audible to binary.",
        "16": "Reach on Time\nChef has recently moved into an apartment. It takes\n30 minutes for Chef to reach office from the apartment.\nChef left for the office\nX minutes before Chef was supposed to reach. Determine whether or not Chef will be able to reach on time.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single integer\nX.\nOutput Format\nFor each test case, output YES if Chef will reach on time, NO otherwise.\nThe output is case-insensitive. Thus, the strings YES, yes, yeS, and Yes are all considered the same.\nConstraints\n1\u2264T\u226460\n1\u2264X\u226460\nSample 1:\nInput\nOutput\n6\n30\n60\n14\n29\n31\n42\nYES\nYES\nNO\nNO\nYES\nYES\nExplanation:\nTest case 1: Chef leaves\n30 minutes before he is supposed to reach, so he will reach the office exactly on time since it takes\n30 minutes to commute.\nTest case 2: Chef will reach\n30 minutes early.\nTest case 3: Chef will reach 16 minutes late.",
        "17": "Puzzle Hunt\nChef and some of his friends are planning to participate in a puzzle hunt event.\nThe rules of the puzzle hunt state:\n\"This hunt is intended for teams of\n6 to\n8 people.\"\nChef's team has\nN people in total. Are they eligible to participate?\nInput Format\nThe first and only line of input will contain a single integer\nN: the number of people present in Chef's team.\nOutput Format\nPrint the answer: Yes if Chef's team is eligible to participate, and No otherwise.\nEach letter in the output may be printed in either uppercase or lowercase, i.e, the outputs NO, No, nO, no will all be treated as equivalent.\nConstraints\n1\u2264N\u226410\nSample 1:\nInput\nOutput\n4\nNo\nExplanation:\nThe puzzle hunt requires between\n6 and\n8 people in a team.\n4 isn't between\n6 and\n8, so Chef's team cannot participate.\nSample 2:\nInput\nOutput\n7\nYes\nExplanation:\nChef's team has\n7 people, and\n7 lies between\n6 and\n8.\nSo, Chef's team can participate in the event.\nSample 3:\nInput\nOutput\n8\nYes\nExplanation:\nChef's team has\n8 people, and\n8 lies between\n6 and\n8.\nSo, Chef's team can participate in the event.",
        "18": "Bone Appetit\nTrick or treat, bags of sweets, ghosts are walking down the street\nIt's Halloween and Suri Bhai is out to get his treats.\nThere are two sectors in his neighborhood, \"Bones\" and \"Blood\". They have\nN and\nM people, respectively.\nEach person in \"Bones\" will hand out\nX treats, and each person in \"Blood\" will hand out\nY treats.\nHow many treats does Suri Bhai get from visiting everyone in his neighborhood in total?\nInput Format\nThe first line of input contains two space-separated integers\nN and\nM \u2014 the number of people in \"Bones\" and \"Blood\", respectively.\nThe second line of input contains two space-separated integers\nX and\nY \u2014 the number of treats handed out by each person in \"Bones\" and \"Blood\", respectively.\nOutput Format\nFor each test case output a single integer: the total number of treats Suri Bhai will receive.\nConstraints\n0\u2264N,M\u2264100\n0\u2264X,Y\u22641000\nSample 1:\nInput\nOutput\n4 2\n5 6\n32\nExplanation:\n\"Bones\" has\n4 people, each of who will give out\n5 treats, for a total of\n4\u00d75=20 treats.\n\"Blood\" has\n2 people, each of who will give out\n6 treats, for a total of\n2\u00d76=12 treats.\nThe total number of treats is\n20+12=32.\nSample 2:\nInput\nOutput\n5 0\n0 2\n0\nExplanation:\n\"Bones\" has\n5 people, each of who will give out\n0 treats, for a total of\n5\u00d70=0 treats.\n\"Blood\" has\n0 people, each of who will give out\n2 treats, for a total of\n0\u00d72=0 treats.\nThe total number of treats is\n0+0=0.",
        "19": "Who is taller!\nAlice and Bob were having an argument about which of them is taller than the other. Charlie got irritated by the argument, and decided to settle the matter once and for all.\nCharlie measured the heights of Alice and Bob, and got to know that Alice's height is\nX centimeters and Bob's height is\nY centimeters. Help Charlie decide who is taller.\nIt is guaranteed that\nX\n\ue020\n=Y.\nInput Format\nThe first line of input will contain an integer\nT \u2014 the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains two integers\nX and\nY, as described in the problem statement.\nOutput Format\nFor each test case, output on a new line\nA if Alice is taller than Bob, else output\nB. The output is case insensitive, i.e, both\nA and\na will be accepted as correct answers when Alice is taller.\nConstraints\n1\u2264T\u22641000\n100\u2264X,Y\u2264200\nX\n\ue020\n=Y\nSample 1:\nInput\nOutput\n2\n150 160\n160 150\nB\nA\nExplanation:\nTest case\n1: In this case,\n150<160 so Bob is taller than Alice.\nTest case\n2: In this case,\n160>150 so Alice is taller than Bob.",
        "20": "Reach the Target\nThere is a cricket match going on between two teams\nA and\nB.\nTeam\nB is batting second and got a target of\nX runs. Currently, team\nB has scored\nY runs. Determine how many more runs Team\nB should score to win the match.\nNote: The target score in cricket matches is one more than the number of runs scored by the team that batted first.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two space-separated integers\nX and\nY, the target for team\nB and the current score of team\nB respectively.\nOutput Format\nFor each test case, output how many more runs team\nB should score to win the match.\nConstraints\n1\u2264T\u226410\n50\u2264Y<X\u2264200\nSample 1:\nInput\nOutput\n4\n200 50\n100 99\n130 97\n53 51\n150\n1\n33\n2\nExplanation:\nTest case\n1: The target is\n200 runs and team\nB has already made\n50 runs. Thus, the team needs to make\n200\u221250=150 runs more, to win the match.\nTest case\n2: The target is\n100 runs and team\nB has already made\n99 runs. Thus, the team needs to make\n100\u221299=1 runs more, to win the match.\nTest case\n3: The target is\n130 runs and team\nB has already made\n97 runs. Thus, the team needs to make\n130\u221297=33 runs more, to win the match.\nTest case\n4: The target is\n53 runs and team\nB has already made\n51 runs. Thus, the team needs to make\n53\u221251=2 runs more, to win the match.",
        "21": "Best of Two\nChef took an examination two times. In the first attempt, he scored\nX marks while in the second attempt he scored\nY marks. According to the rules of the examination, the best score out of the two attempts will be considered as the final score.\nDetermine the final score of the Chef.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains two integers\nX and\nY \u2014 the marks scored by Chef in the first attempt and second attempt respectively.\nOutput Format\nFor each test case, output the final score of Chef in the examination.\nConstraints\n1\u2264T\u22641000\n0\u2264X,Y\u2264100\nSample 1:\nInput\nOutput\n4\n40 60\n67 55\n50 50\n1 100\n60\n67\n50\n100\nExplanation:\nTest Case 1: The best score out of the two attempts is\n60.\nTest Case 2: The best score out of the two attempts is\n67.\nTest Case 3: The best score out of the two attempts is\n50.",
        "22": "2000\nChef had collected\nN notes of Rs.\n2000 to pay his total college fees. However, the government banned Rs.\n2000 notes.\nChef wants to pay the same amount using Rs.\n500 notes only. Find the number of notes Chef needs.\nInput Format\nEach test case consists of a single integer\nN - the number of notes of Rs.\n2000 that Chef has collected.\nOutput Format\nOutput a single integer - the number of Rs.\n500 notes needed.\nConstraints\n1\u2264N\u2264100\nSample 1:\nInput\nOutput\n4\n16\nExplanation:\n4 notes of Rs.\n2000 make a total of\n4\u22c52000=8000 rupees. This is equivalent to\n16 notes of Rs.\n500.",
        "23": "Roller Coaster\nChef's son wants to go on a roller coaster ride. The height of Chef's son is\nX inches while the minimum height required to go on the ride is\nH inches. Determine whether he can go on the ride or not.\nInput Format\nThe first line contains a single integer\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two integers\nX and\nH - the height of Chef's son and the minimum height required for the ride respectively.\nOutput Format\nFor each test case, output in a single line, YES if Chef's son can go on the ride. Otherwise, output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical)\nConstraints\n1\u2264T\u22641000\n1\u2264X,H\u2264100\nSample 1:\nInput\nOutput\n4\n15 20\n50 48\n32 32\n38 39\nNO\nYES\nYES\nNO\nExplanation:\nTest case 1: Chef's son can not go on the ride as his height\n< the minimum required height.\nTest case 2: Chef's son can go on the ride as his height\n\u2265 the minimum required height.\nTest case 3: Chef's son can go on the ride as his height\n\u2265 the minimum required height.\nTest case 4: Chef's son can not go on the ride as his height\n< the minimum required height.",
        "24": "Candy Division\nThere are three friends and a total of\nN candies.\nThere will be a fight amongst the friends if all of them do not get the same number of candies.\nChef wants to divide all the candies such that there is no fight. Find whether such distribution is possible.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single integer\nN - the number of candies.\nOutput Format\nFor each test case, output YES, if we can distribute all the candies between the three friends equally. Otherwise output NO.\nYou can output each character of the answer in uppercase or lowercase. For example, the strings yEs, yes, Yes, and YES are considered the same.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u2264100\nSample 1:\nInput\nOutput\n4\n3\n4\n2\n6\nYES\nNO\nNO\nYES\nExplanation:\nTest case\n1: Chef can distribute all\n3 candies such that each friend gets\n1 candy. Since all three friends have same number of candies, there is no fight.\nTest case\n2: There exist no way of distributing all candies such that all three friends have same number of candies.\nTest case\n3: There exist no way of distributing all candies such that all three friends have same number of candies.\nTest case\n4: Chef can distribute all\n6 candies such that each friend gets\n2 candies. Since all three friends have same number of candies, there is no fight.",
        "25": "Chef On Date\nChef and his girlfriend went on a date. Chef took\nX dollars with him, and was quite sure that this would be enough to pay the bill. At the end, the waiter brought a bill of\nY dollars. Print \"YES\" if Chef has enough money to pay the bill, or \"NO\" if he has to borrow from his girlfriend and leave a bad impression on her.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line of input, containing two space-separated integers\nX and\nY.\nOutput Format\nFor each test case, output on a new line \"YES\" if Chef has enough money to pay the bill and \"NO\" otherwise.\nYou may print each character of the string in either uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y\u2264100\nSample 1:\nInput\nOutput\n4\n1 1\n1 2\n2 1\n50 100\nYES\nNO\nYES\nNO\nExplanation:\nTest case\n1: Since the money Chef has is equal to the bill, he will be able to pay the bill.\nTest case\n2: Since the money Chef has is less than the bill, he will have to borrow from his girlfriend and leave a bad impression on her.\nTest case\n3: Since the money Chef has is greater than the bill, he will be able to pay the bill.\nTest case\n4: Since the money Chef has is less than the bill, he will have to borrow from his girlfriend and leave a bad impression on her.",
        "26": "Parity\nAshu and Arvind participated in a coding contest, as a result of which they received\nN chocolates. Now they want to divide the chocolates between them equally.\nCan you help them by deciding if it is possible for them to divide all the\nN chocolates in such a way that they each get an equal number of chocolates?\nYou cannot break a chocolate in two or more pieces.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case contains a single integer\nN \u2014 the number of chocolates they received.\nOutput Format\nFor each test case output the answer on a new line \u2014 \"Yes\" (without quotes) if they can divide chocolates between them equally, and \"No\" (without quotes) otherwise.\nEach letter of the output may be printed in either uppercase or lowercase, i.e, \"Yes\", \"YES\", and \"yEs\" will all be treated as equivalent.\nConstraints\n1\u2264T\u226410\n1\u2264N\u226410\nSample 1:\nInput\nOutput\n4\n10\n4\n3\n2\nYes\nYes\nNo\nYes\nExplanation:\nTest case\n1: They can divide\n10 chocolates such that both of them get\n5 chocolates each.\nTest case\n2: They can divide\n4 chocolates such that both of them get\n2 chocolates each.\nTest case\n3: There is no way to divide\n3 chocolates so that they get equal number of chocolates.\nTest case\n4: They can divide\n2 chocolates such that both of them get\n1 chocolate each.",
        "27": "Total Prize Money\nIn a coding contest, there are prizes for the top rankers. The prize scheme is as follows:\nTop\n10 participants receive rupees\nX each.\nParticipants with rank\n11 to\n100 (both inclusive) receive rupees\nY each.\nFind the total prize money over all the contestants.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains of a single line of input, two integers\nX and\nY - the prize for top\n10 rankers and the prize for ranks\n11 to\n100 respectively.\nOutput Format\nFor each test case, output the total prize money over all the contestants.\nConstraints\n1\u2264T\u22641000\n1\u2264Y\u2264X\u22641000\nSample 1:\nInput\nOutput\n4\n1000 100\n1000 1000\n80 1\n400 30\n19000\n100000\n890\n6700\nExplanation:\nTest Case\n1: Top\n10 participants receive rupees\n1000 and next\n90 participants receive rupees\n100 each. So, total prize money\n=10\u22c51000+90\u22c5100=19000.\nTest Case\n2: Top\n10 participants receive rupees\n1000 and next\n90 participants receive rupees\n1000 each. So, total prize money\n=10\u22c51000+90\u22c51000=100000.\nTest Case\n3: Top\n10 participants receive rupees\n80 and next\n90 participants receive rupee\n1 each. So, total prize money\n=10\u22c580+90\u22c51=890.\nTest Case\n4: Top\n10 participants receive rupees\n400 and next\n90 participants receive rupees\n30 each. So, total prize money\n=10\u22c5400+90\u22c530=6700.",
        "28": "Counting Words\nHarsh was recently gifted a book consisting of\nN pages. Each page contains exactly\nM words printed on it. As he was bored, he decided to count the number of words in the book.\nHelp Harsh find the total number of words in the book.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two space-separated integers on a single line,\nN and\nM \u2014 the number of pages and the number of words on each page, respectively.\nOutput Format\nFor each test case, output on a new line, the total number of words in the book.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u2264100\n1\u2264M\u2264100\nSample 1:\nInput\nOutput\n4\n1 1\n4 2\n2 4\n95 42\n1\n8\n8\n3990\nExplanation:\nTest case\n1: The book consists of only\n1 page, and each page has only\n1 word. Hence, the total number of words is\n1.\nTest case\n2: The book consists of\n4 pages, and each page has\n2 words. Hence, the total number of words is\n2+2+2+2=8.\nTest case\n3: The book consists of\n2 pages, and each page has\n4 words. Hence, the total number of words is\n4+4=8.\nTest case\n4: The book consists of\n95 pages, and each page has\n42 words. Hence, the total number of words is\n3990.",
        "29": "Battery Health\nApple considers any iPhone with a battery health of\n80% or above, to be in optimal condition.\nGiven that your iPhone has\nX% battery health, find whether it is in optimal condition.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case contains an integer\nX \u2014 the battery health.\nOutput Format\nFor each test case, output on a new line, YES, if the battery is in optimal condition, and NO otherwise.\nYou may print each character in uppercase or lowercase. For example, NO, no, No and nO, are all considered identical.\nConstraints\n1\u2264T\u2264100\n0\u2264X\u2264100\nSample 1:\nInput\nOutput\n4\n97\n42\n80\n10\nYES\nNO\nYES\nNO\nExplanation:\nTest case\n1: The battery health is\n97% which is greater than equal to\n80%. Thus, the battery is in optimal condition.\nTest case\n2: The battery health is\n42% which is less than\n80%. Thus, the battery is not in optimal condition.\nTest case\n3: The battery health is\n80% which is greater than equal to\n80%. Thus, the battery is in optimal condition.\nTest case\n4: The battery health is\n10% which is less than\n80%. Thus, the battery is not in optimal condition.",
        "30": "Tom and Jerry Chase\nIn a classic chase, Tom is running after Jerry as Jerry has eaten Tom's favourite food.\nJerry is running at a speed of\nX metres per second while Tom is chasing him at a speed of\nY metres per second. Determine whether Tom will be able to catch Jerry.\nNote that initially Jerry is not at the same position as Tom.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two space-separated integers\nX and\nY \u2014 the speeds of Jerry and Tom respectively.\nOutput Format\nFor each test case, output on a new line, YES, if Tom will be able to catch Jerry. Otherwise, output NO.\nYou can print each character in uppercase or lowercase. For example NO, no, No, and nO are all considered the same.\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y\u226410\nSample 1:\nInput\nOutput\n4\n2 3\n4 1\n1 1\n3 5\nYES\nNO\nNO\nYES\nExplanation:\nTest case\n1: Jerry is running at the speed of\n2 metres per second while Tom is chasing him at the speed of\n3 metres per second. Since Jerry's speed is less than Tom's, Tom will eventually catch Jerry.\nTest case\n2: Jerry is running at the speed of\n4 metres per second while Tom is chasing him at the speed of\n1 metres per second. Since Jerry's speed is higher than Tom's, Tom will never be able to catch Jerry.\nTest case\n3: Jerry is running at the speed of\n1 metre per second while Tom is chasing him at the speed of\n1 metre per second. Since Jerry's speed is same as that of Tom's and both of them are not at the same position, Tom will never be able to catch Jerry.\nTest case\n4: Jerry is running at the speed of\n3 metres per second while Tom is chasing him at the speed of\n5 metres per second. Since Jerry's speed is less than Tom's, Tom will eventually catch Jerry.",
        "31": "Ageing\nChef's current age is\n20 years, while Chefina's current age is\n10 years.\nDetermine Chefina's age when Chef will be\nX years old.\nNote: Assume that Chef and Chefina were born on same day and same month (just different year).\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single integer\nX, the age of Chef.\nOutput Format\nFor each test case, output Chefina's age when Chef will be\nX years old.\nConstraints\n1\u2264T\u226425\n25\u2264X\u226450\nSample 1:\nInput\nOutput\n4\n25\n36\n50\n44\n15\n26\n40\n34\nExplanation:\nTest case\n1: Chefina is\n10 years old when Chef is\n20 years old. Thus, when Chef would be\n25, Chefina would be\n15.\nTest case\n2: Chefina is\n10 years old when Chef is\n20 years old. Thus, when Chef would be\n36, Chefina would be\n26.\nTest case\n3: Chefina is\n10 years old when Chef is\n20 years old. Thus, when Chef would be\n50, Chefina would be\n40.\nTest case\n4: Chefina is\n10 years old when Chef is\n20 years old. Thus, when Chef would be\n44, Chefina would be\n34.",
        "32": "Right There\nIf you wanna party, if you, if you wanna party\nThen put your hands up\nChef wants to host a party with a total of\nN people.\nHowever, the party hall has a capacity of\nX people. Find whether Chef can host the party.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two space-separated integers\nN and\nX \u2014 the total number of people and the capacity of the party hall.\nOutput Format\nFor each test case, output on a new line, YES, if Chef can host the party and NO otherwise.\nEach character of the output may be printed in either uppercase or lowercase. That is, the strings NO, no, nO, and No will be treated as equivalent.\nConstraints\n1\u2264T\u2264100\n1\u2264N,X\u226410\nSample 1:\nInput\nOutput\n4\n2 5\n4 3\n6 6\n10 9\nYES\nNO\nYES\nNO\nExplanation:\nTest case\n1: Chef wants to host a party with\n2 people. Since the capacity of the hall is\n5, he can host the party.\nTest case\n2: Chef wants to host a party with\n4 people. Since the capacity of the hall is\n3, he can not host the party.\nTest case\n3: Chef wants to host a party with\n6 people. Since the capacity of the hall is\n6, he can host the party.\nTest case\n4: Chef wants to host a party with\n10 people. Since the capacity of the hall is\n9, he can not host the party.",
        "33": "Second Max of Three Numbers\nProblem Statement\nWrite a program that accepts sets of three numbers, and prints the second-maximum number among the three.\nInput\nFirst line contains the number of triples, N.\nThe next N lines which follow each have three space separated integers.\nOutput\nFor each of the N triples, output one new line which contains the second-maximum integer among the three.\nConstraints\n1 \u2264 N \u2264 6\n1 \u2264 every integer \u2264 10000\nThe three integers in a single triplet are all distinct. That is, no two of them are equal.\nSample 1:\nInput\nOutput\n3\n1 2 3\n10 15 5\n100 999 500\n2\n10\n500",
        "34": "Bull or Bear\nChef is on his way to become the new big bull of the stock market but is a bit weak at calculating whether he made a profit or a loss on his deal.\nGiven that Chef bought the stock at value\nX and sold it at value\nY. Help him calculate whether he made a profit, loss, or was it a neutral deal.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line of input containing two space-separated integers\nX and\nY, denoting the value at which Chef bought and sold the stock respectively.\nOutput Format\nFor each test case, output PROFIT if Chef made a profit on the deal, LOSS if Chef incurred a loss on the deal, and NEUTRAL otherwise.\nThe checker is case-insensitive so answers like pROfiT, profit, and PROFIT would be considered the same.\nConstraints\n1\u2264T\u2264500\n1\u2264X,Y\u2264100\nSample 1:\nInput\nOutput\n4\n4 2\n8 8\n3 4\n2 1\nLOSS\nNEUTRAL\nPROFIT\nLOSS\nExplanation:\nTest case\n1: Since the cost price is greater than the selling price, Chef made a loss in the deal.\nTest case\n2: Since the cost price is equal to the selling price, the deal was neutral.\nTest case\n3: Since the cost price is less than the selling price, Chef made a profit in the deal.\nTest case\n4: Since the cost price is greater than the selling price, Chef made a loss in the deal.",
        "35": "Four Tickets\nFour friends want to attend a concert. Each ticket costs\nX rupees.\nThey have decided to go to the concert if and only if the total cost of the tickets does not exceed\n1000 rupees.\nDetermine whether they will be going to the concert or not.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single integer\nX, the cost of each ticket.\nOutput Format\nFor each test case, output YES if they will be going to the concert, NO otherwise.\nYou can print each character in uppercase or lowercase. For example, the strings YES, yes, Yes, and yES, are all considered identical.\nConstraints\n1\u2264T\u2264100\n1\u2264X\u22641000\nSample 1:\nInput\nOutput\n4\n100\n500\n250\n1000\nYES\nNO\nYES\nNO\nExplanation:\nTest case\n1: The total cost of all tickets is\n100\u22c54=400 which is\n\u22641000. Thus, they will go to the concert.\nTest case\n2: The total cost of all tickets is\n500\u22c54=2000 which is\n>1000. Thus, they will not go to the concert.\nTest case\n3: The total cost of all tickets is\n250\u22c54=1000 which is\n\u22641000. Thus, they will go to the concert.\nTest case\n4: The total cost of all tickets is\n1000\u22c54=4000 which is\n>1000. Thus, they will not go to the concert.",
        "36": "Chairs Requirement\nChef's coding class is very famous in Chefland.\nThis year\nX students joined his class and each student will require one chair to sit on. Chef already has\nY chairs in his class. Determine the minimum number of new chairs Chef must buy so that every student is able to get one chair to sit on.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two integers\nX and\nY \u2014 the number of students in the class and the number of chairs Chef already has.\nOutput Format\nFor each test case, output the minimum number of extra chairs Chef must buy so that every student gets one chair.\nConstraints\n1\u2264T\u22641000\n0\u2264X,Y\u2264100\nSample 1:\nInput\nOutput\n4\n20 14\n41 41\n35 0\n50 100\n6\n0\n35\n0\nExplanation:\nTest case 1: There are\n20 students in the class and Chef has\n14 chairs already. Therefore Chef must buy\n6 more chairs.\nTest case 2: There are\n41 students in the class and Chef already has exactly\n41 chairs. Therefore Chef does not need to buy any more chairs.\nTest case 3: There are\n35 students in the class and Chef has no chairs initially. Therefore Chef must buy\n35 chairs.",
        "37": "Chef and Donation\nIn a certain month, Chef earned\nX rupees while Chefina earned\nY rupees such that\nY>X.\nSince they want to end up with exactly the same amount, they decide to donate the difference between their income to a charity.\nFind the amount they donate in the month.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two space-separated integers\nX and\nY \u2014 the income of Chef and Chefina in a month, respectively.\nOutput Format\nFor each test case, output on a new line, the amount they donate in the month.\nConstraints\n1\u2264T\u2264100\n1\u2264X<Y\u226410\nSample 1:\nInput\nOutput\n4\n1 3\n2 5\n4 5\n2 10\n2\n3\n1\n8\nExplanation:\nTest case\n1: Chef earns\n1 rupees while Chefina earns\n3 rupees. The difference between their income is\n3\u22121=2. Thus, they donate\n2 rupees to charity.\nTest case\n2: Chef earns\n2 rupees while Chefina earns\n5 rupees. The difference between their income is\n5\u22122=3. Thus, they donate\n3 rupees to charity.\nTest case\n3: Chef earns\n4 rupees while Chefina earns\n5 rupees. The difference between their income is\n5\u22124=1. Thus, they donate\n1 rupees to charity.\nTest case\n4: Chef earns\n2 rupees while Chefina earns\n10 rupees. The difference between their income is\n10\u22122=8. Thus, they donate\n8 rupees to charity.",
        "38": "Sum it\nBob received an assignment from his school: he has two numbers\nA and\nB, and he has to find the sum of these two numbers.\nAlice, being a good friend of Bob, told him that the answer to this question is\nC.\nBob doesn't completely trust Alice and asked you to tell him if the answer given by Alice is correct or not.\nIf the answer is correct print \"YES\", otherwise print \"NO\" (without quotes).\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case consists of three space-separated integers\nA,B, and\nC.\nOutput Format\nFor each test case, output on a new line the answer: YES if Alice gave the right answer, and NO otherwise.\nEach character of the output may be printed in either uppercase or lowercase, i.e, the outputs Yes, YES, yEs and yes will be treated as equivalent.\nConstraints\n1\u2264T\u2264100\n0\u2264A,B,C\u2264100\nSample 1:\nInput\nOutput\n3\n1 2 3\n4 5 9\n2 3 6\nYES\nYES\nNO\nExplanation:\nTest case\n1:\n1+2=3, so Alice's answer is correct.\nTest case\n2:\n4+5=9, so Alice's answer is correct.\nTest case\n3:\n2+3=5 which doesn't equal\n6, so Alice's answer is incorrect.",
        "39": "Get Subscription\nChef wants to conduct a lecture for which he needs to set up an online meeting of exactly\nX minutes.\nThe meeting platform supports a meeting of maximum\n30 minutes without subscription and a meeting of unlimited duration with subscription.\nDetermine whether Chef needs to take a subscription or not for setting up the meet.\nInput Format\nFirst line will contain\nT, the number of test cases. Then the test cases follow.\nEach test case contains a single integer\nX - denoting the duration of the lecture.\nOutput Format\nFor each test case, print in a single line, YES if Chef needs to take the subscription, otherwise print NO.\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\nConstraints\n1\u2264T\u2264100\n1\u2264X\u2264100\nSample 1:\nInput\nOutput\n4\n50\n3\n30\n80\nYES\nNO\nNO\nYES\nExplanation:\nTest Case\n1: Without subscription, the platform allows only\n30 minutes of duration. Since Chef needs to conduct a lecture of\n50 minutes, he needs to buy the subscription.\nTest Case\n2: Without subscription, the platform allows\n30 minutes of duration. Since Chef needs to conduct a lecture of\n3 minutes only, he does not need to buy the subscription.\nTest Case\n3: Without subscription, the platform allows\n30 minutes of duration. Since Chef needs to conduct a lecture of\n30 minutes only, he does not need to buy the subscription.\nTest Case\n4: Without subscription, the platform allows only\n30 minutes of duration. Since Chef needs to conduct a lecture of\n80 minutes, he needs to buy the subscription.",
        "40": "Messi vs Ronaldo\nIn Chefland, a football player gets\n2 points for each goal and\n1 point for each assist.\nMessi has\nA goals and\nB assists this season, whereas Ronaldo has\nX goals and\nY assists.\nFind out the player with more points this season.\nInput Format\nThe first and only line of input will contains four space-separated integers\nA,\nB,\nX and\nY, the number of goals and assists that Messi has and the number of goals and assists that Ronaldo has, respectively.\nOutput Format\nPrint a single line containing:\nMessi, if Messi has more points than Ronaldo.\nRonaldo, if Ronaldo has more points than Messi.\nEqual, if both have equal points.\nYou can print each character in uppercase or lowercase. For example, the strings Messi, MESSI, messi, and MeSSi are considered identical.\nConstraints\n0\u2264A,B,X,Y\u2264100\nSample 1:\nInput\nOutput\n40 30 50 10\nEqual\nExplanation:\nMessi has\n40 goals and\n30 assists. Thus, his total points are\n40\u22c52+30=110.\nRonaldo has\n50 goals and\n10 assists. Thus, his total points are\n50\u22c52+10=110.\nBoth have\n110 points.\nSample 2:\nInput\nOutput\n91 22 60 30\nMessi\nExplanation:\nMessi has\n91 goals and\n22 assists. Thus, his total points are\n91\u22c52+22=204.\nRonaldo has\n60 goals and\n30 assists. Thus, his total points are\n60\u22c52+30=150.\nMessi has\n204 points, whereas Ronaldo has\n150.\nSample 3:\nInput\nOutput\n60 30 80 20\nRonaldo\nExplanation:\nMessi has\n60 goals and\n30 assists. Thus, his total points are\n60\u22c52+30=150.\nRonaldo has\n80 goals and\n20 assists. Thus, his total points are\n80\u22c52+20=180.\nMessi has\n150 points, whereas Ronaldo has\n180.",
        "41": "Waiting Time\nChef is eagerly waiting for a piece of information. His secret agent told him that this information would be revealed to him after\nK weeks.\nX days have already passed and Chef is getting restless now. Find the number of remaining days Chef has to wait for, to get the information.\nIt is guaranteed that the information has not been revealed to the Chef yet.\nInput Format\nThe first line of input will contain an integer\nT \u2014 the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains two space-separated integers\nK and\nX, as described in the problem statement.\nOutput Format\nFor each test case, output the number of remaining days that Chef will have to wait for.\nConstraints\n1\u2264T\u2264500\n1\u2264K\u226410\n1\u2264X<7\u22c5K\nSample 1:\nInput\nOutput\n4\n1 5\n1 6\n1 1\n1 2\n2\n1\n6\n5\nExplanation:\nTest case\n1: The information will be revealed to the Chef after\n1 week, which is equivalent to\n7 days. Chef has already waited for\n5 days, so he needs to wait for\n2 more days in order to get the information.\nTest case\n2: The information will be revealed to the Chef after\n1 week, which is equivalent to\n7 days. Chef has already waited for\n6 days, so he needs to wait for\n1 more day in order to get the information.\nTest case\n3: The information will be revealed to the Chef after\n1 week, which is equivalent to\n7 days. Chef has already waited for\n1 day, so he needs to wait for\n6 more days in order to get the information.\nTest case\n4: The information will be revealed to the Chef after\n1 week, which is equivalent to\n7 days. Chef has already waited for\n2 days, so he needs to wait for\n5 more days in order to get the information.",
        "42": "October Marathon\nChef organised a\n30 kilometres marathon in Chefland.\nThe participants receive medals on completing the marathon as following:\nIf the total time taken is less than\n3 hours, they receive a GOLD medal.\nIf the total time taken is greater than equal to\n3 hours but less than\n6 hours, they receive a SILVER medal.\nIf the total time taken is greater than equal to\n6 hours, they receive a BRONZE medal.\nChefina participated in the marathon and completed it in\nX hours. Which medal would she receive?\nInput Format\nThe input consists of a single integer\nX \u2014 the number of hours Chefina took to complete the marathon.\nOutput Format\nOutput the medal Chefina would recieve.\nNote that you may print each character in uppercase or lowercase. For example, the strings GOLD, gold, Gold, and gOlD are considered the same.\nConstraints\n1\u2264X\u226410.\nSample 1:\nInput\nOutput\n2\nGOLD\nExplanation:\nChefina completed the marathon in less than\n3 hours. Thus, she gets a GOLD medal.\nSample 2:\nInput\nOutput\n5\nSILVER\nExplanation:\nChefina took more than\n3 but less than\n6 hours. Thus, she gets a SILVER medal.\nSample 3:\nInput\nOutput\n6\nBRONZE\nExplanation:\nChefina took\n6 hours to complete the marathon. Thus, she gets a BRONZE medal.",
        "43": "Just One More Episode\nChef has to attend an exam that starts in\nX minutes, but of course, watching shows takes priority.\nEvery episode of the show that Chef is watching, is\n24 minutes long.\nIf he starts watching a new episode now, will he finish watching it strictly before the exam starts?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of one line of input, containing a single integer\nX \u2014 the amount of time from now at which Chef's exam starts.\nOutput Format\nFor each test case, output on a new line the answer \u2014 YES if Chef will finish his episode before the exam starts, and NO otherwise.\nEach character of the output may be printed in either lowercase or uppercase, i.e, the string Yes, YES, yes, YeS` will all be treated as equivalent.\nConstraints\n1\u2264T\u2264100\n1\u2264X\u2264100\nSample 1:\nInput\nOutput\n4\n30\n23\n60\n24\nYes\nNo\nYes\nNo\nExplanation:\nTest case\n1: Chef has\n30 minutes of free time, which is easily enough to finish watching a\n24-minute episode. Hence, the answer is Yes.\nTest case\n2: Chef has\n23 minutes of free time, which is not enough to finish watching a\n24-minute episode. Hence, the answer is No.\nTest case\n3: Chef has\n60 minutes of free time, which is easily enough to finish watching a\n24-minute episode. Hence, the answer is Yes.\nTest case\n4: Chef has\n24 minutes of free time. He will finish watching the episode exactly when the exam starts, and not strictly before it. Hence, the answer is No.",
        "44": "Mana Points\nChef is playing a mobile game. In the game, Chef's character Chefario can perform special attacks. However, one special attack costs\nX mana points to Chefario.\nIf Chefario currently has\nY mana points, determine the maximum number of special attacks he can perform.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two space-separated integers\nX and\nY \u2014 the cost of one special attack and the number of mana points Chefario has initially.\nOutput Format\nFor each test case, output the maximum number of special attacks Chefario can perform.\nConstraints\n1\u2264T\u226410\n5\n1\u2264X\u2264100\n1\u2264Y\u22641000\nSample 1:\nInput\nOutput\n3\n10 30\n6 41\n50 2\n3\n6\n0\nExplanation:\nTest case\n1: Chefario can perform a maximum of\n3 special attacks which will cost him\n30 mana points.\nTest case\n2: Chefario can perform a maximum of\n6 special attacks which will cost him\n36 mana points. Note that Chefario can not perform\n7 special attacks as these will cost him\n42 mana points while he has only\n41 mana points.\nTest case\n3: Chefario will not be able to perform any special attacks in this case.",
        "45": "Rain in Chefland\nIn Chefland, precipitation is measured using a rain gauge in millimetre per hour.\nChef categorises rainfall as:\nLIGHT, if rainfall is less than\n3 millimetre per hour.\nMODERATE, if rainfall is greater than equal to\n3 millimetre per hour and less than\n7 millimetre per hour.\nHEAVY if rainfall is greater than equal to\n7 millimetre per hour.\nGiven that it rains at\nX millimetre per hour on a day, find whether the rain is LIGHT, MODERATE, or HEAVY.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single integer\nX \u2014 the rate of rainfall in millimetre per hour.\nOutput Format\nFor each test case, output on a new line, whether the rain is LIGHT, MODERATE, or HEAVY.\nYou may print each character in lowercase or uppercase. For example, LIGHT, light, Light, and liGHT, are all identical.\nConstraints\n1\u2264T\u226420\n1\u2264X\u226420\nSample 1:\nInput\nOutput\n4\n1\n20\n3\n7\nLIGHT\nHEAVY\nMODERATE\nHEAVY\nExplanation:\nTest case\n1: The rate of precipitation is less than\n3. Thus, the rain is LIGHT.\nTest case\n2: The rate of precipitation is greater than equal to\n7. Thus, the rain is HEAVY.\nTest case\n3: The rate of precipitation is greater than equal to\n3 and less than\n7. Thus, the rain is MODERATE.\nTest case\n4: The rate of precipitation is greater than equal to\n7. Thus, the rain is HEAVY.",
        "46": "Bidding\nAlice, Bob and Charlie are bidding for an artifact at an auction.\nAlice bids\nA rupees, Bob bids\nB rupees, and Charlie bids\nC rupees (where\nA,\nB, and\nC are distinct).\nAccording to the rules of the auction, the person who bids the highest amount will win the auction.\nDetermine who will win the auction.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains three integers\nA,\nB, and\nC, \u2014 the amount bid by Alice, Bob, and Charlie respectively.\nOutput Format\nFor each test case, output who (out of Alice, Bob, and Charlie) will win the auction.\nYou may print each character of Alice, Bob, and Charlie in uppercase or lowercase (for example, ALICE, aliCe, aLIcE will be considered identical).\nConstraints\n1\u2264T\u22641000\n1\u2264A,B,C\u22641000\nA,\nB, and\nC are distinct.\nSample 1:\nInput\nOutput\n4\n200 100 400\n155 1000 566\n736 234 470\n124 67 2\nCharlie\nBob\nAlice\nAlice\nExplanation:\nTest Case\n1: Charlie wins the auction since he bid the highest amount.\nTest Case\n2: Bob wins the auction since he bid the highest amount.\nTest Case\n3: Alice wins the auction since she bid the highest amount.\nTest Case\n4: Alice wins the auction since she bid the highest amount.",
        "47": "Overspeeding Fine\nChef was driving on a highway at a speed of\nX km\/hour.\nTo avoid accidents, there are fine imposed on overspeeding as follows:\nNo fine if the speed of the car\n\u226470 km\/hour.\nRs\n500 fine if the speed of the car is strictly greater than\n70 and\n\u2264100.\nRs\n2000 fine if the speed of the car is strictly greater than\n100.\nDetermine the fine Chef needs to pay.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single integer\nX denoting the speed of Chef's car.\nOutput Format\nFor each test case, output the fine paid by Chef.\nConstraints\n1\u2264T\u2264200\n1\u2264X\u2264200\nSample 1:\nInput\nOutput\n7\n40\n110\n70\n100\n69\n101\n85\n0\n2000\n0\n500\n0\n2000\n500\nExplanation:\nTest case\n1: The speed is\n\u226470. Thus, Chef does not need to pay any fine.\nTest case\n2: The speed is greater than\n100. Thus, Chef needs to pay\n2000 as fine.\nTest case\n3: The speed is\n\u226470. Thus, Chef does not need to pay any fine.\nTest case\n4: The speed is greater than\n70 and\n\u2264100. Thus, Chef needs to pay\n500 as fine amount.\nTest case\n5: The speed is\n\u226470. Thus, Chef does not need to pay any fine.\nTest case\n6: The speed is greater than\n100. Thus, Chef needs to pay\n2000 as fine.\nTest case\n7: The speed is greater than\n70 and\n\u2264100. Thus, Chef needs to pay\n500 as fine amount.",
        "48": "Chess Time\nChef has recently started playing chess, and wants to play as many games as possible.\nHe calculated that playing one game of chess takes at least\n20 minutes of his time.\nChef has\nN hours of free time. What is the maximum number of complete chess games he can play in that time?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line containing a single integer,\nN.\nOutput Format\nFor each test case, output on a new line the maximum number of complete chess games Chef can play in\nN hours.\nConstraints\n1\u2264T\u226410\n1\u2264N\u226410\nSample 1:\nInput\nOutput\n4\n1\n10\n7\n3\n3\n30\n21\n9\nExplanation:\nTest case\n1: If every game Chef plays takes\n20 minutes, he can play\n3 games in one hour.\nTest case\n2: If every game Chef plays takes\n20 minutes, he can play\n30 games in\n10 hours.\nTest case\n3: If every game Chef plays takes\n20 minutes, he can play\n21 games in\n7 hours.\nTest case\n4: If every game Chef plays takes\n20 minutes, he can play\n9 games in\n3 hours.",
        "49": "Passes for Fair\nThere is a fair going on in Chefland. Chef wants to visit the fair along with his\nN friends. Chef manages to collect\nK passes for the fair. Will Chef be able to enter the fair with all his\nN friends?\nA person can enter the fair using one pass, and each pass can be used by only one person.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line containing two space-separated integers\nN,K.\nOutput Format\nFor each test case, print on a new line YES if Chef will be able to enter the fair with all his\nN friends and NO otherwise.\nYou may print each character of the string in either uppercase or lowercase (for example, the strings yEs, yes, Yes, and YES will all be treated as identical).\nConstraints\n1\u2264T\u2264100\n1\u2264N,K\u2264100\nSample 1:\nInput\nOutput\n4\n5 8\n6 3\n2 2\n1 2\nYES\nNO\nNO\nYES\nExplanation:\nTest case\n1: Chef needs\n5 passes for his friends and one pass for himself and he collected\n8 passes. Thus he will be able to enter the fair with all his friends.\nTest case\n2: Chef needs\n6 passes for his friends and one pass for himself while he collected only\n3 passes. Thus he will not be able to enter the fair with all his friends, only three of them can enter the fair.\nTest case\n3: Chef needs\n2 passes for his friends and one pass for himself while he collected only\n2 passes. Thus either Chef or one of his friends can't enter the fair.\nTest case\n4: Chef needs a total of\n2 passes, one for himself and one for his friend. He collected\n2 passes. Thus he will be able to enter the fair with his friend.",
        "50": "Read Pages\nChef has started studying for the upcoming test. The textbook has\nN pages in total. Chef wants to read at most\nX pages a day for\nY days.\nFind out whether it is possible for Chef to complete the whole book.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case contains three space-separated integers\nN,X, and\nY \u2014 the number of pages, the number of pages Chef can read in a day, and the number of days.\nOutput Format\nFor each test case, output on a new line, YES, if Chef can complete the whole book in given time, and NO otherwise.\nYou may print each character of the string in uppercase or lowercase. For example, Yes, YES, yes, and yES are all considered identical.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u2264100\n1\u2264X,Y\u226410\nSample 1:\nInput\nOutput\n4\n5 2 3\n10 3 3\n7 7 1\n3 2 1\nYES\nNO\nYES\nNO\nExplanation:\nTest case\n1: Chef can read two pages on the first day, two on the second day, and the remaining one on the third day.\nTest case\n2: Chef cannot complete all ten pages in three days.\nTest case\n3: Chef can read all seven pages in one day.\nTest case\n4: Chef cannot complete all three pages in one day.",
        "51": "Couple Game\nThere are\nG girl and\nB boy students at IIT (BHU) such that\nB>G.\nIf ICM were a team game where teams could only be of size\n2, having exactly\n1 girl student and\n1 boy student, what would be the minimum number of boy students from IIT (BHU) who would not be able to participate?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case contains two space-separated integers\nG and\nB, the number of girl and boy students at IIT (BHU) respectively.\nOutput Format\nFor each test case, output a single integer on a new line, the minimum number of boy students from IIT (BHU) who would not be able to participate.\nConstraints\n1\u2264T\u2264100\n1\u2264G<B\u2264100\nSample 1:\nInput\nOutput\n3\n1 3\n2 4\n3 10\n2\n2\n7\nExplanation:\nTest case\n1: There is only\n1 girl and\n3 boys. So, one team can be formed, and minimum\n2 boys will be left behind.\nTest case\n2: There are\n2 girls and\n4 boys. So, maximum\n2 teams can be formed, and minimum\n2 boys will be left behind.\nTest case\n3: There are\n3 girls and\n10 boys. So, maximum\n3 teams can be formed, and minimum\n7 boys will be left behind.",
        "52": "Air Quality Index\nIn the light of G-20 summit, government has decided to keep the average air quality index (AQI) strictly below\n100.\nOn some random day, Chef measures the AQI and found the value to be\nX.\nFind whether the government was able to keep the AQI within limits.\nInput Format\nThe input consists of an integer\nX \u2014 the AQI Chef measured.\nOutput Format\nOutput YES, if the government was able to keep the AQI within limits and NO otherwise.\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\nConstraints\n1\u2264X\u2264150\nSample 1:\nInput\nOutput\n50\nYES\nExplanation:\nThe AQI is strictly less than\n100. Thus, the government was able to keep the AQI within limits.\nSample 2:\nInput\nOutput\n100\nNO\nExplanation:\nThe AQI is equal to\n100. Thus, the government was not able to keep the AQI within limits.\nSample 3:\nInput\nOutput\n99\nYES\nExplanation:\nThe AQI is strictly less than\n100. Thus, the government was able to keep the AQI within limits.\nSample 4:\nInput\nOutput\n145\nNO\nExplanation:\nThe AQI is greater than\n100. Thus, the government was not able to keep the AQI within limits.",
        "53": "Fever\nChef is not feeling well today. He measured his body temperature using a thermometer and it came out to be\nX \u00b0F.\nA person is said to have fever if his body temperature is strictly greater than\n98 \u00b0F.\nDetermine if Chef has fever or not.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains one integer\nX - the body temperature of Chef in \u00b0F.\nOutput Format\nFor each test case, output YES if Chef has fever. Otherwise, output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n1\u2264T\u226410\n94\u2264X\u2264103\nSample 1:\nInput\nOutput\n3\n98\n100\n96\nNO\nYES\nNO\nExplanation:\nTest Case 1: Since\nX=98 is not greater than\n98, Chef does not have fever.\nTest Case 2: Since\nX=100 is greater than\n98, Chef has fever.\nTest Case 3: Since\nX=96 is not greater than\n98, Chef does not have fever.",
        "54": "Sleep deprivation\nA person is said to be sleep deprived if he slept strictly less than\n7 hours in a day.\nChef was only able to sleep\nX hours yesterday. Determine if he is sleep deprived or not.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains one integer\nX \u2014 the number of hours Chef slept.\nOutput Format\nFor each test case, output YES if Chef is sleep-deprived. Otherwise, output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n1\u2264T\u226420\n1\u2264X\u226415\nSample 1:\nInput\nOutput\n3\n4\n7\n10\nYES\nNO\nNO\nExplanation:\nTest Case 1: Since\n4<7, Chef is sleep deprived.\nTest Case 2: Since\n7\u22657, Chef is not sleep deprived.\nTest Case 3: Since\n10\u22657, Chef is not sleep deprived.",
        "55": "MATH1 Enrolment\nFor the upcoming semester, the admins of your university decided to keep a total of\nX seats for the MATH-1 course. A student interest survey was conducted by the admins and it was found that\nY students were interested in taking up the MATH-1 course.\nFind the minimum number of extra seats that the admins need to add into the MATH-1 course to make sure that every student who is interested in taking the course would be able to do so.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two-space separated integers on a single line,\nX and\nY \u2014 the current number of seats up for enrolment and the number of students interested in taking up the course in the upcoming semester, respectively.\nOutput Format\nFor each test case, output on a new line the minimum number of seats required to be added.\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y\u226410\n5\nSample 1:\nInput\nOutput\n4\n1 1\n12 34\n50 49\n49 50\n0\n22\n0\n1\nExplanation:\nTest case\n1: Exactly\n1 seat is available for enrolment, and exactly\n1 student is interested in taking up the course, hence addition of more seats is not required.\nTest case\n2:\n12 seats are available for enrolment but\n34 students are interested in taking up the course, hence the admins would have to add\n34\u221212=22 more seats to make sure that every student interested in the course gets a seat.\nTest case\n3:\n50 seats are available for enrolment and\n49 students are interested in taking up the course, hence addition of more seats is not required.\nTest case\n4:\n49 seats are available for enrolment, but\n50 students are interested in taking up the course, hence the admins would have to add\n50\u221249=1 more seat to make sure that every student interested in the course gets a seat.",
        "56": "Chef and Chapters\nThis semester, Chef took\nX courses. Each course has\nY units and each unit has\nZ chapters in it.\nFind the total number of chapters Chef has to study this semester.\nInput Format\nThe first line will contain\nT, the number of test cases. Then the test cases follow.\nEach test case consists of a single line of input, containing three space-separated integers\nX,Y, and\nZ.\nOutput Format\nFor each test case, output in a single line the total number of chapters Chef has to study this semester.\nConstraints\n1\u2264T\u22641000\n1\u2264X,Y,Z\u22641000\nSample 1:\nInput\nOutput\n3\n1 1 1\n2 1 2\n1 2 3\n1\n4\n6\nExplanation:\nTest case\n1: There is only\n1 course with\n1 unit. The unit has\n1 chapter. Thus, the total number of chapters is\n1.\nTest case\n2: There are\n2 courses with\n1 unit each. Thus, there are\n2 units. Each unit has\n2 chapters. Thus, the total number of chapters is\n4.\nTest case\n3: There is only\n1 course with\n2 units. Each unit has\n3 chapters. Thus, the total number of chapters is\n6.",
        "57": "Water Requirement\nFinally, after purchasing a water cooler during the April long challenge, Chef noticed that his water cooler requires\n2 liters of water to cool for one hour.\nHow much water (in liters) would be required by the cooler to cool for\nN hours?\nInput Format\nThe first line of input will contain an integer\nT \u2014 the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains an integer\nN, as described in the problem statement.\nOutput Format\nFor each test case, output the number of liters of water required by the water cooler to cool for\nN hours.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u22641000\nSample 1:\nInput\nOutput\n2\n1\n2\n2\n4\nExplanation:\nTest case\n1: As mentioned in the problem statement,\n2 liters of water is required by the water cooler to cool for\n1 hour.\nTest case\n2:\n4 liters of water is required by the water cooler to cool for\n2 hours.",
        "58": "Lunchtime\nChef has his lunch only between\n1 pm and\n4 pm (both inclusive).\nGiven that the current time is\nX pm, find out whether it is lunchtime for Chef.\nInput Format\nThe first line of input will contain a single integer\nT, the number of test cases. Then the test cases follow.\nEach test case contains a single line of input, containing one integer\nX.\nOutput Format\nFor each test case, print in a single line\nYES if it is lunchtime for Chef. Otherwise, print\nNO.\nYou may print each character of the string in either uppercase or lowercase (for example, the strings\nYeS,\nyEs,\nyes and\nYES will all be treated as identical).\nConstraints\n1\u2264T\u226412\n1\u2264X\u226412\nSample 1:\nInput\nOutput\n3\n1\n7\n3\nYES\nNO\nYES\nExplanation:\nTest case\n1: Lunchtime is between\n1 pm and\n4 pm (both inclusive). Since\n1 pm lies within lunchtime, the answer is\nYES.\nTest case\n2: Lunchtime is between\n1 pm and\n4 pm (both inclusive). Since\n7 pm lies outside lunchtime, the answer is\nNO.\nTest case\n3: Lunchtime is between\n1 pm and\n4 pm (both inclusive). Since\n3 pm lies within lunchtime, the answer is\nYES.",
        "59": "Good Investment or Not\nChef has invested his money at an interest rate of\nX percent per annum while the current inflation rate is\nY percent per annum.\nAn investment is called good if and only if the interest rate of the investment is at least twice of the inflation rate.\nDetermine whether the investment made by Chef is good or not.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two integers\nX and\nY, the interest rate and the current inflation rate respectively.\nOutput Format\nFor each test case, output YES if the investment is good, NO otherwise.\nYou can output any letter in any case. For example YES, yes, yES are all considered same.\nConstraints\n1\u2264T\u2264400\n1\u2264X,Y\u226420\nSample 1:\nInput\nOutput\n5\n7 4\n6 3\n2 4\n10 10\n20 1\nNO\nYES\nNO\nNO\nYES\nExplanation:\nTest case\n1: The interest rate is\n7 and the current inflation rate is\n4. Since the interest rate is less than twice of current inflation rate, the investment is not good.\nTest case\n2: The interest rate is\n6 and the current inflation rate is\n3. Since the interest rate is equal to twice of current inflation rate, the investment is good.\nTest case\n3: The interest rate is\n2 and the current inflation rate is\n4. Since the interest rate is less than twice of current inflation rate, the investment is not good.\nTest case\n4: The interest rate is\n10 and the current inflation rate is\n10. Since the interest rate is less than twice of current inflation rate, the investment is not good.\nTest case\n5: The interest rate is\n20 and the current inflation rate is\n1. Since the interest rate is greater than twice of current inflation rate, the investment is good.",
        "60": "Final Population\nThere were initially\nX million people in a town, out of which\nY million people left the town and\nZ million people immigrated to this town.\nDetermine the final population of town in millions.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case consists of three integers\nX,\nY and\nZ.\nOutput Format\nFor each test case, output the final population of the town in millions.\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y,Z\u226410\nY\u2264X\nSample 1:\nInput\nOutput\n4\n3 1 2\n2 2 2\n4 1 8\n10 1 10\n4\n2\n11\n19\nExplanation:\nTest case\n1: The initial population of the town was\n3 million, out of which\n1 million people left and\n2 million people entered the town. So, final population\n=3\u22121+2=4 million.\nTest case\n2: The initial population of the town was\n2 million, out of which\n2 million left and\n2 million immigrated. The final population is thus\n2+2\u22122=2 million.",
        "61": "Chef gives Party\nChef wants to give a burger party to all his\nN friends i.e. he wants to buy one burger for each of his friends.\nThe cost of each burger is\nX rupees while Chef has a total of\nK rupees.\nDetermine whether he has enough money to buy a burger for each of his friends or not.\nInput Format\nThe first line contains a single integer\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains the three integers\nN,\nX, and\nK - the number of Chef's friends, the cost of each burger, and the total money Chef has, respectively.\nOutput Format\nFor each test case, output YES if the Chef can give a party to all his\nN friends. Otherwise, output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n1\u2264T\u22641000\n1\u2264N,X\u2264100\n1\u2264K\u226410000\nSample 1:\nInput\nOutput\n4\n5 10 70\n5 10 40\n10 40 400\n14 14 150\nYES\nNO\nYES\nNO\nExplanation:\nTest case\n1: Chef has\n5 friends. The cost of buying a burger for each of them will be\n10\u00d75=50 while Chef has\n70 rupees. Therefore, he can buy a burger for all of them.\nTest case\n2: Chef has\n5 friends. The cost of buying a burger for each of them will be\n10\u00d75=50 while Chef has\n40 rupees. Therefore, he can not buy a burger for all of them.\nTest case\n3: Chef has\n10 friends. The cost of buying a burger for each of them will be\n40\u00d710=400 and Chef has\n400 rupees. Therefore, he can buy a burger for all of them.\nTest case\n4: Chef has\n14 friends. The cost of buying a burger for each of them will be\n14\u00d714=196 while Chef has\n150 rupees. Therefore, he can not buy a burger for all of them.",
        "62": "Time Complexity\nA sorting algorithm\nA is said to have more time complexity than a sorting algorithm\nB if it uses more number of comparisons for sorting the same array than algorithm\nB.\nGiven that algorithm\nA uses\nX comparisons to sort an array and algorithm\nB uses\nY comparisons to sort the same array, find whether algorithm\nA has more time complexity.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two space-separated integers\nX and\nY \u2014 the number of comparisons used by algorithms\nA and\nB to sort the array respectively.\nOutput Format\nFor each test case, output on a new line, YES, if the algorithm\nA has more time complexity than\nB and NO otherwise.\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y\u2264100\nSample 1:\nInput\nOutput\n4\n9 9\n15 7\n10 19\n21 20\nNO\nYES\nNO\nYES\nExplanation:\nTest case\n1: The number of comparisons used by algorithm\nA is\n9 and that used by\nB is also\n9. Since the number of comparisons used by\nA is not more than that of\nB,\nA does not have more time complexity than\nB.\nTest case\n2: The number of comparisons used by algorithm\nA is\n15 and that used by\nB is\n7. Since the number of comparisons used by\nA is more than that of\nB,\nA does have more time complexity than\nB.\nTest case\n3: The number of comparisons used by algorithm\nA is\n10 and that used by\nB is\n19. Since the number of comparisons used by\nA is not more than that of\nB,\nA does not have more time complexity than\nB.\nTest case\n4: The number of comparisons used by algorithm\nA is\n21 and that used by\nB is\n20. Since the number of comparisons used by\nA is more than that of\nB,\nA does have more time complexity than\nB.",
        "63": "Interior Design\nChef decided to redecorate his house, and now needs to decide between two different styles of interior design.\nFor the first style, tiling the floor will cost\nX\n1\nrupees and painting the walls will cost\nY\n1\nrupees.\nFor the second style, tiling the floor will cost\nX\n2\nrupees and painting the walls will cost\nY\n2\nrupees.\nChef will choose whichever style has the lower total cost. How much will Chef pay for his interior design?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line of input, containing\n4 space-separated integers\nX\n1\n,Y\n1\n,X\n2\n,Y\n2\nas described in the statement.\nOutput Format\nFor each test case, output on a new line the amount Chef will pay for interior design.\nConstraints\n1\u2264T\u2264100\n1\u2264X\n1\n,Y\n1\n,X\n2\n,Y\n2\n\u2264100\nSample 1:\nInput\nOutput\n4\n10 20 9 25\n10 20 9 20\n10 20 20 10\n100 43 85 61\n30\n29\n30\n143\nExplanation:\nTest case\n1: The first style costs\n10+20=30 rupees, and the second costs\n9+25=34 rupees. The first is cheaper, so Chef will pay\n30 rupees.\nTest case\n2: The first style costs\n10+20=30 rupees, and the second costs\n9+20=29 rupees. The second is cheaper, so Chef will pay\n29 rupees.\nTest case\n3: The first style costs\n10+20=30 rupees, and the second costs\n20+10=30 rupees. Both styles cost the same, so Chef is always going to pay\n30 rupees.\nTest case\n4: The first style costs\n100+43=143 rupees, and the second costs\n85+61=146 rupees. The first is cheaper, so Chef will pay\n143 rupees.",
        "64": "Car Trip\nChef rented a car for a day.\nUsually, the cost of the car is Rs\n10 per km. However, since Chef has booked the car for the whole day, he needs to pay for at least\n300 kms even if the car runs less than\n300 kms.\nIf the car ran\nX kms, determine the cost Chef needs to pay.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single integer\nX - denoting the number of kms Chef travelled.\nOutput Format\nFor each test case, output the cost Chef needs to pay.\nConstraints\n1\u2264T\u2264100\n1\u2264X\u22641000\nSample 1:\nInput\nOutput\n5\n800\n3\n299\n301\n300\n8000\n3000\n3000\n3010\n3000\nExplanation:\nTest case\n1: The car runs for\n800 kms. Thus, he needs to pay\n800\u22c510=8000 rupees.\nTest case\n2: The car runs for\n3 kms. However, since Chef booked the car for whole day, he needs to pay for at least\n300 kms. Thus, he needs to pay\n300\u22c510=3000 rupees.\nTest case\n3: The car runs for\n299 kms. However, since Chef booked the car for whole day, he needs to pay for at least\n300 kms. Thus, he needs to pay\n300\u22c510=3000 rupees.\nTest case\n4: The car runs for\n301 kms. Thus, he needs to pay\n301\u22c510=3010 rupees.\nTest case\n5: The car runs for\n300 kms. Thus, he needs to pay\n300\u22c510=3000 rupees.",
        "65": "Multivitamin Tablets\nThe doctor prescribed Chef to take a multivitamin tablet\n3 times a day for the next\nX days.\nChef already has\nY multivitamin tablets.\nDetermine if Chef has enough tablets for these\nX days or not.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two space-separated integers\nX and\nY \u2014 the number of days Chef needs to take tablets and the number of tablets Chef already has.\nOutput Format\nFor each test case, output YES if Chef has enough tablets for these\nX days. Otherwise, output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n1\u2264T\u22642000\n1\u2264X\u2264100\n0\u2264Y\u22641000\nSample 1:\nInput\nOutput\n4\n1 10\n12 0\n10 29\n10 30\nYES\nNO\nNO\nYES\nExplanation:\nTest Case 1: Chef has\n10 tablets and Chef needs\n3 tablets for\n1 day. Therefore Chef has enough tablets.\nTest Case 2: Chef has\n0 tablets and Chef needs\n36 tablets for\n12 days. Therefore Chef does not have enough tablets.\nTest Case 3: Chef has\n29 tablets and Chef needs\n30 tablets for\n10 days. Therefore Chef does not have enough tablets.\nTest Case 4: Chef has\n30 tablets and Chef needs\n30 tablets for\n10 days. Therefore Chef has enough tablets.",
        "66": "Six Friends\nSix friends go on a trip and are looking for accommodation. After looking for hours, they find a hotel which offers two types of rooms \u2014 double rooms and triple rooms. A double room costs Rs.\nX, while a triple room costs Rs.\nY.\nThe friends can either get three double rooms or get two triple rooms. Find the minimum amount they will have to pay to accommodate all six of them.\nInput Format\nThe first line contains a single integer\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two integers\nX and\nY - the cost of a double room and the cost of a triple room.\nOutput Format\nFor each testcase, output the minimum amount required to accommodate all the six friends.\nConstraints\n1\u2264T\u2264100\n1\u2264X<Y\u2264100\nSample 1:\nInput\nOutput\n3\n10 15\n6 8\n4 8\n30\n16\n12\nExplanation:\nTest case 1: The friends can take three double rooms and thus pay a total of Rs.\n30.\nTest case 2: The friends can take two triple rooms and thus pay a total of Rs.\n16.\nTest case 3: The friends can take three double rooms and thus pay a total of Rs.\n12.",
        "67": "Chef and Wire Frames\nChef has a rectangular plate of length\nNcm and width\nMcm. He wants to make a wireframe around the plate. The wireframe costs\nX rupees per cm.\nDetermine the cost Chef needs to incur to buy the wireframe.\nInput Format\nFirst line will contain\nT, the number of test cases. Then the test cases follow.\nEach test case consists of a single line of input, containing three space-separated integers\nN,M, and\nX \u2014 the length of the plate, width of the plate, and the cost of frame per cm.\nOutput Format\nFor each test case, output in a single line, the price Chef needs to pay for the wireframe.\nConstraints\n1\u2264T\u22641000\n1\u2264N,M,X\u22641000\nSample 1:\nInput\nOutput\n3\n10 10 10\n23 3 12\n1000 1000 1000\n400\n624\n4000000\nExplanation:\nTest case\n1: The total length of the frame is\n2\u22c510+2\u22c510=40 cms. Since the cost is\n10 per cm, the total cost would be\n10\u22c540=400.\nTest case\n2: The total length of the frame is\n2\u22c523+2\u22c53=52 cms. Since the cost is\n12 per cm, the total cost would be\n52\u22c512=624.\nTest case\n3: The total length of the frame is\n2\u22c51000+2\u22c51000=4000 cms. Since the cost is\n1000 per cm, the total cost would be\n4000\u22c51000=4000000.",
        "68": "Minimum Coins\nThere are only\n2 type of denominations in Chefland:\nCoins worth\n1 rupee each\nNotes worth\n10 rupees each\nChef wants to pay his friend exactly\nX rupees. What is the minimum number of coins Chef needs to pay exactly\nX rupees?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line of input containing a single integer\nX.\nOutput Format\nFor each test case, output on a new line the minimum number of coins Chef needs to pay exactly\nX rupees.\nConstraints\n1\u2264T\u22641000\n1\u2264X\u22641000\nSample 1:\nInput\nOutput\n4\n53\n100\n9\n11\n3\n0\n9\n1\nExplanation:\nTest case\n1: Chef can use\n5 notes and\n3 coins in the optimal case.\nTest case\n2: Chef can use\n10 notes and\n0 coins in the optimal case.\nTest case\n3: Chef can only use\n9 coins.\nTest case\n4: Chef can use\n1 note and\n1 coin in the optimal case.",
        "69": "Spice Level\nEach item in Chef\u2019s menu is assigned a spice level from\n1 to\n10. Based on the spice level, the item is categorised as:\nMILD: If the spice level is less than\n4.\nMEDIUM: If the spice level is greater than equal to\n4 but less than\n7.\nHOT: If the spice level is greater than equal to\n7.\nGiven that the spice level of an item is\nX, find the category it lies in.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of an integer\nX \u2014 the spice level of the item.\nOutput Format\nFor each test case, output on a new line, the category that the item lies in.\nYou may print each character in uppercase or lowercase. For example, HOT, hot, Hot, and hOT are all considered the same.\nConstraints\n1\u2264T\u22641000\n1\u2264X\u226410\nSample 1:\nInput\nOutput\n4\n4\n1\n6\n9\nMEDIUM\nMILD\nMEDIUM\nHOT\nExplanation:\nTest case\n1: The spice level is greater than\n4 but less than\n7. Thus, it is in MEDIUM category.\nTest case\n2: The spice level is less than\n4. Thus, it is in MILD category.\nTest case\n3: The spice level is greater than\n4 but less than\n7. Thus, it is in MEDIUM category.\nTest case\n4: The spice level is greater than\n7. Thus, it is in HOT category.",
        "70": "The Gift\nOm has\nX rupees. He wants to gift a laptop worth\nN rupees to his girlfriend.\nWe know that Om is the technical secretary of IIIT-A and has access to the Gymkhana funds of IIIT-A. Currently there are\nM rupees in the fund and Om can use the fund as much as he wants.\nFind whether Om can gift his girlfriend a new laptop.\nInput Format\nThe first and only line of input contains three space-separated integers\nX,\nN, and\nM \u2014 the amount Om has, the price of the laptop, and the amount present in the Gymkhana fund respectively.\nOutput Format\nFor each input, output YES if Om can buy the laptop and NO otherwise.\nYou may print each character in uppercase or lowercase. For example YES, Yes, yes, and yES are all considered the same.\nConstraints\n1\u2264X,N,M\u226410\n3\nSample 1:\nInput\nOutput\n5 10 15\nYES\nExplanation:\nOm uses\n5 rupees from Gymkhana fund. So, the amount he has is\n5+5=10 rupees. He can buy the laptop with cost\n10 rupees.\nSample 2:\nInput\nOutput\n4 50 7\nNO\nExplanation:\nEven if Om uses the whole Gymkhana fund, he won't be able to buy the laptop.",
        "71": "Reach Home\nChef is hungry and wants to reach home.\nChef can travel up to\n5 kilometres on\n1 litre of fuel on his motorcycle.\nCurrently, his motorcycle is filled with\nX litres of fuel and his home is\nY kilometres away.\nDetermine whether Chef can reach his home on his motorcycle or not.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case contains two space-separated integers\nX and\nY \u2014 the amount of fuel in Chef\u2019s motorcycle and the distance to Chef\u2019s home in kilometres.\nOutput Format\nFor each test case, output YES, if Chef can reach home on his motorcycle. Otherwise output NO.\nYou can output each character of the answer in uppercase or lowercase. For example, the strings yEs, yes, Yes, and YES are considered the same.\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y\u22641000\nSample 1:\nInput\nOutput\n4\n2 10\n3 17\n4 2\n6 45\nYES\nNO\nYES\nNO\nExplanation:\nTest case\n1: With\n2 litres of fuel, Chef can go up to\n10 kilometres. Since his home is\n10 kilometres away, he can reach his home on his motorcycle.\nTest case\n2: With\n3 litres of fuel, Chef can go up to\n15 kilometres. Since his home is\n17 kilometres away, he cannot reach his home on his motorcycle.\nTest case\n3: With\n4 litres of fuel, Chef can go up to\n20 kilometres. Since his home is\n2 kilometres away, he can reach his home on his motorcycle.\nTest case\n4: With\n6 litres of fuel, Chef can go up to\n30 kilometres. Since his home is\n45 kilometres away, he cannot reach his home on his motorcycle.",
        "72": "Donation Rewards\nOn the occasion of World Blood Donor Day, Chef has organized an event to reward regular blood donars in Chefland.\nIf the donor has made less than or equal to\n3 donations, they receive a BRONZE donor badge.\nIf the donor has made more than\n3 but less than equal to\n6 donations, they receive a SILVER donor badge.\nIf the donor has made more than\n6 donations, they receive a GOLD donor badge.\nGiven that a person has made\nX donations, find the badge they receive.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case contains an integer\nX, denoting the number of blood donations the person has made.\nOutput Format\nFor each test case, output on a new line:\nBRONZE, if the person has made less than or equal to\n3 donations;\nSILVER, if the person has made more than\n3 but less than equal to\n6 donations;\nGOLD, if the person has made more than\n6 donations.\nEach character can be printed in uppercase or lowercase. For example, GOLD, gold, Gold, and gOlD are considered identical.\nConstraints\n1\u2264T\u2264100\n1\u2264X\u226410\nSample 1:\nInput\nOutput\n4\n1\n3\n5\n7\nBRONZE\nBRONZE\nSILVER\nGOLD\nExplanation:\nTest case\n1: The person has made less than equal to\n3 donations. Thus they receive bronze badge.\nTest case\n2: The person has made less than equal to\n3 donations. Thus they receive bronze badge.\nTest case\n3: The person has made more than\n3 but less than equal to\n6 donations. Thus they receive silver badge.\nTest case\n4: The person has made more than\n6 donations. Thus they receive gold badge.",
        "73": "True and False Paper\nAlice wrote an exam containing\nN true or false questions (i.e. questions whose answer is either true or false). Each question is worth\n1 mark and there is no negative marking in the examination. Alice scored\nK marks out of\nN.\nBob wrote the same exam but he marked each and every question as the opposite of what Alice did, i.e, for whichever questions Alice marked true, Bob marked false and for whichever questions Alice marked false, Bob marked true.\nDetermine the score of Bob.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two space-separated integers\nN and\nK \u2014 the total number of questions in the exam and the score of Alice.\nOutput Format\nFor each test case, output on a new line the score of Bob.\nConstraints\n1\u2264T\u22642000\n1\u2264N\u2264100\n0\u2264K\u2264N\nSample 1:\nInput\nOutput\n3\n1 1\n50 0\n100 76\n0\n50\n24\nExplanation:\nTest case\n1: There was one question in the exam and Alice answered it correctly. This means that Bob will surely answer it incorrectly. Therefore Bob's score is zero.\nTest case\n2: Alice answered all the questions incorrectly, and so Bob will surely answer all the questions correctly. Therefore Bob's score is\n50.",
        "74": "The Cheaper Cab\nChef has to travel to another place. For this, he can avail any one of two cab services.\nThe first cab service charges\nX rupees.\nThe second cab service charges\nY rupees.\nChef wants to spend the minimum amount of money. Which cab service should Chef take?\nInput Format\nThe first line will contain\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two integers\nX and\nY - the prices of first and second cab services respectively.\nOutput Format\nFor each test case, output FIRST if the first cab service is cheaper, output SECOND if the second cab service is cheaper, output ANY if both cab services have the same price.\nYou may print each character of FIRST, SECOND and ANY in uppercase or lowercase (for example, any, aNy, Any will be considered identical).\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y\u2264100\nSample 1:\nInput\nOutput\n3\n30 65\n42 42\n90 50\nFIRST\nANY\nSECOND\nExplanation:\nTest case\n1: The first cab service is cheaper than the second cab service.\nTest case\n2: Both the cab services have the same price.\nTest case\n3: The second cab service is cheaper than the first cab service.",
        "75": "Discount\nAlice buys a toy with a selling price of\n100 rupees. There is a discount of\nx percent on the toy. Find the amount Alice needs to pay for it.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case contains a single integer,\nx \u2014 the discount on the toy.\nOutput Format\nFor each test case, output on a new line the price that Alice needs to pay.\nConstraints\n1\u2264T\u2264100\n0\u2264x<100\nSample 1:\nInput\nOutput\n4\n5\n9\n11\n21\n95\n91\n89\n79\nExplanation:\nTest case\n1: The discount is\n5 percent, i.e.\n5 rupees. So, Alice will have to pay\n100\u22125=95 rupees.",
        "76": "Height of Rationals\nIn a recent breakthrough in mathematics, the proof utilized a concept called Height.\nConsider a fraction\nb\na\n. Its Height is defined as the maximum of its numerator and denominator. So, for example, the Height of\n19\n3\nwould be\n19, and the Height of\n4\n27\nwould be\n27.\nGiven\na and\nb, find the Height of\nb\na\n.\nInput Format\nThe only line of input contains two integers,\na and\nb.\nOutput Format\nOutput a single integer, which is the Height of\nb\na\n.\nConstraints\n1\u2264a,b\u2264100\na and\nb do not have any common factors.\nSample 1:\nInput\nOutput\n3 19\n19\nExplanation:\nThe maximum of\n{3,19} is\n19. Hence the Height of\n19\n3\nis\n19.\nSample 2:\nInput\nOutput\n27 4\n27\nExplanation:\nThe maximum of\n{27,4} is\n27. Hence the Height of\n4\n27\nis\n27.",
        "77": "Instagram\nChef categorises an instagram account as spam, if, the following count of the account is more than\n10 times the count of followers.\nGiven the following and follower count of an account as\nX and\nY respectively, find whether it is a spam account.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two space-separated integers\nX and\nY \u2014 the following and follower count of an account, respectively.\nOutput Format\nFor each test case, output on a new line, YES, if the account is spam and NO otherwise.\nYou may print each character of the string in uppercase or lowercase. For example, the strings YES, yes, Yes and yES are identical.\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y\u2264100\nSample 1:\nInput\nOutput\n4\n1 10\n10 1\n11 1\n97 7\nNO\nNO\nYES\nYES\nExplanation:\nTest case\n1: The following count is\n1 while the follower count is\n10. Since the following count is not more than\n10 times the follower count, the account is not spam.\nTest case\n2: The following count is\n10 while the follower count is\n1. Since the following count is not more than\n10 times the follower count, the account is not spam.\nTest case\n3: The following count is\n11 while the follower count is\n1. Since the following count is more than\n10 times the follower count, the account is spam.\nTest case\n4: The following count is\n97 while the follower count is\n7. Since the following count is more than\n10 times the follower count, the account is spam.",
        "78": "Volume Control\nChef is watching TV. The current volume of the TV is\nX. Pressing the volume up button of the TV remote increases the volume by\n1 while pressing the volume down button decreases the volume by\n1. Chef wants to change the volume from\nX to\nY. Find the minimum number of button presses required to do so.\nInput Format\nThe first line contains a single integer\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two integers\nX and\nY - the initial volume and final volume of the TV.\nOutput Format\nFor each test case, output the minimum number of times Chef has to press a button to change the volume from\nX to\nY.\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y\u2264100\nSample 1:\nInput\nOutput\n2\n50 54\n12 10\n4\n2\nExplanation:\nTest Case 1: Chef can press the volume up button\n4 times to increase the volume from\n50 to\n54.\nTest Case 2: Chef can press the volume down button\n2 times to decrease the volume from\n12 to\n10.",
        "79": "ATM\nPooja would like to withdraw X US Dollar from an ATM. The cash machine will only accept the transaction if X is a multiple of 5, and Pooja's account balance has enough cash to perform the withdrawal transaction (including bank charges). For each successful withdrawal the bank charges 0.50 US Dollar.\nCalculate Pooja's account balance after an attempted transaction.\nInput Format\nEach input contains 2 numbers\nX and\nY.\nX is the amount of cash which Pooja wishes to withdraw.\nY is Pooja's initial account balance.\nOutput Format\nOutput the account balance after the attempted transaction, given as a number with two digits of precision. If there is not enough money in the account to complete the transaction, output the current bank balance.\nConstraints\n0<X\u22642000 - the amount of cash which Pooja wishes to withdraw.\n0\u2264Y\u22642000 with two digits of precision - Pooja's initial account balance.\nSample 1:\nInput\nOutput\n30 120.00\n89.50\nExplanation:\nExample - Successful Transaction\nSample 2:\nInput\nOutput\n42 120.00\n120.00\nExplanation:\nExample - Incorrect Withdrawal Amount (not multiple of 5)\nSample 3:\nInput\nOutput\n300 120.00\n120.00\nExplanation:\nExample - Insufficient Funds",
        "80": "Is it hot or cold\nChef considers the climate HOT if the temperature is above\n20, otherwise he considers it COLD. You are given the temperature\nC, find whether the climate is HOT or COLD.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case contains a single integer, the temperature\nC.\nOutput Format\nFor each test case, print on a new line whether the climate is HOT or COLD.\nYou may print each character of the string in either uppercase or lowercase (for example, the strings hOt, hot, Hot, and HOT will all be treated as identical).\nConstraints\n1\u2264T\u226450\n0\u2264C\u226440\nSample 1:\nInput\nOutput\n2\n21\n16\nHOT\nCOLD\nExplanation:\nTest case\n1: The temperature is\n21, which is more than\n20. So, Chef considers the climate HOT.\nTest case\n2: The temperature is\n16, which is not more than\n20. So, Chef considers the climate COLD.",
        "81": "Profit Increment\nChef recently started selling a special fruit.\nHe has been selling the fruit for\nX rupees (\nX is a multiple of\n100). He earns a profit of\nY rupees on selling the fruit currently.\nChef decided to increase the selling price by\n10%. Please help him calculate his new profit after the increase in selling price.\nNote that only the selling price has been increased and the buying price is same.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line of input containing two space-separated integers\nX and\nY denoting the initial selling price and the profit respectively.\nOutput Format\nFor each test case, output a single integer, denoting the new profit.\nConstraints\n1\u2264T\u22641000\n1\u2264X\u22641000\n1\u2264Y\u2264100\nX is a multiple of\n100.\nSample 1:\nInput\nOutput\n4\n100 10\n200 5\n500 10\n100 7\n20\n25\n60\n17\nExplanation:\nTest case\n1: The buying price of the item is the difference of selling price and profit, which is\n90. The new selling price is\n10% more than the initial selling price. Thus, the new profit is\n110\u221290=20.\nTest case\n2: The buying price of the item is the difference of selling price and profit, which is\n195. The new selling price is\n10% more than the initial selling price. Thus, the new profit is\n220\u2212195=25.\nTest case\n3: The buying price of the item is the difference of selling price and profit, which is\n490. The new selling price is\n10% more than the initial selling price. Thus, the new profit is\n550\u2212490=60.\nTest case\n4: The buying price of the item is the difference of selling price and profit, which is\n93. The new selling price is\n10% more than the initial selling price. Thus, the new profit is\n110\u221293=17.",
        "82": "Fill the Bucket\nChef has a bucket having a capacity of\nK liters. It is already filled with\nX liters of water.\nFind the maximum amount of extra water in liters that Chef can fill in the bucket without overflowing.\nInput Format\nThe first line will contain\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two space separated integers\nK and\nX - as mentioned in the problem.\nOutput Format\nFor each test case, output in a single line, the amount of extra water in liters that Chef can fill in the bucket without overflowing.\nConstraints\n1\u2264T\u2264100\n1\u2264X<K\u22641000\nSample 1:\nInput\nOutput\n2\n5 4\n15 6\n1\n9\nExplanation:\nTest Case\n1: The capacity of the bucket is\n5 liters but it is already filled with\n4 liters of water. Adding\n1 more liter of water to the bucket fills it to\n(4+1)=5 liters. If we try to fill more water, it will overflow.\nTest Case\n2: The capacity of the bucket is\n15 liters but it is already filled with\n6 liters of water. Adding\n9 more liters of water to the bucket fills it to\n(6+9)=15 liters. If we try to fill more water, it will overflow.",
        "83": "Parliament\nAn important resolution is being discussed in the Parliament of Chefland. There are\nN members present in the Parliament out of which\nX members voted in favour of the resolution and the remaining voted against it.\nAccording to the constitution of Chefland, a resolution is passed if and only if half or more than half the members present in the Parliament vote in favour of the resolution.\nDetermine if the resolution is passed or not.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two space-separated integers\nN and\nX \u2014 the total number of members present in the Parliament and the number of members who voted in favour of the resolution.\nOutput Format\nFor each test case, output YES if the resolution is passed. Otherwise, output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs and Yes will be considered identical).\nConstraints\n1\u2264T\u22645000\n1\u2264N\u2264100\n0\u2264X\u2264N\nSample 1:\nInput\nOutput\n4\n12 6\n9 4\n9 5\n12 0\nYES\nNO\nYES\nNO\nExplanation:\nTest Case 1: The resolution is passed since half the people voted in favour of the resolution.\nTest Case 2: The resolution is not passed since less than half the people voted in favour of the resolution.\nTest Case 3: The resolution is passed since more than half the people voted in favour of the resolution.\nTest Case 4: The resolution is not passed since everybody voted against the resolution.",
        "84": "Find Remainder\nWrite a program to find the remainder when an integer A is divided by an integer B.\nInput\nThe first line contains an integer T, the total number of test cases. Then T lines follow, each line contains two Integers A and B.\nOutput\nFor each test case, find the remainder when A is divided by B, and display it in a new line.\nConstraints\n1 \u2264 T \u2264 1000\n1 \u2264 A,B \u2264 10000\nSample 1:\nInput\nOutput\n3 \n1 2\n100 200\n40 15\n1\n100\n10",
        "85": "Ezio and Guards\nEzio can manipulate at most\nX number of guards with the apple of eden.\nGiven that there are\nY number of guards, predict if he can safely manipulate all of them.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains of a single line of input, two integers\nX and\nY.\nOutput Format\nFor each test case, print\nYES if it is possible for Ezio to manipulate all the guards. Otherwise, print\nNO.\nYou may print each character of the string in uppercase or lowercase (for example, the strings\nYeS,\nyEs,\nyes and\nYES will all be treated as identical).\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y\u2264100\nSample 1:\nInput\nOutput\n3\n5 7\n6 6\n9 1\nNO\nYES\nYES\nExplanation:\nTest Case\n1: Ezio can manipulate at most\n5 guards. Since there are\n7 guards, he cannot manipulate all of them.\nTest Case\n2: Ezio can manipulate at most\n6 guards. Since there are\n6 guards, he can manipulate all of them.\nTest Case\n3: Ezio can manipulate at most\n9 guards. Since there is only\n1 guard, he can manipulate the guard.",
        "86": "Chef and Masks\nChef is shopping for masks. In the shop, he encounters\n2 types of masks:\nDisposable Masks \u2014 cost\nX but last only\n1 day.\nCloth Masks \u2014 cost\nY but last\n10 days.\nChef wants to buy masks to last him\n100 days. He will buy the masks which cost him the least. In case there is a tie in terms of cost, Chef will be eco-friendly and choose the cloth masks. Which type of mask will Chef choose?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases. Then the test cases follow.\nEach test case consists of a single line of input, containing two space-separated integers\nX,Y.\nOutput Format\nFor each test case, if Chef buys the cloth masks print CLOTH, otherwise print DISPOSABLE.\nYou may print each character of the string in uppercase or lowercase (for example, the strings cloth, clOTh, cLoTH, and CLOTH will all be treated as identical).\nConstraints\n1\u2264T\u22645000\n1\u2264X<Y\u2264100\nSample 1:\nInput\nOutput\n4\n10 100\n9 100\n88 99\n1 11\nCloth\nDisposable\nCloth\nDisposable\nExplanation:\nTest case\n1: The cost of the disposable masks will be\n10\u22c5100=1000, while the cost of the cloth masks will be\n100\u22c510=1000. Since the price is equal and Chef is eco-friendly, Chef will buy the cloth masks.\nTest case\n2: The cost of the disposable masks will be\n9\u22c5100=900, while the cost of the cloth masks will be\n100\u22c510=1000. Since the price of disposable masks is less, Chef will buy the disposable masks.\nTest case\n3: The cost of the disposable masks will be\n88\u22c5100=8800, while the cost of the cloth masks will be\n99\u22c510=990. Since the price of the cloth masks is less, Chef will buy the cloth masks.\nTest case\n4: The cost of the disposable masks will be\n1\u22c5100=100, while the cost of the cloth masks will be\n11\u22c510=110. Since the price of disposable masks is less, Chef will buy the disposable masks.",
        "87": "Speciality\nOn every CodeChef user's profile page, the list of problems that they have set, tested, and written editorials for, is listed at the bottom.\nGiven the number of problems in each of these\n3 categories as\nX,Y, and\nZ respectively (where all three integers are distinct), find if the user has been most active as a Setter, Tester, or Editorialist.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of three space-separated integers\nX,Y, and\nZ - the number of problems they have set, tested, and written editorials for.\nOutput Format\nFor each test case, output in a new line:\nSetter, if the user has been most active as a setter.\nTester, if the user has been most active as a tester.\nEditorialist, if the user has been most active as an editorialist.\nNote that the output is case-insensitive. Thus, the strings SETTER, setter, seTTer, and Setter are all considered the same.\nConstraints\n1\u2264T\u226410\n4\n1\u2264X,Y,Z\u2264100, where\nX,Y, and\nZ are distinct.\nSample 1:\nInput\nOutput\n4\n5 3 2\n1 2 4\n2 5 1\n9 4 5\nSetter\nEditorialist\nTester\nSetter\nExplanation:\nTest case\n1: The number of problems that the user has set is greater than the number of problems tested or written editorials for. Thus, the user is most active as setter.\nTest case\n2: The number of problems that the user has written editorials for, is greater than the number of problems set or tested. Thus, the user is most active as editorialist.\nTest case\n3: The number of problems that the user has tested is greater than the number of problems set or written editorials for. Thus, the user is most active as tester.\nTest case\n4: The number of problems that the user has set is greater than the number of problems tested or written editorials for. Thus, the user is most active as setter.",
        "88": "Maximum Submissions\nA participant can make\n1 submission every\n30 seconds. If a contest lasts for\nX minutes, what is the maximum number of submissions that the participant can make during it?\nIt is also given that the participant cannot make any submission in the last\n5 seconds of the contest.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single integer\nX, denoting the number of minutes.\nOutput Format\nFor each test case, output the maximum number of submissions a participant can make in\nX minutes.\nConstraints\n1\u2264T\u226430\n1\u2264X\u226430\nSample 1:\nInput\nOutput\n4\n1\n2\n3\n4\n2\n4\n6\n8\nExplanation:\nTest case\n1: The contest lasts for\n1 minute, which is\n60 seconds. A participant can make\n2 submissions during this time \u2014 for example, in the\n5-th second and in the\n48-th second. Making\n3 or more submissions is impossible.\nTest case\n2: The contest lasts for\n2 minutes, which is\n120 seconds. A participant can make\n4 submissions during this time.",
        "89": "TV Discount\nChef is looking to buy a TV and has shortlisted two models. The first one costs\nA rupees, while the second one costs\nB rupees.\nSince there is a huge sale coming up on Chefzon, Chef can get a flat discount of\nC rupees on the first TV, and a flat discount of\nD rupees on the second one.\nHelp Chef determine which of the two TVs would be cheaper to buy during the sale.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains four space-separated integers\nA,\nB,\nC and\nD \u2014 the marked price (in rupees) of the first TV, the marked price (in rupees) of the second TV, the flat discount (in rupees) of the first TV, and the flat discount (in rupees) of the second TV.\nOutput Format\nFor each test case, print a single line containing the string First if the first TV is cheaper to buy with discount, or Second if the second TV is cheaper to buy with discount. If both of them cost the same after discount, print Any.\nYou may print each character of the string in uppercase or lowercase (for example, the strings first, First, fIRSt, and FIRST will all be treated as identical).\nConstraints\n1\u2264T\u22645000\n1\u2264A,B\u2264100\n0\u2264C\u2264A\n0\u2264D\u2264B\nSample 1:\nInput\nOutput\n3\n85 75 35 20\n100 99 0 0\n30 40 0 10\nFirst\nSecond\nAny\nExplanation:\nTest case\n1: The cost of the first TV after discount is\n85\u221235=50, while the cost of the second TV after discount is\n75\u221220=55. Thus the first TV is cheaper to buy than the second.\nTest case\n2: The cost of the first TV after discount is\n100\u22120=100, while the cost of the second TV after discount is\n99\u22120=99. Thus the second TV is cheaper to buy than the first.\nTest case\n3: The cost of the first TV after discount is\n30\u22120=30, while the cost of the second TV after discount is\n40\u221210=30. Since they are equal, Chef can buy any of them.",
        "90": "Broken Phone\nUttu broke his phone. He can get it repaired by spending\nX rupees or he can buy a new phone by spending\nY rupees. Uttu wants to spend as little money as possible. Find out if it is better to get the phone repaired or to buy a new phone.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two space-separated integers\nX and\nY \u2014 the cost of getting the phone repaired and the cost of buying a new phone.\nOutput Format\nFor each test case,\noutput REPAIR if it is better to get the phone repaired.\noutput NEW PHONE if it is better to buy a new phone.\noutput ANY if both the options have the same price.\nYou may print each character of REPAIR, NEW PHONE and ANY in uppercase or lowercase (for example, any, ANy, Any will be considered identical).\nConstraints\n1\u2264T\u22641000\n1\u2264X,Y\u226410\n4\nSample 1:\nInput\nOutput\n3\n100 1000\n10000 5000\n3000 3000\nREPAIR\nNEW PHONE\nANY\nExplanation:\nTest Case 1: It is better to get the phone repaired since\n100<1000.\nTest Case 2: It is better to buy a new phone since\n10000>5000.\nTest Case 3: Uttu can choose either of the two options since\n3000=3000.",
        "91": "Tyre problem\nThere are\nN bikes and\nM cars on the road.\nEach bike has\n2 tyres.\nEach car has\n4 tyres.\nFind the total number of tyres on the road.\nInput Format\nThe first line will contain\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two integers\nN,M.\nOutput Format\nFor each test case, output in a single line, the total number of tyres on the road.\nConstraints\n1\u2264T\u22641000\n0\u2264N,M\u2264100\nSample 1:\nInput\nOutput\n2\n2 1\n3 0\n8\n6\nExplanation:\nTest Case\n1: There are\n2 bikes and\n1 car. Each bike has\n2 tyres, so there are\n2\u22c52=4 bike tyres. Similarly, each car has\n4 tyres, so there are\n1\u22c54=4 car tyres. Adding the tyres of all vehicles, we get\n4+4=8 tyres in total.\nTest Case\n2: There are\n3 bikes and\n0 cars. Each bike has\n2 tyres, so there are\n3\u22c52=6 bike tyres. There are no cars, so there are\n0\u22c54=0 car tyres. Adding the tyres of all vehicles, we get\n6+0=6 tyres in total.",
        "92": "Sum of Digits\nYou're given an integer N. Write a program to calculate the sum of all the digits of N.\nInput Format\nThe first line contains an integer T, the total number of testcases. Then follow T lines, each line contains an integer N.\nOutput Format\nFor each test case, calculate the sum of digits of N, and display it in a new line.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u22641000000\nSample 1:\nInput\nOutput\n3 \n12345\n31203\n2123\n15\n9\n8",
        "93": "Monthly Budget\nAkshat has\nX rupees to spend in the current month. His daily expenditure is\nY rupees, i.e., he spends\nY rupees each day.\nGiven that the current month has\n30 days, find out if Akshat has enough money to meet his daily expenditures for this month.\nInput Format\nThe first line will contain\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two integers\nX,\nY - the amount of money Akshat has for the current month and his daily expenditure respectively.\nOutput Format\nFor each test case, output YES if Akshat has enough money to meet his daily expenditure for\n30 days of the month, otherwise output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y\u226410\n5\nSample 1:\nInput\nOutput\n3\n1000 10\n250 50\n1500 50\nYES\nNO\nYES\nExplanation:\nTest Case\n1: Akshat has\n1000 rupees and he wants to spend\n30\u00d710=300 rupees in the entire month. Therefore, he has enough money for the entire month.\nTest Case\n2: Akshat has\n250 rupees and he wants to spend\n30\u00d750=1500 rupees in the entire month. Therefore, he does not have enough money for the entire month.\nTest Case\n3: Akshat has\n1500 rupees and he wants to spend\n30\u00d750=1500 rupees in the entire month. Therefore, he has enough money for the entire month.",
        "94": "Credit score\nTo access CRED programs, one needs to have a credit score of\n750 or more.\nGiven that the present credit score is\nX, determine if one can access CRED programs or not.\nIf it is possible to access CRED programs, output\nYES, otherwise output\nNO.\nInput Format\nThe first and only line of input contains a single integer\nX, the credit score.\nOutput Format\nPrint\nYES if it is possible to access CRED programs. Otherwise, print\nNO.\nYou may print each character of the string in uppercase or lowercase (for example, the strings\nYeS,\nyEs,\nyes and\nYES will all be treated as identical).\nConstraints\n0\u2264X\u22641000\nSubtasks\nSubtask 1 (100 points): Original constraints.\nSample 1:\nInput\nOutput\n823\nYES\nExplanation:\nSince\n823\u2265750, it is possible to access CRED programs.\nSample 2:\nInput\nOutput\n251\nNO\nExplanation:\nSince\n251<750, it is not possible to access CRED programs.",
        "95": "First and Last Digit\nGiven an integer N . Write a program to obtain the sum of the first and last digits of this number.\nInput Format\nThe first line contains an integer T, the total number of test cases. Then follow T lines, each line contains an integer N.\nOutput Format\nFor each test case, display the sum of first and last digits of N in a new line.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u22641000000\nSample 1:\nInput\nOutput\n3 \n1234\n124894\n242323\n5\n5\n5",
        "96": "Enormous Input Test\nYou are given\nN integers. Find the count of numbers divisible by\nK.\nInput Format\nThe input begins with two positive integers\nN,\nK. The next\nN lines contains one positive integer each denoted by\nA\ni\n.\nOutput Format\nOutput a single number denoting how many integers are divisible by\nK.\nConstraints\n1\u2264N,K\u226410\n7\n1\u2264A\ni\n\u226410\n9\nSample 1:\nInput\nOutput\n7 3\n1\n51\n966369\n7\n9\n999996\n11\n4\nExplanation:\nThe integers divisible by\n3 are\n51,966369,9, and\n999996. Thus, there are\n4 integers in total.",
        "97": "Practice makes us perfect\nMost programmers will tell you that one of the ways to improve your performance in competitive programming is to practice a lot of problems.\nOur Chef took the above advice very seriously and decided to set a target for himself.\nChef decides to solve at least\n10 problems every week for\n4 weeks.\nGiven the number of problems he actually solved in each week over\n4 weeks as\nP\n1\n,P\n2\n,P\n3\n, and\nP\n4\n, output the number of weeks in which Chef met his target.\nInput Format\nThere is a single line of input, with\n4 integers\nP\n1\n,P\n2\n,P\n3\n, and\nP\n4\n. These are the number of problems solved by Chef in each of the\n4 weeks.\nOutput Format\nOutput a single integer in a single line - the number of weeks in which Chef solved at least\n10 problems.\nConstraints\n1\u2264P\n1\n,P\n2\n,P\n3\n,P\n4\n\u2264100\nSample 1:\nInput\nOutput\n12 15 8 10\n3\nExplanation:\nChef solved at least\n10 problems in the first, second and fourth weeks. He failed to solve at least\n10 problems in the third week. Hence, the number of weeks in which Chef met his target is\n3.\nSample 2:\nInput\nOutput\n2 3 1 10\n1\nExplanation:\nChef solved at least\n10 problems in the fourth week. He failed to solve at least\n10 problems in all the other three weeks. Hence, the number of weeks in which Chef met his target is\n1.\nSample 3:\nInput\nOutput\n12 100 99 11\n4\nExplanation:\nChef solved at least\n10 problems in all the four weeks. Hence, the number of weeks in which Chef met his target is\n4.\nSample 4:\nInput\nOutput\n1 1 1 1\n0\nExplanation:\nChef was not able to solve at least\n10 problems in any of the four weeks. Hence, the number of weeks in which Chef met his target is\n0.",
        "98": "Pending Assignments\nChef has finally decided to complete all of his pending assignments.\nThere are\nX assignments where each assignment takes\nY minutes to complete.\nFind whether Chef would be able to complete all the assignments in\nZ days.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists three space-separated integers\nX,Y, and\nZ \u2014 the number of assignments, time taken in minutes to complete each assignment, and the number of days in which Chef wants to complete the assignments.\nOutput Format\nFor each test case, output on a new line, YES, if Chef would be able to complete all the assignments in\nZ days. Otherwise, print NO.\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\nConstraints\n1\u2264T\u226410\n5\n1\u2264X,Y\u2264100\n1\u2264Z\u226410\nSample 1:\nInput\nOutput\n3\n5 5 5\n50 80 2\n20 72 1\nYES\nNO\nYES\nExplanation:\nTest case\n1: Chef needs a total of\n5\u22c55=25 minutes to complete all the assignments. Thus, he would be able to complete the assignments in\n5 days.\nTest case\n2: Chef needs a total of\n50\u22c580=4000 minutes to complete all the assignments. However, in\n2 days, he only has\n2\u22c524\u22c560=2880 minutes.\nThus, he would not be able to complete the assignments in\n2 days.\nTest case\n3: Chef needs a total of\n20\u22c572=1440 minutes to complete all the assignments. In\n1 days, he has\n24\u22c560=1440 minutes.\nThus, he would be able to complete the assignments in\n1 day.",
        "99": "Course Registration\nThere is a group of\nN friends who wish to enroll in a course together. The course has a maximum capacity of\nM students that can register for it. If there are\nK other students who have already enrolled in the course, determine if it will still be possible for all the\nN friends to do so or not.\nInput Format\nThe first line contains a single integer\nT - the number of test cases. Then the test cases follow.\nEach test case consists of a single line containing three integers\nN,\nM and\nK - the size of the friend group, the capacity of the course and the number of students already registered for the course.\nOutput Format\nFor each test case, output Yes if it will be possible for all the\nN friends to register for the course. Otherwise output No.\nYou may print each character of Yes and No in uppercase or lowercase (for example, yes, yEs, YES will be considered identical).\nConstraints\n1\u2264T\u22641000\n1\u2264N\u2264M\u2264100\n0\u2264K\u2264M\nSample 1:\nInput\nOutput\n3\n2 50 27\n5 40 38\n100 100 0\nYes\nNo\nYes\nExplanation:\nTest Case 1: The\n2 friends can enroll in the course as it has enough seats to accommodate them and the\n27 other students at the same time.\nTest Case 2: The course does not have enough seats to accommodate the\n5 friends and the\n38 other students at the same time.",
        "100": "Insurance\nChef bought car insurance. The policy of the insurance is:\nThe maximum rebatable amount for any damage is Rs\nX lakhs.\nIf the amount required for repairing the damage is\n\u2264X lakhs, that amount is rebated in full.\nChef's car meets an accident and required Rs\nY lakhs for repairing.\nDetermine the amount that will be rebated by the insurance company.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case contains two space-separated integers\nX and\nY.\nOutput Format\nFor each test case, output the amount (in lakhs) that will be rebated by the insurance company.\nConstraints\n1\u2264T\u22641000\n1\u2264X,Y\u226430\nSample 1:\nInput\nOutput\n4\n5 3\n5 8\n4 4\n15 12\n3\n5\n4\n12\nExplanation:\nTest case\n1: The damages require only Rs\n3 lakh which is below the upper cap, so the entire Rs\n3 lakh will be rebated.\nTest case\n2: The damages require Rs\n8 lakh which is above the upper cap, so only Rs\n5 lakh will be rebated.\nTest case\n3: The damages require only Rs\n4 lakh which is equal to the upper cap, so the whole Rs\n4 lakh will be rebated.\nTest case\n4: The damages require Rs\n15 lakh which is above the upper cap, so only Rs\n12 lakh will be rebated.",
        "101": "Codechef Airlines\nChef has opened a new airline. Chef has\n10 airplanes where each airplane has a capacity of\nX passengers.\nOn the first day itself,\nY people are willing to book a seat in any one of Chef's airplanes.\nGiven that Chef charges\nZ rupees for each ticket, find the maximum amount he can earn on the first day.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of three space-separated integers\nX,Y, and\nZ \u2014 the capacity of each airplane, the number of people willing to book a seat in any one of Chef's airplanes on the first day, and the cost of each seat respectively.\nOutput Format\nFor each test case, output on a new line, the maximum amount Chef can earn on the first day.\nConstraints\n1\u2264T\u22641000\n1\u2264X,Y,Z\u2264100\nSample 1:\nInput\nOutput\n4\n2 15 10\n1 10 1\n5 60 100\n1 11 7\n150\n10\n5000\n70\nExplanation:\nTest case\n1: Chef has\n10 airplanes and each airplane has a capacity of\n2 passengers. Thus, there are\n20 seats available in total.\nThere are\n15 people who want to book a seat. Since we have enough seats for everyone, all\n15 people can book their seats and pay\n10 rupees each. The total money Chef earns is\n15\u22c510=150.\nTest case\n2: Chef has\n10 airplanes and each airplane has a capacity of\n1 passenger. Thus, there are\n10 seats available in total.\nThere are\n10 people who want to book a seat. Since we have enough seats for everyone, all\n10 people can book their seats and pay\n1 rupee each. The total money Chef earns is\n10\u22c51=10.\nTest case\n3: Chef has\n10 airplanes and each airplane has a capacity of\n5 passengers. Thus, there are\n50 seats available in total.\nThere are\n60 people who want to book a seat. Since we have only\n50 seats, only\n50 people can book their seats and pay\n100 rupees each. The total money Chef earns is\n50\u22c5100=5000.\nTest case\n4: Chef has\n10 airplanes and each airplane has a capacity of\n1 passenger. Thus, there are\n10 seats available in total.\nThere are\n11 people who want to book a seat. Since we have only\n10 seats, only\n10 people can book their seats and pay\n7 rupees each. The total money Chef earns is\n10\u22c57=70.",
        "102": "Increase IQ\nA study has shown that playing a musical instrument helps in increasing one's IQ by\n7 points. Chef knows he can't beat Einstein in physics, but he wants to try to beat him in an IQ competition.\nYou know that Einstein had an IQ of\n170, and Chef currently has an IQ of\nX.\nDetermine if, after learning to play a musical instrument, Chef's IQ will become strictly greater than Einstein's.\nPrint \"Yes\" if it is possible for Chef to beat Einstein, else print \"No\" (without quotes).\nYou may print each character of the string in either uppercase or lowercase (for example, the strings yEs, yes, Yes, and YES will all be treated as identical).\nInput Format\nThe first and only line of input will contain a single integer\nX, the current IQ of Chef.\nOutput Format\nFor each testcase, output in a single line \"Yes\" or \"No\"\nYou may print each character of the string in either uppercase or lowercase (for example, the strings yEs, yes, Yes, and YES will all be treated as identical).\nConstraints\n100\u2264X\u2264169\nSubtasks\nSubtask #1 (100 points): Original constraints\nSample 1:\nInput\nOutput\n165\nYes\nExplanation:\nAfter learning a musical instrument, Chef's final IQ will be\n165+7=172. Since\n172>170, Chef can beat Einstein.\nSample 2:\nInput\nOutput\n120\nNo\nExplanation:\nAfter learning a musical instrument, Chef's final IQ will be\n120+7=127. Since\n127<170, Chef cannot beat Einstein.",
        "103": "Battery Low\nChef's phone shows a Battery Low notification if the battery level is\n15% or less.\nGiven that the battery level of Chef's phone is\nX%, determine whether it would show a Battery low notification.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains a single line of input, an integer\nX, denoting the battery level of the phone.\nOutput Format\nFor each test case, output in a single line\nYes, if the battery level is\n15% or below. Otherwise, print\nNo.\nYou may print each character of\nYes and\nNo in uppercase or lowercase (for example,\nYeS,\nYES,\nyes will be considered identical).\nConstraints\n1\u2264T\u2264100\n1\u2264X\u2264100\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n3\n15\n3\n65\nYes\nYes\nNo\nExplanation:\nTest Case 1: The battery level is\n15. Thus, it would show a battery low notification.\nTest Case 2: The battery level is\n3, which is less than\n15. Thus, it would show a battery low notification.\nTest Case 3: The battery level is\n65, which is greater than\n15. Thus, it would not show a battery low notification.",
        "104": "Bob at the Bank\nBob has an account in the Bobby Bank. His current account balance is\nW rupees.\nEach month, the office in which Bob works deposits a fixed amount of\nX rupees to his account.\nY rupees is deducted from Bob's account each month as bank charges.\nFind his final account balance after\nZ months. Note that the account balance can be negative as well.\nInput Format\nThe first line will contain\nT, the number of test cases. Then the test cases follow.\nEach test case consists of a single line of input, containing four integers\nW,X,Y, and\nZ \u2014 the initial amount, the amount deposited per month, the amount deducted per month, and the number of months.\nOutput Format\nFor each test case, output in a single line the final balance in Bob's account after\nZ months.\nConstraints\n1\u2264T\u22641000\n1\u2264W,X,Y,Z\u226410\n4\nSample 1:\nInput\nOutput\n3\n100 11 1 10\n999 25 36 9\n2500 100 125 101\n200\n900\n-25\nExplanation:\nTest case\n1: Bob's current account balance is\n100. At the end of each month Bob gets Rs\n11 and pays Rs\n1, thus gaining\n10 per month. Thus, at the end of\n10 months, Bob will have\n100+10\u00d710=200.\nTest case\n2: Bob's current account balance is\n999. At the end of each month Bob gets Rs\n25 and pays Rs\n36, thus losing\n11 per month. Thus, at the end of\n9 months, Bob will have\n999\u221211\u00d79=900.\nTest case\n3: Bob's current account balance is\n2500. At the end of each month Bob gets Rs\n100 and pays Rs\n125, thus losing\n25 per month. Thus, at the end of\n101 months, Bob will have\n2500\u221225\u00d7101=\u221225.",
        "105": "The Mango Truck\nYou are given that a mango weighs\nX kilograms and a truck weighs\nY kilograms. You want to cross a bridge that can withstand a weight of\nZ kilograms.\nFind the maximum number of mangoes you can load in the truck so that you can cross the bridge safely.\nInput Format\nFirst line will contain\nT, the number of test cases. Then the test cases follow.\nEach test case consists of a single line of input, three integers\nX,Y,Z - the weight of mango, the weight of truck and the weight the bridge can withstand respectively.\nOutput Format\nFor each test case, output in a single line the maximum number of mangoes that you can load in the truck.\nConstraints\n1\u2264T\u22641000\n1\u2264X\u2264Y\u2264Z\u2264100\nSample 1:\nInput\nOutput\n4\n2 5 11\n4 10 20\n1 1 1\n6 40 90\n3\n2\n0\n8\nExplanation:\nTest case\n1: You can load\n3 mangoes at maximum. The total weight is\n3\u00d72+5=11\u226411. Thus, the truck can safely cross the bridge with\n3 mangoes. If you load\n4 mangoes, the total weight is\n4\u00d72+5=13>11.\nTest case\n2: You can load\n2 mangoes at maximum. The total weight is\n2\u00d74+10=18\u226420. Thus, the truck can safely cross the bridge with\n2 mangoes.\nTest case\n3: You can load\n0 mangoes at maximum. The total weight is\n0\u00d71+1=1\u22641. Thus, the truck can safely cross the bridge only if there are\n0 mangoes.\nTest case\n4: You can load\n8 mangoes at maximum. The total weight is\n6\u00d78+40=88\u226490. Thus, the truck can safely cross the bridge with\n8 mangoes.",
        "106": "Monopoly in Chefland\nChef is the financial incharge of Chefland and one of his duties is identifying if any company has gained a monopolistic advantage in the market.\nThere are exactly\n3 companies in the market each of whose revenues are denoted by\nR\n1\n,\nR\n2\nand\nR\n3\nrespectively. A company is said to have a monopolistic advantage if its revenue is strictly greater than the sum of the revenues of its competitors.\nGiven the revenue of the\n3 companies, help Chef determine if any of them has a monopolistic advantage.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line of input containing three space separated integers\nR\n1\n,\nR\n2\nand\nR\n3\ndenoting the revenue of the three companies respectively.\nOutput Format\nFor each test case, output\nYES if any of the companies has a monopolistic advantage over its competitors, else output\nNO.\nYou may print each character of the string in uppercase or lowercase (for example, the strings\nYeS,\nyEs,\nyes and\nYES will all be treated as identical).\nConstraints\n1\u2264T\u22641000\n1\u2264R\n1\n,R\n2\n,R\n3\n\u226410\nSample 1:\nInput\nOutput\n4\n1 1 1\n1 2 4\n2 10 3\n1 2 3\nNo\nYes\nYes\nNo\nExplanation:\nTest case 1: All the companies have equal revenue so none have a monopolistic advantage.\nTest case 2: The third company has a monopolistic advantage as\n1+2<4.\nTest case 3: The second company has a monopolistic advantage as\n2+3<10.",
        "107": "Bucket and Water Flow\nAlice has a bucket of water initially having\nW litres of water in it. The maximum capacity of the bucket is\nX liters.\nAlice turned on the tap and the water starts flowing into the bucket at a rate of\nY litres\/hour. She left the tap running for exactly\nZ hours. Determine whether the bucket has been overflown, filled exactly, or is still left unfilled.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases. The description of the test cases follows.\nEach test case consists of a single line of input containing four space-separated integers\nW, X, Y, Z.\nOutput Format\nFor each test case, print the answer on a new line:\nIf the bucket has overflown print overflow\nIf it is exactly filled print filled\nIf it is still unfilled, print unfilled\nYou may print each character of the string in uppercase or lowercase (for example, the strings filled, FIlled, fiLLed, and FILLED will all be treated as identical).\nConstraints\n1\u2264T\u22641000\n1\u2264W,X,Y,Z\u22641000\nSubtasks\nSubtask 1 (100 points):\nOriginal constraints.\nSample 1:\nInput\nOutput\n4\n1 2 3 4 \n10 70 10 6 \n2 100 4 3\n3 3 2 1\noverFlow\nfilled\nUnfilled\noverflow\nExplanation:\nTest case\n1: Initially the bucket had\n1 litre of water, we then added\n3 litres of water for\n4 hours. Thus, the total bucket inflow was\n1+3\u00d74=13 litres. Since this is greater than the capacity of\n2 litres, the bucket will OVERFLOW\nTest case\n2: Initially the bucket had\n10 litres of water, we then added\n10 litres of water for\n6 hours. Thus, the total bucket inflow was\n10+10\u00d76=70 litres. Since this is equal to the capacity of\n70 litres, the bucket will be FILLED\nTest case\n3: Initially the bucket had\n2 litres of water, we then added\n4 litres of water for\n3 hours. Thus, the total bucket inflow was\n2+4\u00d73=14 litres. Since this is lesser than the capacity of\n100 litres, the bucket will be UNFILLED.\nTest case\n4: Initially the bucket had\n3 litres of water, we then added\n2 litres of water for\n1 hours. Thus, the total bucket inflow was\n3+2\u00d71=5 litres. Since this is more than the capacity of\n3 litres, the bucket will OVERFLOW.",
        "108": "Miami GP\nChef has finally got the chance of his lifetime to drive in the\nF1 tournament. But, there is one problem. Chef did not know about the 107% rule and now he is worried whether he will be allowed to race in the main event or not.\nGiven the fastest finish time as\nX seconds and Chef's finish time as\nY seconds, determine whether Chef will be allowed to race in the main event or not.\nNote that, Chef will only be allowed to race if his finish time is within 107% of the fastest finish time.\nInput Format\nFirst line will contain\nT, number of testcases. Then the testcases follow.\nEach testcase contains of a single line of input, two space separated integers\nX and\nY denoting the fastest finish time and Chef's finish time respectively.\nOutput Format\nFor each test case, output\nYES if Chef will be allowed to race in the main event, else output\nNO.\nYou may print each character of the string in uppercase or lowercase (for example, the strings\nYeS,\nyEs,\nyes and\nYES will all be treated as identical).\nConstraints\n1\u2264T\u22642\u22c510\n4\n1\u2264X\u2264Y\u2264200\nSample 1:\nInput\nOutput\n4\n1 2\n15 16\n15 17\n100 107\nNO\nYES\nNO\nYES\nExplanation:\nTest case\n1: The fastest car finished in\n1 second. Thus, Chef should have finished on or before\n1.07 seconds to ensure qualification but he finished in\n2 seconds. Hence, Chef will not be allowed to race in the main event.\nTest case\n2: The fastest car finished in\n15 seconds. Thus, Chef should have finished on or before\n16.05 seconds to ensure qualification and he managed to finish in\n16 seconds. Hence, Chef will be allowed to race in the main event.\nTest case\n3: The fastest car finished in\n15 seconds. Thus, Chef should have finished on or before\n16.05 seconds to ensure qualification but he finished in\n17 seconds. Hence, Chef will not be allowed to race in the main event.\nTest case\n4: The fastest car finished in\n100 seconds. Thus, Chef should have finished on or before\n107 seconds to ensure qualification and he finished just in time for qualification. Hence, Chef will be allowed to race in the main event.",
        "109": "Dominant Army\nIn the medieval age, there were\n3 kingdoms\nA,\nB, and\nC. The army of these kingdom had\nN\nA\n,\nN\nB\n, and\nN\nC\nsoldiers respectively.\nYou are given that an army with\nX soldiers can defeat an army with\nY soldiers only if\nX>Y.\nAn army is said to be dominant if it can defeat both the other armies combined. For example, kingdom\nC's army will be dominant only if\nN\nC\n>N\nA\n+N\nB\n.\nDetermine whether any of the armies is dominant or not.\nInput Format\nThe first line contains a single integer\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains three integers\nN\nA\n,\nN\nB\n, and\nN\nC\n- the number of warriors in the armies of kingdoms\nA,\nB, and\nC respectively.\nOutput Format\nFor each test case, output YES if any of the armies is dominant. Otherwise, output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n1\u2264T\u22641000\n1\u2264N\nA\n,N\nB\n,N\nC\n\u2264100\nSample 1:\nInput\nOutput\n4\n15 5 6\n12 13 16\n1 1 100\n10 10 20\nYES\nNO\nYES\nNO\nExplanation:\nTest case\n1: The kingdom\nA's army is dominant since\n15>5+6.\nTest case\n2: We can observe that none of the armies is dominant.\nTest case\n3: The kingdom\nC's army is dominant since\n100>1+1.\nTest case\n4: We can observe that none of the armies is dominant. Note that the kingdom\nC's army is not dominant since\n20\u226410+10.",
        "110": "Playlist\nChef's playlist contains\n3 songs named\nA,B, and\nC, each of duration exactly\nX minutes. Chef generally plays these\n3 songs in loop, i.e,\nA\u2192B\u2192C\u2192A\u2192B\u2192C\u2192A\u2192\u2026\nChef went on a train journey of\nN minutes and played his playlist on loop for the whole journey. How many times did he listen to the song\nC completely?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases. The description of the test cases follows.\nEach test case consists of a single line of input, containing two space-separated integers\nN,X.\nOutput Format\nFor each test case, output on a new line the number of times Chef listens to the song\nC completely.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u2264100\n1\u2264X\u226410\nSample 1:\nInput\nOutput\n5\n6 1\n5 1\n11 2\n5 8\n100 9\n2\n1\n1\n0\n3\nExplanation:\nTest case\n1: Since each song is of duration\n1 minute and the journey is\n6 minutes long, Chef listens each of the songs\nA,B,C twice.\nTest case\n2: Since each song is of duration\n1 minute and the journey is\n5 minutes long, Chef listens the songs\nA,B twice but\nC only once.\nTest case\n3: Since each song is of duration\n2 minutes and the journey is\n11 minutes long, Chef listens the songs\nA,B twice but\nC only once. Note that Chef is in the middle of listening to song\nC for the second time when the journey ends, but it is not counted since he hasn't listened to it fully.\nTest case\n4: Chef cannot hear any song since the journey is shorter than his song duration.",
        "111": "Chef and Chocolates\nChef wants to gift\nC chocolates to Botswal on his birthday. However, he has only\nX chocolates with him.\nThe cost of\n1 chocolate is\nY rupees.\nFind the minimum money in rupees Chef needs to spend so that he can gift\nC chocolates to Botswal.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains of a single line of input, three integers\nC,X, and\nY.\nOutput Format\nFor each test case, output in a single line answer, the minimum money in rupees Chef needs to spend.\nConstraints\n1\u2264T\u2264100\n1\u2264C\u2264100\n0\u2264X\u2264C\n1\u2264Y\u2264100\nSample 1:\nInput\nOutput\n2\n7 5 5\n10 1 1\n10\n9\nExplanation:\nTest Case\n1: Chef has to gift a total of\n7 chocolates out of which he has\n5 chocolates. Thus, Chef needs to buy\n2 more chocolates, which costs him\n10 rupees.\nTest Case\n2: Chef has to gift a total of\n10 chocolates out of which he has\n1 chocolate. Thus, Chef needs to buy\n9 more chocolates, which costs him\n9 rupees.",
        "112": "Netflix\nAlice, Bob, and Charlie are contributing to buy a Netflix subscription. However, Netfix allows only two users to share a subscription.\nGiven that Alice, Bob, and Charlie have\nA,B, and\nC rupees respectively and a Netflix subscription costs\nX rupees, find whether any two of them can contribute to buy a subscription.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case contains four space-separated integers\nA,B,C, and\nX \u2014 the amount that Alice, Bob, and Charlie have, and the cost of a Netflix subscription respectively.\nOutput Format\nFor each test case, output YES, if any two of Alice, Bob, and Charlie can contribute to buy a Netflix subscription or NO otherwise.\nYou may print each character in uppercase or lowercase. For example, NO, no, No, and nO are all considered identical.\nConstraints\n1\u2264T\u22641000\n1\u2264A,B,C,X\u2264100\nSample 1:\nInput\nOutput\n4\n1 1 1 3\n2 3 1 5\n4 2 3 4\n2 1 4 7\nNO\nYES\nYES\nNO\nExplanation:\nTest case\n1: No two people can contribute to collect enough money to buy a Netflix subscription.\nTest case\n2: Alice and Bob can contribute and collect a total of\n5 rupees which is enough to buy a Netflix subscription of\n5 rupees.\nTest case\n3: One possible way is, Bob and Charlie can contribute and collect a total of\n5 rupees which is enough to buy a Netflix subscription of\n4 rupees.\nNote that there are other possible ways as well.\nTest case\n4: No two people can contribute to collect enough money to buy a Netflix subscription.",
        "113": "Chef and Gym\nChef has decided to join a Gym in ChefLand and if possible, also hire a personal trainer at the gym. The monthly cost of the gym is\nX and personal training will cost him an additional\nY per month. Chef's total budget per month is only\nZ. Print 1 if Chef can only join the gym, 2 if he can also have a personal trainer, and 0 if he can't even join the gym.\nNote that if Chef wants to hire a personal trainer, he must join the gym \u2014 he cannot hire the trainer without joining the gym.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases. Then the test cases follow.\nEach test case consists of a single line of input containing three space-separated integers\nX,Y,Z.\nOutput Format\nFor each test case, output in a single line 2 if Chef can go to the gym and have a trainer, 1 if Chef can only go to the gym, 0 if he can't even go to the gym.\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y,Z\u2264100\nSample 1:\nInput\nOutput\n4\n1 2 3\n10 12 13\n23 1 22\n23 1 63\n2\n1\n0\n2\nExplanation:\nTest case\n1: Since the total cost of Chef getting a gym membership and a trainer is\n1+2=3 which is equal to his budget of\n3, Chef can get both a gym membership and a trainer.\nTest case\n2: Since the total cost of Chef getting a gym membership and a trainer is\n10+12=22 which is greater than his budget of\n13, he can't get both a gym membership and a trainer. However, the cost of the gym membership is\n10 which is less than his budget of\n13, so Chef can get only a gym membership.\nTest case\n3: Since the cost of Chef getting a gym membership is\n23 which is greater than his budget of\n22, Chef can't even get the gym membership.\nTest case\n4: The same costs as the previous test, but this time Chef has enough money to afford both the membership and a personal trainer.",
        "114": "Greater Average\nYou are given\n3 numbers\nA,B, and\nC.\nDetermine whether the average of\nA and\nB is strictly greater than\nC or not?\nNOTE: Average of\nA and\nB is defined as\n2\n(A+B)\n. For example, average of\n5 and\n9 is\n7, average of\n5 and\n8 is\n6.5.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of\n3 integers\nA,B, and\nC.\nOutput Format\nFor each test case, output YES if average of\nA and\nB is strictly greater than\nC, NO otherwise.\nYou may print each character of the string in uppercase or lowercase (for example, the strings YeS, yEs, yes and YES will all be treated as identical).\nConstraints\n1\u2264T\u22641000\n1\u2264A,B,C\u226410\nSample 1:\nInput\nOutput\n5\n5 9 6\n5 8 6\n5 7 6\n4 9 8\n3 7 2\nYES\nYES\nNO\nNO\nYES\nExplanation:\nTest case\n1: The average value of\n5 and\n9 is\n7 which is strictly greater than\n6.\nTest case\n2: The average value of\n5 and\n8 is\n6.5 which is strictly greater than\n6.\nTest case\n3: The average value of\n5 and\n7 is\n6 which is not strictly greater than\n6.\nTest case\n4: The average value of\n4 and\n9 is\n6.5 which is not strictly greater than\n8.\nTest case\n5: The average value of\n3 and\n7 is\n5 which is strictly greater than\n2.",
        "115": "Subscriptions\nA new TV streaming service was recently started in Chefland called the Chef-TV.\nA group of\nN friends in Chefland want to buy Chef-TV subscriptions. We know that\n6 people can share one Chef-TV subscription. Also, the cost of one Chef-TV subscription is\nX rupees. Determine the minimum total cost that the group of\nN friends will incur so that everyone in the group is able to use Chef-TV.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two integers\nN and\nX \u2014 the size of the group of friends and the cost of one subscription.\nOutput Format\nFor each test case, output the minimum total cost that the group will incur so that everyone in the group is able to use Chef-TV.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u2264100\n1\u2264X\u22641000\nSample 1:\nInput\nOutput\n3\n1 100\n12 250\n16 135\n100\n500\n405\nExplanation:\nTest case 1: There is only one person in the group. Therefore he will have to buy\n1 subscription. Therefore the total cost incurred is\n100.\nTest case 2: There are\n12 people in the group. Therefore they will have to buy\n2 subscriptions. Therefore the total cost incurred is\n500.\nTest case 3: There are\n16 people in the group. Therefore they will have to buy\n3 subscriptions. Therefore the total cost incurred is\n405.",
        "116": "Janmansh and Assignments\nJanmansh has to submit\n3 assignments for Chingari before\n10 pm and he starts to do the assignments at\nX pm. Each assignment takes him\n1 hour to complete. Can you tell whether he'll be able to complete all assignments on time or not?\nInput Format\nThe first line will contain\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains one integer\nX - the time when Janmansh starts doing the assignments.\nOutput Format\nFor each test case, output Yes if he can complete the assignments on time. Otherwise, output No.\nYou may print each character of Yes and No in uppercase or lowercase (for example, yes, yEs, YES will be considered identical).\nConstraints\n1\u2264T\u226410\n1\u2264X\u22649\nSample 1:\nInput\nOutput\n2\n7\n9\nYes\nNo\nExplanation:\nTest case-1: He can start at\n7pm and finish by\n10 pm. Therefore he can complete the assignments.\nTest case-2: He can not complete all the\n3 assignments if he starts at\n9 pm.",
        "117": "Exams\nIn Chefland, there are\nX schools, and each school has\nY students.\nThe year end results are in and a total of\nZ students passed the exams.\nAssuming that all students appeared for the exams, find whether the number of students who passed in Chefland was strictly greater than\n50%.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of three space-separated integers\nX,Y, and\nZ, as mentioned in the statement.\nOutput Format\nFor each test case, output on a new line, YES, if the total number of students who passed in Chefland was strictly greater than\n50%, otherwise print NO.\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\nConstraints\n1\u2264T\u22642\u22c510\n4\n1\u2264X\u22645\n1\u2264Y\u226450\n0\u2264Z\u2264X\u22c5Y\nSample 1:\nInput\nOutput\n4\n2 10 12\n2 10 3\n1 5 3\n3 6 9\nYES\nNO\nYES\nNO\nExplanation:\nTest case\n1: The total number of students appeared were\n2\u22c510=20. The number of students passed were\n12.\nThus, number of students who passed are\n60%, which is strictly greater than\n50%.\nTest case\n2: The total number of students appeared were\n2\u22c510=20. The number of students passed were\n3.\nThus, number of students who passed are\n15%, which is less than\n50%.\nTest case\n3: The total number of students appeared were\n1\u22c55=5. The number of students passed were\n3.\nThus, number of students who passed are\n60%, which is strictly greater than\n50%.\nTest case\n4: The total number of students appeared were\n3\u22c56=18. The number of students passed were\n9.\nThus, number of students who passed are\n50%, which is equal to\n50%.",
        "118": "Chef in his Office\nRecently Chef joined a new company. In this company, the employees have to work for\nX hours each day from Monday to Thursday. Also, in this company, Friday is called Chill Day \u2014 employees only have to work for\nY hours\n(Y<X) on Friday. Saturdays and Sundays are holidays.\nDetermine the total number of working hours in one week.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two space-separated integers\nX and\nY \u2014 the number of working hours on each day from Monday to Thursday and the number of working hours on Friday respectively.\nOutput Format\nFor each test case, output the total number of working hours in one week.\nConstraints\n1\u2264T\u2264100\n2\u2264X\u226412\n1\u2264Y<X\nSample 1:\nInput\nOutput\n3\n10 5\n12 2\n8 7\n45\n50\n39\nExplanation:\nTest case\n1: The total number of working hours in a week are:\n10(Monday)+10(Tuesday)+10(Wednesday)+10(Thursday)+5(Friday)=45\nTest Case 2: The total number of working hours in a week are:\n12(Monday)+12(Tuesday)+12(Wednesday)+12(Thursday)+2(Friday)=50\nTest Case 3: The total number of working hours in a week are:\n8(Monday)+8(Tuesday)+8(Wednesday)+8(Thursday)+7(Friday)=39",
        "119": "Mahasena\nKattapa, as you all know was one of the greatest warriors of his time. The kingdom of Maahishmati had never lost a battle under him (as army-chief), and the reason for that was their really powerful army, also called as Mahasena.\nKattapa was known to be a very superstitious person. He believed that a soldier is \"lucky\" if the soldier is holding an even number of weapons, and \"unlucky\" otherwise. He considered the army as \"READY FOR BATTLE\" if the count of \"lucky\" soldiers is strictly greater than the count of \"unlucky\" soldiers, and \"NOT READY\" otherwise.\nGiven the number of weapons each soldier is holding, your task is to determine whether the army formed by all these soldiers is \"READY FOR BATTLE\" or \"NOT READY\".\nNote: You can find the definition of an even number here.\nInput Format\nThe first line of input consists of a single integer N denoting the number of soldiers. The second line of input consists of N space separated integers A1, A2, ..., AN, where Ai denotes the number of weapons that the ith soldier is holding.\nOutput Format\nGenerate one line output saying \"READY FOR BATTLE\", if the army satisfies the conditions that Kattapa requires or \"NOT READY\" otherwise (quotes for clarity).\nConstraints\n1 \u2264 N \u2264 100\n1 \u2264 Ai \u2264 100\nSample 1:\nInput\nOutput\n1\n1\nNOT READY\nExplanation:\nExample 1: For the first example, N = 1 and the array A = [1]. There is only 1 soldier and he is holding 1 weapon, which is odd. The number of soldiers holding an even number of weapons = 0, and number of soldiers holding an odd number of weapons = 1. Hence, the answer is \"NOT READY\" since the number of soldiers holding an even number of weapons is not greater than the number of soldiers holding an odd number of weapons.\nSample 2:\nInput\nOutput\n1\n2\nREADY FOR BATTLE\nExplanation:\nExample 2: For the second example, N = 1 and the array A = [2]. There is only 1 soldier and he is holding 2 weapons, which is even. The number of soldiers holding an even number of weapons = 1, and number of soldiers holding an odd number of weapons = 0. Hence, the answer is \"READY FOR BATTLE\" since the number of soldiers holding an even number of weapons is greater than the number of soldiers holding an odd number of weapons.\nSample 3:\nInput\nOutput\n4\n11 12 13 14\nNOT READY\nExplanation:\nExample 3: For the third example, N = 4 and the array A = [11, 12, 13, 14]. The 1st soldier is holding 11 weapons (which is odd), the 2nd soldier is holding 12 weapons (which is even), the 3rd soldier is holding 13 weapons (which is odd), and the 4th soldier is holding 14 weapons (which is even). The number of soldiers holding an even number of weapons = 2, and number of soldiers holding an odd number of weapons = 2. Notice that we have an equal number of people holding even number of weapons and odd number of weapons. The answer here is \"NOT READY\" since the number of soldiers holding an even number of weapons is not strictly greater than the number of soldiers holding an odd number of weapons.\nSample 4:\nInput\nOutput\n3\n2 3 4\nREADY FOR BATTLE\nExplanation:\nExample 4: For the fourth example, N = 3 and the array A = [2, 3, 4]. The 1st soldier is holding 2 weapons (which is even), the 2nd soldier is holding 3 weapons (which is odd), and the 3rd soldier is holding 4 weapons (which is even). The number of soldiers holding an even number of weapons = 2, and number of soldiers holding an odd number of weapons = 1. Hence, the answer is \"READY FOR BATTLE\" since the number of soldiers holding an even number of weapons is greater than the number of soldiers holding an odd number of weapons.\nSample 5:\nInput\nOutput\n5\n1 2 3 4 5\nNOT READY\nExplanation:\nExample 5: For the fifth example, N = 5 and the array A = [1, 2, 3, 4, 5]. The 1st soldier is holding 1 weapon (which is odd), the 2nd soldier is holding 2 weapons (which is even), the 3rd soldier is holding 3 weapons (which is odd), the 4th soldier is holding 4 weapons (which is even), and the 5th soldier is holding 5 weapons (which is odd). The number of soldiers holding an even number of weapons = 2, and number of soldiers holding an odd number of weapons = 3. Hence, the answer is \"NOT READY\" since the number of soldiers holding an even number of weapons is not greater than the number of soldiers holding an odd number of weapons.",
        "120": "CRED Coins\nFor each bill you pay using CRED, you earn\nX CRED coins.\nAt CodeChef store, each bag is worth\n100 CRED coins.\nChef pays\nY number of bills using CRED. Find the maximum number of bags he can get from the CodeChef store.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains of a single line of input, two integers\nX and\nY.\nOutput Format\nFor each test case, output in a single line - the maximum number of bags Chef can get from the CodeChef store.\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y\u22641000\nSubtasks\nSubtask 1 (100 points): Original constraints.\nSample 1:\nInput\nOutput\n3\n10 10\n20 4\n70 7\n1\n0\n4\nExplanation:\nTest Case\n1: For each bill payment, one receives\n10 CRED coins. Chef pays\n10 bills using CRED. Thus, he receives\n100 CRED coins. Chef can get\n1 bag from the CodeChef store using these coins.\nTest Case\n2: For each bill payment, one receives\n20 CRED coins. Chef pays\n4 bills using CRED. Thus, he receives\n80 CRED coins. Chef cannot get any bag from the CodeChef store using these coins.\nTest Case\n3: For each bill payment, one receives\n70 CRED coins. Chef pays\n7 bills using CRED. Thus, he receives\n490 CRED coins. Chef can get at most\n4 bags from the CodeChef store using these coins.",
        "121": "Water Filling\nChef has three water bottles. At any point, if at least two of them are empty, she will fill them up. But if at most one bottle is empty, she will wait, and not fill them up now.\nYou are given three integers -\nB\n1\n,B\n2\n, and\nB\n3\n.\nIf\nB\n1\n=1, it means that the first bottle is full.\nIf\nB\n1\n=0, it means that the first bottle is empty.\nSimilarly,\nB\n2\ndenotes whether the second bottle is full or empty, and\nB\n3\ndenotes it for the third bottle.\nOutput \"Water filling time\", if Chef has to fill the bottles now. If not, output \"Not now\".\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe only line of each test case contains three space-separated integers,\nB\n1\n,B\n2\n,B\n3\n.\nOutput Format\nFor each test case, output on a new line, either \"Water filling time\", or \"Not now\".\nConstraints\n1\u2264T\u22641000\nB\ni\nis either\n0 or\n1\nSample 1:\nInput\nOutput\n5\n0 0 0\n1 1 1\n1 1 0\n0 1 0\n0 1 1\nWater filling time\nNot now\nNot now\nWater filling time\nNot now\nExplanation:\nTestcase 1: The inputs are\n0,0,0. So all three bottles are empty. Since at least two bottles are empty, it is \"Water filling time\".\nTestcase 2: The inputs are\n1,1,1. So all three bottles are full. Since it is not the case that at least two bottles are empty, it is \"Not now\".\nTestcase 3: The inputs are\n1,1,0. So only one bottle is empty. Since it is not the case that at least two bottles are empty, it is \"Not now\".\nTestcase 4: The inputs are\n0,1,0. So two bottles are empty. Since at least two bottles are empty, it is \"Water filling time\".\nTestcase 5: The inputs are\n0,1,1. So only one bottle is empty. Since it is not the case that at least two bottles are empty, it is \"Not now\".",
        "122": "Sale Season\nIt's the sale season again and Chef bought items worth a total of\nX rupees. The sale season offer is as follows:\nif\nX\u2264100, no discount.\nif\n100<X\u22641000, discount is\n25 rupees.\nif\n1000<X\u22645000, discount is\n100 rupees.\nif\nX>5000, discount is\n500 rupees.\nFind the final amount Chef needs to pay for his shopping.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of single line of input containing an integer\nX.\nOutput Format\nFor each test case, output on a new line the final amount Chef needs to pay for his shopping.\nConstraints\n1\u2264T\u2264100\n1\u2264X\u226410000\nSample 1:\nInput\nOutput\n4\n15\n70\n250\n1000\n15\n70\n225\n975\nExplanation:\nTest case\n1: Since\nX\u2264100, there is no discount.\nTest case\n3: Here,\nX=250. Since\n100<250\u22641000, discount is of\n25 rupees. Therefore, Chef needs to pay\n250\u221225=225 rupees.",
        "123": "Minimum Pizzas\nEach pizza consists of\n4 slices. There are\nN friends and each friend needs exactly\nX slices.\nFind the minimum number of pizzas they should order to satisfy their appetite.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two integers\nN and\nX, the number of friends and the number of slices each friend wants respectively.\nOutput Format\nFor each test case, output the minimum number of pizzas required.\nConstraints\n1\u2264T\u2264100\n1\u2264N,X\u226410\nSample 1:\nInput\nOutput\n4\n1 5\n2 6\n4 3\n3 5\n2\n3\n3\n4\nExplanation:\nTest case\n1: There is only\n1 friend who requires\n5 slices. If he orders\n1 pizza, he will get only\n4 slices. Thus, at least\n2 pizzas should be ordered to have required number of slices.\nTest case\n2: There are\n2 friends who require\n6 slices each. Thus, total\n12 slices are required. To get\n12 slices, they should order\n3 pizzas.\nTest case\n3: There are\n4 friends who require\n3 slices each. Thus, total\n12 slices are required. To get\n12 slices, they should order\n3 pizzas.\nTest case\n4: There are\n3 friends who require\n5 slices each. Thus, total\n15 slices are required. To get\n15 slices, they should order at least\n4 pizzas.",
        "124": "Chefland Games\nIn Chefland, a tennis game involves\n4 referees.\nEach referee has to point out whether he considers the ball to be inside limits or outside limits. The ball is considered to be IN if and only if all the referees agree that it was inside limits.\nGiven the decision of the\n4 referees, help Chef determine whether the ball is considered inside limits or not.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line of input containing\n4 integers\nR\n1\n,R\n2\n,R\n3\n,R\n4\ndenoting the decision of the respective referees.\nHere\nR can be either\n0 or\n1 where\n0 would denote that the referee considered the ball to be inside limits whereas\n1 denotes that they consider it to be outside limits.\nOutput Format\nFor each test case, output IN if the ball is considered to be inside limits by all referees and OUT otherwise.\nThe checker is case-insensitive so answers like in, In, and IN would be considered the same.\nConstraints\n1\u2264T\u226420\n0\u2264R\n1\n,R\n2\n,R\n3\n,R\n4\n\u22641\nSample 1:\nInput\nOutput\n4\n1 1 0 0\n0 0 0 0\n0 0 0 1\n1 1 1 1\nOUT\nIN\nOUT\nOUT\nExplanation:\nTest case\n1: Referees\n1 and\n2 do not consider the ball to be IN. Thus, the ball is OUT.\nTest case\n2: All referees consider the ball to be IN. Thus, the ball is IN.\nTest case\n3: Referee\n4 does not consider the ball to be IN. Thus, the ball is OUT.\nTest case\n4: No referee considers the ball to be IN. Thus, the ball is OUT.",
        "125": "Expert Setter\nA problem setter is called an expert if at least\n50% of their problems are approved by Chef.\nMunchy submitted\nX problems for approval. If\nY problems out of those were approved, find whether Munchy is an expert or not.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a two space-separated integers\nX and\nY - the number of problems submitted and the number of problems that were approved by Chef.\nOutput Format\nFor each test case, output on a new line YES, if Munchy is an expert. Otherwise, print NO.\nThe output is case-insensitive. Thus, the strings YES, yes, yeS, and Yes are all considered the same.\nConstraints\n1\u2264T\u22641000\n1\u2264Y\u2264X\u226410\n6\nSample 1:\nInput\nOutput\n4\n5 3\n1 1\n4 1\n2 1\nYES\nYES\nNO\nYES\nExplanation:\nTest case\n1: We are given that\n3 out of\n5 problems were approved. Thus,\n60% of the problems were approved. Since at least\n50% of the problems were approved, Munchy is an expert.\nTest case\n2: We are given that\n1 out of\n1 problems were approved. Thus,\n100% of the problems were approved. Since at least\n50% of the problems were approved, Munchy is an expert.\nTest case\n3: We are given that\n1 out of\n4 problems were approved. Thus,\n25% of the problems were approved. Since at least\n50% of the problems were not approved, Munchy is not an expert.\nTest case\n4: We are given that\n1 out of\n2 problems were approved. Thus,\n50% of the problems were approved. Since at least\n50% of the problems were approved, Munchy is an expert.",
        "126": "Chef and NextGen\nChef is currently working for a secret research group called NEXTGEN. While the rest of the world is still in search of a way to utilize Helium-3 as a fuel, NEXTGEN scientists have been able to achieve 2 major milestones:\nFinding a way to make a nuclear reactor that will be able to utilize Helium-3 as a fuel\nObtaining every bit of Helium-3 from the moon's surface\nMoving forward, the project requires some government funding for completion, which comes under one condition: to prove its worth, the project should power Chefland by generating at least\nA units of power each year for the next\nB years.\nHelp Chef determine whether the group will get funded assuming that the moon has\nX grams of Helium-3 and\n1 gram of Helium-3 can provide\nY units of power.\nInput Format\nThe first line of input contains an integer\nT, the number of testcases. The description of\nT test cases follows.\nEach test case consists of a single line of input, containing four space-separated integers\nA,B,X,Y respectively.\nOutput Format\nFor each test case print on a single line the answer \u2014 Yes if NEXTGEN satisfies the government's minimum requirements for funding and No otherwise.\nYou may print each character of the answer string in either uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\nConstraints\n1\u2264T\u22641000\n1\u2264A,B,X,Y,\u22641000\nSubtasks\nSubtask #1 (100 points): Original constraints\nSample 1:\nInput\nOutput\n4\n1 2 3 4\n4 3 2 1\n2 18 9 4\n1 100 2 49\nYes\nNo\nYes\nNo\nExplanation:\nTest case\n1: Chefland requires\nA=1 units of power for the next\nB=2 years. In total, the moon must be capable of providing\nA\u22c5B=2 units of power. There are in total\nX=3 grams of Helium-3 on the moon which is capable of providing\nX\u22c5Y=12 units of power.\n12>2, so the project satisfies the minimum requirements for funding. Thus, the answer is Yes.\nTest case\n2: The total amount of power needed by Chefland is\nA\u22c5B=12, whereas the total that can be provided by the Helium-3 present on the moon is\nX\u22c5Y=2, which is insufficient to receive funding, so the answer is No.\nTest case\n3: The total amount of power needed by Chefland is\nA\u22c5B=2\u22c518=36, and the total that can be provided by the Helium-3 present on the moon is\nX\u22c5Y=9\u22c54=36, which is sufficient to receive funding, so the answer is Yes.\nTest case\n4: The total amount of power needed by Chefland is\nA\u22c5B=1\u22c5100=100, and the total that can be provided by the Helium-3 present on the moon is\nX\u22c5Y=2\u22c549=98, which is insufficient to receive funding, so the answer is No.",
        "127": "Sugarcane Juice Business\nWhile Alice was drinking sugarcane juice, she started wondering about the following facts:\nThe juicer sells each glass of sugarcane juice for\n50 coins.\nHe spends\n20% of his total income on buying sugarcane.\nHe spends\n20% of his total income on buying salt and mint leaves.\nHe spends\n30% of his total income on shop rent.\nAlice wonders, what is the juicer's profit (in coins) when he sells\nN glasses of sugarcane juice?\nInput Format\nThe first line of input will contain an integer\nT \u2014 the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains an integer\nN, as described in the problem statement.\nOutput Format\nFor each test case, output on a new line the juicer's profit when he sells\nN glasses of juice.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u226410\n6\nSample 1:\nInput\nOutput\n4\n2\n4\n5\n10\n30\n60\n75\n150\nExplanation:\nTest case\n1: The total income is\n50\u00d72=100 coins. The juicer spends\n20 coins on sugarcane,\n20 coins on salt and mint leaves and\n30 coins on rent. Thus, the profit is\n100\u2212(20+20+30)=30 coins.\nTest case\n2: The total income is\n50\u00d74=200 coins. The juicer spends\n40 coins on sugarcane,\n40 coins on salt and mint leaves and\n60 coins on rent. Thus, the profit is\n200\u2212(40+40+60)=60 coins.\nTest case\n3: The total income is\n50\u00d75=250 coins. The juicer spends\n50 coins on sugarcane,\n50 coins on salt and mint leaves and\n75 coins on rent. Thus, the profit is\n250\u2212(50+50+75)=75 coins.\nTest case\n4: The total income is\n50\u00d710=500 coins. The juicer spends\n100 coins on sugarcane,\n100 coins on salt and mint leaves and\n150 coins on rent. Thus, the profit is\n500\u2212(100+100+150)=150 coins.",
        "128": "Count the Notebooks\nYou know that\n1 kg of pulp can be used to make\n1000 pages and\n1 notebook consists of\n100 pages.\nSuppose a notebook factory receives\nN kg of pulp, how many notebooks can be made from that?\nInput Format\nFirst line will contain\nT, the number of test cases. Then the test cases follow.\nEach test case contains a single integer\nN - the weight of the pulp the factory has (in kgs).\nOutput Format\nFor each test case, output the number of notebooks that can be made using\nN kgs of pulp.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u2264100\nSample 1:\nInput\nOutput\n3\n1\n100\n50\n10\n1000\n500\nExplanation:\nTest case-1:\n1 kg of pulp can be used to make\n1000 pages which can be used to make\n10 notebooks.\nTest case-2:\n100 kg of pulp can be used to make\n100000 pages which can be used to make\n1000 notebooks.\nTest case-3:\n50 kg of pulp can be used to make\n50000 pages which can be used to make\n500 notebooks.",
        "129": "Chef and Candies\nThere are\nN children and Chef wants to give them\n1 candy each. Chef already has\nX candies with him. To buy the rest, he visits a candy shop. In the shop, packets containing exactly\n4 candies are available.\nDetermine the minimum number of candy packets Chef must buy so that he is able to give\n1 candy to each of the\nN children.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case contains two integers\nN and\nX \u2014 the number of children and the number of candies Chef already has.\nOutput Format\nFor each test case, output the minimum number of candy packets Chef must buy so that he is able to give\n1 candy to each of the\nN children.\nConstraints\n1\u2264T\u22641000\n1\u2264N,X\u2264100\nSample 1:\nInput\nOutput\n4\n20 12\n10 100\n10 9\n20 9\n2\n0\n1\n3\nExplanation:\nTest Case\n1: Chef must buy\n2 more packets after which he will have\n20 candies which will be enough to distribute\n1 candy to each of the\n20 children.\nTest Case\n2: Chef does not need to buy more packets since he already has\n100 candies which are enough to distribute\n1 candy to each of the\n10 children.\nTest Case\n3: Chef must buy\n1 more packet after which he will have\n13 candies which will be enough to distribute\n1 candy to each of the\n10 children.\nTest Case\n4: Chef must buy\n3 more packets after which he will have\n21 candies which will be enough to distribute\n1 candy to each of the\n20 children.",
        "130": "Car or Bike\nChef wants to reach home as soon as possible. He has two options:\nTravel with his BIKE which takes\nX minutes.\nTravel with his CAR which takes\nY minutes.\nWhich of the two options is faster or do they both take same time?\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains a single line of input, two integers\nX,Y representing the time taken to travel with BIKE and CAR respectively.\nOutput Format\nFor each test case, print CAR if travelling with Car is faster, BIKE if travelling with Bike is faster, SAME if they both take the same time.\nYou may print each character of CAR, BIKE and SAME in uppercase or lowercase (for example, CAR, Car, cAr will be considered identical).\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y\u226410\nSample 1:\nInput\nOutput\n3\n1 5\n4 2\n6 6\nBIKE\nCAR\nSAME\nExplanation:\nTest case-1: Travelling with BIKE takes\n1 minute while travelling with CAR takes\n5 minutes. So travelling with BIKE is faster.\nTest case-2: Travelling with BIKE takes\n4 minutes while travelling with CAR takes\n2 minutes. So travelling with CAR is faster.\nTest case-3: Travelling with both BIKE and CAR takes the SAME time i.e.\n6 minutes.",
        "131": "Is the Score Consistent\nChef is watching a football match. The current score is\nA:B, that is, team\n1 has scored\nA goals and team\n2 has scored\nB goals. Chef wonders if it is possible for the score to become\nC:D at a later point in the game (i.e. team\n1 has scored\nC goals and team\n2 has scored\nD goals). Can you help Chef by answering his question?\nInput Format\nThe first line contains a single integer\nT - the number of test cases. Then the test cases follow.\nThe first line of each test case contains two integers\nA and\nB - the intial number of goals team\n1 and team\n2 have scored respectively.\nThe second line of each test case contains two integers\nC and\nD - the final number of goals team\n1 and team\n2 must be able to score respectively.\nOutput Format\nFor each testcase, output POSSIBLE if it is possible for the score to become\nC:D at a later point in the game, IMPOSSIBLE otherwise.\nYou may print each character of POSSIBLE and IMPOSSIBLE in uppercase or lowercase (for example, possible, pOSsiBLe, Possible will be considered identical).\nConstraints\n1\u2264T\u22641000\n0\u2264A,B,C,D\u226410\nSample 1:\nInput\nOutput\n3\n1 5\n3 5\n3 4\n2 6\n2 2\n2 2\nPOSSIBLE\nIMPOSSIBLE\nPOSSIBLE\nExplanation:\nTest case 1: The current score is\n1:5. If team\n1 scores\n2 more goals, the score will become\n3:5. Thus\n3:5 is a possible score.\nTest case 2: The current score is\n3:4. It can be proven that no non-negative pair of integers\n(x,y) exists such that if team\n1 scores\nx more goals and team\n2 scores\ny more goals the score becomes\n2:6 from\n3:4. Thus in this case\n2:6 is an impossible score.\nTest case 3: The current score is already\n2:2. Hence it is a possible score.",
        "132": "The Three Topics\nThe Chef has reached the finals of the Annual Inter-school Declamation contest.\nFor the finals, students were asked to prepare\n10 topics. However, Chef was only able to prepare three topics, numbered\nA,\nB and\nC \u2014 he is totally blank about the other topics. This means Chef can only win the contest if he gets the topics\nA,\nB or\nC to speak about.\nOn the contest day, Chef gets topic\nX. Determine whether Chef has any chances of winning the competition.\nPrint \"Yes\" if it is possible for Chef to win the contest, else print \"No\".\nYou may print each character of the string in either uppercase or lowercase (for example, the strings yEs, yes, Yes, and YES will all be treated as identical).\nInput Format\nThe first and only line of input will contain a single line containing four space-separated integers\nA,\nB,\nC, and\nX \u2014 the three topics Chef has prepared and the topic that was given to him on contest day.\nOutput Format\nFor each testcase, output in a single line \"Yes\" or \"No\".\nYou may print each character of the string in either uppercase or lowercase (for example, the strings yEs, yes, Yes, and YES will all be treated as identical).\nConstraints\n1\u2264A,B,C,X\u226410\nA,B,C are distinct.\nSubtasks\nSubtask #1 (100 points): Original constraints\nSample 1:\nInput\nOutput\n2 3 7 3\nYes\nExplanation:\nChef had prepared the topics:\n2,3,7. Chef gets to speak on the topic:\n3. Since Chef had already prepared this, there is a chance that he can win the contest.\nSample 2:\nInput\nOutput\n4 6 8 5\nNo\nExplanation:\nChef had prepared the topics:\n4,6,8. Chef gets to speak on the topic:\n5. Since Chef didn't prepare this topic, there is no chance that he can win the contest.",
        "133": "Monopoly\nThere are\n4 companies in the markets of Chefland,\nA,\nB,\nC, and\nD.\nThis year,\nCompany\nA made a profit of\nP lakh rupees,\nCompany\nB made a profit of\nQ lakh rupees,\nCompany\nC made a profit of\nR lakh rupees,\nCompany\nD made a profit of\nS lakh rupees.\nThere is said to be a monopoly in the market if the profit made by one company is strictly greater than the sum of profits made by all other companies.\nDetermine if there is a monopoly in the market or not.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first line and only line of each test case contains four space-separated integers\nP,\nQ,\nR and\nS \u2014 the profits made by companies\nA,\nB,\nC and\nD respectively.\nOutput Format\nFor each test case, output YES if there is a monopoly in the market. Otherwise, output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n1\u2264T\u22645000\n1\u2264P,Q,R,S\u2264100\nSample 1:\nInput\nOutput\n4\n1 1 1 10\n30 20 6 4\n100 90 3 4\n14 15 16 17\nYES\nNO\nYES\nNO\nExplanation:\nTest Case 1: Here, company\nD's profit (\n10) is greater than the sum of profits of all other companies (\n1+1+1=3).\nTest Case 2: Here, no company's profit is strictly greater than the sum of profits of all other companies.\nTest Case 3: Here, company\nA's profit (\n100) is greater than the sum of profits of all other companies (\n90+3+4=97).",
        "134": "Problems in your to-do list\nCodeChef recently revamped its practice page to make it easier for users to identify the next problems they should solve by introducing some new features:\nRecent Contest Problems - contains only problems from the last 2 contests\nSeparate Un-Attempted, Attempted, and All tabs\nProblem Difficulty Rating - the Recommended dropdown menu has various difficulty ranges so that you can attempt the problems most suited to your experience\nPopular Topics and Tags\nLike most users, Chef didn\u2019t know that he could add problems to a personal to-do list by clicking on the magic '+' symbol on the top-right of each problem page. But once he found out about it, he went crazy and added loads of problems to his to-do list without looking at their difficulty rating.\nChef is a beginner and should ideally try and solve only problems with difficulty rating strictly less than\n1000. Given a list of difficulty ratings for problems in the Chef\u2019s to-do list, please help him identify how many of those problems Chef should remove from his to-do list, so that he is only left with problems of difficulty rating less than\n1000.\nInput Format\nThe first line of input will contain a single integer\nT, the number of test cases. Then the testcases follow.\nEach testcase consists of 2 lines of input.\nThe first line of input of each test case contains a single integer,\nN, which is the total number of problems that the Chef has added to his to-do list.\nThe second line of input of each test case contains\nN space-separated integers\nD\n1\n,D\n2\n,\u2026,D\nN\n, which are the difficulty ratings for each problem in the to-do list.\nOutput Format\nFor each test case, output in a single line the number of problems that Chef will have to remove so that all remaining problems have a difficulty rating strictly less than\n1000.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u22641000\n1\u2264D\ni\n\u22645000\nSubtasks\nSubtask 1 (100 points):\nOriginal constraints\nSample 1:\nInput\nOutput\n5\n3\n800 1200 900\n4\n999 1000 1001 1002\n5\n1 2 2 2 5000\n5\n1000 1000 1000 1000 1000\n3\n900 700 800\n1\n3\n1\n5\n0\nExplanation:\nTest case\n1: Among the three difficulty ratings, Chef only needs to remove the problem with difficulty rating\n1200, since it is\n\u22651000. So, the answer is\n1.\nTest case\n2: Among the four difficulty ratings, Chef needs to remove the problems with difficulty ratings of\n1000,\n1001, and\n1002, since they are\n\u22651000. So, the answer is\n3.\nTest case\n3: Among the five difficulty ratings, Chef needs to remove the problem with a difficulty rating of\n5000, since it is\n\u22651000. So, the answer is\n1.\nTest case\n4: Chef needs to remove all the five problems, since they are all rated\n\u22651000. So, the answer is\n5.\nTest case\n5: Chef does not need to remove any problem, since they are all rated\n<1000. So, the answer is\n0.",
        "135": "Air Conditioner Temperature\nThere are three people sitting in a room - Alice, Bob, and Charlie. They need to decide on the temperature to set on the air conditioner. Everyone has a demand each:\nAlice wants the temperature to be at least\nA degrees.\nBob wants the temperature to be at most\nB degrees.\nCharlie wants the temperature to be at least\nC degrees.\nCan they all agree on some temperature, or not?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line which contains three integers -\nA,B,C.\nOutput Format\nFor each test case, output on a new line, \"Yes\" or \"No\". \"Yes\", if they can decide on some temperature which fits all their demands. Or \"No\", if no temperature fits all their demands.\nYou may print each character of the string in either uppercase or lowercase (for example, the strings NO, nO, No, and no will all be treated as identical).\nConstraints\n1\u2264T\u2264100\n1\u2264A,B,C\u2264100\nSubtasks\nSubtask 1 (10 points):\n1\u2264M\u226410\nSubtask 2 (20 points): The sum of\nN across all test cases won't exceed\n20.\nSubtask 3 (70 points): No further constraints.\nSample 1:\nInput\nOutput\n4\n30 35 25\n30 35 40\n30 35 35\n30 25 35\nYes\nNo\nYes\nNo\nExplanation:\nTest Case 1: Alice wants the temperature to be\n\u226530, Bob wants it to be\n\u226435, and Charlie wants it to be\n\u226525. The temperatures\n30,31,32,33,34,35 all satisfy all their demands. So they can choose any of these 6 temperatures, and so the answer is \"Yes\".\nTest Case 2: Alice wants the temperature to be\n\u226530, Bob wants it to be\n\u226435, and Charlie wants it to be\n\u226540. A number can't be both\n\u226540, and\n\u226435. So there is no temperature that satisfies all their demands. So the answer is \"No\".\nTest Case 3: Alice wants the temperature to be\n\u226530, Bob wants it to be\n\u226435, and Charlie wants it to be\n\u226535. The temperature\n35 satisfies all their demands. So the answer is \"Yes\".\nTest Case 4: Alice wants the temperature to be\n\u226530, Bob wants it to be\n\u226425, and Charlie wants it to be\n\u226535. A number can't be both\n\u226530, and\n\u226425. So there is no temperature that satisfies all their demands. So the answer is \"No\".",
        "136": "Nearest Exit\nThere are two exits in a bus with\n100 seats:\nFirst exit is located beside seat number\n1.\nSecond exit is located beside seat number\n100.\nSeats are arranged in a straight line from\n1 to\n100 with equal spacing between any\n2 adjacent seats.\nA passenger prefers to choose the nearest exit while leaving the bus.\nDetermine the exit taken by passenger sitting on seat\nX.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists a single integer\nX, denoting the seat number.\nOutput Format\nFor each test case, output LEFT if the passenger chooses the exit beside seat\n1, RIGHT otherwise.\nYou may print each character of the string in uppercase or lowercase (for example, the strings LEFT, lEft, left, and lEFT will all be treated as identical).\nConstraints\n1\u2264T\u2264100\n1\u2264X\u2264100\nSample 1:\nInput\nOutput\n6\n1\n50\n100\n30\n51\n73\nLEFT\nLEFT\nRIGHT\nLEFT\nRIGHT\nRIGHT\nExplanation:\nTest case\n1: The exit is located beside seat\n1. Hence, the passenger can take this exit without moving to any other seat.\nTest case\n2: To take exit at seat\n1, the passenger needs to move\n49 seats. However, to take the exit at seat\n100, the passenger needs to move\n50 seats. Thus, exit at seat\n1 is closer.\nTest case\n3: The exit is located beside seat\n100. Hence, the passenger can take this exit without moving to any other seat.\nTest case\n4: To take exit at seat\n1, the passenger needs to move\n29 seats. However, to take the exit at seat\n100, the passenger needs to move\n70 seats. Thus, exit at seat\n1 is closer.",
        "137": "Reverse The Number\nGiven an Integer N, write a program to reverse it.\nInput\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N.\nOutput\nFor each test case, display the reverse of the given number N, in a new line.\nConstraints\n1 \u2264 T \u2264 1000\n1 \u2264 N \u2264 1000000\nSample 1:\nInput\nOutput\n4\n12345\n31203\n2123\n2300\n54321\n30213\n3212\n32",
        "138": "Sasta Shark Tank\nDevendra just had a million-dollar idea and he needs funds to startup. He was recently invited to Sasta Shark Tank (A TV show where entrepreneurs pitch their ideas to investors hoping to get investment in return).\nHe was offered deals from two investors. The first investor offers\nA dollars for\n10% of his company and the second investor offers\nB dollars for\n20% of his company. Devendra will accept the offer from the investor whose valuation of the company is more. Determine which offer will Devendra accept or if both the offers are equally good.\nFor example, if the first investor offers\n300 dollars for\n10% of the company, then the first investor's valuation of the company is\n3000 dollars since\n10% of\n3000=300. If the second investor offers\n500 dollars for\n20% of the company, then the second investor's valuation of the company is\n2500 dollars since\n20% of\n2500=500.\nInput Format\nThe first line contains a single integer\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two integers\nA and\nB - the amount offered by first investor for\n10% of Devendra's company and the amount offered by second investor for\n20% of Devendra's company respectively.\nOutput Format\nFor each test case, Output FIRST if Devendra should accept the first investor's deal, output SECOND if he should accept the second investor's deal, otherwise output ANY if both deals are equally good.\nYou may print each character of the strings in uppercase or lowercase (for example, the strings \"FiRst\", \"First\", \"FIRST\", and \"FIrst\" will all be treated as identical).\nConstraints\n1\u2264T\u2264100\n100\u2264A,B\u226410000\nA and\nB are multiples of\n100\nSample 1:\nInput\nOutput\n3\n100 200\n200 100\n200 500\nANY\nFIRST\nSECOND\nExplanation:\nTest case 1: First investor's valuation of Devendra's company was\n1000 since\n10% of\n1000=100 which is the amount he offered for\n10% of the company.\nSecond investor's valuation of Devendra's company was also\n1000 since\n20% of\n1000=200 which is the amount he offered for\n20% of the company.\nTherefore he can accept any of the deal.\nTest case 2: First investor offered a better deal as he valued Devendra's company at\n2000 dollars (since\n10% of\n2000=200) compared to the second investor who valued Devendra's company at\n500 dollars (since\n20% of\n500=100).\nTest case 3: Second investor offered a better deal as he valued Devendra's company at\n2500 dollars compared to the first investor who valued Devendra's company\n2000 dollars.",
        "139": "Good Program\nIn computing, the collection of four bits is called a nibble.\nChef defines a program as:\nGood, if it takes exactly\nX nibbles of memory, where\nX is a positive integer.\nNot Good, otherwise.\nGiven a program which takes\nN bits of memory, determine whether it is Good or Not Good.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nThe first and only line of each test case contains a single integer\nN, the number of bits taken by the program.\nOutput Format\nFor each test case, output\nGood or\nNot Good in a single line. You may print each character of\nGood or\nNot Good in uppercase or lowercase (for example,\nGoOd,\nGOOD,\ngood will be considered identical).\nConstraints\n1\u2264T\u22641000\n1\u2264N\u22641000\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n4\n8\n17\n52\n3\nGood\nNot Good\nGood\nNot Good\nExplanation:\nTest case 1: The program requires\n8 bits of memory. This is equivalent to\n4\n8\n=2 nibbles. Since\n2 is an integer, this program is good.\nTest case 2: The program requires\n17 bits of memory. This is equivalent to\n4\n17\n=4.25 nibbles. Since\n4.25 is not an integer, this program is not good.\nTest case 3: The program requires\n52 bits of memory. This is equivalent to\n4\n52\n=13 nibbles. Since\n13 is an integer, this program is good.\nTest case 4: The program requires\n3 bits of memory. This is equivalent to\n4\n3\n=0.75 nibbles. Since\n0.75 is not an integer, this program is not good.",
        "140": "Qualify the round\nIn a coding contest, there are two types of problems:\nEasy problems, which are worth\n1 point each\nHard problems, which are worth\n2 points each\nTo qualify for the next round, a contestant must score at least\nX points. Chef solved\nA Easy problems and\nB Hard problems. Will Chef qualify or not?\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nEach test case consists of a single line of input containing three space-separated integers \u2014\nX,A, and\nB.\nOutput Format\nFor each test case, output a new line containing the answer \u2014 Qualify if Chef qualifies for the next round, and NotQualify otherwise.\nEach character of the answer may be printed in either uppercase or lowercase. For example, if the answer is Qualify, outputs such as qualify, quALiFy, QUALIFY and QuAlIfY will also be accepted as correct.\nConstraints\n1\u2264T\u2264100\n1\u2264X\u2264100\n0\u2264A,B\u2264100\nSample 1:\nInput\nOutput\n3\n15 9 3\n5 3 0\n6 2 8\nQualify\nNotQualify\nQualify\nExplanation:\nTest Case\n1: Chef solved\n9 easy problems and\n3 hard problems, making his total score\n9\u22c51+3\u22c52=15. He needs at least\n15 points to qualify, which he has and hence he qualifies.\nTest Case\n2: Chef solved\n3 easy problems and\n0 hard problems, making his total score\n3\u22c51+0\u22c52=3. He needs at least\n5 points to qualify, which he doesn't have and hence doesn't qualify.\nTest Case\n3: Chef solved\n2 easy problems and\n8 hard problems, making his total score\n2\u22c51+8\u22c52=18. He needs at least\n6 points to qualify, which he has and hence he qualifies.",
        "141": "Elections in Chefland\nElection season has started in Chefland and the election commission wants to know the count of eligible voters.\nThere are\nN people in Chefland where the age of the\ni\nth\nperson in\nA\ni\n.\nGiven that a person needs to be at least\nX years old to vote, find the number of eligible voters.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains two space-separated integers\nN and\nX \u2014 the number of people in Chefland, and the minimum age required for a person to vote in Chefland.\nThe next line contains\nN space-separated integers, where the\ni\nth\ninteger denotes the age of the\ni\nth\nperson.\nOutput Format\nFor each test case, output on a new line, the number of eligible voters in Chefland.\nConstraints\n1\u2264T\u2264200\n1\u2264N\u2264100\n1\u2264A\ni\n,X\u2264100\nSample 1:\nInput\nOutput\n4\n4 3\n5 3 1 2\n3 2\n1 3 4\n4 2\n2 1 2 4\n5 6\n1 2 3 4 5\n2\n2\n3\n0\nExplanation:\nTest case\n1: The minimum age to vote in Chefland is\n3 years. There are\n2 people with age greater than equal to\n3 and thus, there are\n2 eligible voters.\nTest case\n2: The minimum age to vote in Chefland is\n2 years. There are\n2 people with age greater than equal to\n2 and thus, there are\n2 eligible voters.\nTest case\n3: The minimum age to vote in Chefland is\n2 years. There are\n3 people with age greater than equal to\n2 and thus, there are\n3 eligible voters.\nTest case\n4: The minimum age to vote in Chefland is\n6 years. There are no people with age greater than equal to\n6 and thus, there are no eligible voters.",
        "142": "Minimum Cars required\nA single car can accommodate at most\n4 people.\nN friends want to go to a restaurant for a party. Find the minimum number of cars required to accommodate all the friends.\nInput Format\nThe first line contains a single integer\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains an integer\nN - denoting the number of friends.\nOutput Format\nFor each test case, output the minimum number of cars required to accommodate all the friends.\nConstraints\n1\u2264T\u22641000\n2\u2264N\u22641000\nSample 1:\nInput\nOutput\n4\n4\n2\n7\n98\n1\n1\n2\n25\nExplanation:\nTest Case\n1: There are only\n4 friends and a single car can accommodate\n4 people. Thus, only\n1 car is required.\nTest Case\n2: There are only\n2 friends and a single car can accommodate\n4 people. Thus, only\n1 car is required\nTest Case\n3: There are\n7 friends and\n2 cars can accommodate\n8 people. Thus,\n2 cars are required.",
        "143": "Test Score\nIn a test, there are\nN problems, each carrying\nX marks.\nIn each problem, Chef either received\nX marks or\n0 marks.\nDetermine whether is it possible for Chef to achieve exactly\nY marks.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of three integers\nN,X, and\nY, the number of problems, the maximum score for each problem, and the score Chef wants.\nOutput Format\nFor each test case, output YES if Chef can achieve exactly\nY marks, NO otherwise.\nYou can print each character of the string in uppercase or lowercase. For example, the strings Yes, YES, yes, and yEs, are all considered identical.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u226410\n1\u2264X\u226410\n0\u2264Y\u2264N\u22c5X\nSample 1:\nInput\nOutput\n5\n1 8 4\n3 6 12\n4 5 0\n10 10 100\n8 5 36\nNO\nYES\nYES\nYES\nNO\nExplanation:\nTest case\n1: There is no way for Chef to score exactly\n4 marks.\nTest case\n2: Chef can score\n12 marks by receiving\n6 marks in\n2 problems and\n0 marks in\n1 problem.\nTest case\n3: Chef can score\n0 marks by receiving\n0 marks in each of the\n4 problems.\nTest case\n4: Chef can score\n100 marks by receiving\n10 marks in each of the\n10 problems.\nTest case\n5: There is no way for Chef to score exactly\n36 marks.",
        "144": "Jenga Night\nChef hosts a party for his birthday. There are\nN people at the party. All these\nN people decide to play Jenga.\nThere are\nX Jenga tiles available. In one round, all the players pick\n1 tile each and place it in the tower.\nThe game is valid if:\nAll the players have a tile in each round;\nAll the tiles are used at the end.\nGiven\nN and\nX, find whether the game is valid.\nInput Format\nFirst line will contain\nT, the number of test cases. Then the test cases follow.\nEach test case contains a single line of input, containing two space-separated integers\nN and\nX representing the number of people at the party and the number of available tiles respectively.\nOutput Format\nFor each test case, output in a single line\nYES if the game is valid, else output\nNO.\nYou may print each character of the string in uppercase or lowercase (for example, the strings\nYeS,\nyEs,\nyes and\nYES will all be treated as identical).\nConstraints\n1\u2264T\u226410\n4\n1\u2264N,X\u22641000\nSample 1:\nInput\nOutput\n3\n3 3\n4 2\n2 4\nYES\nNO\nYES\nExplanation:\nTest case\n1: The game will last for\n1 round after which the tiles will finish.\nTest case\n2: There are not enough Jenga tiles for everyone to place.\nTest case\n3: The game will last for\n2 rounds as after round\n2 all Jenga tiles are used.",
        "145": "Bus Seat Numbering\nThere is a bus with 30 seats. The seats are numbered from 1 to 30, and the numbering is as depicted in this image.\nAs can be seen in the image, the bus is divided into two decks - The Lower deck, and the Upper deck, with 15 seats each. And some of the seats come as Single and some as Double. For example, Seats 1 and 2 are Double, whereas Seat 11 is a Single.\nYou will be given a Seat number, and your job is to classify it as one of these 4 types:\nLower Single\nLower Double\nUpper Single\nUpper Double\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line of input which contains a single integers\nN \u2014 the seat number.\nOutput Format\nFor each test case, output on a new line, the type of seat.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u226430\nSample 1:\nInput\nOutput\n5\n6\n28\n16\n13\n10\nLower Double\nUpper Single\nUpper Double\nLower Single\nLower Double\nExplanation:\nTestcase 1: The seat number 6 is in the Lower deck, and it is a Double. Hence the output is \"Lower Double\".\nTestcase 2: The seat number 28 is in the Upper deck, and it is a Single. Hence the output is \"Upper Single\".\nTestcase 3: The seat number 16 is in the Upper deck, and it is a Double. Hence the output is \"Upper Double\".\nTestcase 4: The seat number 13 is in the Lower deck, and it is a Single. Hence the output is \"Lower Single\".\nTestcase 5: The seat number 10 is in the Lower deck, and it is a Double. Hence the output is \"Lower Double\".",
        "146": "Discus Throw\nIn discus throw, a player is given\n3 throws and the throw with the longest distance is regarded as their final score.\nYou are given the distances for all\n3 throws of a player. Determine the final score of the player.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains of a single line of input, three integers\nA,B, and\nC denoting the distances in each throw.\nOutput Format\nFor each test case, output the final score of the player.\nConstraints\n1\u2264T\u2264100\n1\u2264A,B,C\u2264100\nSample 1:\nInput\nOutput\n3\n10 15 8\n32 32 32\n82 45 54\n15\n32\n82\nExplanation:\nTest Case\n1: The longest distance is achieved in the second throw, which is equal to\n15 units. Thus, the answer is\n15.\nTest Case\n2: In all throws, the distance is\n32 units. Thus, the final score is\n32.\nTest Case\n3: The longest distance is achieved in the first throw which is equal to\n82 units. Thus, the answer is\n82.",
        "147": "Maximise the Tastiness\nChef is making a dish that consists of exactly two ingredients. He has four ingredients\nA,B,C and\nD with tastiness\na,b,c, and\nd respectively. He can use either\nA or\nB as the first ingredient and either\nC or\nD as the second ingredient.\nThe tastiness of a dish is the sum of tastiness of its ingredients. Find the maximum possible tastiness of the dish that the chef can prepare.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case contains four space-separated integers\na,b,c, and\nd \u2014 the tastiness of the four ingredients.\nOutput Format\nFor each test case, output on a new line the maximum possible tastiness of the dish that chef can prepare.\nConstraints\n1\u2264T\u2264100\n1\u2264a,b,c,d\u2264100\nSample 1:\nInput\nOutput\n2\n3 5 6 2\n16 15 5 4\n11\n21\nExplanation:\nTest case\n1: Chef can prepare a dish with ingredients\nB and\nC with a tastiness of\n5+6=11.\nTest case\n2: Chef can prepare a dish with ingredients\nA and\nC with a tastiness of\n16+5=21.",
        "148": "Watching Movies at 2x\nChef started watching a movie that runs for a total of\nX minutes.\nChef has decided to watch the first\nY minutes of the movie at twice the usual speed as he was warned by his friends that the movie gets interesting only after the first\nY minutes.\nHow long will Chef spend watching the movie in total?\nNote: It is guaranteed that\nY is even.\nInput Format\nThe first line contains two space separated integers\nX,Y - as per the problem statement.\nOutput Format\nPrint in a single line, an integer denoting the total number of minutes that Chef spends in watching the movie.\nConstraints\n1\u2264X,Y\u22641000\nY is an even integer.\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n100 20\n90\nExplanation:\nFor the first\nY=20 minutes, Chef watches at twice the usual speed, so the total amount of time spent to watch this portion of the movie is\n2\nY\n=10 minutes.\nFor the remaining\nX\u2212Y=80 minutes, Chef watches at the usual speed, so it takes him\n80 minutes to watch the remaining portion of the movie.\nIn total, Chef spends\n10+80=90 minutes watching the entire movie.\nSample 2:\nInput\nOutput\n50 24\n38\nExplanation:\nFor the first\nY=24 minutes, Chef watches at twice the usual speed, so the total amount of time spent to watch this portion of the movie is\n2\nY\n=12 minutes.\nFor the remaining\nX\u2212Y=26 minutes, Chef watches at the usual speed, so it takes him\n26 minutes to watch the remaining portion of the movie.\nIn total, Chef spends\n12+26=38 minutes watching the entire movie.",
        "149": "Police and Thief\nChef discovered that his secret recipe has been stolen. He immediately informs the police of the theft.\nIt is known that the policeman and thief move on the number line. You are given that:\nThe initial location of the policeman on the number line is\nX and his speed is\n2 units per second.\nThe initial location of the thief on the number line is\nY and his speed is\n1 unit per second.\nFind the minimum time (in seconds) in which the policeman can catch the thief. Note that, the policeman catches the thief as soon as their locations become equal and the thief will try to evade the policeman for as long as possible.\nInput Format\nThe first line of input will contain an integer\nT \u2014 the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains two integers\nX and\nY, as described in the problem statement.\nOutput Format\nFor each test case, output in a single line the minimum time taken by the policeman to catch the thief.\nConstraints\n1\u2264T\u22641000\n\u221210\n5\n\u2264X,Y\u226410\n5\nSample 1:\nInput\nOutput\n3\n1 3\n2 1\n1 1\n2\n1\n0\nExplanation:\nTest case\n1: The initial locations of the policeman and thief are\n1 and\n3 respectively. The minimum time taken by the policeman to catch the thief is\n2 seconds, and this happens when both the policeman and the thief move towards the right.\nTest case\n2: The initial location of the policeman and thief are\n2 and\n1 respectively. The minimum time taken by the policeman to catch the thief is\n1 second, and this happens when both the policeman and the thief move towards the left.\nTest case\n3: The initial locations of the policeman and thief are\n1 and\n1 respectively. Because the police is already present at the location of thief, the time taken by police to catch the thief is\n0 seconds.",
        "150": "Flip the cards\nThere are\nN cards on a table, out of which\nX cards are face-up and the remaining are face-down.\nIn one operation, we can do the following:\nSelect any one card and flip it (i.e. if it was initially face-up, after the operation, it will be face-down and vice versa)\nWhat is the minimum number of operations we must perform so that all the cards face in the same direction (i.e. either all are face-up or all are face-down)?\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two space-separated integers\nN and\nX \u2014 the total number of cards and the number of cards which are initially face-up.\nOutput Format\nFor each test case, output the minimum number of cards you must flip so that all the cards face in the same direction.\nConstraints\n1\u2264T\u22645000\n2\u2264N\u2264100\n0\u2264X\u2264N\nSample 1:\nInput\nOutput\n4\n5 0\n4 2\n3 3\n10 2\n0\n2\n0\n2\nExplanation:\nTest Case 1: All the cards are already facing down. Therefore we do not need to perform any operations.\nTest Case 2:\n2 cards are facing up and\n2 cards are facing down. Therefore we can flip the\n2 cards which are initially facing down.\nTest Case 3: All the cards are already facing up. Therefore we do not need to perform any operations.\nTest Case 4:\n2 cards are facing up and\n8 cards are facing down. Therefore we can flip the\n2 cards which are initially facing up.",
        "151": "Bath in Winters\nA geyser has a capacity of\nX litres of water and a bucket has a capacity of\nY litres of water.\nOne person requires exactly\n2 buckets of water to take a bath. Find the maximum number of people that can take bath using water from one completely filled geyser..\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains a single line of input, two integers\nX,Y.\nOutput Format\nFor each test case, output the maximum number of people that can take bath.\nConstraints\n1\u2264T\u22641000\n1\u2264X,Y\u2264100\nSample 1:\nInput\nOutput\n4\n10 6\n25 1\n100 10\n30 40\n0\n12\n5\n0\nExplanation:\nTest Case\n1: One bucket has a capacity of\n6 litres. This means that one person requires\n2\u22c56=12 litres of water to take a bath. Since this is less than the total water present in geyser,\n0 people can take bath.\nTest Case\n2: One bucket has a capacity of\n1 litre. This means that one person requires\n2\u22c51=2 litres of water to take a bath. The total amount of water present in geyser is\n25 litres. Thus,\n12 people can take bath. Note that\n1 litre water would remain unused in the geyser.\nTest Case\n3: One bucket has a capacity of\n10 litres. This means that one person requires\n2\u22c510=20 litres of water to take a bath. The total amount of water present in geyser is\n100 litres. Thus,\n5 people can take bath. Note that\n0 litres of water would remain unused in the geyser after this.",
        "152": "Finding Shoes\nChef has\nN friends. Chef promised that he would gift a pair of shoes (consisting of one left shoe and one right shoe) to each of his\nN friends. Chef was about to go to the marketplace to buy shoes, but he suddenly remembers that he already had\nM left shoes.\nWhat is the minimum number of extra shoes that Chef will have to buy to ensure that he is able to gift a pair of shoes to each of his\nN friends?\nFor example, if\nN=2,\nM=4, then Chef already has\n4 left shoes, so he must buy\n2 extra right shoes to form\n2 pairs of shoes.\nTherefore Chef must buy at least\n2 extra shoes to ensure that he is able to get\nN=2 pairs of shoes.\nInput Format\nThe first line contains a single integer\nT - the number of test cases. Then the test cases follow.\nThe first line of each test case contains two integers\nN and\nM - the number of Chef's friends and the number of left shoes Chef has.\nOutput Format\nFor each test case, output the minimum number of extra shoes that Chef will have to buy to ensure that he is able to get\nN pairs of shoes.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u2264100\n0\u2264M\u2264100\nSample 1:\nInput\nOutput\n3\n2 4\n6 0\n4 3\n2\n12\n5\nExplanation:\nTest Case 1: Discussed in the problem statement\nTest Case 2: Chef initially has no left shoes. He must buy\n6 more left shoes and\n6 more right shoes to form\n6 pairs of shoes.\nTest Case 3: Chef initially has\n3 left shoes. He must buy\n1 more left shoe and\n4 more right shoes to form\n4 pairs of shoes.",
        "153": "Small factorials\nYou are asked to calculate factorials of some small positive integers.\nInput\nAn integer t, 1<=t<=100, denoting the number of testcases, followed by t lines, each containing a single integer n, 1 <= n <= 100\nOutput\nFor each integer n given at input, display a line with the value of n!\nNote: For larger numbers, their factorial can overflows any available numeric data type in C.\nSample 1:\nInput\nOutput\n4\n1\n2\n5\n3\n1\n2\n120\n6",
        "154": "Mario and Transformation\nMario transforms each time he eats a mushroom as follows:\nIf he is currently small, he turns normal.\nIf he is currently normal, he turns huge.\nIf he is currently huge, he turns small.\nGiven that Mario was initially normal, find his size after eating\nX mushrooms.\nInput Format\nThe first line of input will contain one integer\nT, the number of test cases. Then the test cases follow.\nEach test case contains a single line of input, containing one integer\nX.\nOutput Format\nFor each test case, output in a single line Mario's size after eating\nX mushrooms.\nPrint:\nNORMAL, if his final size is normal.\nHUGE, if his final size is huge.\nSMALL, if his final size is small.\nYou may print each character of the answer in either uppercase or lowercase (for example, the strings\nHuge,\nhUgE,\nhuge and\nHUGE will all be treated as identical).\nConstraints\n1\u2264T\u2264100\n1\u2264X\u2264100\nSample 1:\nInput\nOutput\n3\n2\n4\n12\nSMALL\nHUGE\nNORMAL\nExplanation:\nTest case\n1: Mario's initial size is normal. On eating the first mushroom, he turns huge. On eating the second mushroom, he turns small.\nTest case\n2: Mario's initial size is normal. On eating the first mushroom, he turns huge. On eating the second mushroom, he turns small. On eating the third mushroom, he turns normal. On eating the fourth mushroom, he turns huge.",
        "155": "Mario and Bullet\nMario's bullet moves at\nX pixels per frame. He wishes to shoot a goomba standing\nY pixels away from him. The goomba does not move.\nFind the minimum time (in seconds) after which Mario should shoot the bullet, such that it hits the goomba after at least\nZ seconds from now.\nInput Format\nThe first line of input will contain an integer\nT, the number of test cases. Then the test cases follow.\nEach test case consists of a single line of input, containing three space-separated integers\nX,Y, and\nZ.\nOutput Format\nFor each test case, output in a single line the minimum time (in seconds) after which Mario should shoot the bullet, such that it hits the goomba after at least\nZ seconds from now.\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y,Z\u2264100\nX divides\nY\nSample 1:\nInput\nOutput\n3\n3 3 5\n2 4 1\n3 12 8\n4\n0\n4\nExplanation:\nTest case\n1: The speed of the bullet is\n3 pixels per frame and the goomba is\n3 pixels away from Mario. Thus, it would take\n1 second for the bullet to reach the goomba. Mario wants the bullet to reach goomba after at least\n5 seconds. So, he should fire the bullet after\n4 seconds.\nTest case\n2: The speed of the bullet is\n2 pixels per frame and the goomba is\n4 pixels away from Mario. Thus, it would take\n2 seconds for the bullet to reach the goomba. Mario wants the bullet to reach the goomba after at least\n1 second. So, he should fire the bullet after\n0 seconds. Note that, this is the minimum time after which he can shoot a bullet.\nTest case\n3: The speed of the bullet is\n3 pixels per frame and the goomba is\n12 pixels away from Mario. Thus, it would take\n4 seconds for the bullet to reach the goomba. Mario wants the bullet to reach goomba after at least\n8 seconds. So, he should fire the bullet after\n4 seconds.",
        "156": "Chess Ratings\nAlice has recently started playing Chess. Her current rating is\nX. She noticed that when she wins a game, her rating increases by\n8 points.\nCan you help Alice in finding out the minimum number of games she needs to win in order to make her rating greater than or equal to\nY?\nInput Format\nThe first line of input will contain an integer\nT \u2014 the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains two integers\nX and\nY, as described in the problem statement.\nOutput Format\nFor each test case, output the minimum number of games that Alice needs to win in order to make her rating greater than or equal to\nY.\nConstraints\n1\u2264T\u226410\n4\n1\u2264X\u2264Y\u226410\n4\nSample 1:\nInput\nOutput\n4\n10 10\n10 17\n10 18\n10 19\n0\n1\n1\n2\nExplanation:\nTest case\n1: Since Alice's current rating\nX is already equal to her desired rating\nY, she doesn't need to win any game.\nTest case\n2: Alice's current rating is\n10. After winning\n1 game, her rating will become\n10+8=18, which is greater than her desired rating of\n17. Thus, she has to win at least\n1 game.\nTest case\n3: Alice's current rating is\n10. After winning\n1 game, her rating will become\n10+8=18, which is equal to her desired rating of\n18. Thus, she has to win at least\n1 game.\nTest case\n4: Alice's current rating is\n10. After winning\n1 game, her rating will become\n18, which is less than her desired rating of\n19. She will need to win one more game in order to make her rating\n26, which is greater than\n19. Thus, she has to win at least\n2 games.",
        "157": "Complementary Strand in a DNA\nYou are given the sequence of Nucleotides of one strand of DNA through a string\nS of length\nN.\nS contains the character\nA,T,C, and\nG only.\nChef knows that:\nA is complementary to\nT.\nT is complementary to\nA.\nC is complementary to\nG.\nG is complementary to\nC.\nUsing the string\nS, determine the sequence of the complementary strand of the DNA.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nFirst line of each test case contains an integer\nN - denoting the length of string\nS.\nSecond line contains\nN characters denoting the string\nS.\nOutput Format\nFor each test case, output the string containing\nN characters - sequence of nucleotides of the complementary strand.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u2264100\nS contains A, T, C, and G only\nSample 1:\nInput\nOutput\n4\n4\nATCG\n4\nGTCC\n5\nAAAAA\n3\nTAC\nTAGC\nCAGG\nTTTTT\nATG\nExplanation:\nTest case\n1: Based on the rules, the complements of A, T, C, and G are T, A, G, and C respectively. Thus, the complementary string of the given string ATCG is TAGC.\nTest case\n2: Based on the rules, the complements of G, T, and C are C, A, and G respectively. Thus, the complementary string of the given string GTCC is CAGG.\nTest case\n3: Based on the rules, the complement of A is T. Thus, the complementary string of the given string AAAAA is TTTTT.\nTest case\n4: Based on the rules, the complements of T, A, and C are A, T, and G respectively. Thus, the complementary string of the given string TAC is ATG.",
        "158": "Chef and Water Bottles\nChef has\nN empty bottles where each bottle has a capacity of\nX litres.\nThere is a water tank in Chefland having\nK litres of water. Chef wants to fill the empty bottles using the water in the tank.\nAssuming that Chef does not spill any water while filling the bottles, find out the maximum number of bottles Chef can fill completely.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains of a single line of input, three integers\nN,X, and\nK.\nOutput Format\nFor each test case, output in a single line answer, the maximum number of bottles Chef can fill completely.\nConstraints\n1\u2264T\u2264100\n1\u2264N,X\u226410\n5\n0\u2264K\u226410\n5\nSample 1:\nInput\nOutput\n3\n5 2 8\n10 5 4\n3 1 4\n4\n0\n3\nExplanation:\nTest Case\n1: The amount of water in the tank is\n8 litres. The capacity of each bottle is\n2 litres. Hence,\n4 water bottles can be filled completely.\nTest Case\n2: The amount of water in the tank is\n4 litres. The capacity of each bottle is\n5 litres. Hence, no water bottle can be filled completely.\nTest Case\n3: The amount of water in the tank is\n4 litres. The capacity of each bottle is\n1 litre. Chef has\n3 bottles available. He can fill all these bottles completely using\n3 litres of water.",
        "159": "Candy Distribution\nChef has\nN candies. He has to distribute them to exactly\nM of his friends such that each friend gets equal number of candies and each friend gets even number of candies. Determine whether it is possible to do so.\nNOTE: Chef will not take any candies himself and will distribute all the candies.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains of a single line of input, two integers\nN and\nM, the number of candies and the number of friends.\nOutput Format\nFor each test case, the output will consist of a single line containing Yes if Chef can distribute the candies as per the conditions and No otherwise.\nYou may print each character of the string in uppercase or lowercase (for example, the strings yes, Yes, yEs, and YES will all be treated as identical).\nConstraints\n1\u2264T\u22641000\n1\u2264N,M\u22641000\nSample 1:\nInput\nOutput\n4\n9 3\n4 1\n4 2\n8 3\nNo\nYes\nYes\nNo\nExplanation:\nTest case\n1: Since Chef has\n9 candies and\n3 friends, each friend will get\n3\n9\n=3 candies. Since\n3 is not even, Chef doesn't satisfy the conditions.\nTest case\n2: Since Chef has\n4 candies and\n1 friend, each friend will get\n1\n4\n=4 candies. Since\n4 is even, Chef satisfies all the conditions.\nTest case\n3: Since Chef has\n4 candies and\n2 friends, each friend will get\n2\n4\n=2 candies. Since\n2 is even, Chef satisfies all the conditions.\nTest case\n4: Since Chef has\n8 candies and\n3 friends. Since Chef won't be able to distribute all the candies equally, Chef does not satisfy all the conditions.",
        "160": "Finding Square Roots\nIn olden days finding square roots seemed to be difficult but nowadays it can be easily done using in-built functions available across many languages .\nAssume that you happen to hear the above words and you want to give a try in finding the square root of any given integer using in-built functions. So here's your chance.\nInput\nThe first line of the input contains an integer T, the number of test cases. T lines follow. Each line contains an integer N whose square root needs to be computed.\nOutput\nFor each line of the input, output the square root of the input integer, rounded down to the nearest integer, in a new line.\nConstraints\n1<=T<=20\n1<=N<=10000\nSample 1:\nInput\nOutput\n3\n10\n5\n10000\n3\n2\n100",
        "161": "The Last Levels\nChef is playing a videogame, and is getting close to the end. He decides to finish the rest of the game in a single session.\nThere are\nX levels remaining in the game, and each level takes Chef\nY minutes to complete. To protect against eye strain, Chef also decides that every time he completes\n3 levels, he will take a\nZ minute break from playing. Note that there is no need to take this break if the game has been completed.\nHow much time (in minutes) will it take Chef to complete the game?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of input will contain three space-separated integers\nX,\nY, and\nZ.\nOutput Format\nFor each test case, output on a new line the answer \u2014 the length of Chef's gaming session.\nConstraints\n1\u2264T\u2264100\n1\u2264X\u2264100\n5\u2264Y\u2264100\n5\u2264Z\u226415\nSample 1:\nInput\nOutput\n4\n2 12 10\n3 12 10\n7 20 8\n24 45 15\n24\n36\n156\n1185\nExplanation:\nTest case 1: 2 12 10\nX = 2 (2 levels remain)\nY = 12 (each level takes 12 minutes)\nZ = 10 (Chef would take a 10-minute break every 3 levels, but since there are only 2 levels, no break is needed)\nSince there are only 2 levels, and no break is needed (because Chef takes a break only after every 3 levels).\nThe total time = X \u00d7 Y = 2 \u00d7 12 = 24 minutes.\nTest case 3: 7 20 8\nX = 7 (7 levels remain)\nY = 20 (each level takes 20 minutes)\nZ = 8 (Chef takes an 8-minute break after every 3 levels)\nNow, let's break this down:\nChef completes the first 3 levels: 3 x 20 = 60 minutes.\nAfter completing these 3 levels, Chef takes an 8-minute break.\nChef completes another 3 levels: 3 x 20 = 60 minutes.\nAfter completing these 3 levels, Chef takes another 8-minute break.\nNow, Chef completes the remaining 1 level: 1 x 20 = 20 minutes.\nSo, the total time = 60 + 8 + 60 + 8 + 20 = 156 minutes.",
        "162": "Blackjack\nChef is playing a variant of Blackjack, where\n3 numbers are drawn and each number lies between\n1 and\n10 (with both\n1 and\n10 inclusive). Chef wins the game when the sum of these\n3 numbers is exactly\n21.\nGiven the first two numbers\nA and\nB, that have been drawn by Chef, what should be\n3-rd number that should be drawn by the Chef in order to win the game?\nNote that it is possible that Chef cannot win the game, no matter what is the\n3-rd number. In such cases, report\n\u22121 as the answer.\nInput Format\nThe first line will contain an integer\nT - number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two integers\nA and\nB - the first and second number drawn by the Chef.\nOutput Format\nFor each testcase, output the\n3-rd number that should be drawn by the Chef in order to win the game. Output\n\u22121 if it is not possible for the Chef to win the game.\nConstraints\n1\u2264T\u2264100\n1\u2264A,B\u226410\nSample 1:\nInput\nOutput\n3\n1 10\n1 5\n4 9\n10\n-1\n8\nExplanation:\nTest case\n1: The first two numbers are\n1 and\n10. If the third number will be\n10, the resulting sum will be\n1+10+10=21. So Chef will win the game if the third number is\n10.\nTest case\n2: The first two numbers are\n1 and\n5. There is no number between\n1 and\n10, that can make the resulting sum\n21. Hence, the answer will be\n\u22121 in this test case.",
        "163": "Fill Candies\nChef received\nN candies on his birthday. He wants to put these candies in some bags. A bag has\nK pockets and each pocket can hold at most\nM candies. Find the minimum number of bags Chef needs so that he can put every candy into a bag.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line containing three space-separated integers\nN,K,M.\nOutput Format\nFor each test case, print the minimum number of bags Chef needs so that he can put all the candies in one of the bags.\nConstraints\n1\u2264T\u22641000\n1\u2264N,K,M\u2264100\nSample 1:\nInput\nOutput\n4\n6 2 3\n3 1 2\n8 4 1\n25 4 2\n1\n2\n2\n4\nExplanation:\nTest case\n1: Chef puts\n3 candies in the first pocket of a bag and the remaining\n3 candies in the second pocket. Thus Chef will need only one bag.\nTest case\n2: Chef puts\n2 candies in the only pocket of the first bag and the remaining\n1 candy in the only pocket of the second bag. Thus Chef will need two bags.\nTest case\n3: Chef puts\n4 candies in the first bag, one candy in each of the\n4 pockets and the same for the second bag. Thus Chef will need two bags.\nTest case\n4: Chef puts\n2 candies in each of the\n4 pockets of three bags, one candy in a pocket of the fourth bag.",
        "164": "X Jumps\nChef is currently standing at stair\n0 and he wants to reach stair numbered\nX.\nChef can climb either\nY steps or\n1 step in one move.\nFind the minimum number of moves required by him to reach exactly the stair numbered\nX.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line of input containing two space separated integers\nX and\nY denoting the number of stair Chef wants to reach and the number of stairs he can climb in one move.\nOutput Format\nFor each test case, output the minimum number of moves required by him to reach exactly the stair numbered\nX.\nConstraints\n1\u2264T\u2264500\n1\u2264X,Y\u2264100\nSample 1:\nInput\nOutput\n4\n4 2\n8 3\n3 4\n2 1\n2\n4\n3\n2\nExplanation:\nTest case\n1: Chef can make\n2 moves and climb\n2 steps in each move to reach stair numbered\n4.\nTest case\n2: Chef can make a minimum of\n4 moves. He can climb\n3 steps in\n2 of those moves and\n1 step each in remaining\n2 moves to reach stair numbered\n8.\nTest case\n3: Chef can make\n3 moves and climb\n1 step in each move to reach stair numbered\n3.\nTest case\n4: Chef can make\n2 moves and climb\n1 step in each move to reach stair numbered\n2.",
        "165": "Chessboard Distance\nThe Chessboard Distance for any two points\n(X\n1\n,Y\n1\n) and\n(X\n2\n,Y\n2\n) on a Cartesian plane is defined as\nmax(\u2223X\n1\n\u2212X\n2\n\u2223,\u2223Y\n1\n\u2212Y\n2\n\u2223).\nYou are given two points\n(X\n1\n,Y\n1\n) and\n(X\n2\n,Y\n2\n). Output their Chessboard Distance.\nNote that,\n\u2223P\u2223 denotes the absolute value of integer\nP. For example,\n\u2223\u22124\u2223=4 and\n\u22237\u2223=7.\nInput Format\nFirst line will contain\nT, the number of test cases. Then the test cases follow.\nEach test case consists of a single line of input containing\n4 space separated integers -\nX\n1\n,Y\n1\n,X\n2\n,Y\n2\n- as defined in the problem statement.\nOutput Format\nFor each test case, output in a single line the chessboard distance between\n(X\n1\n,Y\n1\n) and\n(X\n2\n,Y\n2\n)\nConstraints\n1\u2264T\u22641000\n1\u2264X\n1\n,Y\n1\n,X\n2\n,Y\n2\n\u226410\n5\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n3\n2 4 5 1\n5 5 5 3\n1 4 3 3\n3\n2\n2\nExplanation:\nIn the first case, the distance between\n(2,4) and\n(5,1) is\nmax(\u22232\u22125\u2223,\u22234\u22121\u2223)=max(\u2223\u22123\u2223,\u22233\u2223)=3.\nIn the second case, the distance between\n(5,5) and\n(5,3) is\nmax(\u22235\u22125\u2223,\u22235\u22123\u2223)=max(\u22230\u2223,\u22232\u2223)=2.\nIn the third case, the distance between\n(1,4) and\n(3,3) is\nmax(\u22231\u22123\u2223,\u22234\u22123\u2223)=max(\u2223\u22122\u2223,\u22231\u2223)=2.",
        "166": "Valentine is Coming\nValentine's Day is approaching and thus Chef wants to buy some chocolates for someone special.\nChef has a total of\nX rupees and one chocolate costs\nY rupees. What is the maximum number of chocolates Chef can buy?\nInput Format\nFirst line will contain\nT, the number of test cases. Then the test cases follow.\nEach test case contains a single line of input, two integers\nX,Y - the amount Chef has and the cost of one chocolate respectively.\nOutput Format\nFor each test case, output the maximum number of chocolates Chef can buy.\nConstraints\n1\u2264T\u22641000\n1\u2264X,Y\u2264100\nSample 1:\nInput\nOutput\n4\n5 10\n16 5\n35 7\n100 1\n0\n3\n5\n100\nExplanation:\nTest case-1: Chef has\n5 rupees but the cost of one chocolate is\n10 rupees. Therefore Chef can not buy any chocolates.\nTest case-2: Chef has\n16 rupees and the cost of one chocolate is\n5 rupees. Therefore Chef can buy at max\n3 chocolates since buying\n4 chocolates would cost\n20 rupees.\nTest case-3: Chef has\n35 rupees and the cost of one chocolate is\n7 rupees. Therefore Chef can buy at max\n5 chocolates for\n35 rupees.\nTest case-4: Chef has\n100 rupees and the cost of one chocolate is\n1 rupee. Therefore Chef can buy at max\n100 chocolates for\n100 rupees.",
        "167": "It is My Serve\nAlice and Bob are playing a game of table tennis where irrespective of the point scored, every player makes\n2 consecutive serves before the service changes. Alice makes the first serve of the match. Therefore the first\n2 serves will be made by Alice, then the next\n2 serves will be made by Bob and so on.\nLet's consider the following example match for more clarity:\nAlice makes the\n1\nst\nserve.\nLet us assume, Bob wins this point. (Score is\n0 for Alice and\n1 for Bob)\nAlice makes the\n2\nnd\nserve.\nLet us assume, Alice wins this point. (Score is\n1 for Alice and\n1 for Bob)\nBob makes the\n3\nrd\nserve.\nLet us assume, Alice wins this point. (Score is\n2 for Alice and\n1 for Bob)\nBob makes the\n4\nth\nserve.\nLet us assume, Alice wins this point. (Score is\n3 for Alice and\n1 for Bob)\nAlice makes the\n5\nth\nserve.\nAnd the game continues\n\u2026\nAfter the score reaches\nP and\nQ for Alice and Bob respectively, both the players forgot whose serve it is. Help them determine whose service it is.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains two integers\nP and\nQ \u2014 the score of Alice and Bob respectively.\nOutput Format\nFor each test case, determine which player's (Alice or Bob) serve it is.\nYou may print each character of Alice and Bob in uppercase or lowercase (for example, Bob, BOB, boB will be considered identical).\nConstraints\n1\u2264T\u2264200\n0\u2264P,Q\u226410\nSample 1:\nInput\nOutput\n4\n0 0\n0 2\n2 2\n4 7\nAlice\nBob\nAlice\nBob\nExplanation:\nTest Case 1: Since no points have been scored yet, this is the first serve of the match. Alice makes the\n1\nst\nserve of the match.\nTest Case 2: Two points have been scored yet. Thus, it is the third serve of the match. Bob makes the\n3\nrd\nserve of the match.\nTest Case 3: Four points have been scored yet. Thus, it is the fifth serve of the match. Alice makes the\n5\nth\nserve of the match.\nTest Case 4: Eleven points have been scored yet. Thus, it is the twelfth serve of the match. Bob makes the\n12\nth\nserve of the match.",
        "168": "Water Mixing\nChef is setting up a perfect bath for himself. He has\nX litres of hot water and\nY litres of cold water.\nThe initial temperature of water in his bathtub is\nA degrees. On mixing water, the temperature of the bathtub changes as following:\nThe temperature rises by\n1 degree on mixing\n1 litre of hot water.\nThe temperature drops by\n1 degree on mixing\n1 litre of cold water.\nDetermine whether he can set the temperature to\nB degrees for a perfect bath.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of four space-separated integers\nA,B,X, and\nY \u2014 the initial temperature of bathtub, the desired temperature of bathtub, the amount of hot water in litres, and the amount of cold water in litres respectively.\nOutput Format\nFor each test case, output on a new line, YES if Chef can get the desired temperature for his bath, and NO otherwise.\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\nConstraints\n1\u2264T\u22642000\n20\u2264A,B\u226440\n0\u2264X,Y\u226420\nSample 1:\nInput\nOutput\n4\n24 25 2 0\n37 37 2 9\n30 20 10 9\n30 31 0 20\nYES\nYES\nNO\nNO\nExplanation:\nTest case\n1: The initial temperature of water is\n24 and the desired temperature is\n25. Chef has\n2 litres of hot water. He can add\n1 litre hot water in the tub and change the temperature to\n24+1=25 degrees.\nTest case\n2: The initial temperature of water is\n37 and the desired temperature is also\n37. Thus, Chef does not need to add any more water in the bathtub.\nTest case\n3: The initial temperature of water is\n30 and the desired temperature is\n20. Chef needs to add\n10 litres of cold water to reach the desired temperature. Since he only has\n9 litres of cold water, he cannot reach the desired temperature.\nTest case\n4: The initial temperature of water is\n30 and the desired temperature is\n31. Chef needs to add\n1 litre of hot water to reach the desired temperature. Since he has no hot water, he cannot reach the desired temperature.",
        "169": "Weights\nChef is playing with weights. He has an object weighing\nW units. He also has three weights each of\nX,Y, and\nZ units respectively. Help him determine whether he can measure the exact weight of the object with one or more of these weights.\nIf it is possible to measure the weight of object with one or more of these weights, print YES, otherwise print NO.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of single line containing a four positive integers\nW,X,Y, and\nZ.\nOutput Format\nFor each test case, output on a new line YES if it is possible to measure the weight of object with one or more of these weights, otherwise print NO.\nYou may print each character of the string in either uppercase or lowercase (for example, the strings yes, YES, Yes, and yeS will all be treated as identical).\nConstraints\n1\u2264T\u226410\n4\n1\u2264W,X,Y,Z\u226410\n5\nSample 1:\nInput\nOutput\n4\n5 2 1 6\n7 9 7 2\n20 8 10 12\n20 10 11 12\nNO\nYES\nYES\nNO\nExplanation:\nTest Case\n1: It is not possible to measure\n5 units using any combination of given weights.\nTest Case\n2: Chef can use the second weight of\n7 units to measure the object exactly.\nTest Case\n3: Chef can use combination of first and third weights to measure\n8+12=20 units.\nTest Case\n4: Chef cannot measure\n20 units of weight using any combination of given weights.",
        "170": "Chef and his Apps\nChef's phone has a total storage of\nS MB. Also, Chef has\n2 apps already installed on his phone which occupy\nX MB and\nY MB respectively.\nHe wants to install another app on his phone whose memory requirement is\nZ MB. For this, he might have to delete the apps already installed on his phone. Determine the minimum number of apps he has to delete from his phone so that he has enough memory to install the third app.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains four integers\nS,X,Y and\nZ \u2014 the total memory of Chef's phone, the memory occupied by the two already installed apps and the memory required by the third app.\nOutput Format\nFor each test case, output the minimum number of apps Chef has to delete from his phone so that he can install the third app.\nConstraints\n1\u2264T\u22641000\n1\u2264S\u2264500\n1\u2264X\u2264Y\u2264S\nX+Y\u2264S\nZ\u2264S\nSample 1:\nInput\nOutput\n4\n10 1 2 3\n9 4 5 1\n15 5 10 15\n100 20 30 75\n0\n1\n2\n1\nExplanation:\nTest Case 1: The unused memory in the phone is\n7 MB. Therefore Chef can install the\n3 MB app without deleting any app.\nTest Case 2: There is no unused memory in the phone. Chef has to first delete one of the apps from the phone and then only he can install the\n1 MB app.\nTest Case 3: There is no unused memory in the phone. Chef has to first delete both the apps from the phone and then only he can install the\n15 MB app.\nTest Case 4: The unused memory in the phone is\n50 MB. Chef has to first delete the\n30 MB app from the phone and then only he can install the\n75 MB app.",
        "171": "Chef Eren\nChef is a very big fan of Eren Yeager.\nIn the last season of Attack on Titan, there were\nN episodes numbered from\n1 to\nN.\nEach even indexed episode was\nA minutes long and each odd indexed episode was\nB minutes long.\nCalculate the total duration (in minutes) of the last season.\nInput Format\nThe first line of input contains a single integer\nT, the number of test cases.\nThe first and only line of each test case contains three integers\nN,\nA, and\nB, the number of episodes and the durations of each even-indexed and odd-indexed episodes respectively in minutes.\nOutput Format\nFor each test case, print a single integer on a new line, the total duration of the last season in minutes.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u226460\n1\u2264A,B\u226460\nSample 1:\nInput\nOutput\n3\n1 2 2\n2 3 4\n4 20 30\n2\n7\n100\nExplanation:\nTest case\n1: There is only one episode, so there is\n1 odd-indexed episode, and\n0 even-indexed episode. The total duration of the season\n=0\u22c5A+1\u22c5B=0\u22c52+1\u22c52=2.\nTest case\n2: There are two episodes with indices\n{1,2}. Thus, there is\n1 odd-indexed episode\n({1}), and\n1 even-indexed episode\n({2}). The total duration of the season\n=1\u22c5A+1\u22c5B=1\u22c53+1\u22c54=7.\nTest case\n3: There are four episodes with indices\n{1,2,3,4}. Thus, there are\n2 odd-indexed episodes\n({1,3}), and\n2 even-indexed episodes\n({2,4}). The total duration of the season\n=2\u22c5A+2\u22c5B=2\u22c520+2\u22c530=100.",
        "172": "Minimum number of coins\nChef has infinite coins in denominations of rupees\n5 and rupees\n10.\nFind the minimum number of coins Chef needs, to pay exactly\nX rupees. If it is impossible to pay\nX rupees in denominations of rupees\n5 and\n10 only, print\n\u22121.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains of a single integer\nX.\nOutput Format\nFor each test case, print a single integer - the minimum number of coins Chef needs, to pay exactly\nX rupees. If it is impossible to pay\nX rupees in denominations of rupees\n5 and\n10 only, print\n\u22121.\nConstraints\n1\u2264T\u22641000\n1\u2264X\u22641000\nSubtasks\nSubtask 1 (100 points): Original constraints.\nSample 1:\nInput\nOutput\n3\n50\n15\n8\n5\n2\n-1\nExplanation:\nTest Case\n1: Chef would require at least\n5 coins to pay\n50 rupees. All these coins would be of rupees\n10.\nTest Case\n2: Chef would require at least\n2 coins to pay\n15 rupees. Out of these,\n1 coin would be of rupees\n10 and\n1 coin would be of rupees\n5.\nTest Case\n3: Chef cannot pay exactly\n8 rupees in denominations of rupees\n5 and\n10 only.",
        "173": "Airlines\nAn airline operates\nX aircraft every day. Each aircraft can carry up to\n100 passengers.\nOne day,\nN passengers would like to travel to the same destination. What is the minimum number of new planes that the airline must buy to carry all\nN passengers?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line containing two space-separated integers\nX and\nN \u2014 the number of aircraft the airline owns and the number of passengers travelling, respectively.\nOutput Format\nFor each test case, output the minimum number of planes the airline needs to purchase.\nConstraints\n1\u2264T\u22641000\n1\u2264X\u226410\n6\n1\u2264N\u226410\n6\nSample 1:\nInput\nOutput\n3\n4 600\n3 523\n8 245\n2\n3\n0\nExplanation:\nTest case\n1: The airline needs at least\n6 planes to carry\n600 passengers. They already have\n4, so they must purchase\n2 more.\nTest case\n2: The airline needs at least\n6 planes to carry\n523 passengers. They already have\n3, so they must purchase\n3 more.\nTest case\n3: The airline needs at least\n3 planes to carry\n245 passengers. They already have\n8, so there's no need to purchase any more.",
        "174": "Self Defence Training\nAfter the phenomenal success of the 36th Chamber of Shaolin, San Te has decided to start 37th Chamber of Shaolin. The aim this time is to equip women with shaolin self-defence techniques.\nThe only condition for a woman to be eligible for the special training is that she must be between\n10 and\n60 years of age, inclusive of both\n10 and\n60.\nGiven the ages of\nN women in his village, please help San Te find out how many of them are eligible for the special training.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN, the number of women.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,...,A\nN\n, the ages of the women.\nOutput Format\nFor each test case, output in a single line the number of women eligible for self-defence training.\nConstraints\n1\u2264T\u226420\n1\u2264N\u2264100\n1\u2264A\ni\n\u2264100\nSample 1:\nInput\nOutput\n3\n3\n15 23 65\n3\n15 62 16\n2\n35 9\n2\n2\n1\nExplanation:\nTest Case\n1: Out of the women, only the\n1\nst\nand\n2\nnd\nwomen are eligible for the training because their ages lie in the interval\n[10,60]. Hence the answer is 2.\nTest Case\n2: Only the\n1\nst\nand\n3\nrd\nwomen are eligible for the training because their ages lie in the interval\n[10,60]. Hence the answer is again 2.\nTest Case\n3: Only the\n1\nst\nwoman with age\n35 is eligible for the training. Hence the answer is\n1.",
        "175": "Cup Finals\nIt is the World Cup Finals. Chef only finds a match interesting if the skill difference of the competing teams is less than or equal to\nD.\nGiven that the skills of the teams competing in the final are\nX and\nY respectively, determine whether Chef will find the game interesting or not.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of testcases. The description of\nT testcases follows.\nEach testcase consists of a single line of input containing three space-separated integers\nX,\nY, and\nD \u2014 the skill levels of the teams and the maximum skill difference.\nOutput Format\nFor each testcase, output \"YES\" if Chef will find the game interesting, else output \"NO\" (without the quotes). The checker is case-insensitive, so \"YeS\" and \"nO\" etc. are also acceptable.\nConstraints\n1\u2264T\u22642000\n1\u2264X,Y\u2264100\n0\u2264D\u2264100\nSample 1:\nInput\nOutput\n3\n5 3 4\n5 3 1\n5 5 0\nYES\nNO\nYES\nExplanation:\nTest case\n1: The skill difference between the teams is\n2, which is less than the maximum allowed difference of\n4.\nTest case\n2: The skill difference between the teams is\n2, which is more than the maximum allowed difference of\n1.",
        "176": "Too many Floors\nChef and Chefina are residing in a hotel.\nThere are\n10 floors in the hotel and each floor consists of\n10 rooms.\nFloor\n1 consists of room numbers\n1 to\n10.\nFloor\n2 consists of room numbers\n11 to\n20.\n\u2026\nFloor\ni consists of room numbers\n10\u22c5(i\u22121)+1 to\n10\u22c5i.\nYou know that Chef's room number is\nX while Chefina's Room number is\nY.\nIf Chef starts from his room, find the number of floors he needs to travel to reach Chefina's room.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains of a single line of input, two integers\nX,Y, the room numbers of Chef and Chefina respectively.\nOutput Format\nFor each test case, output the number of floors Chef needs to travel to reach Chefina's room.\nConstraints\n1\u2264T\u22641000\n1\u2264X,Y\u2264100\nX\n\ue020\n=Y\nSample 1:\nInput\nOutput\n4\n1 100\n42 50\n53 30\n81 80\n9\n0\n3\n1\nExplanation:\nTest Case\n1: Since Room\n1 is on\n1\nst\nfloor and Room\n100 is on\n10\nth\nfloor, Chef needs to climb\n9 floors to reach Chefina's Room.\nTest Case\n2: Since Room\n42 is on\n5\nth\nfloor and Room\n50 is also on\n5\nth\nfloor, Chef does not need to climb any floor.\nTest Case\n3: Since Room\n53 is on\n6\nth\nfloor and Room\n30 is on\n3\nrd\nfloor, Chef needs to go down\n3 floors to reach Chefina's Room.\nTest Case\n4: Since Room\n81 is on\n9\nth\nfloor and Room\n80 is on\n8\nth\nfloor, Chef needs to go down\n1 floors to reach Chefina's Room.",
        "177": "Speed Limit Test\nAlice is driving from her home to her office which is\nA kilometers away and will take her\nX hours to reach.\nBob is driving from his home to his office which is\nB kilometers away and will take him\nY hours to reach.\nDetermine who is driving faster, else, if they are both driving at the same speed print EQUAL.\nInput Format\nThe first line will contain\nT, the number of test cases. Then the test cases follow.\nEach test case consists of a single line of input, containing four integers\nA,X,B, and\nY, the distances and and the times taken by Alice and Bob respectively.\nOutput Format\nFor each test case, if Alice is faster, print ALICE. Else if Bob is faster, print BOB. If both are equal, print EQUAL.\nYou may print each character of the string in uppercase or lowercase (for example, the strings equal, equAL, EquAl, and EQUAL will all be treated as identical).\nConstraints\n1\u2264T\u22641000\n1\u2264A,X,B,Y\u22641000\nSample 1:\nInput\nOutput\n3\n20 6 20 5\n10 3 20 6\n9 1 1 1\nBob\nEqual\nAlice\nExplanation:\nTest case\n1: Since Bob travels the distance between his office and house in\n5 hours, whereas Alice travels the same distance of\n20 kms in\n6 hours, BOB is faster.\nTest case\n2: Since Alice travels the distance of\n10 km between her office and house in\n3 hours and Bob travels a distance of\n20 km in\n6 hours, they have equal speeds.\nTest case\n3: Since Alice travels the distance of\n9 km between her office and house in\n1 hour and Bob travels only a distance of\n1 km in the same time, ALICE is faster.",
        "178": "Decrement OR Increment\nWrite a program to obtain a number\nN and increment its value by 1 if the number is divisible by 4\notherwise decrement its value by 1.\nInput Format\nFirst line will contain a number\nN.\nOutput Format\nOutput a single line, the new value of the number.\nConstraints\n0\u2264N\u22641000\nSample 1:\nInput\nOutput\n5\n4\nExplanation:\nSince 5 is not divisible by 4 hence, its value is decreased by 1.",
        "179": "A or B\nThere are two problems in a contest.\nProblem A is worth\n500 points at the start of the contest.\nProblem B is worth\n1000 points at the start of the contest.\nOnce the contest starts, after each minute:\nMaximum points of Problem A reduce by\n2 points .\nMaximum points of Problem B reduce by\n4 points.\nIt is known that Chef requires\nX minutes to solve Problem A correctly and\nY minutes to solve Problem B correctly.\nFind the maximum number of points Chef can score if he optimally decides the order of attempting both the problems.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains of a single line of input, two integers\nX and\nY - the time required to solve problems\nA and\nB in minutes respectively.\nOutput Format\nFor each test case, output in a single line, the maximum number of points Chef can score if he optimally decides the order of attempting both the problems.\nConstraints\n1\u2264T\u22641000\n1\u2264X,Y\u2264100\nSample 1:\nInput\nOutput\n4\n10 20\n8 40\n15 15\n20 10\n1360\n1292\n1380\n1400\nExplanation:\nTest Case\n1: If Chef attempts in the order\nA\u2192B then he submits Problem A after\n10 minutes and Problem B after\n30 minutes.\nThus, he gets\n500\u221210\u22c52=480 points for problem A and\n1000\u221230\u22c54=880 points for problem B. Thus, total\n480+880=1360 points for both the problems.\nIf Chef attempts in the order\nB\u2192A then he submits Problem B after\n20 minutes and Problem A after\n30 minutes.\nThus, he gets\n1000\u221220\u22c54=920 points for Problem B and\n500\u221230\u22c52=440 points for Problem A. Thus total\n920+440=1360 points for both the problems.\nSo, in both cases Chef gets\n1360 points in total.\nTest Case\n2: If Chef attempts in the order\nA\u2192B then he submits Problem A after\n8 minutes and Problem B after\n48 minutes.\nThus, he gets\n500\u22128\u22c52=484 points for problem A and\n1000\u221248\u22c54=808 points for problem B. Thus, total\n484+808=1292 points for both the problems.\nIf Chef attempts in the order\nB\u2192A then he submits Problem B after\n40 minutes and Problem A after\n48 minutes.\nThus, he gets\n1000\u221240\u22c54=840 points for Problem B and\n500\u221248\u22c52=404 points for Problem A. Thus total\n840+404=1244 points for both the problems.\nSo, Chef will attempt in the order\nA\u2192B and thus obtain\n1292 points.\nTest Case\n3: If Chef attempts in the order\nA\u2192B then he submits Problem A after\n15 minutes and Problem B after\n30 minutes.\nThus, he gets\n500\u221215\u22c52=470 points for problem A and\n1000\u221230\u22c54=880 points for problem B. Thus, total\n470+880=1350 points for both the problems.\nIf Chef attempts in the order\nB\u2192A then he submits Problem B after\n15 minutes and Problem A after\n30 minutes.\nThus, he gets\n1000\u221215\u22c54=940 points for Problem B and\n500\u221230\u22c52=440 points for Problem A. Thus total\n940+440=1380 points for both the problems.\nSo, Chef will attempt in the order\nB\u2192A and thus obtain\n1380 points.\nTest Case\n4: If Chef attempts in the order\nA\u2192B then he submits Problem A after\n20 minutes and Problem B after\n30 minutes.\nThus, he gets\n500\u221220\u22c52=460 points for problem A and\n1000\u221230\u22c54=880 points for problem B. Thus, total\n460+880=1340 points for both the problems.\nIf Chef attempts in the order\nB\u2192A then he submits Problem B after\n10 minutes and Problem A after\n30 minutes.\nThus, he gets\n1000\u221210\u22c54=960 points for Problem B and\n500\u221230\u22c52=440 points for Problem A. Thus total\n960+440=1400 points for both the problems.\nSo, Chef will attempt in the order\nB\u2192A and thus obtain\n1400 points.",
        "180": "Second Largest\nThree numbers A, B and C are the inputs. Write a program to find second largest among them.\nInput Format\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains three integers A, B and C.\nOutput Format\nFor each test case, display the second largest among A, B and C, in a new line.\nConstraints\n1 \u2264 T \u2264 1000\n1 \u2264 A,B,C \u2264 1000000\nSample 1:\nInput\nOutput\n3 \n120 11 400\n10213 312 10\n10 3 450\n120\n312\n10",
        "181": "Pass or Fail\nChef is struggling to pass a certain college course.\nThe test has a total of\nN questions, each question carries\n3 marks for a correct answer and\n\u22121 for an incorrect answer. Chef is a risk-averse person so he decided to attempt all the questions. It is known that Chef got\nX questions correct and the rest of them incorrect. For Chef to pass the course he must score at least\nP marks.\nWill Chef be able to pass the exam or not?\nInput Format\nFirst line will contain\nT, number of testcases. Then the testcases follow.\nEach testcase contains of a single line of input, three integers\nN,X,P.\nOutput Format\nFor each test case output \"PASS\" if Chef passes the exam and \"FAIL\" if Chef fails the exam.\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"pASs\", \"pass\", \"Pass\" and \"PASS\" will all be treated as identical).\nConstraints\n1\u2264T\u22641000\n1\u2264N\u2264100\n0\u2264X\u2264N\n0\u2264P\u22643\u22c5N\nSample 1:\nInput\nOutput\n3\n5 2 3\n5 2 4\n4 0 0\nPASS\nFAIL\nFAIL\nExplanation:\nTest case\n1: Chef gets\n2 questions correct giving him\n6 marks and since he got\n3 questions incorrect so he faces a penalty of\n\u22123. So Chef's final score is\n3 and the passing marks are also\n3, so he passes the exam :)\nTest case\n2: Chef's total marks are\n3 and since the passing marks are\n4, Chef fails the test :(\nTest case\n3: Chef got all the problems wrong and thus his total score is\n\u22124. Since the passing marks are\n0, Chef fails the exam :(",
        "182": "Cyclic Quadrilateral\nRead problem statements in Mandarin Chinese, Russian, and Vietnamese as well.\nYou are given the sizes of angles of a simple quadrilateral (in degrees)\nA,\nB,\nC and\nD, in some order along its perimeter. Determine whether the quadrilateral is cyclic.\nNote: A quadrilateral is cyclic if and only if the sum of opposite angles is\n180\n\u2218\n.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains four space-separated integers\nA,\nB,\nC and\nD.\nOutput\nPrint a single line containing the string \"YES\" if the given quadrilateral is cyclic or \"NO\" if it is not (without quotes).\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\nConstraints\n1\u2264T\u226410\n4\n1\u2264A,B,C,D\u2264357\nA+B+C+D=360\nSample 1:\nInput\nOutput\n3\n10 20 30 300\n10 20 170 160\n179 1 179 1\nNO\nYES\nNO\nExplanation:\nExample case 1: The sum of two opposite angles\nA+C=10\n\u2218\n+30\n\u2218\n\ue020\n=180\n\u2218\n.\nExample case 2: The sum of two opposite angles\nA+C=10\n\u2218\n+170\n\u2218\n=180\n\u2218\nand\nB+D=20\n\u2218\n+160\n\u2218\n=180\n\u2218\n.\nExample case 3: The sum of two opposite angles\nB+D=1\n\u2218\n+1\n\u2218\n\ue020\n=180\n\u2218\n.",
        "183": "Too many items\nChef bought\nN items from a shop. Although it is hard to carry all these items in hand, so Chef has to buy some polybags to store these items.\n1 polybag can contain at most\n10 items. What is the minimum number of polybags needed by Chef?\nInput Format\nThe first line will contain an integer\nT - number of test cases. Then the test cases follow.\nThe first and only line of each test case contains an integer\nN - the number of items bought by Chef.\nOutput Format\nFor each test case, output the minimum number of polybags required.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u22641000\nSample 1:\nInput\nOutput\n3\n20\n24\n99\n2\n3\n10\nExplanation:\nTest case-1: Chef will require\n2 polybags. Chef can fit\n10 items in the first and second polybag each.\nTest case-2: Chef will require\n3 polybags. Chef can fit\n10 items in the first and second polybag each and fit the remaining\n4 items in the third polybag.",
        "184": "Chef Fantasy 11\nAll of Chef's friends are playing fantasy cricket based upon the ODI World Cup, and Chef would like to join them.\nFor a certain cricket match, Chef has decided upon his team of\n11 players. However, he hasn't yet decided who should be the captain and who should be the vice-captain.\nHe's narrowed his decision down to\nN players out of the\n11, from which he'll choose one to be the captain and one to be the vice captain.\nHow many different choices does he have?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and the only line of each testcase contains a single integer\nN, the number of players Chef is considering.\nOutput Format\nFor each test case, output on a new line the number of possible choices of captain and vice-captain.\nConstraints\n1\u2264T\u226410\n2\u2264N\u226411\nSample 1:\nInput\nOutput\n2\n2\n3\n2\n6\nExplanation:\nTest case\n1: With\nN=2, there are only two possibilities: one of the players must be selected as the captain, and the other will become the vice-captain.\nTest case\n2: It can be shown that there are\n6 possibilities in total for captain\/vice-captain choices.",
        "185": "Building Race\nTwo friends Chef and Chefina are currently on floors\nA and\nB respectively. They hear an announcement that prizes are being distributed on the ground floor and so decide to reach the ground floor as soon as possible.\nChef can climb down\nX floors per minute while Chefina can climb down\nY floors per minute. Determine who will reach the ground floor first (ie. floor number 0). In case both reach the ground floor together, print Both.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first line of each test case contains four space-separated integers\nA,\nB,\nX, and\nY \u2014 the current floor of Chef, the current floor of Chefina, speed of Chef and speed of Chefina in floors per minute respectively.\nOutput Format\nFor each test case, output on a new line:\nChef if Chef reaches the ground floor first.\nChefina if she reaches the ground floor first.\nBoth if both reach the ground floor at the same time.\nYou may print each character of the string in uppercase or lowercase. For example, the strings CHEF, chef, Chef, and chEF are all considered the same.\nConstraints\n1\u2264T\u22642500\n1\u2264A,B\u2264100\n1\u2264X,Y\u226410\nSample 1:\nInput\nOutput\n4\n2 2 2 2\n4 2 1 5\n3 2 4 1\n3 2 2 1\nBoth\nChefina\nChef\nChef\nExplanation:\nTest case\n1: Chef is on the second floor and has a speed of\n2 floors per minute. Thus, Chef takes\n1 minute to reach the ground floor. Chefina is on the second floor and and has a speed of\n2 floors per minute. Thus, Chefina takes\n1 minute to reach the ground floor. Both Chef and Chefina reach the ground floor at the same time.\nTest case\n2: Chef is on the fourth floor and has a speed of\n1 floor per minute. Thus, Chef takes\n4 minute to reach the ground floor. Chefina is on the second floor and and has a speed of\n5 floors per minute. Thus, Chefina takes\n0.4 minutes to reach the ground floor. Chefina reaches the ground floor first.\nTest case\n3: Chef is on the third floor and has a speed of\n4 floors per minute. Thus, Chef takes\n0.75 minutes to reach the ground floor. Chefina is on the second floor and and has a speed of\n1 floor per minute. Thus, Chefina takes\n2 minutes to reach the ground floor. Chef reaches the ground floor first.\nTest case\n4: Chef is on the third floor and has a speed of\n2 floors per minute. Thus, Chef takes\n1.5 minutes to reach the ground floor. Chefina is on the second floor and and has a speed of\n1 floor per minute. Thus, Chefina takes\n2 minutes to reach the ground floor. Chef reaches the ground floor first.",
        "186": "Chef and Races\nThe National Championships are starting soon. There are\n4 race categories, numbered from\n1 to\n4, that Chef is interested in. Chef is participating in exactly\n2 of these categories.\nChef has an arch-rival who is, unfortunately, the only person participating who is better than Chef, i.e, Chef can't defeat the arch-rival in any of the four race categories but can defeat anyone else. Chef's arch-rival is also participating in exactly\n2 of the four categories.\nChef hopes to not fall into the same categories as that of the arch-rival.\nGiven\nX,Y,A,B where\nX,Y are the races that Chef participates in, and\nA,B are the races that Chef's arch-rival participates in, find the maximum number of gold medals (first place) that Chef can win.\nInput Format\nThe first line of input contains an integer\nT, denoting the number of testcases. The description of\nT testcases follows.\nEach testcase consists of a single line containing four space-separated integers \u2014 the values of\nX,Y,A, and\nB respectively.\nOutput Format\nFor each testcase, print a single line containing one integer \u2014 the maximum number of gold medals that Chef can win.\nConstraints\n1\u2264T\u2264144\n1\u2264X,Y,A,B\u22644\nX\n\ue020\n=Y\nA\n\ue020\n=B\nSubtasks\nSubtask #1 (100 points): Original constraints\nSample 1:\nInput\nOutput\n3\n4 3 1 2\n4 2 1 2\n2 1 1 2\n2\n1\n0\nExplanation:\nTest case\n1: Chef participates in the races\n4,3, whereas Chef's rival participates in\n1,2. As Chef's only rival does not participate in any of the races that Chef takes part in, Chef can win the gold medal in both of the races, thus the answer is\n2.\nTest case\n2: Chef participates in the races\n4,2, whereas Chef's rival participates in\n1,2. Chef cannot win race\n2 as Chef will be beaten by the arch-rival, however Chef can win the gold medal for race\n4. Thus the answer is\n1.\nTest case\n3: Chef participates in the races\n2,1, whereas Chef's rival participates in\n1,2. Chef will be beaten by the arch-rival in both races, thus the answer is\n0.",
        "187": "Endless Appetizers\nLife is a like a box of of mozzarella sticks. You never know what you're gonna get, but you can predict with 100 percent accuracy that it will be a mozzarella stick.\nChef's colleague issued a challenge to Chef: \"If you eat more than\nX mozzarella sticks, I'll give you\n30 rupees for each extra one you eat\".\nFor example, if\nX=5 and Chef eats\n8 sticks, he would receive\n90 rupees because he ate\n3 extra sticks.\nYou know that the restaurant serves\nY mozzarella sticks per plate.\nYou also know that Chef received\nR rupees from his colleague as a result of the challenge.\nWhat's the maximum number of plates of mozzarella sticks that Chef could have ordered?\nNote:\nChef won't order a new plate till he finishes eating all the sticks from the previous one.\nHowever, it's possible that Chef didn't finish all the sticks from the final plate he ordered.\nSee the explained examples below for more clarification.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of one line of input, containing three space-separated integers\nX,Y, and\nR \u2014 the lower limit on the number of sticks, the number of sticks on a single plate, and the money received by Chef.\nOutput Format\nFor each test case, output on a new line the answer: the maximum number of plates Chef could have ordered.\nConstraints\n1\u2264T\u226410\n4\n1\u2264X\u2264100\n1\u2264Y\u226410\n0\u2264R\u22643\u22c510\n4\nIt is guaranteed that\nR is a multiple of\n30.\nSample 1:\nInput\nOutput\n4\n7 5 30\n16 5 0\n15 9 120\n23 1 2130\n2\n4\n3\n94\nExplanation:\nTest case\n1: Chef received\n30 rupees; meaning he ate\n1 extra stick.\nSince\nX=7, this means he must've eaten exactly\n8 sticks.\nAt\n5 sticks per plate, Chef would need\n2 plates to eat\n8 sticks (and two sticks from the second plate will remain uneaten).\nTest case\n2: Chef received\n0 rupees. Since\nX=16, this means he ate\n\u226416 sticks.\nThe maximum he could've eaten is exactly\n16; and this would require\n4 plates since each plate has\n5 sticks.\nTest case\n3: Chef received\n120 rupees, meaning he ate\n4 extra sticks.\nThis makes for a total of\n15+4=19 sticks, and at\n9 sticks per plate he would need\n3 plates.",
        "188": "Presents for Cheffina\nChef has fallen in love with Cheffina, and wants to buy\nN gifts for her. On reaching the gift shop, Chef got to know the following two things:\nThe cost of each gift is\n1 coin.\nOn the purchase of every\n4\nth\ngift, Chef gets the\n5\nth\ngift free of cost.\nWhat is the minimum number of coins that Chef will require in order to come out of the shop carrying\nN gifts?\nInput Format\nThe first line of input will contain an integer\nT \u2014 the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains an integer\nN, the number of gifts in the shop.\nOutput Format\nFor each test case, output on a new line the minimum number of coins that Chef will require to obtain all\nN gifts.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u226410\n9\nSample 1:\nInput\nOutput\n2\n5\n4\n4\n4\nExplanation:\nTest case\n1: After purchasing\n4 gifts, Chef will get the\n5\nth\ngift free of cost. Hence Chef only requires\n4 coins in order to get\n5 gifts.\nTest case\n2: Chef will require\n4 coins in order to get\n4 gifts.",
        "189": "Small Factorial\nWrite a program to find the factorial value of any number entered by the user.\nInput Format\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains an integer N.\nOutput Format\nFor each test case, display the factorial of the given number N in a new line.\nConstraints\n1 \u2264 T \u2264 1000\n0 \u2264 N \u2264 20\nSample 1:\nInput\nOutput\n3 \n3 \n4\n5\n6\n24\n120",
        "190": "Dracula Eats\nEat, drink, and be scary\nThere are\nN spooky days left until Halloween.\nDracula dines at a mysterious restaurant that changes its spooky menu daily. He particularly enjoys what they serve on Tuesday.\nToday is Monday, so he wishes to calculate how many times he can indulge in his favourite menu in the next\nN days (including today) before Halloween.\nNote that Dracula follows the standard\n7-day calendar, with Tuesday immediately following Monday.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe only line of each test case contains a single integer\nN, denoting the number of spooky days.\nOutput Format\nFor each test case, output on a new line the number of times Dracula would have had his favorite meal after\nN days.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u22641000\nSample 1:\nInput\nOutput\n4\n1\n10\n15\n16\n0\n2\n2\n3\nExplanation:\nTest case\n1: The first day is Monday, and Dracula has only one day. So, no Tuesdays are encountered, and the answer is\n0.\nTest case\n2: The first day is Monday, so the second and ninth days are Tuesdays.\nDracula can eat his favorite meal twice.\nTest case\n3: Once again, the second and ninth days are Tuesday, so in\n15 days, Dracula still gets to eat his favorite meal only twice.\nTest case\n4: After the ninth day, the\n16-th day is also a Tuesday. So, this time Dracula gets to eat his favorite meal three times - on days\n2,9,16.",
        "191": "Possible Victory\nChef is playing in a T20 cricket match. In a match, Team A plays for 20 overs. In a single over, the team gets to play 6 times, and in each of these 6 tries, they can score a maximum of 6 runs. After Team A's 20 overs are finished, Team B similarly plays for 20 overs and tries to get a higher total score than the first team. The team with the higher total score at the end wins the match.\nChef is in Team B. Team A has already played their 20 overs, and have gotten a score of\nR. Chef's Team B has started playing, and have already scored\nC runs in the first\nO overs. In the remaining\n20\u2212O overs, find whether it is possible for Chef's Team B to get a score high enough to win the game. That is, can their final score be strictly larger than\nR?\nInput Format\nThere is a single line of input, with three integers,\nR,O,C.\nOutput Format\nOutput in a single line, the answer, which should be \"YES\" if it's possible for Chef's Team B to win the match and \"NO\" if not.\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\nConstraints\n0\u2264C\u2264R\u2264720\n1\u2264O\u226419\n0\u2264C\u226436\u2217O\nSample 1:\nInput\nOutput\n719 18 648\nYES\nExplanation:\nIn the remaining\n20\u2212O=2 overs, Team B gets to play\n2\u22176=12 times, and in each try, they can get a maximum of 6 score. Which means that the maximum score that they can acheieve in these 2 overs is\n12\u22176=72. Thus, the maximum total score that Team B can achieve is\nC+72=720.\n720 is strictly more than Team A's score of\n719, and hence Chef's Team B can win this match.\nSample 2:\nInput\nOutput\n720 18 648\nNO\nExplanation:\nSimilar to the previous explanation, the maximum total score that Team B can achieve is\n720, which isn't strictly greater than Team A's\n720.Hence Chef's Team B can't win this match.",
        "192": "Chef And Operators\nChef has just started Programming, he is in first year of Engineering. Chef is reading about Relational Operators.\nRelational Operators are operators which check relationship between two values. Given two numerical values A and B you need to help chef in finding the relationship between them that is,\nFirst one is greater than second or, First one is less than second or, First and second one are equal.\n  Input\nFirst line contains an integer T, which denotes the number of testcases. Each of the T lines contain two integers A and B.\nOutput\nFor each line of input produce one line of output. This line contains any one of the relational operators\n'<' , '>' , '='.\nConstraints\n1 \u2264 T \u2264 10000 1 \u2264 A, B \u2264 1000000001\nSample 1:\nInput\nOutput\n3\n10 20\n20 10\n10 10\n<\n>\n=\nExplanation:\nIn this example 1 as 10 is lesser than 20",
        "193": "Mutated Minions\nGru has not been in the limelight for a long time and is, therefore, planning something particularly nefarious. Frustrated by his minions' incapability which has kept him away from the limelight, he has built a transmogrifier \u2014 a machine which mutates minions.\nEach minion has an intrinsic characteristic value (similar to our DNA), which is an integer. The transmogrifier adds an integer K to each of the minions' characteristic value.\nGru knows that if the new characteristic value of a minion is divisible by 7, then it will have Wolverine-like mutations.\nGiven the initial characteristic integers of N minions, all of which are then transmogrified, find out how many of them become Wolverine-like.\nInput Format\nThe first line contains one integer, T, which is the number of test cases.\nEach test case contains of\n2 lines of input.\nThe first line contains two integers N and K, as described in the statement\nThe next line contains N integers, which denote the initial characteristic values for the minions\nOutput Format\nFor each testcase, output one integer in a new line, which is the number of Wolverine-like minions after the transmogrification.\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 100\n1 \u2264 K \u2264 100\nAll initial characteristic values lie between 1 and 105, both inclusive.\nSample 1:\nInput\nOutput\n1\n5 10\n2 4 1 35 1\n1\nExplanation:\nAfter transmogrification, the characteristic values become {12,14,11,45,11}, out of which only 14 is divisible by 7. So only the second minion becomes Wolverine-like.",
        "194": "Reach fast\nChef is standing at coordinate\nA while Chefina is standing at coordinate\nB.\nIn one step, Chef can increase or decrease his coordinate by at most\nK.\nDetermine the minimum number of steps required by Chef to reach Chefina.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of three integers\nA,B, and\nK, the initial coordinate of Chef, the initial coordinate of Chefina and the maximum number of coordinates Chef can move in one step.\nOutput Format\nFor each test case, output the minimum number of steps required by Chef to reach Chefina.\nConstraints\n1\u2264T\u22641000\n1\u2264A,B\u2264100\n1\u2264K\u2264100\nSample 1:\nInput\nOutput\n4\n10 20 3\n36 36 5\n50 4 100\n30 4 2\n4\n0\n1\n13\nExplanation:\nTest case\n1: In the first three steps, Chef increases his coordinate by\nK=3. In the fourth step, Chef increases his coordinate by\n1 which is less than equal to\nK. It can be shown that this is the minimum number of steps required by Chef.\nTest case\n2: Chef is already at the same coordinate as Chefina. Thus, he needs\n0 steps.\nTest case\n3: Chef can use\n1 step to decrease his coordinate by\n46 which is less than\nK=100 and reach Chefina.\nTest case\n4: Chef can use\n13 steps to decrease his coordinate by\nK=2 and reach the coordinate\n30\u221213\u22c52=4.",
        "195": "Single-use Attack\nChef is playing a video game, and is now fighting the final boss.\nThe boss has\nH health points. Each attack of Chef reduces the health of the boss by\nX.\nChef also has a special attack that can be used at most once, and will decrease the health of the boss by\nY.\nChef wins when the health of the boss is\n\u22640.\nWhat is the minimum number of attacks needed by Chef to win?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case will contain three space-separated integers\nH,X,Y \u2014 the parameters described in the statement.\nOutput Format\nFor each test case, output on a new line the minimum number of attacks needed by Chef to win.\nConstraints\n1\u2264T\u22641000\n1\u2264X<Y\u2264H\u2264100\nSample 1:\nInput\nOutput\n4\n100 25 40\n100 29 45\n46 1 2\n78 15 78\n4\n3\n45\n1\nExplanation:\nTest case\n1: Chef can attack the boss\n4 times normally. This results in\n25+25+25+25=100 damage, which is enough to defeat the boss.\nTest case\n2: Chef can attack the boss\n2 times normally, then use the special attack. This results in\n29+29+45=103 damage, which is enough to defeat the boss.\nTest case\n3: Chef can proceed as follows:\nFirst, use the special attack. This leaves the boss with\n46\u22122=44 health.\nThen, use\n44 normal attacks to defeat the boss, since each one does\n1 damage.\nThis takes a total of\n44+1=45 attacks.\nTest case\n4: Chef can use the special attack to immediately bring the health of the boss to zero, hence only needing one attack.",
        "196": "Get Lowest Free\nChef goes to the supermarket to buy some items. Luckily there's a sale going on under which Chef gets the following offer:\nIf Chef buys\n3 items then he gets the item (out of those\n3 items) having the lowest price as free.\nFor e.g. if Chef bought\n3 items with the cost\n6,\n2 and\n4, then he would get the item with cost\n2 as free. So he would only have to pay the cost of the other two items which will be\n6+4=10.\nChef buys\n3 items having prices\nA,\nB and\nC respectively. What is the amount of money Chef needs to pay?\nInput Format\nThe first line will contain an integer\nT - number of test cases. Then the test cases follow.\nThe first and only line of each test case contains three integers\nA,B,C - the prices of the items bought by Chef.\nOutput Format\nFor each test case, output the price paid by Chef.\nConstraints\n1\u2264T\u2264100\n1\u2264A,B,C\u226410\nSample 1:\nInput\nOutput\n3\n6 2 4\n3 3 3\n8 4 4\n10\n6\n12\nExplanation:\nTest case-1: Explained in the problem statement.\nTest case-2: Since all the three items have the same price, Chef will get one of them free and will have to pay the cost of the other two items which will be\n3+3=6.\nTest case-3: Chef will get one of the items having price\n4 as free and will have to pay the cost of the other two items which will be\n8+4=12.",
        "197": "Minimum number of Flips\nChef has an array\nA of length\nN consisting of\n1 and\n\u22121 only.\nIn one operation, Chef can choose any index\ni\n(1\u2264i\u2264N) and multiply the element\nA\ni\nby\n\u22121.\nFind the minimum number of operations required to make the sum of the array equal to\n0. Output -1 if the sum of the array cannot be made\n0.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nFirst line of each test case consists of a single integer\nN denoting the length of the array.\nSecond line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\ndenoting the array\nA.\nOutput Format\nFor each test case, output the minimum number of operations to make the sum of the array equal to\n0. Output -1 if it is not possible to make the sum equal to\n0.\nConstraints\n1\u2264T\u2264100\n2\u2264N\u22641000\nA\ni\n=1 or\nA\ni\n=\u22121\nSample 1:\nInput\nOutput\n4\n4\n1 1 1 1\n5\n1 -1 1 -1 1\n6\n1 -1 -1 1 1 1\n2\n1 -1\n2\n-1\n1\n0\nExplanation:\nTest case\n1: The minimum number of operations required is\n2. In the first operation, change\nA\n3\nfrom\n1 to\n\u22121. Similarly, in the second operation, change\nA\n4\nfrom\n1 to\n\u22121. Thus, the sum of the final array is\n1+1\u22121\u22121=0.\nTest case\n2: It can be proven that the sum of the array cannot be made equal to zero by making any number of operations.\nTest case\n3: We can change\nA\n1\nfrom\n1 to\n\u22121 in one operation. Thus, the sum of the array becomes\n\u22121\u22121\u22121+1+1+1=0.\nTest case\n4: The sum of the array is already zero. Thus we do not need to make any operations.",
        "198": "Binary Battles\nN teams have come to participate in a competitive coding event called \u201cBinary Battles\u201d. It is a single-elimination tournament consisting of several rounds.\nNote: It is known that\nN is a power of\n2.\nIn one round, each team will be paired up with and compete against one of the other teams. If there are\nX teams before the start of a round,\n2\nX\nmatches are held simultaneously during the round between\n2\nX\npairs of teams. The winning team of each match will move on to the next round, while the losing team of each match will be eliminated. There are no ties involved. The next round will then take place in the same format between the remaining teams. The process will continue until only one team remains, which will be declared the overall winner.\nThe organizers want to find the total time the event will take to complete. It is given that each round spans\nA minutes, and that there is a break of\nB minutes between every two rounds (no break after the last round).\nFor example, consider a case when\nN=4,\nA=10 and\nB=5. The first round will consist of two matches and will take\n10 minutes to complete. Two teams move on to round 2 and the other two get eliminated. Then there is a break of\n5 minutes. The two remaining teams compete in round 2, which lasts\n10 more minutes. The team that wins is declared the overall winner. Thus the total time taken is\n10+5+10=25 minutes.\nCan you help the organizers determine how long the event will take to finish?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains three space-separated integers\nN,\nA and\nB respectively \u2014 the number of teams, the duration of each round and the length of the breaks between rounds.\nOutput Format\nFor each test case, output on a new line the time taken in minutes for the whole event to finish.\nConstraints\n1\u2264T\u226410\n5\n2\u2264N\u22642\n20\n1\u2264A\u2264100\n1\u2264B\u2264100\nN is a power of\n2.\nSample 1:\nInput\nOutput\n4\n4 10 5\n16 30 5\n32 45 15\n1024 23 9\n25\n135\n285\n311\nExplanation:\nTest case 1: As explained above, the total time the competition will take is\n10+5+10=25 minutes.\nTest case 2:\n4 rounds will take place. The total time it will take is\n30+5+30+5+30+5+30=135 minutes.",
        "199": "Best of Two\nAlice and Bob are playing a game. Each player rolls a regular six faced dice\n3 times.\nThe score of a player is the sum of the values of the highest\n2 rolls. The player with the highest score wins, and the game ends in a Tie if both players have the same score.\nFind the winner of the game or determine whether it is a tie.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case contains six space-separated integers\nA\n1\n,\nA\n2\n,\nA\n3\n,\nB\n1\n,\nB\n2\nand\nB\n3\n\u2014 the values Alice gets in her\n3 dice rolls, followed by the values which Bob gets in his\n3 dice rolls.\nOutput Format\nFor each test case, output on a new line Alice if Alice wins, Bob if Bob wins and Tie in case of a tie.\nNote that you may print each character in uppercase or lowercase. For example, the strings tie, TIE, Tie, and tIe are considered identical.\nConstraints\n1\u2264T\u226410\n4\n1\u2264A\n1\n,A\n2\n,A\n3\n,B\n1\n,B\n2\n,B\n3\n\u22646\nSample 1:\nInput\nOutput\n3\n3 2 5 6 1 1\n4 4 5 6 4 1\n6 6 6 6 6 1\nAlice\nBob\nTie\nExplanation:\nTest Case\n1: Alice's score is\n8=(3+5) which is greater than Bob's score\n7=(6+1).\nTest Case\n2: Alice's score is\n9=(5+4) which is less than Bob's score\n10=(6+4).\nTest Case\n3: Alice's score is\n12=(6+6) which is same as Bob's score\n12=(6+6).",
        "200": "The Lead Game\nThe game of billiards involves two players knocking 3 balls around on a green baize table. Well, there is more to it, but for our purposes this is sufficient.\nThe game consists of several rounds and in each round both players obtain a score, based on how well they played. Once all the rounds have been played, the total score of each player is determined by adding up the scores in all the rounds and the player with the higher total score is declared the winner.\nThe Siruseri Sports Club organises an annual billiards game where the top two players of Siruseri play against each other. The Manager of Siruseri Sports Club decided to add his own twist to the game by changing the rules for determining the winner. In his version, at the end of each round, the cumulative score for each player is calculated, and the leader and her current lead are found. Once all the rounds are over the player who had the maximum lead at the end of any round in the game is declared the winner.\nConsider the following score sheet for a game with 5 rounds:\nRound Player 1 Player 2\n1 140 82\n2 89 134\n3 90 110\n4 112 106\n5 88 90\nThe total scores of both players, the leader and the lead after each round for this game is given below:\nRound Player 1 Player 2 Leader Lead\n1 140 82 Player 1 58\n2 229 216 Player 1 13\n3 319 326 Player 2 7\n4 431 432 Player 2 1\n5 519 522 Player 2 3\nNote that the above table contains the cumulative scores.\nThe winner of this game is Player 1 as he had the maximum lead (58 at the end of round 1) during the game.\nYour task is to help the Manager find the winner and the winning lead. You may assume that the scores will be such that there will always be a single winner. That is, there are no ties.\nInput\nThe first line of the input will contain a single integer N (N \u2264 10000) indicating the number of rounds in the game. Lines 2,3,...,N+1 describe the scores of the two players in the N rounds. Line i+1 contains two integer Si and Ti, the scores of the Player 1 and 2 respectively, in round i. You may assume that 1 \u2264 Si \u2264 1000 and 1 \u2264 Ti \u2264 1000.\nOutput\nYour output must consist of a single line containing two integers W and L, where W is 1 or 2 and indicates the winner and L is the maximum lead attained by the winner.\nSample 1:\nInput\nOutput\n5\n140 82\n89 134\n90 110\n112 106\n88 90\n1 58",
        "201": "Degree of Polynomial\nIn mathematics, the degree of polynomials in one variable is the highest power of the variable in the algebraic expression with non-zero coefficient.\nChef has a polynomial in one variable\nx with\nN terms. The polynomial looks like\nA\n0\n\u22c5x\n0\n+A\n1\n\u22c5x\n1\n+\u2026+A\nN\u22122\n\u22c5x\nN\u22122\n+A\nN\u22121\n\u22c5x\nN\u22121\nwhere\nA\ni\u22121\ndenotes the coefficient of the\ni\nth\nterm\nx\ni\u22121\nfor all\n(1\u2264i\u2264N).\nFind the degree of the polynomial.\nNote: It is guaranteed that there exists at least one term with non-zero coefficient.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nFirst line of each test case contains of a single integer\nN - the number of terms in the polynomial.\nSecond line of each test case contains of\nN space-separated integers - the\ni\nth\ninteger\nA\ni\u22121\ncorresponds to the coefficient of\nx\ni\u22121\n.\nOutput Format\nFor each test case, output in a single line, the degree of the polynomial.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u22641000\n\u22121000\u2264A\ni\n\u22641000\nA\ni\n\ue020\n=0 for at least one\n(0\u2264i<N).\nSample 1:\nInput\nOutput\n4\n1\n5\n2\n-3 3\n3\n0 0 5\n4\n1 2 4 0\n0\n1\n2\n2\nExplanation:\nTest case\n1: There is only one term\nx\n0\nwith coefficient\n5. Thus, we are given a constant polynomial and the degree is\n0.\nTest case\n2: The polynomial is\n\u22123\u22c5x\n0\n+3\u22c5x\n1\n=\u22123+3\u22c5x. Thus, the highest power of\nx with non-zero coefficient is\n1.\nTest case\n3: The polynomial is\n0\u22c5x\n0\n+0\u22c5x\n1\n+5\u22c5x\n2\n=0+0+5\u22c5x\n2\n. Thus, the highest power of\nx with non-zero coefficient is\n2.\nTest case\n4: The polynomial is\n1\u22c5x\n0\n+2\u22c5x\n1\n+4\u22c5x\n2\n+0\u22c5x\n3\n=1+2\u22c5x+4\u22c5x\n2\n. Thus, the highest power of\nx with non-zero coefficient is\n2.",
        "202": "Recent contest problems\nCodeChef recently revamped its practice page to make it easier for users to identify the next problems they should solve by introducing some new features:\nRecent Contest Problems - Contains only problems from the last 2 contests\nSeparate Un-Attempted, Attempted, and All tabs\nProblem Difficulty Rating - The Recommended dropdown menu has various difficulty ranges so that you can attempt the problems most suited to your experience\nPopular Topics and Tags\nChef has been participating regularly in rated contests but missed the last two contests due to his college exams. He now wants to solve them and so he visits the practice page to view these problems.\nGiven a list of\nN contest codes, where each contest code is either START38 or LTIME108, help Chef count how many problems were featured in each of the contests.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains of two lines of input.\nFirst line of input contains the total count of problems that appeared in the two recent contests -\nN.\nSecond line of input contains the list of\nN contest codes. Each code is either START38 or LTIME108, to which each problem belongs.\nOutput Format\nFor each test case, output two integers in a single new line - the first integer should be the number of problems in START38, and the second integer should be the number of problems in LTIME108.\nConstraints\n1\u2264T\u226410\n1\u2264N\u22641000\nEach of the contest codes will be either START38 or LTIME108.\nSample 1:\nInput\nOutput\n4\n3\nSTART38 LTIME108 START38\n4\nLTIME108 LTIME108 LTIME108 START38\n2\nLTIME108 LTIME108\n6\nSTART38 LTIME108 LTIME108 LTIME108 START38 LTIME108\n2 1\n1 3\n0 2\n2 4\nExplanation:\nTest case\n1: There are\n2 START38s in the input, which means that there were\n2 problems in START38. Similarly, there was\n1 problem in LTIME108.\nTest case\n2: There is\n1 START38 in the input, which means that there was\n1 problem in START38. Similarly, there were\n3 problems in LTIME108.\nTest case\n3: There are no START38s in the input, which means that were\n0 problems in START38. Similarly, there were\n2 problems in LTIME108.\nTest case\n4: There are\n2 START38s in the input, which means that there were\n2 problems in START38. Similarly, there were\n4 problems in LTIME108.",
        "203": "Primality Test\nAlice and Bob are meeting after a long time. As usual they love to play some math games. This times Alice takes the call and decides the game. The game is very simple, Alice says out an integer and Bob has to say whether the number is prime or not. Bob as usual knows the logic but since Alice doesn't give Bob much time to think, so Bob decides to write a computer program.\nHelp Bob accomplish this task by writing a computer program which will calculate whether the number is prime or not.\nNote that 1 is not a prime number.\nInput\nThe first line of the input contains an integer T, the number of testcases. T lines follow.\nEach of the next T lines contains an integer N which has to be tested for primality.\nOutput\nFor each test case output in a separate line, \"yes\" if the number is prime else \"no.\"\nConstraints\n1 \u2264 T \u2264 20\n1 \u2264 N \u2264 100000\nSample 1:\nInput\nOutput\n5\n23\n13\n20\n1000\n99991\nyes\nyes\nno\nno\nyes",
        "204": "The Cooler Dilemma 2\nThe summer is at its peak in Chefland. Chef is planning to purchase a water cooler to keep his room cool. He has two options available:\nRent a cooler at the cost of\nX coins per month.\nPurchase a cooler for\nY coins.\nChef wonders what is the maximum number of months for which he can rent the cooler such that the cost of renting is strictly less than the cost of purchasing it.\nInput Format\nThe first line of input will contain an integer\nT \u2014 the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains two integers\nX and\nY, as described in the problem statement.\nOutput Format\nFor each test case, output the maximum number of months for which he can rent the cooler such that the cost of renting is strictly less than the cost of purchasing it.\nIf Chef should not rent a cooler at all, output\n0.\nConstraints\n1\u2264T\u22641000\n1\u2264X,Y\u226410\n9\nSample 1:\nInput\nOutput\n2\n5 12\n5 5\n2\n0\nExplanation:\nTest case\n1: Cost of renting the cooler\n=5 coins per month. Cost of purchasing the cooler\n=12 coins. So, Chef can rent the cooler for\n2 months at the cost of\n10 coins, which is strictly less than\n12 coins.\nTest case\n2: Cost of renting the cooler\n=5 coins per month. Cost of purchasing the cooler\n=5 coins. If Chef rents the cooler for\n1 month, it will cost\n5 coins, which is not strictly less than the cost of purchasing it. So, Chef should not rent the cooler.",
        "205": "Easy Pronunciation\nWords that contain many consecutive consonants, like \"schtschurowskia\", are generally considered somewhat hard to pronounce.\nWe say that a word is hard to pronounce if it contains\n4 or more consonants in a row; otherwise it is easy to pronounce. For example, \"apple\" and \"polish\" are easy to pronounce, but \"schtschurowskia\" is hard to pronounce.\nYou are given a string\nS consisting of\nN lowercase Latin characters. Determine whether it is easy to pronounce or not based on the rule above \u2014 print YES if it is easy to pronounce and NO otherwise.\nFor the purposes of this problem, the vowels are the characters\n{a,e,i,o,u} and the consonants are the other\n21 characters.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains a single integer\nN, the length of string\nS.\nThe second line of each test case contains the string\nS.\nOutput Format\nFor each test case, output on a new line the answer \u2014 YES if\nS is easy to pronounce, and NO otherwise.\nEach character of the output may be printed in either uppercase or lowercase. For example, the strings YES, yeS, yes, and YeS will all be treated as identical.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u2264100\nS contains only lowercase Latin characters, i.e, the characters\n{a,b,c,\u2026,z}\nSample 1:\nInput\nOutput\n5\n5\napple\n15\nschtschurowskia\n6\npolish\n5\ntryst\n3\ncry\nYES\nNO\nYES\nNO\nYES\nExplanation:\nTest case\n1: \"\napple\" doesn't have\n4 or move consecutive consonants, which makes it easy to pronounce.\nTest case\n2: \"\nschtschurowskia\" has\n7 consecutive consonants, which makes it hard to pronounce.\nTest case\n3:\npolish doesn't contain\n4 or more consecutive consonants, so it's easy to pronounce.\nTest case\n4:\ntryst contains\n5 consecutive consonants, making it hard to pronounce.\nTest case\n5:\ncry doesn't contain any vowels, but its length is less than\n4 so it's still easy to pronounce.",
        "206": "ATM Machine\n###Read problems statements Bengali , Mandarin chinese , Russian and Vietnamese as well.\nThere is an ATM machine. Initially, it contains a total of\nK units of money.\nN people (numbered\n1 through\nN) want to withdraw money; for each valid\ni, the\ni-th person wants to withdraw\nA\ni\nunits of money.\nThe people come in and try to withdraw money one by one, in the increasing order of their indices. Whenever someone tries to withdraw money, if the machine has at least the required amount of money, it will give out the required amount. Otherwise, it will throw an error and not give out anything; in that case, this person will return home directly without trying to do anything else.\nFor each person, determine whether they will get the required amount of money or not.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains two space-separated integers\nN and\nK.\nThe second line contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n.\nOutput\nFor each test case, print a single line containing a string with length\nN. For each valid\ni, the\ni-th character of this string should be '1' if the\ni-th person will successfully withdraw their money or '0' otherwise.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u2264100\n1\u2264A\ni\n\u22641,000,000 for each valid\ni\n1\u2264K\u22641,000,000\nSample 1:\nInput\nOutput\n2\n5 10\n3 5 3 2 1\n4 6\n10 8 6 4\n11010\n0010\nExplanation:\nExample case 1: The ATM machine initially contains\n10 units of money. The first person comes and withdraws\n3 units, so the amount remaining in the machine is\n7. Then the second person withdraws\n5 units and the remaining amount is\n2. The third person wants to withdraw\n3 units, but since there are only\n2 units of money in the machine, it throws an error and the third person must leave without getting anything. Then the fourth person withdraws\n2 units, which leaves nothing in the machine, so the last person does not get anything.\nExample case 2: The ATM machine initially contains\n6 units of money, so it cannot give anything to the first and second person. When the third person comes, it gives them all the money it has, so the last person does not get anything either.",
        "207": "TCS Examination\nTwo friends, Dragon and Sloth, are writing a computer science examination series. There are three subjects in this series:\nDSA,\nTOC, and\nDM. Each subject carries\n100 marks.\nYou know the individual scores of both Dragon and Sloth in all\n3 subjects. You have to determine who got a better rank.\nThe rank is decided as follows:\nThe person with a bigger total score gets a better rank\nIf the total scores are tied, the person who scored higher in\nDSA gets a better rank\nIf the total score and the\nDSA score are tied, the person who scored higher in\nTOC gets a better rank\nIf everything is tied, they get the same rank.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains three space-separated integers denoting the scores of Dragon in\nDSA,\nTOC and\nDM respectively.\nThe second line of each test case contains three space-separated integers denoting the scores of Sloth in\nDSA,\nTOC and\nDM respectively.\nOutput Format\nFor each test case, if Dragon got a better rank then output \"Dragon\", else if Sloth got a better rank then output \"Sloth\". If there was a tie then output \"Tie\". Note that the string you output should not contain quotes.\nThe output is case insensitive. For example, If the output is \"Tie\" then \"TiE\", \"tiE\", \"tie\", etc are also considered correct.\nConstraints\n1\u2264T\u22641000\nEach score of both Dragon and Sloth lies between\n0 and\n100.\nSubtasks\nSubtask #1 (100 points): Original constraints\nSample 1:\nInput\nOutput\n4\n10 20 30\n30 20 10\n5 23 87\n5 23 87\n0 15 100\n100 5 5\n50 50 50\n50 49 51\nSLOTH\nTIE\nDRAGON\nDRAGON\nExplanation:\nFor the first test case, Sloth and Dragon have the same total score but Sloth gets a better rank because he has a higher score in\nDSA.\nFor the second test case, Sloth and Dragon have the same rank because they have the same score among all subjects.\nFor the third test case, Dragon gets a better rank because he has a greater total score.\nFor the fourth test case, Sloth and Dragon have the same total score and same\nDSA score. Dragon gets a better rank because he has a greater\nTOC score.",
        "208": "Adjacent Sum Parity\nChef has an array\nA of length\nN.\nChef forms a binary array\nB of length\nN using the parity of the sums of adjacent elements in\nA. Formally,\nB\ni\n=(A\ni\n+A\ni+1\n)%2 for\n1\u2264i\u2264N\u22121\nB\nN\n=(A\nN\n+A\n1\n)%2\nHere\nx%y denotes the remainder obtained when\nx is divided by\ny.\nChef lost the array\nA and needs your help. Given array\nB, determine whether there exists any valid array\nA which could have formed\nB.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains an integer\nN \u2014 the size of the array\nA.\nThe second line of each test case contains\nN space-separated integers\nB\n1\n,B\n2\n,\u2026,B\nN\ndenoting the array\nB.\nOutput Format\nFor each testcase, output YES if there exists a valid array\nA, NO otherwise.\nYou can print any character in any case. For example YES, Yes, yEs are all considered same.\nConstraints\n1\u2264T\u22641000\n2\u2264N\u226410\n5\nB\ni\n\u2208{0,1}\nThe sum of\nN over all test cases do not exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n4\n2\n0 0\n2\n1 0\n4\n1 0 1 0\n3\n1 0 0\nYES\nNO\nYES\nNO\nExplanation:\nTest case 1: One such valid array is\nA=[3,3].\nTest case 2: It can be shown that no such arrays exist and are valid.\nTest case 3: One such valid array is\nA=[1,2,4,5].\nB\n1\n=1 since\nA\n1\n+A\n2\n=1+2=3 and\n3%2=1\nB\n2\n=0 since\nA\n2\n+A\n3\n=2+4=6 and\n6%2=0\nB\n3\n=1 since\nA\n3\n+A\n4\n=4+5=9 and\n9%2=1\nB\n4\n=0 since\nA\n4\n+A\n1\n=5+1=6 and\n6%2=0",
        "209": "Candies\nAbhi is a salesman. He was given two types of candies, which he is selling in\nN different cities.\nFor the prices of the candies to be valid, Abhi's boss laid down the following condition:\nA given type of candy must have distinct prices in all\nN cities.\nIn his excitement, Abhi wrote down the prices of both the candies on the same page and in random order instead of writing them on different pages. Now he is asking for your help to find out if the prices he wrote are valid or not.\nYou are given an array\nA of size\n2N. Find out whether it is possible to split\nA into two arrays, each of length\nN, such that both arrays consist of distinct elements.\nBoth arrays can have distinct elements only if no element in the original array is repeated more than twice.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains one integer\nN, denoting the number of cities\nThe second line contains\n2N space-separated integers\nA\n1\n,A\n2\n,\u2026,A\n2N\n\u2014 the elements of the array\nA.\nOutput Format\nFor each test case output the answer on a new line \u2014 Yes if the given array represents a valid list of prices, and No otherwise.\nEach letter of the output may be printed in either uppercase or lowercase, i.e, Yes, YES, and yEs will all be treated as equivalent.\nConstraints\n1\u2264T\u226410\n3\n1\u2264N\u226410\n3\n1\u2264A\ni\n\u226410\n9\nThe sum of\nN over all testcases does not exceed\n2\u22c510\n3\nSample 1:\nInput\nOutput\n4\n3\n4 8 4 6 7 3\n3\n4 8 6 8 7 8\n2\n2 4 5 3\n4\n8 7 9 8 4 6 2 8\nYes\nNo\nYes\nNo\nExplanation:\nTest case\n1: One valid way of assigning prices is as follows:\nThe first candy can have a price of\n4 in city\n1,\n6 in city\n2, and\n8 in city\n3.\nThe second candy can have a price of\n4 in city\n1,\n3 in city\n2, and\n7 in city\n3.\nSince a valid assignment exists, the answer is \"Yes\".\nTest case\n2: No valid set of prices exists that could give this array, since\n8 would be repeated somewhere.\nTest case\n3: One way of splitting the prices is\n[2,5] and\n[4,3].\nTest case\n4: No valid set of prices exists that could give this array.",
        "210": "Chef Diet\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nChef decided to go on a diet during the following\nN days (numbered\n1 through\nN). Part of the diet plan is to eat\nK grams of protein during each day. For each valid\ni, Chef wants to buy\nA\ni\ngrams of protein in the morning of the\ni-th day and then eat\nK grams of protein as part of his dinner. If he has any protein remaining, he can store it and use it in later dinners. Initially, Chef is storing\n0 grams of protein.\nDetermine whether Chef will have enough protein all the time during his diet. In case he will not have enough, find the first day on which Chef will be unable to eat\nK grams of protein.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains two space-separated integers\nN and\nK.\nThe second line contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n.\nOutput\nFor each test case:\nIf Chef will have enough protein during his diet, print a single line containing the string \"YES\".\nOtherwise, print a single line containing the string \"NO\", followed by a space and one integer \u2014 the first day when Chef will be unable to eat\nK grams of protein.\nConstraints\n1\u2264T\u2264200\n1\u2264N\u2264100\n1\u2264K\u226410\n6\n1\u2264A\ni\n\u226410\n6\nfor each valid\ni\nSample 1:\nInput\nOutput\n3\n4 5\n7 3 6 5\n3 4\n3 10 10\n3 4\n8 1 1\nYES\nNO 1\nNO 3\nExplanation:\nExample case 1: On the first day, Chef buys\n7 grams, eats\n5 and stores\n2 grams for later. On the second day, he buys\n3 grams, so he has\n5 grams, which is just enough for the dinner on this day. On the third day, he buys\n6 grams, eats\n5 and stores\n1, and on the fourth day, he buys\n5 grams, so he has\n6 grams \u2014 enough for dinner. In the end, he had enough protein to eat during all four dinners.\nExample case 2: Chef needs to eat\n4 grams of protein on the first day, but he only has\n3 grams, so he does not have a sufficient amount of protein already for the first dinner.",
        "211": "Break the Stick\nChef has a stick of length\nN.\nHe can break the stick into\n2 or more parts such that the parity of length of each part is same. For example, a stick of length\n11 can be broken into three sticks of lengths\n{3,3,5} since each part is odd, but it cannot be broken into two sticks of lengths\n{5,6} since one is even and the other is odd.\nChef can then continue applying this operation on the smaller sticks he obtains, as many times as he likes.\nCan Chef obtain a stick of length exactly\nX by doing this?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases. The description of the test cases follows.\nEach test case consists of a single line of input, containing two space-separated integers\nN,X.\nOutput Format\nFor each test case, output on a new line YES if Chef can obtain a stick of length exactly\nX, and NO otherwise.\nEach letter of the output may be printed in either lowercase or uppercase. For example, the strings YES, yEs, and Yes will be considered identical.\nConstraints\n1\u2264T\u22641000\n1\u2264X<N\u226410\n9\nSample 1:\nInput\nOutput\n3\n6 1\n3 2\n4 3\nYES\nNO\nYES\nExplanation:\nTest case\n1: Chef can initially break the stick into\n3 parts of length\n2 each. After that, Chef can pick any segment of length\n2 and break it into\n2 sticks of length\n1 each.\nTest case\n2: Chef cannot obtain a stick of length\n2, since the only way to break a stick of length\n3 following the given conditions is into three parts of length\n1 each.\nTest case\n3: Chef can break the stick into lengths\n3 and\n1.",
        "212": "Encoding Message\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef recently graduated Computer Science in university, so he was looking for a job. He applied for several job offers, but he eventually settled for a software engineering job at ShareChat. Chef was very enthusiastic about his new job and the first mission assigned to him was to implement a message encoding feature to ensure the chat is private and secure.\nChef has a message, which is a string\nS with length\nN containing only lowercase English letters. It should be encoded in two steps as follows:\nSwap the first and second character of the string\nS, then swap the 3rd and 4th character, then the 5th and 6th character and so on. If the length of\nS is odd, the last character should not be swapped with any other.\nReplace each occurrence of the letter 'a' in the message obtained after the first step by the letter 'z', each occurrence of 'b' by 'y', each occurrence of 'c' by 'x', etc, and each occurrence of 'z' in the message obtained after the first step by 'a'.\nThe string produced in the second step is the encoded message. Help Chef and find this message.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN.\nThe second line contains the message string\nS.\nOutput\nFor each test case, print a single line containing one string \u2014 the encoded message.\nConstraints\n1\u2264T\u22641,000\n1\u2264N\u2264100\n\u2223S\u2223=N\nS contains only lowercase English letters\nSample 1:\nInput\nOutput\n2\n9\nsharechat\n4\nchef\nshizxvzsg\nsxuv\nExplanation:\nExample case 1: The original message is \"sharechat\". In the first step, we swap four pairs of letters (note that the last letter is not swapped), so it becomes \"hsraceaht\". In the second step, we replace the first letter ('h') by 's', the second letter ('s') by 'h', and so on, so the resulting encoded message is \"shizxvzsg\".",
        "213": "Bear and Candies 123\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nBears love candies and games involving eating them. Limak and Bob play the following game. Limak eats 1 candy, then Bob eats 2 candies, then Limak eats 3 candies, then Bob eats 4 candies, and so on. Once someone can't eat what he is supposed to eat, he loses.\nLimak can eat at most A candies in total (otherwise he would become sick), while Bob can eat at most B candies in total. Who will win the game? Print \"Limak\" or \"Bob\" accordingly.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of each test case contains two integers A and B denoting the maximum possible number of candies Limak can eat and the maximum possible number of candies Bob can eat respectively.\nOutput\nFor each test case, output a single line containing one string \u2014 the name of the winner (\"Limak\" or \"Bob\" without the quotes).\nConstraints\n1 \u2264 T \u2264 1000\n1 \u2264 A, B \u2264 1000\nSample 1:\nInput\nOutput\n10\n3 2\n4 2\n1 1\n1 2\n1 3\n9 3\n9 11\n9 12\n9 1000\n8 11\nBob\nLimak\nLimak\nBob\nBob\nLimak\nLimak\nBob\nBob\nBob\nExplanation:\nTest case 1. We have A = 3 and B = 2. Limak eats 1 candy first, and then Bob eats 2 candies. Then Limak is supposed to eat 3 candies but that would mean 1 + 3 = 4 candies in total. It's impossible because he can eat at most A candies, so he loses. Bob wins, and so we print \"Bob\".\nTest case 2. Now we have A = 4 and B = 2. Limak eats 1 candy first, and then Bob eats 2 candies, then Limak eats 3 candies (he has 1 + 3 = 4 candies in total, which is allowed because it doesn't exceed A). Now Bob should eat 4 candies but he can't eat even a single one (he already ate 2 candies). Bob loses and Limak is the winner.\nTest case 8. We have A = 9 and B = 12. The game looks as follows:\nLimak eats 1 candy.\nBob eats 2 candies.\nLimak eats 3 candies (4 in total).\nBob eats 4 candies (6 in total).\nLimak eats 5 candies (9 in total).\nBob eats 6 candies (12 in total).\nLimak is supposed to eat 7 candies but he can't \u2014 that would exceed A. Bob wins.",
        "214": "Elections in Chefland\nThere are\n101 citizens in Chefland. It is election time in Chefland and\n3 parties,\nA,B, and\nC are contesting the elections. Party\nA receives\nX\nA\nvotes, party\nB receives\nX\nB\nvotes, and party\nC receives\nX\nC\nvotes.\nThe constitution of Chefland requires a particular party to receive a clear majority to form the government. A party is said to have a clear majority if it receives strictly greater than\n50 votes.\nIf any party has a clear majority, print the winning party (A, B or C). Otherwise, print NOTA.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains\n3 space-separated integers \u2014\nX\nA\n,\nX\nB\n, and\nX\nC\n.\nOutput Format\nFor each test case, if any party has a clear majority, print the winning party (A, B or C). Otherwise, print NOTA.\nYou can print each letter of the string in any case (upper or lower) (for instance, strings Nota, nOtA and notA will be considered identical).\nConstraints\n1\u2264T\u2264500\n0\u2264X\nA\n,X\nB\n,X\nC\n\u2264101\nX\nA\n+X\nB\n+X\nC\n=101\nSample 1:\nInput\nOutput\n3\n80 19 2\n20 55 26\n50 1 50\nA\nB\nNOTA\nExplanation:\nTest Case\n1: Party\nA has received\n80 votes, which is strictly greater than\n50.\nTest Case\n2: Party\nB has received\n55 votes, which is strictly greater than\n50.\nTest Case\n3: None of the parties have received strictly more than\n50 votes.",
        "215": "Chef and Two Strings\nRead problems statements in Mandarin Chinese and Russian.\nChef has found two very old sheets of paper, each of which originally contained a string of lowercase Latin letters. The strings on both the sheets have equal lengths. However, since the sheets are very old, some letters have become unreadable.\nChef would like to estimate the difference between these strings. Let's assume that the first string is named S1, and the second S2. The unreadable symbols are specified with the question mark symbol '?'. The difference between the strings equals to the number of positions i, such that S1i is not equal to S2i, where S1i and S2i denote the symbol at the i the position in S1 and S2, respectively.\nChef would like to know the minimal and the maximal difference between the two strings, if he changes all unreadable symbols to lowercase Latin letters. Now that you're fully aware of Chef's programming expertise, you might have guessed that he needs you help solving this problem as well. Go on, help him!\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of a test case contains a string S1.\nThe second line of a test case contains a string S2.\nBoth strings consist of lowercase Latin letters and question marks in places where the symbols are unreadable.\nOutput\nFor each test case, output the minimal and the maximal difference between two given strings separated with a single space.\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 |S1|, |S2| \u2264 100\nSubtask 1 (25 points): |S1| = 1\nSubtask 2 (10 points): neither S1 nor S2 contains unreadable symbols\nSubtask 3 (65 points): 1 \u2264 |S1|, |S2| \u2264 100\nSample 1:\nInput\nOutput\n3\na?c\n??b\n???a\n???a\n?abac\naba?w\n1 3\n0 3\n3 5\nExplanation:\nExample case 1. You can change the question marks in the strings so that you obtain S1 = abc and S2 = abb. Then S1 and S2 will differ in one position. On the other hand, you can change the letters so that S1 = abc and S2 = bab. Then, the strings will differ in all three positions.\nExample case 2. Change the question marks this way: S1 = dcba, S2 = dcba, then the strings will differ in 0 positions. You can also change the question marks so that S1 = aaaa, S2 = dcba, then the strings will differ in 3 positions.\nExample case 3. Change the question marks this way: S1 = aabac, S2 = abaaw, then the strings will differ in 3 positions. Then, change the question marks this way: S1 = xabac, S2 = abayw, then they will differ in 5 positions.",
        "216": "Card Removal\nYou have\nN cards placed in front of you on the table. The\ni\nth\ncard has the number\nA\ni\nwritten on it.\nIn one move, you can remove any one card from the remaining cards on the table.\nFind the minimum number of moves required so that all the cards remaining on the table have the same number written on them.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains an integer\nN \u2014 the number of cards on the table.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\nwhere\nA\ni\nis the number written on the\ni\nth\ncard.\nOutput Format\nFor each test case, output the minimum number of moves required so that all the cards remaining on the table have the same number written on them.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u2264100\n1\u2264A\ni\n\u226410\nSample 1:\nInput\nOutput\n3\n5\n1 1 2 2 3\n4\n8 8 8 8\n6\n5 6 7 8 9 10\n3\n0\n5\nExplanation:\nTest case\n1: The minimum number of moves required such that all remaining cards have same values is\n3:\nMove\n1: Remove a card with number\n1. Remaining cards are\n[1,2,2,3].\nMove\n2: Remove a card with number\n1. Remaining cards are\n[2,2,3].\nMove\n3: Remove a card with number\n3. Remaining cards are\n[2,2].\nTest case\n2: All cards have the same number initially. Thus, no moves are required.\nTest case\n3: The minimum number of moves required such that all remaining cards have same values is\n5:\nMove\n1: Remove a card with number\n5. Remaining cards are\n[6,7,8,9,10].\nMove\n2: Remove a card with number\n6. Remaining cards are\n[7,8,9,10].\nMove\n3: Remove a card with number\n7. Remaining cards are\n[8,9,10].\nMove\n4: Remove a card with number\n8. Remaining cards are\n[9,10].\nMove\n5: Remove a card with number\n9. Remaining cards are\n[10].",
        "217": "Even-tual Reduction\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nYou are given a string\nS with length\nN. You may perform the following operation any number of times: choose a non-empty substring of\nS (possibly the whole string\nS) such that each character occurs an even number of times in this substring and erase this substring from\nS. (The parts of\nS before and after the erased substring are concatenated and the next operation is performed on this shorter string.)\nFor example, from the string \"acabbad\", we can erase the highlighted substring \"abba\", since each character occurs an even number of times in this substring. After this operation, the remaining string is \"acd\".\nIs it possible to erase the whole string using one or more operations?\nNote: A string\nB is a substring of a string\nA if\nB can be obtained from\nA by deleting several (possibly none or all) characters from the beginning and several (possibly none or all) characters from the end.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN.\nThe second line contains a single string\nS with length\nN.\nOutput\nFor each test case, print a single line containing the string \"YES\" if it is possible to erase the whole string or \"NO\" otherwise (without quotes).\nConstraints\n1\u2264T\u2264200\n1\u2264N\u22641,000\nS contains only lowercase English letters\nSample 1:\nInput\nOutput\n4\n6\ncabbac\n7\nacabbad\n18\nfbedfcbdaebaaceeba\n21\nyourcrushlovesyouback\nYES\nNO\nYES\nNO\nExplanation:\nExample case 1: We can perform two operations: erase the substring \"abba\", which leaves us with the string \"cc\", and then erase \"cc\".",
        "218": "Zero String\nYou are given a binary string\nS of length\nN. You are allowed to perform the following types of operations on string\nS:\nDelete any one character from\nS, and concatenate the remaining parts of the string. For example, if we delete the third character of\nS=1101, it becomes\nS=111.\nFlip all the characters of\nS. For example, if we flip all character of\nS=1101, it becomes\nS=0010.\nGiven that you can use either type of operation any number of times, find the minimum number of operations required to make all characters of the string\nS equal to\n0.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains an integer\nN \u2014 the length of the string.\nThe next line contains a binary string\nS of length\nN.\nOutput Format\nFor each test case, output on a new line, the minimum number of operations required to make all characters of the string\nS equal to\n0.\nConstraints\n1\u2264T\u22642000\n1\u2264N\u226410\n5\nS contains\n0 and\n1 only.\nThe sum of\nN over all test cases won't exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n4\n2\n01\n3\n101\n3\n111\n4\n0000\n1\n2\n1\n0\nExplanation:\nTest case\n1: You can use one operation to delete the second character of the string\nS. Thus, the string becomes\n0. Note that all characters of this string are\n0 and thus, it satisfies the conditions.\nTest case\n2: You can perform the following operations:\nOperation\n1: Flip all characters of the string. Thus, string becomes\n010.\nOperation\n2: Delete the second character of the string. Thus, string becomes\n00.\nNote that we have obtained a string having all characters as\n0 in two operations. It can be shown that this is the minimum number of operations required.\nTest case\n3: You can use one operation to flip all characters of the string\nS. Thus, the string becomes\n000. Note that all characters of this string are\n0 and thus, it satisfies the conditions.\nTest case\n4: The existing string satisfies the conditions. Thus, we require zero operations.",
        "219": "Airline Restrictions\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef has\n3 bags that she wants to take on a flight. They weigh\nA,\nB, and\nC kgs respectively. She wants to check-in exactly two of these bags and carry the remaining one bag with her.\nThe airline restrictions says that the total sum of the weights of the bags that are checked-in cannot exceed\nD kgs and the weight of the bag which is carried cannot exceed\nE kgs. Find if Chef can take all the three bags on the flight.\nInput Format\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nEach testcase contains a single line of input, five space separated integers\nA,B,C,D,E.\nOutput Format\nFor each testcase, output in a single line answer \"YES\" if Chef can take all the three bags with her or \"NO\" if she cannot.\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\nConstraints\n1\u2264T\u226436000\n1\u2264A,B,C\u226410\n15\u2264D\u226420\n5\u2264E\u226410\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n3\n1 1 1 15 5\n8 7 6 15 5\n8 5 7 15 6\nYES\nNO\nYES\nExplanation:\nTest case\n1: Chef can check-in the first and second bag (since\n1+1=2\u226415) and carry the third bag with her (since\n1\u22645).\nTest case\n2: None of the three bags can be carried in hand without violating the airport restrictions.\nTest case\n3: Chef can check-in the first and the third bag (since\n8+7\u226415) and carry the second bag with her (since\n5\u22646).",
        "220": "Odd Pairs\nGiven an integer\nN, determine the number of pairs\n(A,B) such that:\n1\u2264A,B\u2264N;\nA+B is odd.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single integer\nN.\nOutput Format\nFor each test case, output the number of required pairs.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u226410\n9\nSample 1:\nInput\nOutput\n5\n1\n2\n3\n100\n199\n0\n2\n4\n5000\n19800\nExplanation:\nTest case\n1: There are no pairs satisfying the given conditions.\nTest case\n2: The pairs satisfying both conditions are:\n(1,2) and\n(2,1).\nTest case\n3: The pairs satisfying both conditions are:\n(1,2),(2,1),(2,3), and\n(3,2).",
        "221": "Chef and his Students\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef is instructor of the famous course \"Introduction to Algorithms\" in a famous univerisity. There are n students in his class. There is not enough space in the class room, so students sit in a long hallway in a linear fashion.\nOne day Chef was late to class. As a result, some of the students have formed pairs and are talking to each other, while the others are busy studying. This information is given to you by a string s of length n, consisting of characters '*', <' and '>', where '*' denotes that the student is studying, '>' denotes that the corresponding student is talking to the student to the right, and '<' denotes that the corresponding student is talking to the student to the left.\nFor example, consider a sample configuration of students - *><*. Here students numbered 1 and 4 are busy studying, while the student 2 and 3 are talking to each other. In this example, ><><, student 1 and 2 are talking to each other, and 3 and 4 are also talking to each other. You are guaranteed that the given input is a valid configuration, i.e. <> can not be a valid string s, as here student 1 is shown to be talking to left, but there is no student to the left. Same is the case for right. Similarly, >><< is also not a valid configuration, as students 2 and 3 are talking to each other, so student 1 won't be able to talk to student 2.\nWhen the students see their teacher coming, those who were talking get afraid and immediately turn around, i.e. students talking to left have now turned to the right, and the one talking to right have turned to the left. When Chef sees two students facing each other, he will assume that they were talking. A student who is busy studying will continue doing so. Chef will call each pair of students who were talking and punish them. Can you find out how many pairs of students will get punished?\nFor example, in case *><*, when students see Chef, their new configuration will be *<>*. Chef sees that no students are talking to each other. So no one is punished. While in case ><><, the new configuration of students will be <><>, Chef sees that student 2 and 3 are talking to each other and they will be punished.\nInput\nThe first line of the input contains an integer T denoting the number of the test cases.\nEach test case contains a string s denoting the activities of students before students see Chef entering the class.\nOutput\nFor each test case, output a single integer denoting the number of pairs of students that will be punished.\nConstraints\n1 \u2264 T \u2264 10\n1 \u2264 |s| \u2264 105\nSubtasks\nSubtask #1: (30 points)\n1 \u2264 T \u2264 10\n1 \u2264 |s| \u2264 105\nNo student is studying.\n\nSubtask #2: (70 points)\nOriginal Constraints.\nSample 1:\nInput\nOutput\n4\n><\n*><*\n><><\n*><><><*\n0\n0\n1\n2\nExplanation:\nExample case 1. The updated configuration will be <>. No students are talking to each other, so no one will be punished.\nExample case 2 and 3. These examples are already explained in the problem statement.",
        "222": "End Sorted\nChef considers a permutation\nP of\n{1,2,3,\u2026,N} End Sorted if and only if\nP\n1\n=1 and\nP\nN\n=N.\nChef is given a permutation\nP.\nIn one operation Chef can choose any index\ni (1\u2264i\u2264N\u22121) and swap\nP\ni\nand\nP\ni+1\n. Determine the minimum number of operations required by Chef to make the permutation\nP End Sorted.\nNote: An array\nP is said to be a permutation of\n{1,2,3,\u2026,N} if\nP contains each element of\n{1,2,3,\u2026,N} exactly once.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains a single integer\nN, denoting the length of the permutation\nP.\nThe second line contains\nN space-separated integers\nP\n1\n,P\n2\n,P\n3\n,\u2026,P\nN\n, denoting the permutation\nP.\nOutput Format\nFor each test case, output minimum number of operations required by Chef to make the permutation\nP End Sorted.\nConstraints\n1\u2264T\u22641000\n2\u2264N\u226410\n5\nP is a permutation of\n{1,2,3,\u2026N}\nThe sum of\nN over all test cases does not exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n4\n4\n1 3 2 4\n3\n3 2 1\n2\n2 1\n3\n2 1 3\n0\n3\n1\n1\nExplanation:\nTest case\n1:\nP is already End Sorted.\nTest case\n2:\nP can be made End Sorted using\n3 operations as follows:\n[3,2,1]\u2192[2,3,1]\u2192[2,1,3]\u2192[1,2,3]. It can be shown that achieving this in fewer than\n3 moves is impossible.\nTest case\n3:\nP can be made End Sorted using one operation, by swapping\n1 and\n2.\nTest case\n4:\nP can be made End Sorted using one operation, by swapping\n1 and\n2.",
        "223": "Prime Reversal\nYou are given two binary strings\nA and\nB, each of length\nN. You can perform the following operation on string\nA any number of times:\nSelect a prime number\nX.\nChoose any substring of string\nA having length\nX and reverse the substring.\nDetermine whether you can make the string\nA equal to\nB using any (possibly zero) number of operations.\nA substring is obtained by deleting some (possibly zero) elements from the beginning and some (possibly zero) elements from the end of the string.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains an integer\nN \u2014 the length of the strings\nA and\nB.\nThe second line contains the binary string\nA.\nThe third line contains the binary string\nB.\nOutput Format\nFor each test case, output on a new line, YES, if you can make the string\nA equal to\nB using any number of operations and NO otherwise.\nYou can print each character in uppercase or lowercase. For example, YES, yes, Yes, and yES are all identical.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u226410\n5\nA\ni\nand\nB\ni\ncontain\n0 and\n1 only.\nThe sum of\nN over all test cases won't exceed\n10\n5\n.\nSample 1:\nInput\nOutput\n4\n2\n00\n00\n4\n1001\n0111\n5\n11000\n10010\n5\n11000\n11010\nYES\nNO\nYES\nNO\nExplanation:\nTest case\n1: Both the strings are equal. Thus, we do not need any operations.\nTest case\n2: It can be shown that we cannot make the string\nA equal to\nB using any number of operations.\nTest case\n3: Choose\nX=3 and reverse the substring\nA[2,4]=100. Thus, the string\nA becomes\n10010 which is equal to\nB.\nTest case\n4: It can be shown that we cannot make the string\nA equal to\nB using any number of operations.",
        "224": "Hungry Ashish\nIt's dinner time. Ashish is very hungry and wants to eat something. He has\nX rupees in his pocket. Since Ashish is very picky, he only likes to eat either PIZZA or BURGER. In addition, he prefers eating PIZZA over eating BURGER. The cost of a PIZZA is\nY rupees while the cost of a BURGER is\nZ rupees.\nAshish can eat at most one thing. Find out what will Ashish eat for his dinner.\nInput Format\nThe first line will contain\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains three integers\nX,\nY and\nZ - the money Ashish has, the cost of a PIZZA and the cost of a BURGER.\nOutput Format\nFor each test case, output what Ashish will eat. (PIZZA, BURGER or NOTHING).\nYou may print each character of the string in uppercase or lowercase. (for example, the strings Pizza, pIzZa and piZZa will all be treated as identical).\nConstraints\n1\u2264T\u2264100\n1\u2264X,Y,Z\u2264100\nSample 1:\nInput\nOutput\n3\n50 40 60\n40 55 39\n30 42 37\nPIZZA\nBURGER\nNOTHING\nExplanation:\nTest case-1: Ashish has\n50 rupees while the cost of PIZZA is\n40. Therefore he can buy a PIZZA for his dinner.\nTest case-2: Ashish has\n40 rupees. The cost of PIZZA is\n55 and the cost of BURGER is\n39. Therefore Ashish can not buy a PIZZA but can buy a BURGER for his dinner.\nTest case-3: Ashish has\n30 rupees which are not sufficient to buy either PIZZA or BURGER. Thus he can not buy anything and remains hungry :(.",
        "225": "Mask Policy\nA city has been infected by a contagious virus.\nIn a survey, it was found that\nA out of the\nN people living in the city are currently infected. It has been observed that the only way for a person to get infected is if he comes in contact with an already infected person, and both of them are NOT wearing a mask.\nThe mayor of the city wants to make a new Mask Policy and find out the minimum number of people that will be required to wear a mask to avoid the further spread of the virus. Help the mayor in finding this number.\nNote: The only aim of the mayor is to stop virus spread, not to mask every infected person.\nInput Format\nThe first line contains\nT - number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two integers\nN and\nA - the total number of people living in the city and the number of people already affected by the virus respectively.\nOutput Format\nFor each test case, output the minimum number of people that will be required to wear a mask so as to curb the virus spread.\nConstraints\n1\u2264T\u226410\n5\n2\u2264N\u2264400\n1\u2264A<N\nSample 1:\nInput\nOutput\n3\n2 1\n3 2\n3 1\n1\n1\n1\nExplanation:\nTest Case #1: There is\n1 infected person and\n1 uninfected person. We can ask any of them to wear a mask, and no more infections will occur. Hence the answer is\n1.\nTest Case #2: There are\n2 infected people and\n1 uninfected person. We can ask the uninfected person to wear a mask, and no more infections will occur. Hence the answer is\n1.\nTest Case #3: There is\n1 infected person and\n2 uninfected people. We can ask the single infected person to wear a mask, and no more infections will occur. Hence the answer is\n1.",
        "226": "Counting Problem\nYou are given an array\nA=[A\n1\n,A\n2\n,\u2026,A\nN\n].\nIs it possible to partition\nA into two non-empty subsequences\nS\n1\nand\nS\n2\nsuch that\nsum(S\n1\n)\u00d7sum(S\n2\n) is odd?\nHere,\nsum(S\n1\n) denotes the sum of elements in\nS\n1\n, and\nsum(S\n2\n) is defined similarly.\nNote:\nS\n1\nand\nS\n2\nmust partition\nA, that is:\nS\n1\nand\nS\n2\nmust be non-empty\nEvery element of\nA must be in either\nS\n1\nor\nS\n2\nS\n1\nand\nS\n2\nmust be disjoint (in terms of which indices their subsequences represent)\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of 2 lines of input.\nThe first line of each test case contains a single integer\nN, the size of the array.\nThe next line contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n: the elements of the array.\nOutput Format\nFor each test case, print on a new line the answer: YES if the array can be partitioned into two subsequences satisfying the condition, and NO otherwise.\nEach character of the output may be printed in either uppercase or lowercase, i.e, YES, yes, YEs, and yEs will all be treated as equivalent.\nConstraints\n1\u2264T\u226410\n5\n2\u2264N\u226410\n5\n1\u2264A\ni\n\u226410\n9\nThe sum of\nN across all test cases won't exceed\n10\n6\n.\nSample 1:\nInput\nOutput\n4\n4\n1 1 2 2\n6\n1 2 4 6 8 10\n2\n3 5\n3\n1 3 5\nYES\nNO\nYES\nNO\nExplanation:\nTest case\n1: We have\nA=[\n1\n,1,\n2\n,2]. Let\nS\n1\nbe the underlined elements and\nS\n2\nbe the other ones.\nsum(S\n1\n)\u00d7sum(S\n2\n)=3\u00d73=9.\nTest case\n2: It can be proved that no partition of\nA into\nS\n1\n,S\n2\nsatisfies the condition.\nTest case\n4: Choose\nS\n1\n={3},S\n2\n={5}.\nTest case\n4: It can be proved that no partition of\nA into\nS\n1\n,S\n2\nsatisfies the condition.",
        "227": "Tanu and Head-bob\nRead problems statements in Mandarin Chinese and Russian.\nTanu has got interested in signs and gestures that we use for communication. One such gesture is the head-bob.\nWhen we want to signal \"Yes\" to someone, we move the head up-and-down. For \"No\", the head is moved left-and-right, rotating about the vertical axis.\nThere is a peculiar way of gesturing \"Yes\", commonly seen in India, by moving head sideways (rotating about the forward-back axis). This is called the Indian head-bob.\nTanu observed many people on the railways station, and made a list of gestures that they made. Usual \"Yes\" gesture is recorded as \"Y\", no as \"N\" and Indian \"Yes\" gesture as \"I\". (Assume no foreigner uses the Indian \"Yes\" gesture and vice-versa). Identify which of them were Indians, which were not Indian, and which one you cannot be sure about.\nInput\nFirst line contains T, number of people observed by Tanu.\nEach person is described in two lines. First line of the description contains a single integer N, the number of gestures recorded for this person. Next line contains a string of N characters, each character can be \"Y\", \"N\" or \"I\".\nOutput\nFor each person, print \"INDIAN\" if he\/she is from India, \"NOT INDIAN\" if not from India, and \"NOT SURE\" if the information is insufficient to make a decision.\nConstraints\nFor 30 points: 1 \u2264 T,N \u2264 100For 70 points: 1 \u2264 T,N \u2264 1000\nSample 1:\nInput\nOutput\n3\n5\nNNNYY\n6\nNNINNI\n4\nNNNN\nNOT INDIAN\nINDIAN\nNOT SURE",
        "228": "Pseudo Sorted Array\nAn array\nA of length\nN is said to be pseudo-sorted if it can be made non-decreasing after performing the following operation at most once.\nChoose an\ni such that\n1\u2264i\u2264N\u22121 and swap\nA\ni\nand\nA\ni+1\nGiven an array\nA, determine if it is pseudo-sorted or not.\nInput Format\nThe first line contains a single integer\nT - the number of test cases. Then the test cases follow.\nThe first line of each test case contains an integer\nN - the size of the array\nA.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\ndenoting the array\nA.\nOutput Format\nFor each testcase, output YES if the array\nA is pseudo-sorted, NO otherwise.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n1\u2264T\u22641000\n2\u2264N\u226410\n5\n1\u2264A\ni\n\u226410\n9\nSum of\nN over all test cases do not exceed\n2\u22c510\n5\nSample 1:\nInput\nOutput\n3\n5\n3 5 7 8 9\n4\n1 3 2 3\n3\n3 2 1\nYES\nYES\nNO\nExplanation:\nTest case 1: The array is already sorted in non-decreasing order.\nTest case 2: We can choose\ni=2 and swap\nA\n2\nand\nA\n3\n. The resulting array will be\n[1,2,3,3], which is sorted in non-decreasing order.\nTest case 3: It can be proven that the array cannot be sorted in non-decreasing order in at most one operation.",
        "229": "Prime Generator\nRam wants to generate some prime numbers for his cryptosystem. Help him please! Your task is to generate all prime numbers between two given numbers.\nWarning: large Input\/Output data, be careful with certain languages (though most should be OK if the algorithm is well designed)\nInput Format\nThe first line contains t, the number of test cases (less then or equal to 10).\nFollowed by t lines which contain two numbers m and n (1 <= m <= n <= 1000000000, n-m<=100000) separated by a space.\nOutput Format\nFor every test case print all prime numbers p such that m <= p <= n, one number per line. Separate the answers for each test case by an empty line.\nConstraints\n(1 <= m <= n <= 1000000000, n-m<=100000)\nSample 1:\nInput\nOutput\n2\n1 10\n3 5\n2\n3\n5\n7\n3\n5",
        "230": "Equalize AB\nYou are given two numbers\nA and\nB along with an integer\nX. In one operation you can do one of the following:\nSet\nA=A+X and\nB=B\u2212X\nSet\nA=A\u2212X and\nB=B+X\nDetermine if you can make\nA and\nB equal after applying the operation any number of times (possibly zero).\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two space-separated integers\nA,B and\nX \u2014 the parameters mentioned in the statement.\nOutput Format\nFor each test case, output YES if you can make\nA and\nB equal after applying the operation any number of times (possibly zero). Otherwise, output NO.\nYou can output each letter in any case i.e. YES, yes, yEs are all considered the same.\nConstraints\n1\u2264T\u22641000\n1\u2264A,B,X\u226410\n9\nSample 1:\nInput\nOutput\n4\n5 7 1\n3 4 2\n4 4 6\n2 5 3\nYES\nNO\nYES\nNO\nExplanation:\nTest Case 1: The initial values of\n(A,B) is\n(5,7). We can perform the following operation:\n(5,7)\nA=A+X,B=B\u2212X\n(6,6).\nTest Case 2: It can be proven that we can not make\nA equal to\nB using the given operations.\nTest Case 3:\nA and\nB are already equal.",
        "231": "Three Friends\n###Read problems statements Mandarin , Bengali , Hindi , Russian and Vietnamese as well.\nThere are three friends; let's call them A, B, C. They made the following statements:\nA: \"I have\nx Rupees more than B.\"\nB: \"I have\ny rupees more than C.\"\nC: \"I have\nz rupees more than A.\"\nYou do not know the exact values of\nx,y,z. Instead, you are given their absolute values, i.e.\nX=\u2223x\u2223,\nY=\u2223y\u2223 and\nZ=\u2223z\u2223. Note that\nx,\ny,\nz may be negative; \"having\n\u2212r rupees more\" is the same as \"having\nr rupees less\".\nFind out if there is some way to assign amounts of money to A, B, C such that all of their statements are true.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains three space-separated integers\nX,\nY and\nZ.\nOutput\nFor each test case, print a single line containing the string \"yes\" if the presented scenario is possible or \"no\" otherwise (without quotes).\nConstraints\n1\u2264T\u22641,000\n1\u2264X,Y,Z\u22641,000\nSubtasks\nSubtask #1 (30 points):\n1\u2264T\u226430\n1\u2264X,Y,Z\u22643\nSubtask #2 (70 points): original constraints\nSample 1:\nInput\nOutput\n2\n1 2 1\n1 1 1\nyes\nno\nExplanation:\nExample 1: One possible way to satisfy all conditions is: A has\n10 rupees, B has\n9 rupees and C has\n11 rupees. Therefore, we have\nx=1,\ny=\u22122,\nz=1.\nExample 2: There is no way for all conditions to be satisfied.",
        "232": "The Attack of Queen\nChef has started developing interest in playing chess, and was learning how the Queen moves.\nChef has an empty\nN\u00d7N chessboard. He places a Queen at\n(X,Y) and wonders - What are the number of cells that are under attack by the Queen?\nNotes:\nThe top-left cell is\n(1,1), the top-right cell is\n(1,N), the bottom-left cell is\n(N,1) and the bottom-right cell is\n(N,N).\nThe Queen can be moved any number of unoccupied cells in a straight line vertically, horizontally, or diagonally.\nThe cell on which the Queen is present, is not said to be under attack by the Queen.\nInput Format\nThe first line contains a single integer\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains three integers\nN,\nX and\nY, as described in the problem statement.\nOutput Format\nFor each test case, output in a single line, the total number of cells that are under attack by the Queen.\nConstraints\n1\u2264T\u226410\n4\n1\u2264N\u226410\n6\n1\u2264X,Y\u2264N\nSample 1:\nInput\nOutput\n5\n1 1 1\n3 2 2\n3 2 1\n2 2 2\n150 62 41\n0\n8\n6\n3\n527\nExplanation:\nTest case 1: The only cell on the board is\n(1,1). Since Queen stands on this cell, it is not under attack.\nTest case 2: The Queen can attack the following cells:\n{(1,1),(1,2),(1,3),(2,1),(2,3),(3,1),(3,2),(3,3)}.\nTest case 3: The Queen can attack the following cells:\n{(1,1),(1,2),(2,2),(2,3),(3,1),(3,2)}.\nTest case 4: The Queen can attack the following cells:\n{(1,1),(1,2),(2,1)}.",
        "233": "Covid and Theatre Tickets\nMr. Chef is the manager of the Code cinemas and after a long break, the theatres are now open to the public again. To compensate for the loss in revenue due to Covid-19, Mr. Chef wants to maximize the profits for every show from now on and at the same time follow the guidelines set the by government. The guidelines are:\nIf two people are seated in the same row, there must be at least one empty seat between them.\nIf two people are seated in different rows, there must be at least one completely empty row between them. That is, if there are people seated in rows\ni and\nj where\ni<j, there must be some row\nk such that\ni<k<j and nobody is seated in row\nk.\nGiven the information about the number of rows and the number of seats in each row, find the maximum number of tickets Mr. Chef can sell.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nEach test case consists of a single line of input containing two space-separated integers\nN,M \u2014 the number of rows and the number of seats in each row, respectively.\nOutput Format\nFor each test case, output a single line containing one integer \u2013 the maximum number of tickets Mr. Chef can sell.\nConstraints\n1\u2264T\u2264100\n1\u2264N,M\u2264100\nSample 1:\nInput\nOutput\n3\n1 5\n3 3\n4 4\n3\n4\n4\nExplanation:\nTest Case 1: There is only one row with five seats. Mr. Chef can sell a maximum of 3 tickets for seat numbers 1, 3 and 5.\nTest Case 2: There are three rows with three seats each. Mr. Chef can sell a maximum of 4 tickets, for seats at the start and end of row numbers 1 and 3.\nTest Case 3: There are four rows with four seats each. Mr. Chef can sell a maximum of 4 tickets, for example by choosing the seats at the start and end of row numbers 1 and 4.",
        "234": "Digit Sum Parities\nFor a positive integer\nM, MoEngage defines\ndigitSum(M) as the sum of digits of the number\nM (when written in decimal).\nFor example,\ndigitSum(1023)=1+0+2+3=6.\nGiven a positive integer\nN, find the smallest integer\nX strictly greater than\nN such that:\ndigitSum(N) and\ndigitSum(X) have different parity, i.e. one of them is odd and the other is even.\nInput Format\nThe first line contains an integer\nT, the number of test cases. The description of the\nT test cases follow.\nEach test case consists of a single line of input with a single integer, the number\nN.\nOutput Format\nFor each test case, print in a single line, an integer, the answer to the problem.\nConstraints\n1\u2264T\u22641000\n1\u2264N<10\n9\nSample 1:\nInput\nOutput\n3\n123\n19\n509\n124\n21\n511\nExplanation:\nTest Case\n1:\ndigitSum(123)=1+2+3=6 is even and\ndigitSum(124)=1+2+4=7 is odd, so the answer is\n124.\nTest Case\n2:\ndigitSum(19)=1+9=10 is even,\ndigitSum(20)=2+0=2 is also even, whereas\ndigitSum(21)=2+1=3 is odd. Hence, the answer is\n21.\nTest Case\n3:\ndigitSum(509)=5+0+9=14 is even,\ndigitSum(510)=5+1+0=6 is also even, whereas\ndigitSum(511)=5+1+1=7 is odd. Hence, the answer is\n511.",
        "235": "Magician versus Chef\n###Read problems statements Hindi ,Bengali , Mandarin chinese , Russian and Vietnamese as well.\nWhen Chef was visiting a fair in Byteland, he met a magician. The magician had\nN boxes (numbered\n1 through\nN) and a gold coin. He challenged Chef to play a game with him; if Chef won the game, he could have the coin, but if he lost, the magician would kidnap Chef.\nAt the beginning of the game, the magician places the gold coin into the\nX-th box. Then, he performs\nS swaps. To win, Chef needs to correctly identify the position of the coin after all swaps.\nIn each swap, the magician chooses two boxes\nA and\nB, moves the contents of box\nA (before the swap) to box\nB and the contents of box\nB (before the swap) to box\nA.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains three space-separated integers\nN,\nX and\nS.\nS lines follow. Each of these lines contains two space-separated integers\nA and\nB denoting a pair of swapped boxes.\nOutput\nFor each test case, print a single line containing one integer \u2014 the number of the box containing the gold coin after all swaps are performed.\nConstraints\n1\u2264T\u2264100\n2\u2264N\u226410\n5\n1\u2264S\u226410\n4\n1\u2264X,A,B\u2264N\nA\n\ue020\n=B\nthe sum of\nS for all test cases does not exceed\n2\u221710\n5\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n1\n5 2 4\n4 2\n3 4\n3 2\n1 2\n1\nExplanation:\nExample case 1:\nafter the first swap, the coin is in box\n4\nafter the second swap, the coin is in box\n3\nafter the third swap, the coin is in box\n2\nafter the fourth swap, the coin is in box\n1",
        "236": "Far Away\nChef has an array\nA of size\nN and an integer\nM, such that\n1\u2264A\ni\n\u2264M for every\n1\u2264i\u2264N.\nThe distance of an array\nB from array\nA is defined as:\nd(A,B)=\ni=1\n\u2211\nN\n\u2223A\ni\n\u2212B\ni\n\u2223\nChef wants an array\nB of size\nN, such that\n1\u2264B\ni\n\u2264M and the value\nd(A,B) is as large as possible, i.e, the distance of\nB from\nA is maximum.\nFind the maximum distance for any valid array\nB.\nNote:\n\u2223X\u2223 denotes the absolute value of an integer\nX. For example,\n\u2223\u22124\u2223=4 and\n\u22237\u2223=7.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains two space-separated integers\nN and\nM \u2014 the length of array\nA and the limit on the elements of\nA and\nB.\nThe second line contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n.\nOutput Format\nFor each test case, output on a new line the maximum distance of an array from\nA.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u22642\u22c510\n5\n1\u2264M\u226410\n9\n1\u2264A\ni\n\u2264M\nThe sum of\nN over all test cases won't exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n4\n2 6\n3 5\n4 1\n1 1 1 1\n5 7\n2 3 4 5 6\n7 24\n23 7 6 16 12 4 24\n7\n0\n21\n127\nExplanation:\nTest case\n1: The array having maximum distance from\nA is\nB=[6,1]. Thus the distance is\n\u22233\u22126\u2223+\u22235\u22121\u2223=3+4=7.\nTest case\n2: The only array possible is\nB=[1,1,1,1]. The distance of this array from\nA is\n0.\nTest case\n3: One of the possible arrays having maximum distance from\nA is\nB=[7,7,1,1,1]. Thus the distance is\n\u22232\u22127\u2223+\u22233\u22127\u2223+\u22234\u22121\u2223+\u22235\u22121\u2223+\u22236\u22121\u2223=5+4+3+4+5=21.",
        "237": "Group Assignment\nChef is hosting a party at his house and\nN people are invited to it. Everyone has arrived and they are eager to make a group and chit-chat.\nThe\ni\nth\nperson prefers to be in a group of exactly\nP\ni\npeople (including himself). A person who is not in a group of preferred size gets upset. Find whether Chef would be able to assign every person to a group such that everyone remains happy.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains an integer\nN \u2014 the number of people at the party.\nThe next line contains the array\nP \u2014 where\nP\ni\ndenotes the preferred group size for\ni\nth\nperson.\nOutput Format\nFor each test case, output YES, if Chef can assign every person to a group such that everyone remains happy. Otherwise output NO.\nThe output is case-insensitive, meaning that outputs such as yES, YeS, YES and yes mean the same.\nConstraints\n1\u2264T\u22641000\n2\u2264N\u226410\n5\n2\u2264P\ni\n\u2264N\nSum of\nN over all test cases does not exceed\n10\n5\n.\nSample 1:\nInput\nOutput\n4\n5\n2 3 2 3 3\n5\n5 5 5 5 5\n5\n3 2 2 3 2\n4\n4 4 4 3\nYES\nYES\nNO\nNO\nExplanation:\nTest case\n1:\nPerson\n1 and\n3 can make a group (As both want to be in a group of\n2).\nPerson\n2,\n4 and\n5 can make a group (As they all want to be in a group of\n3).\nSo, there is a possible arrangement that Chef can make so that all of them are happy.\nTest case\n2:\nAll of the\n5 people can make a group (As all want to be in a group of\n5).\nSo, there is a possible arrangement that Chef can make so that all of them are happy.\nTest case\n3: It can be shown that there is no possible arrangement that Chef can make so that all of them are happy.\nTest case\n4: It can be shown that there is no possible arrangement that Chef can make so that all of them are happy.",
        "238": "Uncle Johny\nRead problems statements in Mandarin Chinese and Russian.\nVlad enjoys listening to music. He lives in Sam's Town. A few days ago he had a birthday, so his parents gave him a gift: MP3-player! Vlad was the happiest man in the world! Now he can listen his favorite songs whenever he wants!\nVlad built up his own playlist. The playlist consists of N songs, each has a unique positive integer length. Vlad likes all the songs from his playlist, but there is a song, which he likes more than the others. It's named \"Uncle Johny\".\nAfter creation of the playlist, Vlad decided to sort the songs in increasing order of their lengths. For example, if the lengths of the songs in playlist was {1, 3, 5, 2, 4} after sorting it becomes {1, 2, 3, 4, 5}. Before the sorting, \"Uncle Johny\" was on K-th position (1-indexing is assumed for the playlist) in the playlist.\nVlad needs your help! He gives you all the information of his playlist. Your task is to find the position of \"Uncle Johny\" in the sorted playlist.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains one integer N denoting the number of songs in Vlad's playlist. The second line contains N space-separated integers A1, A2, ..., AN denoting the lenghts of Vlad's songs. The third line contains the only integer K - the position of \"Uncle Johny\" in the initial playlist.\n  Output\nFor each test case, output a single line containing the position of \"Uncle Johny\" in the sorted playlist.\n  Constraints\n1 \u2264 T \u2264 1000\n1 \u2264 K \u2264 N \u2264 100\n1 \u2264 Ai \u2264 109\n  Sample 1:\nInput\nOutput\n3\n4\n1 3 4 2\n2\n5\n1 2 3 9 4\n5\n5\n1 2 3 9 4 \n1\n3\n4\n1\nExplanation:\nIn the example test there are T=3 test cases.\nTest case 1\nIn the first test case N equals to 4, K equals to 2, A equals to {1, 3, 4, 2}. The answer is 3, because {1, 3, 4, 2} -> {1, 2, 3, 4}. A2 now is on the 3-rd position.\nTest case 2\nIn the second test case N equals to 5, K equals to 5, A equals to {1, 2, 3, 9, 4}. The answer is 4, because {1, 2, 3, 9, 4} -> {1, 2, 3, 4, 9}. A5 now is on the 4-th position.\nTest case 3\nIn the third test case N equals to 5, K equals to 1, A equals to {1, 2, 3, 9, 4}. The answer is 1, because {1, 2, 3, 9, 4} -> {1, 2, 3, 4, 9}. A1 stays on the 1-th position.\nNote\n\"Uncle Johny\" is a real song performed by The Killers.",
        "239": "That Is My Score!\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nYou are participating in a contest which has\n11 problems (numbered\n1 through\n11). The first eight problems (i.e. problems\n1,2,\u2026,8) are scorable, while the last three problems (\n9,\n10 and\n11) are non-scorable \u2015 this means that any submissions you make on any of these problems do not affect your total score.\nYour total score is the sum of your best scores for all scorable problems. That is, for each scorable problem, you look at the scores of all submissions you made on that problem and take the maximum of these scores (or\n0 if you didn't make any submissions on that problem); the total score is the sum of the maximum scores you took.\nYou know the results of all submissions you made. Calculate your total score.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN denoting the number of submissions you made.\nN lines follow. For each\ni (\n1\u2264i\u2264N), the\ni-th of these lines contains two space-separated integers\np\ni\nand\ns\ni\n, denoting that your\ni-th submission was on problem\np\ni\nand it received a score\ns\ni\n.\nOutput\nFor each test case, print a single line containing one integer \u2015 your total score.\nConstraints\n1\u2264T\u226410\n1\u2264N\u22641,000\n1\u2264p\ni\n\u226411 for each valid\ni\n0\u2264s\ni\n\u2264100 for each valid\ni\nSubtasks\nSubtask #1 (15 points): all submissions are on the same problem, i.e.\np\n1\n=p\n2\n=\u2026=p\nN\nSubtask #2 (15 points): there is at most one submission made on each problem, i.e.\np\ni\n\ue020\n=p\nj\nfor each valid\ni,j (\ni\n\ue020\n=j)\nSubtask #3 (70 points): original constraints\nSample 1:\nInput\nOutput\n2\n5\n2 45\n9 100\n8 0\n2 15\n8 90\n1\n11 1\n135\n0\nExplanation:\nExample case 1: The scorable problems with at least one submission are problems\n2 and\n8. For problem\n2, there are two submissions and the maximum score among them is\n45. For problem\n8, there are also two submissions and the maximum score is\n90. Hence, the total score is\n45+90=135.\nExample case 2: No scorable problem is attempted, so the total score is\n0.",
        "240": "Chef and Strings\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nHaving already mastered cooking, Chef has now decided to learn how to play the guitar. Often while trying to play a song, Chef has to skip several strings to reach the string he has to pluck. Eg. he may have to pluck the\n1\nst\nstring and then the\n6\nth\nstring. This is easy in guitars with only\n6 strings; However, Chef is playing a guitar with\n10\n6\nstrings. In order to simplify his task, Chef wants you to write a program that will tell him the total number of strings he has to skip while playing his favourite song.\nThis is how guitar strings are numbered (In ascending order from right to left). Eg. to switch from string\n1 to\n6, Chef would have to skip\n4 strings\n(2,3,4,5).\n###Input:\nFirst line will contain\nT, number of testcases. Then the testcases follow.\nThe first line of each test case contains\nN, the number of times Chef has to pluck a string\nThe second line of each test case contains\nN space separated integers -\nS\n1\n,\nS\n2\n, ...,\nS\nN\n, where\nS\ni\nis the number of the\ni\nth\nstring Chef has to pluck.\n###Output: For each testcase, output the total number of strings Chef has to skip over while playing his favourite song.\n###Constraints\n1\u2264T\u226410\n2\u2264N\u226410\n5\n1\u2264S\ni\n\u226410\n6\nFor each valid\ni,\nS\ni\n\ue020\n=S\ni+1\n###Subtasks\n30 points : for each valid\ni,\nS\ni\n<S\ni+1\n70 points : No additional constraints\nSample 1:\nInput\nOutput\n2\n6\n1 6 11 6 10 11\n4\n1 3 5 7\n15\n3\nExplanation:\nTest Case\n1\nChef skips\n4 strings\n(2,3,4,5) to move from\n1 to\n6\nChef skips\n4 strings\n(7,8,9,10) to move from\n6 to\n11\nChef skips\n4 strings\n(10,9,8,7) to move from\n11 to\n6\nChef skips\n3 strings\n(7,8,9) to move from\n6 to\n10\nChef skips\n0 strings to move from\n10 to\n11\nTherefore, the answer is\n4+4+4+3+0=15\nTest Case\n2\nChef skips\n1 string to move from\n1 to\n3\nChef skips\n1 string to move from\n3 to\n5\nChef skips\n1 string to move from\n5 to\n7\nTherefore, the answer is\n1+1+1=3",
        "241": "Bi_lindrome!\nYou are given a string\nS of length\nN.\nYour task is to delete a subsequence of maximum length from the string, such that, after concatenating the remaining parts of the string, it becomes a palindrome of length greater than\n1.\nIf this is possible, print the maximum length of the subsequence that can be deleted. Otherwise, print\n\u22121.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of\n2 lines of input:\nThe first line consists the a single integer\nN - the length of string\nS.\nThe second line contains string\nS, consisting of lowercase english alphabets.\nOutput Format\nFor each test case, if it is possible to delete a subsequence under the given conditions, print a single integer, denoting the maximum length of the subsequence that can be deleted. Otherwise, print\n\u22121.\nConstraints\n1\u2264T\u22642500\n3\u2264N\u2264100\nS consists of lowercase english alphabets.\nSample 1:\nInput\nOutput\n3\n6\nbabkhj\n3 \nabc \n4 \nqtoo\n4\n-1\n2\nExplanation:\nTest case\n1: Possible ways to delete a subsequence are:\nDelete subsequence khj to get palindrome bab.\nDelete subsequence akhj to get palindrome bb.\nThe subsequence having maximum length that can be deleted is akhj, having length\n4.\nTest case\n2: We cannot delete any subsequence under the given conditions.\nTest case\n3: We can delete the subsequence qt to obtain the string oo, which is a palindrome. This is the only subsequence that can be deleted and it has length\n2.",
        "242": "Remove Bad elements\nChef has an array\nA of length\nN.\nIn one operation, Chef can remove any one element from the array.\nDetermine the minimum number of operations required to make all the elements same.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains a single integer\nN \u2014the length of Array\nA.\nNext line contains\nN space-separated integers\nA\n1\n,A\n2\n,A\n3\n,\u2026,A\nN\n- denoting the array\nA.\nOutput Format\nFor each test case, output the minimum number of operations required to make all the elements same.\nConstraints\n1\u2264T\u22644000\n1\u2264N\u226410\n5\n1\u2264A\ni\n\u2264N\nSum of\nN over all test cases do not exceed\n3\u22c510\n5\nSample 1:\nInput\nOutput\n4\n3\n3 3 3\n6\n1 3 2 1 2 2\n4\n1 2 1 2\n5\n1 3 2 4 5\n0\n3\n2\n4\nExplanation:\nTest case\n1: All the elements are already same. Thus we need to perform zero operations.\nTest case\n2: We remove the elements\nA\n1\n,A\n2\n, and\nA\n4\nusing three operations. The array becomes\n[2,2,2] where all elements are same.\nTest case\n3: We remove the elements\nA\n1\nand\nA\n3\nusing two operations. The array becomes\n[2,2] where all elements are same.\nTest case\n4: We remove the elements\nA\n1\n,A\n2\n,A\n3\n, and\nA\n4\nusing four operations. The array becomes\n[5].",
        "243": "Make Money\nChef has\nN bags and an integer\nX. The\ni\nth\nbag contains\nA\ni\ncoins such that\nA\ni\n\u2264X.\nIn one operation, Chef can:\nPick any bag and increase its coins to\nX. Formally, if he choses the\ni\nth\nbag, he can set\nA\ni\n=X.\nGiven that the cost of performing each operation is\nC\n(C\u2264X) coins and Chef can perform the above operation any (possibly zero) number of times, determine the maximum value of\n(\u2211\ni=1\nN\nA\ni\n)\n\u2212 (total cost paid by Chef),\nif Chef performs the operations optimally.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains three space-separated integers\nN,\nX, and\nC \u2014 the number of bags, maximum limit of coins on each bag and cost of each operation respectively.\nThe next line contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n- denoting the number of coins in each bag.\nOutput Format\nFor each test case, output the maximum value of\n\u2211\ni=1\nN\nA\ni\n\u2212 total cost paid by Chef.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u2264100\n1\u2264C\u2264X\u2264100\n1\u2264A\ni\n\u2264X\nSample 1:\nInput\nOutput\n3\n5 5 2\n1 2 3 4 5\n3 4 4\n1 1 1\n5 3 2\n3 2 3 1 1\n18\n3\n10\nExplanation:\nTest case\n1: It is optimal for Chef to perform\n2 operations:\nOperation\n1: Choose\ni=1 and set\nA\n1\n=5 by using\n2 coins.\nOperation\n2: Choose\ni=2 and set\nA\n2\n=5 by using\n2 coins.\nThe final array is\nA=[5,5,3,4,5] and the total cost is\n2+2=4. Thus, the value of\n\u2211\ni=1\nN\nA\ni\n\u2212 total cost is\n(5+5+3+4+5)\u22124=22\u22124=18.\nTest case\n2: It is optimal for Chef to perform\n0 operations. Thus, the final array remains\n[1,1,1] and the cost is\n0. The value of\n\u2211\ni=1\nN\nA\ni\n\u2212 total cost is\n(1+1+1)\u22120=3.\nTest case\n3: It is optimal for Chef to perform\n0 operations. Thus, the final array remains\n[3,2,3,1,1] and the cost is\n0. The value of\n\u2211\ni=1\nN\nA\ni\n\u2212 total cost is\n(3+2+3+1+1)\u22120=10.",
        "244": "Football\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nA football competition has just finished. The players have been given points for scoring goals and points for committing fouls. Now, it is up to Alex to find the best player in the tournament. As a programmer, your job is to help Alex by telling him the highest number of points achieved by some player.\nYou are given two sequences\nA\n1\n,A\n2\n,\u2026,A\nN\nand\nB\n1\n,B\n2\n,\u2026,B\nN\n. For each valid\ni, player\ni scored\nA\ni\ngoals and committed\nB\ni\nfouls. For each goal, the player that scored it gets\n20 points, and for each foul,\n10 points are deducted from the player that committed it. However, if the resulting number of points of some player is negative, this player will be considered to have\n0 points instead.\nYou need to calculate the total number of points gained by each player and tell Alex the maximum of these values.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN.\nThe second line contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n.\nThe third line contains\nN space-separated integers\nB\n1\n,B\n2\n,\u2026,B\nN\n.\nOutput\nFor each test case, print a single line containing one integer \u2015 the maximum number of points.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u2264150\n0\u2264A\ni\n\u226450 for each valid\ni\n0\u2264B\ni\n\u226450 for each valid\ni\nSubtasks\nSubtask #1 (30 points):\n1\u2264N\u22642\nSubtask #2 (70 points): original constraints\nSample 1:\nInput\nOutput\n2\n3\n40 30 50\n2 4 20\n1\n0\n10\n800\n0\nExplanation:\nExample case 1: The first player gets\n800 points for scoring goals and has\n20 points deducted for fouls. Likewise, the second player gets\n560 points and the third player gets\n800 points. The third player is the one with the maximum number of points.",
        "245": "String Game\nAlice and Bob are playing a game. They have a common string\nS of length\nN. The players also have their individual strings\nA (belonging to Alice) and\nB (belonging to Bob) which are empty in the beginning. Game begins with Alice and both players take alternate turns.\nIn her\/his turn, the player picks a single character from string\nS, adds it to the end of their individual string and deletes the picked character from string\nS.\nThe game continues until string\nS is empty. Find whether there exists a sequence of moves such that the strings\nA and\nB are same at the end of the game.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains an integer\nN \u2014 the length of the string.\nThe next line contains the strings\nS consisting of lowercase english alphabets.\nOutput Format\nFor each test case, output on a new line, YES if there exists a sequence of moves such that the strings\nA and\nB are same at the end of the game, and NO otherwise.\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\nConstraints\n1\u2264T\u226410\n3\n1\u2264N\u226410\n5\nS consists of lowercase english alphabets\nThe sum of\nN over all test cases does not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n4\n4\nabab\n5\ncbcba\n4\nabcd\n6\npqprqr\nYES\nNO\nNO\nYES\nExplanation:\nTest case\n1: Consider the following sequence of moves:\nAlice picks the first character of string\nS and adds it to the end of string\nA. Thus,\nS becomes bab and\nA becomes a.\nBob picks the second character of string\nS and adds it to the end of string\nB. Thus, the strings are\nS= bb,\nA= a, and\nB= a .\nAlice picks the second character of string\nS and adds it to the end of string\nA. Thus, the strings are\nS= b,\nA= ab, and\nB= a .\nBob picks the first character of string\nS and adds it to the end of string\nB. Thus,\nS becomes empty,\nA= ab, and\nB= ab .\nWe can see that using this sequence of moves, the final strings\nA and\nB are equal.\nTest case\n2: There exists no sequence of moves such that the strings\nA and\nB become equal in the end.\nTest case\n3: There exists no sequence of moves such that the strings\nA and\nB become equal in the end.\nTest case\n4: Consider the following sequence of moves:\nAlice picks the first character of string\nS and adds it to the end of string\nA. Thus,\nS becomes qprqr and\nA becomes p.\nBob picks the second character of string\nS and adds it to the end of string\nB. Thus, the strings are\nS= qrqr,\nA= p, and\nB= p .\nAlice picks the second character of string\nS and adds it to the end of string\nA. Thus, the strings are\nS= qqr,\nA= pr, and\nB= p .\nBob picks the third character of string\nS and adds it to the end of string\nB. Thus,\nS becomes qq,\nA becomes pr, and\nB becomes pr.\nAlice picks the second character of string\nS and adds it to the end of string\nA. Thus, the strings are\nS= q,\nA= prq, and\nB= pr .\nBob picks the first character of string\nS and adds it to the end of string\nB. Thus,\nS becomes empty,\nA= prq, and\nB= prq .\nWe can see that using this sequence of moves, the final strings\nA and\nB are equal.",
        "246": "Chef and Glove\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\nWinter has finally come to Chefland, so Chef bought a glove for herself. Chef has a hand with N fingers (for the sake of simplicity, let us consider the thumb a finger too) numbered 1 through N and the glove has N sheaths numbered 1 through N. Exactly one finger has to be inserted into each sheath. You are given the lengths of Chef's fingers, as seen from left to right. You are also given the lengths of the sheaths of the glove, from left to right, as seen from the front.\nChef can wear the glove normally (the front side of the glove matching the front of Chef's hand), or she can flip the glove and then insert her hand in it. In the first case, the first finger will go into the first sheath, the second finger into the second one, and so on. However, when she flips the glove, her first finger will go into the N-th sheath, the second finger into the (N-1)-th and so on \u2014 the i-th finger will go into the N+1-i-th sheath for each valid i. Of course, for her to wear the glove comfortably, each finger's length should be less than or equal to the length of the sheath it goes into.\nFind out whether Chef can wear the glove by keeping its front side facing her, or if she can wear it by flipping it over and facing its back side. If she can only wear the glove in the former way, output \"front\"; if she can wear it only in the latter way, output \"back\". If both front and back orientations can be used, output \"both\", and if she can't wear it either way, output \"none\".\nInput\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N denoting the number of Chef's fingers.\nThe second line contains N space-separated integers L1, L2, ..., LN denoting the lengths of Chef's fingers.\nThe third line contains N space-separated integers G1, G2, ..., GN, denoting the lengths of sheaths of the glove.\nOutput\nFor each test case, print a single line containing one of the strings \"front\", \"back\", \"both\", or \"none\".\nConstraints\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 105\n1 \u2264 Li \u2264 109 for each valid i\n1 \u2264 Gi \u2264 109 for each valid i\nSubtasks\nSubtask #1 (30 points): 1 \u2264 N \u2264 102\nSubtask #2 (70 points): original constraints\nSample 1:\nInput\nOutput\n4\n3\n1 2 3\n2 3 4\n3\n1 2 1\n1 2 1\n3\n3 2 1\n1 2 3\n4\n1 3 2 4\n1 2 3 5\nfront\nboth\nback\nnone\nExplanation:\nExample case 1: The glove can be worn normally, with its front side facing Chef. The lengths of the glove sheaths are 2, 3, 4. The lengths of the fingers are 1, 2, 3. Each of the fingers will fit in the corresponding glove sheath, that is, 1 ? 2, 2 ? 3 and 3 ? 4.\nHowever, if Chef tries to wear the glove with its back facing her, then the lengths of the sheaths will be 4, 3, 2. The first two fingers, which have lengths 1 and 2, will fit into the corresponding sheaths, but the 3rd finger won't fit because its length is 3, and the length of the corresponding sheath is 2. Hence, this glove can be worn only in one way, and we output \"front\".",
        "247": "Laptop Recommendation\nChef wants to buy a new laptop. However, he is confused about which laptop to buy out of\n10 different laptops. He asks his\nN friends for their recommendation. The\ni\nth\nfriend recommends the Chef to buy the\nA\ni\nth\nlaptop\n(1\u2264A\ni\n\u226410).\nChef will buy the laptop which is recommended by maximum number of friends. Determine which laptop Chef buys.\nPrint CONFUSED if there are multiple laptops having maximum number of recommendations.\nInput Format\nThe first line contains a single integer\nT - the number of test cases. Then the test cases follow.\nThe first line of each test case contains an integer\nN - the number of Chef's friends.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\nwhere\nA\ni\ndenotes the recommendation of the\ni\nth\nfriend.\nOutput Format\nFor each test case, output in a single line, the laptop which has the maximum number of recommendations. Print CONFUSED if there are multiple laptops having maximum number of recommendations.\nYou may print each character of CONFUSED in uppercase or lowercase (for example, Confused, coNFused, CONFused will be considered identical).\nConstraints\n1\u2264T\u2264200\n1\u2264N\u22641000\n1\u2264A\ni\n\u226410\nSample 1:\nInput\nOutput\n4\n5\n4 4 4 2 1\n7\n1 2 3 4 5 6 6\n6\n2 2 3 3 10 8\n4\n7 7 8 8\n4\n6\nCONFUSED\nCONFUSED\nExplanation:\nTest case 1: Laptop\n4 has the maximum number of recommendations. Therefore, Chef will buy the\n4\nth\nlaptop.\nTest case 2: Laptop\n6 has the maximum number of recommendations. Therefore, Chef will buy the\n6\nth\nlaptop.\nTest case 3: Laptops\n2,\n3 have the maximum number of recommendations. Therefore, Chef will still be CONFUSED.\nTest case 4: Laptops\n7,\n8 have the maximum number of recommendations. Therefore, Chef will still be CONFUSED.",
        "248": "Playing with Strings\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nChef usually likes to play cricket, but now, he is bored of playing it too much, so he is trying new games with strings. Chef's friend Dustin gave him binary strings\nS and\nR, each with length\nN, and told him to make them identical. However, unlike Dustin, Chef does not have any superpower and Dustin lets Chef perform only operations of one type: choose any pair of integers\n(i,j) such that\n1\u2264i,j\u2264N and swap the\ni-th and\nj-th character of\nS. He may perform any number of operations (including zero).\nFor Chef, this is much harder than cricket and he is asking for your help. Tell him whether it is possible to change the string\nS to the target string\nR only using operations of the given type.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN.\nThe second line contains a binary string\nS.\nThe third line contains a binary string\nR.\nOutput\nFor each test case, print a single line containing the string \"YES\" if it is possible to change\nS to\nR or \"NO\" if it is impossible (without quotes).\nConstraints\n1\u2264T\u2264400\n1\u2264N\u2264100\n\u2223S\u2223=\u2223R\u2223=N\nS and\nR will consist of only '1' and '0'\nSample 1:\nInput\nOutput\n2\n5\n11000\n01001\n3\n110\n001\nYES\nNO\nExplanation:\nExample case 1: Chef can perform one operation with\n(i,j)=(1,5). Then,\nS will be \"01001\", which is equal to\nR.\nExample case 2: There is no sequence of operations which would make\nS equal to\nR.",
        "249": "N Queens Puzzle Solved !\nChef, being a Chess fan, was thrilled after he read the following news:\nMichael Simkin, a postdoctoral fellow at Harvard University\u2019s Center of Mathematical Sciences and Applications proved that for a large value of\nN\nN, there are approximately\n(0.143\u22c5N)\nN\nconfigurations in which\nN\nN queens can be placed on a\nN\nN\u00d7N chessboard so that none attack each other.\nAlthough the formula is valid for large\nN, Chef is interested in finding the value of function\nf(N) =\n(0.143\u22c5N)\nN\nfor a given small value of\nN. Since Chef is busy understanding the proof of the formula, please help him calculate this value.\nPrint the answer rounded to the nearest integer. That is, if the actual value of\nf(N) is\nx,\nPrint\n\u230ax\u230b if\nx\u2212\u230ax\u230b<0.5\nOtherwise, print\n\u230ax\u230b+1\nwhere\n\u230ax\u230b denotes the floor of\nx.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nEach test case consists of a single line of input containing one integer\nN.\nOutput Format\nFor each test case, output in a single line the value of\nf(N) rounded to the nearest integer.\nConstraints\n1\u2264T\u226412\n4\u2264N\u226415\nSubtasks\nSubtask #1 (100 points): Original constraints\nSample 1:\nInput\nOutput\n2\n4\n10\n0\n36\nExplanation:\nTest case\n1:\nf(N)=(0.143\u22c54)\n4\n=0.107, which when rounded to nearest integer gives\n0.\nTest case\n2:\nf(N)=(0.143\u22c510)\n10\n=35.7569, which when rounded to nearest integer gives\n36.",
        "250": "Chef and Steps\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nIn order to establish dominance amongst his friends, Chef has decided that he will only walk in large steps of length exactly\nK feet. However, this has presented many problems in Chef\u2019s life because there are certain distances that he cannot traverse. Eg. If his step length is\n5 feet, he cannot travel a distance of\n12 feet. Chef has a strict travel plan that he follows on most days, but now he is worried that some of those distances may become impossible to travel. Given\nN distances, tell Chef which ones he cannot travel.\nInput:\nThe first line will contain a single integer\nT, the number of test cases.\nThe first line of each test case will contain two space separated integers -\nN, the number of distances, and\nK, Chef\u2019s step length.\nThe second line of each test case will contain\nN space separated integers, the\ni\nth\nof which represents\nD\ni\n, the distance of the\ni\nth\npath.\nOutput:\nFor each testcase, output a string consisting of\nN characters. The\ni\nth\ncharacter should be\n1 if the distance is traversable, and\n0 if not.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u22641000\n1\u2264K\u226410\n9\n1\u2264D\ni\n\u226410\n9\nSubtasks\n100 points : No additional constraints.\nSample 1:\nInput\nOutput\n1\n5 3\n12 13 18 20 27216\n10101\nExplanation:\nThe first distance can be traversed in\n4 steps.\nThe second distance cannot be traversed.\nThe third distance can be traversed in\n6 steps.\nThe fourth distance cannot be traversed.\nThe fifth distance can be traversed in\n9072 steps.",
        "251": "Sort the String\nYou have a binary string\nS of length\nN. In one operation you can select a substring of\nS and reverse it. For example, on reversing the substring\nS[2,4] for\nS=11000, we change\n11000\u219210010.\nFind the minimum number of operations required to sort this binary string.\nIt can be proven that the string can always be sorted using the above operation finite number of times.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of\n2 lines of input.\nThe first line of each test case contains a single integer\nN \u2014 the length of the binary string.\nThe second line of each test case contains a binary string\nS of length\nN.\nOutput Format\nFor each test case, output on a new line \u2014 the minimum number of operations required to sort the binary string.\nConstraints\n1\u2264T\u22642\u22c510\n5\n1\u2264N\u22642\u22c510\n5\nSum of\nN over all test cases does not exceed\n10\n6\n.\nString\nS consists of only '\n0's and '\n1's.\nSample 1:\nInput\nOutput\n4\n3\n000\n4\n1001\n4\n1010\n6\n010101\n0\n1\n2\n2\nExplanation:\nTest case\n1: The string is already sorted, hence, zero operations are required to sort it.\nTest case\n2: We can sort the string in the following way:\n1001\n\u2192\n0011.\nTest case\n3: We can sort the string in the following way:\n1010\n\u2192\n1100\n\u2192\n0011.\nIt can be proven that this string cannot be sorted in less than\n2 operations.\nTest case\n4: We can sort the string in the following way:\n010101\n\u2192\n001011\n\u2192\n000111.\nIt can be proven that this string cannot be sorted in less than\n2 operations.",
        "252": "Discrepancies in the Voters List\nAs you might remember, the collector of Siruseri had ordered a complete revision of the Voters List. He knew that constructing the list of voters is a difficult task, prone to errors. Some voters may have been away on vacation, others may have moved during the enrollment and so on.\nTo be as accurate as possible, he entrusted the task to three different officials. Each of them was to independently record the list of voters and send it to the collector. In Siruseri, every one has a ID number and the list would only list the ID numbers of the voters and not their names. The officials were expected to arrange the ID numbers in ascending order in their lists. Voter ID numbers are unique and not duplicated in any lists.\nOn receiving the lists, the Collector realised that there were discrepancies - the three lists were not identical. He decided to go with the majority. That is, he decided to construct the final list including only those ID numbers that appeared in at least 2 out of the 3 lists. For example if the three lists were\n23  30  42  57  90\n21  23  35  57  90  92\n21  23  30  57  90 \nthen the final list compiled by the collector would be:\n21  23  30  57  90\nThe ID numbers 35, 42 and 92 which appeared in only one list each do not figure in the final list.\nYour task is to help the collector by writing a program that produces the final list from the three given lists.\nInput format\nThe first line of the input contains 3 integers N1, N2 and N3. N1 is the number of voters in the first list, N2 is the number of voters in the second list and N3 is the number of voters in the third list. The next N1 lines (lines 2,...,N1+1) contain one positive integer each and describe the first list in ascending order. The following\nN2 lines (lines N1+2,...,N1+N2+1) describe the second list in ascending order and the final N3 lines (lines\nN1+N2+2,...,N1+N2+N3+1) describe the third list in ascending order.\nOutput format\nThe first line of the output should contain a single integer M indicating the number voters in the final list. The next M lines (lines 2,...,M+1) should contain one positive integer each, describing the list of voters in the final list, in ascending order.\nTest data\nYou may assume that 1 \u2264 N1,N2,N3 \u2264 50000.\nSample 1:\nInput\nOutput\n5 6 5\n23\n30\n42\n57\n90\n21 \n23 \n35 \n57 \n90 \n92 \n21 \n23 \n30 \n57 \n90\n5\n21 \n23 \n30 \n57 \n90",
        "253": "Alternating String\nA binary string is called alternating if no two adjacent characters of the string are equal. Formally, a binary string\nT of length\nM is called alternating if\nT\ni\n\ue020\n=T\ni+1\nfor each\n1\u2264i<M.\nFor example, 0, 1, 01, 10, 101, 010, 1010 are alternating strings while 11, 001, 1110 are not.\nYou are given a binary string\nS of length\nN. You would like to rearrange the characters of\nS such that the length of the longest alternating substring of\nS is maximum. Find this maximum value.\nA binary string is a string that consists of characters 0 and 1. A string\na is a substring of a string\nb if\na can be obtained from\nb by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\nInput Format\nThe first line of input contains an integer\nT, denoting the number of test cases. The\nT test cases then follow:\nThe first line of each test case contains an integer\nN.\nThe second line of each test case contains the binary string\nS.\nOutput Format\nFor each test case, output the maximum possible length of the longest alternating substring of\nS after rearrangement.\nConstraints\n1\u2264T\u226410\n4\n1\u2264N\u226410\n5\nS contains only the characters 0 and 1.\nSum of\nN over all test cases does not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n4\n3\n110\n4\n1010\n4\n0000\n7\n1101101\n3\n4\n1\n5\nExplanation:\nTest case\n1: Swapping the second and third characters makes\nS=101. Hence the length of the longest alternating substring is\n3 (choosing the entire string as a substring).\nTest case\n2: The given string\nS=1010 is an alternating string of length\n4.\nTest case\n3: The length of the longest alternating substring is\n1 for any rearrangement of\nS=0000.\nTest case\n4: One possible rearrangement of\nS is\n1\n10101\n1, which has an alternating substring of length\n5 (the substring starting at index\n2 and ending at index\n6).",
        "254": "Lazy Jem\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nJem is famous for his laziness at school. He always leaves things to last minute. Now Jem has N problems in the assignment of \"Advanced topics in algorithm\" class to solved. The assignment is due tomorrow and as you may guess he hasn't touch any of the problems. Fortunately he got a plan as always.\nThe first step will be buying a pack of Red Bull and then to work as hard as he can. Here is how he is going to spend the remaining time:\nJem will not take a break until he finishes at least half of the remaining problems. Formally, if N is even then he will take he first break after finishing N \/ 2 problems. If N is odd then the break will be after he done (N + 1) \/ 2 problems. Each of his break will last for B minutes. Initially, he takes M minutes in solving a problem, after each break he will take twice more time in solving a problem, i.e. 2 * M minutes per problem after the first break.\nJem will start working soon and ask you to help him calculate how much time it will take until he finish the last problem!\nInput\nThe first line contains a single integer T represents the number of test cases in the input.\nEach line in the next T line contains three integers N, B and M represents a test case.\nOutput\nFor each test case output a single line containing an integer represent how much time Jem will need (in minutes).\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 N, B, M \u2264 108\nSample 1:\nInput\nOutput\n2\n9 1 2\n123456 123456 123456\n45\n131351258112\nExplanation:\nIn the first test case, Jem will proceed as below:\nInitially, Jem has 9 problems to solve. since it is an odd number, Jem will finish the first (9 + 1) \/ 2 = 5 problems with speed of 2 minutes\/problem.\nAfter that, Jem takes 1 minute break.\nNow he has 4 problems to solve, which is an even number, so Jem will solve the next 4 \/ 2 = 2 problems. his speed after the first break has now became 4 minutes\/problem.\nAgain, he takes a 1 minute break.\nhe has now 2 problems left so he do one more problem in 8 minutes.\nHe takes 1 minute break.\nhe solves the last problem in 16 minutes.\nSo, Jem will need time = 5 \u00d7 2 + 1 + 2 \u00d7 4 + 1 + 8 + 1 + 16 = 45",
        "255": "Game of Pooks\nWe have found a new chess character \u2014 pook. It has the qualities of both a rook and a pawn. Specifically, treating the chessboard to be an\nN\u00d7N grid where\n(i,j) denotes the intersection of the\ni-th row and the\nj-th column, a pook placed at square\n(x,y) threatens the following squares:\n(i,y) for every\n1\u2264i\u2264N\n(x,i) for every\n1\u2264i\u2264N\n(x+1,y\u22121), if\nx<N and\ny\u22652\n(x+1,y+1), if\nx<N and\ny<N\nFind the maximum number of pooks that can be placed on an empty\nN\u00d7N chessboard such that none of them threaten each other.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases. Then the test cases follow.\nEach test case consists of a single line of input, containing a single integer\nN.\nOutput Format\nFor each test case, output in a single line the maximum number of pooks that can be placed on the chessboard such that they don't threaten each other.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n9\nSample 1:\nInput\nOutput\n3\n1\n2\n3\n1\n1\n2\nExplanation:\nTest case\n1: There is a single square, so we have a single pook.\nTest case\n2: We can only place one pook. No matter where the first is placed, placing a second will lead to one of the two being threatened.\nTest case\n3: Placing\n2 pooks on a\n3\u00d73 grid is easy \u2014 for example, place one at\n(1,2) and another at\n(3,3). It can be shown that placing three is not possible.",
        "256": "Chef and Proportion\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef recently learned about ratios and proportions. He wrote some positive integers a, b, c, d on a paper. Chef wants to know whether he can shuffle these numbers so as to make some proportion? Formally, four numbers x, y, z, w are said to make a proportion if ratio of x : y is same as that of z : w.\nInput\nOnly line of the input contains four space separated positive integers - a, b, c, d.\nOutput\nPrint \"Possible\" if it is possible to shuffle a, b, c, d to make proportion, otherwise \"Impossible\" (without quotes).\nConstraints\n1 \u2264 a, b, c, d \u2264 1000\nSample 1:\nInput\nOutput\n1 2 4 2\nPossible\nExplanation:\nBy swapping 4 and the second 2, we get 1 2 2 4. Note that 1 2 2 4 make proportion as 1 : 2 = 2 : 4. Hence answer is \"Possible\"",
        "257": "Stick Break\nChef has a stick of length\nL. Chef wants to break the stick into\nK parts such that each part has a non-zero length.\nLet the lengths of the\nK parts be\nA\n1\n,A\n2\n,\u2026,A\nK\n(Note that\nA\n1\n+A\n2\n+\u2026+A\nK\n=L and\nA\ni\nis a positive integer for all\ni). Chef wants to minimize the value of\ni=1\n\u2211\nK\u22121\n\u2223A\ni+1\n\u2212A\ni\n\u2223. Can you help Chef? (Here\n\u2223x\u2223 denotes the absolute value of\nx)\nUnder the given constraints it will always be possible to break the stick into\nK parts of non-zero lengths.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two space-separated integers\nL and\nK \u2014 the initial length of the stick and the number of parts Chef wants to break the stick into.\nOutput Format\nFor each test case, output the minimum value of\ni=1\n\u2211\nK\u22121\n\u2223A\ni+1\n\u2212A\ni\n\u2223.\nConstraints\n1\u2264T\u226410\n4\n2\u2264K\u2264L\u226410\n9\nSample 1:\nInput\nOutput\n2\n4 3\n2 2\n1\n0\nExplanation:\nTest Case 1: It is optimal to break the stick of length\n4 into\n3 parts in the following manner:\n[2,1,1]. The value of\ni=1\n\u2211\nK\u22121\n\u2223A\ni+1\n\u2212A\ni\n\u2223=\u22231\u22122\u2223+\u22231\u22121\u2223=1.\nTest Case 2: It is optimal to break the stick of length\n2 into\n2 parts in the following manner:\n[1,1]. The value of\ni=1\n\u2211\nK\u22121\n\u2223A\ni+1\n\u2212A\ni\n\u2223=\u22231\u22121\u2223=0.",
        "258": "Processing a string\nGiven an alphanumeric string made up of digits and lower case Latin characters only, find the sum of all the digit characters in the string.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. Then T test cases follow.\nEach test case is described with a single line containing a string S, the alphanumeric string.\nOutput\nFor each test case, output a single line containing the sum of all the digit characters in that string.\nConstraints\n1 \u2264 T \u2264 1000\n1 \u2264 |S| \u2264 1000, where |S| is the length of the string S.\nSample 1:\nInput\nOutput\n1\nab1231da\n7\nExplanation:\nThe digits in this string are 1, 2, 3 and 1. Hence, the sum of all of them is 7.",
        "259": "Chef and Card Game\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef is playing a card game with his friend Morty Smith.\nThe rules of the game are as follows:\nThere are two piles of cards, pile\nA and pile\nB, each with\nN cards in it. Pile\nA belongs to Chef and pile\nB belongs to Morty.\nEach card has one positive integer on it\nThe \u2018power\u2019 of a card is defined as the sum of digits of the integer on that card\nThe game consists of\nN rounds\nIn each round, both players simultaneously draw one card each from the top of their piles and the player who draws the card with higher power wins this round and gets a point. If the powers of both players' cards are equal then they get\n1 point each.\nThe winner of the game is the player who has more points at the end of\nN rounds. If both players have equal number of points then the game ends in a draw.\nThe game is now over and Chef has told Morty to find the winner. Unfortunately, this task is too complex for him. Help Morty find the winner.\nInput:\nFirst line will contain\nT, number of testcases.\nThe first line of each test case will contain\nN, the number of rounds played.\nThe\ni\nth\nof the next\nN lines of each test case will contain\nA\ni\nand\nB\ni\n, the number on the card drawn by Chef and Morty respectively in round\ni.\nOutput:\nFor each test case, output two space separated integers on a new line:\nOutput\n0 if Chef wins,\n1 if Morty wins,\n2 if it is a draw,\nfollowed by the number of points the winner had.\n(If it is a draw then output either player\u2019s points).\nConstraints\n1\u2264T\u22641000\n1\u2264N\u2264100\n1\u2264A\ni\n,B\ni\n\u226410\n9\nSubtasks\n100 points : No additional constraints\nSample 1:\nInput\nOutput\n2\n3\n10 4\n8 12\n7 6\n2\n5 10\n3 4\n0 2\n2 1\nExplanation:\nTest Case\n1:\nRound\n1:\nChef\u2019s card has power\n1+0 =\n1,\nMorty\u2019s card has power\n4.\nTherefore, Morty wins the round.\nRound\n2:\nChef\u2019s card has power\n8,\nMorty\u2019s card has power\n1+2 =\n3.\nTherefore, Chef wins the round.\nRound\n3:\nChef\u2019s card has power\n7,\nMorty\u2019s card has power\n6.\nTherefore, Chef wins the round.\nTherefore, Chef wins the game with\n2 points (Morty has\n1 point).\nTest Case\n2:\nRound\n1:\nChef\u2019s card has power\n5,\nMorty\u2019s card has power\n1+0=1.\nTherefore, Chef wins the round.\nRound\n2:\nChef\u2019s card has power\n3,\nMorty\u2019s card has power\n4.\nTherefore, Morty wins the round.\nTherefore, the game ends in a draw and both players have\n1 point each.",
        "260": "Pet Store\nAlice and Bob went to a pet store. There are\nN animals in the store where the\ni\nth\nanimal is of type\nA\ni\n.\nAlice decides to buy some of these\nN animals. Bob decides that he will buy all the animals left in the store after Alice has made the purchase.\nFind out whether it is possible that Alice and Bob end up with exactly same multiset of animals.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains an integer\nN \u2014 the number of animals in the store.\nThe next line contains\nN space separated integers, denoting the type of each animal.\nOutput Format\nFor each test case, output on a new line, YES, if it is possible that Alice and Bob end up with exactly same multiset of animals and NO otherwise.\nYou may print each character in uppercase or lowercase. For example, the strings YES, yes, Yes, and yES are considered identical.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u226410\n5\n1\u2264A\ni\n\u2264100\nThe sum of\nN over all test cases won't exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n4\n3\n4 4 4\n4\n2 3 3 2\n4\n1 2 2 3\n6\n5 5 1 5 1 5\nNO\nYES\nNO\nYES\nExplanation:\nTest case\n1: There are\n4 possible cases:\nAlice does not buy anything: Bob will buy all the animals and will have\n3 animals of type\n4.\nAlice buys\n1 animal of type\n4: Bob will buy the remaining two animals of type\n4.\nAlice buys\n2 animals of type\n4: Bob will buy the remaining one animal of type\n4.\nAlice buys all\n3 animals of type\n4: Bob will not buy anything.\nIn no case, both Alice and Bob can have the exactly same multiset of pets.\nTest case\n2: If Alice buys animals\n1 and\n2, having types\n2 and\n3 respectively, Bob will buy animals\n3 and\n4, having types\n3 and\n2 respectively. Thus, both Alice and Bob have\n1 animal of type\n2 and\n1 animal of type\n3.\nTest case\n3: It can be proven that Alice and Bob cannot have the same multiset of pets in any case.\nTest case\n4: If Alice buys animals\n1,2, and\n5, having types\n5,5, and\n1 respectively, Bob will buy animals\n3,4, and\n6, having types\n1,5, and\n5 respectively. Thus, both Alice and Bob have\n1 animal of type\n1 and\n2 animals of type\n5.",
        "261": "Mathison and pangrams\nRead problems statements in mandarin chinese, russian and vietnamese as well.\nMathison recently inherited an ancient papyrus that contained some text. Unfortunately, the text was not a pangram. Now, Mathison has a particular liking for holoalphabetic strings and the text bothers him. The good news is that Mathison can buy letters from the local store in order to turn his text into a pangram.\nHowever, each letter has a price and Mathison is not very rich. Can you help Mathison find the cheapest way to obtain a pangram?\nInput\nThe first line of the input file will contain one integer, T, representing the number of tests.\nEach test will be formed from two lines. The first one contains 26 space-separated integers, representing the prices of all letters. The second will contain Mathison's initial text (a string of N lowercase letters).\nOutput\nThe output file will contain T lines, one for each test. Each line will contain the answer for the corresponding test.\nConstraints and notes\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 50,000\nAll prices are natural numbers between 1 and 1,000,000 (i.e. 106).\nA pangram is a string that contains every letter of the Latin alphabet at least once.\nAll purchased letters are added to the end of the string.\nSubtaks\nSubtask #1 (30 points):\nN = 1\nSubtask #2 (70 points):\nOriginal constraints\nSample 1:\nInput\nOutput\n2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\nabcdefghijklmopqrstuvwz\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\nthequickbrownfoxjumpsoverthelazydog\n63\n0\nExplanation:\nFirst test\nThere are three letters missing from the original string: n (price 14), x (price 24), and y (price 25).\nTherefore the answer is 14 + 24 + 25 = 63.\n\nSecond test\nNo letter is missing so there is no point in buying something. The answer is 0.",
        "262": "Valid Minimum\nThere are\n3 hidden numbers\nA,B,C.\nYou somehow found out the values of\nmin(A,B),min(B,C), and\nmin(C,A).\nDetermine whether there exists any tuple\n(A,B,C) that satisfies the given values of\nmin(A,B),min(B,C),min(C,A).\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case contains\n3 space-separated integers denoting the values of\nmin(A,B),min(B,C), and\nmin(C,A).\nOutput Format\nFor each test case, output YES if there exists any valid tuple\n(A,B,C), and NO otherwise.\nYou can print each letter of the output in any case. For example YES, yes, yEs will all be considered equivalent.\nConstraints\n1\u2264T\u22641000\n1\u2264min(A,B),min(B,C),min(C,A)\u226410\nSample 1:\nInput\nOutput\n3\n5 5 5\n2 3 4\n2 2 4\nYES\nNO\nYES\nExplanation:\nTest case\n1: One valid tuple\n(A,B,C) is\n(5,5,5).\nTest case\n2: It can be shown that there is no valid tuple\n(A,B,C).\nTest case\n3: One valid tuple\n(A,B,C) is\n(4,2,5).",
        "263": "Easy Math\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef is attending math classes. On each day, the teacher gives him homework. Yesterday, the teacher gave Chef a sequence of positive integers and asked him to find the maximum product of two different elements of this sequence. This homework was easy for Chef, since he knew that he should select the biggest two numbers.\nHowever, today, the homework is a little bit different. Again, Chef has a sequence of positive integers\nA\n1\n,A\n2\n,\u2026,A\nN\n, but he should find two different elements of this sequence such that the sum of digits (in base\n10) of their product is maximum possible.\nChef thought, mistakenly, that he can still select the two largest elements and compute the sum of digits of their product. Show him that he is wrong by finding the correct answer \u2015 the maximum possible sum of digits of a product of two different elements of the sequence\nA.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of the input contains a single integer\nN.\nThe second line contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n.\nOutput\nFor each test case, print a single line containing one integer \u2015 the maximum sum of digits.\nConstraints\n1\u2264T\u2264100\n2\u2264N\u2264100\n1\u2264A\ni\n\u226410\n4\nfor each valid\ni\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n3\n2\n2 8\n3 \n8 2 8\n3\n9 10 11\n7\n10\n18\nExplanation:\nExample case 1: The only two numbers Chef can choose are\n2 and\n8. Their product is\n16 and the sum of digits of\n16 is\n7.\nExample case 2: Chef can choose\n8 and\n8; their product is\n64. Note that it is allowed to choose two different elements with the same value.\nExample case 3: Chef can choose\n9 and\n11. Their product is\n99 and the sum of its digits is\n18. Note that choosing\n10 and\n11 will result in a larger product (\n110), but the sum of its digits is just\n2.",
        "264": "Fit in Data Type\nChef wants to store some important numerical data on his personal computer. He is using a new data type that can store values only from\n0 till\nN both inclusive. If this data type receives a value greater than\nN then it is cyclically converted to fit into the range\n0 to\nN. For example:\nValue\nN+1 will be stored as\n0.\nValue\nN+2 will be stored as\n1.\nand so on...\nGiven\nX, the value chef wants to store in this new data type. Determine what will be the actual value in memory after storing\nX.\nInput Format\nFirst line will contain\nT, number of testcases. Then the testcases follow.\nEach testcase contains a single line of input, two space separated integers\nN,X - the maximum value a data type can store and the value Chef wants to store in the data type respectively.\nOutput Format\nFor each testcase, output in a single line the value which will be actually stored in memory.\nConstraints\n1\u2264T\u22643000\n1\u2264N\u226450\n0\u2264X\u226450\nSample 1:\nInput\nOutput\n5\n15 0\n15 10\n11 12\n27 37\n50 49\n0\n10\n0\n9\n49\nExplanation:\nTest Case\n1: The data type can store values from\n0 to\n15. If we try to put\n0 in this data type, then the stored value will be the same, that is\n0.\nTest Case\n2: The data type can store values from\n0 to\n15. If we try to put\n10 in this data type, then the stored value will be the same, that is\n10.\nTest Case\n3: The data type can store values from\n0 to\n11. If we try to put\n12 in this data type, then the stored value will cyclically come back to\n0. Hence the output is\n0.\nTest Case\n4: The data type can store values from\n0 to\n27. If we try to put\n37 in this data type, then the stored value will cyclically convert to\n9. Hence the output is\n9.",
        "265": "Coin Flip\nLittle Elephant was fond of inventing new games. After a lot of research, Little Elephant came to know that most of the animals in the forest were showing less interest to play the multi-player games. Little Elephant had started to invent single player games, and succeeded in inventing the new single player game named COIN FLIP.\nIn this game the player will use\nN coins numbered from\n1 to\nN, and all the coins will be facing in \"Same direction\" (Either Head or Tail), which will be decided by the player before starting of the game.\nThe player needs to play\nN rounds. In the\nk-th round the player will flip the face of the all coins whose number is less than or equal to\nk. That is, the face of coin\ni will be reversed, from Head to Tail, or, from Tail to Head, for\ni\u2264k.\nElephant needs to guess the total number of coins showing a particular face after playing\nN rounds. Elephant really becomes quite fond of this game COIN FLIP so Elephant plays\nG times. Please help the Elephant to find out the answer.\nInput:\nThe first line of input contains an integer\nT, denoting the number of test cases. Then\nT test cases follow.\nThe first line of each test contains an integer\nG, denoting the number of games played by Elephant. Each of the following\nG lines denotes a single game, and contains\n3 space-separated integers\nI,\nN,\nQ, where\nI denotes the initial state of the coins,\nN denotes the number of coins and rounds, and\nQ, which is either\n1, or\n2 as explained below.\nHere\nI=1 means all coins are showing Head in the start of the game, and\nI=2 means all coins are showing Tail in the start of the game.\nQ=1 means Elephant needs to guess the total number of coins showing Head in the end of the game, and\nQ=2 means Elephant needs to guess the total number of coins showing Tail in the end of the game.\nOutput:\nFor each game, output one integer denoting the total number of coins showing the particular face in the end of the game.\nConstraints:\n1\u2264T\u226410\n1\u2264G\u22642000\n1\u2264N\u226410\n1\u2264I\u22642\n1\u2264Q\u22642\nSample 1:\nInput\nOutput\n1\n2\n1 5 1\n1 5 2\n2\n3\nExplanation:\nIn the 1st game in Example,\nI=1, so initial arrangement of coins are H H H H H, and now Elephant will play 5 rounds and coin faces will be changed as follows< After the 1st Round: T H H H H After the 2nd Round: H T H H H After the 3rd Round: T H T H H After the 4th Round: H T H T H After the 5th Round: T H T H T Finally Q=1, so we need to find the total number of coins showing Head, which is 2\nIn the 2nd game in Example: This is similar to the 1st game, except Elephant needs to find the total number of coins showing Tail. So the Answer is\n3. (Please see the final state of the coins in the\n1\nst\ngame)",
        "266": "Ciel and A-B Problem\nIn Ciel's restaurant, a waiter is training. Since the waiter isn't good at arithmetic, sometimes he gives guests wrong change. Ciel gives him a simple problem. What is A-B (A minus B) ?\nSurprisingly, his answer is wrong. To be more precise, his answer has exactly one wrong digit. Can you imagine this? Can you make the same mistake in this problem?\nInput\nAn input contains 2 integers A and B.\nOutput\nPrint a wrong answer of A-B. Your answer must be a positive integer containing the same number of digits as the correct answer, and exactly one digit must differ from the correct answer. Leading zeros are not allowed. If there are multiple answers satisfying the above conditions, anyone will do.\nConstraints\n1 \u2264 B < A \u2264 10000\nSample 1:\nInput\nOutput\n5858 1234\n1624\nExplanation:\nThe correct answer of 5858-1234 is 4624. So, for instance, 2624, 4324, 4623, 4604 and 4629 will be accepted, but 0624, 624, 5858, 4624 and 04624 will be rejected.\nNotes\nThe problem setter is also not good at arithmetic.",
        "267": "Average of Three\nIt is Chef's birthday. You know that Chef's favourite number is\nX. You also know that Chef loves averages. Therefore you decide it's best to gift Chef\n3 integers\nA\n1\n,A\n2\n,A\n3\n, such that:\nThe mean of\nA\n1\n,A\n2\nand\nA\n3\nis\nX.\n1\u2264A\n1\n,A\n2\n,A\n3\n\u22641000.\nA\n1\n,A\n2\nand\nA\n3\nare distinct.\nOutput any suitable\nA\n1\n,A\n2\nand\nA\n3\nwhich you could gift to Chef.\nAs a reminder, the mean of three numbers\nP,Q,R is defined as:\nmean(P,Q,R)=\n3\nP+Q+R\n.\nFor example,\nmean(2,3,5)=\n3\n2+3+5\n=\n3\n10\n=3.33\n3\n\u02c9\n,\nmean(2,2,5)=\n3\n2+2+5\n=\n3\n9\n=3.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains one integer\nX \u2014 Chef's favourite number.\nOutput Format\nFor each test case, one line containing\n3 space-separated integers \u2014\nA\n1\n,A\n2\n, and\nA\n3\n, which satisfy the given conditions. If there are multiple possible answers you may output any of them.\nIt can be shown that an answer always exists, under the given constraints.\nConstraints\n1\u2264T\u2264100\n2\u2264X\u2264100\nSample 1:\nInput\nOutput\n3\n3\n5\n5\n1 3 5\n1 6 8\n3 5 7\nExplanation:\nTest Case\n1:\nmean(1,3,5)=\n3\n1+3+5\n=\n3\n9\n=3\nTest Case\n2:\nmean(1,6,8)=\n3\n1+6+8\n=\n3\n15\n=5\nTest Case\n3:\nmean(3,5,7)=\n3\n3+5+7\n=\n3\n15\n=5",
        "268": "Max Binary\nChef has a binary strings\nS of length\nN, and an integer\nK.\nHitesh wants to maximize the decimal representation of\nS using\nK operations of the following type:\nType\n1: Insert\n0 at any position in the string.\nType\n2: Change any\n0 to\n1.\nHelp Hitesh find the modified string with maximum possible decimal representation after performing at most\nK operations.\nNote that the decimal representation of a binary string refers to the numeric value it represents when converted to the decimal number system. For instance, the decimal representation of\n101 will be\n5\n(2\n2\n+2\n0\n), and that of\n000110 will be\n6\n(2\n2\n+2\n1\n)\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nThe first line of each test case contains two integers\nN and\nK.\nThe second line contains the string\nS.\nOutput Format\nFor each test case, output on a new line, the modified string with maximum possible decimal representation after performing at most\nK operations.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u226410\n6\n1\u2264K\u226410\n6\nS consists of\n0 and\n1 only.\nThe sum of\nN and\nK over all test cases won't exceed\n5\u22c510\n6\n.\nSample 1:\nInput\nOutput\n4\n4 2\n1101\n6 3\n001110\n5 4\n00110\n3 1\n000\n110100\n10111000\n10110000\n100\nExplanation:\nTest case\n1: We are allowed to perform two operations. We can perform both operations of type\n1 to obtain\n110100, having decimal value\n52.\nTest case\n2: We are allowed to perform three operations. We can perform two operations of type\n1 to obtain\n00111000, and one operation of type\n2 to obtain\n10111000, having decimal value\n184.",
        "269": "Journey of the Knight\nChef has an\n8\u00d78 chessboard. He placed a knight on the square\n(X\n1\n,Y\n1\n). Note that, the square at the intersection of the\ni\nth\nrow and\nj\nth\ncolumn is denoted by\n(i,j).\nChef wants to determine whether the knight can end up at the square\n(X\n2\n,Y\n2\n) in exactly\n100 moves or not.\nFor reference, a knight can move to a square which is:\nOne square horizontally and two squares vertically away from the current square, or\nOne square vertically and two squares horizontally away from the current square\nA visual description of this may be found here.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains\n4 integers\nX\n1\n,Y\n1\n,X\n2\n,Y\n2\n\u2014 where\n(X\n1\n,Y\n1\n) denotes the starting square of the knight and\n(X\n2\n,Y\n2\n) denotes the ending square of the knight.\nOutput Format\nFor each test case, output YES if knight can move from\n(X\n1\n,Y\n1\n) to\n(X\n2\n,Y\n2\n) in exactly\n100 moves. Otherwise, output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n1\u2264T\u22641000\n1\u2264X\n1\n,Y\n1\n,X\n2\n,Y\n2\n\u22648\nSample 1:\nInput\nOutput\n3\n1 1 1 1\n8 8 7 6\n8 8 8 6\nYES\nNO\nYES\nExplanation:\nTest Case 1: Knight can first move to\n(2,3) and then back to\n(1,1). He can repeat this\n50 times and he will end up at\n(1,1) after\n100 moves.\nTest Case 2: It can be proven that it is not possible for the knight to end at\n(7,6) after\n100 moves.\nTest Case 3: Knight can first move to\n(6,7) and then to\n(8,6). After that, he can alternate between\n(6,7) and\n(8,6) for\n49 times and he will end up at\n(8,6) after\n100 moves.",
        "270": "Rectangle\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\nYou are given four integers a, b, c and d. Determine if there's a rectangle such that the lengths of its sides are a, b, c and d (in any order).\nInput\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first and only line of each test case contains four space-separated integers a, b, c and d.\nOutput\nFor each test case, print a single line containing one string \"YES\" or \"NO\".\nConstraints\n1 \u2264 T \u2264 1,000\n1 \u2264 a, b, c, d \u2264 10,000\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n3\n1 1 2 2\n3 2 2 3\n1 2 2 2\nYES\nYES\nNO",
        "271": "Download file\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef has recently got a broadband internet connection. His history of internet data usage is provided as below.\nDuring the first T1 minutes, the internet data used was D1 MBs per minute, and during the next T2 minutes, it was D2 MBs per minute, and so on till during last TN minutes it was DN MBs per minute.\nThe internet provider charges the Chef 1 dollar for every 1 MB data used, except for the first K minutes, when the internet data is free as part of the plan provided to Chef.\nPlease find out the total amount that Chef has to pay the internet provider (in dollars).\nInput\nFirst line of the input contains a single integer TC the number of test cases. Description of TC test cases follow.\nFirst line of each test case contains two space separated integers N and K.\nNext N lines of each test case contains information about the internet data usage. Specifically, in the i-th line, there will be two space separated integers: Ti and Di.\nOutput\nFor each test case output a single integer in separate line, the amount that Chef has to pay in dollars.\nConstraints\n1 \u2264 TC \u2264 1,000\n1 \u2264 N \u2264 10\n0 \u2264 K \u2264 T1 + T2 + ... + TN\n1 \u2264 Ti, Di \u2264 10\nSample 1:\nInput\nOutput\n3\n2 2\n2 1\n2 3\n2 2\n1 2\n2 3\n3 0\n1 2\n2 4\n10 10\n6\n3\n110\nExplanation:\nExample case 1. For the first two minutes, internet data of usage of Chef is free. He has to pay for last 2 minutes only, for which he will be charged at 3 dollars per minute, i.e. total 6 dollars.\nExample case 2. For the first two minutes, internet data of usage of Chef is free. He has to pay for last 1 minute only, for which he is being charged at 3 dollars per minute. So, in total he has to pay 3 dollars.\nExample case 3. This time, Chef is not provided any free data usage. He has to pay for entire data usage, which comes out to be 1 * 2 + 2 * 4 + 10 * 10 = 110 dollars.",
        "272": "Farmer Feb\nRead problems statements in Mandarin Chinese and Russian.\n  Farmer Feb has three fields with potatoes planted in them. He harvested x potatoes from the first field, y potatoes from the second field and is yet to harvest potatoes from the third field. Feb is very superstitious and believes that if the sum of potatoes he harvests from the three fields is a prime number (http:\/\/en.wikipedia.org\/wiki\/Prime_number), he'll make a huge profit. Please help him by calculating for him the minimum number of potatoes that if harvested from the third field will make the sum of potatoes prime. At least one potato should be harvested from the third field.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contain 2 integers separated by single space: x and y.\n  Output\nFor each test case, output a single line containing the answer.\n  Constraints\n1 \u2264 T \u2264 1000\n1 \u2264 x \u2264 1000\n1 \u2264 y \u2264 1000\n  Sample 1:\nInput\nOutput\n2\n1 3\n4 3\n1\n4\nExplanation:\nIn example case 1: the farmer harvested a potato from the first field and 3 potatoes from the second field. The sum is 4. If he is able to harvest a potato from the third field, that will make the sum 5, which is prime. Hence the answer is 1(he needs one more potato to make the sum of harvested potatoes prime.)",
        "273": "Minimum XOR\nYou have\nN integers -\nA\n1\n,A\n2\n,\u2026,A\nN\n.\nYou have to make the Bitwise XOR of all the elements as minimum as possible.\nYou are allowed to remove at most one element. Note that this means that you can also choose to not remove any element.\nWhat is the final minimum XOR that you can achieve after removing at most one element?\nNote: In most programming languages, the XOR of two variables x and y can be computed using x ^ y.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains an integer\nN \u2014 the number of elements.\nThe next line contains\nN space separated integers\nOutput Format\nFor each test case, output on a new line the final minimum XOR of the elements.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u22643\u22c510\n5\n1\u2264A\ni\n\u226410\n5\nSum of\nN over all the testcases\n\u22643\u22c510\n5\nSample 1:\nInput\nOutput\n3\n4\n2 4 3 6\n2\n4 4\n5\n1 3 5 17 9\n0\n0\n14\nExplanation:\nTestcase 1: The bitwise XOR of all elements\n{2,4,3,6} is\n3. If we remove the element\n3, the total XOR of the remaining elements becomes\n0 which is minimum possible XOR.\nTestcase 2: The bitwise XOR of all elements\n{4,4} is\n0. This is already the minimum possible total XOR, and so we will not remove any element.\nTestcase 3: The bitwise XOR of all elements\n{1,3,5,17,9} is\n31. If we remove the element\n17, the total XOR of the remaining elements becomes\n14 which is minimum possible XOR.",
        "274": "Large Square\nRead problem statements in Mandarin Chinese and Bengali.\nYou are given\nN identical squares, each with side length\nA. All the squares have their sides parallel to the\nx\u2212axis and\ny\u2212axis. That is, the squares are not tilted. You have to take several (possibly, zero or all) squares and rearrange them to obtain a mega square. The mega square can't have any gap in the enclosed region or have overlapping squares. Also, you cannot rotate any square.\nOutput the side length of the largest mega square that you can obtain.\nInput Format\nThe first line of input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains two space-separated integers\nN,A.\nOutput Format\nFor each test case, print a single line containing one integer - the side length of the largest square you can obtain.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u226410\n5\n1\u2264A\u226410\n4\nSample 1:\nInput\nOutput\n5\n3 2\n5 3\n16 18\n11 8\n8 6\n2\n6\n72\n24\n12\nExplanation:\nTest case\n1: You can choose just one square to form the mega square. So the side length will be\n2.\nTest case\n2: You can choose\n4 squares to form a mega square with side-length\n2\u22c5A\n=6.",
        "275": "Make Multiple\nChef has two integers\nA and\nB\n(A\u2264B).\nChef can choose any non-negative integer\nX and add them to both\nA and\nB. Find whether it is possible to make\nA a divisor of\nB.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two integers\nA and\nB.\nOutput Format\nFor each test case, output YES if it is possible to make\nA a factor of\nB, NO otherwise.\nYou can print each character of the string in uppercase or lowercase. For example, the strings Yes, YES, yes, and yEs, are all considered identical.\nConstraints\n1\u2264T\u226410\n5\n1\u2264A\u2264B\u226410\n9\nSample 1:\nInput\nOutput\n3\n3 6\n4 14\n9 10\nYES\nYES\nNO\nExplanation:\nTest case\n1: We can choose\nX=0 and add them to\n3 and\n6. Thus,\n3 is a factor of\n6.\nTest case\n2: We can choose\nX=1 and add them to\n4 and\n14. Thus,\n4+1=5 is a factor of\n14+1=15.\nTest case\n3: There is no possible value of\nX to add such that\nA becomes a factor of\nB.",
        "276": "Balanced Reversals\nChef is given a binary string\nA of length\nN. He can perform the following operation on\nA any number of times:\nChoose\nL and\nR\n(1\u2264L\u2264R\u2264N), such that, in the substring\nA[L,R], the number of\n1s is equal to the number of\n0s and reverse the substring\nA[L,R].\nFind the lexicographically smallest string that Chef can obtain after performing the above operation any (possibly zero) number of times on\nA.\nString\nX is lexicographically smaller than string\nY, if either of the following satisfies:\nX is a prefix of\nY and\nX\n\ue020\n=Y.\nThere exists an index\ni such that\nX\ni\n<Y\ni\nand\nX\nj\n=Y\nj\n,\u2200j such that\n1\u2264j<i.\nInput Format\nFirst line will contain\nT, the number of test cases. Then the test cases follow. Each test case contains two lines.\nThe first line contains the integer\nN, the length of the binary string.\nThe second line contains the binary string\nA.\nOutput Format\nFor each test case, print the lexicographically smallest binary string that can be obtained after performing the operation any (possibly zero) number of times.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u226410\n5\nSum of\nN over all test cases does not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n2\n5\n01100\n4\n0000\n00011\n0000\nExplanation:\nTest Case\n1: Chef can choose\nL=2 and\nR=5. The chosen substring,\nA[2,5]=1100. On reversing this, we get\n0011. Thus, the final string is\nA=00011. Note that this is the lexicographically smallest string possible.\nTest Case\n2: Since the string is already lexicographically minimum, Chef does not need to apply any operation.",
        "277": "IPL and RCB\nIt's IPL time and as usual RCB are finding it tough to qualify for playoffs. RCB needs a minimum of\nX more points to qualify for playoffs in their remaining\nY matches. A win, tie and loss in a match will yield\n2,1,0 points respectively to a team.\nYou being a true RCB supporter want to find the minimum number of matches RCB needs to win to qualify for playoffs. It is guaranteed that RCB will qualify for playoffs if they win all their remaining\nY matches.\nInput:\nFirst line will contain\nT, number of testcases. Then the testcases follow.\nEach testcase contains of a single line of input, two space separated integers\nX,Y\nOutput:\nFor each testcase, output in a single line the minimum number of matches RCB must win to qualify for playoffs.\nConstraints :\n1\u2264T\u226410000\n1\u2264X\u2264100\n1\u2264Y\u2264100\n1\u2264X\u22642\u22c5Y\nSample 1:\nInput\nOutput\n2\n10 5\n1 5\n5\n0\nExplanation:\nIn first case\nX=10 and\nY=5, so RCB needs\n10 points from remaining\n5 matches to qualify for playoffs. It is only possible if they win all their remaining\n5 matches.\nIn second case\nX=1 and\nY=5, so RCB needs\n1 points from their remaining\n5 matches to qualify for playoffs. It can be done if they tie any one of their\n5 matches and lose the remaining\n4. So they need to win\n0 matches.",
        "278": "Hostel Room\nThere are initially\nX people in a room.\nYou are given an array\nA of length\nN which describes the following events:\nIf\nA\ni\n\u22650, then\nA\ni\npeople enter the room at\ni-th minute. For e.g. if\nA\n2\n=3, then\n3 people enter the room at the\n2-nd minute.\nIf\nA\ni\n<0, then\n\u2223A\ni\n\u2223 people leave the room at\ni-th minute. Here\n\u2223A\ni\n\u2223 denotes the absolute value of\nA\ni\n. For e.g. if\nA\n4\n=\u22122, then\n2 people leave the room at the\n4-th minute.\nDetermine the maximum number of people in the room at any moment of time.\nIt is guaranteed in the input that at any moment of time, the number of people in the room does not become negative.\nInput Format\nThe first line will contain\nT - the number of test cases. Then the test cases follow.\nThe first line of each test case consists of two integers\nN and\nX - the length of the array\nA and the number of people in the room initially.\nThe second line of each test case contains\nN integers\nA\n1\n,A\n2\n,A\n3\n,\u2026A\nN\n.\nOutput Format\nFor each testcase, output the maximum number of people in the room at any point of time.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u2264100\n0\u2264X\u2264100\n\u2212100\u2264A\ni\n\u2264100\nSample 1:\nInput\nOutput\n3\n5 8\n0 3 3 -13 5\n4 5\n0 -2 2 3\n3 5\n-2 5 -2\n14\n8\n8\nExplanation:\nTest case-1: In the\n3-rd minute, the room contains\n8+0+3+3=14 people which is the maximum number of people in the room at any point of time.\nTest case-2: In the\n4-th minute, the room contains\n5+0\u22122+2+3=8 people which is the maximum number of people in the room at any point of time.\nTest case-3: In the\n2-nd minute, the room contains\n5\u22122+5=8 people which is the maximum number of people in the room at any point of time.",
        "279": "Card Swipe\nIn the bustling CodeChef office, the entrance is equipped with a high-tech card swipe system. Each employee is assigned a unique ID card that they use to swipe in and out of the building.\nThe system records every swipe, capturing the first swipe of an ID as in, second as out, third as in, and so on. Given an array\nA consisting of\nN IDs denoting\nN swipes throughout the day, find the maximum number of people in the office at any time.\nNote that there is nobody inside the office before the first swipe.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains an integer\nN \u2014 the number of swipes throughout the day.\nThe next line contains\nN space-separated integers denoting the ID of the\ni\nth\nswipe.\nOutput Format\nFor each test case, output on a new line, the maximum number of people in the office at any time.\nConstraints\n1\u2264T\u22642\u22c510\n5\n1\u2264N\u22642\u22c510\n5\n1\u2264A\ni\n\u2264N\nThe sum of\nN over all test cases won't exceed\n10\n6\n.\nSample 1:\nInput\nOutput\n4\n4\n1 2 2 1\n4\n1 1 1 2\n5\n3 5 2 4 1\n5\n1 2 1 5 4\n2\n2\n5\n3\nExplanation:\nTest case\n1: Consider the following order of swipes:\nPerson\n1 swipes and enters the office.\nPerson\n2 swipes and enters the office.\nPerson\n2 swipes and leaves the office.\nPerson\n1 swipes and leaves the office.\nThus, the maximum number of people in the office at any time is\n2.\nTest case\n2: Consider the following order of swipes:\nPerson\n1 swipes and enters the office.\nPerson\n1 swipes and leaves the office.\nPerson\n1 swipes and enters the office.\nPerson\n2 swipes and enters the office.\nThus, the maximum number of people in the office at any time is\n2.\nTest case\n3: Five people swipe and enter the office. Thus, the maximum number of people in the office is\n5.\nTest case\n4: Consider the following order of swipes:\nPerson\n1 swipes and enters the office.\nPerson\n2 swipes and enters the office.\nPerson\n1 swipes and leaves the office.\nPerson\n5 swipes and enters the office.\nPerson\n4 swipes and enters the office.\nThus, the maximum number of people in the office at any time is\n3. Their IDs are\n2,5, and\n4.",
        "280": "Movie Weekend\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nLittle Egor is a huge movie fan. He likes watching different kinds of movies: from drama movies to comedy movies, from teen movies to horror movies. He is planning to visit cinema this weekend, but he's not sure which movie he should watch.\nThere are n movies to watch during this weekend. Each movie can be characterized by two integers Li and Ri, denoting the length and the rating of the corresponding movie. Egor wants to watch exactly one movie with the maximal value of Li \u00d7 Ri. If there are several such movies, he would pick a one with the maximal Ri among them. If there is still a tie, he would pick the one with the minimal index among them.\nYour task is to help Egor to pick a movie to watch during this weekend.\nInput\nThe first line of the input contains an integer T denoting the number of test cases.\nThe first line of the test case description contains an integer n.\nThe second line of the test case description contains n integers L1, L2, ...,Ln. The following line contains n integers R1, R2, ..., Rn.\nOutput\nFor each test case, output a single integer i denoting the index of the movie that Egor should watch during this weekend. Note that we follow 1-based indexing.\nConstraints\n1 \u2264 T \u2264 5\n1 \u2264 n \u2264 100\n1 \u2264 Li, Ri \u2264 100\nSample 1:\nInput\nOutput\n2\n2\n1 2\n2 1\n4\n2 1 4 1\n2 4 1 4\n1\n2\nExplanation:\nIn the first example case, both films have the same value of L \u00d7 R, but the first film has a better rating.\nIn the second example case, the second and the fourth movies are equally good, but the second movie has a smaller index.",
        "281": "Chef and Groups\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nThere are\nN seats in a row. You are given a string\nS with length\nN; for each valid\ni, the\ni-th character of\nS is '0' if the\ni-th seat is empty or '1' if there is someone sitting in that seat.\nTwo people are friends if they are sitting next to each other. Two friends are always part of the same group of friends. Can you find the total number of groups?\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains a single string\nS.\nOutput\nFor each test case, print a single line containing one integer \u2015 the number of groups.\nConstraints\n1\u2264T\u226450\n1\u2264N\u226410\n5\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n4\n000\n010\n101\n01011011011110\n0\n1\n2\n4\nExplanation:\nExample case 1: Since all seats are empty, the number of groups is\n0.\nExample case 2: Since only one seat is occupied, the number of groups is\n1.\nExample case 3: Here, two seats are occupied, but since they are not adjacent, the people sitting on them belong to different groups.\nExample case 4: Here, we have\n4 groups of friends with size\n1,\n2,\n2 and\n4 respectively. That is, first group is sitting at\n2nd seat, second group at\n4th and\n5th seat, third group at\n7th and\n8th seat and fourth group at\n10th to\n13th seat.",
        "282": "Positive Products\nYou are given an array\nA of length\nN. Find the number of pairs of indices\n(i,j) such that\n1\u2264i<j\u2264N\nA\ni\n\u22c5A\nj\n>0\nInput Format\nThe first line contains a single integer\nT - the number of test cases. Then the test cases follow.\nThe first line of each test case contains an integer\nN - the size of the array\nA.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\ndenoting the array\nA.\nOutput Format\nFor each test case, output the number of pairs which satisfy the above conditions.\nConstraints\n1\u2264T\u22641000\n2\u2264N\u226410\n5\n\u221210\n4\n\u2264A\ni\n\u226410\n4\nSum of\nN over all test cases does not exceed\n2\u22c510\n5\nSample 1:\nInput\nOutput\n3\n5\n1 -3 0 2 -1\n4\n-1 -1 -1 -1\n4\n0 1 2 3\n2\n6\n3\nExplanation:\nTest case 1: The pairs which satisfy the conditions are\n(1,4) and\n(2,5).\nTest case 2: The pairs which satisfy the conditions are\n(1,2),\n(1,3),\n(1,4),\n(2,3),\n(2,4) and\n(3,4).\nTest case 3: The pairs which satisfy the conditions are\n(2,3),\n(2,4) and\n(3,4).",
        "283": "Count of Maximum\nGiven an array\nA of length\nN, your task is to find the element which repeats in\nA maximum number of times as well as the corresponding count. In case of ties, choose the smaller element first.\nInput Format\nFirst line of input contains an integer\nT, denoting the number of test cases. Then follows description of\nT cases. Each case begins with a single integer\nN, the length of\nA. Then follow\nN space separated integers in next line.\nOutput Format\nFor each test case, output two space separated integers\nV &\nC.\nV is the value which occurs maximum number of times and\nC is its count.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u2264100\nFor all i in [1..N] :\n1\u2264A[i]\u226410000\nSample 1:\nInput\nOutput\n2\n5\n1 2 3 2 5\n6\n1 2 2 1 1 2\n2 2\n1 3\nExplanation:\nIn first case 2 occurs twice whereas all other elements occur only once. In second case, both 1 and 2 occur 3 times but 1 is smaller than 2.",
        "284": "A Balanced Contest\nRead problems statements in mandarin chinese, russian and vietnamese as well.\nChef wants to organize a contest. Predicting difficulty levels of the problems can be a daunting task. Chef wants his contests to be balanced in terms of difficulty levels of the problems.\nAssume a contest had total P participants. A problem that was solved by at least half of the participants (i.e. P \/ 2 (integer division)) is said to be cakewalk difficulty. A problem solved by at max P \/ 10 (integer division) participants is categorized to be a hard difficulty.\nChef wants the contest to be balanced. According to him, a balanced contest must have exactly 1 cakewalk and exactly 2 hard problems. You are given the description of N problems and the number of participants solving those problems. Can you tell whether the contest was balanced or not?\nInput\nThe first line of the input contains an integer T denoting the number of test cases.\nThe first line of each test case contains two space separated integers, N, P denoting the number of problems, number of participants respectively.\nThe second line contains N space separated integers, i-th of which denotes number of participants solving the i-th problem.\nOutput\nFor each test case, output \"yes\" or \"no\" (without quotes) denoting whether the contest is balanced or not.\nConstraints\n1 \u2264 T, N \u2264 500\n1 \u2264 P \u2264 108\n1 \u2264 Number of participants solving a problem \u2264 P\nSubtasks\nSubtask #1 (40 points): P is a multiple of 10\nSubtask #2 (60 points): Original constraints\nSample 1:\nInput\nOutput\n6\n3 100\n10 1 100\n3 100\n11 1 100\n3 100\n10 1 10\n3 100\n10 1 50\n4 100\n50 50 50 50\n4 100\n1 1 1 1\nyes\nno\nno\nyes\nno\nno\nExplanation:\nExample case 1.: The problems are of hard, hard and cakewalk difficulty. There is 1 cakewalk and 2 hard problems, so the contest is balanced.\nExample case 2.: The second problem is hard and the third is cakewalk. There is 1 cakewalk and 1 hard problem, so the contest is not balanced.\nExample case 3.: All the three problems are hard. So the contest is not balanced.\nExample case 4.: The problems are of hard, hard, cakewalk difficulty. The contest is balanced.\nExample case 5.: All the problems are cakewalk. The contest is not balanced.\nExample case 6.: All the problems are hard. The contest is not balanced.",
        "285": "Divisible by i\nYou are given an integer\nN.\nConstruct a permutation\nP of length\nN such that\nFor all\ni\n(1\u2264i\u2264N\u22121),\ni divides\nabs(P\ni+1\n\u2212P\ni\n).\nRecall that a permutation of length\nN is an array where every integer from\n1 to\nN occurs exactly once.\nIt can be proven that for the given constraints at least one such\nP always exists.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follow.\nThe only line of each test case contains an integer\nN - the length of the array to be constructed.\nOutput Format\nFor each test case, output a single line containing\nN space-separated integers\nP\n1\n,P\n2\n,\u2026,P\nN\n, denoting the elements of the array\nP.\nIf there exist multiple such arrays, print any.\nConstraints\n1\u2264T\u22645\u22c510\n4\n2\u2264N\u226410\n5\nThe sum of\nN over all test cases does not exceed\n10\n5\n.\nSample 1:\nInput\nOutput\n2\n2\n3\n1 2\n2 1 3\nExplanation:\nTest case 1: A possible array satisfying all the conditions is\n[1,2]:\nFor\ni=1:\nabs(A\n2\n\u2212A\n1\n)=abs(2\u22121)=1 is divisible by\n1.\nTest case 2: A possible array satisfying all the conditions is\n[2,1,3]:\nFor\ni=1:\nabs(A\n2\n\u2212A\n1\n)=abs(1\u22122)=1 is divisible by\n1.\nFor\ni=2:\nabs(A\n3\n\u2212A\n2\n)=abs(3\u22121)=2 is divisible by\n2.",
        "286": "Chef and Work\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nChef has\nN small boxes arranged on a line from\n1 to\nN. For each valid\ni, the weight of the\ni-th box is\nW\ni\n. Chef wants to bring them to his home, which is at the position\n0. He can hold any number of boxes at the same time; however, the total weight of the boxes he's holding must not exceed K at any time, and he can only pick the ith box if all the boxes between Chef's home and the ith box have been either moved or picked up in this trip.\nTherefore, Chef will pick up boxes and carry them home in one or more round trips. Find the smallest number of round trips he needs or determine that he cannot bring all boxes home.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains two space-separated integers\nN and\nK.\nThe second line contains\nN space-separated integers\nW\n1\n,W\n2\n,\u2026,W\nN\n.\nOutput\nFor each test case, print a single line containing one integer \u2015 the smallest number of round trips or\n\u22121 if it is impossible for Chef to bring all boxes home.\nConstraints\n1\u2264T\u2264100\n1\u2264N,K\u226410\n3\n1\u2264W\ni\n\u226410\n3\nfor each valid\ni\nSample 1:\nInput\nOutput\n4\n1 1 \n2\n2 4\n1 1\n3 6\n3 4 2\n3 6\n3 4 3\n-1\n1\n2\n3\nExplanation:\nExample case 1: Since the weight of the box higher than\nK, Chef can not carry that box home in any number of the round trip.\nExample case 2: Since the sum of weights of both boxes is less than\nK, Chef can carry them home in one round trip.\nExample case 3: In the first round trip, Chef can only pick up the box at position\n1. In the second round trip, he can pick up both remaining boxes at positions\n2 and\n3.\nExample case 4: Chef can only carry one box at a time, so three round trips are required.",
        "287": "Hungry Chef\nChef is very hungry. So, Chef goes to a shop selling burgers. The shop has\n2 types of burgers:\nNormal burgers, which cost\nX rupees each\nPremium burgers, which cost\nY rupees each (where\nY>X)\nChef has\nR rupees. Chef wants to buy exactly\nN burgers. He also wants to maximize the number of premium burgers he buys. Determine the number of burgers of both types Chef must buy.\nOutput\n\u22121 if it is not possible for Chef to buy\nN burgers.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains four space-separated integers\nX,\nY,\nN and\nR \u2014 the cost of a normal burger, the cost of a premium burger, the number of burgers Chef wants to buy and the amount of money Chef has.\nOutput Format\nFor each test case, output on a new line two integers: the number of normal burgers and the number of premium burgers Chef must buy satisfying the given conditions.\nOutput\n\u22121 if he cannot buy\nN burgers.\nConstraints\n1\u2264T\u226410\n4\n1\u2264X<Y\u22641000\n1\u2264N\u226410\n6\n1\u2264R\u226410\n9\nSample 1:\nInput\nOutput\n4\n2 10 4 12\n4 8 10 50\n99 100 5 10\n9 10 10 200\n4 0\n8 2\n-1\n0 10\nExplanation:\nTest case\n1: Chef has to buy\n4 normal burgers only. Even if he buys\n1 premium burger, he would not be able to buy\n4 burgers.\nTest case\n2: Chef can buy\n8 normal burgers and\n2 premium burgers.\nTest case\n3: It is not possible for Chef to buy\n5 burgers.",
        "288": "Train Partner\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nRahul and Rashi are off to the wedding of a close relative. This time they have to travel without their guardians. Rahul got very interested in the arrangement of seats inside the train coach.\nThe entire coach could be viewed as an arrangement of consecutive blocks of size 8.\nBerth Number    Compartment\n1 -  8               1\n9 - 16               2\n17 - 24               3\n... and so on\nEach of these size-8 blocks are further arranged as:\n 1LB,  2MB,  3UB,  4LB,  5MB,  6UB,  7SL,  8SU  \n 9LB, 10MB, ...\n ...   \n ...\nHere LB denotes lower berth, MB middle berth and UB upper berth.\nThe following berths are called Train-Partners:\n3UB   |  6UB  \n2MB   |  5MB  \n1LB   |  4LB  \n7SL   |  8SU  \nand the pattern is repeated for every set of 8 berths.\nRahul and Rashi are playing this game of finding the train partner of each berth. Can you write a program to do the same?\nInput\nThe first line of input contains a single integer T, denoting the number of test cases to follow.\nEach of the next T lines contain a single integer N, the berth number whose neighbor is to be found out.\nOutput\nThe output should contain exactly T lines each containing the berth of the neighbor of the corresponding seat.\nConstraints\nSubtasks\nSubtask #1 (50 points):\n1 \u2264 T \u2264 8\n1 \u2264 N \u2264 8\nSubtask #2 (50 points):\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 500\nSample 1:\nInput\nOutput\n3\n1\n5\n3\n4LB\n2MB\n6UB",
        "289": "Buy1-Get1\nOne day Alice visited Byteland to purchase jewels for her upcoming wedding anniversary.\nIn Byteland, every Jewelry shop has their own discount methods to attract the customers. One discount method called Buy1-Get1 caught Alice's attention. That is, Alice buys one jewel, then she can get one additional jewel with the same color without charge by Buy1-Get1.\nAlice lists the needed jewels as a string S, each letter denotes one jewel, and the same letters denote the same colors of jewels, and the different letters denote the different colors of jewels. The cost of each jewel is 1. Your task is to calculate the minimum cost for getting all the jewels Alice listed.\nInput\nThe first line of input contains a single line T, which represents the number of test cases. Then T lines will follow, and each contains a string S, which represents the jewels Alice needed.\nOutput\nOutput the minimum cost for each test case.\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 |S| \u2264 200, where |S| represents the length of the string S.\nThe string S is case sensitive, and will contain only English characters in the range [a-z], [A-Z].\nSample 1:\nInput\nOutput\n4\nssss\nssas\nsa\ns\n2\n3\n2\n1\nExplanation:\nIn the first sample case, Alice needs 4 jewel of color s. One of the optimal way is the following:\nBuy the first s with cost 1, and she can get the second s without charge. Then buy the third s with cost 1, and she can get the last s without charge. In this case, she get 4 jewels with only cost 2.\nIn the second sample case, Alice needs 3 jewels of color s and 1 jewel of color a. One of the optimal way is the following:\nBuy the second s with cost 1, and she can get the last s without charge. Then buy the a and the first s with cost 2. In this case, she get 4 jewels with only cost 3.\nIn the third and fourth sample cases, she cannot save her money by using Buy1-Get1.",
        "290": "Chef and Subarray\nRead problems statements in Mandarin Chinese and Russian.\nChef loves research! Now he is looking for subarray of maximal length with non-zero product.\nChef has an array A with N elements: A1, A2, ..., AN.\nSubarray Aij of array A is elements from index i to index j: Ai, Ai+1, ..., Aj.\nProduct of subarray Aij is product of all its elements (from ith to jth).\nInput\nFirst line contains sinlge integer N denoting the number of elements.\nSecond line contains N space-separated integers A1, A2, ..., AN denoting the elements of array.\n  Output\nIn a single line print single integer - the maximal length of subarray with non-zero product.\n  Constraints\n1 \u2264 N \u2264 100000\n0 \u2264 Ai \u2264 10000\n  Sample 1:\nInput\nOutput\n6\n1 0 2 3 0 4\n2\nExplanation:\nFor the first sample subarray is: {2, 3}.\nSample 2:\nInput\nOutput\n1\n0\n0\nExplanation:\nFor the second sample there are no subbarays with non-zero product.\nSample 3:\nInput\nOutput\n3\n1 0 1\n1\nExplanation:\nFor the third sample subbarays is {1}, (the first element, or the third one).",
        "291": "Retrieve the Array\nChef has an array\nA of length\nN.\nLet\nf(i) denote the sum\nA\n1\n+A\n2\n+\u22ef+A\ni\nand let\ng(i) denote the sum\nA\ni\n+A\ni+1\n+\u22ef+A\nN\n.\nChef creates another array\nB of length\nN such that\nB\ni\n=f(i)+g(i) for all\n1\u2264i\u2264N.\nNow, Chef has lost the original array\nA and needs your help to recover it, given array\nB. It is guaranteed that Chef has obtained the array\nB from a valid array\nA.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains an integer\nN \u2014 the size of the array\nA.\nThe second line of each test case contains\nN space-separated integers\nB\n1\n,B\n2\n,\u2026,B\nN\ndenoting the array\nB.\nOutput Format\nFor each testcase, output\nN space separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\ndenoting the array\nA.\nNote that\n1\u2264A\ni\n\u226410\n5\nmust hold for all\n1\u2264i\u2264N and it is guaranteed that a valid array\nA that meets these constraints exists.\nIf there are multiple answers, output any.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u226410\n5\n1\u2264B\ni\n\u22642\u22c510\n10\nTh sum of\nN over all test cases does not exceed\n10\n5\n.\n1\u2264A\ni\n\u226410\n5\nIt is guaranteed that a valid array\nA always exists.\nSample 1:\nInput\nOutput\n4\n1\n6\n3\n7 8 9\n4\n13 15 13 14\n2\n25 20\n3 \n1 2 3 \n2 4 2 3 \n10 5\nExplanation:\nTest case 1: For\nA=[3],\nB=[6].\nB\n1\n=f(1)+g(1)=3+3=6.\nTest case 2: For\nA=[1,2,3],\nB=[7,8,9].\nB\n1\n=f(1)+g(1)=\n1\n+\n1+2+3\n=7\nB\n2\n=f(2)+g(2)=\n1+2\n+\n2+3\n=8\nB\n3\n=f(3)+g(3)=\n1+2+3\n+\n3\n=9",
        "292": "Convert to permutation\nYou are given an array\nA of size\nN. In one operation, you can:\nChoose an index\ni\n(1\u2264i\u2264N) and increase\nA\ni\nby\n1.\nFind the minimum number of operations required to convert the array\nA into a permutation of size\nN. If it is impossible to do so, print\n\u22121.\nNote that a permutation of size\nN contains each element from\n1 to\nN exactly once.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains the integer\nN \u2014 the size of the array.\nThe next line contains\nN space-separated integers, the elements of the array\nA.\nOutput Format\nFor each test case, output on a new line, the minimum number of operations required to convert the array\nA into a permutation of size\nN.\nIf it is impossible to do so, print\n\u22121.\nConstraints\n1\u2264T\u2264500\n1\u2264N\u22641000\n0\u2264A\ni\n\u22641000\nSample 1:\nInput\nOutput\n4\n4\n3 1 1 2\n3\n0 3 3\n3\n3 2 1\n3\n2 0 1\n3\n-1\n0\n3\nExplanation:\nTest case\n1: We can convert the array\nA into a permutation using\n3 operations:\nOperation\n1: Choose\ni=3 and increase\nA\ni\nby\n1. Thus, the array becomes\nA=[3,1,2,2].\nOperation\n2: Choose\ni=3 and increase\nA\ni\nby\n1. Thus, the array becomes\nA=[3,1,3,2].\nOperation\n3: Choose\ni=3 and increase\nA\ni\nby\n1. Thus, the array becomes\nA=[3,1,4,2].\nIt can be shown that this is the minimum number of operations required to convert\nA into a permutation.\nTest case\n2: The given array cannot be converted into a permutation using any number of operations.\nTest case\n3: The given array is already a permutation. Thus, we require\n0 operations.\nTest case\n4: We can convert the array\nA into a permutation using\n3 operations:\nOperation\n1: Choose\ni=1 and increase\nA\ni\nby\n1. Thus, the array becomes\nA=[3,0,1].\nOperation\n2: Choose\ni=2 and increase\nA\ni\nby\n1. Thus, the array becomes\nA=[3,1,1].\nOperation\n3: Choose\ni=3 and increase\nA\ni\nby\n1. Thus, the array becomes\nA=[3,1,2].\nIt can be shown that this is the minimum number of operations required to convert\nA into a permutation.",
        "293": "Ups and Downs\nRead problems statements in Mandarin Chinese and Russian as well.\nProblem description\nYou will be given a zero-indexed array A. You need to rearrange its elements in such a way that the following conditions are satisfied:\nA[i] \u2264 A[i+1] if i is even.\nA[i] \u2265 A[i+1] if i is odd.\nIn other words the following inequality should hold: A[0] \u2264 A[1] \u2265 A[2] \u2264 A[3] \u2265 A[4], and so on. Operations \u2264 and \u2265 should alter.\nInput\nThe first line contains a single integer T denoting the number of test cases. The first line of each test case contains an integer N, that is the size of the array A. The second line of each test case contains the elements of array A\nOutput\nFor each test case, output a single line containing N space separated integers, which are the elements of A arranged in the required order. If there are more than one valid arrangements, you can output any of them.\nConstraints\n1 \u2264 N \u2264 100000\nSum of N in one test file \u2264 600000\n1 \u2264 A[i] \u2264 10^9\nSample 1:\nInput\nOutput\n2\n2\n3 2\n3\n10 5 2\n2 3\n2 10 5\nExplanation:\nExample case 1.\nA[0] ? A[1] is satisfied, 2 ? 3.\nExample case 2.\nA[0] ? A[1] is satisfied, 2 ? 10.\nA[1] ? A[2] is satisfied, 10 ? 5.\nNote: 5 10 2 is also valid answer.",
        "294": "Trace of Matrix\nRead problems statements in Mandarin chinese and Vietnamese as well.\nChef is learning linear algebra. Recently, he learnt that for a square matrix\nM,\ntrace(M) is defined as the sum of all elements on the main diagonal of\nM (an element lies on the main diagonal if its row index and column index are equal).\nNow, Chef wants to solve some excercises related to this new quantity, so he wrote down a square matrix\nA with size\nN\u00d7N. A square submatrix of\nA with size\nl\u00d7l is a contiguous block of\nl\u00d7l elements of\nA. Formally, if\nB is a submatrix of\nA with size\nl\u00d7l, then there must be integers\nr and\nc (\n1\u2264r,c\u2264N+1\u2212l) such that\nB\ni,j\n=A\nr+i\u22121,c+j\u22121\nfor each\n1\u2264i,j\u2264l.\nHelp Chef find the maximum trace of a square submatrix of\nA.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN.\nN lines follow. For each\ni (\n1\u2264i\u2264N), the\ni-th of these lines contains\nN space-separated integers\nA\ni,1\n,A\ni,2\n,\u2026,A\ni,N\ndenoting the\ni-th row of the matrix\nA.\nOutput\nFor each test case, print a single line containing one integer \u2014 the maximum possible trace.\nConstraints\n1\u2264T\u2264100\n2\u2264N\u2264100\n1\u2264A\ni,j\n\u2264100 for each valid\ni,j\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n1\n3\n1 2 5\n6 3 4\n2 7 1\n13\nExplanation:\nExample case 1: The submatrix with the largest trace is\n6 3\n2 7\nwhich has trace equal to\n6+7=13. (This submatrix is obtained for\nr=2,c=1,l=2.)",
        "295": "Average Permutation\nYou are given an integer\nN.\nFind a permutation\nP=[P\n1\n,P\n2\n,\u2026,P\nN\n] of the integers\n{1,2,\u2026,N} such that sum of averages of all consecutive triplets is minimized, i.e.\ni=1\n\u2211\nN\u22122\n3\nP\ni\n+P\ni+1\n+P\ni+2\nis minimized.\nIf multiple permutations are possible, print any of them.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case contains an integer N, the size of the permutation.\nOutput Format\nFor each test case, output on a new line a permutation which satisfies the above conditions.\nConstraints\n1\u2264T\u22641000\n3\u2264N\u226410\n5\nThe sum of\nN over all test cases won't exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n2\n4\n3\n3 2 1 4\n3 2 1\nExplanation:\nTest case\n1: The sum is\n3\nP\n1\n+P\n2\n+P\n3\n+\n3\nP\n2\n+P\n3\n+P\n4\n=\n3\n3+2+1\n+\n3\n2+1+4\n=6\/3+7\/3=4.333\u2026 Among all possible permutations of\n{1,2,3,4}, this is one of the permutations which provides the minimum result.\nTest case\n2: The sum is\n3\n3+2+1\n=6\/3=2. Every permutation of size\n3 will have this value, hence it is the minimum possible.",
        "296": "Hotel Bytelandia\nA holiday weekend is coming up, and Hotel Bytelandia needs to find out if it has enough rooms to accommodate all potential guests. A number of guests have made reservations. Each reservation consists of an arrival time, and a departure time. The hotel management has hired you to calculate the maximum number of guests that will be at the hotel simultaneously. Note that if one guest arrives at the same time another leaves, they are never considered to be at the hotel simultaneously (see the second example).\nInput\nInput will begin with an integer T, the number of test cases. Each test case begins with an integer N, the number of guests. Two lines follow, each with exactly N positive integers. The i-th integer of the first line is the arrival time of the i-th guest, and the i-th integer of the second line is the departure time of the i-th guest (which will be strictly greater than the arrival time).\nOutput\nFor each test case, print the maximum number of guests that are simultaneously at the hotel.\nConstraints\nT\u2264100\nN\u2264100\nAll arrival\/departure times will be between 1 and 1000, inclusive\nSample 1:\nInput\nOutput\n3\n3\n1 2 3\n4 5 6\n5\n1 2 3 4 5\n2 3 4 5 6\n7\n13 6 5 8 2 10 12\n19 18 6 9 9 11 15\n3\n1\n3",
        "297": "Mighty Friend\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\nMotu and Tomu are very good friends who are always looking for new games to play against each other and ways to win these games. One day, they decided to play a new type of game with the following rules:\nThe game is played on a sequence\nA\n0\n,A\n1\n,\u2026,A\nN\u22121\n.\nThe players alternate turns; Motu plays first, since he's earlier in lexicographical order.\nEach player has a score. The initial scores of both players are\n0.\nOn his turn, the current player has to pick the element of\nA with the lowest index, add its value to his score and delete that element from the sequence\nA.\nAt the end of the game (when\nA is empty), Tomu wins if he has strictly greater score than Motu. Otherwise, Motu wins the game.\nIn other words, Motu starts by selecting\nA\n0\n, adding it to his score and then deleting it; then, Tomu selects\nA\n1\n, adds its value to his score and deletes it, and so on.\nMotu and Tomu already chose a sequence\nA for this game. However, since Tomu plays second, he is given a different advantage: before the game, he is allowed to perform at most\nK swaps in\nA; afterwards, the two friends are going to play the game on this modified sequence.\nNow, Tomu wants you to determine if it is possible to perform up to\nK swaps in such a way that he can win this game.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains two space-separated integers\nN and\nK denoting the number of elements in the sequence and the maximum number of swaps Tomu can perform.\nThe second line contains\nN space-separated integers\nA\n0\n,A\n1\n,\u2026,A\nN\u22121\n.\nOutput\nFor each test case, print a single line containing the string \"YES\" if Tomu can win the game or \"NO\" otherwise (without quotes).\nConstraints\n1\u2264T\u2264100\n1\u2264N\u226410,000\n0\u2264K\u226410,000\n1\u2264A\ni\n\u226410,000 for each valid\ni\nSubtasks\nSubtask #1 (20 points):\n1\u2264N\u2264100\nSubtask #2 (80 points): original constraints\nSample 1:\nInput\nOutput\n2\n6 0\n1 1 1 1 1 1\n5 1\n2 4 6 3 4\nNO\nYES\nExplanation:\nExample case 1: At the end of the game, both Motu and Tomu will have scores\n1+1+1=3. Tomu is unable to win that game, so the output is \"NO\".\nExample case 2: If no swaps were performed, Motu's score would be\n2+6+4=12 and Tomu's score would be\n4+3=7. However, Tomu can swap the elements\nA\n2\n=6 and\nA\n3\n=3, which makes Motu's score at the end of the game equal to\n2+3+4=9 and Tomu's score equal to\n4+6=10. Tomu managed to score higher than Motu, so the output is \"YES\".",
        "298": "Array Halves\nChef has a permutation\nP of length\n2\u22c5N. He can perform the following operation on\nP:\nSelect an index\ni\n(1\u2264i<2\u22c5N) and swap\nP\ni\nand\nP\ni+1\n.\nChef would call the permutation\nP good, if the maximum element of the first half of\nP is less than the minimum element of the second half of\nP.\nFormally\n(1\u2264i\u2264N)\nmax\nP\ni\n<\n(N<i\u22642\u22c5N)\nmin\nP\ni\n.\nFind the minimum number of operations Chef needs to apply to make\nP good.\nNote: A permutation of length\nN is an array where every integer from\n1 to\nN occurs exactly once.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains an integer\nN \u2014 half the size of the permutation\nP.\nThe second line of each test case contains\n2\u22c5N space-separated integers\nP\n1\n,P\n2\n,\u2026,P\n2\u22c5N\ndenoting the permutation\nP.\nOutput Format\nFor each test case, output the minimum number of operations required to make\nP good.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n5\nP is a permutation of length\n2\u22c5N\nThe sum of\nN over all test cases won't exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n2\n3 2 1 4\n3\n1 2 3 4 5 6\n3\n6 5 4 3 2 1\n2\n0\n9\nExplanation:\nTest case\n1: We can perform the following operations:\nApply operation at\ni=1:\n[3,2,1,4]\u2192[2,3,1,4]\nApply operation at\ni=2:\n[2,3,1,4]\u2192[2,1,3,4]\nTest case\n2:\nP is already good.",
        "299": "Bella ciao\nRead problem statements in Vietnamese, Bengali, Mandarin Chinese, and Russian as well.\nChef is planning a heist in the reserve bank of Chefland. They are planning to hijack the bank for\nD days and print the money. The initial rate of printing the currency is\nP dollars per day and they increase the production by\nQ dollars after every interval of\nd days. For example, after\nd days the rate is\nP+Q dollars per day, and after\n2d days the rate is\nP+2Q dollars per day, and so on. Output the amount of money they will be able to print in the given period.\nInput\nThe first line contains an integer\nT, the number of test cases. Then the test cases follow.\nEach test case contains a single line of input, four integers\nD,d,P,Q.\nOutput\nFor each test case, output in a single line the answer to the problem.\nConstraints\n1\u2264T\u226410\n5\n1\u2264d\u2264D\u226410\n6\n1\u2264P,Q\u226410\n6\nSubtasks\nSubtask #1 (15 points):\nd\u2264D\u2264100\nSubtask #2 (85 points): original constraints\nSample 1:\nInput\nOutput\n3\n2 1 1 1\n3 2 1 1\n5 2 1 2\n3\n4\n13\nExplanation:\nTest Case\n1:\nOn the first day, the rate of production is\n1 dollar per day so\n1 dollar is printed on the first day.\nOn the second day, the rate of production is\n1+1=2 dollars per day so\n2 dollars are printed on the second day.\nThe total amount of money printed in\n2 days is\n1+2=3 dollars.\nTest Case\n2:\nFor the first two days, the rate of production is\n1 dollar per day so\n1\u22c52=2 dollars are printed on the first two days.\nOn the third day, the rate of production is\n1+1=2 dollars per day so\n2 dollars are printed on the third day.\nThe total amount of money printed in\n3 days is\n2+2=4 dollars.\nTest Case\n3:\nFor the first two days, the rate of production is\n1 dollar per day so\n1\u22c52=2 dollars are printed on the first two days.\nOn the next two days, the rate of production is\n1+2=3 dollars per day so\n3\u22c52=6 dollars are printed on the next two days.\nOn the last day, the rate of production is\n3+2=5 dollars per day so\n5 dollars are printed on the last day.\nThe total amount of money printed in\n5 days is\n2+6+5=13 dollars.",
        "300": "Plusle and Minun on Array\nChef has an array\nA of length\nN. He defines the alternating sum of the array as:\nS=\u2223A\n1\n\u2223\u2212\u2223A\n2\n\u2223+\u2223A\n3\n\u2223\u2212\u2223A\n4\n\u2223+\u2026(\u22121)\nN\u22121\n\u22c5\u2223A\nN\n\u2223\nChef is allowed to perform the following operation on the array at most once:\nChoose two indices\ni and\nj\n(1\u2264i<j\u2264N) and swap the elements\nA\ni\nand\nA\nj\n.\nFind the maximum alternating sum Chef can achieve by performing the operation at most once.\nNote:\n\u2223X\u2223 denotes the absolute value of\nX. For example,\n\u2223\u22124\u2223=4 and\n\u22237\u2223=7.\nInput Format\nThe first line will contain\nT - the number of test cases. Then the test cases follow.\nFirst line of each test case contains a single integer\nN - size of the array\nA.\nSecond line of each test case contains\nN space separated integers - denoting the elements of array\nA.\nOutput Format\nFor each testcase, output in a single line, the maximum alternating sum Chef can obtain by performing the operation at most once.\nConstraints\n1\u2264T\u226410\n5\n2\u2264N\u226410\n5\n\u221210\n9\n\u2264A\ni\n\u226410\n9\nSum of\nN over all test cases does not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n2\n2\n10 -10\n7\n-3 -2 -1 0 1 2 3\n0\n6\nExplanation:\nTest Case\n1: One optimal way is to perform no operations. Thus the alternating sum is\n\u222310\u2223\u2212\u2223\u221210\u2223=10\u221210=0.\nTest Case\n2: One optimal way is to choose\ni=2 and\nj=5. After swapping, the array is\n[\u22123,1,\u22121,0,\u22122,2,3]. The alternating sum in this case is\n\u2223\u22123\u2223\u2212\u22231\u2223+\u2223\u22121\u2223\u2212\u22230\u2223+\u2223\u22122\u2223\u2212\u22232\u2223+\u22233\u2223=6.",
        "301": "String Game\nZlatan and Ramos are playing a game on a binary string\nS of length\nN.\nZlatan and Ramos make alternating moves with Zlatan going first.\nIn one move, a player will:\nSelect an index\ni\n(1\u2264i<N) such that\nS\ni\n\ue020\n=S\ni+1\nand delete both\nS\ni\nand\nS\ni+1\nfrom the string\nS. Note that\nN gets reduced by\n2 when both characters are deleted. If a player cannot select any such index\ni, he loses the game.\nDetermine the winner of the game if both players play optimally.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains an integer\nN \u2014 the length of the binary string.\nThe next line contains a binary string\nS of length\nN.\nOutput Format\nFor each test case, if Zlatan will win the game, output Zlatan. Otherwise, output Ramos.\nYou can output each letter of the string in uppercase or lowercase. For example, Ramos, ramos, RAMOS, and rAmOS are all considered same.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n5\n.\nS consists of\n0 and\n1 only.\nThe sum of\nN over all test cases won't exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n5\n1\n0\n2\n11\n2\n10\n3\n111\n3\n101\nRamos\nRamos\nZlatan\nRamos\nZlatan\nExplanation:\nTest case\n1: Zlatan goes first and has no move to make. Thus, Ramos wins.\nTest case\n2: Zlatan goes first and has no move to make. Thus, Ramos wins.\nTest case\n3: Zlatan goes first and selects\ni=1 where\nS\n1\n\ue020\n=S\n2\n. Thus, he removes\nS\n1\nand\nS\n2\n.\nSince the string is empty now, Ramos has no move to make and Zlatan wins.\nTest case\n4: Zlatan goes first and has no move to make. Thus, Ramos wins.\nTest case\n5: Zlatan goes first and selects\ni=1 where\nS\n1\n\ue020\n=S\n2\n. Thus, he removes\nS\n1\nand\nS\n2\n.\nSince the string only has length\n1 now, Ramos has no move to make and Zlatan wins.",
        "302": "Remove Element\nYou are given an array\nA=[A\n1\n,A\n2\n,\u2026,A\nN\n] consisting of\nN positive integers.\nYou are also given a constant\nK, using which you can perform the following operation on\nA:\nChoose two distinct indices\ni and\nj such that\nA\ni\n+A\nj\n\u2264K, and remove either\nA\ni\nor\nA\nj\nfrom\nA.\nIs it possible to obtain an array consisting of only one element using several (possibly, zero) such operations?\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains two space-separated integers\nN and\nK.\nThe second line contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n.\nOutput Format\nFor each test case, print \"YES\" if it is possible to obtain an array consisting of only one element using the given operation, otherwise print \"NO\".\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\nConstraints\n1\u2264T\u226410\n3\n1\u2264N\u226410\n5\n1\u2264A\ni\n,K\u226410\n9\nSum of\nN over all test cases does not exceed\n2\u22c510\n5\nSample 1:\nInput\nOutput\n3\n1 3\n1\n3 3\n2 2 2\n4 7\n1 4 3 5\nYES\nNO\nYES\nExplanation:\nTest case\n1: The length of the array is already\n1.\nTest case\n2: There is no way to delete an element from the given array.\nTest case\n3: One possible sequence of operations is:\nChoose\ni=1,j=4 and remove\nA\nj\n=5. Hence the array becomes\n[1,4,3].\nChoose\ni=2,j=3 and remove\nA\ni\n=4. Hence the array becomes\n[1,3].\nChoose\ni=1,j=2 and remove\nA\ni\n=1. Hence the array becomes\n[3], which is of length\n1.",
        "303": "Maximize Colours\nFor the human eye, primary colours are red, green, and blue.\nCombining\n1 drop each of any two primary colours produces a new type of secondary colour. For example, mixing red and green gives yellow, mixing green and blue gives cyan, and, mixing red and blue gives magenta.\nYou have\nX,Y, and\nZ drops of red, green, and blue colours respectively. Find the maximum total number of distinct colours (both primary and secondary) you can have at any particular moment.\nNote: You cannot mix a secondary colour with a primary or another secondary colour to get a new type of colour.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of three space separated integers\nX,Y, and\nZ, the number of drops of red, green, and blue colours respectively.\nOutput Format\nFor each test case, output on a new line the maximum total number of colours (both primary and secondary) you can have using the given primary colours.\nConstraints\n1\u2264T\u226410\n5\n0\u2264X,Y,Z\u2264100\nSample 1:\nInput\nOutput\n4\n1 0 1\n3 3 0\n1 1 1\n0 0 0\n2\n3\n3\n0\nExplanation:\nTest case\n1: We have\n1 drop each of red and blue colour. If we mix these colours, we will have magenta but no red or blue. Thus, to maximize the total number of colours, it is better that we keep the red and blue colours as it is. The maximum number of colours we can have is\n2.\nTest case\n2: We have\n3 drops each of red and green colour. We can use\n1 drop each of red and green to have yellow. We still have\n2 drops each of red and green left. Thus, we have\n3 different types of colours now.\nTest case\n3: If we mix any two colours, we will loose two colours and get only one colour in return. Thus, it is best to keep all colours as it is and keep\n3 different varieties of colours.\nTest case\n4: There are no types of colours available.",
        "304": "Fit to Play\nRayne Wooney has been one of the top players for his football club for the last few years. But unfortunately, he got injured during a game a few months back and has been out of play ever since.\nHe's got proper treatment and is eager to go out and play for his team again. Before doing that, he has to prove to his fitness to the coach and manager of the team. Rayne has been playing practice matches for the past few days. He's played N practice matches in all.\nHe wants to convince the coach and the manager that he's improved over time and that his injury no longer affects his game. To increase his chances of getting back into the team, he's decided to show them stats of any 2 of his practice games. The coach and manager will look into the goals scored in both the games and see how much he's improved. If the number of goals scored in the 2nd game(the game which took place later) is greater than that in 1st, then he has a chance of getting in. Tell Rayne what is the maximum improvement in terms of goal difference that he can show to maximize his chances of getting into the team. If he hasn't improved over time, he's not fit to play. Scoring equal number of goals in 2 matches will not be considered an improvement. Also, he will be declared unfit if he doesn't have enough matches to show an improvement.\nNote: Large input data. Use faster I\/O methods. Prefer scanf,printf over cin\/cout.\nInput Format\nThe first line of the input contains a single integer\nT, the number of test cases.\nEach test case begins with a single integer\nN, the number of practice matches Rayne has played.\nThe next line contains\nN integers. The\ni\nth\ninteger,\ng\ni\n, on this line represents the number of goals Rayne scored in his\ni\nth\npractice match. The matches are given in chronological order i.e.\nj>i means match number\nj took place after match number\ni.\nOutput Format\nFor each test case output a single line containing the maximum goal difference that Rayne can show to his coach and manager. If he's not fit yet, print \"UNFIT\".\nConstraints\n1\u2264T\u226410\n1\u2264N\u2264100000\n0\u2264g\ni\n\u22641000000 (Well, Rayne's a legend! You can expect him to score so many goals!)\nSample 1:\nInput\nOutput\n3\n6\n3 7 1 4 2 4\n5\n5 4 3 2 1\n5\n4 3 2 2 3\n4\nUNFIT\n1\nExplanation:\nIn the first test case, Rayne can choose the first and second game. Thus he gets a difference of 7-3=4 goals. Any other pair would give him a lower improvement. In the second test case, Rayne has not been improving in any match. Thus he's declared UNFIT.",
        "305": "Equality\nRead problems statements in Mandarin Chinese and Russian as well.\nAn equation is an equality containing one or more variables. Solving the equation consists of determining which values of the variables make the equality true. In this situation, variables are also known as unknowns and the values which satisfy the equality are known as solutions. An equation differs from an identity in that an equation is not necessarily true for all possible values of the variable.\nThere are many types of equations, and they are found in all areas of mathematics. For instance, a linear equation is an algebraic equation in which each term is either a constant or the product of a constant and (the first power of) a single variable.\nIn this problem we'll consider quite a special kind of systems of linear equations. To be more specific, you are given a system of N linear equations of the following form:\nx2 + x3 + ... + xN - 1 + xN = a1\nx1 + x3 + ... + xN - 1 + xN = a2\n...\nx1 + x2 + ... + xN - 2 + xN = aN - 1\nx1 + x2 + ... + xN - 2 + xN - 1 = aN\nIn other words, i'th equation of the system consists of the sum of all the variable x1, ..., xN except xi to the left of the equality sign and the constant ai to the right of the equality sign.\nOne can easily prove, that a system of linear equations as described above always have exactly one solution in case N is greater than one. Your task is to find the solution of the system(such a sequence x1, x2, ..., xN, that turns each of the equations into equality). It's guaranteed, that the solution of the system is a sequence consisting only of integers from the range [1, 108].\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of the test case description contains one integer N denoting the number of equations in the system.\nThe second line contains N integers a1, a2, ..., aN denoting the constants defining a system of linear equations, that you are asked to solve.\nOutput\nFor each test case, output a single line containing N integers: a sequence x1, x2, ..., xN, which is the solution of the system.\nConstraints\n1 \u2264 T \u2264 25000\n2 \u2264 N \u2264 50000\n1 \u2264 ai \u2264 5 \u00d7 1012\n1 \u2264 xi \u2264 108\nThe sum of all N in the input is not greater than 50000\nSample 1:\nInput\nOutput\n2\n3\n9 6 5\n4\n13 11 10 8\n1 4 5 \n1 3 4 6\nExplanation:\nIn the first test case, we can simply replace the variables with the values from the correct output to make sure, that all the conditions are satisfied:\nx2 + x3 = 4 + 5 = 9 = a1\nx1 + x3 = 1 + 5 = 6 = a2\nx1 + x2 = 1 + 4 = 5 = a3\nIn the second test case, we can repeat the same process to make sure, that all the conditions are satisfied:\nx2 + x3 + x4 = 3 + 4 + 6 = 13 = a1\nx1 + x3 + x4 = 1 + 4 + 6 = 11 = a2\nx1 + x2 + x4 = 1 + 3 + 6 = 10 = a3\nx1 + x2 + x3 = 1 + 3 + 4 = 8 = a4",
        "306": "Decreasing Srrnmieeda\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nYou are given two integers\nL and\nR. Find the smallest non-negative integer\nN such that\nN%L>N%(L+1)>\u2026>N%(R\u22121)>N%R.\nHere,\n% is the modulo operator, so\nA%B is the remainder of\nA after division by\nB. For example,\n11%3=2.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains two space-separated integers\nL and\nR.\nOutput\nFor each test case, print a single line containing one integer \u2015 the smallest possible\nN, or\n\u22121 if no solution exists.\nIt is guaranteed that when a solution exists, the smallest solution does not exceed\n10\n18\n.\nConstraints\n1\u2264T\u226410\n5\n1\u2264L<R\u226410\n6\nSample 1:\nInput\nOutput\n2\n4 6\n1 2\n6\n-1\nExplanation:\nExample case 1:\nN=6 satisfies the given condition, since\n6%4(=2)>6%5(=1)>6%6(=0). Notice that\nN=7 also satisfies the condition, but it is larger.\nExample case 2: It is impossible to find a valid solution because for any non-negative integer\nN, we have\nN%1(=0)\u2264N%2.",
        "307": "Parallel Processing\nThere are\nN tasks waiting in line to be executed. The execution time for the\ni\nth\ntask is\nA\ni\nseconds.\nChef has two processors to execute these\nN tasks. Both these processors work simultaneously. Each processor executes the assigned tasks one by one.\nChef assigns a prefix of these tasks to the first processor and the remaining tasks to the second processor.\nFor example, if there are\n3 tasks, Chef can do one of the following:\nAssign no task to the first processor. This means, the second processor will execute tasks\n1,2 and\n3.\nAssign task\n1 to the first processor. This means, the second processor will execute tasks\n2 and\n3.\nAssign tasks\n1 and\n2 to the first processor. This means, the second processor will execute task\n3.\nAssign tasks\n1,2 and\n3 to the first processor. Thus, second processor would execute no tasks.\nFind the minimum time in which all the tasks can be executed.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nThe first line of each test case contains a single integer\nN, the number of tasks waiting to be executed.\nThe second line of each test case contains\nN space separated positive integers\nA\n1\n,A\n2\n,\u2026,A\nN\ndenoting the execution time for each task.\nOutput Format\nFor each test case, output in a single line, the minimum time in which all tasks can be executed.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u226410\n5\n1\u2264A\ni\n\u226410\n5\nThe sum of\nN over all test cases is not more than\n2\u22c510\n5\n.\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n3\n3\n4 2 3\n6\n1 1 1 1 1 1\n1\n5\n5\n3\n5\nExplanation:\nTest Case 1: Chef assigns task\n1 to the first processor and tasks\n2 and\n3 to the second processor. The first processor takes\n4 seconds to execute task\n1. The second processor takes\n2+3=5 seconds to execute tasks\n2 and\n3. Thus, atleast\n5 seconds are required to execute all tasks.\nTest Case 2: Chef assigns tasks\n1,2 and\n3 to the first processor. Processes\n4,5 ad\n6 are executed by second processor.\nTest Case 3: Chef assigns task\n1 to the first processor. No task is executed by second processor.",
        "308": "Reversing directions\nChef recently printed directions from his home to a hot new restaurant across the town, but forgot to print the directions to get back home. Help Chef to transform the directions to get home from the restaurant.\nA set of directions consists of several instructions. The first instruction is of the form \"Begin on XXX\", indicating the street that the route begins on. Each subsequent instruction is of the form \"Left on XXX\" or \"Right on XXX\", indicating a turn onto the specified road.\nWhen reversing directions, all left turns become right turns and vice versa, and the order of roads and turns is reversed. See the sample input for examples.\nInput\nInput will begin with an integer T, the number of test cases that follow. Each test case begins with an integer N, the number of instructions in the route. N lines follow, each with exactly one instruction in the format described above.\nOutput\nFor each test case, print the directions of the reversed route, one instruction per line. Print a blank line after each test case.\nConstraints\n1 \u2264 T \u2264 15\n2 \u2264 N \u2264 40\nEach line in the input will contain at most 50 characters, will contain only alphanumeric characters and spaces and will not contain consecutive spaces nor trailing spaces. By alphanumeric characters we mean digits and letters of the English alphabet (lowercase and uppercase).\nSample 1:\nInput\nOutput\n2\n4\nBegin on Road A\nRight on Road B\nRight on Road C\nLeft on Road D\n6\nBegin on Old Madras Road\nLeft on Domlur Flyover\nLeft on 100 Feet Road\nRight on Sarjapur Road\nRight on Hosur Road\nRight on Ganapathi Temple Road\nBegin on Road D\nRight on Road C\nLeft on Road B\nLeft on Road A\nBegin on Ganapathi Temple Road\nLeft on Hosur Road\nLeft on Sarjapur Road\nLeft on 100 Feet Road\nRight on Domlur Flyover\nRight on Old Madras Road\nExplanation:\nIn the first test case, the destination lies on Road D, hence the reversed route begins on Road D. The final turn in the original route is turning left from Road C onto Road D. The reverse of this, turning right from Road D onto Road C, is the first turn in the reversed route.",
        "309": "Full Barrier Alchemist\nEdward Elric is chasing after Scar. To stop Edward, Scar creates\nN barriers in the way, numbered from\n1 to\nN. Each barrier Scar created is either one of the following two types.\nType 1 barrier - This barrier starts from a height\nX above the ground and extends till the sky.\nType 2 barrier - This barrier starts from the ground and extends up to height\nX above the ground.\nThe height of Edward is\nH units and he has an alchemic life force of\nL units. Moreover, he can duck by\nY\n1\nunits and jump by height\nY\n2\nunits (as explained in the figures). He starts crossing barriers in sequence, starting from barrier\n1 till the barrier\nN. Whenever he can't pass a barrier by ducking or jumping (considered passed even when the barrier just touches him), he uses Alchemy to break the barrier. However, this costs him a single unit of his alchemic life force.\nIf after breaking a barrier no life force is left, Edward gets completely exhausted, unable to pass that barrier.\nHow many barriers can Edward cross?\nAnd remember never to call him a pipsqueak if his height is too short!\nInput:\nThe first line contains\nT, the number of test cases. Then the test cases follow.\nFor each test case, the first line contains five integers\nN,\nH,\nY\n1\n,\nY\n2\nand\nL.\nThe i-th of the next\nN lines contains two integers\nt\ni\nand\nX\ni\nfor the\ni\nth\nbarrier where\nt\ni\n=1 denotes a Type 1 Barrier and\nt\ni\n=2 denotes a Type 2 barrier.\nOutput:\nFor each test case print a single line containing the number of barriers Edward can pass.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u226410\n3\n2\u2264H\u226410\n3\n1\u2264Y\n1\n<H\n1\u2264Y\n2\n\u226410\n3\n1\u2264L\u2264N\n1\u2264t\ni\n\u22642\n1\u2264X\ni\n\u226410\n3\nSample 1:\nInput\nOutput\n3\n6 5 1 2 3\n2 2\n2 1\n1 10\n2 8\n2 4\n1 2\n1 4 2 5 1\n2 6\n6 5 1 2 3\n2 2\n2 1\n1 10\n2 8\n2 4\n1 6\n5\n0\n6\nExplanation:\nTest Case 1:\nGiven\nN=6,\nH=5,\nY\n1\n=1,\nY\n2\n=2 and\nL=3.\nHe passes the first three barriers by either ducking or jumping. He uses alchemic life force for breaking\n4\nth\n,\n5\nth\nand\n6\nth\nbarriers because he cannot pass them by either jumping or ducking. He gets exhausted after breaking the\n6\nth\nbarrier and is unable to pass it. So, in total he passes\n5 barriers.",
        "310": "Balanced and Unique Arrays\nRead problem statements in Mandarin, Bengali, Russian, and Vietnamese as well.\nFor a positive,\neven integer\nN, we call a pair of arrays\nA and\nB to be interesting if they satisfy the following conditions :\n\u2223A\u2223=\u2223B\u2223=N\/2 i.e. the length of array\nA is equal to the length of array\nB.\nEach integer from\n1 to\nN occurs exactly once in exactly one of the arrays.\nThe\ni\nth\nprefix sum of\nA is not equal to\ni\nth\nprefix sum of\nB for all\n1\u2264i\u2264N\/2\u22121.\nFormally,\nj=1\n\u2211\ni\nA\nj\n!=\nj=1\n\u2211\ni\nB\nj\nfor all\n1\u2264i\u2264N\/2\u22121\nSum of all elements in\nA is equal to sum of all elements in\nB i.e.\nj=1\n\u2211\nN\/2\nA\nj\n=\nj=1\n\u2211\nN\/2\nB\nj\nYou are given a positive, even integer\nN. If there exists an interesting pair of arrays, then print \"YES\" followed by an interesting pair for this given\nN. If there exists multiple interesting pairs of arrays for given\nN, you can print any. Print \"NO\" in a single line if no such pair exists.\nInput Format\nFirst line of input will contain\nT, the number of test cases. Then the test cases follow.\nEach test case contains a single line of input, the integer\nN.\nOutput Format\nFor each test case, if there exists an interesting pair of arrays, say\n(A,B), then in the first line print \"YES\", in the second line print array\nA separated by spaces, and in third line print array\nB separated by spaces. Print \"NO\" in a single line if no such pair exists. If there are multiple answers, print any of them.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n5\nN is guaranteed to be even.\nSum of\nN over all test cases doesn't exceed\n10\n6\nSubtasks\nSubtask 1 (100 points): Original constraints\nSample 1:\nInput\nOutput\n2\n2\n4\nNO\nYES\n1 4\n2 3\nExplanation:\nTest case 2: Consider\nA=[1,4] and\nB=[2,3]. Every integer from\n1 to\n4 occurs exactly once in exactly one of the arrays. Also,\n1st prefix sum of\nA is not equal to\n1st prefix sum of\nB (\n1\n\ue020\n=2). And sum of the elements is equal to\n5 for both arrays. So,\n(A,B) is an interesting pair.",
        "311": "Maximum Angriness\nAlice and Bob were playing a game yet again but this time, Bob already lost the game. Now he wants to take revenge.\nBob saw a jigsaw puzzle which was solved by Alice and decided to jumble the puzzle pieces again. There are\nN puzzle pieces in a line numbered from\n1 to\nN in increasing order and he has\nK minutes before Alice catches him.\nBob can swap any two pieces of the puzzle. Each swap takes\n1 minute, and so Bob can make at most\nK swaps.\nLet\nA\ni\ndenote the piece in the\ni-th position after Bob finishes making his swaps.\nAlice's angriness is defined to be the number of pairs\n(i,j) such that\n1\u2264i<j\u2264N and\nA\ni\n>A\nj\n.\nBob would like to make Alice as angry as possible, so he asks for your help: if he performs his swaps optimally, what is the maximum angriness he can achieve?\nInput Format\nThe first line of input contains an integer\nT, denoting the number of test cases.\nThe first and only line of each test case contains two space-separated integers\nN and\nK: the number of pieces and the number of swaps Bob can make.\nOutput Format\nFor each test case, output on a new line a single integer: Alice's maximum possible angriness.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n9\n1\u2264K\u226410\n9\nSample 1:\nInput\nOutput\n4\n7 3\n1 4\n8 2\n5 3\n21\n0\n22\n10\nExplanation:\nTest case\n1:\nN=7, so the pieces are initially arranged as\n[1,2,3,4,5,6,7]. Bob can make\nK=3 swaps. One optimal way of swapping is as follows:\nFirst, swap\n2 and\n6. Now the pieces are\n[1,6,3,4,5,2,7]\nNext, swap\n1 and\n7. Now the pieces are\n[7,6,3,4,5,2,1]\nFinally, swap\n3 and\n5. Now the pieces are\n[7,6,5,4,3,2,1]\nThe angriness of this sequence is\n21, which is the maximum possible.\nTest case\n2:\nN=1, so no swaps can be made. The answer is always\n0.",
        "312": "Permutation Xority\nYou are given an integer\nN. Construct a permutation\nA of length\nN which is attractive.\nA permutation is called attractive if the bitwise XOR of all absolute differences of adjacent pairs of elements is equal to\n0.\nFormally, a permutation\nA=[A\n1\n,A\n2\n,\u2026,A\nN\n] of length\nN is said to be attractive if:\n\u2223A\n1\n\u2212A\n2\n\u2223\u2295\u2223A\n2\n\u2212A\n3\n\u2223\u2295\u2026\u2295\u2223A\nN\u22121\n\u2212A\nN\n\u2223=0\nwhere\n\u2295 denotes the bitwise XOR operation.\nOutput any attractive permutation of length\nN. If no attractive permutation exists, print\n\u22121 instead.\nNote: A permutation of length\nN is an array\nA=[A\n1\n,A\n2\n,\u2026,A\nN\n] such that every integer from\n1 to\nN occurs exactly once in\nA. For example,\n[1,2,3] and\n[2,3,1] are permutations of length\n3, but\n[1,2,1],\n[4,1,2], and\n[2,3,1,4] are not.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nEach test case consists of a single line of input, containing one integer\nN.\nOutput Format\nFor each test case, output on a single line an attractive permutation of\nN integers, or\n\u22121 if no attractive permutation exists.\nConstraints\n1\u2264T\u22641000\n2\u2264N\u226410\n5\nSum of\nN over all cases won't exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n2\n3\n6\n3 2 1\n5 2 3 6 4 1\nExplanation:\nTest Case\n1:\n\u22233\u22122\u2223\u2295\u22232\u22121\u2223=1\u22951=0\nNote that there are other correct answers \u2014 for example,\n[1,2,3] would also be accepted as correct.\nTest Case\n2:\n\u22235\u22122\u2223\u2295\u22232\u22123\u2223\u2295\u22233\u22126\u2223\u2295\u22236\u22124\u2223\u2295\u22234\u22121\u2223=3\u22951\u22953\u22952\u22953=0",
        "313": "Akash and Dinner\nAkash got his money from CodeChef today, so he decided to have dinner outside.\nHe went to a restaurant having\nN items on the menu. The\ni\nth\nitem on the menu belongs to the category\nA\ni\nand requires\nB\ni\ntime to be cooked.\nAkash wants to have a complete meal. Thus, his meal should have at least\nK distinct categories of food.\nThe total time required to get all the food Akash orders, is the sum of the cooking time of all the items in the order.\nHelp Akash find the minimum time required to have a complete meal or tell if it is not possible to do so.\nInput Format\nFirst line will contain\nT, the number of test cases. Then the test cases follow.\nEach test case contains three lines:\nThe first line of each test case contains two space-separated integers\nN and\nK, denoting the number of dishes on the menu and the number of distinct categories in a complete meal.\nThe second line contains\nN space-separated integers where the\ni\nth\ninteger is\nA\ni\n, denoting the category of the\ni\nth\ndish in the menu.\nThe third line contains\nN space-separated integers where the\ni\nth\ninteger is\nB\ni\n, denoting the time required to cook the\ni\nth\ndish in the menu.\nOutput Format\nFor each test case, output in a single line, the minimum time required to have a complete meal.\nIf it is impossible to have a complete meal, print\n\u22121 instead.\nConstraints\n1\u2264T\u2264100\n1\u2264N,K\u226410\n5\n1\u2264A\ni\n\u226410\n5\n0\u2264B\ni\n\u226410\n5\nThe sum of\nN over all test cases won't exceed\n10\n5\n.\nSample 1:\nInput\nOutput\n4\n3 1\n1 2 3\n2 1 3\n8 3\n1 3 2 2 4 1 3 5\n3 3 0 1 2 4 1 4\n1 1\n5\n1\n5 3\n1 1 2 2 1\n1 1 0 3 5\n1\n3\n1\n-1\nExplanation:\nTest case\n1: Akash can choose dish with index\n2 having category\n2. The total time required to get the complete meal is\n1.\nTest case\n2: Akash can choose dishes with index\n3,5, and\n7 from the menu.\nDish\n3: The dish has category\n2 and requires time\n0.\nDish\n5: The dish has category\n4 and requires time\n2.\nDish\n7: The dish has category\n3 and requires time\n1.\nThus, there are\n3 distinct categories and the total time to get the meal is\n0+2+1=3. It can be shown that this is the minimum time to get the complete meal.\nTest case\n3: Akash can choose the only available dish having category\n5. The total time required to get the complete meal is\n1.\nTest case\n4: The total number of distinct categories available is\n2, which is less than\nK. Thus, it is impossible to have a complete meal.",
        "314": "HTML Tags\nRead problem statements in Mandarin, Bengali, Russian, and Vietnamese as well.\nIn addition to Competitive Programming, Chef recently developed an interest in Web Dev and started learning HTML. Now he wants to create his own HTML Code Editor. As a subproblem, he wants to check if a typed HTML closing tag has correct syntax or not.\nA closing HTML tag must:\nStart with \"<\/\"\nEnd with \">\"\nHave only lower-case alpha-numeric characters as its body (between \"<\/\" and \">\"). That is, each character of the body should either be a digit or a lower-case English letter.\nHave a non-empty body.\nHelp Chef by printing \"Success\" if the tag is fine. If not, print \"Error\".\nInput Format\nThe first line contains an integer\nT, the number of test cases. Then\nT test cases follow.\nEach test case is a single line of input, a string describing the tag.\nOutput Format\nFor each test case, output in a single line, \"Success\" if it is a valid closing tag and \"Error\" otherwise (without quotes).\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"SuccEss\", \"success\", \"Success\", \"SUCCESS\" etc. will all be treated as identical).\nConstraints\n1\u2264T\u22641000\n1\u2264\nlength(Tag)\n\u22641000\nThe characters of the string belong to the ASCII range\n[33,126] (note that this excludes space.)\nSample 1:\nInput\nOutput\n5 \n<\/h1> \nClearly_Invalid \n<\/singlabharat> \n<\/5> \n<\/\/aA>\nSuccess \nError \nSuccess\nSuccess\nError\nExplanation:\nTest Cases\n1,3,4: The tags follow all mentioned constraints.\nTest Case\n2: The tag doesn't contain opening and closing symbols and also includes characters other than lower-case alpha-numeric characters in its body.\nTest Case\n5: The tag also includes an upper-case alpha-numeric character \"A\" and a non alpha-numeric character \"\/\" in its body.",
        "315": "Chef and Coins Game\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef is playing a game with his friend Misha. They have a pile containg N coins. Players take alternate turns, removing some coins from the pile. On each turn, a player can remove either one coin or coins equal to some prime power (i.e. px coins, where p - prime number and x - positive integer). Game ends when the pile becomes empty. The player who can not make a move in his turn loses.\nChef plays first. Your task is to find out who will win the game, provided that both of the player play optimally.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of each test case contains one integer N.\nOutput\nFor each test case, output a single line containing one word - the name of the winner of the game. Print \"Chef\" (without quotes) if Chef wins the game, print \"Misha\" (without quotes) otherwise.\nConstraints\n1 \u2264 T \u2264 1000\n1 \u2264 N \u2264 109\nSubtasks\nSubtask #1 (20 points):\n1 \u2264 N \u2264 10\nSubtask #2 (30 points):\n1 \u2264 N \u2264 104\nSubtask #3 (50 points): No additional constraints.\nSample 1:\nInput\nOutput\n2\n1\n8\nChef\nChef\nExplanation:\nExample case 1. Chef will remove the only coin from the pile and will win the game.\nExample case 2. Chef will remove all 8 coins from the pile and win the game. Chef can remove 8 coins because 8 is a prime power, as 8 = 23.",
        "316": "Make Array Odd\nYou are given an array\nA and an integer\nX. You are allowed to perform the following operation on the array:\nSelect two distinct indices\ni and\nj and set both\nA\ni\nand\nA\nj\nas\n((A\ni\n\u2295A\nj\n)\u2223X) simultaneously. Here\n\u2295 and\n\u2223 denote the bitwise XOR and bitwise OR operations respectively.\nFind the minimum number of operations required to make all elements of the array odd. If it is not possible to do so, print\n\u22121 instead.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains two space-separated integers\nN, the size of the array and\nX.\nThe next line contains\nN space-separated integers denoting the elements of the array\nA.\nOutput Format\nFor each test case, output on a new line, the minimum number of operations required to make all elements of the array odd. If it is not possible to do so, print\n\u22121 instead.\nConstraints\n1\u2264T\u226410\n5\n2\u2264N\u226410\n5\n0\u2264X<2\n30\n0\u2264A\ni\n<2\n30\nThe sum of\nN over all test cases won't exceed\n10\n5\n.\nSample 1:\nInput\nOutput\n2\n3 6\n5 7 9\n5 4\n2 3 4 17 9\n0\n2\nExplanation:\nTest case\n1: All elements are already odd. Thus, the number of operation required will be\n0.\nTest case\n2: We can make all elements odd using\n2 operations -\nIn first operation, we choose\ni=1,j=5.\nHere,\n(A\ni\n\u2295A\nj\n)\u2223X=(2\u22959)\u22234=11\u22234=15. Thus, the new array becomes\n[15,3,4,17,15].\nIn second operation, we choose\ni=4,j=3.\nHere,\n(A\ni\n\u2295A\nj\n)\u2223X=(17\u22954)\u22234=21\u22234=21. Thus, the new array becomes\n[15,3,21,21,15].\nAll elements of the array are odd now. It can be shown that we cannot achieve this in less than\n2 operations.",
        "317": "Cutting Pizza\nVasya has ordered a pizza delivery. The pizza can be considered a perfect circle. There were\nn premade cuts in the pizza when it was delivered. Each cut is a straight segment connecting the center of the pizza with its boundary.\nLet\nO be the center of the pizza,\nP\ni\nbe the endpoint of the\ni-th cut lying on the boundary, and\nR be the point of the boundary straight to the right of\nO. Then the counterclockwise-measured angle\n\u2220ROP\ni\nis equal to\na\ni\ndegrees, where\na\ni\nis an integer between\n0 and\n359. Note that angles between\n0 and\n180 angles correspond to\nP\ni\nin the top half of the pizza, while angles between\n180 and\n360 angles correspond to the bottom half.\nVasya may cut his pizza a few more times, and the new cuts still have to be straight segments starting at the center. He wants to make the pizza separated into several equal slices, with each slice being a circular sector with no cuts inside of it. How many new cuts Vasya will have to make?\n###Input:\nThe first line of input contains\nT , i.e number of test cases per file.\nThe first line of each test case contains a single integer\nn\u2212 the numbers of premade cuts (\n2\u2264n\u2264360).\nThe second lines contains\nn integers\na\n1\n,\u2026,a\nn\n\u2212 angles of the cuts\n1,\u2026,n respectively (\n0\u2264a\n1\n<\u2026,a\nn\u22121\n<360).\n###Output: Print a single integer\n\u2212 the smallest number of additional cuts Vasya has to make so that the pizza is divided into several equal slices.\n###Constraints\n1\u2264T\u226436\n2\u2264n\u2264360\n0\u2264a\n1\n<\u2026,a\nn\u22121\n<360\nSample 1:\nInput\nOutput\n3\n4 \n0 90 180 270\n2\n90 210\n2\n0 1\n0\n1\n358\nExplanation:\nIn the first sample the pizza is already cut into four equal slices.\nIn the second sample the pizza will be cut into three equal slices after making one extra cut at\n330 degrees.\nIn the third sample Vasya will have to cut his pizza into\n360 pieces of\n1 degree angle each.",
        "318": "Counting Flags\nRead problems statements in Mandarin Chinese and Russian as well.\nMike is a famous traveler. He visits about 100 countries a year and buys the flag of each country he has been to.\nMike knows, that there are some flags, that correspond to one pattern, but colored in different ways. E.g. the flag of Ireland(link) and the flag of Belgium(link). In this problem we consider only five 2,2cm\u27151,1cm patterns of flags:\nThere are N different colors available to paint the flags and the colors are denoted by integers from 1 to N.\nMike wants you to count the number of different well-painted flags. We call a flag well-painted if it's made according to the following algorithm:\nPick up one of the flag patterns considered above;\nPaint each one-colored polygon on the pattern in a color encoded by an integer from 1 to N. Different colors are encoded with different integers. If two different one-colored polygons share a common side(not corner), than they must be painted in different colors. In any other case they can be painted in both equal and different colors.\nTwo flags are different, if they look different(have at least one pixel painted with different color).\nHelp Mike!\nText version of the pictures:\nPicture 1\n112233\n\n112233\n\n112233\n111111\n\n222222\n\n333333\n112222\n\n112222\n\n113333\n122223\n\n111333\n\n144443\n111222\n\n333222\n\n333444\nPicture 2\n112211\n\n112211\n\n112211\n221122\n\n221122\n\n221122\n111111\n\n222222\n\n111111\n222222\n\n111111\n\n222222\nInput\nThe first line of the input contains integer T, denoting the number of testcases. The description of T testcases follows.\nThe only line of each test case contains integer N, denoting the number of different colors, that can be used while painting a flag pattern.\n  Output\nFor each testcase, output a single line containing an integer - the answer for the corresponding query.\n  Constraints\n1 \u2264 T \u2264 10 000;\n1 \u2264 N \u2264 10 000 for each testcase.\n  Sample 1:\nInput\nOutput\n3\n1\n2\n3\n0\n4\n42\nExplanation:\nThere are four different well-painted flags for N = 2 different colors :",
        "319": "Control the Pollution\nThere are two types of vehicles in Chefland.\nBus which has a capacity of\n100 people.\nCar which has a capacity of\n4 people.\nThere are\nN people who want to travel from place\nA to place\nB. You know that a single bus emits\nX units of smoke while a single car emits\nY units of smoke in their journey from\nA to\nB.\nYou want to arrange some buses and cars to carry all these\nN people such that total smoke emitted is minimized. Output the minimized smoke value.\nInput Format\nFirst line will contain\nT, the number of test cases. Then the test cases follow.\nEach test case contains three integers\nN,\nX,\nY - the number of people who want to travel, the units of smoke emitted by a bus and the units of smoke emitted by a car respectively.\nOutput Format\nFor each test case, output the minimum units of smoke emitted in transporting the\nN people.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u22641000\n1\u2264X,Y\u22641000\nSample 1:\nInput\nOutput\n3\n9 40 8\n15 20 20\n105 80 10\n24\n20\n100\nExplanation:\nTest case-1: In the optimal case, we will use\n3 cars where the\n1-st and\n2-nd car will carry\n4 people each and the\n3-rd car will carry\n1 person.\nTherefore smoke emitted\n=3\u00d78=24 units.\nTest case-2: In the optimal case, we will use\n1 bus to carry all the\n15 people.\nTherefore smoke emitted\n=1\u00d720=20 units.\nTest case-3: In the optimal case, we will use\n1 bus to carry\n100 people and use\n2 cars to carry the remaining\n5 people.\nTherefore smoke emitted\n=1\u00d780+2\u00d710=100 units.",
        "320": "Yet another SOD problem\nRead problem statements in Mandarin, Bengali, Russian, and Vietnamese as well.\nUjan is a software developer. He is developing a software that takes two integers\nL and\nR and outputs the count of integers in the sequence\nL,L+1,\u2026,R\u22121,R whose sum of digits (SOD) is divisible by\n3.\nHe has developed the user interface (UI) quite easily. He is having a hard time finding the logic to solve the problem. As you are not only a good friend of Ujan but also a good problem solver, he asks you to help him out.\nCan you solve the problem for your friend, Ujan?\nInput Format\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe only line of each test case contains two integer\nL,R.\nOutput Format\nFor each test case, print a single line containing one integer equal to the count of of integers in the sequence, whose sum of digits is divisible by\n3 .\nConstraints\n1\u2264T\u226410\n4\n1\u2264L\u2264R\u226410\n18\nSubtasks\nSubtask\n1 (\n100 points): Original constraints\nSample 1:\nInput\nOutput\n5\n139 141\n100 1235\n1000 2537\n998244353 1000000007\n27182818284 31415926535897\n1\n378\n512\n585218\n10462914572538\nExplanation:\nTest case 1: The numbers are\n139,\n140 and\n141. Their sum of digits is\n13,\n5 and\n6 respectively. So, only\n141 is the number that has its sum of digits divisible by\n3.",
        "321": "Triangle Classification\nRead problems statements in Mandarin Chinese , Russian and Vietnamese as well.\nTriangle classification is an important problem in modern mathematics. Mathematicians have developed many criteria according to which a triangle can be classified. In this problem, you will be asked to classify some triangles according to their sides and angles.\nAccording to their measure, angles may be:\nAcute \u2014 an angle that is less than 90 degrees\nRight \u2014 a 90-degrees angle\nObtuse \u2014 an angle that is greater than 90 degrees\nAccording to their sides, triangles may be:\nScalene \u2014 all sides are different\nIsosceles \u2014 exactly two sides are equal\nAccording to their angles, triangles may be:\nAcute \u2014 all angles are acute\nRight \u2014 one angle is right\nObtuse \u2014 one angle is obtuse\nTriangles with three equal sides (equilateral triangles) will not appear in the test data.\nThe triangles formed by three collinear points are not considered in this problem. In order to classify a triangle, you should use only the adjactives from the statement. There is no triangle which could be described in two different ways according to the classification characteristics considered above.\nInput\nThe first line of input contains an integer SUBTASK_ID denoting the subtask id this input belongs to.\nThe second line of input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of each test case contains six integers x1, y1, x2, y2, x3 and y3 denoting Cartesian coordinates of points, that form the triangle to be classified.\nIt is guaranteed that the points are non-collinear.\nOutput\nFor each test case, output a single line containing the classification of the given triangle.\nIf SUBTASK_ID equals 1, then the classification should follow the \"<Side classification starting with a capital letter> triangle\" format.\nIf SUBTASK_ID equals 2, then the classification should follow the \"<Side classification starting with a capital letter> <angle classification> triangle\" format.\nPlease, check out the samples section to better understand the format of the output.\nConstraints\n1 \u2264 T \u2264 60\n|xi|, |yi| \u2264 100\nSubtask 1 (50 points): no additional constraints\nSubtask 2 (50 points): no additional constraints\nNote\nThe first test of the first subtask and the first test of the second subtask are the example tests (each in the corresponding subtask). It's made for you to make sure that your solution produces the same verdict both on your machine and our server.\nTip\nConsider using the following condition in order to check whether two floats or doubles A and B are equal instead of traditional A == B: |A - B| < 10-6.\nSample 1:\nInput\nOutput\n1\n2\n0 0 1 1 1 2\n3 0 0 4 4 7\nScalene triangle\nIsosceles triangle\nSample 2:\nInput\nOutput\n2\n6\n0 0 4 1 1 3\n0 0 1 0 1 2\n0 0 1 1 1 2\n0 0 2 1 1 2\n3 0 0 4 4 7\n0 0 2 1 4 0\nScalene acute triangle\nScalene right triangle\nScalene obtuse triangle\nIsosceles acute triangle\nIsosceles right triangle\nIsosceles obtuse triangle",
        "322": "Chef and Adventures\n###Read problems statements Hindi ,Bengali , Mandarin chinese , Russian and Vietnamese as well.\nMysterious Chefland... Recently, Chef realised that Discuss, the educational system of Chefland, is out of date. Therefore, he is trying to find ways to update the infrastructure in the country. One possible way is to move all materials from Discuss to Discourse.\nChef will have access to Discourse if his knowledge and power become exactly equal to\nN and\nM respectively. Initially, he has power\n1 and knowledge\n1.\nChef can perform actions of the following types to improve his skills:\nsolve a problem \u2014 increase his knowledge by\nX\ndo a push-up \u2014 increase his power by\nY\ninstall ShareChat to keep in touch with friends \u2014 increase both knowledge and power by\n1\nChef can only install ShareChat at most once. The remaining actions may be performed any number of times and the actions may be performed in any order.\nHelp Chef find out whether it is possible to move from Discuss to Discourse.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains four space-separated integers\nN,\nM,\nX and\nY.\nOutput\nFor each test case, print a single line containing the string \"Chefirnemo\" if it is possible to reach the required knowledge and power or \"Pofik\" if it is impossible.\nConstraints\n1\u2264T\u22641,000\n1\u2264N,M,X,Y\u226410\n9\nSubtasks\nSubtask #1 (30 points):\n1\u2264N,M,X,Y\u2264100\nSubtask #2 (70 points): original constraints\nSample 1:\nInput\nOutput\n5\n2 2 1 2\n11 10 5 9\n11 11 5 9\n12 11 5 9\n1 2 1 100\nChefirnemo\nChefirnemo\nPofik\nChefirnemo\nPofik\nExplanation:\nExample case 2: We add\nY=9 once to the power to get power\n10. We add\nX=5 twice to the knowledge to get knowledge\n11.\nExample case 3: We can see that it is impossible to reach power\nM=11 no matter which or how many operations we do. Note that the ShareChat operation will increase both knowledge and power by\n1, and hence it will still be impossible to attain the given values of knowledge and power at the same time.\nExample case 4: We can reach knowledge\n11 and power\n10 like in example case 2, the only difference is that we also use the ShareChat operation to increase both by\n1.",
        "323": "Magical Planks\nRyan is a boy from a small town, who has been given a task by his father. He has\nN wooden planks, numbered from\n1 to\nN, which are colored either black or white.\nHis task is to color all planks the same color! But there is some magic in the winds of his small town. Whenever he colors the\ni\nth\n( plank which has the color\nS\ni\n) to a color\nP then following events happen:\nif\n2\u2264i\u2264N and\nS\ni\n=S\ni\u22121\n, then color of\n(i\u22121)\nth\nplank changes to\nP.\nif\n1\u2264i\u2264N\u22121 and\nS\ni\n=S\ni+1\n, then color of\n(i+1)\nth\nplank changes to\nP.\nNow this process continues for the newly colored planks also. If none of the neighbors have same color, then nothing happens to the neighbors.\nSuppose Ryan has planks which have their coloring :\nBBWWWB If Ryan colors the fourth plank( whose color is\nW ) to color\nB, then the finally the planks would be colored as following:\nBBBBBB\nRyan can choose any one of the\nN planks and change its color as many times as he wants. Determine the minimum number of times Ryan has to paint a plank such that all planks get the same color at the end.\nInput Format\nFirst line will contain\nT, number of testcases. Then the testcases follow.\nThe first line of each test case consists of an integer\nN the number of planks\nSecond line of each test case consists of a string\nS of size\nN,where the\ni th character denotes the color of plank\ni\nOutput Format\nFor each testcase, output a single integer denoting the minimum number of times Ryan has to paint a single plank such that all planks get the same color at the end.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n5\nS consists only of characters\nB and\nW\nThe sum of\nN over all cases doesn't exceed\n10\n5\n.\nSample 1:\nInput\nOutput\n4\n6\nBBWWWB\n5\nWWBWB\n2\nBB\n9\nWWBBBBBWW\n1\n2\n0\n1\nExplanation:\nTest case 1: The first test case is already described in the question.\nTest case 2: Ryan can paint the third plank to\nW. After doing so the color string of planks become\nWWWWB. Then he can again paint the third plank to the color\nB. After doing so the string goes through following transitions:\nThe color of third plank changes to\nB. ( The string becomes\nWWBWB )\nThe color of second and fourth plank changes to\nB. ( The string becomes\nWBBBB )\nThe color of first plank changes to\nB. ( The string becomes\nBBBBB )\nFinally, all planks have same color.\nTest case 3: All planks have the same color.\nTest case 4: Ryan can paint any of the planks numbered from\n3 to\n7 to\nW, and all these planks will be colored to\nW!",
        "324": "Approximately II\nRead problems statements in Mandarin Chinese and Russian.\nYou are given an array of N integers a1, a2, ..., aN and an integer K. Find the number of such unordered pairs {i, j} that\ni \u2260 j\n|ai + aj - K| is minimal possible\nOutput the minimal possible value of |ai + aj - K| (where i \u2260 j) and the number of such pairs for the given array and the integer K.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case consists of two space separated integers - N and K respectively.\nThe second line contains N single space separated integers - a1, a2, ..., aN respectively.\nOutput\nFor each test case, output a single line containing two single space separated integers - the minimal possible value of |ai + aj - K| and the number of unordered pairs {i, j} for which this minimal difference is reached.\nConstraints\n1 \u2264 T \u2264 50\n1 \u2264 ai, K \u2264 109\nN = 2 - 31 point.\n2 \u2264 N \u2264 1000 - 69 points.\n  Sample 1:\nInput\nOutput\n1 \n4 9\n4 4 2 6\n1 4\nExplanation:\nThe minimal possible absolute difference of 1 can be obtained by taking the pairs of a1 and a2, a1 and a4, a2 and a4, a3 and a4.",
        "325": "Magic Set\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\nKatya has a sequence of integers\na\n1\n,a\n2\n,\u2026,a\nn\nand an integer\nm.\nShe defines a good sequence of integers as a non-empty sequence such that the sum of the elements in each of its non-empty subsequences is divisible by\nm.\nKatya wants to know the number of good subsequences of the sequence\na. Can you help her?\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains two space-separated integers\nn and\nm.\nThe second line contains\nn space-separated integers\na\n1\n,a\n2\n,\u2026,a\nn\n.\nOutput\nFor each test case, print a single line containing one integer \u2014 the number of good subsequences.\nConstraints\n1\u2264T\u22641,000\n1\u2264n\u226430\n1\u2264m\u22641,000\n1\u2264a\ni\n\u22641,000 for each valid\ni\nSubtasks\nSubtask #1 (30 points):\n1\u2264n\u22645\nSubtask #2 (70 points): original constraints\nSample 1:\nInput\nOutput\n2\n2 3\n1 2\n2 3\n1 3\n0\n1\nExplanation:\nExample case 1: There are no good subsequences.\nExample case 2: There is exactly one good subsequence of\na:\n[3].",
        "326": "Chef and Three Dogs\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef has three dogs sitting at the vertices of an equilateral triangle. The length of each side of the triangle equals to s meters. Chef gives the command \"Start!\" and each dog starts to run with constant speed v meters per second. At each moment, each dog is running towards the dog just right to him (in counter-clockwise direction). Therefore, their trajectories are forming some spirals that converging to one point as illustrated below.\nHow long does it takes dogs to meet each other after the command \"Start!\"?\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of each test case contains two space-separated integers s and v.\nOutput\nFor each test case, output a single line containing a real number corresponding to the answer of the problem. The answer will be considered correct if its absolute or relative error does not exceed 10-6.\nConstraints\n1 \u2264 T \u2264 10\n1 \u2264 s, v \u2264 109\nSubtasks\nSubtask #1 (40 points): 1 \u2264 s, v \u2264 10\nSubtask #2 (60 points): original constraints\nSample 1:\nInput\nOutput\n2\n2 5\n1 1000000000\n0.266667\n0.0000001\nExplanation:\nDue to the triangle being very small, but the dogs running extremely fast, they will meet after less than 1e-6 seconds. Thus, due to remark about absolute or relative error in the output section, any answer within [0, 1e-6] will be considered correct.",
        "327": "Order by XOR\nYou are given three distinct integers\nA,B, and\nC.\nFind any integer\nX (0\u2264X<2\n30\n) such that:\n(A\u2295X)<(B\u2295X)<(C\u2295X), where\n\u2295 denotes the Bitwise XOR operation.\nIf no such\nX exists, print\n\u22121 instead.\nInput Format\nThe first line of the input contains a single integer\nT, the number of test cases.\nThe first and only line of each test case contains three space-separated integers\nA,B, and\nC.\nOutput Format\nFor each test case, output a single integer on a new line, the value of\nX that satisfies the above conditions or\n\u22121 if no such\nX exists.\nIf multiple such\nX satisfy the condition, you may print any.\nConstraints\n1\u2264T\u226410\n5\n1\u2264A,B,C<2\n30\nA,B,C are distinct.\nSample 1:\nInput\nOutput\n3\n1 2 3\n3 1 2\n3 2 1\n4\n-1\n3\nExplanation:\nTest case\n1: For\nX=4,\nA\u2295X=1\u22954 =5\nB\u2295X=2\u22954 =6\nC\u2295X=3\u22954 =7\nThus,\n(A\u2295X)<(B\u2295X)<(C\u2295X).\nTest case\n2: No\nX (0\u2264X<2\n30\n) exists that satisfies the above conditions.\nTest case\n3: For\nX=3,\nA\u2295X=3\u22953 =0\nB\u2295X=2\u22953 =1\nC\u2295X=1\u22953 =2\nThus,\n(A\u2295X)<(B\u2295X)<(C\u2295X).",
        "328": "Chef and Numbers\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef likes problems related to numbers a lot. He is generally quite good at solving these kinds of problems, but today he got stuck at one number theory problem, and so he asks your help to solve it.\nGiven a positive integer N, find out how many positive integers X satisfy the equation X + S(X) + S(S(X)) = N, where S(X) denoting sum of digits of X in decimal (base 10) representation.\nInput\nThe only line of the input contains one integer number - N.\nOutput\nOutput single integer in a line denoting the count of number of positive integers X satisfying the above given equation.\nConstraints\n1 \u2264 N \u2264 109\nSample 1:\nInput\nOutput\n6\n1\nExplanation:\nExample 1. Only one positive integer X = 2 satisfies the equation X + S(X) + S(S(X)) = 6, as X + S(X) + S(S(X)) = 2 + 2 + 2 = 6.\nSample 2:\nInput\nOutput\n9939\n4\nExplanation:\nExample 2.X can be 9898, 9907, 9910 and 9913.\n9898 + S(9898) + S(S(9898)) = 9898 + 34 + 7 = 9939\n9907 + S(9907) + S(S(9907)) = 9907 + 25 + 7 = 9939\n9910 + S(9910) + S(S(9910)) = 9910 + 19 + 10 = 9939\n9913 + S(9913) + S(S(9913)) = 9913 + 22 + 4 = 9939\nYou can verify that there is not other positive value of X satisfying the given equation.",
        "329": "Majin Vegeta\nBabidi has summoned Majin Vegeta. He orders him to kill Supreme Kai. But Vegeta wants to get out of his control.\nBabidi has laid out a trap. Vegeta is standing at the\nnth level of mind control. In order to defeat Babidi's trap, he needs to reach\nmth level. The levels are continuous increasing integers. At each increment of level,\nnth to\n(n+1)th level, for example, the energy used is - number of distinct prime factors of\nn.\nVegeta needs your help in order to figure out how much total minimum energy he needs to defeat Babidi's trap. The total energy is the sum of energy used at each increment of a level.In the calculation of energy,\nn and\nm are inclusive.\n###Input:\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follow.\nThe first and only line of each test case contains the two integers\nn and\nm, separated by a single space.\n###Output: For each test case, print a single line containing one integer denoting the energy needed by Vegeta to escape Babidi's mind control and continue his battle with Kakarot.\n###Constraints\n1\u2264T\u22642\n1\u2264n\u2264m\u226410\n6\nSample 1:\nInput\nOutput\n2\n3 7\n1 1023\n5\n2177\nExplanation:\nExample case 1: Vegeta is standing at\nn=3. As he moves from 3 to 4, energy used is 1. From 4 to 5, energy used is 1. Similarly, as he continues to move towards m=7, the total energy used is 1+1+1+2=5.",
        "330": "Digital clock\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\n3:33\nIt's possible for all the digits displayed on a digital clock in the hours:minutes format to be identical. The time shown above (3:33) is an example of such a situation. Other examples are 2:2 and 1:11. Note that the digits of 33:33 are identical, but it is not a valid time on a usual digital clock.\nThe above example was for a usual 24-hour format digital clock. Let's consider a more general clock, where an hour lasts M minutes and a day lasts H hours (therefore, the clock can show any number of hours between 0 and H-1, inclusive, and any number of minutes between 0 and M-1, inclusive). Both the hours and the minutes are shown without leading zeroes in decimal notation and their separator (e.g., ':') doesn't matter.\nCan you tell how many minutes during a day will the digital clock have identical digits displayed on it?\nInput\nThe first line of the input contains an integer T - the number of test cases.\nEach of the next T lines contains two space-separated integers H and M for one test case.\nOutput\nFor each test case, output a single line corresponding to the answer of the problem.\nConstraints\n1 \u2264 T \u2264 50\n1 \u2264 H, M \u2264 100\nSample 1:\nInput\nOutput\n6\n24 60\n34 50\n10 11\n10 12\n11 11\n1 1\n19\n20\n10\n11\n10\n1\nExplanation:\nExample case 1. A clock shows two identical digits at times 0:0, 1:1, .., 9:9, three identical digits at times 11:1, 22:2, 1:11, 2:22, 3:33, 4:44, 5:55, and four identical digits at times 11:11 and 22:22. So, there are 19 minutes during which the time displayed by the clock will have identical digits.\nExample case 2. Compared to the previous case, the clock doesn't show 5:55, but can show 33:3 and 33:33.\nExample case 6. In this example, our day consists of one hour and one hour consists of one minute. Hence, the entire day is just 1 minute - the only time the digital clock will display is 0:0 during the entire day, (i.e. the entire hour, i.e. entire minute). And 0:0 has all digits identical, so the answer is 1.",
        "331": "Alternating Divisibility\nJJ challenges the Chef to construct an array\nA of length\nN such that the following conditions hold:\nA\ni\ndivides\nA\ni+1\nwhen\ni is odd and\n1\u2264i\u2264N\u22121\nA\ni\ndoes not divide\nA\ni+1\nwhen\ni is even and\n1\u2264i\u2264N\u22121\n1\u2264A\ni\n\u22642\u22c5N\nAll\nA\ni\nare pairwise distinct\nCan you help Chef complete JJ's challenge?\nIf multiple arrays satisfying the above conditions exist print any one of them.\nIt is guaranteed that under the given constraints, at least one array satisfying the above conditions exists.\nInput Format\nThe first line will contain\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains an integer\nN - the length of the array\nA to be constructed.\nOutput Format\nFor each test case, output a single line containing\nN space-separated integers, denoting the elements of the array\nA you constructed.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u226410\n5\nIt is guaranteed that the sum of\nN over all test cases does not exceed\n5\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n4\n1\n6\n1 3 2 4\n2\n1 5 6 12 3 9\nExplanation:\nTest case-1:\n[1,3,2,4] is a valid array because:\nA\n1\n=1 divides\nA\n2\n=3.\nA\n2\n=3 does not divide\nA\n3\n=2.\nA\n3\n=2 divides\nA\n4\n=4.\nTest case-3:\n[1,5,6,12,3,9] is a valid array because:\nA\n1\n=1 divides\nA\n2\n=5.\nA\n2\n=5 does not divide\nA\n3\n=6.\nA\n3\n=6 divides\nA\n4\n=12.\nA\n4\n=12 does not divide\nA\n5\n=3.\nA\n5\n=3 divides\nA\n6\n=9.",
        "332": "Jogging\nAlice jogs everyday to keep herself fit and active. She noticed that she burns\nX calories when jogging the first kilometer, and for\nK>1, jogging the\nK\nth\nkilometer burns calories equivalent to the total number of calories burned while jogging the first\nK\u22121 kilometers.\nWhat is the total number of calories that Alice burns after jogging for\nN kilometers? The answer can be very large, so report it modulo\n10\n9\n+7 (\n1000000007).\nInput Format\nThe first line of input will contain an integer\nT \u2014 the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains two space-separated integers\nN and\nX, as described in the problem statement.\nOutput Format\nFor each test case, output on a new line the total number of calories that Alice burns after jogging for\nN kilometers, modulo\n10\n9\n+7.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n6\n1\u2264X\u2264100\nSample 1:\nInput\nOutput\n3\n1 2\n2 1\n12548 1\n2\n2\n588809226\nExplanation:\nTest case\n1: Alice only jogs one kilometer, which burns\n2 calories since\nX=2.\nTest case\n2: Alice jogs two kilometers. The first burns\nX=1 calorie, and the second also burns\n1 calorie since the total amount burnt before this is\n1 calorie. So, the total is\n1+1=2 calories burned.",
        "333": "Correct Sentence\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef knows about two languages spoken in Chefland, but he is not proficient in any of them. The first language contains lowercase English letters between 'a' and 'm' inclusive and the second language contains only uppercase English letters between 'N' and 'Z' inclusive.\nDue to Chef's limited vocabulary, he sometimes mixes the languages when forming a sentence \u2014 each word of Chef's sentence contains only characters from one of the languages, but different words may come from different languages.\nYou are given a sentence as a sequence of\nK words\nS\n1\n,S\n2\n,\u2026,S\nK\n. Determine whether it could be a sentence formed by Chef, i.e. if it contains only the characters from the two given languages and each word contains only characters from a single language.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains an integer\nK followed by a space and\nK space-separated strings\nS\n1\n,S\n2\n,\u2026,S\nK\n.\nOutput\nFor each test case, print a single line containing the string \"YES\" if the given sentence can be formed by Chef or \"NO\" if it cannot.\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\nConstraints\n1\u2264T\u226410\n5\n1\u2264K\u226410\n1\u2264\u2223S\ni\n\u2223\u2264100 for each valid\ni\nthe sum of lengths of all the strings on the input does not exceed\n10\n5\neach string contains only lowercase and uppercase English letters\nSample 1:\nInput\nOutput\n3\n1 aN\n2 ab NO\n3 A N D\nNO\nYES\nNO\nExplanation:\nExample case 1: A single word cannot contain characters from both languages.\nExample case 2: This could be a sentence formed by Chef since each word contains only characters from a single language.\nExample case 3: Letters 'A' and 'D' do not belong to either of the two languages.",
        "334": "Chef Odd\nYou want to partition the set\nS={1,2,\u2026,N} into\nK sets\nS\n1\n,S\n2\n,\u2026,S\nK\n, such that\n\u2223S\ni\n\u2223\u22652, and the sum of elements in each\nS\ni\nis odd.\nIs it possible to do so?\nNote 1: Partitioning the set\nS={1,2,\u2026,N} into\nK sets\nS\n1\n,S\n2\n,\u2026,S\nK\nmeans that every element of\nS should be in exactly one of the sets\nS\n1\n,S\n2\n,\u2026,S\nK\n, and\nS\ni\n\u2286S, for all\n1\u2264i\u2264K.\nNote 2:\n\u2223A\u2223 denotes the number of elements in the set\nA.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first line and only line of each test case contains two space-separated integers,\nN and\nK.\nOutput Format\nFor each test case, output YES if you can partition the set satisfying the requirements. Otherwise, output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n1\u2264T\u226410\n5\n2\u2264N\u226410\n18\n1\u2264K\u226410\n18\nSample 1:\nInput\nOutput\n2\n5 2\n14 5\nNO\nYES\nExplanation:\nTest case\n1: There is no way you can partition\n{1,2,3,4,5} into\n2 subsets such that each has an odd sum and each subset contains at least\n2 integers.\nTest case\n2: One of the ways to partition is\n{1,4,6,12},{2,5},{3,14},{7,10,11,13},{9,8}. The sum of elements in each subset is\n23,7,17,41,17, each of which is odd and each subset contains at least\n2 integers.",
        "335": "Weird Palindrome Making\nRead problem statements in Bengali, Russian, Mandarin and Vietnamese as well.\nNaveej is from a tribe that speaks some weird language - their alphabet consists of\nN distinct characters. He has an array\nA=[A\n1\n,A\n2\n,\u2026,A\nN\n], where\nA\ni\ndenotes the number of occurrences of the\ni-th character with him.\nHe wants to make a palindromic string using all the characters he has (every character he has must be used in this string).\nIn order to make this possible, he can perform the following operation:\nSelect an\ni\n(1\u2264i\u2264N) and convert all occurrences of\ni-th alphabet to any other alphabet of his choice.\nNote that Naveej just wants to be able to make any palindrome, as long as every character is used. For example, if\nN=2 and\nA=[2,2] and we consider the characters to be\na and\nb, he can make both\nabba and\nbaab, but\naba is not allowed because it uses only\n3 characters.\nFind the minimum number of operations required such that Naveej can make a palindromic string using all the characters he has. It can be proven that there always exists at least one sequence of operations allowing for the formation of a palindrome.\nInput Format\nThe first line of input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN - the size of the alphabet.\nThe second line contains\nN space-separated integers:\nA\n1\n,A\n2\n,...,A\nN\n, where\nA\ni\nis the number of occurrences of the\ni-th character with Naveej.\nOutput Format\nFor each test case, output a single line containing one integer - the minimum number of operations required so that Naveej can make a palindromic string using all the characters he has.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u22642\u22c510\n5\n1\u2264A\ni\n\u226410\n9\nIt is guaranteed that the sum of\nN over all test cases does not exceed\n2\u22c510\n5\nSubtasks\nSubtask 1 (100 points): Original constraints\nSample 1:\nInput\nOutput\n2\n1\n4\n3\n4 3 1\n0\n1\nExplanation:\nIn the first test case,\nN=1. Let the character be\na. We can make the following palindromic string:\naaaa.\nIn the second test case,\nN=3. Let the characters be\na,\nb,\nc. It is initially not possible to make a palindrome with the given occurrences of the characters. We perform 1 operation: Convert all the occurrences of\nb to\nc. Then, we can make the following palindromic string:\nacaccaca.",
        "336": "Interesting XOR!\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nYou are given an integer\nC. Let\nd be the smallest integer such that\n2\nd\nis strictly greater than\nC.\nConsider all pairs of non-negative integers\n(A,B) such that\nA,B<2\nd\nand\nA\u2295B=C (\n\u2295 denotes the bitwise XOR operation). Find the maximum value of\nA\u22c5B over all these pairs.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains a single integer\nC.\nOutput\nFor each test case, print a single line containing one integer \u2015 the maximum possible product\nA\u22c5B.\nConstraints\n1\u2264T\u226410\n5\n1\u2264C\u226410\n9\nSubtasks\nSubtask #1 (30 points):\n1\u2264C\u226410\n3\nSubtask #2 (70 points): original constraints\nSample 1:\nInput\nOutput\n2\n13\n10\n70\n91\nExplanation:\nExample case 1: The binary representation of\n13 is \"1101\". We can use\nA=10 (\"1010\" in binary) and\nB=7 (\"0111\" in binary). This gives us the product\n70. No other valid pair\n(A,B) can give us a larger product.\nExample case 2: The binary representation of\n10 is \"1010\". We can use\nA=13 (\"1101\") and\nB=7 (\"0111\"). This gives us the maximum product\n91.",
        "337": "CAO Stage-1\nProblem Statement\nPast\nIn the year of 2048, the Virtual Reality Massively Multiplayer Online Role-Playing Game (VRMMORPG), Code Art Online (CAO), is released. With the Chef Gear, a virtual reality helmet that stimulates the user's five senses via their brain, players can experience and control their in-game characters with their minds.\nOn August the 2nd, 2048, all the players log in for the first time, and subsequently discover that they are unable to log out. They are then informed by Code Master, the creator of CAO, that if they wish to be free, they must reach the second stage of the game.\nKirito is a known star player of CAO. You have to help him log out.\nPresent\nStage 1\nA map is described by a 2D grid of cells. Each cell is either labelled as a # or a ^. # denotes a wall. A monster exists in a cell if the cell is not a wall and the cell is a centre of Prime-Cross (CPC).\nLet L be the number of contiguous ^ to the left of X, in the same row as X.\nR be the number of contiguous ^ to the right of X, in the same row as X.\nT be the number of contiguous ^ above X, in the same column as X.\nB be the number of contiguous ^ below X, in the same column as X.\nA cell X is said to be a CPC if there exists a prime number P such that P \u2264 minimum of [L, R, T, B].\nNote: While computing L, R, T, B for a cell X, you should not count the ^ of the cell X.\nGiven a map, you have to tell Kirito the number of cells where monsters exist.\nFuture\nIf you are done with this task, go help Kirito with Stage 2 :-)\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each case starts with a line containing two space separated integers R, C denoting the number of rows and columns in the map respectively. The next R lines contain C characters each, describing the map.\nOutput\nFor each test case, output a single line containing the number of cells where monsters exist.\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 R \u2264 50\n1 \u2264 C \u2264 50\nSample 1:\nInput\nOutput\n2\n5 5\n^^^^^\n^^^^^\n^^^^#\n^^^^^\n^^^^^\n5 7\n^^#^^^^\n^^#^#^#\n#^^^^^^\n^^#^^#^\n^^^^^^^\n0\n1\nExplanation:\nExample case 1. There is no cell for which minimum of L, R, T, B is greater than some prime P.\nExample case 2. The cell at [3, 4], (1-based indexing) is the only CPC.",
        "338": "Anti Palindrome\nDefinitions:\nA string\nT is called semi-palindrome if you can rearrange the characters of\nT to make it into a palindrome.\nFor eg. if\nT=aabb, it isn't a palindrome as of now, but it can be rearranged to form\nabba, which is a palindrome. Thus,\nT=aabb is a semi-palindrome.\nAn anti-palindrome is the opposite of a semi-palindrome. In particular, a string\nT is called an anti-palindrome if it is not possible to rearrange the characters of\nT to make it into a palindrome.\nFor eg. if\nT=abc, there is no rearrangement of this string which makes it into a palindrome. Hence,\nT=abc is an anti-palindrome.\nNow on to the problem:\nYou are given a string\nS=S\n1\nS\n2\n\u2026S\nN\nconsisting of\nN english lowercase letters.\nYour aim is to convert\nS into an anti-palindrome. For this, you are allowed to do the following operation as many times as you want (even 0 times) :\nSelect an index\ni\n(1\u2264i\u2264N) and change\nS\ni\nto any other english lowercase letter.\nFind the minimum number of operations needed to make\nS into an anti-palindrome.\nNote: It can be proven that for the given constraints (\n2\u2264N\u226410\n5\n), it is always possible to make\nS into an anti-palindrome using the operations.\nInput Format\nThe first line of input will contain a single integer\nC, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains an integer\nN \u2014 the length of the string\nS.\nThe next line contains the string\nS of length\nN.\nOutput Format\nFor each test case, output the minimum number of operations needed to make\nS into an anti-palindrome.\nConstraints\n1\u2264C\u22645\u22c510\n5\n2\u2264N\u226410\n5\nS contains only english lowercase letters.\nThe sum of\nN over all testcases won't exceed\n10\n5\n.\nSample 1:\nInput\nOutput\n5\n2\nab\n2\naa\n3\nabc\n3\naaa\n3\nabb\n0\n1\n0\n2\n1\nExplanation:\nTestcase 1: The given string\nab is already an anti-palindrome, since there is no way to rearrange the letters to make it into a palindrome. So, we don't need to do any operations on it to make it an anti-palindrome. Hence the answer is\n0.\nTestcase 2: The given string\naa is a palindrome, and so it is not an anti-palindrome. We can change it to\nab using\n1 operation, and it becomes an anti-palindrome. Hence the answer is\n1.\nTestcase 3: The given string\nabc is already an anti-palindrome, since there is no way to rearrange the letters to make it into a palindrome. So, we don't need to do any operations on it to make it an anti-palindrome. Hence the answer is\n0.\nTestcase 4: The given string\naaa is a palindrome, and so it is not an anti-palindrome. We can change it to\nabc using\n2 operations, and it becomes an anti-palindrome. There is no way to make it into an anti-palindrome using only 1 operation. Hence the answer is\n2.\nTestcase 5: The given string\nabb is a semi-palindrome, since it can be rearranged to form\nbab which is a palindrome. So\nabb is not an anti-palindrome. We can change it to\nabc using\n1 operation, and it becomes an anti-palindrome. Hence the answer is\n1.",
        "339": "Chef Goes to the Cinema\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef lives in Chefcity. Chefcity can be represented as a straight line with Chef's house at point 0 on this line. There is an infinite number of subway stations in Chefcity, numbered by positive integers. The first station is located at point 1 and for each i \u2265 1, the distance between stations i and i+1 is equal to i+1. (Station i+1 is always located at a higher coordinate than station i, i.e., the subway stations are located at points 1, 3, 6, 10, 15 etc.)\nSubway trains in Chefcity allow Chef to move between any pair of adjacent stations in one minute, regardless of the distance between them. Chef can also move by walking; his walking speed is one unit of distance in one minute. Chef can enter or exit the subway at any station.\nChef has decided to go to the cinema. The only cinema in Chefcity is located at point X. (Note that the cinema can be placed at the same point as a subway station.) Help Chef determine the minimum possible time required to get to the cinema from his house.\nInput\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first and only line of each test case contains a single integer X.\nOutput\nFor each test case, print a single line containing one integer - the minimum possible travel time.\nConstraints\n1 \u2264 T \u2264 200\n1 \u2264 X \u2264 109\nSample 1:\nInput\nOutput\n4\n1\n2\n3\n9\n1\n2\n2\n5\nExplanation:\nExample case 4: Chef will walk from x = 0 to x = 1 in one minute, then he will enter the subway and move from station 1 (at x = 1) to station 2 (at x = 3) in one minute, then from station 2 to station 3 (at x = 6) in one minute, from station 3 to station 4 (at x = 10) in one minute, and finally, he will walk from x = 10 to x = 9 in one minute, which makes the total travel time 5 minutes.",
        "340": "Harrenhal\nRead problems statements in Mandarin Chinese and Russian.\nHarrenhal is the largest castle in the Seven Kingdoms and is the seat of House Whent in the Riverlands, on the north shore of the Gods Eye lake. Since the War of Conquest, however, it has become a dark and ruinous place.\n(c) A Wiki of Ice and Fire\nNow Harrenhal is too dangerous since it's a nice place for bandits to hide, or even for rebels to start planning overthrowing of the king. So, the current Lord of the Seven Kingdoms has decided, that it's time to completely ruin the castle. For that puposes, he's planning to send some military troops.\nIn this problem we assume, that Harrenhal can be described as a string H, which consists only of symbols 'a' and 'b'. Harrenhal is completely ruined if and only if the length of H is equal to zero.\nSo, how to make H empty? Send a military troop! When a military troop of the king reach the castle, they delete some palindromic subsequence S of H. For example, let H = 'abbabaab'. Then the current military troop can choose S = 'ababa'(Let's make symbols of S bold in H: 'abbabaab'). After deleting S, H will be equal to 'bab'. Military troops are free to choose any possible palindromic subsequence of H.\nYour task is pretty simple: determine the minimal number of military troops, that the Lord of the Seven Kingdoms has to send in order to ruin Harrenhal.\nNote\nMaybe, some of you aren't familiar with definitions from the statement. Here're some articles that could help you to understand the problem correctly:\nSubsequence: http:\/\/en.wikipedia.org\/wiki\/Subsequence\nPalindrome: http:\/\/en.wikipedia.org\/wiki\/Palindrome\nInput\nThe first line of the input contains an integer T, denoting the number of test cases.\nThe next T lines contain a string H each, denoting the string, that describes the current state of Harrenhal for the corresponding test cases.\nIt's guaranteed, that each H consists only of symbols 'a' and 'b'.\nOutput\nThe output should contain exactly T lines. i'th line of the output should contain the only integer: the minimal number of military troops, that the Lord of the Seven Kingdoms has to send in order to ruin Harrenhal for the corresponding test cases.\nConstraints\n1 \u2264 |H| \u2264 100000, for each H.\nSubtask 1(30 points): each H in the input is a palindrome, 1 \u2264 T \u2264 6;\nSubtask 2(70 points): 1 \u2264 T \u2264 9.\nSample 1:\nInput\nOutput\n1\nabbabaab\n2\nExplanation:\nThere're multiple ways to ruin Harrenhal in the example test. Let's consider one of them.\nThe first troop can delete S = 'ababa'('abbabaab'). After that, H = 'bab'.\nThe second troop can delete S = 'bab'('bab'). After that, H is empty and that's it.",
        "341": "Exactly N plus 1 Values\nRead problem statements in Mandarin, Russian, and Vietnamese as well.\nYou are given a positive integer\nN. You have to print exactly\nN+1 positive integers satisfying the following conditions:\nExactly one value should appear twice, all the remaining values should appear only once.\nSum of all these values should be equal to\n2\nN\n.\nYou have to print the values in non-decreasing order. If there are multiple solutions, you can print any of them.\nInput Format\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains a single integer\nN.\nOutput Format\nFor each test case, print a single line containing\nN+1 positive integers in non-decreasing order that satisfy the given conditions. If there are multiple solutions, you may print any of them.\nConstraints\n1\u2264T\u226460\n1\u2264N\u226460\nSubtasks\nSubtask 1 (100 points): Original constraints\nSample 1:\nInput\nOutput\n2\n3\n4\n1 2 2 3\n1 2 3 3 7\nExplanation:\nTest Case\n1:\n2 is repeated twice and the remaining elements occurred only once and the sum of all the elements is equal to\n8, which is\n2\n3\n.\nTest Case\n2:\n3 is repeated twice and the remaining elements occurred only once and the sum of all the elements is equal to\n16, which is\n2\n4\n.",
        "342": "Gcd of Subarrays\nYou are given positive integers\nN and\nK.\nYou have to construct an array\nA of length\nN such that :\n1\u2264A\ni\n\u226410\n18\n\u2211\ni=1\nN\n\u2211\nj=i\nN\nF(i,j)=K, where\nF(i,j) denotes the gcd of all elements of the subarray\nA[i,j].\nIf multiple such arrays exist, print any.\nReport\n\u22121 if no such array exists.\nNote that\nA[l,r] denotes the subarray\n[A\nl\n,A\nl+1\n,\u2026,A\nr\u22121\n,A\nr\n].\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of single line of input.\nThe only line of each test case contains two space-separated integers\nN and\nK \u2014 the number of elements and required sum.\nOutput Format\nFor each test case, output on a new line\nN space-separated integers, denoting array\nA.\nReport\n\u22121 if no such array exists.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u2264100\n1\u2264K\u226410\n18\nThe sum of\nN over all test cases won't exceed\n1000.\nSample 1:\nInput\nOutput\n3\n1 5\n2 4\n3 1\n5\n1 2\n-1\nExplanation:\nTest case\n1: The only possible array of size\n1 such that the sum of gcd of all subarrays is\n5 is\nA=[5].\nTest case\n2: Consider an array of size\n2 as\nA=[1,2]. The subarrays of the array are:\n[1]: The gcd of this subarray is\n1.\n[1,2]: The gcd of this subarray is\ngcd(1,2)=1.\n[2]: The gcd of this subarray is\n2.\nThe sum of gcd of all subarrays is\n1+1+2=4.\nTest case\n3: It can be proven that there exists no subarray of size\n3 such that the sum of gcd of all subarrays of the array is\n1.",
        "343": "Total Correct Submissions\nRead problem statements in Mandarin Chinese, Russian, and Vietnamese as well.\nCodechef challenges have three divisions. In one challenge, there are\nN problems in each division, but some problems may be shared among multiple divisions. Each problem is uniquely identified by a code \u2014 a string containing only uppercase English letters. Each participant can only submit in one of the divisions.\nChef wants to find the number of correct solutions, in total among all\n3 divisions, for each problem. Given a list of\nN problem codes with the numbers of correct solutions for each problem in each division, find the total number of correct solutions for each problem and sort them in non-decreasing order.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN.\nN lines follow. For each valid\ni, the\ni-th of these lines contains a string\nS\n3,i\nfollowed by a space and an integer\nC\n3,i\n\u2014 the problem code and the number of correct solutions on the\ni-th problem in the third division.\nN more lines follow. For each valid\ni, the\ni-th of these lines contains a string\nS\n2,i\nfollowed by a space and an integer\nC\n2,i\n\u2014 the problem code and the number of correct solutions on the\ni-th problem in the second division.\nFinally,\nN more lines follow. For each valid\ni, the\ni-th of these lines contains a string\nS\n1,i\nfollowed by a space and an integer\nC\n1,i\n\u2014 the problem code and the number of correct solutions on the\ni-th problem in the first division.\nOutput\nFor each test case, let\nP be the number of distinct problems; you should print\nP space-separated integers \u2014 the number of solutions for each of these problems, sorted in non-decreasing order.\nConstraints\n1\u2264T\u226410\n1\u2264N\u22642\u22c510\n4\n1\u2264\u2223S\n1,i\n\u2223,\u2223S\n2,i\n\u2223,\u2223S\n3,i\n\u2223\u22648 for each valid\ni\nS\n1,i\n,S\n2,i\n,S\n3,i\ncontain only uppercase English letters for each valid\ni\n1\u2264C\n1,i\n,C\n2,i\n,C\n3,i\n\u22645\u22c510\n8\nfor each valid\ni\nthe problem codes in each division are pairwise distinct, but some problem codes may appear in multiple divisions\nthe sum of\nN over all test cases does not exceed\n10\n5\nSample 1:\nInput\nOutput\n3\n1\nA 1\nB 2\nC 3\n2\nAA 1\nAB 1\nAB 1\nAC 1\nAC 1\nAD 1\n1\nZ 100\nZ 100\nZ 100\n1 2 3\n1 1 2 2\n300\nExplanation:\nExample case 1: There is only\n1 problem in each division and no problems are shared among divisions, so the total number of distinct problems is\n3 and the numbers of solutions are:\n1 for \"A\",\n2 for \"B\",\n3 for \"C\".\nExample case 2: There are\n2 problems in each division and each pair of consecutive divisions shares\n1 problem, so the total number of distinct problems is\n4 and the numbers of solutions are:\n1 for \"AA\",\n2 for \"AB\",\n2 for \"AC\",\n1 for \"AD\". We need to sort them in non-decreasing order, so the final answer is\n(1,1,2,2).\nExample case 3: There is only\n1 problem \"Z\" in the entire contest, shared among all divisions, and the number of solutions for it is\n300.",
        "344": "Odd Sum\nRead problem statements in Mandarin, Bengali, and Russian as well.\nGiven an integer\nN, consider all arrays\nA of size\nN such that:\nAll the elements are non-negative and distinct.\nAll prefix sums are odd. Formally, for all\ni such that\n1\u2264i\u2264N,\n\u2211\nj=1\ni\nA\ni\nis odd.\nAmong all possible arrays\nA, output the smallest possible sum of the elements of the array.\nNote: Since the Input\/Output may be large, it is preferred to use fast I\/O.\nInput Format\nThe first line contains\nT - the number of test cases. Then the test cases follow.\nThe first line of each test case contains\nN - the size of the array.\nOutput Format\nFor each test case, output on one line the smallest sum among all arrays satisfying the constraints.\nConstraints\n1\u2264T\u226410\n6\n1\u2264N\u226410\n9\nSample 1:\nInput\nOutput\n1\n3\n3\nExplanation:\nTest case\n1: A possible array is\n[1,2,0].\n[1,0,0] is not valid because\n0 occurs twice in it;\n[0,1,2] is not valid because the prefix sum until the first index is\n0, which is even. Another possible array is\n[5,2,4].\n[1,2,0] yields the sum\n3, and we can prove that there are no valid arrays that have sum less than\n3.",
        "345": "Chef and Bulb Invention\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef is trying to invent the light bulb that can run at room temperature without electricity. So he has\nN gases numbered from\n0 to\nN\u22121 that he can use and he doesn't know which one of the\nN gases will work but we do know it.\nNow Chef has worked on multiple search algorithms to optimize search. For this project, he uses a modulo-based search algorithm that he invented himself. So first he chooses an integer\nK and selects all indices\ni in increasing order such that\nimodK=0 and test the gases on such indices, then all indices\ni in increasing order such that\nimodK=1, and test the gases on such indices, and so on.\nGiven\nN, the index of the gas\np that will work, and\nK, find after how much time will he be able to give Chefland a new invention assuming that testing\n1 gas takes\n1 day.\nFor example, consider\nN=5,p=2 and\nK=3.\nOn the\n1\nst\nday, Chef tests gas numbered\n0 because\n0mod3=0.\nOn the\n2\nnd\nday, Chef tests gas numbered\n3 because\n3mod3=0.\nOn the\n3\nrd\nday, Chef tests gas numbered\n1 because\n1mod3=1.\nOn the\n4\nth\nday, Chef tests gas numbered\n4 because\n4mod3=1.\nOn the\n5\nth\nday, Chef tests gas numbered\n2 because\n2mod3=2.\nSo after\n5 days, Chef will be able to give Chefland a new invention\nInput Format\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains three space-separated integers\nN,\np, and\nK.\nOutput Format\nFor each test case, print a single line containing one integer \u2014 after how much time Chef will be able to give Chefland a new invention assuming that testing\n1 gas takes\n1 day.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N,K\u226410\n9\n0\u2264p<N\nSubtasks\nSubtask #1 (100 points): Original constraints\nSample 1:\nInput\nOutput\n4\n10 5 5\n10 6 5\n10 4 5\n10 8 5\n2\n4\n9\n8\nExplanation:\nTest case\n1: On the day\n1 Chef will test gas numbered\n0 and on the day\n2 Chef will test gas numbered\n5.\nTest case\n2: On the day\n1 Chef will test gas numbered\n0, on the day\n2 Chef will test gas numbered\n5, on the day\n3 Chef will test gas numbered\n1, and on the day\n4 Chef will test gas numbered\n6.\nTest case\n3: On the day\n1 Chef will test gas numbered\n0, on the day\n2 Chef will test gas numbered\n5, on the day\n3 Chef will test gas numbered\n1, on the day\n4 Chef will test gas numbered\n6, on the day\n5 Chef will test gas numbered\n2, on the day\n6 Chef will test gas numbered\n7, on the day\n7 Chef will test gas numbered\n3, on the day\n8 Chef will test gas numbered\n8, and on the day\n9 Chef will test gas numbered\n4.\nTest case\n4: On the day\n1 Chef will test gas numbered\n0, on the day\n2 Chef will test gas numbered\n5, on the day\n3 Chef will test gas numbered\n1, on the day\n4 Chef will test gas numbered\n6, on the day\n5 Chef will test gas numbered\n2, on the day\n6 Chef will test gas numbered\n7, on the day\n7 Chef will test gas numbered\n3, and on the day\n8 Chef will test gas numbered\n8.",
        "346": "Chain of Doughnuts\nRead problems statements in Mandarin and Russian. Translations in Vietnamese to be uploaded soon.\nThere is new delicious item in Chef's menu - a doughnut chain. Doughnuts connected successively in line forming a chain.\n\nChain of 3 doughnuts\nChef has received an urgent order for making a chain of N doughnuts. He noticed that there are exactly N cooked doughnuts in the kitchen, some of which are already connected in chains. The only thing he needs to do is connect them in one chain.\nHe can cut one doughnut (from any position in a chain) into two halves and then use this cut doughnut to link two different chains.\nHelp Chef determine the minimum number of cuts needed to complete the order.\nInput\nThe first line of the input contains an integer T denoting the number of test cases.\nThe first line of each test case contains two integer N and M denoting the size of order and number of cooked chains respectively.\nThe second line contains M space-separated integers A1, A2, ..., AM denoting the size of the chains.\nIt is guaranteed that N is equal to the sum of all Ai's over 1<=i<=M.\nOutput\nFor each test case, output a single line containing an integer corresponding to the number of cuts needed Chef to make the order.\nConstraints and Subtasks\n1 \u2264 T \u2264 200\n1 \u2264 N \u2264 2*109\n1 \u2264 Ai \u2264 105\nSubtask 1: 10 points\n1 \u2264 M \u2264 2*104\nAi = 1\nSubtask 2: 30 points\n1 \u2264 M \u2264 100\nSubtask 3: 60 points\n1 \u2264 M \u2264 2*104\nSample 1:\nInput\nOutput\n2\n11 3\n4 3 4\n6 3\n3 2 1\n2\n1\nExplanation:\nExample 1: We could cut 2 doughnut from any \"chain\" and use them to connect chains to the one.\nFor example, let's cut it from the first chain. After this we will have chains of sizes 2, 3, 4 and two doughnuts that have been cut. So we could connect the first chain with second and second with third using these two doughnuts.\nExample 2: We cut doughnut from the last \"chain\" and connect the first two chains.\nImage for second example. Yellow doughnut has been cut.",
        "347": "Consecutive Xor\nChef has an array\nA of length\nN. He can perform the following operation on\nA:\n1) Select an index\ni\n(1\u2264i\u2264N\u22121) and select an integer\nX\n(1\u2264X<2\n20\n).\n2) Set\nA\ni\n:=(A\ni\n\u2295X) and\nA\ni+1\n:=(A\ni+1\n\u2295X). (Here,\n\u2295 denotes the bitwise XOR operation)\nDetermine if Chef can make all the elements of\nA equal by applying the above operation any number of times (possibly zero).\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains an integer\nN \u2014 the size of the array\nA.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\ndenoting the array\nA.\nOutput Format\nFor each test case, output YES if it is possible to make all the elements of\nA equal by applying the given operation any number of times. Otherwise, output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n5\n0\u2264A\ni\n<2\n20\nThe sum of\nN over all test cases won't exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n4\n3 2 2 3\n6\n0 1 2 3 4 5\n3\n1 2 4\nYES\nNO\nYES\nExplanation:\nTest Case 1: We can apply the following operation:\n[3,2,2,3]\ni=2,X=1\n[3,3,3,3]\nTest Case 2: It can be proved that we can not make all the elements of\nA equal by applying the given operation.\nTest Case 3: We can apply the following operations:\n[1,2,4]\ni=1,X=6\n[7,4,4]\ni=2,X=3\n[7,7,7]",
        "348": "Bench Press\nIn the gym, Chef prefers to lift at least\nW grams during a bench press and if that's impossible, Chef considers his workout to be incomplete and feels bad.\nThe rod weighs\nW\nr\ngrams and there are\nN other weights lying on the floor that weigh\nw\n1\n,w\n2\n,...,w\nN\ngrams. To maintain balance and to ensure that there is no unnecessary load due to torque, it's important that the weights added to the left side are symmetric to the weights added to the right side. It is not required to use all of the weights. It is also not required to use any weights at all, if Chef feels satisfied lifting only the rod.\nFor example:\n1\n2\n2\n1\n\u2223Rod Center\n\u2223\n1\n1\n1\n3 is a wrong configuration, but\n1\n2\n3\n1\n\u2223Rod Center\n\u2223\n1\n3\n2\n1 is a right configuration.\nFind whether Chef will be able to collect the required weights to feel satisfied.\n###Input\nThe first line contains an integer\nT, the number of test cases. Then the test cases follow.\nEach test case contains two lines of input.\nThe first line contains three space-separated integers\nN,W,W\nr\n.\nThe second line contains\nN space-separated integers\nw\n1\n,w\n2\n,\u2026,w\nN\n.\n###Output For each test case, output the answer in a single line: \"YES\" if Chef will be satisfied after his workout and \"NO\" if not (without quotes).\nYou may print each character of each string in uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\n###Constraints\n1\u2264T\u226410\n1\u2264N\u226410\n5\n1\u2264W\u22642\u22c510\n5\n1\u2264w\ni\n\u226410\n5\n1\u2264W\nr\n\u22642\u22c510\n4\n###Subtasks Subtask #1 (30 points):\nw\ni\n=1 for all valid\ni\nSubtask #2 (70 points): original constraints\nSample 1:\nInput\nOutput\n3\n2 5 10 \n2 2\n7 100 50\n100 10 10 10 10 10 90 \n6 100 40 \n10 10 10 10 10 10\nYES\nNO\nYES\nExplanation:\nTest case 1: Since the weight of the rod is at least the required weight to be lifted, Chef will feel satisfied after the workout.\nTest case 2: The configuration having maximum weight is:\n10\n10\n\u2223Rod Center\n\u2223\n10\n10\nSo the maximum total weight Chef can lift is\n50+4\u22c510=90 which is less than the required amount to get satisfied.\nTest case 3: The configuration having maximum weight is:\n10\n10\n10\n\u2223Rod Center\n\u2223\n10\n10\n10\nSo the maximum total weight Chef can lift is\n40+6\u22c510=100 which is equal to the required amount to get satisfied.",
        "349": "Different String\nRead problems statements in Mandarin Chinese, Russian, and Bengali as well.\nYou are given\nN binary strings of length\nN each. You need to find a binary string of length\nN which is different from all of the given strings.\nNote:\nA binary string is defined as a string consisting only of '0' and '1'.\nA string is considered different from another string when they have different lengths, or when they differ in at least one position.\nInput Format\nThe first line will contain\nT - the number of test cases. Then the test cases follow.\nThe first line of each test case contains\nN - the number of strings and length of strings.\nEach of the next\nN lines contains a binary string of length\nN.\nOutput Format\nFor each test case, print on one line a binary string of length\nN, which is different from all of the given strings. If there are multiple possible answers, print any.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u2264100\nSample 1:\nInput\nOutput\n2\n3\n101\n110\n100\n4\n1100\n1010\n0100\n0010\n111\n1101\nExplanation:\nTest case\n1:\n111 is different from\n101 ,\n110 ,\n100.\nTest case\n2:\n1101 is different from\n1100 ,\n1010 ,\n0100 ,\n0010.",
        "350": "Maximum Subarray\nGiven two arrays\nA and\nB of sizes\nN and\nM respectively. You can apply the following operation until the array\nB is non-empty:\nChoose either the first or the last element of array\nB.\nInsert the chosen element to either the front or the back of array\nA.\nDelete the chosen element from array\nB.\nFor example, let\nA=[9,7] and\nB=[1,3,2]. In one operation, we can choose either\nX=1 or\nX=2 (first or last element of array\nB). We can insert\nX in array\nA and make it either\nA=[X,9,7] or\nA=[9,7,X]. The chosen\nX is deleted from array\nB. Thus, it will become either\nB=[3,2] (when chosen\nX is\n1) or\nB=[1,3] (when chosen\nX is\n2).\nFind the maximum sum of any subarray of the array\nA that you can achieve after performing exactly\nM operations.\nNote: A subarray of an array is formed by deleting some (possibly zero) elements from the beginning of the array and some (possible zero) elements from the end of the array. A subarray can be empty as well.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of\n4 lines of input.\nThe first line of each test contains a single integer\nN, the size of array\nA.\nThe next line contains\nN space-separated integers, denoting elements of array\nA.\nThe third line of each test contains a single integer\nM, the size of array\nB.\nThe next line contains\nM space-separated integers, denoting elements of array\nB.\nOutput Format\nFor each test case, output on a new line the maximum sum of any subarray of the array\nA that you can achieve after performing exactly\nM operations.\nConstraints\n1\u2264T\u226410\n1\u2264N\u226410\n5\n1\u2264M\u226410\n5\n\u221210\n8\n\u2264A\ni\n,B\ni\n\u226410\n8\nSample 1:\nInput\nOutput\n3\n5\n3 26 -79 72 23\n2\n66 44\n1\n81\n1\n-97\n5\n10 -5 14 -20 4\n3\n-10 5 -2\n205\n81\n24\nExplanation:\nTest case\n1:\nOperation\n1: Add the first element of array\nB to the back of array\nA. Thus,\nA=[3,26,\u221279,72,23,66] and\nB=[44].\nOperation\n2: Add the first element of array\nB to the back of array\nA. Thus,\nA=[3,26,\u221279,72,23,66,44] and\nB=[].\nThe, maximum sum subarray of array\nA is\n[72,23,66,44] having sum\n72+23+66+44=205.\nTest case\n2:\nOperation\n1: Add the first element of array\nB to the front of array\nA. Thus,\nA=[\u221297,81] and\nB=[].\nThe, maximum sum subarray of array\nA is\n[81] having sum\n81.\nTest case\n3:\nOperation\n1: Add the last element of array\nB to the back of array\nA. Thus,\nA=[10,\u22125,14,\u221220,4,\u22122] and\nB=[\u221210,5].\nOperation\n2: Add the last element of array\nB to the front of array\nA. Thus,\nA=[5,10,\u22125,14,\u221220,4,\u22122] and\nB=[\u221210].\nOperation\n3: Add the first element of array\nB to the front of array\nA. Thus,\nA=[\u221210,5,10,\u22125,14,\u221220,4,\u22122] and\nB=[].\nThe, maximum sum subarray of array\nA is\n[5,10,\u22125,14] having sum\n5+10\u22125+14=24.",
        "351": "Chef And The Hiring Event\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nThe Head Chef is receiving a lot of orders for cooking the best of the problems lately. For this, he organized an hiring event to hire some talented Chefs. He gave the following problem to test the skills of the participating Chefs. Can you solve this problem and be eligible for getting hired by Head Chef.\nA non-negative number n is said to be magical if it satisfies the following property. Let S denote the multi-set of numbers corresponding to the non-empty subsequences of the digits of the number n in decimal representation. Please note that the numbers in the set S can have leading zeros. Let us take an element s of the multi-set S, prod(s) denotes the product of all the digits of number s in decimal representation. The number n will be called magical if sum of prod(s) for all elements s in S, is even.\nFor example, consider a number 246, its all possible non-empty subsequence will be S = {2, 4, 6, 24, 46, 26, 246}. Products of digits of these subsequences will be {prod(2) = 2, prod(4) = 4, prod(6) = 6, prod(24) = 8, prod(46) = 24, prod(26) = 12, prod(246) = 48, i.e. {2, 4, 6, 8, 24, 12, 48}. Sum of all of these is 104, which is even. Hence 246 is a magical number.\nPlease note that multi-set S can contain repeated elements, e.g. if number is 55, then S = {5, 5, 55}. Products of digits of these subsequences will be {prod(5) = 5, prod(5) = 5, prod(55) = 25}, i.e. {5, 5, 25}. Sum of all of these is 35 which is odd. Hence 55 is not a magical number.\nConsider a number 204, then S = {2, 0, 4, 20, 04, 24, 204}. Products of digits of these subsequences will be {2, 0, 4, 0, 0, 8, 0}. Sum of all these elements will be 14 which is even. So 204 is a magical number.\nThe task was to simply find the Kth magical number.\nInput\nFirst line of the input contains an integer T denoting the number of test cases.\nEach of the next T lines contains a single integer K.\nOutput\nFor each test case, print a single integer corresponding to the Kth magical number.\nConstraints\n1 \u2264 T \u2264 105\n1 \u2264 K \u2264 1012.\nSubtasks\nSubtask #1 : (20 points)\n1 \u2264 T \u2264 100\n1 \u2264 K \u2264 104.\nSubtask 2 : (80 points)\nOriginal Constraints\nSample 1:\nInput\nOutput\n2\n2\n5\n2\n8\nExplanation:\nExample case 1. 2 is the 2nd magical number, since it satisfies the property of the magical number. The first magical number will be of course 0.",
        "352": "Survive in ChocoLand\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\nYou are a poor person in ChocoLand. Here, people eat chocolates daily instead of normal food. There is only one shop near your home; this shop is closed on Sunday, but open on all other days of the week. You may buy at most one box of N chocolates from this shop on each day when it is open.\nCurrently, it's Monday, and you need to survive for the next S days (including the current day). You have to eat K chocolates everyday (including the current day) to survive. Do note that you are allowed to buy the a chocolate box and eat from it on the same day.\nCompute the minimum number of days on which you need to buy from the shop so that you can survive the next S days, or determine that it isn't possible to survive.\nInput\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first and only line of each test case contains 3 integers N, K and S denoting the number of chocolates in a box, the number of chocolates you have to eat everyday to survive and the number of days you need to survive.\nOutput\nFor each test case, print a single line containing one integer \u2014 the minimum number of days on which you need to buy from the shop to survive, or -1 if you will not be able to survive S days.\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 100\n1 \u2264 K \u2264 100\n1 \u2264 S \u2264 1000\nSample 1:\nInput\nOutput\n2\n16 2 10\n50 48 7\n2\n-1\nExplanation:\nExample case 1: One possible solution is to buy a box on day 1 (Monday); it's sufficient to eat from this box up to day 8 (Monday) inclusive. Now, on day 9 (Tuesday), you buy another box and use the chocolates in it to survive days 9 and 10.\nExample case 2: You will not be able to survive even if you buy from the shop everyday except every 7-th day.",
        "353": "GCD of Prefixes\nSasuke and Itachi are playing a game. Sasuke first creates an array\nA containing\nN positive integers\nA\n1\n,A\n2\n,\u2026,A\nN\n. He then creates a new array\nB of length\nN such that\nB\ni\n=gcd(A\n1\n,A\n2\n,...,A\ni\n) for each\n1\u2264i\u2264N. Now, Sasuke gives array\nB to Itachi and asks him to find any array\nA (with\n1\u2264A\ni\n\u226410\n9\n) such that the given process applied to\nA will produce\nB. Can you help Itachi solve this problem?\nHere,\ngcd stands for greatest common divisor.\nInput Format\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN.\nThe second line contains\nN space-separated integers\nB\n1\n,B\n2\n,\u2026,B\nN\nOutput Format\nFor each test case, print a single line containing\nN space-separated integers denoting the array\nA you constructed. If no such array\nA exists, print\n\u22121 instead.\nConstraints\n1\u2264T\u226410\n3\n1\u2264N\u226410\n5\n1\u2264A\ni\n,B\ni\n\u226410\n9\nIt is guaranteed that sum of\nN over all test cases doesn't exceed\n5\u00d710\n5\n.\nSubtasks\n30 points :\n1\u2264R\u226410000\n70 points :\n1\u2264R\u226410\n9\nSample 1:\nInput\nOutput\n2\n2\n4 2\n2\n1 3\n4 26\n-1\nExplanation:\nTest Case 1: One possible answer is\n[4,26] because\nB can be generated as follows:\nB=[gcd(4),gcd(4,26)]=[4,2].\nTest Case 2: It can be shown that no array\nA exists which can produce the given\nB.",
        "354": "MaxEdges\nTracy gives Charlie a Directed Acyclic Graph with\nN vertices. Among these\nN vertices,\nK vertices are sources, and\nL vertices are sinks.\nFind out the maximum number of edges this graph can have.\nNote:\nA source is a vertex with no incoming edge.\nA sink is a vertex with no outgoing edge.\nA vertex can be both, a source, and a sink.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains of a single line of input, three space-separated integers\nN,K, and\nL - the number of vertices, the number of sources and the number of sinks respectively.\nOutput Format\nFor each test case, output in a single line, the maximum number of edges this graph can have.\nConstraints\n1\u2264T\u226410\n5\n2\u2264N\u226410\n9\n1\u2264K<N\n1\u2264L<N\nSample 1:\nInput\nOutput\n2\n3 1 1\n5 3 3\n3\n4\nExplanation:\nTest case\n1: Assume that the vertices are numbered\n1,2, and\n3. Let\n1 be a source and\n3 be a sink. The edges of a possible DAG are\n1\u21922,2\u21923, and\n1\u21923.\nThe number of edges in this graph are\n3. It can be shown that this is the maximum number of edges possible under given constraints.\nTest case\n2: Assume that the vertices are numbered\n1,2,3,4, and\n5. Let\n1,2, and\n3 be sources and\n3,4, and\n5 be sinks. The edges of a possible DAG are\n1\u21924,2\u21924,1\u21925 and\n2\u21925.\nThe number of edges in this graph are\n4. It can be shown that this is the maximum number of edges possible under given constraints.",
        "355": "Max Out\nYou are given an array A of size N. Output the maximum value of A[i]%A[j] (ie. A[i] mod A[j]) over all 1 \u2264 i, j \u2264 N.\nInput\nFirst line of input contains T, the number of testcases.\nThe first line of each test case contains N, the number of elements in the array.\nSecond line of each testcase contains N space separated integers in which the ith integer is A[i].\nOutput\nFor each testcase output a single integer in a new line: the maximum value of A[i]%A[j].\nConstraints\n1\u2264T\u226410\n1\u2264N\u2264105\n1\u2264A[i]\u2264106\nSample 1:\nInput\nOutput\n1\n2\n1 2\n1\nExplanation:\nThe maximum value is obtained by 1%2 = 1.",
        "356": "Construct Array\nYou are given a positive integer\nN.\nConsider an array\nA of length\nN. Let\nP\ni\ndenote the sum of the first\ni elements of\nA and\nS\ni\ndenote the sum of the last\ni elements of\nA.\nYou need to construct the array\nA of size\nN such that all of the following conditions are met:\n\u221210\n9\n\u2264A\ni\n\u226410\n9\n, for all\n(1\u2264i\u2264N)\nP\ni\n>S\ni\nif\ni is odd, for each\n(1\u2264i<N)\nP\ni\n<S\ni\nif\ni is even, for each\n(1\u2264i<N)\nIf there are multiple solutions, you can print any of them.\nIf there is no such array, print\n\u22121 instead.\nInput Format\nEach test contains multiple test cases. The first line contains the number of test cases\nT.\nThe only line of each test case contains a single integer\nN, where\nN is the length of the required array.\nOutput Format\nFor each test case, if a valid array exists, print\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\nsatisfying all the given conditions.\nIf there are multiple solutions, you can print any of them.\nIf there is no such array, print\n\u22121 instead.\nConstraints\n1\u2264T\u226410\n3\n2\u2264N\u226410\n5\nThe sum of\nN over all test cases won't exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n2\n3\n4\n343 -343\n-1\n0 -5 343 -100\nExplanation:\nTest case\n1: All elements are in the given range for the array\nA=[343,\u2212343].\nFor\ni=1: Since\ni is odd,\nP\n1\n=343 is greater than\nS\n1\n=\u2212343.\nTest case\n2: It can be proved that no array of length\n3 exists satisfying all conditions.\nTest case\n3: All elements are in the given range for the array\nA=[0,\u22125,343,\u2212100].\nFor\ni=1: Since\ni is odd,\nP\n1\n=0 is greater than\nS\n1\n=\u2212100.\nFor\ni=2: Since\ni is even,\nP\n2\n=0+(\u22125)=\u22125 is less than\nS\n2\n=343+(\u2212100)=243.\nFor\ni=3: Since\ni is odd,\nP\n3\n=0+(\u22125)+343=338 is greater than\nS\n3\n=(\u22125)+343+(\u2212100)=238.",
        "357": "Zebra Crossing\nRead problems statements in Russian and Bengali.\nThere's a zebra crossing appearing in the middle of nowhere with\nN blocks in it. The colors of the zebra crossing is represented by a binary string\nS, where\nS\ni\nis 1 if the\ni-th block from the left is white, and 0 if the block is black.\nChef really wants to play with the zebra crossing. Although the given zebra crossing might not have alternate black and white blocks, Chef wants to follow the alternating white-black color pattern while crossing it.\nInitially, Chef stands at block\n1. Chef has to jump exactly\nK times, and in each jump he has to move forward and jump to a different color than that previously occupied by Chef. More formally, suppose that Chef is currently at block\ni and wants to jump to block\nj then following conditions should hold:\ni<j\nS\ni\n\ue020\n=S\nj\nOutput the farthest block Chef can reach with exactly\nK jumps. If Chef cannot jump exactly\nK times, output -1.\nInput Format\nThe first line contains an integer\nT denoting the number of test cases. The\nT test cases then follow.\nThe first line of each test case contains two integers\nN and\nK.\nThe second line of each test case consists of a binary string of length\nN denoting the color of blocks of the zebra crossing.\nOutput Format\nFor each test case, output the farthest block Chef can reach with exactly\nK jumps, or -1 in case Chef cannot jump exactly\nK times.\nConstraints\n1\u2264T\u226410\n5\n2\u2264N\u226410\n3\n1\u2264K\u2264N\nSum of\nN over all test cases does not exceed\n5\u22c510\n5\nSample 1:\nInput\nOutput\n3\n6 2\n100101\n5 1\n10111\n6 1\n000000\n6\n2\n-1\nExplanation:\nFor the first test case, Chef can jump in the following order:\n1\u21925\u21926.\nFor the second test case, Chef can jump in the following order:\n1\u21922.\nFor the third test case, Chef cannot make any jumps.",
        "358": "UEFA Champions League\n###Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese and Bengali as well.\nThe UEFA Champions League is the most prestigious annual sports competition in the world. In the group stage of this competition, European football clubs are divided into 8 groups; there are four teams in each group. The teams in each group are ranked based on the matches they play against each other, according to the following rules:\nBased on the results of matches, teams are awarded points. Each football match is played between a home team and an away team. If one of the teams scores more goals than the other, this team gains\n3 points and the other team gains\n0 points. In case of a tie (if both teams score the same number of goals), each of those teams gains\n1 point.\nThe goal difference of a team is the number of goals it scored minus the number of goals it received, regardless if it scored\/received them as the home team or as the away team.\nBetween any two teams, the team with more points is ranked higher.\nIf they have the same number of points (in case of a tie), the team with higher goal difference is ranked higher.\nEach team plays two matches against every other team in its group \u2015 one match as the home team and one match as the away team. You are given the number of goals scored by each team for all twelve matches in one group. Determine the leaders of this group \u2015 the first and second top-ranked team. It is guaranteed that there are no ties for either of these places (for the given results of the matches).\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nFor each test case,\n12 lines follow. Each of these lines describes the result of one match in the format HomeTeamName HomeTeamGoals vs. AwayTeamGoals AwayTeamName, where HomeTeamName and AwayTeamName are strings and HomeTeamGoals and AwayTeamGoals are integers denoting the number of goals scored by the respective teams in this match.\nOutput\nFor each scenario, print a single line containing two space-separated strings \u2015 the name of the top-ranked team and the name of the second top-ranked team.\nConstraints\n1\u2264T\u226450\nthe length of the name of each team does not exceed\n10\nthe name of each team contains only lowercase English letters\n0\u2264 number of goals scored by each team\n\u2264100\nSample 1:\nInput\nOutput\n2\nmanutd 8 vs. 2 arsenal\nlyon 1 vs. 2 manutd\nfcbarca 0 vs. 0 lyon\nfcbarca 5 vs. 1 arsenal\nmanutd 3 vs. 1 fcbarca\narsenal 6 vs. 0 lyon\narsenal 0 vs. 0 manutd\nmanutd 4 vs. 2 lyon\narsenal 2 vs. 2 fcbarca\nlyon 0 vs. 3 fcbarca\nlyon 1 vs. 0 arsenal\nfcbarca 0 vs. 1 manutd\na 3 vs. 0 b\na 0 vs. 0 c\na 0 vs. 0 d\nb 0 vs. 0 a\nb 4 vs. 0 c\nb 0 vs. 0 d\nc 0 vs. 0 a\nc 0 vs. 0 b\nc 1 vs. 0 d\nd 3 vs. 0 a\nd 0 vs. 0 b\nd 0 vs. 0 c\nmanutd fcbarca\nd b\nExplanation:\nExample case 1: The total number of points and goal difference for each team is as follows:\nmanutd:\n16 points, goal difference\n12\nfcbarca:\n8 points, goal difference\n4\nmanutd:\n5 points, goal difference\n\u22125\nlyon:\n4 points, goal difference\n\u221211\nExample case 2: The total number of points and goal difference for each team is as follows:\nd:\n7 points, goal difference\n2\nb:\n7 points, goal difference\n1\na:\n7 points, goal difference\n0\nc:\n7 points, goal difference\n\u22123\nNote that in this test case, all teams have the same number of points, but teams with higher goal difference are ranked higher.",
        "359": "Bitwise Tuples\nRead problem statements in Vietnamese,\nBengali, Mandarin Chinese, and Russian as well.\nChef has two numbers\nN and\nM. Help Chef to find number of integer\nN-tuples\n(A\n1\n,A\n2\n,\u2026,A\nN\n) such that\n0\u2264A\n1\n,A\n2\n,\u2026,A\nN\n\u22642\nM\n\u22121 and\nA\n1\n&A\n2\n&\u2026&A\nN\n=0, where\n& denotes the bitwise AND operator.\nSince the number of tuples can be large, output it modulo\n10\n9\n+7.\nInput\nThe first line contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains two integers\nN and\nM.\nOutput\nFor each test case, output in a single line the answer to the problem modulo\n10\n9\n+7.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N,M\u226410\n6\n###Subtasks Subtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n4\n1 2\n2 2\n4 2\n8 4\n1\n9\n225\n228250597\nExplanation:\nTest Case\n1: The only possible tuple is\n(0).\nTest Case\n2: The tuples are\n(0,0),\n(0,1),\n(0,2),\n(0,3),\n(1,0),\n(2,0),\n(3,0),\n(1,2),\n(2,1).",
        "360": "XOR with smallest element\nChef has an array\nA of length\nN and an integer\nX.\nIn one operation, Chef does the following:\nFind the smallest element in the current array. Let this be\nS.\nNext, pick any one index\ni such that\nA\ni\n=S\nFinally, replace\nA\ni\nwith\nA\ni\n\u2295X\nHere\n\u2295 denotes the bitwise XOR operation.\nFor example, if\nA=[1,1,2] and\nX=4, then in one move Chef can turn the array into either\n[5,1,2] or\n[1,5,2].\nChef performs this operation exactly\nY times. Let\nB be final array obtained.\nOutput the array\nB in sorted order. Note that under this restriction, the output is unique.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains three space-separated integers\nN,\nX, and\nY.\nThe second line contains\nN space-separated integers denoting the array\nA.\nOutput Format\nFor each test case, output array\nB in sorted order.\nConstraints\n1\u2264T\u226410\n4\n1\u2264N\u226410\n5\n1\u2264Y\u226410\n9\n1\u2264A\ni\n,X\u22642\n30\nThe sum of\nN over all test cases won't exceed\n10\n5\n.\nSample 1:\nInput\nOutput\n3\n1 6 99\n9\n3 7 44\n1 2 3\n5 20 6\n5 10 15 20 25\n15 \n3 5 6 \n5 20 25 27 30\nExplanation:\nTest case\n1: The array is initially\n[9]. Since there is only one element, it will be modified in each step. So,\nAfter the first operation, the array is\n[15] (since\n9\u22956=15)\nAfter the second operation, the array is\n[9] (since\n15\u22956=9)\nContinuing the above, it can be verified that after\n99 steps, the array is\n[15].\nTest case\n3: The sequence of steps is as follows:\nInitially, the array is\n[5,10,15,20,25]\nAfter operation\n1, it is\n[17,10,15,20,25]\nAfter operation\n2, it is\n[17,30,15,20,25]\nAfter operation\n3, it is\n[17,30,27,20,25]\nAfter operation\n4, it is\n[5,30,27,20,25]\nAfter operation\n5, it is\n[17,30,27,20,25]\nAfter operation\n6, it is\n[5,30,27,20,25]\nRemember to print the output in sorted order.",
        "361": "Concat Sort\nJJ has an array\nA. He can perform the following operation on\nA:\nDivide\nA into two subsequences\nP and\nQ such that each\nA\ni\nbelongs to either\nP or\nQ.\nSet\nA:=P concat Q\nHere\nconcat denotes the concatenation operation. For e.g.\n[2,1,5] concat [4,3]=[2,1,5,4,3].\nIs it possible to make\nA sorted in non-decreasing order after applying the above operation at most once?\nNote: An array\nX is a subsequence of an array\nY if\nX can be obtained by deletion of several (possibly, zero or all) elements from\nY.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains an integer\nN \u2014 the size of the array\nA.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\ndenoting the array\nA.\nOutput Format\nFor each test case, output YES if it is possible to make the array\nA sorted after applying the given operation at most once. Otherwise, output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n1\u2264T\u226410\n5\n2\u2264N\u226410\n5\n1\u2264A\ni\n\u226410\n9\nSum of\nN over all test cases does not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n6\n4 5 6 1 2 3\n5\n1 3 5 2 4\n5\n5 10 7 11 9\nYES\nNO\nYES\nExplanation:\nTest case\n1: We can select\nP=[1,2,3] and\nQ=[4,5,6]. Therefore\nA will become\n[1,2,3,4,5,6] which is sorted.\nTest case\n2: It can be proven that it is not possible to sort\nA by using the given operation at most once.\nTest case\n3: We can select\nP=[5,7,9] and\nQ=[10,11]. Therefore\nA will become\n[5,7,9,10,11] which is sorted.",
        "362": "Charges\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nThere are\nN subatomic particles lined up in a row. There are two types: protons and electrons. Protons have a positive charge and are represented by\n1, while electrons have a negative charge and are represented by\n0.\nOur current understanding of physics gives us a way to predict how the particles will be spaced out, if we know their charges. Two adjacent particles will be separated by\n1 unit if they have opposite charges, and\n2 units if they have the same charge.\nWhen Chef is not in the kitchen, he is doing physics experiments on subatomic particles. He is testing the hypothesis by having\nN particles in a row, and he will change the charge of a particle\nK times. In the\ni-th update, he will change the charge of the\nQ\ni\n-th particle. After each update, find the distance between the first and last particle.\nNote: Each update is persistent for further updates.\nInput\nThe first line contains an integer\nT, the number of test cases. Then the test cases follow.\nEach test case contains three lines of input.\nThe first line contains two integers\nN,\nK.\nThe second line contains a string\nS of length\nN, where\nS\ni\nrepresents the initial charge on\ni-th particle.\nThe third line contains\nK integers\nQ\n1\n,Q\n2\n,\u2026,Q\nK\n, the positions of the changed particles.\nOutput\nFor each test case, output\nK lines, where the\ni-th line contains the answer after the updates\nQ\n1\n,\u2026,Q\ni\nhave been made.\nConstraints\n1\u2264T\u22645\n1\u2264N,K\u226410\n5\nS contains only\n0 and\n1 characters.\n1\u2264Q\ni\n\u2264N\nThe sum of\nK over all testcases is at most\n2\u22c510\n5\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n1\n3 3\n010\n2 1 3\n4\n3\n2\nExplanation:\nUpdate 1: After reversing the parity of particle\n2, the new configuration is\n000. Since all the particles have a similar charge, each is separated from the previous by a distance of\n2 units. So the location of particle\n3 is\n2+2=4 units from the first particle.\nUpdate 2: After reversing the parity of particle\n1, the new configuration is\n100. Here, the charges of particles\n1 and\n2 differ, so they are separated by\n1 unit. The charges of particles\n2 and\n3 agree, so they are separated by\n2 units. So, the location of particle\n3 is\n1+2=3 units from the first particle.\nUpdate 3: After reversing the charge of particle\n3, the new configuration is\n101. Here, particles\n1 and\n2 are separated by\n1 unit and particles\n2 and\n3 are separated by\n1 unit. So the location of particle\n3 is\n1+1=2 units from the first particle.",
        "363": "Chef and Interesting Subsequences\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef has a sequence\nA\n1\n,A\n2\n,\u2026,A\nN\n. This sequence has exactly\n2\nN\nsubsequences. Chef considers a subsequence of\nA interesting if its size is exactly\nK and the sum of all its elements is minimum possible, i.e. there is no subsequence with size\nK which has a smaller sum.\nHelp Chef find the number of interesting subsequences of the sequence\nA.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains two space-separated integers\nN and\nK.\nThe second line contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n.\nOutput\nFor each test case, print a single line containing one integer \u2015 the number of interesting subsequences.\nConstraints\n1\u2264T\u226410\n1\u2264K\u2264N\u226450\n1\u2264A\ni\n\u2264100 for each valid\ni\nSubtasks\nSubtask #1 (30 points):\n1\u2264N\u226420\nSubtask #2 (70 points): original constraints\nSample 1:\nInput\nOutput\n1\n4 2\n1 2 3 4\n1\nExplanation:\nExample case 1: There are six subsequences with length\n2:\n(1,2),\n(1,3),\n(1,4),\n(2,3),\n(2,4) and\n(3,4). The minimum sum is\n3 and the only subsequence with this sum is\n(1,2).",
        "364": "Range Assign, Number of Distinct Elements Minimize\nYou are given an array\nA of\nN positive integers.\nIn one operation, you can do the following:\nChoose integers\ni and\nj\n(1\u2264i<j\u2264N), such that\nA\ni\n=A\nj\n;\nFor all\nk\n(i<k<j), change the value of\nA\nk\nto\nA\ni\n.\nFind out whether\nA can have at most\n2 distinct values after using any (possibly zero) number of operations.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input:\nThe first line of each test case contains\nN - the size of the array.\nThe next line contains\nN integers,\nA\n1\n,A\n2\n,A\n3\n,\u2026,A\nN\n- the elements of the array.\nOutput Format\nFor each test case, print YES if\nA can have at most\n2 distinct values after using any (possibly zero) number of operations and NO otherwise.\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\nConstraints\n1\u2264T\u22641000\n1\u2264N\u226410\n5\n1\u2264A\ni\n\u226410\n9\nThe sum of\nN over all test cases won't exceed\n10\n5\n.\nSample 1:\nInput\nOutput\n4\n5\n5 9 5 5 5\n3\n1 2 3\n4\n1 2 1 3\n4\n1 2 3 1\nYES\nNO\nYES\nYES\nExplanation:\nTest case\n1: The array\nA already has\n2 distinct elements.\nTest case\n2: It is impossible to make operations such that\nA has\n2 distinct elements.\nTest case\n3: We can make an operation as:\nChoose\ni=1 and\nj=3. Thus, we change\nA\n2\nto\nA\n1\n=1.\nThe final array is\n[1,1,1,3] which has two distinct elements.\nTest case\n4: We can make an operation as:\nChoose\ni=1 and\nj=4. Thus, we change\nA\n2\nand\nA\n3\nto\nA\n1\n=1.\nThe final array is\n[1,1,1,1] which has one distinct element.",
        "365": "Permutation and Palindrome\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\nYou are given a string s with length n. You should find a permutation P of numbers 1 through n such that if you apply this permutation on the string s, you will get a palindromic string.\nThe result of applying a permutation P on the string s is a string t with length n such that for each i (1 \u2264 i \u2264 n), the i-th character of t is given as as t[i] = s[Pi].\nInput\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first and only line of each test case contains the string s.\nOutput\nFor each test case, print a single line. If it is impossible to find a valid permutation P, this line should contain a single integer -1. Otherwise, it should contain n space-separated integers P1, P2, ..., Pn.\nIf there are multiple valid permutations, you may print any one.\nConstraints\n1 \u2264 n \u2264 105\ns will consist only of lowercase English letters (i.e. characters 'a' through 'z')\nSubtasks\nSubtask #1 (20 points): 1 \u2264 T, n \u2264 10\nSubtask #2 (20 points): 1 \u2264 T, n \u2264 100\nSubtask #3 (60 points): 1 \u2264 T \u2264 10\nSample 1:\nInput\nOutput\n4\naa\nbaa\nabc\nabab\n1 2\n2 1 3\n-1\n1 2 4 3\nExplanation:\nExample case 1: The string t obtained using the identity permutation will have t[1] = s[1] and t[2] = s[2]. That means t = \"aa\", which is a palindrome.\nExample case 2: The characters of the string t obtained by applying the permutation 2, 1, 3 are t[1] = s[2], t[2] = s[1] and t[3] = s[3]. Therefore, t = \"aba\", which is a palindrome.\nExample case 3: There is no way to find a permutation P such that we can obtain a palindrome from s using it.\nExample case 4: Applying the permutation 1, 2, 4, 3 on s results in t = \"abba\", which is a palindrome. Another permutation that you may apply is 2, 1, 3, 4; this results in t = \"baab\", which is also a palindrome.",
        "366": "Find eX\nChef has\n4 positive integers\nA,\nB,\nC, and\nD such that\nA\n%\nB=C\n%\nD.\nFind the smallest positive integer\nX such that\n(A+X)\n%\nB=(C+X)\n%\nD holds.\nIt is guaranteed that such\nX always exists.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case contains four space-separated integers\nA,\nB,\nC, and\nD.\nOutput Format\nFor each test case, print a single line containing one integer \u2014\nX, the smallest integer satisfying the conditions.\nConstraints\n1\u2264T\u226410\n5\n1\u2264A,B,C,D\u226410\n9\nA\n%\nB=C\n%\nD\nSample 1:\nInput\nOutput\n3\n4 7 4 8\n5 1 8 2\n3 2 4 3\n1\n2\n5\nExplanation:\nTest case\n1: The smallest\nX satisfying the equation is\n1, as\n(4+1)\n%\n7=(4+1)\n%\n8=5.\nTest case\n2: The smallest\nX satisfying the equation is\n2, as\n(5+2)\n%\n1=(8+2)\n%\n2=0.",
        "367": "Frequency Array Retrieval\nConsider an array\nA consisting of\nN positive elements. The frequency array of\nA is the array\nB of size\nN such that\nB\ni\n= frequency of element\nA\ni\nin\nA.\nFor example, if\nA=[4,7,4,11,2,7,7], the frequency array\nB=[2,3,2,1,1,3,3].\nYou have lost the array\nA, but fortunately you have the array\nB.\nYour task is to construct the lexicographically smallest array\nA such that:\n1\u2264A\ni\n\u226410\n5\n;\nThe frequency array of\nA is equal to\nB.\nIf no such array\nA exists, print\n\u22121.\nNote: Array\nX is lexicographically smaller than array\nY, if\nX\ni\n<Y\ni\n, where\ni is the first index where\nX and\nY differ.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains a single integer\nN \u2014 the size of the array.\nThe next line contains\nN space-separated integers -\nB\n1\n,B\n2\n,\u2026,B\nN\n, the frequency array.\nOutput Format\nFor each test case, output on a new line,\nN space separated integers -\nA\n1\n,A\n2\n,\u2026,A\nN\n, the lexicographically smallest array\nA. If no such array\nA exists, print\n\u22121.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n5\n1\u2264B\ni\n\u226410\n5\nThe sum of\nN over all test cases won't exceed\n10\n6\n.\nSample 1:\nInput\nOutput\n5\n5\n2 3 3 3 2\n5\n1 1 1 1 1\n5\n5 5 5 5 5\n3\n1 2 4\n8\n1 3 2 3 2 2 2 3\n1 2 2 2 1\n1 2 3 4 5\n1 1 1 1 1\n-1\n1 2 3 2 3 4 4 2\nExplanation:\nTest case\n1: The lexicographically smallest array\nA having the given frequency array\nB is\nA=[1,2,2,2,1]. The element\nA\n1\nand\nA\n5\nhave frequency\n2 while\nA\n2\n,A\n3\n, and\nA\n4\nhave frequency\n3.\nTest case\n2: The lexicographically smallest array\nA having the given frequency array\nB is\nA=[1,2,3,4,5]. Each element in\nA has frequency\n1.\nTest case\n3: The lexicographically smallest array\nA having the given frequency array\nB is\nA=[1,1,1,1,1]. Each element in\nA has frequency\n5.\nTest case\n4: No possible array\nA exists having the given frequency array.",
        "368": "OR Matrix\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\nYou are given a matrix of integers\nA with\nN rows (numbered\n1 through\nN) and\nM columns (numbered\n1 through\nM). Each element of this matrix is either\n0 or\n1.\nA move consists of the following steps:\nChoose two different rows\nr\n1\nand\nr\n2\nor two different columns\nc\n1\nand\nc\n2\n.\nApply the bitwise OR operation with the second row\/column on the first row\/column. Formally, if you chose two rows, this means you should change\nA\nr\n1\n,k\nto\nA\nr\n1\n,k\n\u2228A\nr\n2\n,k\nfor each\n1\u2264k\u2264M; if you chose two columns, then you should change\nA\nk,c\n1\nto\nA\nk,c\n1\n\u2228A\nk,c\n2\nfor each\n1\u2264k\u2264N.\nFor each element of the matrix, compute the minimum number of moves required to make it equal to\n1 or determine that it is impossible. Note that these answers are independent, i.e. we are starting with the initial matrix for each of them.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains two space-separated integers\nN and\nM.\nN lines follow. For each\ni (\n1\u2264i\u2264N), the\ni-th of these lines contains\nM integers\nA\ni,1\n,A\ni,2\n,\u2026,A\ni,M\nNOT separated by spaces.\nOutput\nFor each test case, print\nN lines. For each valid\ni, the\ni-th of these lines should contain\nM space-separated integers; for each valid\nj, the\nj-th of these integers should be the minimum number of moves required to make\nA\ni,j\nequal to\n1, or\n\u22121 if it is impossible.\n###Constraints\n1\u2264T\u2264100\n1\u2264N,M\u22641,000\nA\ni,j\n\u2208{0,1} for each valid\ni,j\nthe sum of\nN\u22c5M for all test cases does not exceed\n1,000,000\nSample 1:\nInput\nOutput\n1\n3 3\n010\n000\n001\n1 0 1\n2 1 1\n1 1 0",
        "369": "Fire Escape Routes\nThere are\nN people working in a building, and each one works in a separate cabin. Chef\u2019s employees are numbered by integers from\n1 to\nN, inclusive. Chef wants to ensure the safety of his employees. He wants to have fire escapes in the building and wants to train the employees to use these by conducting mock drills.\nChef knows that the number of people working in his office can be very large. In order to avoid crowding of a common fire escape route during emergency, Chef has decided to build multiple fire escapes. For the safety of every employee, each cabin has a fire exit which is connected to one of the fire escape routes.\nA lot of employees are friends with each other. The friendship is mutual. This means that if employee\ni is a friend of employee\nj then employee\nj is a friend of employee\ni as well. But friendship is NOT necessarily transitive. This means that if employee\ni is a friend of employee\nj AND employee\nj is a friend of employee\nk, then employee\ni and employee\nk need not necessarily be friends.\nIf two employees are friends, they do not want to escape through different routes. This complicates the task for the Chef. As already mentioned, he wants to have the maximum number of fire escape routes to ensure maximum safety. Also, for every escape route, one of the employees using that route needs to be appointed as the fire drill captain. The captain will be responsible for conducting the mock drills and train all the employees using that route. Your task is simple. Given the number of employees and the friendship list, you need to tell the Chef the maximum number of fire escape routes that he can have in the building and the number of ways of selecting the captains for every route. Since the number of ways can be really large, output this value modulo\n10\n9\n+7.\nInput\nThe first line of the input contains a single integer\nT, denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains two space-separated integers\nN and\nM, denoting the number of employees and the number of friendship relations, respectively.\nEach of the following\nM lines contains two space-separated integers\ni and\nj, denoting that employee\ni and employee\nj are friends.\nOutput\nFor each test case, output a single line containing two space separated integers, denoting the maximum number of distinct fire escape routes that can be constructed and the number of ways of selecting the captains modulo\n10\n9\n+7.\nConstraints\n1\u2264T\u22645\n1\u2264N\u226410\n5\n0\u2264M\u226410\n5\n1\u2264i,j\u2264N\ni\n\ue020\n=j\nFor any pair of employees\ni and\nj such that\n1\u2264i,j\u2264N, at most one pair among\n(i,j) and\n(j,i) will appear in the input\nSample 1:\nInput\nOutput\n3\n4 2\n1 2\n2 3\n5 3\n1 2\n2 3\n1 3\n6 3\n1 2\n3 4\n5 6\n2 3\n3 3\n3 8\nExplanation:\nExample case 1: Here employees\n1 and\n2 are friends and should share the same fire escape. Also employees\n2 and\n3 share the same fire escape. This means employees\n1,\n2, and\n3 will have a common route. But to maximize number of routes Chef could assign another route to employee\n4 since it is not a friend of other employee. So we have two escape routes with the following distribution of employees by routes:\n{1,2,3},\n{4}. Therefore, there are\n3 ways to chose drill captains:\n(1,4),\n(2,4),\n(3,4), where first element in the pair denotes the captain for the first route and second element denotes the captain for the second route.\nExample case 2: Here the optimal distribution of employees by routes is\n{1,2,3},\n{4},\n{5}. Therefore, there are\n3 ways to chose drill captains:\n(1,4,5),\n(2,4,5),\n(3,4,5).\nExample case 3: Here the optimal distribution of employees by routes is\n{1,2},\n{3,4},\n{5,6}. Therefore, there are 8 ways to chose drill captains:\n(1,3,5),\n(1,3,6),\n(1,4,5),\n(1,4,6),\n(2,3,5),\n(2,3,6),\n(2,4,5),\n(2,4,6).",
        "370": "Three Numbers\nChef has three numbers\nA,B, and\nC.\nHe can do the following type of operation:\nSelect two numbers amongst\nA,B, and\nC;\nAdd\n1 to the selected numbers;\nSubtract\n1 from the remaining number.\nDetermine whether Chef can make all the three numbers equal after applying the above operation any number of times.\nIf yes, output the minimum number of operations required by Chef.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of single line containing\n3 space-separated integers\nA,B, and\nC.\nOutput Format\nFor each test case, output\n\u22121 if the numbers cannot be made equal, else output the minimum number of operations required to make them equal.\nConstraints\n1\u2264T\u226410\n4\n1\u2264A,B,C\u226410\n9\nSample 1:\nInput\nOutput\n4\n1 1 2\n3 7 3\n4 4 4\n1 2 3\n-1\n2\n0\n-1\nExplanation:\nTest case\n1: It can be proven that we cannot make the numbers equal using any number of operations.\nTest case\n2: We require a minimum of\n2 operations to make the numbers equal:\nOperation\n1: Select the numbers\nA and\nC. Thus,\nA and\nC become\n3+1=4 and\n3+1=4 respectively. Also,\nB becomes\n7\u22121=6.\nOperation\n2: Select the numbers\nA and\nC. Thus,\nA and\nC become\n4+1=5 and\n4+1=5 respectively. Also,\nC becomes\n6\u22121=5.\nThus, all\n3 numbers are equal after\n2 operations.\nTest case\n3: Since all\n3 numbers are already equal, we require no operations.\nTest case\n4: It can be proven that we cannot make the numbers equal using any number of operations.",
        "371": "Chef and Water Car\nRead problem statements in Mandarin, Russian, and Vietnamese as well.\nChef is a great mechanic. As the cost of petrol is increasing day by day he decided to build a water car to take his girlfriend Natasha on a date. Water car has great build quality but is able to travel only\n1 Km on every\n1 liter of water. To show off his water car to Natasha he took her to the formula racing track which is an (\nN\u22121) km long road with checkpoints numbered\n1 to\nN from left to right. The distance between two adjacent checkpoints is\n1 Km.\nInitially, Chef is at checkpoint number\n1 and the tank of the water car is empty. At every checkpoint, there is a water station, but the cost of filling\n1 liter of water at a checkpoint is equal to the checkpoint number. Chef can not store more than\nV liters of water in the tank of a car. Chef is interested in both minimum as well as the maximum cost of filling that can happen to reach the checkpoint number\nN.\nYou shouldn't have any water left after reaching\nN\nth\ncheckpoint. Also, you are not allowed to pour out water.\nInput Format\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains two space-separated integers\nN,V.\nOutput Format\nFor each test case, output two integers separated by space representing the maximum and minimum cost of filling respectively.\nConstraints\n1\u2264T\u226410\n3\n1\u2264N,V\u226410\n9\nSubtasks\nSubtask 1 (20 points):\nV=1\nSubtask 2 (80 points): Original constraints\nSample 1:\nInput\nOutput\n3\n3 1\n4 2\n4 3\n3 3\n6 4\n6 3\nExplanation:\nTest case\n1: Given\nN=3 and\nV=1, Chef will start at checkpoint\n1, fill\n1 liter of water at a cost of\n1 and move\n1 Km right to reach checkpoint\n2. At checkpoint\n2, Chef will fill\n1 liter of water again at a cost of\n2 and move\n1 Km right to reach the destination i.e checkpoint\n3. Hence total cost incurred is\n3. There is no other way to reach the destination with a different expense.",
        "372": "The Vowel Matrix\nWelcome to The Mega City!\nNeo finds himself in a high-stakes situation. He has a string\nS of length\nN and his task is to crack the string using the vowel matrix.\nThe vowel matrix is a unique cryptographic scheme where the string is sliced into multiple pieces, such that, each piece contains exactly\nK vowels.\nDetermine the number of ways you can slice the string\nS using vowel matrix scheme. Since the number can be huge, print it modulo\n10\n9\n+7.\nNote:\nThe characters a, e, i, o, and u are considered vowels in lowercase english alphabets.\nIt is guaranteed that\nS contains at least one vowel and the number of vowels in\nS is a multiple of\nK.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains two space-separated integers\nN and\nK, the length of string and the number of vowels required in each piece of string.\nThe second line contains the string\nS, consisting of lowercase english letters.\nOutput Format\nFor each test case, output on a single line, the number of ways you can slice the string\nS using vowel matrix scheme. Since the number can be huge, print it modulo\n10\n9\n+7.\nConstraints\n1\u2264T\u226410\n4\n1\u2264N\u226410\n6\n1\u2264K\u2264N\nThe sum of\nN over all test cases won't exceed\n10\n6\n.\nIt is guaranteed that the number of vowels in\nS is a multiple of\nK.\nSample 1:\nInput\nOutput\n2 \n3 1\nneo\n10 2\nbabylonian\n1\n2\nExplanation:\nTest case\n1: There is only one possible way to slice the string such that all pieces have\n1 vowel each:\nne\n\u2223 o.\nTest case\n2: There are two possible ways to slice the string such that all pieces have\n2 vowels each:\nbabylo\n\u2223 nian\nbabylon\n\u2223 ian",
        "373": "Fencing\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nThere is a field with plants \u2014 a grid with\nN rows (numbered\n1 through\nN) and\nM columns (numbered\n1 through\nM); out of its\nNM cells,\nK cells contain plants, while the rest contain weeds. Two cells are adjacent if they have a common side.\nYou want to build fences in the field in such a way that the following conditions hold for each cell that contains a plant:\nit is possible to move from this cell to each adjacent cell containing a plant without crossing any fences\nit is impossible to move from this cell to any cell containing weeds or to leave the grid without crossing any fences\nThe fences can only be built between cells or on the boundary of the grid, i.e. on the sides of cells. The total length of the built fences is the number of pairs of side-adjacent cells such that there is a fence built on their common side plus the number of sides of cells on the boundary of the grid which have fences built on them. Find the minimum required total length of fences that need to be built.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains three space-separated integers\nN,\nM and\nK.\nK lines follow. Each of these lines contains two space-separated integers\nr and\nc denoting that the cell in row\nr and column\nc contains a plant.\nOutput\nFor each test case, print a single line containing one integer \u2014 the minimum required length of fences.\nConstraints\n1\u2264T\u226410\n1\u2264N,M\u226410\n9\n1\u2264K\u226410\n5\n1\u2264r\u2264N\n1\u2264c\u2264M\nthe cells containing plants are pairwise distinct\nSubtasks\nSubtask #1 (30 points):\n1\u2264N,M\u22641,000\nSubtask #2 (70 points): original constraints\nSample 1:\nInput\nOutput\n2\n4 4 9\n1 4\n2 1 \n2 2\n2 3\n3 1\n3 3\n4 1\n4 2\n4 3\n4 4 1\n1 1\n20\n4\nExplanation:\nExample case 1: The field looks like this ('x' denotes a cell containing a plant, '.' denotes a cell containing weeds):\n...x\nxxx.\nx.x.\nxxx.\nAn optimal solution is to build fences around the topmost plant (with length\n4), around the remaining eight plants (with length\n12) and around the hole between them (with length\n4). The total length is\n4+12+4=20.",
        "374": "Beautiful Array\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\nA sequence of integers is beautiful if each element of this sequence is divisible by 4.\nYou are given a sequence a1, a2, ..., an. In one step, you may choose any two elements of this sequence, remove them from the sequence and append their sum to the sequence. Compute the minimum number of steps necessary to make the given sequence beautiful.\nInput\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer n.\nThe second line contains n space-separated integers a1, a2, ..., an.\nOutput\nFor each test case, print a single line containing one number \u2014 the minimum number of steps necessary to make the given sequence beautiful. If it's impossible to make the sequence beautiful, print -1 instead.\nConstraints\n1 \u2264 T \u2264 105\n1 \u2264 n \u2264 105\n1 \u2264 sum of n over all test cases \u2264 106\n0 \u2264 ai \u2264 109\nSample 1:\nInput\nOutput\n1\n7\n1 2 3 1 2 3 8\n3",
        "375": "Magnet Sort\nThere is an array\nA with\nN elements. Each element of\nA has a fixed polarity: either north or south.\nChef is allowed to perform some (possibly zero) operations on the array\nA. In one operation, Chef can:\nPick some subarray of array\nA, such that, the first and last elements of the subarray have different polarities, and, rearrange the elements in this subarray any way he wants.\nNote that the polarity of each element remains unchanged after an operation.\nFind the minimum number of operations required to sort the array in non-decreasing order, or state that it is impossible.\nA subarray of\nA is obtained by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\nInput Format\nThe first line contains an integer\nT, denoting the number of test cases. The\nT test cases then follow.\nThe first line of each test case contains a single integer\nN.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n.\nThe third line of each test case contains a string of length\nN, the\nith character of which is either\nN or\nS, representing that the\nith element of\nA has north or south polarity, respectively.\nOutput Format\nFor each test case, if it impossible to sort the array, output\n\u22121. Otherwise, output a single integer: the minimum number of operations required to sort the array.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u22642\u22c510\n5\n1\u2264A\ni\n\u226410\n9\nThe sum of\nN across all test cases doesn't exceed\n2\u22c510\n5\n.\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n6\n5\n1 3 2 3 7\nNNSNS\n2\n2 1\nSS\n3\n1 8 12\nSNS\n3\n3 2 1\nNSN\n5\n1 2 3 5 4\nNSNSN\n5\n1 1 2 2 1\nSNSNN\n1\n-1\n0\n2\n1\n1\nExplanation:\nLet's represent elements with a polarity of north in\nred, and elements with a polarity of south in\nblue. The polarity of each element is also labelled above it.\nIn the first test case, we can sort the array in a single operation as follows.\nRearrange the subarray\n[A\n1\n,A\n2\n,A\n3\n]:\n[\n1\nN\n,\n3\nN\n,\n2\nS\n,\n3\nN\n,\n7\nS\n]\u2192[\n1\nN\n,\n2\nS\n,\n3\nN\n,\n3\nN\n,\n7\nS\n].\nIn the second test case, the array\n[\n2\nS\n,\n1\nS\n] cannot be sorted, since no operations can be performed.\nIn the third test case, the array is already sorted, so the answer is\n0.\nIn the fourth test case, we can sort the array in two operations as follows.\nRearrange the subarray\n[A\n2\n,A\n3\n]:\n[\n3\nN\n,\n2\nS\n,\n1\nN\n]\u2192[\n3\nN\n,\n1\nN\n,\n2\nS\n].\nRearrange the subarray\n[A\n1\n,A\n2\n,A\n3\n]:\n[\n3\nN\n,\n1\nN\n,\n2\nS\n]\u2192[\n1\nN\n,\n2\nS\n,\n3\nN\n].",
        "376": "The One with All the Candy\nMonica decides that she would like to get to know the neighbours in the apartment better. She makes a batch of wonderful chocolates and hangs them on the door in a basket hoping that her neighbors will take some and they can meet. The neighbours (including Joey) eventually go crazy over the candy and demand more. Eventually, she keeps a bowl full of chocolates at the door for the last time.\nThere are\nN neighbours. The\ni\nth\nneigbhour has initial energy equal to\nA\ni\n. There is one bowl filled with chocolates. The neighbours are made to stand in a row and the bowl is passed around by obeying the following rules:\nAny person can hold the bowl initially.\nIf the person holding the bowl has positive energy, he\/she passes the bowl to the person on the immediate right of him\/her. The rightmost person in the row passes the bowl to the leftmost person in the row.\nThe act of passing the bowl takes\n1 second.\nIf the person holding the bowl has non-positive energy, he\/she drops the bowl.\nAfter each pass, the energy of the person reduces by\n1.\nAmong all possible ways in which the\nN neighbours start the game, find the maximum time until the bowl is dropped.\nInput Format\nFirst line will contain\nT, number of testcases. Then the testcases follow.\nFirst line of each testcase contains one integer\nN.\nSecond line of each testcase contains of\nN integers, denoting the elements of array\nA.\nOutput Format\nFor each testcase, output in a single line the maximum time until the bowl is dropped.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u226410\n5\n0\u2264A[i]\u226410\n6\nSum of\nN over all test cases does not exceed\n2\u22c510\n5\nSample 1:\nInput\nOutput\n3\n3\n2 1 1\n3\n0 5 0\n4\n3 0 2 1\n4\n1\n3\nExplanation:\nTest case 1: One of the optimal orders in which all the neighbours can stand in the row is:\n1\n\u2192\n2\n\u2192\n3\n\u2192\n1. The bowl is initially with person\n1.\nPerson\n1, in one second, passes the bowl to person\n2 and his\/her own energy becomes\n1.\nPerson\n2, in one second, passes the bowl to person\n3 and his\/her own energy becomes\n0.\nPerson\n3, in one second, passes the bowl to person\n1 and his\/her own energy becomes\n0.\nPerson\n1, in one second, passes the bowl to person\n2 and his\/her own energy becomes\n0.\nPerson\n2 has\n0 energy, so he\/she drops the bowl. Thus, the bowl is dropped after\n4 seconds.\nTest case 2: One of the optimal orders in which all the neighbours can stand in the row is:\n2\n\u2192\n1\n\u2192\n3\n\u2192\n2. The bowl is initially with person\n2. Thus, it would travel as\n2\n\u2192\n1. The bowl can not be passed further due to\n0 energy of person\n1.",
        "377": "Subsegment Divisibility\nJJ challenges his friend GG to construct an array\nA containing\nN distinct elements such that the following conditions hold:\nFor all\n1\u2264i\u2264N,\n1\u2264A\ni\n\u226410\n5\nFor every subarray of length\n\u22652, the sum of all the elements of the subarray is not divisible by the length of the subarray\nPlease help perplexed GG to complete JJ's challenge.\nInput Format\nThe first line contains\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains an integer\nN - the size of the array\nA to be constructed.\nOutput Format\nFor each test case, output an array\nA containing\nN distinct elements which satisfy the given conditions.\nIf there are multiple arrays that satisfy the conditions, print any.\nConstraints\n1\u2264T\u226410\n1\u2264N\u2264500\nSample 1:\nInput\nOutput\n2\n3\n4\n7 2 5\n3 18 11 2\nExplanation:\nTest case-1: Following are the subarrays of length\n\u22652:\nLength=2:\nsum([7,2])=9,\nsum([2,5])=7\nLength=3:\nsum([7,2,5])=14\nWe can see that for each of these subarrays, the sum is not divisible by the length.\nTest case-2: Following are the subarrays of length\n\u22652:\nLength=2:\nsum([3,18])=21,\nsum([18,11])=29,\nsum([11,2])=13\nLength=3:\nsum([3,18,11])=32,\nsum([18,11,2])=31\nLength=4:\nsum([3,18,11,2])=34\nWe can see that for each of these subarrays, the sum is not divisible by the length.",
        "378": "Chef and Pepperoni Pizza\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nChef has a pepperoni pizza in the shape of a\nN\u00d7N grid; both its rows and columns are numbered\n1 through\nN. Some cells of this grid have pepperoni on them, while some do not. Chef wants to cut the pizza vertically in half and give the two halves to two of his friends. Formally, one friend should get everything in the columns\n1 through\nN\/2 and the other friend should get everything in the columns\nN\/2+1 through\nN.\nBefore doing that, if Chef wants to, he may choose one row of the grid and reverse it, i.e. swap the contents of the cells in the\ni-th and\nN+1\u2212i-th column in this row for each\ni (\n1\u2264i\u2264N\/2).\nAfter the pizza is cut, let's denote the number of cells containing pepperonis in one half by\np\n1\nand their number in the other half by\np\n2\n. Chef wants to minimise their absolute difference. What is the minimum value of\n\u2223p\n1\n\u2212p\n2\n\u2223?\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN.\nN lines follow. For each\ni (\n1\u2264i\u2264N), the\ni-th of these lines contains a string with length\nN describing the\ni-th row of the grid; this string contains only characters '1' (denoting a cell with pepperonis) and '0' (denoting a cell without pepperonis).\nOutput\nFor each test case, print a single line containing one integer \u2014 the minimum absolute difference between the number of cells with pepperonis in the half-pizzas given to Chef's friends.\nConstraints\n1\u2264T\u22641,000\n2\u2264N\u22641,000\nN is even\nthe sum of\nN\u22c5N over all test cases does not exceed\n2\u22c510\n6\nSample 1:\nInput\nOutput\n2\n6\n100000\n100000\n100000\n100000\n010010\n001100\n4\n0011\n1100\n1110\n0001\n2\n0\nExplanation:\nExample case 1: Initially,\n\u2223p\n1\n\u2212p\n2\n\u2223=4, but if Chef reverses any one of the first four rows from \"100000\" to \"000001\",\n\u2223p\n1\n\u2212p\n2\n\u2223 becomes\n2.\nExample case 2: Initially,\n\u2223p\n1\n\u2212p\n2\n\u2223=0. We cannot make that smaller by reversing any row.",
        "379": "A Weird Device\nYou were strolling outside the restaurant at the end of the universe. On a metaspiral path you stumble upon a weird device which takes a three-digit number as input and processes it. The Hitchhiker's guide to the galaxy explains that it processes the input in the following manner:\nMultiplies it with 13, followed by 11 and then 7\nOutputs all the distinct three-digit numbers possible from the digits of the new number (each digit can only be used once)\nYour friend Zaphod is in a playful mood, and does the following with the device-\nGiven a three-digit positive number\nK, he feeds it to the device for processing.\nHe then takes the numbers it gives as output, and send each of them through the device and again collect all the numbers sent out.\nRepeats the above step\nN times.\nTo test your wit, he challenges you to find the number of distinct 3-digit numbers which the device outputs over the\nN steps. Can you?\nInput:\nFirst line will contain\nT, number of testcases. Then the testcases follow.\nEach testcase contains of a single line of input, two integers\nK,N.\nOutput:\nFor each testcase, output a single integer denoting the number of distinct 3-digit numbers which the device outputs over the\nN steps.\nConstraints\n1\u2264T\u22641000\n5\u2264N\u226410\n9\nEach digit of\nK is non-zero\nSample 1:\nInput\nOutput\n1\n123 5\n27",
        "380": "Joker and Batman\nRead problem statements in Russian, Mandarin Chinese, Bengali, and Vietnamese as well.\nDuring a fight with the Joker, Batman's eyes lose the capability to distinguish between some pairs of colors.\nEach color has an integer ID from\n1 to\nN. There are\nM lists where each color belongs to exactly one list. Batman can distinguish colors belonging to different lists, but he cannot distinguish colors belonging to the same list.\nGiven a strip of\nL colors, find the different number of segments Batman will see as a result of his disability. Two positions of the strip are said to belong to the same segment if they are adjacent on the strip and Batman cannot distinguish their colors. See the sample explanation for clarity.\nInput Format\nThe first line contains an integer\nT, the number of test cases. Then the test cases follow.\nThe first line contain three integers\nN,\nM, and\nL - the number of colors, the number of lists, and the length of the strip, respectively.\nEach of the next\nM lines describes a list. It begins with an integer\nK\ni\n, the length of the\ni-th list, followed by\nK\ni\nintegers\nA\ni1\n,A\ni2\n,\u2026,A\niK\ni\n- the color IDs of the\ni-th list.\nThe next line contains\nL integers\nS\n1\n,S\n2\n,\u2026,S\nL\n- the color IDs of the strip.\nOutput Format\nFor each test case, output in a single line the answer to the problem.\nConstraints\n1\u2264T\u226410\n1\u2264M\u2264N\u226410\n5\n1\u2264L\u226410\n5\n1\u2264K\ni\n,A\nij\n,S\ni\n\u2264N\n\u2211\ni=1\nM\nK\ni\n=N\nEach color belongs to exactly one list.\nSample 1:\nInput\nOutput\n3\n2 2 2\n1 2\n1 1\n2 1\n2 2 4\n1 1\n1 2\n1 2 2 1\n3 2 3\n2 1 3\n1 2\n1 3 1\n2\n3\n1\nExplanation:\nTest Case 1: Since the strip is composed of colors from different lists, the answer is the length of the strip, which is\n2.\nTest Case 2: The first and second index have colors from different lists, and the third and fourth index have colors from different lists. So the strip is seen to be composed of\n3 consecutive segments.\nTest Case 3: Since the strip is composed of colors from the same list, the answer is\n1 segment.",
        "381": "Worthy Matrix\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef found a matrix\nA with\nN rows (numbered\n1 through\nN) and\nM columns (numbered\n1 through\nM), where for each row\nr and column\nc, the cell in row\nr and column\nc (denoted by\n(r,c)) contains an integer\nA\nr,c\n.\nThis matrix has two interesting properties:\nThe integers in each row form a non-decreasing sequence, i.e. for each valid\ni,\nA\ni,1\n\u2264A\ni,2\n\u2264\u2026\u2264A\ni,M\n.\nThe integers in each column also form a non-decreasing sequence, i.e. for each valid\nj,\nA\n1,j\n\u2264A\n2,j\n\u2264\u2026\u2264A\nN,j\n.\nA\nK-worthy submatrix is a square submatrix of\nA, i.e. a submatrix with\nl rows and\nl columns, for any integer\nl, such that the average of all the integers in this submatrix is\n\u2265K.\nChef wants you to find the number of\nK-worthy submatrices of\nA.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains three space-separated integers\nN,\nM and\nK.\nN lines follow. For each valid\ni, the\ni-th of these lines contains\nM space-separated integers\nA\ni,1\n,A\ni,2\n,A\ni,3\n,\u2026,A\ni,M\n.\nOutput\nFor each test case, print a single line containing one integer \u2015 the number of\nK-worthy submatrices of\nA.\nConstraints\n1\u2264T\u226410\n1\u2264N\u22c5M\u226410\n6\nN\u2264M\n0\u2264K\u226410\n9\n0\u2264A\nr,c\n\u226410\n9\nfor each valid\nr,c\nthe sum of\nN\u22c5M over all test cases does not exceed\n10\n6\nSubtasks\nSubtask #1 (15 points): the sum of\nN\u22c5M over all test cases does not exceed\n10\n3\nSubtask #2 (25 points): the sum of\nN\u22c5M over all test cases does not exceed\n4\u22c510\n5\nSubtask #3 (60 points): original constraints\nSample 1:\nInput\nOutput\n1\n3 3 4\n2 2 3\n3 4 5\n4 5 5\n7\nExplanation:\nExample case 1: The following are the seven\n4-worthy submatrices:\n[\n[\n3\n4\n4\n5\n] with average\n4; this matrix occurs only once\n[\n[\n4\n5\n5\n5\n] with average\n4.75; this matrix also occurs only once\n[\n[\n4\n] with average\n4; we find this matrix twice in\nA\n[\n[\n5\n] with average\n5; we find this matrix\n3 times in\nA",
        "382": "Dazzling Even-Odd Challenge\nDazzler has an interesting task for you.\nYou will be given an array\nA of\nN positive integers such that:\nN is always even.\nExactly\n2\nN\nelements in the array are even and\n2\nN\nelements are odd.\nIn one operation, you should do the following steps:\nChoose two different indices\ni and\nj\n(1\u2264i,j\u2264N).\nSet\nA\ni\n:=A\ni\n+1.\nSet\nA\nj\n:=A\nj\n\u22121.\nYou need to apply some finite (possibly zero) number of operations on the array such that:\nThe parity of the final element at each index is same as the parity of the initial element at that index. For example, if the\ni\nth\nelement in the initial array is even, then, the\ni\nth\nelement in the final array must be even as well.\nAll the\n2\nN\nodd elements in the final array are equal.\nAll the\n2\nN\neven elements in the final array are equal.\nPrint YES if it is possible to meet all the above conditions after doing some finite (possibly zero) number of operations. Otherwise, print NO.\nInput Format\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nFirst line of each test case contains\nN, number of elements in the array\nA. Note that,\nN is even.\nSecond line of each test case contains\nN space-separated positive integers, the elements of the array.\nOutput Format\nFor each test case, output in a single line, YES if it is possible to meet all the given conditions after doing some finite (possibly zero) number of operations. Otherwise, print NO.\nYou may print each character of the string in uppercase or lowercase (for example, the strings YeS, yEs, yes and YES will all be treated as identical).\nConstraints\n1\u2264T\u226410\n4\n2\u2264N\u22642\u22c510\n5\n1\u2264A[i]\u226410\n9\nN%2=0\nSum of\nN over all test cases does not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n4\n4\n1 1 2 4\n4\n1 2 5 6\n2\n1 2\n4\n1 2 3 4\nNO\nYES\nYES\nYES\nExplanation:\nTest case\n1: It is not possible to satisfy all the given conditions using any number of operations.\nTest case\n2: One of the possible sequence of operations is listed below:\nIn the first operation, choose\ni=2 and\nj=4. Thus,\nA\n2\n=2+1=3 and\nA\n4\n=6\u22121=5. The array will become\n[1,3,5,5].\nIn the second operation, choose\ni=2 and\nj=4. Thus,\nA\n2\n=3+1=4 and\nA\n4\n=5\u22121=4. The array will become\n[1,4,5,4].\nIn the third operation, choose\ni=1 and\nj=3. Thus,\nA\n1\n=1+1=2 and\nA\n3\n=5\u22121=4. The array will become\n[2,4,4,4].\nIn the fourth operation, choose\ni=1 and\nj=3. Thus,\nA\n1\n=2+1=3 and\nA\n3\n=4\u22121=3. The array will become\n[3,4,3,4].\nHere, all the odd elements are equal and all the even elements are equal. Also, the parity at each index is preserved.\nTest case\n3: The array\n[1,2] satisfies all the conditions. Thus,\n0 operations are needed.",
        "383": "Array Rotation Returns\nRead problem statements in Mandarin, Bengali, Russian, and Vietnamese as well.\nYou are given a sequence\nA\n1\n,A\n2\n,\u2026,A\nN\nwhich contains pairwise distinct elements and a sequence\nB\n1\n,B\n2\n,\u2026,B\nN\n, which also contains pairwise distinct elements (but not necessarily distinct from elements of\nA). For each valid\ni,\n1\u2264A\ni\n,B\ni\n\u22642\u22c5N.\nYou may rotate\nB as many times as you want. A rotation consists of moving the first element of the sequence to the end. Afterwards, let's define a sequence\nC\n1\n,C\n2\n,\u2026,C\nN\nas\nC\ni\n=(A\ni\n+B\ni\n)%N for each valid\ni.\nThere are\nN possible sequences\nC. Find the lexicographically smallest of these sequences.\nNote: A sequence\nx is lexicographically smaller than a different sequence\ny if\nx\ni\n<\u2009y\ni\n, where\ni is the smallest valid index where the sequences\nx and\ny differ.\nInput Format\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN.\nThe second line contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n.\nThe third line contains\nN space-separated integers\nB\n1\n,B\n2\n,\u2026,B\nN\n.\nOutput Format\nFor each test case, print a single line containing\nN space-separated integers\nC\n1\n,C\n2\n,\u2026,C\nN\ndenoting the lexicographically smallest sequence.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u226410\n5\n1\u2264A\ni\n,B\ni\n\u22642\u22c5N for each valid\ni\nthe sum of\nN over all test cases does not exceed\n2\u22c510\n5\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n1\n3\n1 4 5\n1 3 4\n1 2 0\nExplanation:\nExample case 1: After rotating\nB once, it becomes\n(3,4,1). Now\nC=(1,2,0). This is the lexicographically smallest of all possible sequences\nC.",
        "384": "Fibonacci String\nFor a string\nS let the unique set of characters that occur in it one or more times be\nC. Consider a permutation of the elements of\nC as\n(c\n1\n,c\n2\n,c\n3\n...). Let\nf(c) be the number of times\nc occurs in\nS.\nIf any such permutation of the elements of\nC satisfies\nf(c\ni\n)=f(c\ni\u22121\n)+f(c\ni\u22122\n) for all\ni\u22653, the string is said to be a dynamic string.\nMr Bancroft is given the task to check if the string is dynamic, but he is busy playing with sandpaper. Would you help him in such a state?\nNote that if the number of distinct characters in the string is less than 3, i.e. if\n\u2223C\u2223<3, then the string is always dynamic.\n###Input:\nFirst line will contain\nT, number of testcases. Then the testcases follow.\nEach testcase contains of a single line of input, a string\nS.\n###Output: For each testcase, output in a single line \"Dynamic\" if the given string is dynamic, otherwise print \"Not\". (Note that the judge is case sensitive)\n###Constraints\n1\u2264T\u226410\n1\u2264\u2223S\u2223\u226410\n5\nS contains only lower case alphabets:\na,\nb, ...,\nz\nSample 1:\nInput\nOutput\n3\naaaabccc\naabbcc\nppppmmnnoooopp\nDynamic\nNot\nDynamic\nExplanation:\nTestase 1: For the given string,\nC={a,b,c} and\nf(a)=4,f(b)=1,f(c)=3.\nf(a)=f(c)+f(b) so the permutation\n(b,c,a) satisfies the requirement.\nTestcase 2: Here too\nC={a,b,c} but no permutation satisfies the requirement of a dynamic string.\nTestcase 3: Here\nC={m,n,o,p} and\n(m,n,o,p) is a permutation that makes it a dynamic string.",
        "385": "OR of ANDs\nRead problems statements in Mandarin Chinese, Russian, and Bengali as well.\nYou are given an array\nA with\nN integers. An array's score is defined as the bitwise AND of all its elements. You need to find the bitwise OR of the scores of all possible non-empty subarrays of\nA.\nFurthermore, there are\nQ queries. Each query consists of two integers\nX and\nV. You need to change the value of the element at index\nX to\nV. After each query, you again need to find the bitwise OR of the scores of all possible non-empty subarrays.\nSee the example for more clarification.\n###Input: The first line of the input contains a single integer\nT - the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains two space-separated integers\nN and\nQ - the size of the array and the number of queries, respectively.\nThe second line contains\nN space-separated integers\nA\n1\n,\u2026,A\nN\n.\nEach of the next\nQ lines contains two space-separated integers\nX and\nV - the position and the new value of the query, respectively.\n###Output: For each test case print\nQ+1 lines. In the first line print the answer for the original array and in the next\nQ lines print the answer after every query.\n###Constraints\n1\u2264T\u2264100\n1\u2264N,Q\u226410\n5\n0\u2264A\ni\n\u22642\n31\n\u22121\n1\u2264X\u2264N\n0\u2264V\u22642\n31\n\u22121\nThe sum of\nN over all test cases does not exceed\n10\n5\nThe sum of\nQ over all test cases does not exceed\n10\n5\nSample 1:\nInput\nOutput\n2\n3 2\n1 2 3\n1 4\n3 0\n4 1\n1 2 3 4\n4 0\n3\n7\n6\n7\n3\nExplanation:\nExample case 1: For the original array, all possible subarrays and their scores are as follows.\nAND(1)=1,\nAND(2)=2,\nAND(3)=3,\nAND(1,2)=0,\nAND(2,3)=2,\nAND(1,2,3)=0.\nThe bitwise OR of all possible subarray's score is\nOR(1,2,3,0,2,0)=3.\nAfter the first query new array will be\n[4,2,3] and the answer will be\n7.\nAfter the second query new array will be\n[4,2,0] and the answer will be\n6.",
        "386": "Good Permutations\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\nYou have a sequence\na with length\nN created by removing some elements (possibly zero) from a permutation of numbers\n(1,2,\u2026,N). When an element is removed, the length of the sequence doesn't change, but there is an empty spot left where the removed element was. You also have an integer\nK.\nLet's call a permutation\np\n1\n,p\n2\n,\u2026,p\nN\ngood if:\nit is possible replace empty spots in\na by numbers in such a way that we obtain the permutation\np\nthe number of positions\ni (\n1<i\u2264N) such that\np\ni\n>p\ni\u22121\nis equal to\nK\nYour task is to find the number of good permutations.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains two space-separated integers\nN and\nK.\nThe second line contains\nN space-separated integers\na\n1\n,a\n2\n,\u2026,a\nN\n. Each element of this sequence is either\n0 (indicating an empty spot previously occupied by a removed element) or an integer between\n1 and\nN inclusive.\nOutput\nFor each test case, print a single line containing one integer \u2014 the number of good permutations.\nConstraints\n1\u2264T\u2264300\n0\u2264K<N\u22648\neach integer between\n1 and\nN inclusive appears in\na at most once\nSample 1:\nInput\nOutput\n1\n3 1\n2 0 0\n2\nExplanation:\nExample case 1: The two possible good permutations are\n(2,3,1) and\n(2,1,3).",
        "387": "Adjacent Xors\nJJ has an array\nA of length\nN and an integer\nX. JJ can perform the following operation at most once:\nSelect a subsequence of\nA and add\nX to all the elements of that subsequence.\nFor example, if\nA=[2,1,6,3,5] and\nX=7, we can select the subsequence\n[2,3,5] and add\nX to all the elements. Now the array\nA becomes\n[2+7,1,6,3+7,5+7]=[9,1,6,10,12].\nJJ wants to maximize the value of\ni=2\n\u2211\nN\n(A\ni\u22121\n\u2295A\ni\n). Can you help him to do so?\nHere,\n\u2295 denotes the bitwise XOR operation.\n& & kya &\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains two space-separated integers\nN and\nX \u2014 the size of the array\nA and the parameter\nX mentioned in the statement.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\ndenoting the array\nA.\nOutput Format\nFor each test case, output the maximum value of\ni=2\n\u2211\nn\n(A\ni\u22121\n\u2295A\ni\n) which can be obtained after applying the given operation at most once.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n5\n1\u2264X\u226410\n9\n1\u2264A\ni\n\u226410\n9\nThe sum of\nN over all test cases does not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n2 1\n1 2\n4 1\n2 2 3 3\n5 2\n5 3 6 2 8\n3\n15\n43\nExplanation:\nTest case\n1: It is optimal to not perform the given operation. So the answer will equal\n1\u22952=3.\nTest case\n2: It is optimal to add\nX=1 to the\n2\nnd\nand the\n3\nrd\nelement. So\nA will become\n[2,3,4,3] and the answer will be\n(2\u22953)+(3\u22954)+(4\u22953)=15.",
        "388": "Minions and Voting\nRead problems statements in Mandarin chinese, Russian and Vietnamese as well.\nThere are N minions who are competing in an election of the president of the ACM (Association of Cute Minions). They are standing in a line in the order from minion 1 to minion N. For each i (1 \u2264 i \u2264 N), the i-th minion has an influence level of Si.\nA single minion may cast any number of votes. Minion j will vote for minion i (i \u2260 j) if and only if the influence level of the j-th minion is greater than or equal to the sum of influence levels of all the minions standing between them (excluding the i-th and j-th minion).\nYour task is to find the number of votes received by each minion.\nInput\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N denoting the number of minions.\nThe second line contains N space-separated integers S1, S2, ..., SN.\nOutput\nFor each test case, print a single line containing N space-separated integers. For each valid i, the i-th of these integers should denote the number of votes the i-th minion will get.\nConstraints\n1 \u2264 T \u2264 105\n1 \u2264 N \u2264 105\n1 \u2264 Si \u2264 109 for each valid i\nsum of N over all test cases won't exceed 106\nSubtasks\nSubtask #1 (30 points):\n1 \u2264 N \u2264 500\nsum of N over all test cases won't exceed 10,000\nSubtask #2 (70 points): original constraints\nSample 1:\nInput\nOutput\n2\n4\n4 3 2 1\n5\n1 2 2 3 1\n1 2 3 2\n2 3 2 3 1\nExplanation:\nExample case 1:\nThe first minion will get only a vote of the second minion.\nThe second minion will get votes of the first and third minion.\nThe third minion will get votes of the first, second and fourth minion.\nThe fourth minion will get votes of the second and third minion.",
        "389": "Air Blimp\nThere are\nN cities in a row. The\ni-th city from the left has a sadness of\nA\ni\n.\nIn an attempt to reduce the sadness of the cities, you can send blimps from the left of city\n1 that move rightwards (i.e, a blimp crosses cities\n1,2,\u2026 in order)\nYou are given two integers\nX and\nY. For each blimp sent, you can make one of the following choices:\nLet the blimp fly over every city, in which case the sadness of every city will decrease by\nY, or,\nChoose a city\ni\n(1\u2264i\u2264N), and shower confetti over city\ni. In this case, the sadness of cities\n1,2,\u2026,i\u22121 will decrease by\nY, the sadness of city\ni will decrease by\nX, and cities\ni+1,\u2026,N see no change in sadness.\nFind the minimum number of blimps needed such that, by making the above choice optimally for each blimp, you can ensure that no city is sad (i.e, in the end every city has sadness\n\u22640).\nInput Format\nThe first line of input contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains three space-separated integers\nN,X,Y \u2014 the size of the array, and the parameters mentioned in the statement.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n, denoting the sadness of the\nN cities.\nOutput Format\nFor each test case, output on a new line the minimum number of blimps needed such that no city is sad.\nConstraints\n1\u2264T\u226410\n4\n1\u2264N\u22643\u22c510\n5\n1\u2264X,Y\u226410\n9\n0\u2264A\ni\n\u226410\n9\nThe sum of\nN over all test cases does not exceed\n3\u22c510\n5\nSample 1:\nInput\nOutput\n3\n4 4 4\n1 5 4 4\n5 4 3\n1 4 3 3 5\n4 3 1\n3 1 3 9\n2\n2\n3\nExplanation:\nTest case\n1: One way of using two blimps is as follows:\nInitially,\nA=[1,5,4,4]\nShower confetti on city\n2. Now,\nA=[\u22123,1,4,4].\nShower confetti on city\n4. Now,\nA=[\u22127,\u22123,0,0] and we are done.\nTest case\n2: One way of using two blimps is as follows:\nInitially,\nA=[1,4,3,3,5]\nLet a blimp fly over every city. Now,\nA=[\u22122,1,0,0,2].\nShower confetti on city\n5. Now,\nA=[\u22125,\u22122,\u22123,\u22123,\u22122], and we are done.",
        "390": "Connecting Soldiers\nTo protect people from evil, a long and tall wall was constructed a few years ago. But just a wall is not safe, there should also be soldiers on it, always keeping vigil. The wall is very long and connects the left and the right towers. There are exactly N spots (numbered 1 to N) on the wall for soldiers. The Kth spot is K miles far from the left tower and (N+1-K) miles from the right tower.\nGiven a permutation of spots P of {1, 2, ..., N}, soldiers occupy the N spots in that order. The P[i]th spot is occupied before the P[i+1]th spot. When a soldier occupies a spot, he is connected to his nearest soldier already placed to his left. If there is no soldier to his left, he is connected to the left tower. The same is the case with right side. A connection between two spots requires a wire of length equal to the distance between the two.\nThe realm has already purchased a wire of M miles long from Nokia, possibly the wire will be cut into smaller length wires. As we can observe, the total length of the used wire depends on the permutation of the spots P. Help the realm in minimizing the length of the unused wire. If there is not enough wire, output -1.\nInput\nFirst line contains an integer T (number of test cases, 1 \u2264 T \u2264 10 ). Each of the next T lines contains two integers N M, as explained in the problem statement (1 \u2264 N \u2264 30 , 1 \u2264 M \u2264 1000).\nOutput\nFor each test case, output the minimum length of the unused wire, or -1 if the the wire is not sufficient.\nSample 1:\nInput\nOutput\n4\n3 8\n3 9\n2 4\n5 25\n0\n0\n-1\n5\nExplanation:\nIn the 1st case, for example, the permutation P = {2, 1, 3} will use the exact 8 miles wires in total.\n\nIn the 2nd case, for example, the permutation P = {1, 3, 2} will use the exact 9 miles wires in total.\n\nTo understand the first two cases, you can see the following figures:\n\n\n\n\n\n\nIn the 3rd case, the minimum length of wire required is 5, for any of the permutations {1,2} or {2,1}, so length 4 is not sufficient.\n\nIn the 4th case, for the permutation {1, 2, 3, 4, 5} we need the maximum length of the wire = 20. So minimum possible unused wire length = 25 - 20 = 5.",
        "391": "Angled Flip\nYou are given two\nN\u00d7M integer matrices\nA and\nB. You are allowed to perform the following operation on\nA as many times as you like (possibly, zero):\nPick any square submatrix of\nA and flip it about either its main diagonal or its antidiagonal.\nFor example, suppose you choose the submatrix\n\u23a3\n\u23a1\n123\n456\n789\n\u23a6\n\u23a4\n.\nIt can be converted into either\n\u23a3\n\u23a1\n147\n258\n369\n\u23a6\n\u23a4\nby flipping about the main diagonal, or\n\u23a3\n\u23a1\n963\n852\n741\n\u23a6\n\u23a4\nby flipping about the antidiagonal.\nIs it possible to convert\nA to\nB by performing this operation several (possibly, zero) times?\nNote: For the purposes of this problem, a submatrix of a matrix is the intersection of a contiguous segment of rows with a contiguous segment of columns.\nFor example, if\nA=\n\u23a3\n\u23a1\n123\n456\n789\n\u23a6\n\u23a4\nthen\n[\n[\n2\n],\n[\n[\n56\n89\n], and\n[\n[\n1\n4\n] are submatrices of\nA, while\n[\n[\n13\n79\n] is not.\nA square submatrix is a submatrix with the same number of rows and columns.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains two space-separated integers\nN and\nM \u2014 the number of rows and columns of the matrices, respectively.\nThe next\nN lines describe the matrix\nA. The\ni-th of these lines contains\nM space-separated integers \u2015 the values\nA\ni,1\n,A\ni,2\n,\u2026,A\ni,M\n.\nThe next\nN lines describe the matrix\nB. The\ni-th of these lines contains\nM space-separated integers \u2015 the values\nB\ni,1\n,B\ni,2\n,\u2026,B\ni,M\n.\nOutput Format\nFor each test case, print YES if its possible to convert\nA to\nB, else print NO.\nEach character of the output may be printed in either uppercase or lowercase. For example, the strings YES, yes, yeS, YeS will all be treated as identical.\nConstraints\n1\u2264T\u226410\n4\n1\u2264N,M\u22643\u22c510\n5\n1\u2264A\ni,j\n,B\ni,j\n\u226410\n9\nThe sum of\nN\u22c5M over all test cases won't exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n2\n2 3\n1 2 3\n4 5 6\n1 4 3\n6 5 2\n3 3\n12 11 8\n7 1 1\n9 2 4\n4 1 8\n2 1 11\n9 7 12\nYES\nYES\nExplanation:\nTest case\n1:\nA can be converted to\nB as follows:\n[\n[\n123\n456\n]\u2192[\n163\n452\n]\u2192[\n143\n652\n]",
        "392": "Minimum Absolute Score\nYou are given two strings\nA and\nB of length\nN consisting of lowercase English letters. Your objective is to make both the strings equal.\nYou can apply one of the following\n2 operations at each index\ni:\nConvert char\nA\ni\nto\nB\ni\nby doing right cyclic shift of character\nA\ni\n. This increases your score by amount equal to cyclic shifts done.\nConvert char\nB\ni\nto\nA\ni\nby doing right cyclic shift of character\nB\ni\n. This decreases your score by amount equal to cyclic shifts done.\nYour starting score is zero.\nIf the operations are applied optimally, find the minimum absolute score possible after making both the strings equal.\nNote: A single right cyclic shift converts one character to the next in alphabetical order, except for\nz which goes to\na. That is, the sequence looks like\na\u2192b\u2192c\u2192\u2026\u2192y\u2192z\u2192a\u2192b\u2192\u2026\nSo, for example converting\na to\ne requires\n4 right cyclic shifts, and converting\nk to\ni requires\n24.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of three lines of input.\nThe first line of each test case contains one integer\nN \u2014 the length of strings\nA and\nB.\nThe second line contains string\nA.\nThe third line contains string\nB.\nOutput Format\nFor each test case, output on a new line the minimum absolute score possible after making both the strings equal.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u226410\n5\nBoth strings\nA and\nB have same length\nN and contain only lowercase English letters.\nThe sum of\nN over all test cases won't exceed\n10\n5\n.\nSample 1:\nInput\nOutput\n4\n3\nabb\nbaz\n3\nzzc\naaa\n4\nfxbs\ndkrc\n5\neaufq\ndrtkn\n2\n0\n11\n9\nExplanation:\nTest case\n1: The minimum absolute score can be obtained as follows:\nApply operation\n1 at position\n1, converting\na to\nb for a cost of\n+1.\nApply operation\n2 at position\n2, converting\na to\nb for a cost of\n\u22121.\nApply operation\n2 at position\n3, converting\nz to\nb for a cost of\n\u22122.\nThe score is then\n1\u22121\u22122=\u22122, with absolute value\n2. This is the lowest possible absolute value attainable.\nTest case\n2: Apply operations as follows:\nOperation\n1 at index\n1,\nz\u2192a for a cost of\n+1\nOperation\n1 at index\n2,\nz\u2192a for a cost of\n+1\nOperation\n2 at index\n3,\na\u2192c for a cost of\n\u22122\nThis gives us a final score of\n1+1\u22122=0, which has absolute value\n0. It is not possible to do better than this.",
        "393": "Binary Mismatch\nYou have a binary string\nS of length\nN.\nYou must perform the following operation on the binary string\nS exactly once:\nChoose two integers\nL and\nR\n(1\u2264L\u2264R\u2264N) and invert the substring\nS\nL\u2026R\n(i.e change\n1 to\n0 and change\n0 to\n1).\nDetermine whether you can make the number of zeroes in\nS equal to number of ones in\nS by performing the above operation exactly once. If there exists a way, also output the bounds of the chosen substring.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases.\nThe first line of each test case contains a single integer\nN \u2014 the length of string\nS.\nThe second line of each test case contains a binary string\nS of length\nN.\nOutput Format\nFor each test case, output NO if there is no way to make the number of zeroes equal to number of ones.\nOtherwise, output YES. In the next line, output two integers\nL and\nR\n(1\u2264L\u2264R\u2264N) \u2014 bounds of the chosen substring. If there are multiple answers, print any.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n1\u2264T\u226410000\n1\u2264N\u226410\n5\nS is a binary string, i.e, contains only characters\n0 and\n1\nSum of\nN over all test cases does not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n2\n01\n3\n010\n4\n1000\nYES\n1 2\nNO\nYES\n4 4\nExplanation:\nTest case 1: We can pick\nL=1 and\nR=2 to obtain:\n01\n\u219210, which contains equal number of zeroes and ones.\nTest case 2: It can be proven that there is no way to make the number of zeroes equal to number of ones.\nTest case 3: We can pick\nL=4 and\nR=4 to obtain:\n100\n0\n\u21921001, which contains equal number of zeroes and ones.",
        "394": "Find A, B, C\nChef has\n3 hidden numbers\nA,B, and\nC such that\n0\u2264A,B,C\u2264N.\nLet\nf be a function such that\nf(i)=(A\u2295i)+(B\u2295i)+(C\u2295i). Here\n\u2295 denotes the bitwise XOR operation.\nGiven the values of\nf(0),f(1),\u2026,f(N), determine the values of\nA,B, and\nC.\nIt is guaranteed that at least one tuple exists for the given input. If there are multiple valid tuples of\nA,B,C, print any one.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains a single integer\nN denoting the upper bound on the values of\nA,B,C.\nNext line contains\nN+1 space-separated integers denoting\nf(0),f(1),\u2026,f(N).\nOutput Format\nFor each test case, output on a new line, three space-separated integers, the values of\nA,B, and\nC. If there are multiple valid tuples of\nA,B,C, print any one.\nConstraints\n1\u2264T\u22642\u22c510\n4\n2\u2264N\u226410\n5\nSum of\nN over all test cases does not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n2\n0 3 6\n2\n4 7 2\n5\n9 6 11 8 13 10\n0 0 0\n2 0 2\n1 3 5\nExplanation:\nTest case\n1: The tuple\nA=0,B=0,C=0 satisfies as:\nf(0)=0\u22950+0\u22950+0\u22950=0.\nf(1)=0\u22951+0\u22951+0\u22951=3.\nf(2)=0\u22952+0\u22952+0\u22952=6.\nTest case\n2: The tuple\nA=2,B=0,C=2 satisfies as:\nf(0)=2\u22950+0\u22950+2\u22950=4.\nf(1)=2\u22951+0\u22951+2\u22951=7.\nf(2)=2\u22952+0\u22952+2\u22952=2.\nTest case\n3: The tuple\nA=1,B=3,C=5 satisfies as:\nf(0)=1\u22950+3\u22950+5\u22950=9.\nf(1)=1\u22951+3\u22951+5\u22951=6.\nf(2)=1\u22952+3\u22952+5\u22952=11.\nf(3)=1\u22953+3\u22953+5\u22953=8.\nf(4)=1\u22954+3\u22954+5\u22954=13.\nf(5)=1\u22955+3\u22955+5\u22955=10.",
        "395": "XOR Product\nChef has an array\nA of length\nN.\nHe can modify this array by applying a special operation any number of times. In one operation, he can:\nSelect two indices\ni and\nj\n(1\u2264i<j\u2264\u2223A\u2223).\nAppend\nA\ni\n\u2295A\nj\nto the end of the array, where\n\u2295 denotes the bitwise XOR operation\nRemove\nA\ni\nand\nA\nj\nfrom the array.\nChef wants to maximize the product of all the elements of the array after applying these operations.\nHelp Chef determine the maximum product he can achieve by applying this operation any (possibly zero) number of times. As this number can be large, print it modulo\n998244353.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains one integer\nN \u2014 the number of elements in the array.\nThe second line consists of\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\ndenoting the elements of the array initially.\nOutput Format\nFor each test case, output the maximum product he can achieve modulo\n998244353.\nConstraints\n1\u2264T\u22645\u22c510\n4\n2\u2264N\u226410\n5\n1\u2264A\ni\n\u226410\n9\nThe sum of\nN over all test cases won't exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n4\n1 2 1 2\n2\n3 3\n2\n2 1\n9\n9\n3\nExplanation:\nTest case\n1: Chef can make the following operations:\nOperation\n1: Choose\ni=1 and\nj=2, append\nA\n1\n\u2295A\n2\n=1\u22952=3 to the end of the array and remove elements\nA\n1\nand\nA\n2\n. Thus, the array becomes\n[1,2,3].\nOperation\n2: Choose\ni=1 and\nj=2, append\nA\n1\n\u2295A\n2\n=1\u22952=3 to the end of the array and remove elements\nA\n1\nand\nA\n2\n. Thus, the array becomes\n[3,3].\nThe product of all elements of the array is\n3\u00d73=9. It can be shown that this is the maximum product that can be obtained by applying any number of operations on the array.\nTest case\n2: The product of all elements of the array is\n3\u00d73=9. It can be shown that this is the maximum product that can be obtained by applying any number of operations on the array.\nThus, Chef does not need to perform any operations.\nTest case\n3: Chef can make the following operation:\nOperation\n1: Choose\ni=1 and\nj=2, append\nA\n1\n\u2295A\n2\n=1\u22952=3 to the end of the array and remove elements\nA\n1\nand\nA\n2\n. Thus, the array becomes\n[3].\nThe product of all elements is\n3. It can be shown that this is the maximum product that can be obtained by applying any number of operations on the array.",
        "396": "Chef and Round Run\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef cooks nice receipes in the cafeteria of his company. The cafe contains N boxes with food enumerated from 1 to N and are placed in a circle in clocwise order (boxes 1 and N are adjacent). Each box has unlimited amount of food with a tastyness level of Ai. Chef invented a definition of a magic box!\nChef picks a box i and stays in front of it.\nNow Chef eats food from box i and skips next Ai boxes.\nNow Chef is staying at some other (probably even the same!) box and repeats.\nBox i is a magic box if at some point of such game started from box i, Chef will find himself staying in front of it again.\nWhen Chef came home, Chef's dog Tommy asked him about how many magic boxes were in the cafe? Help Chef to in finding that!\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N denoting the number of boxes.\nThe second line contains N space-separated integers A1, A2, ..., AN denoting the tastyness levels of each box.\nOutput\nFor each test case, output a single line containing number of magical boxes.\nConstraints\n1 \u2264 sum of all N over all the test cases in a single test file \u2264 106\n0 \u2264 Ai \u2264 109\nSubtasks\nSubtask #1 (30 points): 1 \u2264 sum of all N over all the test cases \u2264 104; 1 \u2264 N \u2264 1000\nSubtask #2 (70 points): 1 \u2264 sum of all N over all the test cases \u2264 106; 1 \u2264 N \u2264 105\nSample 1:\nInput\nOutput\n3\n4\n1 1 1 1\n4\n3 0 0 0\n4\n0 0 0 2\n4\n1\n2\nExplanation:\nExample case 1.\nHere are Chef's paths if he starting from each the box:\n1->3->1\n2->4->2\n3->1->3\n4->2->4\nAs you see, all 4 boxes are magical.\nExample case 2.\nHere are Chef's paths if he starts from each box appropriately:\n1->1\n2->3->4->1->1\n3->4->1->1\n4->1->1\nAS you see, only box 1 is magical.",
        "397": "Equal LIS\nFor a permutation\nP of length\nN, we define\nL(P) to be the length of the longest increasing subsequence in\nP. That is,\nL(P) is the largest integer\nK such that there exist indices\ni\n1\n<i\n2\n<\u2026<i\nK\nsuch that\nP\ni\n1\n<P\ni\n2\n<\u2026<P\ni\nK\n.\nDefine\nP\nR\nto be the permutation\n(P\nN\n,P\nN\u22121\n,\u2026,P\n1\n).\nYou are given a positive integer\nN. You need to output a permutation\nP of length\nN such that\nL(P)=L(P\nR\n), or say that none exist.\nNote:\nP is said to be a permutation of length\nN if\nP is a sequence of length\nN consisting of\nN distinct integers between\n1 and\nN. For example,\n(3,1,2) is a permutation of length\n3, but\n(1,4,2),\n(2,2,3) and\n(2,1) are not.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nEach test case consists of a single line containing one integer\nN \u2014 the length of the permutation to be constructed.\nOutput Format\nFor each test case, output on a new line \"YES\" if there exists a valid permutation, and \"NO\" if there doesn't. If you outputted \"YES\", on the next line, output a valid permutation\nP as\nN space-separated integers, the\ni\nth\nof which is\nP\ni\n.\nYou can print each letter of the string in any case (upper or lower) (for instance, strings YES, yEs, and yes will be considered identical).\nConstraints\n1\u2264T\u22641000\n2\u2264N\u22642\u22c510\n5\nThe sum of\nN across all test cases does not exceed\n2\u22c510\n5\nSample 1:\nInput\nOutput\n2\n2\n3\nNO\nYES\n1 3 2\nExplanation:\nTest Case\n1: There are two permutations of length\n2 \u2014\n(1,2) and\n(2,1). The length of the LIS of\n(1,2) is\n2 and the length of the LIS of\n(2,1) is\n1. Since these permutations are reverses of each other and have unequal LIS lengths, there is no valid permutation of length\n2.\nTest Case\n2: The length of the LIS of\n(1,3,2) is\n2, and the length of the LIS of its reverse,\n(2,3,1), is also\n2. Therefore, this is a valid permutation of length\n3.",
        "398": "Divisors and Reciprocals\nAlice is teaching Bob maths via a game called\nN-guesser.\nAlice has a positive integer\nN which Bob needs to guess. She gives him two pieces of information with which to do this:\nA positive integer\nX, which denotes the sum of divisors of\nN.\nTwo positive integers\nA and\nB, which denote that the sum of reciprocals of divisors of\nN is\nA\/B.\nBob either needs to guess\nN or tell that no such number exists.\nIt can be shown that if a valid\nN exists, it is unique.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nEach test case consists of a single line of input, containing three space-separated integers\nX,A,B.\nOutput Format\nFor each test case, output a new line containing the answer \u2014 Alice's number\nN, or\n\u22121 if no such number exists.\nConstraints\n1\u2264T\u22641000\n1\u2264X\u226410\n9\n1\u2264A,B\u226410\n9\ngcd(A,B)=1\nSample 1:\nInput\nOutput\n2\n4 4 3\n4 1 1\n3\n-1\nExplanation:\nTest case\n1: The divisors of\n3 are\n1 and\n3. Their sum is\n4 and the sum of their reciprocals is\n4\/3.\nTest case\n2: It can be proved that no positive integer\nN exists whose divisors sum to\n4 and reciprocals of divisors sum to\n1.",
        "399": "Restaurant Rating\nChef has opened up a new restaurant. Like every other restaurant, critics critique this place. The Chef wants to gather as much positive publicity as he can. Also, he is very aware of the fact that people generally do not tend to go through all the reviews. So he picks out the positive reviews and posts it on the website of the restaurant. A review is represented by an integer which is the overall rating of the restaurant as calculated by that particular review. A review is considered to be positive if it is among the top one-third of the total reviews when they are sorted by their rating. For example, suppose the ratings given by 8 different reviews are as follows:\n2 8 3 1 6 4 5 7\nThen the top one-third reviews will be 8 and 7. Note that we considered one-third to be 8\/3=2 top reviews according to integer division. (see Notes)\nSo here is what the Chef wants from you: Given the reviews(ratings) by different critics, the Chef needs you to tell him what is the minimum rating that his website will be displaying. For example in the above case, the minimum rating that will be displayed is 7. Also, different critics keep reviewing the restaurant continuosly. So the new reviews keep coming in. The Chef wants your website ratings to be up-to-date. So you should keep updating the ratings there. At any point of time, the Chef might want to know the minimum rating being displayed. You'll have to answer that query. An interesting thing to note here is that a review might be in the website for some time and get knocked out later because of new better reviews and vice-versa.\nNotes: To be precise, the number of reviews displayed website will be floor(n \/ 3), where n denotes the current number of all reviews.\nInput\nFirst line of the input file consists of a single integer N, the number of operations to follow. The next N lines contain one operation each on a single line. An operation can be of 2 types:\n1 x : Add a review with rating 'x' to the exisiting list of reviews (x is an integer)\n2 : Report the current minimum rating on the website\nOutput\nFor every test case, output a single integer each for every operation of type 2 mentioned above. If no review qualifies as a positive review, print \"No reviews yet\".\nConstraints\n1 \u2264 N \u2264 250000\n1 \u2264 x \u2264 1000000000\nSample 1:\nInput\nOutput\n10\n1 1\n1 7\n2\n1 9\n1 21\n1 8\n1 5\n2\n1 9\n2\nNo reviews yet\n9\n9\nExplanation:\nBefore the first query of the Chef, i.e. the first operation of type 2 in the input, the only ratings were 1 & 7. Thus, there will be total of 2\/3 = 0 positive ratings. For the next two, the ratings list now looks like: 1 5 7 8 9 21. Hence, top one-third will have 6\/3 = 2 ratings as positive. And lowest displayed rating will be 9. Similarly for the last operation of type 2. Note that there are two ratings of the same value 9 now and only one of them can be in the top reviews. In such a case, you can choose any one of them.",
        "400": "College Life 4\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef and\nN\u22121 more of his friends go to the night canteen. The canteen serves only three items (well, they serve more, but only these three are edible!), which are omelette, chocolate milkshake, and chocolate cake. Their prices are\nA,\nB and\nC respectively.\nHowever, the canteen is about to run out of some ingredients. In particular, they only have\nE eggs and\nH chocolate bars left. They need:\n2 eggs to make an omelette\n3 chocolate bars for a chocolate milkshake\n1 egg and\n1 chocolate bar for a chocolate cake\nEach of the\nN friends wants to order one item. They can only place an order if the canteen has enough ingredients to prepare all the ordered items. Find the smallest possible total price they have to pay or determine that it is impossible to prepare\nN items.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains six space-separated integers\nN,\nE,\nH,\nA,\nB and\nC.\nOutput\nFor each test case, print a single line containing one integer \u2015 the minimum cost of\nN items, or\n\u22121 if it is impossible to prepare\nN items.\nConstraints\n1\u2264T\u22642\u22c510\n5\n1\u2264N\u226410\n6\n0\u2264E,H\u226410\n6\n1\u2264A,B,C\u226410\n6\nthe sum of\nN over all test cases does not exceed\n10\n6\nSubtasks\nSubtask #1 (30 points):\n1\u2264N\u2264100\nSubtask #2 (70 points): original constraints\nSample 1:\nInput\nOutput\n3\n5 4 4 2 2 2\n4 5 5 1 2 3\n4 5 5 3 2 1\n-1\n7\n4\nExplanation:\nExample case 1: The maximum number of items that can be produced using\n4 eggs and\n4 chocolates is\n4, so the answer is\n\u22121.\nExample case 2: In the optimal solution, the friends should order\n2 omelettes,\n1 chocolate milkshake and\n1 chocolate cake, with cost\n1\u22c52+2\u22c51+3\u22c51=7.\nExample case 3: In the optimal solution, the friends should order\n4 chocolate cakes, with cost\n1\u22c54=4.",
        "401": "Pythagorean Pair\nChef has an integer\nN. It is known that the largest odd divisor of\nN does not exceed\n10\n5\n.\nDetermine two non-negative integers\nA and\nB such that\nA\n2\n+B\n2\n=N, or report that no such pair exists.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single integer\nN.\nOutput Format\nFor each test case, output space-separated\nA and\nB such that\nA\n2\n+B\n2\n=N or\n\u22121 if no such pair exists.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n15\nLargest odd divisor of\nN won't exceed\n10\n5\n.\nSample 1:\nInput\nOutput\n4\n100\n6\n13\n4\n8 6\n-1\n2 3\n0 2\nExplanation:\nTest case\n1: A possible pair\n(A,B) such that\nA\n2\n+B\n2\n=N is\n(8,6). Here,\n8\n2\n+6\n2\n=64+36=100.\nTest case\n2: There is no pair\n(A,B) such that\nA\n2\n+B\n2\n=N.\nTest case\n3: A possible pair\n(A,B) such that\nA\n2\n+B\n2\n=N is\n(2,3). Here,\n2\n2\n+3\n2\n=4+9=13\nTest case\n4: A possible pair\n(A,B) such that\nA\n2\n+B\n2\n=N is\n(0,2). Here,\n0\n2\n+2\n2\n=0+4=4.",
        "402": "Minimize Digitsum\n###Read problems statements Hindi ,Bengali , Mandarin chinese , Russian and Vietnamese as well.\nYou are given positive integers\nN and\nD. You may perform operations of the following two types:\nadd\nD to\nN, i.e. change\nN to\nN+D\nchange\nN to\ndigitsum(N)\nHere,\ndigitsum(x) is the sum of decimal digits of\nx. For example,\ndigitsum(123)=1+2+3=6,\ndigitsum(100)=1+0+0=1,\ndigitsum(365)=3+6+5=14.\nYou may perform any number of operations (including zero) in any order. Please find the minimum obtainable value of\nN and the minimum number of operations required to obtain this value.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains two space-separated integers\nN and\nD.\nOutput\nFor each test case, print a single line containing two space-separated integers \u2014 the minimum value of\nN and the minimum required number of operations.\nConstraints\n1\u2264T\u226410\n1\u2264N,D\u226410\n10\nSubtasks\nSubtask #1 (30 points):\n1\u2264N,D\u2264100\nSubtask #2 (70 points): original constraints\nSample 1:\nInput\nOutput\n3\n2 1\n9 3\n11 13\n1 9\n3 2\n1 4\nExplanation:\nExample case 1: The value\nN=1 can be achieved by 8 successive \"add\" operations (changing\nN to\n10) and one \"digit-sum\" operation.\nExample case 2: You can prove that you cannot obtain\nN=1 and\nN=2, and you can obtain\nN=3. The value\nN=3 can be achieved by one \"add\" and one \"digitsum\" operation, changing\n9 to\n12 and\n12 to\n3.\nExample case 3:\nN=1 can be achieved by operations \"add\", \"add\", \"digitsum\", \"digitsum\":\n11\u219224\u219237\u219210\u21921.",
        "403": "Matrix XOR\nRead problems statements in Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nChef has a tasty ingredient \u2015 an integer\nK. He defines a tasty matrix\nA with\nN rows (numbered\n1 through\nN) and\nM columns (numbered\n1 through\nM) as\nA\ni,j\n=K+i+j for each valid\ni,j.\nCurrently, Chef is busy in the kitchen making this tasty matrix. Help him find the bitwise XOR of all elements of this matrix.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains three space-separated integers\nN,\nM and\nK.\nOutput\nFor each test case, print a single line containing one integer \u2015 the bitwise XOR of all elements of the tasty matrix with the given dimensions made with the given special ingredient.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N,M\u22642\u22c510\n6\n1\u2264K\u226410\n9\nthe sum of\nN over all test cases does not exceed\n2\u22c510\n6\nthe sum of\nM over all test cases does not exceed\n2\u22c510\n6\nSample 1:\nInput\nOutput\n2\n2 2 5\n2 3 7\n14\n5\nExplanation:\nExample case 1: The matrix is\n5 + 1 + 1 & 5 + 1 + 2\\\\ 5 + 2 + 1 & 5 + 2 + 2\\end{pmatrix} = \\begin{pmatrix} 7 & 8 \\\\ 8 & 9 \\end{pmatrix} \\,.$$ The XOR of all its elements is $7 \\oplus 8 \\oplus 8 \\oplus 9 = 14$. **Example case 2:** The matrix is $$A = \\begin{pmatrix} 7 + 1 + 1 & 7 + 1 + 2 & 7 + 1 + 3\\\\ 7 + 2 + 1 & 7 + 2 + 2 & 7 + 2 + 3 \\end{pmatrix} = \\begin{pmatrix} 9 & 10 & 11\\\\ 10 & 11 & 12 \\end{pmatrix} \\,.$$ The XOR of all its elements is $9 \\oplus 10 \\oplus 11 \\oplus 10 \\oplus 11 \\oplus 12 = 5$. <\/div>",
        "404": "Binary Inversion\nYou are given\nN binary strings\nS\n1\n,S\n2\n,\u2026,S\nN\n, each of length\nM. You want to concatenate all the\nN strings in some order to form a single large string of length\nN\u22c5M. Find the minimum possible number of inversions the resulting string can have.\nA binary string is defined as a string consisting only of '\n0' and '\n1'.\nAn inversion in a binary string\nS is a pair of indices\n(i,j) such that\ni<j and\nS\ni\n= '\n1',\nS\nj\n= '\n0'. For example, the string\nS= \"\n01010\" contains\n3 inversions :\n(2,3),\n(2,5),\n(4,5).\nNote that you are not allowed to change the order of characters within any of the strings\nS\ni\n- you are only allowed to concatenate the strings themselves in whatever order you choose. For example, if you have \"\n00\" and \"\n10\" you can form \"\n0010\" and \"\n1000\", but not \"\n0001\".\nInput Format\nThe first line of input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains two space-separated integers\nN,M.\nN lines follow, the\ni\nth\nof which contains the string\nS\ni\nof length\nM.\nOutput Format\nFor each test case, print a single line containing one integer - the minimum possible number of inversions in the resulting string.\nConstraints\n1\u2264T\u226410\n3\n2\u2264N\u226410\n5\n1\u2264M\u226410\n5\n2\u2264N\u22c5M\u22642\u22c510\n5\n\u2223S\ni\n\u2223=M\nS\ni\ncontains only characters '\n0' and '\n1'.\nSum of\nN\u22c5M over all test cases does not exceed\n10\n6\n.\nSample 1:\nInput\nOutput\n4\n2 1\n0\n1\n3 2\n10\n00\n01\n2 4\n0010\n1011\n3 4\n1011\n1101\n0101\n0\n2\n3\n11\nExplanation:\nTest case\n1: Two strings can be formed :\nS\n1\n+S\n2\n=\"\n01\",\nS\n2\n+S\n1\n= \"\n10\". The first string does not have any inversion while the second has one inversion :\n(1,2).\nTest case\n2: Both\nS\n2\n+S\n1\n+S\n3\n=\"\n001001\",\nS\n2\n+S\n3\n+S\n1\n=\"\n000110\" contain\n2 inversions. It can be verified that no other order results in fewer inversions.",
        "405": "Triplets Min\nYou are given an integer array\nA of size\nN.\nA triplet array is defined as the collection of\nmin(A\ni\n,A\nj\n,A\nk\n) for all triplets\n(i,j,k), where\n1\u2264i<j<k\u2264N.\nYou are given\nQ queries of the following type:\nGiven an integer\nK, return the value of\nK\nth\nsmallest element in the triplet array.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains two space-separated integers\nN and\nQ \u2014 the size of array\nA and the number of queries, respectively.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n.\nThe following\nQ lines describe the queries. Each of these lines contain a single positive integer\nK.\nOutput Format\nFor each query, print a single line containing the\nK\nth\nsmallest element in the triplet array.\nConstraints\n1\u2264T\u22641000\n3\u2264N\u22643\u22c510\n5\n1\u2264Q\u22643\u22c510\n5\n\u221210\n9\n\u2264A\ni\n\u226410\n9\n1\u2264K\u2264(\n3\nN\n)\nThe sum of\nN over all test cases won't exceed\n3\u22c510\n5\n.\nThe sum of\nQ over all test cases won't exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n2\n6 2\n3 3 3 3 3 3\n18\n1\n4 4\n2 4 2 1\n1\n2\n3\n4\n3\n3\n1\n1\n1\n2\nExplanation:\nTest case 1: Here, all elements of triplet array are equal to\n3.\nTest case 2: The sorted triplet array is\n[1,1,1,2].",
        "406": "Swap the numbers\nYou're given an array\nA=[A\n1\n,A\n2\n,\u2026,A\nN\n] containing\nN integers.\nYou also have an integer\nK.\nYou can perform the following operation on this array:\nChoose indices\ni and\nj such that\n\u2223i\u2212j\u2223\u2265K, and swap\nA\ni\nand\nA\nj\n.\nThat is, you can swap the values of two indices that are at a distance of at least\nK from each other.\nFind the lexicographically smallest array that can be reached, if you perform the above operation several (possibly, zero) times.\nNote: For two arrays\nX and\nY of the same length,\nX is said to be lexicographically smaller than\nY if there exists an index\ni (\n1\u2264i\u2264N) such that:\nX\n1\n=Y\n1\n,X\n2\n=Y\n2\n,\u2026,X\ni\u22121\n=Y\ni\u22121\n; and\nX\ni\n<Y\ni\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains two space-separated integers\nN and\nK.\nThe next line contains\nN space-separated numbers, the values\nA\n1\n,A\n2\n,\u2026,A\nN\n.\nOutput Format\nFor each test case, print on a new line\nN space-separated integers \u2014 the lexicographically smallest array possible after applying the above operation several times.\nConstraints\n1\u2264T\u226410\n4\n1\u2264N,K\u226410\n5\n1\u2264A\ni\n\u226410\n9\nThe sum of\nN across all tests won't exceed\n10\n6\n.\nSample 1:\nInput\nOutput\n2\n3 2\n3 2 1\n4 3\n3 2 4 1\n1 2 3\n1 2 4 3\nExplanation:\nTest case\n1: Initially, we have\nA=[3,2,1].\nChoose\ni=1 and\nj=3, which is valid because\n\u22231\u22123\u2223=2\u2265K=2.\nSwapping\nA\n1\nand\nA\n3\n, we have the array\n[1,2,3], which is the best we can do.\nTest case\n2:\nA=[3,2,4,1] and\nK=3 here.\nThe only possible swap is\ni=1 and\nj=4; the other two elements can't be moved.\nPerforming this swap gives us\nA=[1,2,4,3], which is the best we can do.",
        "407": "Atleast and Atmost\nThere are\nN hidden integer arrays of length\nN each. You are given the mex of each of these\nN arrays.\nAshish likes lower bounds and Kryptonix likes upper bounds. So, for each\n0\u2264i\u2264N\u22121, find:\nThe least possible number of occurrences of\ni across all the arrays\nThe most possible number of occurrences of\ni across all the arrays\nNote that these values must be computed independently, i.e, it is allowed to choose different configurations of arrays to attempt to minimize\/maximize the number of occurrences of different integers.\nPlease see the samples for an example.\nRecall that the mex of an array is the smallest non-negative integer that is not present in it. For example, the mex of\n[0,2,4,1,1,5] is\n3, and the mex of\n[3,8,101,99,100] is\n0.\nInput Format\nThe first line of input contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains an integer\nN \u2014 the size of the array.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n, denoting the mexes of the\nN arrays.\nOutput Format\nFor each test case, output\nN lines, each containing two space-separated integers. The\ni-th line should contain the least and the most possible number of occurrences of\ni across all the arrays.\nConstraints\n1\u2264T\u226410\n4\n1\u2264N\u22643\u22c510\n5\n0\u2264A\ni\n\u2264N\nThe sum of\nN over all test cases does not exceed\n3\u22c510\n5\nSample 1:\nInput\nOutput\n3\n2\n1 0\n5\n3 1 5 0 2\n3\n1 2 1\n1 2\n0 2\n4 13\n3 13\n2 13\n1 13\n1 15\n3 8\n1 2\n0 4\nExplanation:\nTest case\n1: We have the following:\nFor\ni=0, the two arrays can be\n[0,3] and\n[2,4] giving us one zero, or\n[0,0] and\n[3,1] giving us\n2 zeros.\nFor\ni=1,\n[0,4] and\n[3,4] give no ones, while\n[0,9] and\n[1,1] give\n2 ones.\nTest case\n3: We have the following:\nFor\ni=0, the arrays\n[0,3,2],[1,0,4],[5,0,2] give the least number of zeros (i.e,\n3), and the arrays\n[0,0,0],[1,0,0],[0,0,0] give the most.\nFor\ni=1, the arrays\n[5,7,0],[0,3,1],[6,0,3] give the least number of ones and the arrays\n[0,3,2],[1,1,0],[5,0,2] give the most.\nFor\ni=2, the arrays\n[3,0,9],[0,0,1],[0,0,0] give the least number of twos and the arrays\n[2,0,2],[0,1,0],[2,2,0] give the most.",
        "408": "Maximum Sum Permutation\nYou are given an array\nA of size\nN. The array will be used to perform\nQ queries, where each query is comprised of a pair of integers, denoted by\nL\ni\nand\nR\ni\n.\nBefore the queries are executed, you are allowed to rearrange the elements in array\nA as desired.\nNext, an integer variable\nX is initialized to 0. For each of the\ni-th queries, calculate the sum of elements from\nA\nL\ni\nthrough\nA\nR\ni\ninclusive (i.e.\nA\nL\ni\n+A\nL\ni\n+1\n+\u22ef+A\nR\ni\n), and add this sum to\nX.\nThe objective of this problem is to find an arrangement of array\nA that maximizes the final value of\nX after all\nQ queries have been processed.\nIf there are multiple possible arrangements of\nA which achieve this maximum value, you can output any.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains two space-separated integers\nN and\nQ \u2014 the length of array and number of queries, respectively.\nThe next line contains\nN space-separated integers denoting the elements of the array.\nThe next\nQ lines describe the queries. The\ni-th of these\nQ lines contains two space-separated integers\nL\ni\nand\nR\ni\n, describing the range for the\ni-th query.\nOutput Format\nFor each test case, output on a new line the maximum possible value of\nX. And in the next line, output the rearranged array\nA, which achieves that maximum possible value.\nConstraints\n1\u2264T\u226410000\n1\u2264N\u2264200000\n1\u2264Q\u2264200000\n1\u2264A\ni\n\u2264100000\n1\u2264L\ni\n\u2264R\ni\n\u2264N\nThe sum of\nN over all test cases won't exceed\n2\u22c510\n5\nThe sum of\nQ over all test cases won't exceed\n2\u22c510\n5\nSample 1:\nInput\nOutput\n2\n5 2\n1 2 3 4 5\n1 4\n2 3\n2 3\n1 1\n1 1\n1 2\n2 2\n23\n2 4 5 3 1 \n4\n1 1\nExplanation:\nTestcase 1: The given array is\n[1,2,3,4,5]. Suppose we rearrange it as\n[2,4,5,3,1].\nInitially,\nX=0\nIn the first query, we add\nA\n1\n+A\n2\n+A\n3\n+A\n4\nto\nX. So\nX=0+14=14.\nIn the second query, we add\nA\n2\n+A\n3\nto\nX. So\nX=14+9=23.\nThis is the maximum possible value of\nX that we can achieve after the\nQ queries. And so, the output is\n23, and this rearranged array.",
        "409": "Equal Hamming Distance\nChef is given two binary strings\nA and\nB, each having length\nN.\nChef wants to find the number of binary strings\nC, of length\nN, such that\nH(A,C)=H(B,C), where\nH(X,Y) denotes the hamming distance between the strings\nX and\nY.\nSince the answer can be large, output it modulo\n10\n9\n+7.\nNote: Hamming distance between two strings of equal length is the number of positions at which the corresponding characters are different.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains a single integer\nN, the length of the strings.\nThe second line contains the binary string\nA.\nThe third line contains the binary string\nB.\nOutput Format\nFor each test case, output in a new line, the number of binary strings\nC which satisfy the given conditions modulo\n10\n9\n+7.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u22642\u22c510\n5\nA and\nB consist of\n0 and\n1 only.\nSum of\nN over all test cases do not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n2\n11\n00\n5\n10101\n10101\n3\n101\n011\n2\n32\n4\nExplanation:\nTest case\n1: The number of strings\nC, of length\n2, such that\nH(A,C)=H(B,C) is\n2. The strings are:\nC=10: Here,\nH(11,10)=H(00,10)=1, as there is only one position where the corresponding characters are different.\nC=01: Here,\nH(11,01)=H(00,01)=1.\nTest case\n3: The number of strings\nC, of length\n3, such that\nH(A,C)=H(B,C) is\n4. The strings are:\nC=000: Here,\nH(101,000)=H(011,000)=2, as there are two positions where the corresponding characters are different.\nC=111: Here,\nH(101,111)=H(011,111)=1, as there is only one position where the corresponding characters are different.\nC=001: Here,\nH(101,001)=H(011,001)=1, as there is only one position where the corresponding characters are different.\nC=110: Here,\nH(101,110)=H(011,110)=2, as there are two positions where the corresponding characters are different.",
        "410": "PerMEXuation\nYou are given an integer\nN and a (\n0-indexed) binary string\nA having length\nN+1.\nFind any permutation\nP of\n0,1,2,...,N\u22121 (or determine that it does not exist) that satisfies the following conditions for all\ni (\n0\u2264i\u2264N):\nif\nA\ni\n=0: No contiguous segment of\nP has\nmex equal to\ni\nif\nA\ni\n=1: There exists at least one contiguous segment of\nP that has\nmex equal to\ni\nIf multiple permutations exist that satisfy the given conditions, print any.\nNote:\nmex of a segment is the smallest non-negative number that does not occur in that segment.\nInput Format\nThe first line contains the number of test cases\nT. Description of the test cases follows.\nThe first line of each test case contains a single integer\nN.\nThe second line of each test case contains the binary string\nA of length\nN+1.\nOutput Format\nFor each test case print :\nYes if there exists a permutation\nP that satisfies the conditions described in the statement, followed by the permutation\nP in the next line (If multiple permutations exist that satisfy the given conditions, print any).\nNo otherwise.\nYou may print each character of\nYes and\nNo in uppercase or lowercase (for example,\nyes,\nyEs,\nYES will be considered identical).\nConstraints\n1\u2264T\u226410\n4\n2\u2264N\u22643\u22c510\n5\n\u2223A\u2223=N+1\nIt is guaranteed that the sum of\nN over all test cases does not exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n4\n2\n111\n5\n110100\n5\n110101\n7\n11100111\nYes\n0 1\nNo\nYes\n0 2 1 4 3\nYes\n0 1 3 4 2 5 6\nExplanation:\nTest case-1: One of the possible permutations satisfying the given conditions is [\n0,1] because:\nmex([1])=0. Therefore the condition is satisfied for\ni=0.\nmex([0])=1. Therefore the condition is satisfied for\ni=1.\nmex([0,1])=2. Therefore the condition is satisfied for\ni=2.\nTest case-2: It can be proven that no permutation exists that satisfies the given conditions.\nTest case-3: One of the possible permutations satisfying the given conditions is [\n0,2,1,4,3] because:\nmex([2])=0. Therefore the condition is satisfied for\ni=0.\nmex([0,2])=1. Therefore the condition is satisfied for\ni=1.\nThere does not exist any segment with\nmex=2. Therefore the condition is satisfied for\ni=2.\nmex([0,2,1])=3. Therefore the condition is satisfied for\ni=3.\nThere does not exist any segment with\nmex=4. Therefore the condition is satisfied for\ni=4.\nmex([0,2,1,4,3])=5. Therefore the condition is satisfied for\ni=5.",
        "411": "Alter Ego\nConsider an array\nA of size\nN:\nA\n1\n,A\n2\n,\u2026,A\nN\n, where\nN is even. The\nAlterEgo of this array\nA, is another array\nB, which is computed as follows:\nStart with an empty array\nB.\nFor\ni ranging from\n1 to\n2\nN\n, insert the elements\n(A\ni\n+A\ni+\n2\nN\n) and\n\u2223A\ni\n\u2212A\ni+\n2\nN\n\u2223 to the end of array\nB. Here\n\u2223x\u2223 refers to absolute value of\nx.\nRearrange the array\nB in some random order.\nAs you can see, because of the third point, an array\nA can have multiple\nAlterEgo arrays.\nGiven an array\nB of even length\nN, your job is to find if there exists an array\nA such that\nB is the\nAlterEgo of\nA. And if it does exist, find such an array\nA with the maximum possible sum of elements.\nThat is, if there is no array\nA such that\nB is an\nAlterEgo of\nA, print\n\u22121. Else print an array\nA such that\nB is an\nAlterEgo of\nA, and the sum of the elements of this array\nA is as large as possible. If there are multiple arrays possible with the maximum sum, print any.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains a single integer\nN \u2014 the number of elements in the array.\nThe second line of each test case contains\nN space-separated integers\nB\n1\n,B\n2\n,\u2026,B\nN\n\u2014 the elements of the array.\nOutput Format\nFor each test case, output on a new line, either\n\u22121, or\nN space separated integers denoting array\nA. If there are multiple arrays possible with the maximum sum, print any.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u22643\u22c510\n5\nN is even.\n1\u2264B\ni\n\u226410\n5\nThe sum of\nN over all test cases won't exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n6\n4 2 8 2 10 4\n4\n3 5 4 4\n2\n2 3\n7 5 3 3 3 1 \n4 4 0 1 \n-1\nExplanation:\nTest Case\n1: Consider the array\nA=[7,5,3,3,3,1]. Let us try to compute the\nAlterEgo of this array by following the steps:\nFor\ni=1,7+3=10 and\n\u22237\u22123\u2223=4\nFor\ni=2,5+3=8 and\n\u22235\u22123\u2223=2\nFor\ni=3,3+1=4 and\n\u22233\u22121\u2223=2\nSo, an\nAlterEgo of\nA would be a rearrangement of the array\n[10,4,8,2,4,2]. We see that the input array is indeed a rearrangement of this, and so,\nA is a valid array. It also turns out that this sum of\n7+5+3+3+3+1=22, is the largest possible sum.\nTest Case\n2: Consider the array\nA=[4,4,0,1]. Let us try to compute the\nAlterEgo of this array by following the steps:\nFor\ni=1,4+0=4 and\n\u22234\u22120\u2223=4\nFor\ni=2,4+1=5 and\n\u22234\u22121\u2223=3\nSo, an\nAlterEgo of\nA would be a rearrangement of the array\n[4,4,5,3]. We see that the input array is indeed a rearrangement of this, and so,\nA is a valid array. It also turns out that this sum of\n4+4+0+1=9, is the largest possible sum.\nTest Case\n3: It can be proved that there is no such array\nA whose\nAlterEgo is the given array\nB.",
        "412": "Alice Potter And Dumbledore Army\nDumbledore's Army consists of\nN members. Alice Potter is planning to hold\nM Dumbledore's Army sessions, where the members will perform training tasks to improve their skills in Defense Against the Dark Arts.\nInitially, each member of the Army has no tasks. Before the\ni-th training session, Alice gives the\nP\ni\n-th participant a task that he can complete in\nT\ni\nseconds. And each subsequent session Alice will add more and more difficult tasks, i.e.\nT\ni\n\u2264T\ni+1\n.\nLet's assume that by the\ni-th session, the\nj-th participant has accumulated\nC\nj\ntasks. Alice knows that sometimes there is not enough time to complete all the tasks in a single session, so instead of forcing them to complete all\nC\n1\n+C\n2\n+\u2026+C\nN\ntasks, she can allow them to complete only a certain number\nk of them. In this case, each participant can choose a subset of their tasks (in total, they have to choose\nk tasks) and perform only those tasks. Each participant performs his tasks sequentially and spends time equal to the sum of the times of his tasks. However, different participants can perform tasks in parallel, so the total time of the session is equal to the maximum of the times of each participant. We denote the minimum possible value of this time by\nans\ni,k\n.\nIn order to optimally train participants, for each session\ni Alice needs to know the value of\nans\ni,1\n+ans\ni,2\n+\u2026+ans\ni,i\n. Help Alice \u2014 calculate these sums for her.\nInput Format\nThe first line contains two integers\nN and\nM \u2014 the number of members of Dumbledore's Army and the number of classes.\nThe\ni-th of the next\nM lines contains two integers\nP\ni\nand\nT\ni\n\u2014 the participant who will receive the next task and the amount of time it will take to complete it.\nOutput Format\nPrint\nM integers. The\ni-th of them should be equal to\nans\ni,1\n+ans\ni,2\n+\u2026+ans\ni,i\n.\nConstraints\n1\u2264N,M\u226410\n6\n1\u2264P\ni\n\u2264N,\n1\u2264T\ni\n\u226410\n6\nT\n1\n\u2264T\n2\n\u2264\u2026\u2264T\nM\nSample 1:\nInput\nOutput\n5 12\n5 1\n3 2\n5 2\n1 2\n4 3\n4 3\n4 3\n5 3\n1 5\n3 5\n1 8\n2 10\n1\n3\n6\n8\n11\n17\n26\n32\n39\n46\n61\n71\nExplanation:\nConsider the third session in the example. The fifth participant has tasks with\nT=1 and\nT=2, and the third participant has a single task with\nT=2. It takes\n1 unit of time to complete one task (only the fifth participant will complete the task with\nT=1),\n2 unit of time to complete two tasks, and\n3 unit of time to complete all three tasks. Therefore, the third number in the answer is\n1+2+3=6.",
        "413": "Array Filling\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nYou are given an array\nA of size\nN. Initially, the array is filled with\n0-s.\nThere are\nM types of operations that you can perform on array\nA. The\ni\nth\noperation can be described by two integers\n(x\ni\n,y\ni\n). In this operation, you choose a set of indices\nS such that\n1\u2264j\u2264N,\n(jmody\ni\n)\n\ue020\n=0,\nA\nj\n=0,\n, then you set\nA\nj\n=x\ni\nfor all\nj\u2208S.\nYou can perform the operations in any order, but one type of operation can't be done more than once. What is the maximum sum of integers of the array\nA you obtain if you perform the\nM operations optimally?\nFor example, consider the array\nA=[0,0,0,0].\nSuppose\nx=3,y=2. Here you can choose indices\n1 and\n3 and set\nA\n1\n=A\n3\n=3. So the array A becomes\n[3,0,3,0]. In this operation you can't choose the indices\n2 and\n4 because\n(2mod2)=0,\n(4mod2)=0.\nSuppose\nx=5,y=3 and you set\nA\n2\n=5. So the array\nA becomes\n[3,5,3,0]. Here you can't choose index\n1 because\nA\n1\n>0 and index\n3 because\n(3mod3)=0 and\nA\n3\n>0. However, you could also set\nA\n4\n=5.\nSuppose\nx=4,y=4. Now you can't choose any index because\nA\nj\n>0 for all\n1\u2264j\u22643 and\n(4mod4)=0. So the array remains same.\nNote: Since input-output is large, prefer using fast input-output methods.\nInput Format\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nEach testcase contains\nM+1 lines of input.\nThe first line of each test case contains two space-separated integers\nN,M.\nM lines follow. For each valid\ni, the\ni\nth\nof these lines contains two space-separated integers\nx\ni\n,y\ni\n- parameters of the\ni\nth\noperation.\nOutput Format\nFor each test case, output in a single line the maximum sum of integers of the array\nA after\nM operations.\nConstraints\n1\u2264T\u226412600\n1\u2264N\u226410\n9\n1\u2264M\u226410\n5\n1\u2264x\ni\n\u226410\n9\n2\u2264y\ni\n\u226410\n9\nThe sum of\nM over all test cases does not exceed\n10\n6\n.\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n3\n10 1\n5 2\n8 2\n5 2\n6 3\n3 2\n2 2\n1 3\n25\n41\n5\nExplanation:\nTest case\n1: Optimal filling is\n[5,0,5,0,5,0,5,0,5,0].\nTest case\n2: Optimal filling is\n[6,6,5,6,6,0,6,6].\nTest case\n3: Optimal filling is\n[2,1,2].",
        "414": "Jump to Sibling\nLav has an array\nA of size\nN. He noticed that Chef is initially standing at the first index of the array.\nWhile standing at the\ni\nth\nindex\n(1\u2264i<N) of the array, Chef can perform the following types of jumps:\nJump 1: Jump to the immediate next index\nj such that\nA\ni\nand\nA\nj\nhave the same parity.\nJump 2: Jump to the immediate next index\nj such that\nA\ni\nand\nA\nj\nhave different parity.\nGiven that Chef can perform\nJump 2 at most once, Lav wants to find the minimum number of jumps required by the Chef to reach the last index of the array.\nInput Format\nFirst line will contain\nT, the number of test cases. Then the test cases follow.\nThe first line of each test case contains a single integer\nN - the size of the array\nA.\nThe second line of each test case contains\nN integers\nA\n1\n,A\n2\n,\u2026,A\nN\n- the elements of the array\nA.\nOutput Format\nFor each test case, output the minimum number of jumps required by the Chef to reach the last index of the array.\nConstraints\n1\u2264T\u2264100\n2\u2264N\u226410\n4\n1\u2264A\ni\n\u226410\n9\nSample 1:\nInput\nOutput\n2\n4\n1 2 3 4\n4\n2 1 3 4\n2\n1\nExplanation:\nTest Case\n1: The minimum number of jumps required by the Chef to reach the last index is\n2. Chef is initially standing at index\n1.\nChef chooses\nJump 2 and jumps to index\n2 as it is the immediate next element with different parity.\nChef chooses\nJump 1 and jumps to index\n4 as it is the immediate next element with the same parity.\nTest Case\n2: The minimum number of jumps required by the Chef to reach the last index is\n1. Chef is currently standing at index\n1.\nChef chooses\nJump 1 and jumps to index\n4 as it is the immediate next element with the same parity.",
        "415": "Total Components\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nYou are given all\nN\u22121 integers in the range\n[2,N]. In each step, you choose\n2 distinct integers and if they share a common factor greater than\n1, you combine them into the same group. You keep doing it until no further merging is possible.\nBelonging to a group is an equivalence relation. So if integers\na and\nb are in the same group and integers\nb and\nc are in the same group, then integers\na and\nc are also said to be in the same group.\nFind the total number of groups formed in the end.\n###Input\nFirst line will contain\nT, number of test cases. Then the test cases follow.\nEach test case contains a single line of input, a single integer\nN.\n###Output For each test case, output in a single line the answer to the problem.\n###Constraints\n1\u2264T\u22642\u22c510\n5\n2\u2264N\u226410\n7\nSubtasks\nSubtask #1 (30 points):\n1\u2264T\u2264200\n2\u2264N\u22641000\nSubtask #2 (70 points): original constraints\nSample 1:\nInput\nOutput\n3\n2\n4\n8\n1\n2\n3\nExplanation:\nTest Case\n1: The final group is\n{2}.\nTest Case\n2: The final groups are\n{2,4}, and\n{3}.\nTest Case\n3: The final groups are\n{2,3,4,6,8},\n{5}, and\n{7}.",
        "416": "Chef, Chefina and Their Friendship\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nIn Chefland, each person has their own non-empty personal string. When two people with personal strings\nT\n1\nand\nT\n2\n(possibly identical) become friends in Chefland, their strings are replaced by a new string\nS=T\n1\n+T\n1\n+T\n2\n+T\n2\n, where\n+ denotes string concatenation.\nChef recently became friends with Chefina. However, Chefina's personal string was her favourite and she got upset when it was replaced by\nS. She wanted her personal string back. Chef does not remember\nT\n1\nand\nT\n2\nnow, he only knows\nS.\nFind the number of ways in which Chef can retrieve valid strings\nT\n1\nand\nT\n2\nfrom the given string\nS. It is also possible that Chef does not remember\nS correctly, in which case there is no way to retrieve\nT\n1\nand\nT\n2\n.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains a single string\nS.\nOutput\nFor each test case, print a single line containing one integer \u2015 the number of ways to retrieve\nT\n1\nand\nT\n2\nfrom\nS.\nConstraints\n1\u2264T\u226410\n4\n4\u2264\u2223S\u2223\u226410\n5\n\u2223S\u2223 is divisible by\n2\nS contains only lowercase English letters\nthe sum of\n\u2223S\u2223 over all test cases does not exceed\n2\u22c510\n6\nSample 1:\nInput\nOutput\n3\nabcd\naaaa\nababcdccdc\n0\n1\n1\nExplanation:\nExample case 1: There is no way to choose\nT\n1\nand\nT\n2\n.\nExample case 2: Both\nT\n1\nand\nT\n2\nmust be \"a\".",
        "417": "Maximum Factors Problem\nYou are given an integer\nN. Let\nK be a divisor of\nN of your choice such that\nK>1, and let\nM=\nK\nN\n. You need to find the smallest\nK such that\nM has as many divisors as possible.\nNote:\nU is a divisor of\nV if\nV is divisible by\nU.\nInput Format\nThe first line of the input contains an integer\nT - the number of test cases. The test cases then follow.\nThe only line of each test case contains an integer\nN.\nOutput Format\nFor each test case, output in a single line minimum value of\nK such that\nM has as many divisors as possible.\nConstraints\n1\u2264T\u22643000\n2\u2264N\u226410\n9\nSample 1:\nInput\nOutput\n3\n3\n4\n6\n3\n2\n2\nExplanation:\nTest case\n1: The only possible value for\nK is\n3, and that is the answer.\nTest case\n2: There are two cases:\nK=2. Then\nM=\n2\n4\n=2, which has\n2 divisors (\n1 and\n2).\nK=4. Then\nM=\n4\n4\n=1, which has\n1 divisor (\n1).\nTherefore the answer is\n2.\nTest case\n3: There are three cases:\nK=2. Then\nM=\n2\n6\n=3, which has\n2 divisors (\n1 and\n3).\nK=3. Then\nM=\n3\n6\n=2, which has\n2 divisors (\n1 and\n2).\nK=6. Then\nM=\n6\n6\n=1, which has\n1 divisor (\n1).\nTherefore the answer is\n2.",
        "418": "Winter\nUneori \u00eemi spun: am s\u0103 mor\nat\u00e2t de singuratec\u0103-n mijlocul lor;\nlimba simpl\u0103 a bucuriilor n-am \u00eenv\u00e2\u021bat;\nam s\u0103 mor ca o pas\u0103re care prea mult a zburat,\ndar n-a f\u0103cut cuib nic\u0103ieri.\n\u2015 Oamenii ma uimesc, Magda Isafost\nAs of writing the informal statement, the winter just came and the statement was in season. Now, it is not winter anymore, so here is the formal statement instead:\nYou are given a connected graph with\nN nodes and\nM edges. You are given\nQ queries of the following types:\n1 u: Given node\nu\n(1\u2264u\u2264N), set the state of the node\nu to frozen.\n2 t: Given\nt, let\nt units of time pass by.\n3 v: Given node\nv\n(1\u2264v\u2264N), answer if node\nv is currently frozen.\nInitially, no node is frozen.\nThe graph has the following property:\nIf, at time\nT, a node\nu is frozen, then, at time\n(T+1), all neighbours of\nu become frozen.\nFor each query of type\n3, answer whether the node is currently frozen.\nNote:\nIf a node is already frozen, it remains unaffected after a type\n1 query.\nIf, for a frozen node\nu, a neighbour\nv of node\nu is frozen at time\nT, node\nv remains unaffected at time\n(T+1).\nInput Format\nThe first line of input contains three integers\nN,M, and\nQ.\nM lines follow, the\ni\nth\nof which contains two integers\nu\ni\nand\nv\ni\n, representing there is an edge between nodes\nu\ni\nand\nv\ni\n.\nThen,\nQ lines follow, the\nj\nth\nof which contains two integers\ntype\nj\nand\nx\nj\n.\nIf\ntype\nj\nis\n1 or\n2, it indicates that you must effectuate an update of the type\ntype\nj\nwith parameter\nx\nj\n. Otherwise, answer the query with parameter\nx\nj\nOutput Format\nFor each query of type\n3, print\nYES if the queried node is frozen. Otherwise, print\nNO.\nYou may print each character of the string in uppercase or lowercase (for example, the strings\nYeS,\nyEs,\nyes and\nYES will all be treated as identical).\nConstraints\n1\u2264N,Q\u226410\n5\n1\u2264M\u22643\u22c510\n5\n1\u2264u\ni\n,v\ni\n\u2264N\n1\u2264type\nj\n\u22643\n1\u2264x\nj\n\u2264N, if the query type is\n1 or\n3.\n1\u2264x\nj\n\u226410\n9\n, if the query type is\n2.\nSubtasks\nSubtask 1 (10 points):\n1\u2264N\u22641000,1\u2264Q\u22642000,1\u2264M\u22643000.\nSubtask 2 (30 points): Each node in the given graph has at most two neighbours.\nSubtask 3 (60 points): Original constraints.\nSample 1:\nInput\nOutput\n6 6 6\n1 2\n2 3\n4 1\n5 4\n6 1\n6 5\n1 1\n3 1\n1 5\n2 1\n3 4\n3 3\nYES\nYES\nNO\nExplanation:\nTest Case\n1: The graph looks like:\nQuery\n1: Freeze the node\n1. The graph looks like:\nQuery\n2: Find the status of node\n1. Since node\n1 is frozen, we print\nYES.\nQuery\n3: Freeze the node\n5. The graph looks like:\nQuery\n4:\n1 unit of time passes. Before this, nodes\n1 and\n5 were frozen.\nAfter\n1 second, all the neighbours of node\n1, i.e., nodes\n2,4, and\n6, and all the neighbours of node\n5, i.e., nodes\n4 and\n6 are frozen.\nThus, after this query, the frozen nodes in the graph are\n1,2,4,5, and\n6. The graph looks like:\nQuery\n5: Find the status of node\n4. Since node\n4 is frozen, we print\nYES.\nQuery\n6: Find the status of node\n3. Since node\n3 is not frozen, we print\nNO.",
        "419": "Subarray Removal\nChef has a permutation\nA of length\nN. Chef can perform the following operation on\nA:\n1) Select\nL and\nR such that\n(1\u2264L\u2264R\u2264N) and\n(R\u2212L+1<N)\n2) Remove the subarray\nA\nL\u2026R\nfrom\nA. (The remaining parts of\nA are concatenated)\nThe score of this operation\n= length of the subarray removed\n=R\u2212L+1\nFor e.g., if\nA=[3,1,4,6,5,2], and Chef selects\nL=3,R=5, then the score of this operation\n=3 and\nA becomes\n[3,1,2].\nChef wants to perform this operation exactly once such that, after the operation,\nA still remains a permutation. What is the maximum score that Chef can achieve in doing so?\nAs a reminder, a permutation of length\nM is an array where every integer from\n1 to\nM occurs exactly once.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains an integer\nN \u2014 the size of the permutation\nA.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\ndenoting the permutation\nA.\nOutput Format\nFor each test case, output the maximum score that Chef can achieve after applying the operation exactly once such that\nA still remains a permutation.\nConstraints\n1\u2264T\u226410\n5\n2\u2264N\u226410\n5\nA is a permutation\nSum of\nN over all test cases does not exceed\n5\u22c510\n5\nSample 1:\nInput\nOutput\n3\n3\n2 1 3\n7\n1 2 3 4 5 6 7\n6\n3 1 4 6 5 2\n1\n6\n3\nExplanation:\nTest Case 1: Chef can remove subarray\nA\n3\u20263\nafter which\nA becomes\n[2,1] which is still a permutation.\nTest Case 2: Chef can remove subarray\nA\n2\u20267\nafter which\nA becomes\n[1] which is still a permutation.\nTest Case 3: Chef can remove subarray\nA\n3\u20265\nafter which\nA becomes\n[3,1,2] which is still a permutation.",
        "420": "Alternative Sufferings\nYou are given a binary string\nS.\nIn one second, the following scenario happens simultaneously and independently for all the bits which are set to\n1 in the string:\nChange the bit from\n1 to\n0.\nIf the left neighbour exists and is\n0, change it to\n1.\nIf the right neighbour exists and is\n0, change it to\n1.\nFor example, if\nS=010 initially, then after\n1 second,\nS=101 (the\n1 bit and both its neighbours were changed). After another second,\nS=010. Here, the first and the last bit were changed to\n0 because earlier they were\n1. The middle bit was changed because it was\n0 earlier and it was a neighbour of a\n1 bit.\nFind out the string\nS after\nK seconds.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains two space-separated integers\nN and\nK \u2014 the length of string\nS and the number of seconds.\nThe next line describes the string\nS.\nOutput Format\nFor each test case, output the string\nS after exactly\nK seconds.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u226410\n5\n1\u2264K\u226410\n9\nThe sum of\nN over all test cases won't exceed\n10\n6\n.\nS can only contain the characters\n0 or\n1.\nSample 1:\nInput\nOutput\n3\n3 1\n101\n5 2\n10001\n14 3\n10011010111000\n010\n10101\n01100101010101\nExplanation:\nTest case\n1: The middle bit is changed to\n1 since it had a neighbouring set bit (in this case both left and right) and both the set bits are changed to\n0. Hence, after one second, it is\n101.\nTest case\n2: After first second, the string\nS will be\n01010. After another second , the string becomes\n10101.",
        "421": "Rock Paper Scissors\nThere are\nN players standing in a line, indexed\n1 to\nN from left to right. They all play a game of Rock, Paper, Scissors. Each player has already decided which move they want to play. You are given this information as a string\nS of length\nN, i.e,\nS\ni\nis equal to\nR if player\ni will play Rock.\nS\ni\nis equal to\nP if player\ni will play Paper.\nS\ni\nis equal to\nS if player\ni will play Scissors.\nLet\nW(i,j) denote the move played by the winner if players\ni,i+1,\u2026,j compete in order from left to right. That is,\nFirst, players\ni and\ni+1 play a game\nThe winner of this game plays against player\ni+2\nThe winner of the second game plays against player\ni+3\n\u22ee\nThe winner of the first\nj\u2212i\u22121 games plays against player\nj, and the move played by the winner of this game is declared to be\nW(i,j).\nIf\ni=j, then player\ni is considered to be the winner and\nW(i,i)=S\ni\n.\nYour task is to find the value of\nW(i,N) for all\ni from\n1 to\nN.\nNote : If a person with index\ni and index\nj (\ni<j) play against each other, then:\nIf\nS\ni\n\ue020\n=S\nj\n, the winner is decided by classical rules, i.e, rock beats scissors, scissors beats paper, and paper beats rock.\nIf\nS\ni\n=S\nj\n, the player with lower index (in this case,\ni) wins.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN, the number of players.\nThe second line of each test case contains the string\nS of length\nN, denoting the moves chosen by the players.\nOutput Format\nFor each test case, print a single line containing a string of length\nN, whose\ni-th character is\nW(i,N).\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u22645\u22c510\n5\nS\ni\nis either\nR,\nP or\nS\nSum of\nN over all test cases doesn't exceed\n5\u22c510\n5\nSubtasks\nSubtask 1 (10 points):\n1\u2264T\u22641000\n1\u2264N\u22645000\nSum of\nN over all test cases doesn't exceed\n5000\nSubtask 2 (90 points):\nOriginal constraints\nSample 1:\nInput\nOutput\n2\n1\nS\n4\nSSPR\nS\nRRPR\nExplanation:\nTest Case 1.\nW(1,1)=S as there is only one player.\nTest Case 2.\nFor\nW(1,4) the game is played as follows :\nPlayer\n1 and\n2 compete, player\n1 wins.\nPlayer\n1 and\n3 compete, player\n1 wins.\nPlayer\n1 and\n4 compete, player\n4 wins.\nHence, we print\nW(1,4)=S\n4\n=R\nFor\nW(3,4) the game is played as follows :\nPlayer\n3 and\n4 compete, player\n3 wins.\nHence, we print\nW(3,4)=S\n3\n=P",
        "422": "NASA\nI'ma need space, I'ma, I'ma need\nYou know I'm a star; space, I'ma need space\nI'ma need space, I'ma, I'ma need space (N-A-S-A)\nGiven an array\nA of size\nN.\nFind total number of pairs in the array\n(i,j)\n(1\u2264i\u2264j\u2264N) such that:\nA\ni\n\u2295A\nj\nis a palindrome (in decimal representation), where\n\u2295 denotes the bitwise xor operator.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains one integer\nN - the size of the array.\nThe next line contains\nN space-seperated integers as array elements.\nOutput Format\nFor each test case, output on a new line, the number of pairs satisfying the given condition.\nConstraints\n1\u2264T\u226410\n2\n1\u2264N\u226410\n5\n0\u2264A\ni\n<2\n15\nThe sum of N over all test cases does not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n2\n4\n13 27 12 26\n3\n2 2 2\n8\n6\nExplanation:\nTest case\n1: The pairs which form palindrome are :\n13\u229513=0\n13\u229527=22\n13\u229512=1\n27\u229527=0\n27\u229526=1\n12\u229512=0\n12\u229526=22\n26\u229526=0\nTest case\n2: All the pairs form palindrome.",
        "423": "K Distinct Array\nAn array is said to be good if all its elements are distinct, i.e. no two elements of the array are equal to each other.\nYou are given a positive integer\nN and an integer\nK such that\nN\u2264K\u2264(\n2\nN+1\n).\nConstruct an array\nA of length\nN that satisfies the following conditions\nA has exactly\nK good (contiguous) subarrays, and\nEvery element of\nA is an integer from\n1 to\nN (both inclusive).\nIf there are multiple such arrays, you can print any of them.\nNote: It can be shown that for all inputs satisfying the given constraints, there is always a valid solution.\nInput Format\nThe first line contains an integer\nT, the number of testcases. The description of the\nT testcases follow.\nEach testcase consists of a single line with two space separated integers,\nN and\nK respectively.\nOutput Format\nFor each testcase print\nN space separated integers, the elements of the constructed array.\nIf there are multiple outputs, you can print any of them.\nYour output will be considered correct only if the following conditions are satisfied,\nEvery element of the array is between\n1 and\nN, and\nThe array has exactly\nK good subarrays\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n5\nN\u2264K\u2264(\n2\nN+1\n)\nSum of\nN over all testcases is atmost\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n5 5\n5 15\n5 7\n1 1 1 1 1\n1 2 3 4 5\n1 2 2 1 1\nExplanation:\nTest Case 1:\nN=5,K=5. All subarrays of length\n1 are good, therefore every array of size\nN has at least\nN good subarrays. If all elements are equal then these will be the only good subarrays so the given array\n{1,1,1,1,1} is a valid solution. Observe that under the constraints there are\n5 different solutions (one for each value\n1 through\n5) and all of them will be considered correct.\nTest Case 2:\nN=5,K=15. There are only\n(\n2\nN+1\n)=15 subarrays, including the array itself. Therefore the array itself must be good which leads us to the solution given above. Any permutation of\n{1,2,3,4,5} is also a valid solution, thus there are\n5!=120 different solutions to this case and all of them will be considered correct.\nTest Case 3:\nN=5,K=7. The constructed array is\nA={1,2,2,1,1}. You may verify that the only good subarrays of\nA, in addition to the\n5 subarrays of length\n1, are those shown below (subarrays are highlighted red).\n{1,2,2,1,1}\n{1,2,2,1,1}",
        "424": "Prime Factor Division\nMario has reached Bowser's Castle and is inches away from rescuing Princess Peach. He has to answer the following problem at the gate to be allowed to enter. Can you help him?\nLet\nS(M) denote the set of all prime factors of\nM.\nGiven two positive integers\nA and\nB, determine whether\nA is divisible by all elements in\nS(B).\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line of input,\nA and\nB, as mentioned in the statement.\nOutput Format\nFor each test case, print YES if\nA is divisible by all elements in\nS(B) and NO otherwise.\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\nConstraints\n1\u2264T\u226410\n5\n1\u2264A,B\u226410\n18\nSample 1:\nInput\nOutput\n3\n21 63\n72 72\n25 20\nYES\nYES\nNO\nExplanation:\nTest case\n1: The set of all prime factors of\nB=63 is given by\nS(B)={3,7}. Also,\nA=21 is divisible by all elements in\nS(B).\nTest case\n2: The set of all prime factors of\nB=72 is given by\nS(B)={2,3}. Also,\nA=72 is divisible by all elements in\nS(B).\nTest case\n3: The set of all prime factors of\nB=20 is given by\nS(B)={2,5}. Here,\nA=25 is not divisible by\n2 in\nS(B).",
        "425": "Queries About Numbers\nChef loves number theory very much. Now it is time to solve a new kind of problem.\nThere is given a natural number N. Chef has to answer Q queries of the form T K.\nHere T is the type of query and K is the natural number.\nIf T=1, Chef must find the number of natural numbers which is divisor of both N and K.\nIf T=2, Chef must find the number of natural numbers which is divisor of N and is divisible by K.\nIf T=3, Chef must find the number of natural numbers which is divisor of N and is not divisible by K.\n\nChef can solve all these queries, but you will be hungry for night if this happens, because Chef will not have free time to cook a meal. Therefore you compromise with him and decided that everyone must do his\/her own job. You must program and Chef must cook.\nInput\nThere will be 2 numbers in the first line: N and Q.\nQ lines follow with 2 numbers each: T and K\nOutput\nFor each of the Q lines you must output the result for corresponding query in separat line.\nConstraints\n1<=N<=1012\n1<=Q<=5*105\n1<=T<=3\n1<=K<=1012\nSample 1:\nInput\nOutput\n12 6\n1 6\n1 14\n2 4\n2 3\n3 12\n3 14\n4\n2\n2\n3\n5\n6\nExplanation:\nNumbers for each query:\n{1,2,3,6}\n{1,2}\n{4,12}\n{3,6,12}\n{1,2,3,4,6}\n{1,2,3,4,6,12}",
        "426": "Maximum And Or\nChef has been recently introduced to bitwise operations.\nChefina defines a function\nF(P,Q,R)=(R\n\u2223\nP)\u2212(Q\n&\nP)\nwhere\n\u2223 represents the bitwise or and\n& represents the bitwise and operator.\nChef has three non-negative integers\nA,B, and\nC.\nChef has to count the number of integers\nX, such that:\n0\u2264X<2\nC\n;\nF(X,A,B) has the maximum possible value among all values of\nX.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line containing three space-separated integers\nA,B,C\u2212 as defined in the statement.\nOutput Format\nFor each test case, output on a new line, the count of\nX such that\nF(X,A,B) is maximum possible.\nConstraints\n1\u2264T\u22642\u22c510\n5\n0\u2264C\u226430\n0\u2264A,B<2\nC\nSample 1:\nInput\nOutput\n3\n1 2 3\n0 0 2\n87 986 15\n4\n1\n64\nExplanation:\nTest case\n1: There are\n4 possible values of\nX which give maximum value for\nF(X,A,B). These values are\n4,5,6,7.\nFor all these values,\nF(X,A,B) is\n5.\nTest case\n2: The only possible value of\nX which gives maximum value for\nF(X,A,B) is\n3.\nFor\nX=3:\n0\u2264X<2\n2\nF(3,0,0)=(0\n\u2223\n3)\u2212(0\n&\n3)=3\nIt can be shown that\nF(X,0,0) cannot have a value greater than\n3 for\n0\u2264X<2\n2\n.",
        "427": "No sequence\nAlice gave Bob\n3 integers\nN,K, and\nS. Help Bob find an\nS-good sequence.\nA sequence\nB of length\nN is called\nS-good if the following conditions are met:\nB\ni\n\u2208{\u22121,0,1} for each\n1\u2264i\u2264N\n\u2211\ni=1\nN\nB\ni\n\u22c5K\ni\u22121\n=S\nIf there are multiple\nS-good sequences, print any of them.\nIf no\nS-good sequence exists, print\n\u22122.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line of input containing three space-separated integers \u2014\nN,K, and\nS.\nOutput Format\nFor each test case:\nIf no\nS-good sequence exists, print\n\u22122.\nOtherwise, output\nN space-separated integers denoting the\nS-good sequence.\nIf multiple\nS-good sequences exist, you may print any of them.\nConstraints\n1\u2264T\u226410\n4\n1\u2264N\u2264100\n2\u2264K\u2264100\n1\u2264S\u226410\n18\nSample 1:\nInput\nOutput\n3\n4 2 15\n3 6 36\n5 5 7\n1 1 1 1\n0 0 1\n-2\nExplanation:\nTest case\n1: We have\nB=[1,1,1,1] and\nS=15\n\u2211\ni=1\nN\nB\ni\n\u22c5K\ni\u22121\n=1\u22c51+2\u22c51+4\u22c51+8\u22c51=15, hence\nB is an\nS-good sequence.\nTest case\n2: We have\nB=[0,0,1] and\nS=36.\n6\n2\n=36 so clearly\nB is\nS-good.\nTest case\n3: No\nS-good sequence of length\n5 exists.",
        "428": "Gold Mining\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef and Chefu are working as gold miners. There are a total of\nN gold mines, numbered\n1 through\nN. For each valid\ni, the\ni-th gold mine contains\nG\ni\ngold in total; if only Chef worked in it, it would take him\nA\ni\ndays to completely mine it, while if only Chefu worked in it, it would take him\nB\ni\ndays.\nEach of our miners may only work in one mine at a time, but they may decide to start working in another mine at any time (even in the middle of some day), any number of times. They also choose the mines to work in independently from each other and they may work in the same mine at the same time. Mining gold is a continuous process, i.e. if a miner works for\nt days (where\nt is a real number) in a mine where this miner has mining speed\ng gold per day, then he will mine\ng\u22c5t gold. Obviously, it is impossible to work in a mine after no gold remains in it. For example, if a gold mine contains\n30 gold and Chef needs\n2 days to completely mine it, but he spends\n1 day in it, then he will mine\n15 gold; if Chefu needs\n1 day to completely mine the same gold mine, and both Chef and Chefu start working in this mine at the same time, it will be empty after\n2\/3 days \u2015 Chefu will mine\n20 gold, while Chef will mine\n10 gold.\nAt each point of time, both Chef and Chefu know the gold mine in which the other miner is working. Each of them wants to gather the maximum amount of gold for himself. Find the amounts of gold the miners will have if they both act optimally.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN.\nN lines follow. For each valid\ni, the\ni-th of these lines contains three space-separated integers\nG\ni\n,\nA\ni\nand\nB\ni\n.\nOutput\nFor each test case, print a single line containing two space-separated real numbers \u2015 the amount of gold mined by Chef and the amount of gold mined by Chefu. Your answer will be considered correct if the absolute or relative error of each amount of gold does not exceed\n10\n\u22126\n.\nConstraints\n1\u2264T\u22641,000\n1\u2264N\u226410\n5\n1\u2264G\ni\n\u226410\n5\nfor each valid\ni\n1\u2264A\ni\n\u226410\n5\nfor each valid\ni\n1\u2264B\ni\n\u226410\n5\nfor each valid\ni\nthe sum of\nN over all test cases does not exceed\n10\n6\nSubtasks\nSubtask #1 (50 points):\nN\u22642\nSubtask #2 (50 points): original constraints\nSample 1:\nInput\nOutput\n2\n1\n30 2 1\n3\n10 1 1\n20 2 2\n30 3 3\n10.00000 20.00000\n30.00000 30.00000",
        "429": "Consecutive Adding\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nYou are given two matrices\nA and\nB, each with\nR rows (numbered\n1 through\nR) and\nC columns (numbered\n1 through\nC). Let's denote an element of\nA or\nB in row\ni and column\nj by\nA\ni,j\nor\nB\ni,j\nrespectively.\nYou are also given an integer\nX. You may perform the following operation on\nA any number of times:\nChoose an integer\nv.\nChoose\nX consecutive elements of\nA, either in the same row or in the same column.\nAdd\nv to each of the chosen elements of\nA.\nDetermine whether it is possible to change\nA to\nB in a finite number of operations.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains three space-separated integers\nR,\nC and\nX.\nR lines follow. For each valid\ni, the\ni-th of these lines contains\nC space-separated integers\nA\ni,1\n,A\ni,2\n,\u2026,A\ni,C\n.\nR more lines follow. For each valid\ni, the\ni-th of these lines contains\nC space-separated integers\nB\ni,1\n,B\ni,2\n,\u2026,B\ni,C\n.\nOutput\nFor each test case, print a single line containing the string \"Yes\" if there is a sequence of operations that changes the matrix\nA to\nB, or \"No\" if such a sequence of operations does not exist.\nConstraints\n1\u2264T\u226410\n3\n2\u2264R,C\u226410\n3\n2\u2264X\u2264min(R,C)\n\u2223A\ni,j\n\u2223,\u2223B\ni,j\n\u2223\u226410\n9\nfor each valid\ni,j\nthe sum of\nR over all test cases does not exceed\n10\n3\nthe sum of\nC over all test cases does not exceed\n10\n3\nSubtasks\nSubtask #1 (5 points):\nX=2\nSubtask #2 (10 points):\nX=3\nSubtask #3 (85 points): original constraints\nSample 1:\nInput\nOutput\n3\n2 2 2\n1 2\n0 1\n0 0\n0 0\n2 2 2\n1 2\n0 1\n0 0\n-1 0\n3 2 2\n1 1\n2 2\n3 3\n1 0\n2 0\n3 0\nYes\nNo\nNo\nExplanation:\nExample case 1: We can add\n\u22121 to both elements in row\n1 and add\n\u22121 to both elements in column\n2.\nExample case 2: After any operation, the sum of elements of\nA remains even. However, the sum of elements of\nB is odd, so\nA cannot be changed to\nB.",
        "430": "K Increment Palindrome\nChef has an array\nA of size\nN and an integer\nK. He can perform the following operation on\nA any number of times:\nSelect any\nK distinct indices\ni\n1\n,i\n2\n,\u2026,i\nK\nand increment the array elements at these\nK indices by\n1.\nFormally, set\nA\ni\nj\n:=A\ni\nj\n+1 for all\n1\u2264j\u2264K.\nFor example, if\nA=[3,2,8,4,6] and we select the indices\n2,3,5, then\nA becomes\n[3,2+1,8+1,4,6+1] i.e.\n[3,3,9,4,7].\nDetermine if Chef can make the array\nA palindromic by applying the given operation any number of times.\nNote: An array is called palindrome if it reads the same backwards and forwards, for e.g.\n[4,10,10,4] and\n[7,1,7] are palindromic arrays.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains two integers\nN and\nK \u2014 the size of the array\nA and the parameter mentioned in the statement.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\ndenoting the array\nA.\nOutput Format\nFor each test case, output YES if we can make\nA palindromic by applying the given operation. Otherwise, output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n1\u2264T\u226410\n5\n1\u2264K\u2264N\u226410\n5\n1\u2264A\ni\n\u226410\n6\nSum of\nN over all test cases does not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n4\n5 3\n2 4 5 4 2\n6 1\n4 5 5 4 6 4\n6 2\n4 5 5 4 6 4\n4 2\n1 2 3 3\nYES\nYES\nYES\nNO\nExplanation:\nTest case\n1: The given array\nA is already palindromic.\nTest case\n2: We can apply the following operations:\nSelect index\n[4]:\nA becomes\n[4,5,5,5,6,4]\nSelect index\n[2]:\nA becomes\n[4,6,5,5,6,4]\nTest case\n3: We can apply the following operations:\nSelect index\n[2,4]:\nA becomes\n[4,6,5,5,6,4]\nTest case\n4: It can be proven that\nA can not be converted into a palindrome using the given operations.",
        "431": "Symmetric Swaps\nChef has two arrays\nA and\nB of the same size\nN.\nIn one operation, Chef can:\nChoose an index\ni\n(1\u2264i\u2264N) and swap the elements\nA\ni\nand\nB\ni\n.\nChef came up with a task to find the minimum possible value of (\nA\nmax\n\u2212A\nmin\n) after performing the swap operation any (possibly zero) number of times.\nSince Chef is busy, can you help him solve this task?\nNote that\nA\nmax\nand\nA\nmin\ndenote the maximum and minimum elements of the array\nA respectively.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains one integer\nN \u2014 the number of elements in each array.\nThe second line consists of\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\ndenoting the elements of the array\nA.\nThe third line consists of\nN space-separated integers\nB\n1\n,B\n2\n,\u2026,B\nN\ndenoting the elements of the array\nB.\nOutput Format\nFor each test case, output on a new line, the minimum possible value of (\nA\nmax\n\u2212A\nmin\n) in the array\nA after doing swap operation any number of times.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u22642\u22c510\n5\n1\u2264A\ni\n,B\ni\n\u226410\n9\nThe sum of\nN over all test cases won't exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n2\n1 2\n2 1\n3\n1 5 3\n2 3 1\n4\n4 2 5 1\n5 3 4 1\n0\n1\n3\nExplanation:\nTest case\n1: Chef can make the following operations:\nOperation\n1: Choose\ni=1 and swap\nA\n1\nwith\nB\n1\n.\nBy doing the above operations, array\nA becomes\n[2,2]. Here\n(A\nmax\n\u2212A\nmin\n)=0. It can be shown that this is the minimum value possible.\nTest case\n2: Chef can make the following operations:\nOperation\n1: Choose\ni=1 and swap\nA\n1\nwith\nB\n1\n.\nOperation\n2: Choose\ni=2 and swap\nA\n2\nwith\nB\n2\n.\nBy doing the above operations, array\nA becomes\n[2,3,3]. Here\n(A\nmax\n\u2212A\nmin\n)=1. It can be shown that this is the minimum value possible.\nTest case\n3: Chef can make the following operations:\nOperation\n1: Choose\ni=2 and swap\nA\n2\nwith\nB\n2\n.\nOperation\n2: Choose\ni=3 and swap\nA\n3\nwith\nB\n3\n.\nBy doing the above operations, array\nA becomes\n[4,3,4,1]. Here\n(A\nmax\n\u2212A\nmin\n)=3. It can be shown that this is the minimum value possible.",
        "432": "Mountain\nYou're given an\nN\u00d7M matrix\nA, where\nA\n(i,j)\n=i.\nA mountain in the matrix is defined as a set of cells and is expressed using\nK+2 integers:\nP,K,L\n1\n,L\n2\n,\u2026,L\nK\n.\nThis translates to: from the\n(P+i\u22121)\nth\nrow, select the first\nL\ni\ncells\n(1\u2264i\u2264K) in the row. Refer samples for more clarity.\nYour task is to answer\nQ queries. For the\ni\nth\nquery:\nYou are given an integer\nS\ni\nand you need to find a mountain with sum\nS\ni\n.\nInput Format\nThe first line contains three space-separated integers\nN,\nM, and\nQ, the dimensions of the matrix and the number of queries.\nThe second line contains\nQ space-separated integers\nS\n1\n,S\n2\n,\u2026,S\nQ\n, denoting each query.\nOutput Format\nFor each query, if no possible mountain with given sum exists, output\n\u22121.\nOtherwise, output two lines:\nThe first line contains two space-separated integers\nP,\nK\n(1\u2264P\u2264N,P+K\u22121\u2264N);\nThe second line contains\nK space-separated integers\nL\n1\n,L\n2\n,\u2026,L\nK\n(1\u2264L\ni\n\u2264M).\nIf multiple mountains satisfy the condition, you may print any.\nConstraints\n2\u2264N,M\u22643\u22c510\n4\n1\u2264Q\u226410\n1\u2264S\ni\n\u2264M\u22c5N\u22c5\n2\n(N+1)\nSample 1:\nInput\nOutput\n5 4 4\n20 36 1 60\n2 3\n2 4 1\n1 5\n3 1 4 1 3\n1 1\n1\n1 5\n4 4 4 4 4\nExplanation:\nQuery\n1: A possible mountain that satisfies the condition is highlighted below:\nHere,\nP=2 and\nK=3 and we are selecting\n2,4, and\n1 cells from the second, third, and fourth row respectively. The sum of the highlighted cells is\n20.\nQuery\n2: A possible mountain that satisfies the condition is highlighted below:\nHere,\nP=1 and\nK=5 and we are selecting\n3,1,4,1, and\n3 cells from the first, second, third, fourth and fifth rows respectively. The sum of the highlighted cells is\n36.",
        "433": "No Palindrome\nGiven positive integers\nN and\nK, let\nS denote the smallest number of\nN digits (with no leading zeros) such that:\nNo substring of\nS having length strictly greater than\nK is a palindrome.\nFind the sum of digits of\nS.\nNote:\nA substring of a number is obtained by deleting some (possibly zero) digits from the beginning of the number and some (possibly zero) digits from the end of the number. For example, some substrings of the number\n3010 are\n3010,301,010,01,10 and\n0.\nLeading zeros are considered in a substring. In the above example,\n010 and\n01 are valid substrings.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two space-separated integers\nN and\nK \u2014 as mentioned in the statement.\nOutput Format\nFor each test case, output on a new line, the sum of digits of the smallest number of\nN digits satisfying the given condition.\nConstraints\n1\u2264T\u22645000\n1\u2264K<N\u226410\n9\nSample 1:\nInput\nOutput\n2\n2 1\n3 2\n1\n1\nExplanation:\nTest case\n1: The smallest number of\n2 digits satisfying the condition is\n10. Here no substring of length greater than\n1 is a palindrome.\nTest case\n2: The smallest number of\n3 digits satisfying the condition is\n100. The sum of its digits is\n1.",
        "434": "Max Range Queries\n###Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese and Bengali as well.\nYou have\nC=100,000 cakes, numbered\n1 through\nC. Each cake has an integer height; initially, the height of each cake is\n0.\nThere are\nN operations. In each operation, you are given two integers\nL and\nR, and you should increase by\n1 the height of each of the cakes\nL,L+1,\u2026,R. One of these\nN operations should be removed and the remaining\nN\u22121 operations are then performed.\nChef wants to remove one operation in such a way that after the remaining\nN\u22121 operations are performed, the number of cakes with height exactly\nK is maximum possible. Since Chef is a bit busy these days, he has asked for your help. You need to find the maximum number of cakes with height exactly\nK that can be achieved by removing one operation.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains two space-separated integers\nN and\nK.\nEach of the next\nN lines contains two space-separated integers\nL and\nR describing one operation.\nOutput\nFor each test case, print a single line containing one integer \u2014 the maximum possible number of cakes with height\nK.\nConstraints\n1\u2264T\u2264100\n2\u2264N\u226410\n5\n1\u2264K\u2264N\n1\u2264L\u2264R\u226410\n5\nthe sum of\nN over all test cases does not exceed\n10\n6\nSample 1:\nInput\nOutput\n1\n3 2\n2 6\n4 9\n1 4\n3\nExplanation:\nExample case 1: Let's look at what happens after an operation is removed.\nRemoving operation\n1: The heights of cakes\n4 through\n9 increase by\n1. Then, the heights of cakes\n1 through\n4 increase by\n1. The resulting sequence of heights is\n[1,1,1,2,1,1,1,1,1] (for cakes\n1 through\n9; the other cakes have heights\n0). The number of cakes with height\n2 is\n1.\nRemoving operation\n2: The resulting sequence of heights of cakes\n1 through\n9 is\n[1,2,2,2,1,1,0,0,0]. The number of cakes with height\n2 is\n3.\nRemoving operation\n3: The resulting sequence of heights of cakes\n1 through\n9 is\n[0,1,1,2,2,2,1,1,1]. The number of cakes with height\n2 is\n3.\nThe maximum number of cakes with height\n2 is\n3.",
        "435": "Tetris\nChef and Chefina are playing a game of Tetris together. In a single move, a player can either clear\n1,\n2,\n3, or\n4 lines of blocks. Clearing\n4 lines in a single move is called getting a \"Tetris\".\nChef and Chefina take turns playing, with Chef starting first.\nWhenever the current player clears only one line, the turn shifts to the other player; otherwise it remains with the current player.\nThey will stop playing as soon as at least\nL lines are cleared in total. That is, the game stops when the sum of the number of lines cleared by both the players is at least\nL.\nChef wants to end the game in style, and so would like to be the one who finishes the game and do so by getting a \"Tetris\", i.e, by clearing\n4 lines.\nHow many sequences of moves are there in which this happens?\nThe number of sequences may be large, so print it modulo\n10\n9\n+7.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach of the next\nT lines contains one integer\nL \u2014 the number of lines to be cleared.\nOutput Format\nFor each test case, output on a new line the total number of ways in which Chef can finish the game by getting a \"Tetris\", modulo\n10\n9\n+7.\nConstraints\n1\u2264T\u226410\n5\n1\u2264L\u226410\n5\nSample 1:\nInput\nOutput\n4\n3\n2\n4\n100000\n3\n1\n4\n246691813\nExplanation:\nTest case\n1: For\nL=3, there are\n3 possible ways such that Chef can finish the game with a \"Tetris\":\nClear\n4 lines immediately.\nClear\n2 lines first, then\n4.\nClear one line, transferring the turn to Chefina. Chefina then clears one line, transferring the turn back to Chef, who then gets a \"Tetris\".\nTest case\n2: For\nL=2, the only possibility is that Chef gets a \"Tetris\" on the very first move.\nTest case\n3: For\nL=4, there are\n4 valid sequences of moves:\n(2,4),(1,1,4),(3,4),(4).",
        "436": "Parity Permutation\nYou are given an array\nA of length\nN containing distinct integers and an integer\nK (either\n0 or\n1).\nYour task is to find the total number of permutations of array\nA such that for all pairs\n(i,j) with\n1\u2264i<j\u2264N, and\n(i+j) being an odd number:\n(A\ni\n+A\nj\n)%2\n=K\nYou should output the count of such permutations modulo\n10\n9\n+7.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains two space-separated integers\nN and\nK, as mentioned in statement.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n\u2014 the elements of the array.\nOutput Format\nFor each test case, output on a new line, the total number of permutations of array\nA satisfying the conditions, modulo\n10\n9\n+7.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n5\n1\u2264A\ni\n\u226410\n9\n0\u2264K\u22641\nThe sum of\nN over all test cases won't exceed\n5\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n5 0\n6 10 1 4 8\n4 0\n17 13 21 3\n3 1\n1 2 3\n0\n24\n2\nExplanation:\nTest Case\n1: There is no permutation that satisfies the required conditions.\nTest Case\n2: All the permutations of the array satisfy the required conditions.\nTest Case\n3: Two permutations satisfy the conditions. They are:\n[1,2,3]: The pairs under consideration are\n(1,2) and\n(2,3). Here\n(A\n1\n+A\n2\n)%2=1=K. Similarly\n(A\n2\n+A\n3\n)%2=1=K.\n[3,2,1] The pairs under consideration are\n(1,2) and\n(2,3). Here\n(A\n1\n+A\n2\n)%2=1=K. Similarly\n(A\n2\n+A\n3\n)%2=1=K.",
        "437": "Angry Cyborg\nCyborg Jenish is angry.\nHe has so much rage that he decided to go on a demolition spree for\nQ days.\nThere are\nN cities in his world numbered\n1 to\nN, in a row from left to right. That is the\ni\nth\ncity from left side is city-\ni where\n1\u2264i\u2264N. The supreme leader of the world is VSM and there are infinite statues of VSM in each city.\nOn each day Jenish chooses two cities\nL and\nR. He starts at city-\nL and moves along the row towards right side till he reaches the city-\nR. In city-\nL he destroys\n1 statue, in the next city (i.e. city-\nL+1) he destroys\n2 statues, and so on till city-\nR where he destroys\nR\u2212L+1 statues. In other words, he destroys\ni\u2212L+1 statues in the\ni\nth\ncity (\nL\u2264i\u2264R ).\nFind the total number of VSM statues he destroyed in each city after\nQ days.\nInput:\nThe first line contains an integer\nT, denoting the number of test cases.\nThe first line of each test case, contains two space-separated integers\nN and\nQ denoting the number of cities in his world and the number of days he goes on a demolition spree respectively.\nThe\ni\nth\nline of next\nQ lines of each test case contains two space-separated integers\nL and\nR denoting the starting city and the ending city respectively on\ni\nth\nday.\n###Output:\nFor each test case, output a single line containing\nN space-separated integers.\nThe\ni\nth\ninteger should denote the total number of VSM statues destroyed by cyborg Jenish in the city-\ni after\nQ days.\nConstraints:\n1\u2264T\u226410\n3\n1\u2264N\u226410\n5\n1\u2264Q\u226410\n5\n1\u2264L\u2264R\u2264N\nThe sum of\nN over all test cases is less than\n10\n6\nThe sum of\nQ over all test cases is less than\n10\n6\nSample 1:\nInput\nOutput\n2\n5 3\n1 3\n1 2\n4 5\n2 1\n1 1\n2 4 3 1 2\n1 0\nExplanation:\nIn the first test case, the cyborg does the following:\nStarts at city-1 and goes till city-3, hence destroys\n1 statue in city-1,\n2 in city-2, and\n3 in city-3.\nStarts at city-1 and goes till city-2, hence destroys\n1 statue in city-1 and\n2 in city-2.\nStarts at city-4 and goes till city-5, hence destroys\n1 statue in city-4 and\n2 in city-5.\nHence he destroyed total\n2 statues in city-1,\n4 in city-2,\n3 in city-3,\n1 in city-4, and\n2 in city-5.",
        "438": "Double Burgers\nRead problems statements in Mandarin Chinese, Russian, Vietnamese and Bengali as well.\nYou have taken an eating challenge from Chef and now you have to eat exactly\nY burgers. You will eat in the following way:\nIn the first minute you will eat exactly\nX burgers and every minute after that you will eat exactly twice the number of burgers you ate in the previous minute.\nSince you can get tired of eating, Chef also allows you take a break from eating for exactly\n1 minute.\nWhen you start eating again after taking a break, your eating streak resets, i.e. in the first minute after the break you will eat exactly\nX burgers and every minute after that you will eat exactly double the burgers you ate on the previous minute.\nLet\na\n1\n,a\n2\n,...,a\nk\nbe the lengths of your eating streaks in minutes. Chef requires that all\na\ni\nare pairwise distinct.\nFind the minimum number of minutes you need to eat exactly\nY burgers or determine it is impossible to do so.\n###Input\nThe first line contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains two space-separated integers\nX and\nY.\n###Output For each test case, print a single line containing one integer \u2014 the minimum number of minutes you need to eat exactly\nY burgers, or\n\u22121 if it is impossible.\n###Constraints\n1\u2264T\u226410\n5\n1\u2264X,Y\u226410\n18\nSample 1:\nInput\nOutput\n2\n1 7\n1 4\n3\n4",
        "439": "Array Sum\nYou are given an even integer\nN and an integer\nK.\nGenerate an array\nA of size\nN such that:\n1\u2264A\ni\n\u226410\n5\nfor all\n1\u2264i\u2264N;\nThe number of odd elements in the array is same as the number of even elements.\nThe sum of all elements of the array is\nK.\nIf multiple such arrays exist, print any. If no such array exists, print\n\u22121 instead.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two space-separated integers\nN and\nK \u2014 the size of the array and the required sum.\nOutput Format\nFor each test case, output on a new line,\nN space-separated integers, denoting the array\nA satisfying the given conditions.\nIf multiple such arrays exist, print any. If no such array exists, print\n\u22121 instead.\nConstraints\n1\u2264T\u22641000\n2\u2264N\u226410\n5\n,\nN is even\n1\u2264K\u226410\n9\nThe sum of\nN over all test cases won't exceed\n10\n6\n.\nSample 1:\nInput\nOutput\n3\n2 5\n4 1\n4 20\n4 1\n-1\n3 4 5 8\nExplanation:\nTest case\n1: Consider the array\nA=[4,1]. It contains\n1 even as well as\n1 odd element. Also, the sum of elements of the array is\n4+1=5.\nTest case\n2: It can be proven that there exists no array which satisfies the given conditions.\nTest case\n3: Consider the array\nA=[3,4,5,8]. It contains\n2 even as well as\n2 odd elements. Also, the sum of elements of the array is\n3+4+5+8=20.",
        "440": "Equivalent Numbers\nChef calls a pair of integers\n(A,B) equivalent if there exist some positive integers\nX and\nY such that\nA\nX\n=B\nY\n.\nGiven\nA and\nB, determine whether the pair is equivalent or not.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two space-separated integers\nA and\nB, as mentioned in statement.\nOutput Format\nFor each test case, output YES if\n(A,B) is an equivalent pair, NO otherwise.\nThe output is case-insensitive. Thus, the strings Yes, YES, yes, and yeS are all considered identical.\nConstraints\n1\u2264T\u226410\n5\n2\u2264A,B\u226410\n6\nSample 1:\nInput\nOutput\n3\n2 3\n8 4\n12 24\nNO\nYES\nNO\nExplanation:\nTest case\n1: There are no positive integers\nX and\nY which satisfy\nA\nX\n=B\nY\n.\nTest case\n2: Let\nX=2 and\nY=3. Thus,\nA\nX\n=8\n2\n=64 and\nB\nY\n=4\n3\n=64. Thus, the pair\n(8,4) is equivalent.\nTest case\n3: There are no positive integers\nX and\nY which satisfy\nA\nX\n=B\nY\n.",
        "441": "Segment Three\nToday is an important day for Chef Hammoda as a lot of customers will be visiting his restaurant.\nThe restaurant contains\nN tables, and each customer will sit at one table.\nInitially, Chef Hammoda plans for the dish served to the\ni-th table to contain\nA\ni\ningredients.\nHowever, he thinks that a group of three dishes is delicious if the sum of the number of ingredients of the three dishes is divisible by\n3.\nHammoda wants every consecutive group of\n3 tables to have delicious dishes. To achieve this, he can add as many ingredients as he wants to each dish.\nHelp him determine the minimum number of additional ingredients needed to make every group of three consecutive tables delicious.\nMore formally, solve the following problem:\nYou are given an array\nA=[A\n1\n,A\n2\n,\u2026,A\nN\n] of length\nN. You're allowed to increment each element however much you like.\nFind the minimum number of increments needed so that in the resulting array, the sum of every three consecutive elements is divisible by\n3\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains one integer\nN \u2014 the number of tables.\nThe next line contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n\u2014 number of ingredients initially present in the\ni\nth\ndish.\nOutput Format\nFor each test case, print on a new line a single integer: the minimum number of increments needed to make every length-\n3 subarray of\nA have a sum that's divisible by\n3.\nConstraints\n1\u2264T\u226410\n5\n3\u2264N\u226410\n5\n1\u2264a\ni\n\u226410\n9\nThe sum of\nN over all test cases won't exceed\n10\n5\n.\nSample 1:\nInput\nOutput\n3\n3\n1 2 3 \n10\n2 3 10 25 12 7 10 12 1 46\n7\n10 12 15 16 17 200 132\n0\n3\n4\nExplanation:\nTest case\n1: There is only one subarray of length\n3, and its sum already divisible by\n3.\nTest case\n2: The array after increments can be:\n[2,3,10,\n26\n,12,7,\n11\n,12,1,\n47\n]\nfor a total of\n3 increments (the elements underlined were all incremented by\n1 each). Every subarray of length\n3 now has a sum that's divisible by\n3.\nIt can be proved that it's not possible to achieve this using two or fewer increments.\nTest case\n3: The array after increments can be:\n[10,12,\n17\n,16,\n18\n,200,\n133\n]\nfor a total of\n4 increments.\nHere,\n15 was incremented twice to reach\n17, and the other two elements were incremented once each.",
        "442": "Full Path Eraser\nThere is a rooted tree of\nN vertices rooted at vertex\n1. Each vertex\nv has a value\nA\nv\nassociated with it.\nYou choose a vertex\nv (possibly the root) from the tree and remove all vertices on the path from the root to the vertex\nv, also including\nv. This will result in a forest of zero or more connected components.\nThe beauty of a connected component is the\nGCD of the values of all vertices in the component. Find the maximum value of the sum of beauties of the obtained connected components for any choice of\nv.\nHere,\nGCD stands for Greatest Common Divisor.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains an integer\nN \u2014 the size of the tree.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\ndenoting the values associated with each vertex.\nThe next\nN\u22121 lines contain two space-separated integers\nu and\nv \u2014 denoting an undirected edge between nodes\nu and\nv.\nIt is guaranteed that the edges given in the input form a tree.\nOutput Format\nFor each test case output the maximum value of the sum of beauties of the obtained connected components for any choice of\nv.\nConstraints\n1\u2264T\u22642\u22c510\n4\n1\u2264N\u22643\u22c510\n5\n1\u2264A\ni\n\u226410\n9\n1\u2264u,v\u2264N and\nu\n\ue020\n=v\nIt is guaranteed that the edges given in the input form a tree.\nThe sum of\nN over all test cases does not exceed\n3\u22c510\n5\nSample 1:\nInput\nOutput\n1\n10\n15 30 15 5 3 15 3 3 5 5\n1 2\n1 5\n2 3\n2 4\n5 6\n5 7\n5 8\n7 9\n7 10\n33\nExplanation:\nThe tree from the sample is as follows.\n![tree_basic](https:\/\/s3.amazonaws.com\/codechef_shared\/download\/Images\/the_hyp0cr1t3\/tree_basic.png =450x450)\nIf vertex\nv=7 is chosen, vertices\n1,\n5 and\n7 are removed.\n![tree_remove](https:\/\/s3.amazonaws.com\/codechef_shared\/download\/Images\/the_hyp0cr1t3\/tree_remove.png =450x450)\nThe resulting forest contains five connected components\n{8},{6},{10},{9} and\n{2,3,4}.\n![tree_value](https:\/\/s3.amazonaws.com\/codechef_shared\/download\/Images\/the_hyp0cr1t3\/tree_value.png =450x450)\nThe beauties of the connected components are\n3,\n15,\n5,\n5 and\n5 respectively. Thus the answer is\n3+15+5+5+5=33.\nIt can be shown that this is the maximum value possible for any choice of\nv.",
        "443": "Can You Reach The End\nRead problem statements in Mandarin, Bengali, and Russian as well.\nYou are given a positive integer\nN. Consider a square grid of size\nN\u00d7N, with rows numbered\n1 to\nN from top to bottom and columns numbered\n1 to\nN from left to right. Initially you are at\n(1,1) and you have to reach\n(N,N). From a cell you can either move one cell to the right or one cell down (if possible). Formally, if you are at\n(i,j), then you can either move to\n(i+1,j) if\ni<N, or to\n(i,j+1) if\nj<N.\nThere are exactly\nN blocks in the grid, such that each row contains exactly one block and each column contains exactly one block. You can't move to a cell which contains a block. It is guaranteed that blocks will not placed in\n(1,1) and\n(N,N).\nYou have to find out whether you can reach\n(N,N).\nInput Format\nThe first line contains\nT - the number of test cases. Then the test cases follow.\nThe first line of each test case contains\nN - the size of the square grid.\nThe\ni-th line of the next\nN lines contains two integers\nX\ni\nand\nY\ni\nindicating that\n(X\ni\n,Y\ni\n) is the position of a block in the grid.\nOutput Format\nFor each test case, if there exists a path from\n(1,1) to\n(N,N), output YES, otherwise output NO.\nYou may print each character of the string in uppercase or lowercase (for example, the strings yEs, yes, Yes and YES will all be treated as identical).\nConstraints\n1\u2264T\u22641000\n2\u2264N\u226410\n6\n1\u2264X\ni\n,Y\ni\n\u2264N\n(X\ni\n,Y\ni\n)\n\ue020\n=(1,1) and\n(X\ni\n,Y\ni\n)\n\ue020\n=(N,N) for all\n1\u2264i\u2264N\nX\ni\n\ue020\n=X\nj\nand\nY\ni\n\ue020\n=Y\nj\nfor all\n1\u2264i<j\u2264N\nSum of\nN over all test cases does not exceed\n10\n6\nSample 1:\nInput\nOutput\n2\n3\n1 2\n2 3\n3 1\n2\n1 2\n2 1\nYES\nNO\nExplanation:\nTest case\n1: We can follow the path\n(1,1)\u2192(2,1)\u2192(2,2)\u2192(3,2)\u2192(3,3).\nTest case\n2: We can't move from the starting point, so it is impossible to reach\n(N,N).",
        "444": "TripTastic\nA school wants to plan a trip for a group of\nK students and one mentor.\nA hotel is booked for their stay, where the rooms are formatted in form of a matrix\nA with\nN rows and\nM columns. There are a total of\nN\u00d7M rooms where the room\n(i,j) has a capacity of\nA\n(i,j)\npeople.\nThe distance between the rooms\n(i\n1\n,j\n1\n) and\n(i\n2\n,j\n2\n) is given by\nmax(\u2223i\n1\n\u2212i\n2\n\u2223,\u2223j\n1\n\u2212j\n2\n\u2223), where\n\u2223X\u2223 denotes the absolute value of\nX.\nTo ensure that the trip goes smoothly, the rooms should be booked in a way such that the distance between the mentor's room and the farthest room of a student is minimal.\nNote that the mentor and students can stay in the same room.\nYour task is to find the minimal distance between the mentor's room and the farthest room of a student.\nIn case the total capacity of the hotel is less than\nK+1, print\n\u22121 instead.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first line of each test case contains three space-separated integers\nN,M, and\nK \u2014 the number of rows, columns, and students, respectively.\nThe next\nN lines contain\nM space-separated integers each, denoting the capacity of each room.\nOutput Format\nFor each test case, output on a new line, the minimal distance between the mentor's room and the farthest room of a student.\nIn case the total capacity of the hotel is less than\nK+1, print\n\u22121 instead.\nConstraints\n1\u2264T\u2264500\n1\u2264N,M\u226410\n6\n1\u2264K\u226410\n9\n0\u2264A\n(i,j)\n\u226410\n5\nThe sum of\nN\u22c5M over all test cases won't exceed\n10\n6\n.\nSample 1:\nInput\nOutput\n4\n1 7 5\n2 1 0 1 3 0 1\n2 4 3\n1 0 4 0\n0 2 0 3\n2 2 7\n1 0\n4 1\n3 2 3\n0 2\n1 0\n1 0\n3\n0\n-1\n1\nExplanation:\nTest case\n1: Mentor can stay in room\n(1,2), two students in room\n(1,1), one student in room\n(1,4) and two students in room\n(1,5).\nThe farthest room of a student would be\n(1,5) with distance\n3.\nWe can show that in no other arrangement, we can achieve a distance less than\n3.\nTest case\n2: Mentor and all\n3 students can stay in room\n(1,3). Thus, the distance is\n0.\nTest case\n3: The hotel does not have enough capacity.",
        "445": "LCM Mania\nhErd gives you an integer\nN. Find any three positive integers\nA,B,C such that:\nN=lcm(A,B)+lcm(B,C)+lcm(C,A); where\nlcm denotes the least common multiple.\nIf there is no solution, print\n\u22121.\nIf there are multiple solutions, you may print any of them.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first and only line of each test case contains an integer\nN.\nOutput Format\nFor each test case, output on a new line, three space-separated integers\nA,B,C satisfying the condition.\nIf there is no solution, print\n\u22121.\nIf there are multiple solutions, you may print any of them.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n9\nSample 1:\nInput\nOutput\n3\n1\n6\n15\n-1\n2 2 2\n5 5 1\nExplanation:\nTest case\n1: It can be shown that no solution exists.\nTest case\n2: Consider\nA=2,B=2,C=2. Thus,\n6=lcm(2,2)+lcm(2,2)+lcm(2,2).\nTest case\n3: Consider\nA=5,B=5,C=1. Thus,\n15=lcm(5,5)+lcm(5,1)+lcm(5,1).\nNote that\n(5,5,1),(1,5,5) and\n(5,1,5) are all considered valid.",
        "446": "Non Zero Subarray Xor\nJJ is back with another challenge. He challenges you to construct an array\nA containing\nN integers such that the following conditions hold:\nFor all\n1\u2264i\u2264N,\n1\u2264A\ni\n\u226410\n6\nEvery subarray has non-zero XOR. That is, for every\n1\u2264L\u2264R\u2264N,\nA\nL\n\u2295A\nL+1\n\u2295\u2026\u2295A\nR\n\ue020\n=0. Here,\n\u2295 denotes the bitwise XOR operation.\nCan you complete JJ's challenge?\nUnder the given constraints, it can be proved that there always exists at least one array satisfying these conditions. If there are multiple possible arrays, print any of them.\nInput Format\nThe first line contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains an integer\nN \u2014 the size of the array\nA to be constructed.\nOutput Format\nFor each test case, output a single line containing\nN space-separated integers, denoting the elements of array\nA. The\ni\nth\nof these\nN integers is\nA\ni\n. If multiple arrays exist which satisfy the conditions, print any of them.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u226410\n5\nIt is guaranteed that the sum of\nN over all test cases does not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n1\n6\n6\n7\n1 2 4 8 16 32\n2 3 5 7 11 13\nExplanation:\nTest Case\n1: There is only one subarray,\n[7]. Its XOR is non-zero.\nTest Case\n2: Some of the subarray XORS are:\nXOR([2,4,8])=14\n\ue020\n=0\nXOR([1,2])=3\n\ue020\n=0\nXOR([4,8,16,32])=60\n\ue020\n=0.\nSimilarly, it can be checked that every subarray has non-zero XOR.\nTest Case\n3: Some of the subarray XORS are:\nXOR([2,3,5,7])=3\n\ue020\n=0\nXOR([7,11])=12\n\ue020\n=0\nXOR([2,3,5,7,11,13])=5\n\ue020\n=0\nSimilarly, it can be checked that every subarray has non-zero XOR.",
        "447": "Wishcraft\nMagic is really very simple, all you\u2019ve got to do is want something and then let yourself have it.\nChadda and his Wizard friend PSC were exploring the enchanted forest on Halloween, when Chadda stumbled upon an array\nA of\nN magical numbers which took him into a different world.\nChadda remembered that PSC gave him two integers\nP and\nQ for such a situation.\nUsing these integers, Chadda can modify the array\nA as follows:\nAt most\nP times, perform the following operation:\nPick two elements\nx and\ny from\nA, delete them both from\nA, and insert\n(x+y) into\nA.\nThis operation can be performed only if\nA has at least two elements.\nAt most\nQ times, perform the following operation:\nPick two elements\nx and\ny from\nA, delete them both from\nA, and insert\n(x\u2212y) into\nA.\nThis operation can also be performed only if\nA has at least two elements.\nNote that each operation reduces the size of\nA by one.\nThe two types of operations (addition and subtraction) can be performed in any order, as long as at most\nP addition operations and\nQ subtraction operations are made.\nLet\nB denote the final array obtained after performing some (possibly, zero) operations.\nTo return to his original world, Chadda has to find the maximum possible value of\nmax(B)\u2212min(B)\nacross all possible final arrays\nB.\nCan you help Chadda find this value?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of three lines of input.\nThe first line of each test case contains a single integer\nN \u2014 the size of the array.\nThe second line contains two space-separated integers\nP and\nQ \u2014 the maximum number of addition and subtraction operations, respectively.\nThe third line contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n: the elements of array\nA.\nOutput Format\nFor each test case, output on a new line the answer: the maximum possible value of\nmax(B)\u2212min(B) across all possible final arrays\nB.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n5\n0\u2264P,Q\u2264N\u22121\n\u221210\n9\n\u2264A\ni\n\u226410\n9\nThe sum of\nN over all test cases won't exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n2\n0 0\n5 1\n6\n1 2\n8 -1 -4 2 6 -3\n7\n6 6\n-2 -4 2 -2 -3 -1 -1\n4\n23\n15\nExplanation:\nTest case\n1:\nP=Q=0, so no operations can be performed at all.\nThe answer is just\nmax([5,1])\u2212min([5,1])=5\u22121=4.\nTest case\n2: The array is\nA=[8,\u22121,\u22124,2,6,\u22123]. The following sequence of operations can be performed:\nChoose\n2 and\n\u22123, remove them, and insert\n2\u2212(\u22123)=5 into the array.\nThe elements are now\n[8,\u22121,\u22124,6,5].\nChoose\n8 and\n5, remove them, and add\n8+5=13 to the array.\nThe elements are now\n[13,\u22121,\u22124,6].\nChoose\n\u22124 and\n6, remove them and add\n(\u22124)\u2212(6) to the array.\nThe elements are now\n[13,\u22121,\u221210].\nThe difference between maximum and minimum for this array is\n13\u2212(\u221210)=23.\nWith one addition and two subtraction operations available, it can be proved that this is the maximum attainable value.\nTest Case\n3:: It can be proven that\n15 is the maximum attainable value.",
        "448": "Travelling in the Graph\nYou are given a graph with\nN vertices (numbered\n1 to\nN) and\nM bidirectional edges, which doesn't contain multiple edges or self-loops \u2014 that is, the given graph is a simple undirected graph.\nFor each pair of vertices\na,b such that\n1\u2264a,b\u2264N, it is possible to add a new edge between vertices\na and\nb to the graph, with a cost of\n(a\u2212b)\n2\n.\nFind the minimum cost of adding edges so that vertex\nN is reachable from vertex\n1.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains\n2 space-separated integers,\nN and\nM.\nThe\ni\nth\nof the next\nM lines contains\n2 space-separated integers\nu\ni\nand\nv\ni\n, denoting a bidirectional edge between vertex\nu\ni\nand vertex\nv\ni\nin the graph.\nOutput Format\nFor each test case, output the answer in a single line.\nConstraints\n1\u2264T\u22641000\n2\u2264N\u22642\u22c510\n5\n0\u2264M\u22642\u22c510\n5\n1\u2264u\ni\n,v\ni\n\u2264N\nThe graph doesn't contain self-loops or multiple edges\nSum of\nN over all testcases is no more than\n2\u22c510\n5\n.\nSum of\nM over all testcases is no more than\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n2 0\n5 4\n3 2\n1 4\n5 3\n4 2\n6 3\n1 2\n3 2\n1 3\n1\n0\n3\nExplanation:\nTest Case\n1: Add an edge between vertices\n1 and\n2, with cost\n(1\u22122)\n2\n=1.\nTest Case\n2: Vertices\n1 and\n5 are already connected, so no edges need to be added.",
        "449": "Maximal Expression\nYou are given two integers\nN and\nK.\nLet\nF(X)=(XmodK)\u00d7((N\u2212X)modK), where\nmod denotes the modulo operator.\nFind an integer\nX such that the value of\nF(X) is the maximum over all\n0\u2264X\u2264N.\nIf there are multiple answers, you may print any.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line of input containing two integers\nN and\nK.\nOutput Format\nFor each testcase, print a single integer\nX\n(0\u2264X\u2264N) such that the value of\nF(X) is the maximum over all possible\nX from\n0 to\nN.\nIf there are multiple answers, you may print any.\nConstraints\n1\u2264T\u226410\n5\n0\u2264N\u226410\n9\n1\u2264K\u226410\n9\nSample 1:\nInput\nOutput\n3\n5 2\n4 7\n8 3\n0\n2\n4\nExplanation:\nTest case\n1:\nF(X)=0 for all\n0\u2264X\u22645.\nTest case\n2:\nF(0)=(0mod7)\u00d7(4mod7)=0\nF(1)=(1mod7)\u00d7(3mod7)=3\nF(2)=(2mod7)\u00d7(2mod7)=4\nF(3)=(3mod7)\u00d7(1mod7)=3\nF(4)=(4mod7)\u00d7(0mod7)=0\nSo,\nX=2 is the only correct answer.\nTest case\n3:\nF(X)=0 for\nX\u2208{0,2,3,5,6,8}\nF(X)=1 for\nX\u2208{1,4,7}\nSo,\n1,\n4 and\n7 are all correct answers.",
        "450": "Interesting Array\nAn array is called interesting if no subarray of length greater than\n2 is non-increasing or non-decreasing.\nChef has an array\nA of length\nN. He wants to make the array interesting by rearranging the elements in any order.\nIf there exist multiple such arrays, output any one.\nIf no such array exists, print\n\u22121 instead.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains an integer\nN denoting the length of array\nA.\nThe next line contains\nN space separated integers,\nA\n1\n,A\n2\n,\u2026,A\nN\nOutput Format\nFor each test case, output on a single line, any possible interesting array. If no such array is possible, output\n\u22121.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u226410\n5\n1\u2264A\ni\n\u226410\n9\nThe sum of\nN over all test cases won't exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n3\n2 2 2\n4\n2 6 5 2\n5\n5 5 2 4 2\n-1\n6 2 5 2\n5 2 4 2 5\nExplanation:\nTest case\n1: There is no way of arranging the elements such that no subarray of length greater than\n2 is non-increasing or non-decreasing.\nTest case\n2: A possible rearrangement of the elements is\n[6,2,5,2]. Note that the subarrays of length greater than\n2 are\n{[6,2,5],[2,5,2],[6,2,5,2]}. None of these subarrays are non-increasing or non-decreasing.\nTest case\n3: A possible rearrangement of the elements is\n[5,2,4,2,5]. Note that the subarrays of length greater than\n2 are\n{[5,2,4],[2,4,2],[4,2,5],[5,2,4,2],[2,4,2,5],[5,2,4,2,5]}. None of these subarrays are non-increasing or non-decreasing.",
        "451": "Maximising Vacations\nYou are given Chef's calendar for the next\nN days, defined as a binary string\nS of length\nN where\nS\ni\n=0 means that Chef has a holiday on the\ni\nth\nday from now, and\nS\ni\n=1 means that Chef has to work on that day.\nChef wants to plan his vacations. For each vacation, Chef needs\nX consecutive holidays in his calendar. Obviously, he can only go on one vacation at a time.\nChef can take at most one extra holiday. That is, he can flip at most one digit in\nS from\n1 to\n0. If he does this optimally, what is the maximum number of vacations that he can go on?\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains two space-separated integers\nN and\nX.\nThe second line of each test case contains a binary string\nS of length\nN \u2014 Chef's schedule.\nOutput Format\nFor each test case, output on a new line the answer \u2014 the maximum number of vacations Chef can take if he takes at most one more extra holiday.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u22642\u22c510\n5\n1\u2264X\u2264N\nThe sum of\nN across all test cases does not exceed\n2\u22c510\n5\nSample 1:\nInput\nOutput\n3\n7 2\n0010001\n4 3\n1010\n5 2\n00100\n3\n1\n2\nExplanation:\nTest Case\n1: Chef can flip the\n3\nrd\ndigit to make his calendar\n0000001. This allows him to take\n3 vacations in the first\n6 days.\nTest Case\n2: Chef can flip the\n3\nrd\ndigit to make his calendar\n1000. This allows him to take one vacation using the last\n3 days.\nTest Case\n3: Regardless of whether Chef flips the\n3\nrd\ndigit or not, he can take at most\n2 vacations.",
        "452": "Love Squares Hate Cubes\nKulyash loves perfect squares and hates perfect cubes.\nFor any natural number\nN,\nF(N)=number of perfect squares smaller than or equal to N\u2212number of positive perfect cubes smaller than or equal to N.\nKulyash gives you an integer\nX and asks you to find the minimum value of\nN, such that\nF(N)\u2265X.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single line of input.\nThe first and only line of each test case contains an integer\nX.\nOutput Format\nFor each test case, output on a new line, the minimum value of\nN such that\nF(N)\u2265X.\nConstraints\n1\u2264T\u226410\n5\n1\u2264X\u226410\n9\nSample 1:\nInput\nOutput\n3\n1\n3\n3151\n4\n25\n11397376\nExplanation:\nTest case\n1: There are\n2 perfect squares from\n1 to\n4, and\n1 perfect cube from\n1 to\n4, so\nF(4)=2\u22121=1, as required.\nTest case\n2: There are\n5 perfect squares from\n1 to\n25, and\n2 perfect cubes from\n1 to\n25, so\nF(25)=5\u22122=3, as required.\nTest case\n3: There are\n3376 perfect squares from\n1 to\n11397376, and\n225 perfect cubes from\n1 to\n11397376, so\nF(11397376)=3376\u2212225=3151, as required.",
        "453": "Lexicographically Largest\nYou are given a positive integer\nM and an array\nA (1\u2264A\ni\n\u2264M) consisting of\nN positive integers.\nFind the lexicographically largest array\nB such that:\n\u2223B\u2223=N;\n1\u2264B\ni\n\u2264M for all\n1\u2264i\u2264N;\nA\ni\n=gcd(B\n1\n,B\n2\n,\u2026,B\ni\n), where\ngcd denotes the greatest common divisor.\nNote that the input\nA guarantees that\nB always exists.\nFor two arrays\nX and\nY, both of size\nN, the array\nX is said to be lexicographically larger than array\nY, if, in the first position where\nX and\nY differ,\nX\ni\n>Y\ni\n.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains two space separated integers\nN and\nM \u2014 the length of array\nA and upper bound on array elements.\nThe next line contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\nrepresenting the array\nA.\nOutput Format\nFor each test case, output on a new line, the lexicographically largest array\nB, satisfying the given conditions.\nConstraints\n1\u2264T\u226410\n4\n1\u2264N\u226410\n4\n1\u2264M\u226410\n9\n1\u2264A\ni\n\u2264M\nThe sum of\nN over all test cases won't exceed\n5\u22c510\n4\n.\nSample 1:\nInput\nOutput\n4\n1 1\n1\n2 2\n2 1\n4 3\n2 2 2 2\n4 5\n2 2 2 2\n1\n2 1\n2 2 2 2\n2 4 4 4\nExplanation:\nTest case\n1: The only possible array is\nB=[1] which satisfies the given conditions.\nTest case\n2: The only possible array is\nB=[2,1] which satisfies the given conditions.\nHere\nA\n1\n=B\n1\n=2, and\nA\n2\n=gcd(B\n1\n,B\n2\n)=1.\nTest case\n4: The lexicographically largest valid array is\nB=[2,4,4,4]. Some other arrays that are valid include\n[2,2,2,2],[2,2,4,2],[2,2,4,4].",
        "454": "SUM OR\nYou are given a positive integer\nN.\nFind the number of triples\n(X,Y,Z) such that:\n0<X,Y,Z<N;\nX+Y+Z=N;\nX\n\u2223\nY\n\u2223\nZ=N, where\n\u2223 represents the bitwise OR operation.\nSince the number of triples can be huge, print them modulo\n10\n9\n+7.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of a single integer\nN, as mentioned in the statement.\nOutput Format\nFor each test case, output on a new line, the number of triples satisfying the condition, modulo\n10\n9\n+7.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N<2\n60\nSample 1:\nInput\nOutput\n2\n3\n7\n0\n6\nExplanation:\nTest case\n1: There are no triples\n(X,Y,Z) satisfying the given conditions.\nTest case\n2: The following\n6 tuples satisfy the conditions:\n{(1,2,4),(1,4,2),(2,1,4),(2,4,1),(4,1,2),(4,2,1)}.\nFor example, in the tuple\n(1,2,4),\n1+2+4=7 and\n1\n\u2223\n2\n\u2223\n4=7.",
        "455": "Musical Rods\nYou have\nN rods with you. The\ni-th rod has a length of\nA\ni\nand a beauty of\nB\ni\n.\nYou'd like to arrange these rods side-by-side in some order on the number line, starting from\n0.\nLet\nx\ni\nbe the starting position of the\ni-th rod in an arrangement. The beauty of this arrangement is\ni=1\n\u2211\nN\nx\ni\n\u22c5B\ni\nWhat is the maximum beauty you can attain?\nNote that the left endpoint of the first rod you place must be\n0, and you cannot leave any space between rods.\nInput Format\nThe first line of input contains an integer\nT, denoting the number of test cases.\nEach test case consists of three lines of input.\nThe first line of each test case contains a single integer\nN, the number of rods.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\nThe third line of each test case contains\nN space-separated integers\nB\n1\n,B\n2\n,\u2026,B\nN\nOutput Format\nFor each test case print on a new line the answer: the maximum value of\n\u2211\ni=1\nN\nx\ni\nB\ni\nif the order of rods is chosen optimally.\nConstraints\n1\u2264T\u226410\n3\n1\u2264N\u226410\n5\n1\u2264A\ni\n\u226410\n4\n1\u2264B\ni\n\u226410\n4\nThe sum of\nN across all testcases won't exceed\n10\n5\n.\nSample 1:\nInput\nOutput\n2\n2\n1 2\n4 6\n4\n2 8 9 11\n25 27 100 45\n8\n2960\nExplanation:\nTest case\n1: Place the second rod followed by the first one. This makes\nx\n2\n=0 and\nx\n1\n=2, giving us a beauty of\n2\u22c54+0\u22c56=8, which is the maximum possible.\nTest case\n2: Place the rods in the order\n[2,4,3,1]. This gives us\nx=[28,0,19,8], and the beauty is\n28\u22c525+0\u22c527+19\u22c5100+8\u22c545=2960.",
        "456": "Binary Substitution\nChef has binary string\nS of length\nN.\nChef can perform the following operation on the string:\nChoose a contiguous subarray\nS\nL\n,S\nL+1\n,\u2026,S\nR\nsuch that the count of set bits in the subarray is equal to the count of unset bits in the subarray.\nReplace the chosen subarray with either a set bit or an unset bit.\nChef wants to reduce the string to minimum possible length using minimum number of given operations. Help Chef by telling him the minimum length and also the operations required to obtain that. If there are multiple ways to obtain the answer, print any.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe first line of each test case contains a single integer\nN, denoting the length of the binary string.\nThe second line of each test case contains a binary string\nS.\nOutput Format\nFor each test case, output\nK+1 lines:\nThe first line should contain two space-separated integers\nM and\nK, denoting the minimum length that can be obtained and the minimum number of operations required to obtain it respectively.\nThen,\nK lines follow, where the\ni\nth\nline denotes the\ni\nth\noperation:\nEach operation is denoted using three space separated integers\nL,\nR, and\nB.\nThe integers\nL and\nR denote the chosen substring such that\n(1\u2264L<R\u2264\u2223S\u2223) and the substring\nS[L,R] has equal count of set and unset bits. Note that,\n\u2223S\u2223 denotes the length of the current string.\nThe integer\nB denotes the bit with which the substring is replaced.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u22641000\nSample 1:\nInput\nOutput\n3\n4\n1100\n1\n1\n5\n11000\n1 1\n1 4 0\n1 0\n1 2\n1 4 1\n1 2 1\nExplanation:\nTest case\n1: We can reduce the string to a string of length\n1. We require only\n1 operation to do so:\nChoose\nL=1,R=4, and\nB=0. We chose the substring\nS[1,4] which contains\n2 set bits and\n2 unset bits. We can replace the chosen substring with bit\n0.\nTest case\n2: The given string is of length\n1. Thus, we cannot reduce it any further.\nTest case\n3: We can reduce the string to a string of length\n1. We require\n2 operations to do so:\nOperation\n1: Choose\nL=1,R=4, and\nB=1. We chose the substring\nS[1,4] which contains\n2 set bits and\n2 unset bits. We can replace the chosen substring with bit\n1. Thus, the string after this operation is\nS=10.\nOperation\n2: Choose\nL=1,R=2, and\nB=1. We chose the substring\nS[1,2] which contains\n1 set bit and\n1 unset bit. We can replace the chosen substring with bit\n1. Thus, the string after this operation is\nS=1.",
        "457": "Chef Goes Shopping\nMoEngage goes shopping with Chef. There are\nN ingredients placed on a line, numbered\n1 to\nN from left to right.\nAt any point in time, MoEngage can choose the ingredient numbered\nx and do one of the following operations:\nIf the chosen ingredient is not the leftmost amongst the remaining ingredients, remove the left neighbor. This operation costs\nL\nx\ncoins.\nIf the chosen ingredient is not the rightmost amongst the remaining ingredients, remove the right neighbor. This operation costs\nR\nx\ncoins.\nNote: MoEngage can perform at most one operation of one type on a particular ingredient. For example, you can't remove elements from the left of ingredient\nx two times. However, you can remove one ingredient each from the left and from the right of ingredient\nx.\nMoEngage performs the operations until only one ingredient is left.\nFind the minimum number of coins he needs to pay so that only one ingredient is left.\nInput Format\nThe first line contains a positive integer\nT - the number of test cases. Then\nT test cases follow.\nThe first line of each test case contains a single integer\nN - the number of ingredients.\nThe second line of each test case contains\nN integers\nL\n1\n,L\n2\n,\u2026,L\nN\n- the number of coins required to remove the ingredient from the left of an ingredient.\nThe third line of each test case contains\nN integers\nR\n1\n,R\n2\n,\u2026,R\nN\n- the number of coins required to remove the ingredient from the right of an ingredient.\nOutput Format\nFor each test case, output in a new line, one integer - the minimum number of coins MoEngage needs to pay so that only one ingredient is left.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u22642\u22c510\n5\n1\u2264L\ni\n,R\ni\n\u226410\n9\nSum of\nN over all test cases does not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n1\n3\n4\n4\n2 1 3 2\n4 2 4 3\n7\n3 10 5 2 8 3 9\n8 6 11 5 9 13 7\n0\n5\n32\nExplanation:\nTest case 1: The number of ingredients is already\n1. Thus, MoEngage has to spend\n0 coins.\nTest case 2: Initially, the list of ingredients is\n[1,2,3,4]. MoEngage can apply the operations in the following way:\nApply the first operation on ingredient\n4. Coins required for this are\nL\n4\n=2. The updated list of ingredients is\n[1,2,4].\nApply the second operation on ingredient\n2. Coins required for this are\nR\n2\n=2. The updated list of ingredients is\n[1,2].\nApply the first operation on ingredient\n2. Coins required for this are\nL\n2\n=1. The updated list of ingredients is\n[2].\nThus, the total number of coins required is\n2+2+1=5. It can be shown that MoEngage cannot achieve a single ingredient in less than\n5 coins.",
        "458": "Minimize swaps\nYou are given a binary string\nS.\nIn one operation, you can pick an index\ni\n(1\u2264i<\u2223S\u2223) and swap the characters\nS\ni\nand\nS\n(i+1)\n.\nFind the minimum number of operations required, such that, the decimal representation of the final binary string is divisible by\n3. If it is impossible to do so, print\n\u22121 instead.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of single line of input, containing a binary string\nS.\nOutput Format\nFor each test case, output on a new line, the minimum number of operations required, such that, the decimal representation of the final binary string is divisible by\n3. If it is impossible to do so, print\n\u22121 instead.\nConstraints\n1\u2264T\u226410\n5\n1\u2264\u2223S\u2223\u22643\u22c510\n5\nS consists of\n0 and\n1 only.\nThe sum of\n\u2223S\u2223 over all test cases won't exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n0000\n111\n11001\n0\n-1\n1\nExplanation:\nTest case\n1: There is no need to apply any operation since the decimal representation of\n0000 is\n0 which is divisible by\n3.\nTest case\n2: It can be shown that we cannot make the decimal representation of the string divisible by\n3 using any number of operations.\nTest case\n3: The decimal representation of\n11001 is\n25 . Using one operation, we pick\ni=2 and swap\nS\n2\nand\nS\n3\n. Thus, the string becomes\n10101, whose decimal representation is\n21, which is divisible by\n3.",
        "459": "Sum of Goodness\nYou are given an array\nA=A\n1\n,A\n2\n,\u2026,A\nN\nof size\nN.\nConsider a subsequence\nS=S\n1\n,S\n2\n,\u2026,S\nM\nof\nA. Let us define the Goodness of subsequence\nS as follows:\nSort the subsequence\nS in non-decreasing order.\nThen, the Goodness of subsequence\nS is the number of indices such that\nS\ni\n=i, where\n(1\u2264i\u2264\u2223S\u2223).\nFor example, suppose\nA=[10,3,2,5,11,3,1,12], and the subsequence is\nS=[3,2,5,3,1]. After sorting,\nS=[1,2,3,3,5], and so the Goodness of\nS is\n4.\nConsider all the\n2\nN\n\u22121 possible non-empty subsequences of array\nA, and find the sum of all their Goodness.\nSince the answer can be large, output the answer modulo\n10\n9\n+7.\nNote: A sequence\nS is a subsequence of array\nA if\nS can be obtained from\nA by deletion of several (possibly, zero) elements. For example,\n[3,1] is a subsequence of\n[3,2,1] and\n[4,3,1], but not a subsequence of\n[1,3,3,7] and\n[3,10,4].\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases. Then the test cases follow.\nThe first line of each test case contains an integer\nN - the size of the array\nA.\nThe second line of each test case contains\nN space-separated integers,\nA\n1\n,A\n2\n,A\n3\n,...,A\nN\n.\nOutput Format\nFor each test case, output the answer modulo\n10\n9\n+7.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n5\n1\u2264A\ni\n\u2264N for each\n1\u2264i\u2264N.\nThe sum of\nN over all test cases does not exceed\n2\u22c510\n5\nSample 1:\nInput\nOutput\n4\n2\n1 2\n5\n3 2 5 5 3\n4\n1 1 2 1\n6\n6 4 5 2 3 1\n3\n5\n17\n63\nExplanation:\nTestcase 1: The given array is\n[1,2]. There are 3 possible non-empty subsequences:\n[1]. The Goodness of this subsequence is\n1, since\nS\n1\n=1.\n[2]. The Goodness of this subsequence is\n0.\n[1,2]. The Goodness of this subsequence is\n2, since\nS\n1\n=1 and\nS\n2\n=2.\nThus the total sum is\n1+0+2=3, which is the answer.",
        "460": "Minimum Operation\nYou are given positive integers\nN and\nM\n(M\u22652).\nYou are also given an array\nA of size\nN, such that\n2\u2264A\ni\n\u2264M.\nIn one operation on the array, you can:\nSelect an integer\nX\n(2\u2264X\u2264M) and change\nA\ni\nto\ngcd(A\ni\n,X) for all\n1\u2264i\u2264N.\nNote that\ngcd denotes the greatest common divisor.\nYour task is to make all the elements of\nA equal.\nFind the minimum number of operations required to do so and also print the selected integer\nX for each operation.\nIf there are multiple ways to do so, you may print any.\nIt can be proven that it is always possible to make all the elements of\nA equal in finite number of operations.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains two integers\nN and\nM \u2014 the length of the array\nA and maximum value of\nX allowed.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n, representing the array\nA.\nOutput Format\nFor each test case, in the first line, print an integer\nZ, denoting the number of operations required.\nIn case\nZ>0, print another line with\nZ space-separated integers where the\ni\nth\ninteger represents the selected integer\nX selected in the\ni\nth\noperation in order.\nIf there are multiple ways to do so, you may print any.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n5\n2\u2264M\u226410\n6\n2\u2264A\ni\n\u2264M\nThe sum of\nN over all test cases won't exceed\n3\u22c510\n5\n.\nNote that sum of\nM over all test case isn't bounded.\nSample 1:\nInput\nOutput\n2\n3 343\n343 343 343\n5 100\n4 8 12 16 20\n0\n1\n4\nExplanation:\nTest case\n1: Since all elements of the array are already equal, we require\n0 operations.\nTest case\n2: We require only one operation:\nSelect\nX=4: Thus, the array becomes\n[gcd(4,4),gcd(4,8),gcd(4,12),gcd(4,16),gcd(4,20)]=[4,4,4,4,4], where all elements are equal.\nNote that this is the minimum number of operations required.",
        "461": "Increase 2 consecutive characters\nChef has\n2 strings\nA and\nB of equal length\nN. Both strings contain lowercase english alphabets only.\nChef can perform several moves on string\nA. In one move, Chef has to:\nSelect an index\ni (1\u2264i\u2264N\u22121).\nReplace\nA[i] with\n(A[i]+1).\nReplace\nA[i+1] with\n(A[i+1]+1).\nFor example, if\nA=abcze, a valid move would be to select index\n3. This way the string becomes\nabdae after performing the move. Note that the value at an index is cyclically incremented. This means that,\na\u2192b,\nb\u2192c,\n\u2026,\nz\u2192a.\nChef has been asked to answer\nQ queries. Each query is of the form:\nL\nR: Given\n1\u2264L\u2264R\u2264N, Chef wants to know if it is possible to convert the substring\nA[L,R] to\nB[L,R] by performing the above mentioned move any number of times.\nFor each query, output in a single line\nYes, if the conversion is possible using any number of moves. Otherwise, print\nNo.\nNOTE: Queries are independent. Thus, the original strings\nA and\nB would be retained to process next query. For each query solve for substrings\nA[L,R] and\nB[L,R] only. So valid values for\ni will be among\nL to\nR\u22121 only.\nInput Format\nThe first line will contain\nT - the number of test cases. Then the test cases follow.\nFirst line of each test case contains two integers\nN,Q.\nSecond line of each test case contains string\nA.\nThird line of each test case contains string\nB.\nQ lines follow, where the\ni\nth\nline contains two integers\nL\ni\nR\ni\n- the\ni\nth\nquery.\nOutput Format\nOutput\nQ lines, where the\ni\nth\nline contains the answer to the\ni\nth\nquery. The answer is\nYes, if the conversion is possible using any number of moves. Otherwise, the answer is\nNo.\nYou may print each character of the string in uppercase or lowercase (for example, the strings\nyEs,\nyes,\nYes and\nYES will all be treated as identical).\nConstraints\n1\u2264T\u22641000\n2\u2264N\u226410\n5\n1\u2264Q\u22642\u22c510\n5\n1\u2264L\u2264R\u2264N\nSum of\nN over all test cases does not exceed\n2\u22c510\n5\n.\nSum of\nQ over all test cases does not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n1\n5 3\nabcdz\nnbhea\n2 2\n1 3\n4 5\nYes\nNo\nYes\nExplanation:\nTest Case\n1:\nFor the first query, the substring\nA[2,2]=b is already same as\nB[2,2]=b. Thus, the answer is\nYes.\nFor the second query, it can be proven that the substring\nA[1,3] can never be made equal to\nB[1,3] using any number of moves.\nFor the third query, the substring\nA[4,5]=dz and\nB[4,5]=ea. Applying the move on index\n4, we get\nA[4]=e and\nA[5]=a. Hence, after one move,\nA[4,5]=B[4,5]. Thus, the answer is\nYes in this case.",
        "462": "Expected Value\nStack has a positive integer\nP(P>1).\nHe starts a game where his initial score is\n0.\nIn the\ni\nth\nturn, with a probability of\n2\n1\n, Stack adds\nP\ni\u22121\n1\nto his score.\nStack stops after\nN turns.\nLet\nS\ni\nbe his score after\ni turns and\nF(i) denote the expected value of\nS\ni\n2\n.\nFor each integer\ni(1\u2264i\u2264N), find the value of\nF(i) modulo\n998244353.\nInput Format\nThe only line of input contains two space-separated positive integers\nN and\nP, as mentioned in the statement.\nOutput Format\nPrint\nN space-separated integers. For each integer\ni(1\u2264i\u2264N), output the value of\nF(i) modulo\n998244353.\nFormally, let\nM=998244353. It can be shown that the answer can be expressed as an irreducible fraction\ny\nx\n, where\nx and\ny are integers and\ny\n\ue020\n\u22610(modM).\nOutput the integer equal to\nx\u22c5y\n\u22121\nmodM.\nIn other words, output such an integer\nz that\n0\u2264z<M and\nz\u22c5y\u2261x(modM). .\nConstraints\n1\u2264N\u22643\u22c510\n5\n2\u2264P\u226410\n5\nSample 1:\nInput\nOutput\n2 2\n499122177 124780545\nExplanation:\nS\n1\ncan be\n0 or\n1 with equal probability. Thus\nF(1)=\n2\n0\u22c50\n+\n2\n1\u22c51\n=\n2\n1\n.\nF(2)=\n8\n7\n.\nSample 2:\nInput\nOutput\n10 343\n499122177 379526990 822885144 761122022 256959043 151932103 340445396 758502677 478338987 125853909",
        "463": "Cherry and Bits\nCherry has a binary matrix\nA consisting of\nN rows and\nM columns. The rows are numbered from\n1 to\nN, columns are numbered from\n1 to\nM. Element at row\ni (\n1\u2009\u2264\ni\u2009\u2264\nN) and column\nj (\n1\u2009\u2264\nj\u2009\u2264\nM) is denoted as\nA\nij\n. All elements of\nA are either\n0 or\n1.\nHe performs\nQ queries on matrix. Each query is provided by four integers\nx\n1\n,\ny\n1\n,\nx\n2\n,\ny\n2\nwhich define the rectangle, where (\nx\n1\n,\ny\n1\n) stands for the coordinates of the top left cell of the rectangle, while (\nx\n2\n,\ny\n2\n) stands for the coordinates of the bottom right cell. You need to flip all the bits i.e. (\n0 to\n1,\n1 to\n0) that are located fully inside the query rectangle.\nFinally, print the matrix after performing all the queries.\nNote:\nx\n1\nrepresents the row number while\ny\n1\nrepresents the column number.\n###Input:\nThe first line of the input contains two integers\nN and\nM \u2014 the number of rows and the number of columns in the matrix.\nEach of the next\nN lines contains a string of length\nM, where the\nj\nth\ncharacter of\ni\nth\nline denotes the value of\nA\ni,j\n.\nNext line contains an integer\nQ \u2014 the number of queries.\nThen follow\nQ lines with queries descriptions. Each of them contains four space-seperated integers\nx\n1\n,\ny\n1\n,\nx\n2\n,\ny\n2\n\u2014 coordinates of the up left and bottom right cells of the query rectangle.\n###Output:\nPrint the matrix, in the form of\nN strings, after performing all the queries.\n###Constraints\n1\u2264N,M\u22641000\n0\u2264A\nij\n\u22641\n1\u2264Q\u226410\n6\n1\u2264x\n1\n\u2264x\n2\n\u2264N\n1\u2264y\n1\n\u2264y\n2\n\u2264M\nSample 1:\nInput\nOutput\n2 2\n00\n00\n3\n1 1 1 1\n2 2 2 2\n1 1 2 2\n01\n10\nExplanation:\nExample case 1:\nAfter processing the 1st query 1 1 1 1, matrix becomes:\n[\n[\n10\n00\n] After processing the 2nd query 2 2 2 2, the matrix becomes:\n[\n[\n10\n01\n] After processing the 3rd query 1 1 2 2, matrix becomes:\n[\n[\n01\n10\n] We need to output the matrix after processing all queries.",
        "464": "Chef Is Just Throwing Random Words\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef once had a deep epiphany and ended up saying: Given a sequence of positive integers\na\n1\n,a\n2\n,\u2026,a\nN\n, if you take each of its\n2\nN\nsubsequences and write down the sum of elements of this subsequence, what will the bitwise OR of the written integers be?\nYes, you read it right, but can you solve it?\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN.\nThe second line contains\nN space-separated integers\na\n1\n,a\n2\n,\u2026,a\nN\n.\nOutput\nFor each test case, print a single line containing one integer \u2015 the bitwise OR of sums of all subsequences.\nConstraints\n1\u2264T\u22645\n1\u2264N\u226410\n5\n1\u2264a\ni\n<2\n30\nfor each valid\ni\nSubtasks\nSubtask #1 (100 points): original constraints\nSample 1:\nInput\nOutput\n2\n2\n1 1\n3\n1 9 8\n3\n27",
        "465": "Sardar and GCD\nSardar Khan has finally decided to attack Ramadhir - he will bomb one of Ramadhir's businesses in Wasseypur. Sardar Khan knows that Ramadhir has\nN businesses (numbered\n1 to\nN) and that there are\nN\u22121 roads connecting pairs of these businesses in such a way that all businesses are connected. Further, Sardar knows that each business has a specific value - the\ni-th business has value\nA\ni\n.\nWhen Sardar Khan destroys a business, he also destroys every road directly connected to it. Formally, destroying business\nv also destroys all existing roads of the form\n(u,v).\nSardar thinks that the damage dealt to Ramadhir upon destroying business\nv equals the sum of the greatest common divisors of every remaining maximal connected set of businesses. More formally,\nLet the connected components of the graph obtained on deleting\nv and edges incident to it be\nC\n1\n,C\n2\n,\u2026,C\nk\n.\nDefine\ngcd(C\ni\n) to be\ngcd(A\ni\n1\n,A\ni\n2\n,\u2026,A\ni\nr\n) where\nC\ni\nconsists of vertices\ni\n1\n,i\n2\n,\u2026,i\nr\n.\nThe damage caused by destroying\nv is then\n\u2211\ni=1\nk\ngcd(C\ni\n).\nSardar Khan wants to maximize the damage he deals. Can you find the maximum possible damage he can achieve, given that he destroys exactly one business?\nIf the process of computing damage is still unclear, please refer to sample test cases for an explained example.\nInput Format\nThe first line of input contains an integer\nT, denoting the total number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains an integer\nN, denoting the number of businesses Ramadhir owns.\nEach of the next\nN\u22121 lines contains\n2 integers\na and\nb, denoting a road between businesses\na and\nb.\nFinally, the last line of each test case contains\nN space-separated positive integers\nA\n1\n,A\n2\n,\u2026,A\nN\n, where\nA\ni\nis the value of the\ni-th business.\nOutput Format\nFor each test case, output a single line containing one integer - the maximum possible damage that Sardar Khan can deal.\nConstraints\n1\u2264T\u22641000\n2\u2264N\u226410\n5\n1\u2264A\ni\n\u226410\n9\nSum of\nN over all test cases will not exceed\n5\u22c510\n5\n.\nIt is guaranteed that the given roads connect every business.\nSample 1:\nInput\nOutput\n1\n5\n1 2\n1 3\n3 4\n3 5\n4 6 8 12 15\n29\nExplanation:\nIf business\n1 is bombed, the remaining connected components are\n{(2),(3,4,5)}. This gives a damage of\ngcd(A\n2\n)+gcd(A\n3\n,A\n4\n,A\n5\n)=6+1=7.\nIf business\n2 is bombed, the remaining connected components are\n{(1,3,4,5)}. This gives a damage of\ngcd(A\n1\n,A\n3\n,A\n4\n,A\n5\n)=1.\nIf business\n3 is bombed, the remaining connected components are\n{(1,2),(4),(5)}. This gives a damage of\ngcd(A\n1\n,A\n2\n)+gcd(A\n4\n)+gcd(A\n5\n)=2+12+15=29.\nIf business\n4 is bombed, the remaining connected components are\n{(1,2,3,5)}. This gives a damage of\ngcd(A\n1\n,A\n2\n,A\n3\n,A\n5\n)=1.\nIf business\n5 is bombed, the remaining connected components are\n{(1,2,3,4)}. This gives a damage of\ngcd(A\n1\n,A\n2\n,A\n3\n,A\n4\n)=2.\nClearly, bombing business\n3 gives the maximum possible damage, that being 29.",
        "466": "Mexy Array\nYou are given an array\nB containing\nN integers, each of which is either\n\u22121 or a non-negative integer. Construct any integer array\nA of length\nN such that:\n0\u2264A\ni\n\u226410\n9\nfor every\n1\u2264i\u2264N\nIf\nB\ni\n\u22650,\nA must satisfy\nmex(A\n1\n,A\n2\n,\u2026,A\ni\n)=B\ni\nOtherwise,\nB\ni\n=\u22121, which means there is no constraint on\nmex(A\n1\n,A\n2\n,\u2026,A\ni\n)\nIf there does not exist any array satisfying the constraints, print\n\u22121 instead.\nNote: The mex of a set of non-negative integers is the smallest non-negative integer that does not belong to it. For example,\nmex(1,2,3)=0,mex(0,2,4,1)=3, and\nmex(0,0,0)=1.\nInput Format\nThe first line of input contains an integer\nT, denoting the number of testcases. The description of\nT testcases follows.\nThe first line of each testcase contains a single integer\nN.\nThe second line of each testcase contains\nN space-separated integers\nB\n1\n,B\n2\n,\u2026,B\nN\n.\nOutput Format\nFor each testcase, output the required answer on a new line:\n\u22121 if no valid array exists, or\nN space-separated integers denoting the elements of any valid array\nA. The elements of\nA must satisfy\n0\u2264A\ni\n\u226410\n9\n.\nConstraints\n1\u2264T\u226410\n4\n1\u2264N\u226410\n5\n\u22121\u2264B\ni\n\u226410\n5\nThe sum of\nN across all testcases won't exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n2\n7\n0 -1 2 -1 5 -1 -1\n3\n2 -1 -1\n1 3 0 4 2 6 5\n-1\nExplanation:\nTest case\n1: We have\nA=[1,3,0,4,2,6,5]. Let\nC\ni\n=mex(A\n1\n,A\n2\n,\u2026,A\ni\n). Then, it can be seen that\nC=[0,0,2,2,5,5,7], which matches\nB at all positions where\nB\ni\n\u22650.\nTest case\n2: It can be shown that no array\nA exists that satisfies the given constraints.",
        "467": "Valid String\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nGiven a binary string\nS consisting of\n0\n\u2032\ns and\n1\n\u2032\ns, find whether there exists a rightwise circular rotation of the string such that every 2 adjacent\n1\n\u2032\ns are separated by at most\nC\n0\n\u2032\ns.\nNote: The last occurrence of\n1 in the rotated string won't have any\n1 next to it, i.e, first and the last ones in the string are not considered to be adjacent.\n###Input:\nFirst line will contain\nT, number of testcases. Then the testcases follow.\nEach testcase contains of two lines of input.\nFirst line contains two space separated integers\nN,C, length of the string and the upper limit on a number of\n0\n\u2032\ns between\n2 adjacent\n1\n\u2032\ns.\nSecond line contains the binary string\nS.\n###Output: For each testcase, output in a single line \"YES\" if there exists a rightwise circular rotation of string satisfying the criteria and \"NO\" if it doesn't exist.\nNote: The output is case-insensitive \u2015 each letter may be printed in upper case or lower case.\n###Constraints\n1\u2264N\u22645\u221710\n5\n0\u2264C\u2264max(0,N\u22122)\nSum of\nN over all tests is atmost\n10\n6\n.\nSample 1:\nInput\nOutput\n3\n4 1\n1100\n4 0\n0101\n6 1\n101001\nYES\nNO\nYES\nExplanation:\nCase 1: In the original configuration maximum number of\n0\n\u2032\ns between\n2 adjacent\n1\n\u2032\ns is\n0, therefore it satisfies the criteria.\nCase 2: The\n4 circular rotations of the string S = {\"0101\", \"1010\", \"0101\", \"1010\"}. In all the cases the maximum number of\n0\n\u2032\ns between\n2 consecutive\n1\n\u2032\ns is\n1 which doesn't satisfies the criteria.\nCase 3: The\n6 circular rotations of the string S = {\"101001\", \"110100\", \"011010\", \"001101\", \"100110\", \"010011\"} out of which\nsecond,\nthird and\nfourth strings satisfy the criteria.",
        "468": "Pyramid Traversal\nYou are given a pyramid of the following form with an infinite number of rows:\n1\n2 3\n4 5 6\n7 8 9 10\n...........\nFrom a cell, you can move to either the bottom-left cell or the bottom-right cell directly in contact with the current one (For example, you can make the following moves:\n1\u21922,1\u21923,6\u21929,6\u219210, while you cannot make moves\n2\u21926 or\n2\u21927).\nYou are given a starting cell\ns and an ending cell\ne. Starting at cell\ns, find the number of ways to reach cell\ne. This number can be large, so print the answer modulo\n10\n9\n+7.\nTwo ways are said to be different if there exists at least one cell which was visited in one of the ways but not the other one.\nInput Format\nThe first line of input contains a single integer\nT, the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains two space-separated integers\ns and\ne, denoting the starting and the ending cell respectively.\nOutput Format\nFor each test case, output a single line containing one integer: the number of ways to go from\ns to\ne modulo\n10\n9\n+7.\nConstraints\n1\u2264T\u22641000\n1\u2264s,e\u226410\n9\nSubtasks\nSubtask 1(100 points): Original constraints\nSample 1:\nInput\nOutput\n3\n2 7\n1 5\n5 3\n1\n2\n0\nExplanation:\nIn the first test case, there exists only\n1 way to move from\n2 to\n7, which is:\n2\u21924\u21927\nIn the second test case, there exist\n2 ways to move from\n1 to\n5, which are:\n1\u21922\u21925\n1\u21923\u21925\nIn the third test case, it is not possible to move from\n5 to\n3.",
        "469": "Chef and insomnia\nRead problems statements in Mandarin Chinese and Russian.\nChef sometimes suffers from insomnia. During sleepless nights, he often plays this game: He creates an array A of N integers and also decides one integer K. After that, he tries to count the number of non-empty contiguous subsequences (subsegments) of A, such that there are no bad pairs of integers in this subsegment. A pair (x, y) of integers is called bad if x is situated to the left of y in the array and x mod y = K. Finally, before going to sleep, Chef wrote down the answer on a sheet of paper. Sadly, he has forgotten it this morning and want your help regarding that.\nInput\nThe first line contains two integers - N and K.\nSecond line contains N integers - A1, A2 ... AN - separated by spaces, denoting the array A.\nOutput\nA single line containing an integer - the answer to the problem.\nConstraints\n1 \u2264 N, Ai \u2264 105\n0 \u2264 K \u2264 105\nSubtasks\nSubtask 1: N \u2264 100 (15 points)\nSubtask 2: N \u2264 1000 (15 points)\nSubtask 3: K = 0 (10 points)\nSubtask 4: Original constraints (60 points)\nSample 1:\nInput\nOutput\n3 2\n5 3 1\n4",
        "470": "Partition It\nChef has the\nN numbers\n1,2,3,\u2026,N. He wants to give exactly\nK of these numbers to his friend and keep the rest with him.\nHe can choose any\nK numbers such that the GCD of any number from Chef's set and any number from his friend's set is equal to\n1.\nFormally, suppose Chef gives the set of numbers\nA to his friend and keeps\nB with himself (where\n\u2223A\u2223=K and\n\u2223B\u2223=N\u2212K). Then\nA and\nB must satisfy\ngcd(a,b)=1  \u2200a\u2208A,b\u2208B\nChef needs your help in choosing these\nK numbers. Please find any valid set of\nK numbers that will satisfy the condition, or tell him that no such set exists.\nInput Format\nThe first line of input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains two space-separated integers\nN and\nK.\nOutput Format\nFor each test case first output a single line containing \"YES\" (without quotes) if a set of size\nK satisfying Chef's condition exists; and \"NO\" if no such set exists. This line is not case-sensitive so \"YeS\", \"nO\", etc. are also acceptable.\nNext, if the answer is \"YES\", print another line containing\nK distinct space-separated integers from\n1 to\nN denoting the numbers which Chef will give to his friend. The integers can be printed in any order.\nIf there are multiple solutions, you may print any of them.\nConstraints\n1\u2264T\u226410\n4\n2\u2264N\u226410\n5\n1\u2264K\u2264N\u22121\nSum of\nN over all test cases does not exceed\n5\u221710\n5\nSample 1:\nInput\nOutput\n3\n4 1\n4 2\n6 3\nYes\n3\nYes\n4 2\nNo\nExplanation:\nTest case\n1: Chef can give\n[3] to his friend and keep\n[1,2,4] for himself.\n3 is coprime with\n1,2 and\n4 so the condition is satisfied. Another possible solution is Chef giving\n[1] to his friend.\nTest case\n2: Chef can give\n[2,4] and keep\n[1,3] (or vice versa). It can be seen that\ngcd(2,1)=1,\ngcd(2,3)=1,\ngcd(4,1)=1,\ngcd(4,3)=1 and so the condition is satisfied.\nTest case\n3: There is no set of 3 numbers that can satisfy the given condition.",
        "471": "Is This JEE\nEveryone loves short problem statements.\nGiven a function\nf(x) find its minimum value over the range\n0<x<\u03c0\/2\nf(x)=(x\n2\n+b\u2217x+c)\/sin(x)\n###Input:\nFirst-line will contain\nT, the number of test cases. Then the test cases follow.\nEach test case contains a single line of input, two real numbers\nb,c.\n###Output: For each test case, output the minimum value of\nf(x) over the given range. Absolute error of\n10\n\u22126\nis allowed.\n###Constraints\n1\u2264T\u2264100000\n1\u2264b,c\u226420\n###Sample Input: 1 2 2\n###Sample Output: 5.8831725615",
        "472": "Circular Merging\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nN integers\nA\n1\n,A\n2\n,\u2026,A\nN\nare placed in a circle in such a way that for each valid\ni,\nA\ni\nand\nA\ni+1\nare adjacent, and\nA\n1\nand\nA\nN\nare also adjacent.\nWe want to repeat the following operation exactly\nN\u22121 times (until only one number remains):\nSelect two adjacent numbers. Let's denote them by\na and\nb.\nScore\na+b penalty points.\nErase both\na and\nb from the circle and insert\na+b in the space between them.\nWhat is the minimum number of penalty points we can score?\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN.\nThe second line contains\nN space-separated integers\na\n1\n,a\n2\n,\u2026,a\nN\n.\nOutput\nFor each test case, print a single line containing one integer \u2014 the minimum number of penalty points.\nConstraints\n1\u2264T\u226410\n2\u2264N\u2264400\n1\u2264a\ni\n\u226410\n9\nfor each valid\ni\nSubtasks\nSubtask #1 (10 points):\n2\u2264N\u226410\na\ni\n\u226410 for each valid\ni\nSubtask #2 (10 points):\n2\u2264N\u226425\na\n1\n,a\n2\n,\u2026,a\nN\nare distinct powers of\n2 (including\n1)\nSubtask #3 (10 points):\n2\u2264N\u2264100\nSubtask #4 (70 points): original constraints\nSample 1:\nInput\nOutput\n1\n3\n10 10 1\n32\nExplanation:\n[10,10,1]\u2192[10,11], penalty:\n11\n[10,11]\u2192[21], penalty:\n21\nTotal penalty:\n11+21=32",
        "473": "Mahesh and his lost array\nRead problems statements in Mandarin Chinese and Russian as well.\nMahesh got a beautiful array named A as a birthday gift from his beautiful girlfriend Namratha. There are N positive integers in that array. Mahesh loved the array so much that he started to spend a lot of time on it everyday. One day, he wrote down all possible subsets of the array. Then for each subset, he calculated the sum of elements in that subset and wrote it down on a paper. Unfortunately, Mahesh lost the beautiful array :(. He still has the paper on which he wrote all subset sums. Your task is to rebuild beautiful array A and help the couple stay happy :)\nInput\nThe first line of the input contains an integer T denoting the number of test cases. First line of each test case contains one integer N, the number of elements in A. Second line of each test case contains 2^N integers, the values written on paper\nOutput\nFor each test case, output one line with N space separated integers in non-decreasing order.\nConstraints\n1 \u2264 T \u2264 50\n1 \u2264 N \u2264 15\n0 \u2264 Values on paper \u2264 10^9\nAll input values are valid. A solution always exists\nExample\nInput\n2\n1\n0 10\n2\n0 1 1 2\nOutput\n10\n1 1\nExplanation\nTest case #2 For the array [1,1], possible subsets are {}, {1}, {1}, {1,1}, respective sums are 0, 1, 1, 2.",
        "474": "String Operations\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nTwo strings\nA and\nB are equivalent (denoted by\nA\u223cB) if they have the same lengths and\nA can be transformed into\nB by performing the following operation zero or more times: choose a substring of\nA which contains '1' an even number of times and reverse this substring.\nYou are given a binary string\nS. Find the number of different equivalence classes of the substrings of this string. In other words, find the smallest possible size of a set\nC of binary strings with the following property: for each non-empty string\nR which is a substring of\nS (including\nS itself), there is a string\nX\u2208C such that\nR\u223cX.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains a single string\nS with length\nN.\nOutput\nFor each test case, print a single line containing one integer \u2015 the number of equivalence classes among the substrings of the given string.\nConstraints\n1\u2264T\u226410\n1\u2264N\u22641,000\nS contains only characters '0' and '1'\nSubtasks\nSubtask #1 (10 points):\nN\u226410\nSubtask #2 (90 points): original constraints\nSample 1:\nInput\nOutput\n10\n00000\n10001\n10101\n01111\n11001\n01101\n10110\n10010\n10111\n11001\n5\n11\n8\n9\n12\n10\n10\n11\n11\n12",
        "475": "Yet Another Crossover Episode\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nYou are given an integer\nD. Find an integer sequence\nA\n1\n,A\n2\n,\u2026,A\nN\nsuch that the following conditions are satisfied:\n1\u2264N\u226410\n5\n1\u2264A\ni\n\u226410\n5\nfor each valid\ni\n\u2211\ni=1\nN\n\u2211\nj=i\nN\n(min(A\ni\n,A\ni+1\n,\u2026,A\nj\n)\u2212GCD(A\ni\n,A\ni+1\n,\u2026,A\nj\n))=D\nIt can be proved that a solution always exists under the given constraints.\nNote:\nGCD(B\n1\n,B\n2\n,\u2026,B\nM\n) is the greatest integer which divides all the integers\nB\n1\n,B\n2\n,\u2026,B\nM\n.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first and only line of each test case contains a single integer\nD.\nOutput\nFor each test case, print two lines. The first of these lines should contain a single integer\nN. The second line should contain\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n.\nIf there are multiple solutions, you may find any one of them.\nConstraints\n1\u2264T\u226410\n0\u2264D\u226410\n9\nExample Input\n4\n2\n5\n200\n13\nExample Output\n3\n3 3 2 \n5\n2 8 5 1 10 \n7\n12 10 15 11 19 13 15\n4\n5 4 4 10 ",
        "476": "Cute Chef Gift\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef wants to give a gift to Chefina to celebrate their anniversary. Of course, he has a sequence\na\n1\n,a\n2\n,\u2026,a\nN\nready for this occasion. Since the half-heart necklace is kind of cliche, he decided to cut his sequence into two pieces and give her a piece instead. Formally, he wants to choose an integer\nl (\n1\u2264l<N) and split the sequence into its prefix with length\nl and its suffix with length\nN\u2212l.\nChef wants his gift to be cute; he thinks that it will be cute if the product of the elements in Chefina's piece is coprime with the product of the elements in his piece. Can you tell him where to cut the sequence? Find the smallest valid\nl such that Chef's gift would be cute.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains the integer\nN.\nThe second line contains\nN space-separated integers\na\n1\n,a\n2\n,\u2026,a\nN\n.\nOutput\nFor each test case, print a single line containing one integer\nl where Chef should cut the sequence.\nIt is guaranteed that a solution exists for the given test data.\nConstraints\n1\u2264T\u226420\n2\u2264N\u226410\n5\n2\u2264a\ni\n\u226410\n5\nfor each valid\ni\nthe sum of\nN over all test cases does not exceed\n3\u22c510\n5\nSubtasks\nSubtask #1 (25 points):\nN\u2264200\nthe sum of\nN over all test cases does not exceed\n600\nSubtask #2 (40 points):\nN\u22642,000\nthe sum of\nN over all test cases does not exceed\n6,000\nSubtask #3 (35 points): original constraints\nSample 1:\nInput\nOutput\n1\n4\n2 3 4 5\n3",
        "477": "Existence Of X\nYou are given non-negative integers\nA,\nB and\nC.\nDoes there exist a non-negative integer\nX such that\nA\u2295X+B\u2295X=C\u2295X?\nAs a reminder,\n\u2295 denotes the bitwise XOR operation.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe only line of each test case contains three space-separated non-negative integers\nA,\nB and\nC.\nOutput Format\nFor each test case, print on a new line the answer: YES if valid\nX exists, and NO otherwise.\nEach character of the output may be printed in either uppercase or lowercase, i.e, the strings Yes, YES, yes, yEs` will all be treated as identical.\nConstraints\n1\u2264T\u226410\n5\n0\u2264A,B,C<2\n27\nSample 1:\nInput\nOutput\n5\n2 5 7\n2 3 13\n7 0 7\n2 7 6\n1 6 6\nYES\nNO\nYES\nYES\nYES\nExplanation:\nTest case\n1:\nX=0 satisfies the equation.\nTest case\n2: It can be proved that there does not exist a non-negative integer\nX which satisfies the equation.\nTest case\n3:\nX=0 satisfies the equation.\nTest case\n4:\nX=3 satisfies the equation.\nTest case\n5:\nX=1 satisfies the equation.",
        "478": "Distinct Values\nThe beauty value of an array is defined as the difference between the largest and second largest elements of the array. Note that the largest and second largest elements can have the same value in case of duplicates.\nFor example, beauty value of\n[2,5,3,1]=5\u22123=2 and beauty value of\n[7,6,7]=7\u22127=0\nYou are given an array\nA of length\nN. Your task is to find the total number of distinct beauty values among all subarrays of\nA having length greater than\n1.\nNote that, a subarray is obtained by deleting some (possibly zero) elements from the beginning and some (possibly zero) elements from the end of the array.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains a single integer\nN \u2014 the size of the array.\nThe second line contains\nN space-separated numbers -\nA\n1\n,A\n2\n,\u2026,A\nN\n, the elements of the array.\nOutput Format\nFor each test case, output a single line, the total number of distinct beauty among all subarrays of\nA having length greater than\n1.\nConstraints\n1\u2264T\u226410\n4\n2\u2264N\u22642\u22c510\n5\n1\u2264A\ni\n\u226410\n9\nSum of\nN over all test cases does not exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n4\n2\n1 1\n3\n4 2 1\n4\n8 1 7 2\n5\n6 9 4 2 1\n1\n2\n4\n4\nExplanation:\nTest case\n1: The only subarray is\n[1,1] whose beauty is\n0. Thus, there is only\n1 distinct value of beauty.\nTest case\n2: The subarrays are\n[4,2],[2,1], and\n[4,2,1] having beauty\n2,1, and\n2 respectively. There are\n2 distinct values of beauty.\nTest case\n3: The unique values of beauty are\n7,1,6, and\n5.\nTest case\n4: The unique values of beauty are\n3,5,2, and\n1.",
        "479": "Little Elephant and T-Shirts\nRead problems statements in Mandarin Chinese and Russian.\nLittle Elephant and his friends are going to a party. Each person has his own collection of T-Shirts. There are 100 different kind of T-Shirts. Each T-Shirt has a unique id between 1 and 100. No person has two T-Shirts of the same ID.\nThey want to know how many arrangements are there in which no two persons wear same T-Shirt. One arrangement is considered different from another arrangement if there is at least one person wearing a different kind of T-Shirt in another arrangement.\nInput\nFirst line of the input contains a single integer T denoting number of test cases. Then T test cases follow.\nFor each test case, first line contains an integer N, denoting the total number of persons. Each of the next N lines contains at least 1 and at most 100 space separated distinct integers, denoting the ID's of the T-Shirts ith person has.\nOutput\nFor each test case, print in single line the required number of ways modulo 1000000007 = 109+7.\nConstraints\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 10\nExample\nInput:\n2\n2\n3 5\n8 100\n3\n5 100 1\n2\n5 100\nOutput:\n4\n4\nExplanation\nFor the first case, 4 possible ways are (3,8), (3,100), (5,8) and (5,100).\nFor the second case, 4 possible ways are (5,2,100), (100,2,5), (1,2,100), and (1,2,5).",
        "480": "Chef and Ants\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef has been researching ant colonies for many years and finally discovered all their secrets.\nAn ant colony consists of\nN distinct lines (numbered\n1 through\nN) that pass through a point\nO, which is the queen's home. For each valid\ni, there are\nM\ni\nants on the\ni-th line.\nFor each valid\ni and\nj, the\nj-th ant on the\ni-th line initially has a non-zero coordinate\nX\ni,j\nwith the following meaning:\nThe distance of this ant from\nO is\n\u2223X\ni,j\n\u2223.\nLet's choose a direction along the\ni-th line from\nO. The exact way in which this direction is chosen does not matter here, it only needs to be the same for all ants on the same line.\nIf\nX\ni,j\nis positive, this ant is at the distance\n\u2223X\ni,j\n\u2223 from\nO in the chosen direction. Otherwise, it is at this distance from\nO in the opposite direction.\nIn other words, two ants\nj and\nk on a line\ni are at the same side of\nO if the signs of\nX\ni,j\nand\nX\ni,k\nare the same or on opposite sides if the signs are different.\nAll ants move with the same constant speed. Initially, all of them are moving towards\nO. Whenever two or more ants meet (possibly at\nO), all of these ants turn around and start moving in the opposite directions with the same speed. We call this a collision. Even if an ant reaches\nO without meeting an ant there, it keeps moving in the same direction. An ant may change direction multiple times.\nHelp Chef find the total number of collisions between ants. Note that even if more than two ants meet, it counts as only one collision.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN.\nN lines follow. For each valid\ni, the\ni-th of these lines contains an integer\nM\ni\n, followed by a space and\nM\ni\nspace-separated integers\nX\ni,1\n,X\ni,2\n,\u2026,X\ni,M\ni\n.\nOutput\nFor each test case, print a single line containing one integer \u2015 the number of collisions between ants.\nConstraints\n1\u2264T\u22641,000\n1\u2264N\u22642\u22c510\n5\n1\u2264M\ni\n\u22645\u22c510\n5\nfor each valid\ni\n1\u2264\u2223X\ni,j\n\u2223\u226410\n9\nfor each valid\ni,j\nX\ni,j\n<X\ni,j+1\nfor each valid\ni,j\nthe sum of\nN over all test cases does not exceed\n2\u22c510\n5\nthe sum of\nM\n1\n+M\n2\n+\u2026+M\nN\nover all test cases does not exceed\n10\n6\nSubtasks\nSubtask #1 (30 points):\nN=1\nSubtask #2 (70 points): original constraints\nSample 1:\nInput\nOutput\n1\n2\n2 -2 1\n1 2\n2\nExplanation:\nExample case 1: First, the ants on the first line collide at the coordinate\n\u22121\/2 and change directions. Finally, ant\n2 on the first line collides with the only ant on the second line; this happens at\nO. No collisions happen afterwards.",
        "481": "Make Them Alike\nYou are given a permutation\nP of length\nN, an array\nA of size\nN, and an integer\nM.\nInitially,\n0\u2264A\ni\n\u2264M. Consider an array\nA\n\u2032\nobtained from\nA by replacing all zeros in\nA with positive integers less than or equal to\nM.\nThe array\nA\n\u2032\nwill then be transformed as follows, in\nN steps:\nIn the\ni\nth\nstep, we set\nA\ni\n\u2032\n=A\nP\ni\n\u2032\n.\nThe initial array\nA\n\u2032\nis said to be beautiful, if, after the transformation of\nN steps, all elements of array\nA\n\u2032\nare equal.\nFind the number of such beautiful arrays\nA\n\u2032\nwhich can be formed by changing the zeros in array\nA to any value\n\u2264M. Since this number can be huge, print this number modulo\n10\n9\n+7.\nNote that a permutation of length\nN contains of all elements from\n1 to\nN exactly once.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains two space-separated integers\nN and\nM, the size of the array and the maximum value it can have.\nThe second line of each test case consists of\nN space-separated integers\nP\n1\n,P\n2\n,\u2026,P\nN\n, the permutation\nP.\nThe third line of each test case consists of\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n, the initial array\nA.\nOutput Format\nFor each test case, output on a new line, the number of such beautiful arrays\nA\n\u2032\nwhich can be formed by changing the zeros in array\nA to any value\n\u2264M.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u22642\u22c510\n5\n1\u2264M\u226410\n9\n0\u2264A\ni\n\u2264M\nThe sum of\nN over all test cases won't exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n4 3\n2 1 4 3\n0 2 0 2\n3 2\n3 1 2\n0 0 0\n8 54\n8 1 2 4 3 6 7 5\n0 0 0 0 0 0 0 0\n9\n8\n459165024\nExplanation:\nTest case\n1: The given permutation is\n[2,1,4,3]. One of the possible beautiful arrays is:\nA\n\u2032\n=[1,2,3,2]. This is obtained by replacing the first\n0 with\n1 and the second\n0 with\n3 in the array\nA.\nFor the transformation:\nIn the first step,\nA\n1\n\u2032\nis replaced with\nA\nP\n1\n\u2032\n=A\n2\n\u2032\n, that is\n2. The array becomes\n[2,2,3,2].\nIn the second step,\nA\n2\n\u2032\nis replaced with\nA\nP\n2\n\u2032\n=A\n1\n\u2032\n, that is\n2. The array becomes\n[2,2,3,2].\nIn the third step,\nA\n3\n\u2032\nis replaced with\nA\nP\n3\n\u2032\n=A\n4\n\u2032\n, that is\n2. The array becomes\n[2,2,2,2].\nIn the fourth step,\nA\n4\n\u2032\nis replaced with\nA\nP\n4\n\u2032\n=A\n3\n\u2032\n, that is\n2. The array becomes\n[2,2,2,2].\nThus, after the transformation, all elements of the array are equal. The other beautiful arrays for this test case are:\n[1,2,1,2],[1,2,2,2],[2,2,1,2],[2,2,2,2],[2,2,3,2],[3,2,1,2],[3,2,2,2],[3,2,3,2].\nThere are\n9 beautiful arrays in total.",
        "482": "Interesting Representation\nRead problem statements in Mandarin, Bengali, Russian, and Vietnamese as well.\nGiven a positive integer\nN, find two positive integers\nA and\nB, such that\nA\u2212B=N and the number of distinct prime factors of\nA and\nB are equal. If there exist multiple pairs of values of\nA and\nB satisfying the given conditions, you can output any one of them.\nInput Format\nFirst line will contain\nT, number of testcases. Then the testcases follow.\nEach testcase contains of a single line of input, integer\nN.\nOutput Format\nFor each testcase, output in a single line two space separated integers\nA and\nB. If there are multiple answers, you can output any one of them.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u226410\n16\n1\u2264A,B\u226410\n18\nSubtasks\nSubtask 1 (100 points): Original constraints\nSample 1:\nInput\nOutput\n3\n1\n8\n135\n3 2\n97 89\n1071 936",
        "483": "Maximize 1s\nYou are given a binary string\nS. You are allowed to perform the following operation at most once:\nPick some substring of\nS\nFlip all the values in this substring, i.e, convert\n0 to\n1 and vice versa\nFor example, if\nS=1\n00101\n011, you can pick the underlined substring and flip it to obtain\nS=1\n11010\n011.\nFor the substring of\nS consisting of all the positions from\nL to\nR, we define a function\nf(L,R) to be the number of\n1's in this substring. For example, if\nS=100101011, then\nf(2,5)=1 and\nf(4,9)=4 (the respective substrings are\n0010 and\n101011).\nIf you perform the given operation optimally, find the maximum possible value of\nL=1\n\u2211\nN\nR=L\n\u2211\nN\nf(L,R)\nthat can be obtained. Note that the substring flip operation can be performed at most once.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of single line of input, containing a binary string\nS.\nOutput Format\nFor each test case, output on a new line the maximum possible value of\n\u2211\nL=1\nN\n\u2211\nR=L\nN\nf(L,R) that can be obtained.\nConstraints\n1\u2264T\u226410\n5\n1\u2264\u2223S\u2223\u22643\u22c510\n5\nThe sum of\n\u2223S\u2223 over all test cases won't exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n111\n000\n00100\n10\n10\n26\nExplanation:\nTest case\n1: There is no need to apply the operation since everything is already a\n1. The answer is thus the sum of:\nf(1,1)=1\nf(1,2)=2\nf(1,3)=3\nf(2,2)=1\nf(2,3)=2\nf(3,3)=1\nwhich is\n10.\nTest case\n2: Flip the entire string to obtain\n111, whose answer has been computed above.\nTest case\n3: Flip the entire string to obtain\n11011. The sum of\nf(L,R) across all substrings is now\n26, which is the maximum possible.",
        "484": "Sum of Cube\nYou are given an array\nA consisting of\nN positive integers.\nFind\n\u2211\ni=1\nN\n\u2211\nj=i\nN\nF\n3\n(i,j), where\nF(i,j)=\u2211\nk=i\nj\nA\nk\n.\nSince the value might be quite large, print it modulo\n998244353.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains an integer\nN \u2014 the length of the array\nA.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\nrepresenting the array\nA.\nOutput Format\nFor each test case, output on a new line, the answer, modulo\n998244353.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u22645\u22c510\n5\n1\u2264A\ni\n\u226410\n6\nThe sum of\nN over all test cases won't exceed\n5\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n2\n1 1\n3\n1 2 1\n5\n8 5 6 2 3\n10\n128\n42621\nExplanation:\nTest case\n1:\nF(1,1)=1,F(1,2)=1+1=2,F(2,2)=1.\nThus,\n\u2211\ni=1\nN\n\u2211\nj=i\nN\nF\n3\n(i,j)=1\n3\n+2\n3\n+1\n3\n=10.\nTest case\n2:\nF(1,1)=1,F(1,2)=1+2=3,F(1,3)=1+2+1=4,F(2,2)=2,F(2,3)=2+1=3,F(3,3)=1.\nThus,\n\u2211\ni=1\nN\n\u2211\nj=i\nN\nF\n3\n(i,j)=1\n3\n+3\n3\n+4\n3\n+2\n3\n+3\n3\n+1\n3\n=128.",
        "485": "Maximum K Sums\nRead problems statements in Mandarin Chinese , Russian and Vietnamese as well.\nChef likes arrays a lot. Today, he found an array A consisting of N positive integers.\nLet L denote the sorted (in non-increasing order) list of size N*(N+1)\/2 containing the sums of all possible contiguous subarrays of A. Chef is interested in finding the first K elements from the list L. Can you help him in accomplishing this task?\nInput\nThere is only a single test case per input file.\nThe first line of input contains two space separated integer numbers N and K denoting the size of the array and the number of the maximal sums you need to find.\nThe following line contains N space separated integer numbers denoting the array A.\nOutput\nOutput K space separated integers where the ith integer denotes the ith element of L.\nConstraints\n1 \u2264 N \u2264 105\n1 \u2264 K \u2264 min(N*(N+1)\/2, 105)\n1 \u2264 Ai \u2264 109\nSubtasks\nSubtask 1 (47 pts) : 1 \u2264 N \u2264 1000, 1 \u2264 K \u2264 min{N*(N+1)\/2, 105}\nSubtask 2 (53 pts) : 1 \u2264 N \u2264 105, 1 \u2264 K \u2264 min{N*(N+1)\/2, 105}\nExample\nInput 1\n3 4\n1 3 4\nOutput 1\n8 7 4 4\nInput 2\n3 3\n10 2 7\nOutput 2\n19 12 10\nExplanation\nTest 1:\nThe first 4 elements of it are [8, 7, 4, 4].",
        "486": "ABC-Strings\nRead problems statements in Mandarin Chinese and Russian as well.\nMike likes strings. He is also interested in algorithms. A few days ago he discovered for himself a very nice problem:\nYou are given an AB-string S. You need to count the number of substrings of S, which have an equal number of 'A'-s and 'B'-s.\nDo you know how to solve it? Good. Mike will make the problem a little bit more difficult for you.\nYou are given an ABC-string S. You need to count the number of substrings of S, which have an equal number of 'A'-s, 'B'-s and 'C'-s.\nA string is called AB-string if it doesn't contain any symbols except 'A' or 'B'. A string is called ABC-string if it doesn't contain any symbols except 'A', 'B' or 'C'.\nInput\nThe first line of the input contains an ABC-string S.\nOutput\nYour output should contain the only integer, denoting the number of substrings of S, which have an equal number of 'A'-s, 'B'-s and 'C'-s.\nThe answer can go above a 32-bit integer. Please, use 64-bit integers for storing and processing data.\nConstraints\n1 \u2264 |S| \u2264 1 000 000; where |S| denotes the length of the given ABC-string.\nExample\nInput:\nABACABA\nOutput:\n2\nExplanation\nIn the example you should count S[2..4] = \"BAC\" and S[4..6] = \"CAB\".",
        "487": "Saving a gift of love\nRead problems statements in Mandarin Chinese and Russian.\nSuraj, the Chief Prankster is back in action now and this time he has stolen the valentine's day gift given by Ashi (the love of Chef) to the Chef and ran away with it to Byteland.\nByteland is a not a regular place like Chef's town. The safest way from Chef's town to Byteland is through the path of tasty dishes. The path is named so because there are magical tasty dishes which appear to the traveler that no one can resist eating. Also, Suraj has added a strong sleep potion to each of the dish on this path to stop anyone from following him.\nKnowing the devilish nature of Suraj, Ashi is concerned about the Chef and has asked all of Chef's town people to help. The distance from Chef's town to Byteland through the the path of tasty dishes is X units. They have the location where the magic dishes are and how many people are required to eat it completely. Anyone who eats a dish would go to a long sleep and won't be able to continue. They have the information about the tribal clans that live along the the path of tasty dishes who can be of real help in this journey.\nThe journey Chef and his friends can be described as follows: There is a total of B dishes on the path of tasty dishes. Each dish is located at some distance from Chef's town denoted by xi for the ith dish ( xi-1 < xi). To minimize the number of friends Chef has to leave behind, all of them have decided that exactly yi of them will eat the ith dish, which is the required number of people needed to finish it completely. Also, there are a total of C tribal chef clans, each with their own population and location on the path that Chef and his friends will meet on their way to Byteland. They know that for some clan (say i), they are located at a distance of pi ( pi-1 < pi) from Chef's town with a population of ri. And if a group of at least qi men approaches them, they would be able to convince them to join their forces against Suraj.\nGiven the information about all this, help the Chef to find out the minimum size of the group (including him and his friends) he should start with to reach Byteland and get back Ashi's gift from Suraj.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. Each test case contains three lines which are as follows:\nFirst line of each test case contains X, the distance of Byteland from Chef's town.\nNext line contains an integer B, the number of dishes on the path of tasty dishes. Then follows B pairs of space separated integers of the form xi yi, where xi yi are as defined above for the ith dish. Next line contains an integer C, followed C space separated triplets of integers pi qi ri as defined above.\nOutput\nFor each test case, print the minimum size of the group (including Chef) that is needed to reach Byteland.\nConstraints\n1 \u2264 T \u2264 10\n1 \u2264 X \u2264 109\n1 \u2264 B \u2264 10000\nConstraints on C\nSubproblem 1 (25 points): C = 0\nSubproblem 2 (75 points): 1 \u2264 C \u2264 10000\n1 \u2264 xi < X, xi < xi+1\n1 \u2264 pi < X, pi < pi+1\n1 \u2264 yi \u2264 1014\n1 \u2264 qi \u2264 1014\n1 \u2264 ri \u2264 1014\nAll the positions, of the tasty dishes and tribal clans are distinct.\nSample 1:\nInput\nOutput\n3\n10\n2 1 3 8 1\n0\n10\n2 1 3 8 5\n0\n10\n2 2 3 8 5\n3 1 2 1 4 3 2 9 1 1\n5\n9\n6\nExplanation:\nExample case 1. In the first case, there are no tribal clans, and two dishes, one which needs to be eaten by 3 chefs on their way and one to be eaten by 1 chef. Hence, we have to start with atleast 5 people in total to pass the path of tasty dishes.\nExample case 2. Similar as Example Case 1.\nExample case 3. In this case, if we start with 5 Chefs. At point 1, we have more than or equal to 2 chefs, hence the tribal clan of size 1 adds to the Chef's party and now they have size of 6. At position 2, three of them would be left behind eating a dish, leaving 3 of them to go ahead. At position 4, since the size is exactly 3, the tribal clan joins the chef's party making it of size 5. At position 8, all 5 of them will stop to eat the dish and none would go ahead. Similarly, if we start with 6, one of them would be able to pass position 8 and reach position 9, where it will also add one of the tribal clans to its party and reach Byteland.",
        "488": "Longest Subarray\nYou are given an array\nA of length\nN.\nFind the maximum length of any subarray of\nA, such that, the bitwise OR of all the elements of the subarray is equal to the bitwise OR of the remaining elements of the array.\nReport\n\u22121 if no such subarray exists.\nNote:\nA subarray is formed by deleting some (possibly zero) elements from the beginning of the array and some (possibly zero) elements from the end of the array.\nThe bitwise OR of an empty array is considered to be\n0.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains an integer\nN \u2014 the length of the array\nA.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\nrepresenting the array\nA.\nOutput Format\nFor each test case, output on a new line, the length of longest subarray such that the bitwise OR of all elements of the subarray is equal to the bitwise OR of the remaining elements of the array, or output\n\u22121 if no such subarray exists.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u22645\u22c510\n5\n1\u2264A\ni\n<2\n30\nThe sum of\nN over all test cases won't exceed\n5\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n3\n1 2 4\n3\n1 3 2\n4\n2 3 4 7\n-1\n1\n3\nExplanation:\nTest case\n1: For no subarray of\nA, the bitwise OR of the elements of the subarray equals the bitwise OR of the remaining elements.\nTest case\n2: Consider the subarray\n[3] having length\n1. The bitwise OR of the subarray is\n3 and the bitwise OR of the remaining elements of the array is\n1\u22232=3. Thus, the bitwise OR of all elements of the subarray is equal to the bitwise OR of the remaining elements of the array.\nTest case\n3: Consider the subarray\n[2,3,4] having length\n3. The bitwise OR of the subarray is\n2\u22233\u22234=7 and the bitwise OR of the remaining elements of the array is\n7. Thus, the bitwise OR of all elements of the subarray is equal to the bitwise OR of the remaining elements of the array.",
        "489": "Chroma Swap\nYou have two arrays\nA=A\n1\n,A\n2\n,\u2026,A\nN\nand\nB=B\n1\n,B\n2\n,\u2026,B\nN\n. Each of these elements also has a color associated with them, which is an integer. This is denoted by the arrays\nColorA\n1\n,ColorA\n2\n,\u2026,ColorA\nN\n, and\nColorB\n1\n,ColorB\n2\n,\u2026,ColorB\nN\n.\nIn a single operation, you can swap any element of array\nA with any element of array\nB, if they have the same color.\nYour goal is to do as many operations as you want, and eventually have the elements in array\nA be in non-decreasing order. That is, after you are done with the operations, you want\nA\n1\n\u2264A\n2\n\u2264\u2026\u2264A\nN\n.\nOutput \"Yes\" if this is possible to do so, and \"No\" otherwise.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of five lines of input.\nThe first line of each test case contains a single integer\nN, denoting the size of the arrays.\nThe next line has\nN integers:\nA\n1\n,A\n2\n,\u2026,A\nN\nThe next line has\nN integers:\nColorA\n1\n,ColorA\n2\n,\u2026,ColorA\nN\nThe next line has\nN integers:\nB\n1\n,B\n2\n,\u2026,B\nN\nThe next line has\nN integers:\nColorB\n1\n,ColorB\n2\n,\u2026,ColorB\nN\nOutput Format\nFor each testcase, in a new line, output \"Yes\" if it is possible to end up with the array\nA having elements in non-decreasing order. Else, print \"No\".\nYou may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n5\n1\u2264A\ni\n,B\ni\n\u226410\n9\n0\u2264ColorA\ni\n,ColorB\ni\n\u22642N\nThe sum of\nN over all test cases won't exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n2 \n3 2\n1 2 \n1 2 \n1 1\n1\n13\n1\n23\n1\n2\n2 1 \n2 1 \n2 1\n2 1\nYes\nYes\nNo\nExplanation:\nTestcase 1: The given arrays are:\nA=[3,2]\nColorA=[1,2]\nB=[1,2]\nColorB=[1,1]\nA\n1\nand\nB\n1\nhave the same color (\n1). So, we can swap them, and now we have the arrays as:\nA=[1,2]\nB=[3,2]\nNow, array\nA is sorted in non-decreasing order. So, it is possible to achieve this, and hence the answer is \"Yes\".\nTestcase 2: The given arrays are:\nA=[13]\nColorA=[1]\nB=[23]\nColorB=[1]\nWe see that the array\nA is already sorted. Hence, the answer is \"Yes\".\nTestcase 3: The given arrays are:\nA=[2,1]\nColorA=[2,1]\nB=[2,1]\nColorB=[2,1]\nWe see that no matter how many operations we do, the two arrays will remain the same, and\nA can never be sorted. Hence the answer is \"No\".",
        "490": "Search for 404\nOm has a string\nS consisting of characters\n\u2217,\n4, and\n0 only.\nThe character\n\u2217 can be replaced by either\n4 or\n0.\nOm wants to count the total number of subsequences of\n404 present in all the possible strings generated after replacing\n\u2217.\nAs the number can be huge, you must output the number modulo\n10\n9\n+7.\nFor example, if the given string is\nS=\n4\u22174\u2217, the possible strings after replacing\n\u2217 are:\n4040: Only one subsequence of\n404 is present, that is\nS\n1\nS\n2\nS\n3\n.\n4044: Two subsequences of\n404 are present, that are\nS\n1\nS\n2\nS\n3\nand\nS\n1\nS\n2\nS\n4\n.\n4440: No subsequence of\n404 is present.\n4444: No subsequence of\n404 is present.\nThus, total number of\n404 subsequences present in all possible generated strings is\n3.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains an integer\nN \u2014 size of the given string.\nThe second line has a string\nS of size\nN.\nOutput Format\nFor each test case, output the total number of subsequences of\n404 present in all the possible strings generated after replacing\n\u2217.\nAs the number can be huge, you must output the number modulo\n10\n9\n+7.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n5\nS consists of\n\u2217,4, and\n0 only.\nThe sum of\nN over all test cases won't exceed\n10\n6\n.\nSample 1:\nInput\nOutput\n2\n4\n4*04\n4\n4*4*\n4\n3\nExplanation:\nTest case\n1: All possible generated strings of\n4\u221704 are:\n4004: Two subsequences of\n404 are present, that are\nS\n1\nS\n2\nS\n4\nand\nS\n1\nS\n3\nS\n4\n.\n4404: Two subsequences of\n404 are present, that are\nS\n1\nS\n3\nS\n4\nand\nS\n2\nS\n3\nS\n4\n.\nThus, the total number of\n404 subsequences present in all possible generated strings is\n4.\nTest case\n2: Already explained in problem statement.",
        "491": "Alternating Diameter\nChef stumbled upon\nB black nodes and\nW white nodes and now wants to construct a tree using them.\nChef is bamboozled by the total number of trees that can be constructed using these nodes. To reduce this count, Chef considered only those trees which have at least one diameter that has alternating colors i.e. a black node is followed by a white node and a white node is followed by a black node.\nHelp Chef in finding out the tree with the minimum possible diameter among all the trees that satisfies the above condition. If no tree satisfies the above conditions, print\n\u22121. If multiple trees satisfies the above condition, print any.\nInput Format\nThe first line contains a single integer\nT - the number of test cases. Then the test cases follow.\nThe first and only line of each test case contains two space separated integers\nB,W representing the number of black and white nodes respectively.\nOutput Format\nIf a tree can be constructed that fulfils all the requirements then\nIn the first line, output a string of length\nB+W in which the\ni\nth\ncharacter (1-based indexing) is either W or B denoting the colour of the\ni\nth\nnode as black or white respectively.\nIn the following\nB+W\u22121 lines, output two integers\nU and\nV denoting an edge between\nU\nth\nand\nV\nth\nnode.\nIf no tree fulfils the requirements print -1 in a single line.\nConstraints\n1\u2264T\u2264100\n0\u2264B,W\u22641000\n1\u2264B+W\u22641000\nSample 1:\nInput\nOutput\n3\n1 1\n0 2\n1 2\nWB\n2 1\n-1\nWBW\n1 2\n2 3\nExplanation:\nTest case\n1: The tree has only one path between the nodes\n1 and\n2 which is the diameter and also alternating in color. The checker will handle multiple possible answers so you can also swap the colors of the node to achieve the same result.\nTest case\n2: There is only one tree possible and its diameter would consist of all white nodes only. Therefore there is no tree which satisfies the given conditions.",
        "492": "Spooky Sequences\n\u201cI am not a witch. I\u2019m your wife.\u201d\n- Valerie, The Princess Bride\nOnce upon a time, in a distant land, a mischievous witch spied on a group of people who were enjoying their time together.\nEnveloped by a dark desire, she resolved to put an end to their merry gatherings and kill all\nN people.\nThere are\nN people, and the witch knows that the\ni-th of them has a strength of\nA\ni\n.\nThe witch also knows of\nM friendships, each between two people. Friendship is transitive, that is, if\nX and\nY are friends and\nY and\nZ are friends, then\nX and\nZ are also friends.\nThe witch wants to kill all these people in a particular sequence known as a spooky sequence.\nA sequence\nS is called a spooky sequence if it satisfies the following properties:\nS contains\nN distinct integers, each between\n1 and\nN.\nThat is,\nS is a linear order of the\nN people.\nFor any\n1\u2264i<j\u2264N, if\nS\ni\nand\nS\nj\nare friends, then\nA\nS\ni\n\u2264A\nS\nj\nshould hold.\nThat is, for any two friends, one with strictly higher strength cannot appear earlier in the sequence than the other.\nFind the total number of spooky sequences. The answer can be large, so print it modulo\n10\n9\n+7.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains two space-separated integers\nN and\nM \u2014 the number of people and number of friendships, respectively.\nThe next\nM lines describe the friendships. The\ni-th of these\nM lines contains two space-separated integers\nu\ni\nand\nv\ni\n, denoting a friendship between\nu\ni\nand\nv\ni\n.\nThe last line contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n\u2014 the strengths of the people.\nOutput Format\nFor each test case, output on a new line the number of spooky sequences, modulo\n10\n9\n+7.\nConstraints\n1\u2264T\u22642\u22c510\n4\n1\u2264N\u22642\u22c510\n5\n0\u2264M\u2264min(2\u22c510\n5\n,N\u22c5(N\u22121)\/2)\n1\u2264u\ni\n,v\ni\n\u2264N\nu\ni\n\ue020\n=v\ni\nfor each\n1\u2264i\u2264M.\nEach unordered pair\n(u\ni\n,v\ni\n) appears at most once in a testcase.\n1\u2264A\ni\n\u226410\n9\nThe sum of\nN over all test cases won't exceed\n2\u22c510\n5\n.\nThe sum of\nM over all test cases won't exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n2\n5 5\n1 2\n2 3\n3 4\n4 2\n3 1\n10 12 15 20 15\n5 2\n2 3\n4 5\n6 4 4 3 1\n5\n60\nExplanation:\nTest case\n1: Each pair among\n{1,2,3,4} are friends, while\n5 is not friends with anyone else. Taking into account the strength condition for the group of\n4, there are five spooky sequences:\n[5,1,2,3,4]\n[1,5,2,3,4]\n[1,2,5,3,4]\n[1,2,3,5,4]\n[1,2,3,4,5]\nTest case\n2:\n2 and\n3 are friends,\n4 and\n5 are friends, and\n1 is not a friend of anyone else.\nSo, in any ordering:\nA\n2\n=A\n3\n, so the order of\n2 and\n3 doesn't matter (even though they are friends).\n4 should appear after\n5, since\nA\n4\n>A\n5\n.\nThere are no further constraints.\nIt can be verified that there are\n60 sequences satisfying this.",
        "493": "XOR Sums\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nYou are given a sequence of positive integers\nA\n1\n,A\n2\n,\u2026,A\nN\n. You should answer\nQ queries. In each query:\nYou are given a positive integer\nM.\nConsider all non-empty subsequences of\nA with length\n\u2264M. Recall that a subsequence is any sequence that can be created by deleting zero or more elements without changing the order of the remaining elements.\nFor each of these subsequences, compute the bitwise XOR of its elements. Your task is to determine the sum of these values. Since this sum can be very large, compute it modulo\n998,244,353.\nInput\nThe first line of the input contains a single integer\nN.\nThe second line contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n.\nThe third line contains a single integer\nQ.\nQ lines follow. Each of these lines contains a single integer\nM describing a query.\nOutput\nFor each query, print a single line containing one integer \u2015 the sum of bitwise XORs for all subsequences of\nA with length\n\u2264M, modulo\n998,244,353.\nConstraints\n1\u2264N,Q\u22642\u22c510\n5\n1\u2264A\ni\n<2\n30\nfor each valid\ni\n1\u2264M\u2264N\nSubtask\nSubtask #1 (10 points):\n1\u2264N,Q\u22641,000\nSubtask #2 (90 points): original constraints\nSample 1:\nInput\nOutput\n4\n1 3 5 2\n2\n1\n2\n11\n34\nExplanation:\nIn the first query, the answer is just the sum of elements of\nA (modulo\n998,244,353), which is\n1+3+5+2=11.\nIn the second query, the answer is the sum of bitwise XORs for all subsequences with length\n1 or\n2, which is\n1+3+5+2+(1\u22953)+(1\u22955)+(1\u22952)+(3\u22955)+(3\u22952)+(5\u22952)=34.",
        "494": "K-Subarrays\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nYou are given two integers\nN and\nK, and an array\nA of\nN integers. You have to choose\nK disjoint non-empty subarrays such that the score is maximized.\nThe score is calculated as follows:\nScore=\ni=1\n\u2211\nK\nSum[i]\u22c5i,\nwhere\nSum[i] denotes sum of elements of\ni-th subarray. By the\ni-th subarray, we mean the\ni-th one in the order from left to right.\nFind the maximum score that can be achieved.\nNote: The subarrays are not required to cover the whole array. It is allowed for some elements of\nA to belong to none of the subarrays.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains two space-separated integers\nN and\nK.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n.\nOutput\nFor each test case, print a single line containing one integer \u2015 the maximum score.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u226410\n5\n1\u2264K\u2264min(100,N)\n\u221210\n6\n\u2264A\ni\n\u226410\n6\nThe sum of\nN over all test cases does not exceed\n10\n5\nSubtasks\nSubtask #1 (15 points):\nK=1\nSubtask #2 (35 points):\nK=2\nSubtask #3 (50 points): Original constraints\nSample 1:\nInput\nOutput\n2\n5 2\n1 2 -1 3 1\n5 2\n-1 2 11 -23 12\n11\n37\nExplanation:\nTest Case 1: One way to choose\n2 disjoint non-empty subarrays is:\nS\n1\n=[1,2] and\nS\n2\n=[3,1]\nThe score is\n3\u22c51+4\u22c52=11, which is the maximum possible.\nTest Case 2: One way to choose\n2 disjoint non-empty subarrays is:\nS\n1\n=[2,11] and\nS\n2\n=[12]\nThe score is\n13\u22c51+12\u22c52=37, which is the maximum possible.",
        "495": "Chefs Favourite Function\nChef's new friend hErd gave him two functions\nf and\ng.\nThe function\nf is defined over\nx\n(x\u22651) as:\nf(x)=\n\u23a9\n\u23a8\n\u23a7\n0,\nf(\n2\nx\n)+1,\nf(\u230a\n2\nx\n\u230b),\nif x=1\nif x is even\nif x is odd\nThe function\ng is defined over\nx\n(x\u22651) as:\ng(x)=\n\u23a9\n\u23a8\n\u23a7\n1,\n2\u22c5g(\n2\nx\n)+1,\n2\u22c5g(\u230a\n2\nx\n\u230b),\nif x=1\nif x is even\nif x is odd\nwhere\n\u230az\u230b, denotes the greatest integer less than or equal to\nz.\nHe also gave Chef two integers\nL and\nR. Chef has to find the maximum value of\nf(x)+g(x) for\nL\u2264x\u2264R.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nThe only line of each test case contains two space-separated integers\nL and\nR, as mentioned in the statement.\nOutput Format\nFor each test case, output on a new line the maximum value of\nf(x)+g(x) for\nL\u2264x\u2264R.\nConstraints\n1\u2264T\u226410\n5\n1\u2264L\u2264R\u226410\n9\nSample 1:\nInput\nOutput\n3\n1 1\n1 2\n1 20\n1\n4\n35\nExplanation:\nTest case\n1:\nf(1)=0 and\ng(1)=1. Hence,\nf(x)+g(x)=1.\nTest case\n2: There are\n2 possible values of\nx.\nx=1:\nf(1)+g(1)=1\nx=2:\nf(2)+g(2)=(f(1)+1)+(2\u22c5g(1)+1)=1+3=4.\nHence the maximum value of\nf(x)+g(x)=4.",
        "496": "Merging Binary Strings\nYou have two binary strings\nA and\nB, both of length\nN. You have to merge both the binary strings to form a new binary string\nC of length\n2\u22c5N. The relative order of characters in the original binary strings\nA and\nB should not change in the binary string\nC.\nFor example, if\nA=01011 and\nB=10100, one possible way to merge them to form\nC is:\nC=0101101100.\nMinimize the number of inversions in the merged binary string\nC.\nAs a reminder, a pair of indices\n(i,j) is an inversion for binary string\nC if and only if\n1\u2264i<j\u2264\u2223C\u2223,\nC\ni\n=1 and\nC\nj\n=0.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains a single integer\nN \u2014 the length of the binary strings\nA and\nB.\nThe second line of each test case contains the binary string\nA.\nThe third line of each test case contains the binary string\nB.\nOutput Format\nFor each test case, output a single line containing the minimum number of inversions in the merged binary string\nC.\nConstraints\n1\u2264T\u22641000\n1\u2264N\u22641000\nIt is guaranteed that the sum of\nN over all test cases does not exceed\n2000.\n\u2223A\u2223=\u2223B\u2223=N\nA and\nB are binary strings, i.e, contain only\n0 and\n1.\nSample 1:\nInput\nOutput\n3\n4\n1010\n0101\n5\n10010\n11001\n5\n00001\n11110\n6\n12\n4\nExplanation:\nTest Case\n1:\nA=1010 and\nB=0101. One optimal\nC is\n01010101. The\n6 inversions in this\nC are\n{(2,3),(2,5),(2,7),(4,5),(4,7),(6,7)}.\nTest Case\n2:\nA=10010 and\nB=11001. One optimal\nC is\n1001100101.\nTest Case\n3:\nA=00001 and\nB=11110. One optimal\nC is\n0000111101.",
        "497": "Red Green Grids\nThere is an empty grid (all cells are colored white) of\nN rows and\nM columns.\nChef can fill each cell with either RED or GREEN color.\nChef defines a valid path as a path of cells starting from\n(1,1) and ending at\n(N,M), where, Chef moves either right or down by\n1 cell each time.\nFor a particular grid, Chef defines the score of the grid as the number of valid paths containing equal number of RED and GREEN cells.\nFind the sum of scores of all possible colored grids containing\nN rows and\nM columns.\nSince the answer can be large, output it modulo\n998244353.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two integers\nN and\nM - denoting the dimensions of the grid.\nOutput Format\nFor each test case, output the sum of scores of all possible colored grids containing\nN rows and\nM columns, modulo\n998244353.\nConstraints\n1\u2264T\u22641000\n1\u2264N,M\u22641000\nSample 1:\nInput\nOutput\n3\n1 1\n1 2\n2 3\n0\n2\n72\nExplanation:\nTest case\n1: There are\n2 possible coloured grids of size\n1\u00d71. In the first grid, the one and only cell is colored RED. In the second grid, the one and only cell is colored GREEN. Neither of the grids have a valid path with equal number of red and green cells. Thus, score of each grid is\n0.\nTest case\n2: There are\n4 possible coloured grids of the given dimension:\nFor grids\n1 and\n4, the scores are\n0 as there are no valid paths with equal red and green cells. Grids\n2 and\n3 have score\n1 each. The valid path with equal red and green cells is\n(1,1)\u2192(1,2) in both the grids.\nThus, the sum of scores of all possible coloured grids is\n2.",
        "498": "Palindrome In Making\nJJ has an array\nA of length\nN. He can perform the following operation on\nA:\nSelect any\nL,\nR (\n1\u2264L\u2264R\u2264N) and for each\ni such that\nL\u2264i\u2264R, set\nA\ni\n:=A\ni\n+1.\nJJ wants to make\nA palindromic. Find the minimum number of moves to do so.\nNote: An array is called a palindrome if it reads the same backwards and forwards, for e.g.\n[1,3,3,1] and\n[6,2,6] are palindromic.\nInput Format\nThe first line contains a single integer\nT \u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains an integer\nN \u2014 the size of the array\nA.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\ndenoting the array\nA.\nOutput Format\nFor each test case, output the minimum number of moves to make\nA palindromic.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u226410\n5\n1\u2264A\ni\n\u226410\n9\nSum of\nN over all test cases does not exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n6\n2 6 4 3 4 1\n2\n1 10\n3\n1 10 1\n2\n9\n0\nExplanation:\nTest Case 1: We can perform the following operations:\n[2,6,\n4,3,4,1\n]\nL=3,R=6\n[2,6,5,4,5,2]\n[2,6,5,\n4,5\n,2]\nL=4,R=5\n[2,6,5,5,6,2]\nTest Case 2: We perform the operation on\n(L=1,R=1)\n9 times after which array becomes\n[10,10].\nTest Case 3:\nA is already a palindrome.",
        "499": "Make that Array!\nChef is given two arrays\nA and\nB, each having\nN elements.\nIn one move, Chef can choose an index\ni\n(1\u2264i\u2264N\u22121), get\n(A\ni\n\u2212A\ni+1\n) points, and then swap\nA\ni\nand\nA\ni+1\n.\nFor example: If Chef has the array -\n[10,7,5] and Chef chooses index\n1 during his move, he will get\n10\u22127=3 points and the new array will become\n[7,10,5]\nCan you help Chef in finding the maximum number of points he can get while converting the array\nA into array\nB?\nNote: It is guaranteed in the input that there exists a sequence of moves which can convert array\nA into\nB.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of testcases. The description of the\nT testcases follows.\nThe first line of each test case contains a single integer\nN denoting the number of elements in\nA and\nB.\nThe second line of each test case contains\nN space separated integers\nA\n1\n,A\n2\n,...,A\nN\n.\nThe third line of each test case contains\nN space separated integers\nB\n1\n,B\n2\n,...,B\nN\n.\nOutput Format\nFor each test case, print a single line containing one integer, which is the maximum number of points that Chef can get while converting the array\nA into array\nB\nConstraints\n1\u2264T\u22645\u22c510\n4\n2\u2264N\u22645\u22c510\n5\n1\u2264A\ni\n\u226410\n5\n1\u2264B\ni\n\u226410\n5\nThe sum of\nN over all test cases does not exceed\n5\u22c510\n5\nSample 1:\nInput\nOutput\n3\n2\n1 2\n2 1\n3\n3 2 1\n1 2 3\n3\n1 2 3\n1 2 3\n-1\n4\n0\nExplanation:\nTest Case\n1: Chef can choose\ni=1 in the first move, get\n1\u22122=\u22121 points and swap\nA\n1\nand\nA\n2\n. After this move,\nA is converted into\nB. We can prove that there exists no other sequence of moves which can result in higher score while converting\nA into\nB.\nTest Case\n2: One possible sequence of moves is the following:\nChoose\ni=2. Total points\n=1, and\nA will become\n[3,1,2].\nChoose\ni=1. Total points\n=1+2, and\nA will become\n[1,3,2].\nChoose\ni=2. Total points\n=1+2+1, and\nA will become\n[1,2,3].\nThere are other possible sequences of moves which can result in total\n4 points, but no such sequence exists which can result in more than\n4 points, and simultaneously convert\nA into\nB.",
        "500": "Ancient Berland Roads\nRead problems statements in Mandarin Chinese , Russian and Vietnamese as well.\nIn Ancient Berland, there were N towns, along with M bidirectional roads connecting them. With time, some roads became unusable, and nobody repaired them.\nAs a person who is fond of Ancient Berland history, you now want to undertake a small research study. For this purpose, you want to write a program capable of processing the following kinds of queries:\nD K : meaning that the road numbered K in the input became unusable. The road numbers are 1-indexed.\nP A x : meaning that the population of the Ath town became x.\nLet's call a subset of towns a region if it is possible to get from each town in the subset to every other town in the subset by the usable (those, which haven't already been destroyed) roads, possibly, via some intermediary cities of this subset. The population of the region is, then, the sum of populations of all the towns in the region.\nYou are given the initial road system, the initial population in each town and Q queries, each being one of two types above. Your task is to maintain the size of the most populated region after each query.\nInput\nThe first line of each test case contains three space-separated integers \u2014 N, M, and Q \u2014 denoting the number of cities, the number of roads, and the number of queries, respectively.\nThe following line contains N space-separated integers, the ith of which denotes the initial population of the ith city.\nThe jth of the following M lines contains a pair of space-separated integers \u2014 Xj, Yj \u2014 denoting that there is a bidirectional road connecting the cities numbered Xj and Yj.\nEach of the following Q lines describes a query in one of the forms described earlier.\nOutput\nOutput Q lines. On the ith line, output the size of the most populated region after performing i queries.\nConstraints\n1 \u2264 Xj, Yj \u2264 N\nRoads' numbers are 1-indexed.\nThere is no road that gets removed twice or more.\n1 \u2264 Pi \u2264 105\nSubtask 1 (30 points) : 1 \u2264 N, M, Q \u2264 103\nSubtask 2 (70 points) : 1 \u2264 N, M, Q \u2264 5 \u00d7 105\nExample\nInput:\n3 3 6\n1 2 3\n1 2\n2 3\n3 1\nP 1 3\nD 1\nP 2 3\nD 2\nP 3 10\nD 3\nOutput:\n8\n8\n9\n6\n13\n10\nExplanation\nAfter the first query, the populations are (3, 2, 3) and the most populated region is {1, 2, 3}.\nAfter the second query the populations and the regions remain the same.\nAfter the third query the populations are (3, 3, 3) and the most populated region is again {1, 2, 3}.\nAfter the fourth query the populations remain the same, but we have two regions: {1, 3} and {2}. The most populated region is {1, 3}.\nAfter the fifth query the populations become equal to (3, 3, 10) respectively, and the most populated region is again {1, 3}.\nAfter the last query we have populations the same, but now every city forms it own separate region, and the most populated region is region {3}.",
        "501": "Potato to Gold\nYou are given an array\nA of\nN integers and an integer\nK. Find the number of (possibly empty) subsequences of\nA such that no two elements in the subsequence have a sum that is divisible by\nK.\nTwo subsequences are considered distinct if they are made up of different indices. For example,\nA=[1,2,1,2] contains\n[1,2] as a subsequence three times, and all\n3 must be counted separately in the answer.\nMore formally,\nLet\nS={x\n1\n,x\n2\n,\u2026,x\nm\n} be a (possibly empty) set such that\n1\u2264x\n1\n<x\n2\n<\u2026<x\nm\n\u2264N.\nS is said to be good if\nA\nx\ni\n+A\nx\nj\nis not divisible by\nK for any\n1\u2264i<j\u2264m. In particular, any subsequence of size\n\u22641 is good.\nYour task is to count the number of good sets.\nSince the answer can be very large, print it modulo\n10\n9\n+7.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains two space separated integers,\nN and\nK.\nThe second line of each test case contains\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\nOutput Format\nFor each test case, output on a new line number of subsequences satisfying the condition, modulo\n10\n9\n+7.\nConstraints\n1\u2264T\u226410\n4\n1\u2264N\u226410\n5\n1\u2264K\u22645\u22c510\n5\n1\u2264A\ni\n\u226410\n9\nThe sum of\nN and\nK over all test cases won't exceed\n10\n6\n.\nSample 1:\nInput\nOutput\n3\n3 4\n4 5 7\n5 4\n1 2 3 4 5\n5 3\n1 2 3 4 5\n6\n20\n14\nExplanation:\nTest case\n1: Here,\nK=4. There are\n8 subsequences of the array, and they are considered as follows:\n[]: the empty subsequence. It satisfies the condition.\n[4],[5],[7]: size\n1 subsequences, all are good.\n[4,5]: good, because\n4+5=9 is not a multiple of\n4\n[4,7]: good, because\n4+7=11 is not a multiple of\n4\n[5,7]: not good, because\n5+7=12 is a multiple of\n4.\n[4,5,7]: not good, again because it contains\n5 and\n7.\nSo,\n6 of the subsequences are good.",
        "502": "Chef and Queries\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nAs part of his daily job, Chef has to solve problems involving sets. Till now, Chef has been using inefficient methods to solve his set related problem, wasting a lot of his precious time. He has agreed to pay you a lot of money for solving the following problem for him efficiently.\nFirst, Chef needs to perform Q operations on a set. Each operation is either:\n1. Add a number to the set (if this number is NOT already present in the set).\n2. Erase a number from the set (if this number exists in the set).\nThen, he needs to find the sum of all elements of the set after performing these Q queries. Your job is to find this sum for him quickly.\nInput\nThe first line of input contains four integers \u2014 Q, S1, A, B. S1 is the first number in the operations. A and B are special constants explained later.\nEvery operation Si is represented by a single integer. If Si is odd, then it represents the first operation, otherwise the second type, and in both of them the integer you have to add\/delete equals [Si \/ 2], where [] is the greatest integer (or floor) function.\nSi = (A*Si-1 + B) mod 232 when i > 1.\nNote: In this problem, the time limit is very tight. Using built-in data structures, such as set\/unordered_set in C++ or TreeSet\/HashSet in Java, may lead to a Time Limit Exceed verdict.\nOutput\nOutput a single line containing a single integer \u2014 sum of elements in the set after Q queries.\nConstraints\n1 \u2264 Q \u2264 107\n1 \u2264 S1, A, B \u2264 109\nExample\nInput:\n5 1 1 1\n\nOutput:\n3\nInput:\n10000000 777777777 777777777 777777777\n\nOutput:\n5362358669068782\nExplanation:\nThe sequence {Si} is 1, 2, 3, 4, 5:\nOperation 1, 1 mod 2 = 1, add number [1 \/ 2] = 0 to set, sum is 0.\nOperation 2, 2 mod 2 = 0, erase number [2 \/ 2] = 1 from set, 1 is not in set, so nothing happens, sum is 0.\nOperation 3, 3 mod 2 = 1, add number [3 \/ 2] = 1 to set, sum is 1.\nOperation 4, 4 mod 2 = 0, erase number [4 \/ 2] = 2 from set, 2 is not in set, so nothing happens, sum is 1.\nOperation 5, 5 mod 2 = 1, add number [5 \/ 2] = 2 to set, sum is 3.",
        "503": "Candies\nChef gave you an infinite number of candies to sell. There are\nN customers, and the budget of the\ni\nth\ncustomer is\nA\ni\nrupees, where\n1\u2264A\ni\n\u2264M.\nYou have to choose a price\nP, to sell the candies, where\n1\u2264P\u2264M.\nThe\ni\nth\ncustomer will buy exactly\n\u230a\nP\nA\ni\n\u230b candies.\nChef informed you that, for each candy you sell, he will reward you with\nC\nP\nrupees, as a bonus. Find the maximum amount of bonus you can get.\nNote:\nWe are not interested in the profit from selling the candies (as it goes to Chef), but only the amount of bonus. Refer the samples and their explanations for better understanding.\n\u230ax\u230b denotes the largest integer which is not greater than\nx. For example,\n\u230a2.75\u230b=2 and\n\u230a4\u230b=4.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains two space-separated integers\nN and\nM, the number of customers and the upper limit on budget\/price.\nThe second line contains\nN integers -\nA\n1\n,A\n2\n,\u2026,A\nN\n, the budget of\ni\nth\nperson.\nThe third line contains\nM integers -\nC\n1\n,C\n2\n,\u2026,C\nM\n, the bonus you get per candy, if you set the price as\ni.\nOutput Format\nFor each test case, output on a new line, the maximum amount of bonus you can get.\nConstraints\n1\u2264T\u226410\n4\n1\u2264N,M\u226410\n5\n1\u2264A\ni\n\u2264M\n1\u2264C\nj\n\u226410\n6\nThe elements of array\nC are not necessarily non-decreasing.\nThe sum of\nN and\nM over all test cases won't exceed\n10\n5\n.\nSample 1:\nInput\nOutput\n2\n5 6\n3 1 4 1 5\n1 4 5 5 8 99\n1 2\n1\n4 1\n20\n4\nExplanation:\nTest case\n1:\nIf we choose\nP=1, the number of candies bought by each person is\n[\u230a\n1\n3\n\u230b,\u230a\n1\n1\n\u230b,\u230a\n1\n4\n\u230b,\u230a\n1\n1\n\u230b,\u230a\n1\n5\n\u230b]. Thus, our bonus is\n(3+1+4+1+5)\u22c51=14.\nIf we choose\nP=2, the number of candies bought by each person is\n[\u230a\n2\n3\n\u230b,\u230a\n2\n1\n\u230b,\u230a\n2\n4\n\u230b,\u230a\n2\n1\n\u230b,\u230a\n2\n5\n\u230b]. Thus our bonus is\n(1+0+2+0+2)\u22c54=20.\nIf we choose\nP=3, the number of candies bought by each person is\n[\u230a\n3\n3\n\u230b,\u230a\n3\n1\n\u230b,\u230a\n3\n4\n\u230b,\u230a\n3\n1\n\u230b,\u230a\n3\n5\n\u230b]. Thus our bonus is\n(1+0+1+0+1)\u22c55=15.\nIf we choose\nP=4, the number of candies bought by each person is\n[\u230a\n4\n3\n\u230b,\u230a\n4\n1\n\u230b,\u230a\n4\n4\n\u230b,\u230a\n4\n1\n\u230b,\u230a\n4\n5\n\u230b]. Thus our bonus is\n(0+0+1+0+1)\u22c55=10.\nIf we choose\nP=5, the number of candies bought by each person is\n[\u230a\n5\n3\n\u230b,\u230a\n5\n1\n\u230b,\u230a\n5\n4\n\u230b,\u230a\n5\n1\n\u230b,\u230a\n5\n5\n\u230b]. Thus our bonus is\n(0+0+0+0+1)\u22c58=8.\nIf we choose\nP=6, the number of candies bought by each person is\n[\u230a\n6\n3\n\u230b,\u230a\n6\n1\n\u230b,\u230a\n6\n4\n\u230b,\u230a\n6\n1\n\u230b,\u230a\n6\n5\n\u230b]. Thus our bonus is\n(0+0+0+0+0)\u22c599=0.\nThus, the answer is\n20.\nTest case\n2:\nIf we choose\nP=1, the number of candies bought by each person is\n[\u230a\n1\n1\n\u230b]. Thus, our bonus is\n1\u22c54=4.\nIf we choose\nP=2, the number of candies bought by each person is\n[\u230a\n2\n1\n\u230b]. Thus, our bonus is\n0\u22c51=0.\nThus, the answer is\n4.",
        "504": "Two Piles\nYou are given\nN pairs of integers. The\ni-th pair is\n(A\ni\n,B\ni\n).\nYou also have two piles with you, both initially empty.\nYou will perform the following process:\nFor each\ni from\n1 to\nN, choose exactly one of\nA\ni\nor\nB\ni\n.\nThen, add the chosen integer to one of your two piles.\nAt the end of the process, both piles must be non-empty (i.e, you should have added at least one integer to both).\nThe value of a pile is defined to be its maximum element.\nIf you make your choices optimally, find the minimum possible difference between the values of the piles.\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains a single integer\nN \u2014 the number of pairs.\nThe next\nN lines describe the pairs. The\ni-th of these lines contains two space-separated integers\nA\ni\nand\nB\ni\n\u2014 the elements of the\ni-th pair.\nOutput Format\nFor each test case, output on a new line the minimum possible difference between the values of the piles.\nConstraints\n1\u2264T\u226410\n4\n2\u2264N\u22642\u22c510\n5\n1\u2264A\ni\n,B\ni\n\u226410\n9\nThe sum of\nN over all test cases won't exceed\n2\u22c510\n5\n.\nSample 1:\nInput\nOutput\n3\n2\n1 6\n4 9\n2\n1 9\n4 6\n4\n10 10\n23 55\n21 80\n105 91\n2\n3\n11\nExplanation:\nTest case\n1: The pairs are\n(1,6) and\n(4,9).\nChoose\n6 from the first pair, and\n4 from the second pair, and place them on different piles.\nThe maximums are\n6 and\n4, and the difference between them is\n\u22236\u22124\u2223=2.\nAchieving a smaller difference is not possible.\nTest case\n2: The pairs are\n(1,9) and\n(4,6).\nChoose\n1 from the first pair and\n4 from the second pair and place them on different piles, for a difference of\n3.\nTest case\n3: One optimal solution is:\nFrom the first pair, place\n10 on pile\n1.\nFrom the second pair, place\n55 on pile\n2.\nFrom the third pair, place\n80 on pile\n2.\nFrom the fourth pair, place\n91 on pile\n1.\nThe difference between the maximums of the piles is\n\u222380\u221291\u2223=11. This is the smallest possible difference.",
        "505": "Ultimate Fencing\nYou've recently come into possession of a rather nice piece of land, on which you'd like to build a house.\nUnfortunately, one side of this land borders a forest, and you really don't want any dangerous animals showing up at your doorstep. Naturally, you decide to build a fence to keep them out.\nBuilding a fence requires you to place fence posts first.\nThe border can be thought of as a segment of length\nM on the\nx-axis, with its endpoints at\nx=0 and\nx=M. Initially, there are posts only at these two endpoints.\nYou will place\nN posts at distinct points along this border, one at a time. The\ni-th of them will be placed at point\nx=A\ni\n.\nAfter each post is placed, you'd like to know: what's the longest empty segment (i.e, a segment without any posts) along the border?\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of two lines of input.\nThe first line of each test case contains two space-separated integers\nN and\nM \u2014 the number of fence posts and the length of the border.\nThe second line will contain\nN space-separated integers\nA\n1\n,A\n2\n,\u2026,A\nN\n\u2014 the positions at which the posts are placed, in order.\nOutput Format\nFor each test case, output\nN space-separated integers on a new line. The\ni-th of them should denote the length of the longest empty segment after the first\ni posts have been placed.\nConstraints\n1\u2264T\u226410\n5\n1\u2264N\u22642\u22c510\n5\nN<M\n2\u2264M\u226410\n9\n1\u2264A\ni\n<M\nAll the\nA\ni\nvalues are distinct.\nThe sum of\nN across all tests won't exceed\n2\u22c510\n5\nSample 1:\nInput\nOutput\n3\n2 5\n2 4\n4 5\n4 3 2 1\n4 25\n10 12 5 19\n3 2\n4 3 2 1\n15 13 13 7\nExplanation:\nTest case\n1: The posts are placed as follows:\nInitially, the posts are at\n[0,5].\nThe first post is placed at\nx=2. The posts are at positions\n[0,2,5].\nThe largest empty segment is between points\n2 and\n5, with a length of\n3.\nThe second post is placed at\nx=4. The posts are at positions\n[0,2,4,5].\nThe largest empty segment is of length\n2, between\n2 and\n4 (and also between\n0 and\n2).\nTest case\n2: The posts are placed as follows:\nThe first one is at\nx=4, so the posts are at\n[0,4,5]. The longest empty segment is between\n0 and\n4, of length\n4.\nThe second post is at\nx=3, so the posts are at\n[0,3,4,5]. The longest empty segment is between\n0 and\n3, of length\n3.\nThe third post is at\nx=2. The longest empty segment is between\n0 and\n2, of length\n2.\nThe fourth post is at\nx=1. The longest empty segment is of length\n1.",
        "506": "A Special Tree\nYou are given a tree with\nN nodes (numbered\n1 through\nN). There are\nK special nodes\nf\n1\n,f\n2\n,\u2026,f\nK\nin this tree.\nWe define\nd(p,q) to be the number of edges on the unique path from node\np to node\nq.\nYou are given a node\na. For each node\nb from\n1 to\nN, find the maximum value of\nd(a,u)\u2212d(b,u) where\nu is a special node, as well as any special node\nu for which that maximum value is attained.\nInput Format\nThe first line of the input contains a single integer\nT denoting the number of test cases. The description of\nT test cases follows.\nThe first line of each test case contains three space-separated integers\nN,\nK,\na.\nThe second line contains\nK space-separated integers\nf\n1\n,f\n2\n,\u2026,f\nK\n.\nN\u22121 lines follow. For each valid\ni, the\ni-th of these lines contains two space-separated integers\nu\ni\nand\nv\ni\ndenoting an edge of the tree.\nOutput Format\nFor each test case, print two lines.\nIn the first line print\nN space-separated integers. For each valid\ni, the\ni-th integer should be the maximum value of\nd(a,u)\u2212d(i,u) where\nu is a special node.\nIn the second line print\nN space-separated integers. For each valid\ni, the\ni-th integer should be any special node\nu for which the maximum of\nd(a,u)\u2212d(i,u) is attained.\nConstraints\n1\u2264T\u2264200\n1\u2264K\u2264N\u22642\u22c510\n5\n1\u2264a\u2264N\n1\u2264f\ni\n\u2264N for each valid\ni\nf\ni\n\ue020\n=f\nj\nfor each valid\ni and\nj such that\ni\n\ue020\n=j\n1\u2264u\ni\n,v\ni\n\u2264N for each valid\ni\nthe graph described on the input is a tree\nthe sum of\nN over all test cases does not exceed\n4\u22c510\n5\nSubtasks\nSubtask #1 (10 points):\nT\u226411\nN\u2264200\nthe sum of\nN over all test cases does not exceed\n400\nSubtask #2 (20 points):\nT\u226451\nN\u22642000\nthe sum of\nN over all test cases does not exceed\n4000\nSubtask #3 (30 points):\nIt holds that\nu\ni\n=i,\nv\ni\n=i+1 for each valid\ni.\nSubtask #4 (40 points): original constraints\nSample 1:\nInput\nOutput\n2\n5 1 3\n2\n1 2\n1 3\n2 4\n2 5\n8 3 2\n6 5 8\n1 2\n2 3\n2 4\n2 5\n4 6\n5 7\n5 8\n1 2 0 1 1\n2 2 2 2 2\n-1 0 -1 1 1 2 0 2\n5 5 5 6 5 6 5 8\nExplanation:\nExample case 1: The following picture shows the tree in the first example case with special nodes in bold:\nThe only special node is the node\n2 and\na=3. Therefore, the desired maximum is\nd(a,2)\u2212d(b,2)=d(3,2)\u2212d(b,2)=2\u2212d(b,2) for each node\nb and it is always attained for the special node\nu=2.\nExample case 2: The following picture shows the tree in the second example case with special nodes bolded:\nThe special nodes are\n6,\n5 and\n8, and\na=2. The maximum values of\nd(a,u)\u2212d(b,u) (\nu being a special node) for each\nb are as follows:\nb=1: The maximum value of\nd(2,u)\u2212d(1,u) is\n\u22121 and it is achieved for\nu=5 since\nd(2,5)\u2212d(1,5)=1\u22122=\u22121.\nb=2: The maximum value of\nd(2,u)\u2212d(2,u) is\n0 and it is achieved for\nu=5 since\nd(2,5)\u2212d(2,5)=1\u22121=0.\nb=3: The maximum value of\nd(2,u)\u2212d(3,u) is\n\u22121 and it is achieved for\nu=5 since\nd(2,5)\u2212d(3,5)=1\u22122=\u22121.\nb=4: The maximum value of\nd(2,u)\u2212d(4,u) is\n1 and it is achieved for\nu=6 since\nd(2,6)\u2212d(4,6)=2\u22121=1.\nb=5: The maximum value of\nd(2,u)\u2212d(5,u) is\n1 and it is achieved for\nu=5 since\nd(2,5)\u2212d(5,5)=1\u22120=1.\nb=6: The maximum value of\nd(2,u)\u2212d(6,u) is\n2 and it is achieved for\nu=6 since\nd(2,6)\u2212d(6,6)=2\u22120=2.\nb=7: The maximum value of\nd(2,u)\u2212d(7,u) is\n0 and it is achieved for\nu=5 since\nd(2,5)\u2212d(7,5)=1\u22121=0.\nb=8: The maximum value of\nd(2,u)\u2212d(8,u) is\n2 and it is achieved for\nu=8 since\nd(2,8)\u2212d(8,8)=2\u22120=2.",
        "507": "Two Averages\nChef has an array\nA of size\nN such that\n1\u2264A\ni\n\u2264K for all\n1\u2264i\u2264N.\nChef also has another array\nB of size\nM such that\n1\u2264B\ni\n\u2264K for all\n1\u2264i\u2264M\nChef can perform the following operation:\n1) Select an integer\nX such that\n1\u2264X\u2264K\n2) Append\nX to the end of exactly one array among\nA and\nB\nFind the minimum number of operations required to make\nmean(A) strictly greater than\nmean(B) or determine it is not possible to do so.\nFor an array\nX of length\nM,\nmean(X) is defined as\nM\n\u03a3X\ni\n. For example,\nmean([5,6])=\n2\n5+6\n=5.5\nmean([10,13,20])=\n3\n10+13+20\n=14.333...\nmean([3,3,3,3,3])=3\nInput Format\nThe first line of input will contain a single integer\nT, denoting the number of test cases.\nEach test case consists of multiple lines of input.\nThe first line of each test case contains three space-separated integers\nN,\nM and\nK - the size of array\nA, the size of array\nB and the upper bound of values in arrays\nA and\nB.\nThe next line contains\nN space-separated integers\nA\n1\n,\nA\n2\n, ...,\nA\nN\ndenoting the array\nA.\nThe third line contains\nM space-separated integers\nB\n1\n,\nB\n2\n, ...,\nB\nM\ndenoting the array\nB.\nOutput Format\nFor each test case, output the minimum number of operations required to make\nmean(A)>mean(B).\nOutput\n\u22121 if it is not possible to do so.\nConstraints\n1\u2264T\u226410\n4\n1\u2264N,M\u226410\n5\n1\u2264K\u226410\n6\n1\u2264A\ni\n,B\ni\n\u2264K\nSum of\nN over all test cases won't exceed\n10\n5\n.\nSum of\nM over all test cases won't exceed\n10\n5\n.\nSample 1:\nInput\nOutput\n4\n6 3 9\n3 7 3 5 2 4\n8 3 5\n1 1 4\n4\n2\n2 2 1\n1 1\n1 1\n5 5 5\n3 4 3 4 3\n4 5 4 5 4\n2\n0\n-1\n3\nExplanation:\nTest case 1:\nA=[3,7,3,5,2,4] and\nB=[8,3,5]. Chef can perform the following operations:\nAppend\nX=8 to array\nA\nAppend\nX=2 to array\nB\nAfter that,\nmean(A)=\n7\n3+7+3+5+2+4+8\n=4.5714... and\nmean(B)=\n4\n8+3+5+2\n=4.5\nTest case 2: There is no need to append new elements as\nmean(A)=4>2=mean(B).\nTest case 3: As\nK=1, it is impossible to make\nmean(A)>mean(B) as\nmean(A)=mean(B)=1 no matter how many operations Chef performs.\nTest case 4: Chef can append\n2,\n1 and\n2 to array\nB in three operations.",
        "508": "Chef and Riffles\nLet\nf be a permutation of length\nN, where\nN is even. The riffle of\nf is defined to be the permutation\ng=(f(1),f(3),\u2026,f(N\u22121),f(2),f(4),\u2026,f(N))\nYou are given two integers\nN and\nK. Output the resultant permutation when you riffle the identity permutation of length\nN,\nK times.\nThe identity permutation of length\nN is\n\u03c3\nN\n=(1,2,\u2026,N)\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases. The description of\nT test cases follows.\nEach test case consists of a single line of input, containing two space-separated integers\nN and\nK.\nOutput Format\nFor each test case, output the answer permutation as\nN space-separated integers in a new line.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u22643\u22c510\n5\n1\u2264K\u226410\n9\nN is even\nThe sum of\nN across test cases does not exceed\n3\u22c510\n5\nSubtasks\nSubtask 1 (30 points):\nN is a power of\n2\nSubtask 2 (70 points): Original constraints\nSample 1:\nInput\nOutput\n3\n6 1\n8 2\n14 452\n1 3 5 2 4 6\n1 5 2 6 3 7 4 8\n1 10 6 2 11 7 3 12 8 4 13 9 5 14\nExplanation:\nTest case\n1: Performing the riffle on\n\u03c3\n6\n=(1,2,3,4,5,6) once results in\n(1,3,5,2,4,6), by definition.\nTest case\n2: The process goes as follows:\nPerforming the riffle on\n(1,2,3,4,5,6,7,8) results in\n(1,3,5,7,2,4,6,8)\nPerforming the riffle on\n(1,3,5,7,2,4,6,8) results in\n(1,5,2,6,3,7,4,8)",
        "509": "Chandelier\nA linear chandelier is held up by\nN supports. The\ni\nth\nsupport initially holds up a weight\nW\ni\n, and will collapse if the weight on it is more than or equal to\nA\ni\n. Note that initially,\nW\ni\n<A\ni\nfor all\n1\u2264i\u2264N.\nWhenever\nW\ni\n\u2265A\ni\nfor some support, the following happens:\nThe\ni\nth\nsupport is destroyed;\nLet\nx and\ny be uniformly random non-negative integers such that\nx+y=W\ni\n.\nAdd\nx to\nW\ni\u22121\nand add\ny to\nW\ni+1\n.\nNote that:\nIf either one of the neighbours do not exist, all the weight is added to the remaining neighbour.\nIf both neighbours do not exist, the weight dissipates.\nFor all\n1\u2264i\u2264N, find the minimum weight you need to add to\nW\ni\n, so that there is a nonzero chance all supports end up destroyed.\nInput Format\nThe first line of input contains a single integer\nT, denoting the number of test cases.\nThe first line of each test case contains\nN, the number of supports.\nThe second line of each test case contains\nN integers\nW\n1\n,W\n2\n,\u2026,W\nN\n, denoting initial weight on each support.\nThe third line of each test case contains\nN integers\nA\n1\n,A\n2\n,\u2026,A\nN\n, denoting the minimum load at which a support destroys.\nOutput Format\nFor each test, output\nN space-separated integers. The\ni\nth\nof these should be the minimum weight you need to add to the\ni\nth\nchandelier, so that there is a nonzero chance that all supports end up destroyed.\nConstraints\n1\u2264T\u226410\n4\n1\u2264N\u22643\u22c510\n5\n1\u2264W\ni\n<A\ni\n\u226410\n9\nThe sum of\nN over all test cases does not exceed\n3\u22c510\n5\n.\nSample 1:\nInput\nOutput\n4\n3\n1 1 1\n2 2 2\n1\n1\n1000000000\n2\n1 1234\n2 5678\n7\n122 179 269 184 250 104 455\n398 203 318 340 312 489 464\n1 1 1\n999999999\n4443 4444\n276 146 49 156 291 385 9\nExplanation:\nTest case\n1: The following is possible if we add weight\n1 to support\n2:\nSupport\n2 collapses, since\nW\n2\n=2\u22652. A weight\nx=1 gets added to\nW\n1\n, and a weight\ny=1 gets added to\nW\n3\n.\nSupport\n1 collapses, since\nW\n1\n=2\u22652.\nSupport\n3 collapses, since\nW\n3\n=2\u22652.\nIf we add zero weight, then nothing would happen and all supports would stay standing. So the answer for\ni=2 is\n1.\nTest case\n2: We have to add\n999999999 weight to the only support to make it collapse.\nTest case\n3: Note that we could add a weight of\n1 to support\n1 to make it collapse, but then, there would be no way to make the second support collapse. We can show that we have to add at least\n4443 weight to support\n1 to make it possible for both supports to end up destroyed.",
        "510": "Minimal Travel Time\nChef's college is starting next week. There are\nS subjects in total, and he needs to choose\nK of them to attend each day, to fulfill the required number of credits to pass the semester. There are\nN+1 buildings. His hostel is in building number\n0. Subject\ni is taught in building\nA\ni\n. After each subject, there is a break, during which he goes back to his hostel. There are\nM bidirectional paths of length\n1 which connects building\nu to building\nv. Find the minimum possible total distance Chef needs to travel each day if he chooses his subjects wisely.\n###Input:\nFirst line will contain\nT, number of testcases. Then the testcases follow.\nEach testcase contain\nM+2 lines of input.\nFirst line will contain\n4 space separated integers\nN,\nM,\nS,\nK, number of buildings other than hostel building, number of edges, total number of subjects taught, number of subjects required to pass the semester.\nNext\nM lines have\n2 space separated integers\nu,\nv representing the path connecting buildings\nu and\nv.\nNext line has\nS space separated integers\nA\n1\n,A\n2\n,\u2026A\nS\nrepresenting the building in which\ni\nth\nsubject is taught.\n###Output: For each testcase, output in a single line answer to the problem.\n###Constraints\n1\u2264T\u22643\n1\u2264N,S\u226410\n5\n1\u2264M\u22642\u221710\n5\n1\u2264K\u2264S\n1\u2264A\ni\n\u2264N\n0\u2264u,v\u2264N\nIts guaranteed that the graph is connected and has no self loops.\nSample 1:\nInput\nOutput\n3\n2 3 2 2\n0 1\n1 2\n2 0\n1 2\n2 2 2 2\n0 1\n1 2\n1 2\n6 7 5 3\n0 1\n0 2\n0 4\n1 3\n1 4\n2 5\n2 6\n1 2 3 5 6\n4\n6\n8\nExplanation:\nTestCase 1: First Chef attends the subject in the building\n2 and he travels\n1 units to go there and\n1 units to come back during the break to the hostel.\nSecond subject he attends in the building\n1 and he travels\n1 unit to go there and\n1 unit to come back during the break to the hostel.\nIn total the total minimum distance to be travelled is\n2+2=4 units.\nTestCase 2: First Chef attends the subject in the building\n2 and he travels\n2 units to go there and\n2 units to come back during the break to the hostel.\nSecond subject he attends in the building\n1 and he travels\n1 unit to go there and\n1 unit to come back during the break to the hostel.\nIn total the total minimum distance to be travelled is\n4+2=6 units.\nTestCase 3: First Chef attends the subject in the building\n3 and he travels\n2 units to go there and\n2 units to come back during the break to the hostel.\nSecond subject he attends in the building\n1 and he travels\n1 unit to go there and\n1 unit to come back during the break to the hostel.\nFinal subject he attends in the building\n2 and he travels\n1 unit to go there and\n1 unit to come back during the break to the hostel.\nIn total the total minimum distance to be travelled is\n4+2+2=8 units.",
        "511": "Tree Distances\nRead problems statements in Mandarin Chinese, Russian, and Bengali as well.\nA tree is defined as a connected, undirected graph with\nn vertices and\nn\u22121 edges. The distance between two vertices in a tree is equal to the number of edges on the unique simple path between them.\nYou are given two integers\nx and\ny. Construct a tree with the following properties:\nThe number of pairs of vertices with an even distance between them equals\nx.\nThe number of pairs of vertices with an odd distance between them equals\ny.\nBy a pair of vertices, we mean an ordered pair of two (possibly, the same or different) vertices.\nInput\nThe first line of the input contains a single integer\nT denoting the number of test cases. Each test case consists of one line containing two space-separated integers\nx and\ny.\nOutput\nFor each test case, if there is no tree satisfying the given properties, print \"NO\" (without quotes).\nOtherwise, on the first line print \"YES\" (without quotes). Then print integer\nn denoting the number of vertices in the tree, followed by\nn\u22121 lines describing the edges of the tree in any order. Vertices are numbered from\n1 to\nn. If there are multiple answers, print any of them.\nConstraints\n1\u2264T\u2264100\n1\u2264x,y\u226410\n9\nx+y\u226410\n9\nExample Input\n4\n2 2\n29 20\n3 12\n6 3\nExample Output\nYES\n2\n1 2\nYES\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\nNO\nNO\nExplanation\nIn the first test case, the pairs\n(1,1) and\n(2,2) have an even distance, while the pairs\n(1,2) and\n(2,1) have an odd distance."
    }
}