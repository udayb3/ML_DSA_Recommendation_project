{
    "link": {
        "0": "https:\/\/www.hackerrank.com\/challenges\/solve-me-first?isFullScreen=true",
        "1": "https:\/\/www.hackerrank.com\/challenges\/simple-array-sum?isFullScreen=true",
        "2": "https:\/\/www.hackerrank.com\/challenges\/compare-the-triplets?isFullScreen=true",
        "3": "https:\/\/www.hackerrank.com\/challenges\/a-very-big-sum?isFullScreen=true",
        "4": "https:\/\/www.hackerrank.com\/challenges\/diagonal-difference?isFullScreen=true",
        "5": "https:\/\/www.hackerrank.com\/challenges\/plus-minus?isFullScreen=true",
        "6": "https:\/\/www.hackerrank.com\/challenges\/staircase?isFullScreen=true",
        "7": "https:\/\/www.hackerrank.com\/challenges\/mini-max-sum?isFullScreen=true",
        "8": "https:\/\/www.hackerrank.com\/challenges\/birthday-cake-candles?isFullScreen=true",
        "9": "https:\/\/www.hackerrank.com\/challenges\/time-conversion?isFullScreen=true",
        "10": "https:\/\/www.hackerrank.com\/challenges\/grading?isFullScreen=true",
        "11": "https:\/\/www.hackerrank.com\/challenges\/apple-and-orange?isFullScreen=true",
        "12": "https:\/\/www.hackerrank.com\/challenges\/kangaroo?isFullScreen=true",
        "13": "https:\/\/www.hackerrank.com\/challenges\/between-two-sets?isFullScreen=true",
        "14": "https:\/\/www.hackerrank.com\/challenges\/breaking-best-and-worst-records?isFullScreen=true",
        "15": "https:\/\/www.hackerrank.com\/challenges\/the-birthday-bar?isFullScreen=true",
        "16": "https:\/\/www.hackerrank.com\/challenges\/divisible-sum-pairs?isFullScreen=true",
        "17": "https:\/\/www.hackerrank.com\/challenges\/migratory-birds?isFullScreen=true",
        "18": "https:\/\/www.hackerrank.com\/challenges\/day-of-the-programmer?isFullScreen=true",
        "19": "https:\/\/www.hackerrank.com\/challenges\/bon-appetit?isFullScreen=true",
        "20": "https:\/\/www.hackerrank.com\/challenges\/solve-me-first?isFullScreen=true",
        "21": "https:\/\/www.hackerrank.com\/challenges\/simple-array-sum?isFullScreen=true",
        "22": "https:\/\/www.hackerrank.com\/challenges\/compare-the-triplets?isFullScreen=true",
        "23": "https:\/\/www.hackerrank.com\/challenges\/a-very-big-sum?isFullScreen=true",
        "24": "https:\/\/www.hackerrank.com\/challenges\/diagonal-difference?isFullScreen=true",
        "25": "https:\/\/www.hackerrank.com\/challenges\/plus-minus?isFullScreen=true",
        "26": "https:\/\/www.hackerrank.com\/challenges\/staircase?isFullScreen=true",
        "27": "https:\/\/www.hackerrank.com\/challenges\/mini-max-sum?isFullScreen=true",
        "28": "https:\/\/www.hackerrank.com\/challenges\/birthday-cake-candles?isFullScreen=true",
        "29": "https:\/\/www.hackerrank.com\/challenges\/time-conversion?isFullScreen=true",
        "30": "https:\/\/www.hackerrank.com\/challenges\/grading?isFullScreen=true",
        "31": "https:\/\/www.hackerrank.com\/challenges\/apple-and-orange?isFullScreen=true",
        "32": "https:\/\/www.hackerrank.com\/challenges\/kangaroo?isFullScreen=true",
        "33": "https:\/\/www.hackerrank.com\/challenges\/between-two-sets?isFullScreen=true",
        "34": "https:\/\/www.hackerrank.com\/challenges\/breaking-best-and-worst-records?isFullScreen=true",
        "35": "https:\/\/www.hackerrank.com\/challenges\/the-birthday-bar?isFullScreen=true",
        "36": "https:\/\/www.hackerrank.com\/challenges\/divisible-sum-pairs?isFullScreen=true",
        "37": "https:\/\/www.hackerrank.com\/challenges\/migratory-birds?isFullScreen=true",
        "38": "https:\/\/www.hackerrank.com\/challenges\/day-of-the-programmer?isFullScreen=true",
        "39": "https:\/\/www.hackerrank.com\/challenges\/bon-appetit?isFullScreen=true",
        "40": "https:\/\/www.hackerrank.com\/challenges\/sock-merchant?isFullScreen=true",
        "41": "https:\/\/www.hackerrank.com\/challenges\/drawing-book?isFullScreen=true",
        "42": "https:\/\/www.hackerrank.com\/challenges\/counting-valleys?isFullScreen=true",
        "43": "https:\/\/www.hackerrank.com\/challenges\/electronics-shop?isFullScreen=true",
        "44": "https:\/\/www.hackerrank.com\/challenges\/cats-and-a-mouse?isFullScreen=true",
        "45": "https:\/\/www.hackerrank.com\/challenges\/magic-square-forming?isFullScreen=true",
        "46": "https:\/\/www.hackerrank.com\/challenges\/picking-numbers?isFullScreen=true",
        "47": "https:\/\/www.hackerrank.com\/challenges\/climbing-the-leaderboard?isFullScreen=true",
        "48": "https:\/\/www.hackerrank.com\/challenges\/the-hurdle-race?isFullScreen=true",
        "49": "https:\/\/www.hackerrank.com\/challenges\/designer-pdf-viewer?isFullScreen=true",
        "50": "https:\/\/www.hackerrank.com\/challenges\/solve-me-first?isFullScreen=true",
        "51": "https:\/\/www.hackerrank.com\/challenges\/simple-array-sum?isFullScreen=true",
        "52": "https:\/\/www.hackerrank.com\/challenges\/compare-the-triplets?isFullScreen=true",
        "53": "https:\/\/www.hackerrank.com\/challenges\/a-very-big-sum?isFullScreen=true",
        "54": "https:\/\/www.hackerrank.com\/challenges\/diagonal-difference?isFullScreen=true",
        "55": "https:\/\/www.hackerrank.com\/challenges\/plus-minus?isFullScreen=true",
        "56": "https:\/\/www.hackerrank.com\/challenges\/staircase?isFullScreen=true",
        "57": "https:\/\/www.hackerrank.com\/challenges\/mini-max-sum?isFullScreen=true",
        "58": "https:\/\/www.hackerrank.com\/challenges\/birthday-cake-candles?isFullScreen=true",
        "59": "https:\/\/www.hackerrank.com\/challenges\/time-conversion?isFullScreen=true",
        "60": "https:\/\/www.hackerrank.com\/challenges\/grading?isFullScreen=true",
        "61": "https:\/\/www.hackerrank.com\/challenges\/apple-and-orange?isFullScreen=true",
        "62": "https:\/\/www.hackerrank.com\/challenges\/kangaroo?isFullScreen=true",
        "63": "https:\/\/www.hackerrank.com\/challenges\/between-two-sets?isFullScreen=true",
        "64": "https:\/\/www.hackerrank.com\/challenges\/breaking-best-and-worst-records?isFullScreen=true",
        "65": "https:\/\/www.hackerrank.com\/challenges\/the-birthday-bar?isFullScreen=true",
        "66": "https:\/\/www.hackerrank.com\/challenges\/divisible-sum-pairs?isFullScreen=true",
        "67": "https:\/\/www.hackerrank.com\/challenges\/migratory-birds?isFullScreen=true",
        "68": "https:\/\/www.hackerrank.com\/challenges\/day-of-the-programmer?isFullScreen=true",
        "69": "https:\/\/www.hackerrank.com\/challenges\/bon-appetit?isFullScreen=true",
        "70": "https:\/\/www.hackerrank.com\/challenges\/sock-merchant?isFullScreen=true",
        "71": "https:\/\/www.hackerrank.com\/challenges\/drawing-book?isFullScreen=true",
        "72": "https:\/\/www.hackerrank.com\/challenges\/counting-valleys?isFullScreen=true",
        "73": "https:\/\/www.hackerrank.com\/challenges\/electronics-shop?isFullScreen=true",
        "74": "https:\/\/www.hackerrank.com\/challenges\/cats-and-a-mouse?isFullScreen=true",
        "75": "https:\/\/www.hackerrank.com\/challenges\/magic-square-forming?isFullScreen=true",
        "76": "https:\/\/www.hackerrank.com\/challenges\/picking-numbers?isFullScreen=true",
        "77": "https:\/\/www.hackerrank.com\/challenges\/climbing-the-leaderboard?isFullScreen=true",
        "78": "https:\/\/www.hackerrank.com\/challenges\/the-hurdle-race?isFullScreen=true",
        "79": "https:\/\/www.hackerrank.com\/challenges\/designer-pdf-viewer?isFullScreen=true",
        "80": "https:\/\/www.hackerrank.com\/challenges\/solve-me-first?isFullScreen=true",
        "81": "https:\/\/www.hackerrank.com\/challenges\/simple-array-sum?isFullScreen=true",
        "82": "https:\/\/www.hackerrank.com\/challenges\/compare-the-triplets?isFullScreen=true",
        "83": "https:\/\/www.hackerrank.com\/challenges\/a-very-big-sum?isFullScreen=true",
        "84": "https:\/\/www.hackerrank.com\/challenges\/diagonal-difference?isFullScreen=true",
        "85": "https:\/\/www.hackerrank.com\/challenges\/plus-minus?isFullScreen=true",
        "86": "https:\/\/www.hackerrank.com\/challenges\/staircase?isFullScreen=true",
        "87": "https:\/\/www.hackerrank.com\/challenges\/mini-max-sum?isFullScreen=true",
        "88": "https:\/\/www.hackerrank.com\/challenges\/birthday-cake-candles?isFullScreen=true",
        "89": "https:\/\/www.hackerrank.com\/challenges\/time-conversion?isFullScreen=true",
        "90": "https:\/\/www.hackerrank.com\/challenges\/grading?isFullScreen=true",
        "91": "https:\/\/www.hackerrank.com\/challenges\/apple-and-orange?isFullScreen=true",
        "92": "https:\/\/www.hackerrank.com\/challenges\/kangaroo?isFullScreen=true",
        "93": "https:\/\/www.hackerrank.com\/challenges\/between-two-sets?isFullScreen=true",
        "94": "https:\/\/www.hackerrank.com\/challenges\/breaking-best-and-worst-records?isFullScreen=true",
        "95": "https:\/\/www.hackerrank.com\/challenges\/the-birthday-bar?isFullScreen=true",
        "96": "https:\/\/www.hackerrank.com\/challenges\/divisible-sum-pairs?isFullScreen=true",
        "97": "https:\/\/www.hackerrank.com\/challenges\/migratory-birds?isFullScreen=true",
        "98": "https:\/\/www.hackerrank.com\/challenges\/day-of-the-programmer?isFullScreen=true",
        "99": "https:\/\/www.hackerrank.com\/challenges\/bon-appetit?isFullScreen=true",
        "100": "https:\/\/www.hackerrank.com\/challenges\/sock-merchant?isFullScreen=true",
        "101": "https:\/\/www.hackerrank.com\/challenges\/drawing-book?isFullScreen=true",
        "102": "https:\/\/www.hackerrank.com\/challenges\/counting-valleys?isFullScreen=true",
        "103": "https:\/\/www.hackerrank.com\/challenges\/electronics-shop?isFullScreen=true",
        "104": "https:\/\/www.hackerrank.com\/challenges\/cats-and-a-mouse?isFullScreen=true",
        "105": "https:\/\/www.hackerrank.com\/challenges\/magic-square-forming?isFullScreen=true",
        "106": "https:\/\/www.hackerrank.com\/challenges\/picking-numbers?isFullScreen=true",
        "107": "https:\/\/www.hackerrank.com\/challenges\/climbing-the-leaderboard?isFullScreen=true",
        "108": "https:\/\/www.hackerrank.com\/challenges\/the-hurdle-race?isFullScreen=true",
        "109": "https:\/\/www.hackerrank.com\/challenges\/designer-pdf-viewer?isFullScreen=true",
        "110": "https:\/\/www.hackerrank.com\/challenges\/utopian-tree?isFullScreen=true",
        "111": "https:\/\/www.hackerrank.com\/challenges\/angry-professor?isFullScreen=true",
        "112": "https:\/\/www.hackerrank.com\/challenges\/beautiful-days-at-the-movies?isFullScreen=true",
        "113": "https:\/\/www.hackerrank.com\/challenges\/strange-advertising?isFullScreen=true",
        "114": "https:\/\/www.hackerrank.com\/challenges\/save-the-prisoner?isFullScreen=true",
        "115": "https:\/\/www.hackerrank.com\/challenges\/circular-array-rotation?isFullScreen=true",
        "116": "https:\/\/www.hackerrank.com\/challenges\/permutation-equation?isFullScreen=true",
        "117": "https:\/\/www.hackerrank.com\/challenges\/jumping-on-the-clouds-revisited?isFullScreen=true",
        "118": "https:\/\/www.hackerrank.com\/challenges\/find-digits?isFullScreen=true",
        "119": "https:\/\/www.hackerrank.com\/challenges\/extra-long-factorials?isFullScreen=true",
        "120": "https:\/\/www.hackerrank.com\/challenges\/solve-me-first?isFullScreen=true",
        "121": "https:\/\/www.hackerrank.com\/challenges\/simple-array-sum?isFullScreen=true",
        "122": "https:\/\/www.hackerrank.com\/challenges\/compare-the-triplets?isFullScreen=true",
        "123": "https:\/\/www.hackerrank.com\/challenges\/a-very-big-sum?isFullScreen=true",
        "124": "https:\/\/www.hackerrank.com\/challenges\/diagonal-difference?isFullScreen=true",
        "125": "https:\/\/www.hackerrank.com\/challenges\/plus-minus?isFullScreen=true",
        "126": "https:\/\/www.hackerrank.com\/challenges\/staircase?isFullScreen=true",
        "127": "https:\/\/www.hackerrank.com\/challenges\/mini-max-sum?isFullScreen=true",
        "128": "https:\/\/www.hackerrank.com\/challenges\/birthday-cake-candles?isFullScreen=true",
        "129": "https:\/\/www.hackerrank.com\/challenges\/time-conversion?isFullScreen=true",
        "130": "https:\/\/www.hackerrank.com\/challenges\/grading?isFullScreen=true",
        "131": "https:\/\/www.hackerrank.com\/challenges\/apple-and-orange?isFullScreen=true",
        "132": "https:\/\/www.hackerrank.com\/challenges\/kangaroo?isFullScreen=true",
        "133": "https:\/\/www.hackerrank.com\/challenges\/between-two-sets?isFullScreen=true",
        "134": "https:\/\/www.hackerrank.com\/challenges\/breaking-best-and-worst-records?isFullScreen=true",
        "135": "https:\/\/www.hackerrank.com\/challenges\/the-birthday-bar?isFullScreen=true",
        "136": "https:\/\/www.hackerrank.com\/challenges\/divisible-sum-pairs?isFullScreen=true",
        "137": "https:\/\/www.hackerrank.com\/challenges\/migratory-birds?isFullScreen=true",
        "138": "https:\/\/www.hackerrank.com\/challenges\/day-of-the-programmer?isFullScreen=true",
        "139": "https:\/\/www.hackerrank.com\/challenges\/bon-appetit?isFullScreen=true",
        "140": "https:\/\/www.hackerrank.com\/challenges\/sock-merchant?isFullScreen=true",
        "141": "https:\/\/www.hackerrank.com\/challenges\/drawing-book?isFullScreen=true",
        "142": "https:\/\/www.hackerrank.com\/challenges\/counting-valleys?isFullScreen=true",
        "143": "https:\/\/www.hackerrank.com\/challenges\/electronics-shop?isFullScreen=true",
        "144": "https:\/\/www.hackerrank.com\/challenges\/cats-and-a-mouse?isFullScreen=true",
        "145": "https:\/\/www.hackerrank.com\/challenges\/magic-square-forming?isFullScreen=true",
        "146": "https:\/\/www.hackerrank.com\/challenges\/picking-numbers?isFullScreen=true",
        "147": "https:\/\/www.hackerrank.com\/challenges\/climbing-the-leaderboard?isFullScreen=true",
        "148": "https:\/\/www.hackerrank.com\/challenges\/the-hurdle-race?isFullScreen=true",
        "149": "https:\/\/www.hackerrank.com\/challenges\/designer-pdf-viewer?isFullScreen=true",
        "150": "https:\/\/www.hackerrank.com\/challenges\/utopian-tree?isFullScreen=true",
        "151": "https:\/\/www.hackerrank.com\/challenges\/angry-professor?isFullScreen=true",
        "152": "https:\/\/www.hackerrank.com\/challenges\/beautiful-days-at-the-movies?isFullScreen=true",
        "153": "https:\/\/www.hackerrank.com\/challenges\/strange-advertising?isFullScreen=true",
        "154": "https:\/\/www.hackerrank.com\/challenges\/save-the-prisoner?isFullScreen=true",
        "155": "https:\/\/www.hackerrank.com\/challenges\/circular-array-rotation?isFullScreen=true",
        "156": "https:\/\/www.hackerrank.com\/challenges\/permutation-equation?isFullScreen=true",
        "157": "https:\/\/www.hackerrank.com\/challenges\/jumping-on-the-clouds-revisited?isFullScreen=true",
        "158": "https:\/\/www.hackerrank.com\/challenges\/find-digits?isFullScreen=true",
        "159": "https:\/\/www.hackerrank.com\/challenges\/extra-long-factorials?isFullScreen=true",
        "160": "https:\/\/www.hackerrank.com\/challenges\/append-and-delete?isFullScreen=true",
        "161": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-squares?isFullScreen=true",
        "162": "https:\/\/www.hackerrank.com\/challenges\/library-fine?isFullScreen=true",
        "163": "https:\/\/www.hackerrank.com\/challenges\/cut-the-sticks?isFullScreen=true",
        "164": "https:\/\/www.hackerrank.com\/challenges\/non-divisible-subset?isFullScreen=true",
        "165": "https:\/\/www.hackerrank.com\/challenges\/repeated-string?isFullScreen=true",
        "166": "https:\/\/www.hackerrank.com\/challenges\/jumping-on-the-clouds?isFullScreen=true",
        "167": "https:\/\/www.hackerrank.com\/challenges\/equality-in-a-array?isFullScreen=true",
        "168": "https:\/\/www.hackerrank.com\/challenges\/queens-attack-2?isFullScreen=true",
        "169": "https:\/\/www.hackerrank.com\/challenges\/acm-icpc-team?isFullScreen=true",
        "170": "https:\/\/www.hackerrank.com\/challenges\/solve-me-first?isFullScreen=true",
        "171": "https:\/\/www.hackerrank.com\/challenges\/simple-array-sum?isFullScreen=true",
        "172": "https:\/\/www.hackerrank.com\/challenges\/compare-the-triplets?isFullScreen=true",
        "173": "https:\/\/www.hackerrank.com\/challenges\/a-very-big-sum?isFullScreen=true",
        "174": "https:\/\/www.hackerrank.com\/challenges\/diagonal-difference?isFullScreen=true",
        "175": "https:\/\/www.hackerrank.com\/challenges\/plus-minus?isFullScreen=true",
        "176": "https:\/\/www.hackerrank.com\/challenges\/staircase?isFullScreen=true",
        "177": "https:\/\/www.hackerrank.com\/challenges\/mini-max-sum?isFullScreen=true",
        "178": "https:\/\/www.hackerrank.com\/challenges\/birthday-cake-candles?isFullScreen=true",
        "179": "https:\/\/www.hackerrank.com\/challenges\/time-conversion?isFullScreen=true",
        "180": "https:\/\/www.hackerrank.com\/challenges\/grading?isFullScreen=true",
        "181": "https:\/\/www.hackerrank.com\/challenges\/apple-and-orange?isFullScreen=true",
        "182": "https:\/\/www.hackerrank.com\/challenges\/kangaroo?isFullScreen=true",
        "183": "https:\/\/www.hackerrank.com\/challenges\/between-two-sets?isFullScreen=true",
        "184": "https:\/\/www.hackerrank.com\/challenges\/breaking-best-and-worst-records?isFullScreen=true",
        "185": "https:\/\/www.hackerrank.com\/challenges\/the-birthday-bar?isFullScreen=true",
        "186": "https:\/\/www.hackerrank.com\/challenges\/divisible-sum-pairs?isFullScreen=true",
        "187": "https:\/\/www.hackerrank.com\/challenges\/migratory-birds?isFullScreen=true",
        "188": "https:\/\/www.hackerrank.com\/challenges\/day-of-the-programmer?isFullScreen=true",
        "189": "https:\/\/www.hackerrank.com\/challenges\/bon-appetit?isFullScreen=true",
        "190": "https:\/\/www.hackerrank.com\/challenges\/sock-merchant?isFullScreen=true",
        "191": "https:\/\/www.hackerrank.com\/challenges\/drawing-book?isFullScreen=true",
        "192": "https:\/\/www.hackerrank.com\/challenges\/counting-valleys?isFullScreen=true",
        "193": "https:\/\/www.hackerrank.com\/challenges\/electronics-shop?isFullScreen=true",
        "194": "https:\/\/www.hackerrank.com\/challenges\/cats-and-a-mouse?isFullScreen=true",
        "195": "https:\/\/www.hackerrank.com\/challenges\/magic-square-forming?isFullScreen=true",
        "196": "https:\/\/www.hackerrank.com\/challenges\/picking-numbers?isFullScreen=true",
        "197": "https:\/\/www.hackerrank.com\/challenges\/climbing-the-leaderboard?isFullScreen=true",
        "198": "https:\/\/www.hackerrank.com\/challenges\/the-hurdle-race?isFullScreen=true",
        "199": "https:\/\/www.hackerrank.com\/challenges\/designer-pdf-viewer?isFullScreen=true",
        "200": "https:\/\/www.hackerrank.com\/challenges\/utopian-tree?isFullScreen=true",
        "201": "https:\/\/www.hackerrank.com\/challenges\/angry-professor?isFullScreen=true",
        "202": "https:\/\/www.hackerrank.com\/challenges\/beautiful-days-at-the-movies?isFullScreen=true",
        "203": "https:\/\/www.hackerrank.com\/challenges\/strange-advertising?isFullScreen=true",
        "204": "https:\/\/www.hackerrank.com\/challenges\/save-the-prisoner?isFullScreen=true",
        "205": "https:\/\/www.hackerrank.com\/challenges\/circular-array-rotation?isFullScreen=true",
        "206": "https:\/\/www.hackerrank.com\/challenges\/permutation-equation?isFullScreen=true",
        "207": "https:\/\/www.hackerrank.com\/challenges\/jumping-on-the-clouds-revisited?isFullScreen=true",
        "208": "https:\/\/www.hackerrank.com\/challenges\/find-digits?isFullScreen=true",
        "209": "https:\/\/www.hackerrank.com\/challenges\/extra-long-factorials?isFullScreen=true",
        "210": "https:\/\/www.hackerrank.com\/challenges\/append-and-delete?isFullScreen=true",
        "211": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-squares?isFullScreen=true",
        "212": "https:\/\/www.hackerrank.com\/challenges\/library-fine?isFullScreen=true",
        "213": "https:\/\/www.hackerrank.com\/challenges\/cut-the-sticks?isFullScreen=true",
        "214": "https:\/\/www.hackerrank.com\/challenges\/non-divisible-subset?isFullScreen=true",
        "215": "https:\/\/www.hackerrank.com\/challenges\/repeated-string?isFullScreen=true",
        "216": "https:\/\/www.hackerrank.com\/challenges\/jumping-on-the-clouds?isFullScreen=true",
        "217": "https:\/\/www.hackerrank.com\/challenges\/equality-in-a-array?isFullScreen=true",
        "218": "https:\/\/www.hackerrank.com\/challenges\/queens-attack-2?isFullScreen=true",
        "219": "https:\/\/www.hackerrank.com\/challenges\/acm-icpc-team?isFullScreen=true",
        "220": "https:\/\/www.hackerrank.com\/challenges\/taum-and-bday?isFullScreen=true",
        "221": "https:\/\/www.hackerrank.com\/challenges\/organizing-containers-of-balls?isFullScreen=true",
        "222": "https:\/\/www.hackerrank.com\/challenges\/encryption?isFullScreen=true",
        "223": "https:\/\/www.hackerrank.com\/challenges\/bigger-is-greater?isFullScreen=true"
    },
    "diff": {
        "0": "Easy",
        "1": "Easy",
        "2": "Easy",
        "3": "Easy",
        "4": "Easy",
        "5": "Easy",
        "6": "Easy",
        "7": "Easy",
        "8": "Easy",
        "9": "Easy",
        "10": "Easy",
        "11": "Easy",
        "12": "Easy",
        "13": "Easy",
        "14": "Easy",
        "15": "Easy",
        "16": "Easy",
        "17": "Easy",
        "18": "Easy",
        "19": "Easy",
        "20": "Easy",
        "21": "Easy",
        "22": "Easy",
        "23": "Easy",
        "24": "Easy",
        "25": "Easy",
        "26": "Easy",
        "27": "Easy",
        "28": "Easy",
        "29": "Easy",
        "30": "Easy",
        "31": "Easy",
        "32": "Easy",
        "33": "Easy",
        "34": "Easy",
        "35": "Easy",
        "36": "Easy",
        "37": "Easy",
        "38": "Easy",
        "39": "Easy",
        "40": "Easy",
        "41": "Easy",
        "42": "Easy",
        "43": "Easy",
        "44": "Easy",
        "45": "Medium",
        "46": "Easy",
        "47": "Medium",
        "48": "Easy",
        "49": "Easy",
        "50": "Easy",
        "51": "Easy",
        "52": "Easy",
        "53": "Easy",
        "54": "Easy",
        "55": "Easy",
        "56": "Easy",
        "57": "Easy",
        "58": "Easy",
        "59": "Easy",
        "60": "Easy",
        "61": "Easy",
        "62": "Easy",
        "63": "Easy",
        "64": "Easy",
        "65": "Easy",
        "66": "Easy",
        "67": "Easy",
        "68": "Easy",
        "69": "Easy",
        "70": "Easy",
        "71": "Easy",
        "72": "Easy",
        "73": "Easy",
        "74": "Easy",
        "75": "Medium",
        "76": "Easy",
        "77": "Medium",
        "78": "Easy",
        "79": "Easy",
        "80": "Easy",
        "81": "Easy",
        "82": "Easy",
        "83": "Easy",
        "84": "Easy",
        "85": "Easy",
        "86": "Easy",
        "87": "Easy",
        "88": "Easy",
        "89": "Easy",
        "90": "Easy",
        "91": "Easy",
        "92": "Easy",
        "93": "Easy",
        "94": "Easy",
        "95": "Easy",
        "96": "Easy",
        "97": "Easy",
        "98": "Easy",
        "99": "Easy",
        "100": "Easy",
        "101": "Easy",
        "102": "Easy",
        "103": "Easy",
        "104": "Easy",
        "105": "Medium",
        "106": "Easy",
        "107": "Medium",
        "108": "Easy",
        "109": "Easy",
        "110": "Easy",
        "111": "Easy",
        "112": "Easy",
        "113": "Easy",
        "114": "Easy",
        "115": "Easy",
        "116": "Easy",
        "117": "Easy",
        "118": "Easy",
        "119": "Medium",
        "120": "Easy",
        "121": "Easy",
        "122": "Easy",
        "123": "Easy",
        "124": "Easy",
        "125": "Easy",
        "126": "Easy",
        "127": "Easy",
        "128": "Easy",
        "129": "Easy",
        "130": "Easy",
        "131": "Easy",
        "132": "Easy",
        "133": "Easy",
        "134": "Easy",
        "135": "Easy",
        "136": "Easy",
        "137": "Easy",
        "138": "Easy",
        "139": "Easy",
        "140": "Easy",
        "141": "Easy",
        "142": "Easy",
        "143": "Easy",
        "144": "Easy",
        "145": "Medium",
        "146": "Easy",
        "147": "Medium",
        "148": "Easy",
        "149": "Easy",
        "150": "Easy",
        "151": "Easy",
        "152": "Easy",
        "153": "Easy",
        "154": "Easy",
        "155": "Easy",
        "156": "Easy",
        "157": "Easy",
        "158": "Easy",
        "159": "Medium",
        "160": "Easy",
        "161": "Easy",
        "162": "Easy",
        "163": "Easy",
        "164": "Medium",
        "165": "Easy",
        "166": "Easy",
        "167": "Easy",
        "168": "Medium",
        "169": "Easy",
        "170": "Easy",
        "171": "Easy",
        "172": "Easy",
        "173": "Easy",
        "174": "Easy",
        "175": "Easy",
        "176": "Easy",
        "177": "Easy",
        "178": "Easy",
        "179": "Easy",
        "180": "Easy",
        "181": "Easy",
        "182": "Easy",
        "183": "Easy",
        "184": "Easy",
        "185": "Easy",
        "186": "Easy",
        "187": "Easy",
        "188": "Easy",
        "189": "Easy",
        "190": "Easy",
        "191": "Easy",
        "192": "Easy",
        "193": "Easy",
        "194": "Easy",
        "195": "Medium",
        "196": "Easy",
        "197": "Medium",
        "198": "Easy",
        "199": "Easy",
        "200": "Easy",
        "201": "Easy",
        "202": "Easy",
        "203": "Easy",
        "204": "Easy",
        "205": "Easy",
        "206": "Easy",
        "207": "Easy",
        "208": "Easy",
        "209": "Medium",
        "210": "Easy",
        "211": "Easy",
        "212": "Easy",
        "213": "Easy",
        "214": "Medium",
        "215": "Easy",
        "216": "Easy",
        "217": "Easy",
        "218": "Medium",
        "219": "Easy",
        "220": "Easy",
        "221": "Medium",
        "222": "Medium",
        "223": "Medium"
    },
    "score": {
        "0": "Max Score: 1",
        "1": "Max Score: 10",
        "2": "Max Score: 10",
        "3": "Max Score: 10",
        "4": "Max Score: 10",
        "5": "Max Score: 10",
        "6": "Max Score: 10",
        "7": "Max Score: 10",
        "8": "Max Score: 10",
        "9": "Max Score: 15",
        "10": "Max Score: 10",
        "11": "Max Score: 10",
        "12": "Max Score: 10",
        "13": "Max Score: 10",
        "14": "Max Score: 10",
        "15": "Max Score: 10",
        "16": "Max Score: 10",
        "17": "Max Score: 10",
        "18": "Max Score: 15",
        "19": "Max Score: 10",
        "20": "Max Score: 1",
        "21": "Max Score: 10",
        "22": "Max Score: 10",
        "23": "Max Score: 10",
        "24": "Max Score: 10",
        "25": "Max Score: 10",
        "26": "Max Score: 10",
        "27": "Max Score: 10",
        "28": "Max Score: 10",
        "29": "Max Score: 15",
        "30": "Max Score: 10",
        "31": "Max Score: 10",
        "32": "Max Score: 10",
        "33": "Max Score: 10",
        "34": "Max Score: 10",
        "35": "Max Score: 10",
        "36": "Max Score: 10",
        "37": "Max Score: 10",
        "38": "Max Score: 15",
        "39": "Max Score: 10",
        "40": "Max Score: 10",
        "41": "Max Score: 10",
        "42": "Max Score: 15",
        "43": "Max Score: 15",
        "44": "Max Score: 15",
        "45": "Max Score: 20",
        "46": "Max Score: 20",
        "47": "Max Score: 20",
        "48": "Max Score: 15",
        "49": "Max Score: 20",
        "50": "Max Score: 1",
        "51": "Max Score: 10",
        "52": "Max Score: 10",
        "53": "Max Score: 10",
        "54": "Max Score: 10",
        "55": "Max Score: 10",
        "56": "Max Score: 10",
        "57": "Max Score: 10",
        "58": "Max Score: 10",
        "59": "Max Score: 15",
        "60": "Max Score: 10",
        "61": "Max Score: 10",
        "62": "Max Score: 10",
        "63": "Max Score: 10",
        "64": "Max Score: 10",
        "65": "Max Score: 10",
        "66": "Max Score: 10",
        "67": "Max Score: 10",
        "68": "Max Score: 15",
        "69": "Max Score: 10",
        "70": "Max Score: 10",
        "71": "Max Score: 10",
        "72": "Max Score: 15",
        "73": "Max Score: 15",
        "74": "Max Score: 15",
        "75": "Max Score: 20",
        "76": "Max Score: 20",
        "77": "Max Score: 20",
        "78": "Max Score: 15",
        "79": "Max Score: 20",
        "80": "Max Score: 1",
        "81": "Max Score: 10",
        "82": "Max Score: 10",
        "83": "Max Score: 10",
        "84": "Max Score: 10",
        "85": "Max Score: 10",
        "86": "Max Score: 10",
        "87": "Max Score: 10",
        "88": "Max Score: 10",
        "89": "Max Score: 15",
        "90": "Max Score: 10",
        "91": "Max Score: 10",
        "92": "Max Score: 10",
        "93": "Max Score: 10",
        "94": "Max Score: 10",
        "95": "Max Score: 10",
        "96": "Max Score: 10",
        "97": "Max Score: 10",
        "98": "Max Score: 15",
        "99": "Max Score: 10",
        "100": "Max Score: 10",
        "101": "Max Score: 10",
        "102": "Max Score: 15",
        "103": "Max Score: 15",
        "104": "Max Score: 15",
        "105": "Max Score: 20",
        "106": "Max Score: 20",
        "107": "Max Score: 20",
        "108": "Max Score: 15",
        "109": "Max Score: 20",
        "110": "Max Score: 20",
        "111": "Max Score: 20",
        "112": "Max Score: 15",
        "113": "Max Score: 15",
        "114": "Max Score: 15",
        "115": "Max Score: 20",
        "116": "Max Score: 20",
        "117": "Max Score: 15",
        "118": "Max Score: 25",
        "119": "Max Score: 20",
        "120": "Max Score: 1",
        "121": "Max Score: 10",
        "122": "Max Score: 10",
        "123": "Max Score: 10",
        "124": "Max Score: 10",
        "125": "Max Score: 10",
        "126": "Max Score: 10",
        "127": "Max Score: 10",
        "128": "Max Score: 10",
        "129": "Max Score: 15",
        "130": "Max Score: 10",
        "131": "Max Score: 10",
        "132": "Max Score: 10",
        "133": "Max Score: 10",
        "134": "Max Score: 10",
        "135": "Max Score: 10",
        "136": "Max Score: 10",
        "137": "Max Score: 10",
        "138": "Max Score: 15",
        "139": "Max Score: 10",
        "140": "Max Score: 10",
        "141": "Max Score: 10",
        "142": "Max Score: 15",
        "143": "Max Score: 15",
        "144": "Max Score: 15",
        "145": "Max Score: 20",
        "146": "Max Score: 20",
        "147": "Max Score: 20",
        "148": "Max Score: 15",
        "149": "Max Score: 20",
        "150": "Max Score: 20",
        "151": "Max Score: 20",
        "152": "Max Score: 15",
        "153": "Max Score: 15",
        "154": "Max Score: 15",
        "155": "Max Score: 20",
        "156": "Max Score: 20",
        "157": "Max Score: 15",
        "158": "Max Score: 25",
        "159": "Max Score: 20",
        "160": "Max Score: 20",
        "161": "Max Score: 20",
        "162": "Max Score: 15",
        "163": "Max Score: 25",
        "164": "Max Score: 20",
        "165": "Max Score: 20",
        "166": "Max Score: 20",
        "167": "Max Score: 20",
        "168": "Max Score: 30",
        "169": "Max Score: 25",
        "170": "Max Score: 1",
        "171": "Max Score: 10",
        "172": "Max Score: 10",
        "173": "Max Score: 10",
        "174": "Max Score: 10",
        "175": "Max Score: 10",
        "176": "Max Score: 10",
        "177": "Max Score: 10",
        "178": "Max Score: 10",
        "179": "Max Score: 15",
        "180": "Max Score: 10",
        "181": "Max Score: 10",
        "182": "Max Score: 10",
        "183": "Max Score: 10",
        "184": "Max Score: 10",
        "185": "Max Score: 10",
        "186": "Max Score: 10",
        "187": "Max Score: 10",
        "188": "Max Score: 15",
        "189": "Max Score: 10",
        "190": "Max Score: 10",
        "191": "Max Score: 10",
        "192": "Max Score: 15",
        "193": "Max Score: 15",
        "194": "Max Score: 15",
        "195": "Max Score: 20",
        "196": "Max Score: 20",
        "197": "Max Score: 20",
        "198": "Max Score: 15",
        "199": "Max Score: 20",
        "200": "Max Score: 20",
        "201": "Max Score: 20",
        "202": "Max Score: 15",
        "203": "Max Score: 15",
        "204": "Max Score: 15",
        "205": "Max Score: 20",
        "206": "Max Score: 20",
        "207": "Max Score: 15",
        "208": "Max Score: 25",
        "209": "Max Score: 20",
        "210": "Max Score: 20",
        "211": "Max Score: 20",
        "212": "Max Score: 15",
        "213": "Max Score: 25",
        "214": "Max Score: 20",
        "215": "Max Score: 20",
        "216": "Max Score: 20",
        "217": "Max Score: 20",
        "218": "Max Score: 30",
        "219": "Max Score: 25",
        "220": "Max Score: 25",
        "221": "Max Score: 30",
        "222": "Max Score: 30",
        "223": "Max Score: 35"
    },
    "success rate": {
        "0": "Success Rate: 97.71%",
        "1": "Success Rate: 94.57%",
        "2": "Success Rate: 95.87%",
        "3": "Success Rate: 98.82%",
        "4": "Success Rate: 96.05%",
        "5": "Success Rate: 98.40%",
        "6": "Success Rate: 98.37%",
        "7": "Success Rate: 94.49%",
        "8": "Success Rate: 97.17%",
        "9": "Success Rate: 92.42%",
        "10": "Success Rate: 96.47%",
        "11": "Success Rate: 96.35%",
        "12": "Success Rate: 89.65%",
        "13": "Success Rate: 90.96%",
        "14": "Success Rate: 98.54%",
        "15": "Success Rate: 94.22%",
        "16": "Success Rate: 97.73%",
        "17": "Success Rate: 92.11%",
        "18": "Success Rate: 90.71%",
        "19": "Success Rate: 98.03%",
        "20": "Success Rate: 97.71%",
        "21": "Success Rate: 94.57%",
        "22": "Success Rate: 95.87%",
        "23": "Success Rate: 98.82%",
        "24": "Success Rate: 96.05%",
        "25": "Success Rate: 98.40%",
        "26": "Success Rate: 98.37%",
        "27": "Success Rate: 94.49%",
        "28": "Success Rate: 97.17%",
        "29": "Success Rate: 92.42%",
        "30": "Success Rate: 96.47%",
        "31": "Success Rate: 96.35%",
        "32": "Success Rate: 89.65%",
        "33": "Success Rate: 90.96%",
        "34": "Success Rate: 98.54%",
        "35": "Success Rate: 94.22%",
        "36": "Success Rate: 97.73%",
        "37": "Success Rate: 92.11%",
        "38": "Success Rate: 90.71%",
        "39": "Success Rate: 98.03%",
        "40": "Success Rate: 92.64%",
        "41": "Success Rate: 89.93%",
        "42": "Success Rate: 95.11%",
        "43": "Success Rate: 93.14%",
        "44": "Success Rate: 97.98%",
        "45": "Success Rate: 78.88%",
        "46": "Success Rate: 90.28%",
        "47": "Success Rate: 61.96%",
        "48": "Success Rate: 98.86%",
        "49": "Success Rate: 98.80%",
        "50": "Success Rate: 97.71%",
        "51": "Success Rate: 94.57%",
        "52": "Success Rate: 95.87%",
        "53": "Success Rate: 98.82%",
        "54": "Success Rate: 96.05%",
        "55": "Success Rate: 98.40%",
        "56": "Success Rate: 98.37%",
        "57": "Success Rate: 94.49%",
        "58": "Success Rate: 97.17%",
        "59": "Success Rate: 92.42%",
        "60": "Success Rate: 96.47%",
        "61": "Success Rate: 96.35%",
        "62": "Success Rate: 89.65%",
        "63": "Success Rate: 90.96%",
        "64": "Success Rate: 98.54%",
        "65": "Success Rate: 94.22%",
        "66": "Success Rate: 97.73%",
        "67": "Success Rate: 92.11%",
        "68": "Success Rate: 90.71%",
        "69": "Success Rate: 98.03%",
        "70": "Success Rate: 92.64%",
        "71": "Success Rate: 89.93%",
        "72": "Success Rate: 95.11%",
        "73": "Success Rate: 93.14%",
        "74": "Success Rate: 97.98%",
        "75": "Success Rate: 78.88%",
        "76": "Success Rate: 90.28%",
        "77": "Success Rate: 61.96%",
        "78": "Success Rate: 98.86%",
        "79": "Success Rate: 98.80%",
        "80": "Success Rate: 97.71%",
        "81": "Success Rate: 94.57%",
        "82": "Success Rate: 95.87%",
        "83": "Success Rate: 98.82%",
        "84": "Success Rate: 96.05%",
        "85": "Success Rate: 98.40%",
        "86": "Success Rate: 98.37%",
        "87": "Success Rate: 94.49%",
        "88": "Success Rate: 97.17%",
        "89": "Success Rate: 92.42%",
        "90": "Success Rate: 96.47%",
        "91": "Success Rate: 96.35%",
        "92": "Success Rate: 89.65%",
        "93": "Success Rate: 90.96%",
        "94": "Success Rate: 98.54%",
        "95": "Success Rate: 94.22%",
        "96": "Success Rate: 97.73%",
        "97": "Success Rate: 92.11%",
        "98": "Success Rate: 90.71%",
        "99": "Success Rate: 98.03%",
        "100": "Success Rate: 92.64%",
        "101": "Success Rate: 89.93%",
        "102": "Success Rate: 95.11%",
        "103": "Success Rate: 93.14%",
        "104": "Success Rate: 97.98%",
        "105": "Success Rate: 78.88%",
        "106": "Success Rate: 90.28%",
        "107": "Success Rate: 61.96%",
        "108": "Success Rate: 98.86%",
        "109": "Success Rate: 98.80%",
        "110": "Success Rate: 97.90%",
        "111": "Success Rate: 96.42%",
        "112": "Success Rate: 96.43%",
        "113": "Success Rate: 98.67%",
        "114": "Success Rate: 82.70%",
        "115": "Success Rate: 81.57%",
        "116": "Success Rate: 97.65%",
        "117": "Success Rate: 95.30%",
        "118": "Success Rate: 96.96%",
        "119": "Success Rate: 95.61%",
        "120": "Success Rate: 97.71%",
        "121": "Success Rate: 94.57%",
        "122": "Success Rate: 95.87%",
        "123": "Success Rate: 98.82%",
        "124": "Success Rate: 96.05%",
        "125": "Success Rate: 98.40%",
        "126": "Success Rate: 98.37%",
        "127": "Success Rate: 94.49%",
        "128": "Success Rate: 97.17%",
        "129": "Success Rate: 92.42%",
        "130": "Success Rate: 96.47%",
        "131": "Success Rate: 96.35%",
        "132": "Success Rate: 89.65%",
        "133": "Success Rate: 90.96%",
        "134": "Success Rate: 98.54%",
        "135": "Success Rate: 94.22%",
        "136": "Success Rate: 97.73%",
        "137": "Success Rate: 92.11%",
        "138": "Success Rate: 90.71%",
        "139": "Success Rate: 98.03%",
        "140": "Success Rate: 92.64%",
        "141": "Success Rate: 89.93%",
        "142": "Success Rate: 95.11%",
        "143": "Success Rate: 93.14%",
        "144": "Success Rate: 97.98%",
        "145": "Success Rate: 78.88%",
        "146": "Success Rate: 90.28%",
        "147": "Success Rate: 61.96%",
        "148": "Success Rate: 98.86%",
        "149": "Success Rate: 98.80%",
        "150": "Success Rate: 97.90%",
        "151": "Success Rate: 96.42%",
        "152": "Success Rate: 96.43%",
        "153": "Success Rate: 98.67%",
        "154": "Success Rate: 82.70%",
        "155": "Success Rate: 81.57%",
        "156": "Success Rate: 97.65%",
        "157": "Success Rate: 95.30%",
        "158": "Success Rate: 96.96%",
        "159": "Success Rate: 95.61%",
        "160": "Success Rate: 70.38%",
        "161": "Success Rate: 87.22%",
        "162": "Success Rate: 89.95%",
        "163": "Success Rate: 95.02%",
        "164": "Success Rate: 68.78%",
        "165": "Success Rate: 90.40%",
        "166": "Success Rate: 94.08%",
        "167": "Success Rate: 94.85%",
        "168": "Success Rate: 69.06%",
        "169": "Success Rate: 89.78%",
        "170": "Success Rate: 97.71%",
        "171": "Success Rate: 94.57%",
        "172": "Success Rate: 95.87%",
        "173": "Success Rate: 98.82%",
        "174": "Success Rate: 96.05%",
        "175": "Success Rate: 98.40%",
        "176": "Success Rate: 98.37%",
        "177": "Success Rate: 94.49%",
        "178": "Success Rate: 97.17%",
        "179": "Success Rate: 92.42%",
        "180": "Success Rate: 96.47%",
        "181": "Success Rate: 96.35%",
        "182": "Success Rate: 89.65%",
        "183": "Success Rate: 90.96%",
        "184": "Success Rate: 98.54%",
        "185": "Success Rate: 94.22%",
        "186": "Success Rate: 97.73%",
        "187": "Success Rate: 92.11%",
        "188": "Success Rate: 90.71%",
        "189": "Success Rate: 98.03%",
        "190": "Success Rate: 92.64%",
        "191": "Success Rate: 89.93%",
        "192": "Success Rate: 95.11%",
        "193": "Success Rate: 93.14%",
        "194": "Success Rate: 97.98%",
        "195": "Success Rate: 78.88%",
        "196": "Success Rate: 90.28%",
        "197": "Success Rate: 61.96%",
        "198": "Success Rate: 98.86%",
        "199": "Success Rate: 98.80%",
        "200": "Success Rate: 97.90%",
        "201": "Success Rate: 96.42%",
        "202": "Success Rate: 96.43%",
        "203": "Success Rate: 98.67%",
        "204": "Success Rate: 82.70%",
        "205": "Success Rate: 81.57%",
        "206": "Success Rate: 97.65%",
        "207": "Success Rate: 95.30%",
        "208": "Success Rate: 96.96%",
        "209": "Success Rate: 95.61%",
        "210": "Success Rate: 70.38%",
        "211": "Success Rate: 87.22%",
        "212": "Success Rate: 89.95%",
        "213": "Success Rate: 95.02%",
        "214": "Success Rate: 68.78%",
        "215": "Success Rate: 90.40%",
        "216": "Success Rate: 94.08%",
        "217": "Success Rate: 94.85%",
        "218": "Success Rate: 69.06%",
        "219": "Success Rate: 89.78%",
        "220": "Success Rate: 89.83%",
        "221": "Success Rate: 86.63%",
        "222": "Success Rate: 92.05%",
        "223": "Success Rate: 81.72%"
    },
    "text": {
        "0": "Complete the function solveMeFirst to compute the sum of two integers.\nExample\n\nReturn .\nFunction Description\nComplete the solveMeFirst function in the editor below.\nsolveMeFirst has the following parameters:\nint a: the first value\nint b: the second value\nReturns\n- int: the sum of and\nConstraints\nSample Input\na = 2\nb = 3\nSample Output\n5\nExplanation\n.",
        "1": "Given an array of integers, find the sum of its elements.\nFor example, if the array , , so return .\nFunction Description\nComplete the simpleArraySum function in the editor below. It must return the sum of the array elements as an integer.\nsimpleArraySum has the following parameter(s):\nar: an array of integers\nInput Format\nThe first line contains an integer, , denoting the size of the array.\nThe second line contains space-separated integers representing the array's elements.\nConstraints\nOutput Format\nPrint the sum of the array's elements as a single integer.\nSample Input\n6\n1 2 3 4 10 11\nSample Output\n31\nExplanation\nWe print the sum of the array's elements: .",
        "2": "Alice and Bob each created one problem for HackerRank. A reviewer rates the two challenges, awarding points on a scale from 1 to 100 for three categories: problem clarity, originality, and difficulty.\nThe rating for Alice's challenge is the triplet a = (a[0], a[1], a[2]), and the rating for Bob's challenge is the triplet b = (b[0], b[1], b[2]).\nThe task is to find their comparison points by comparing a[0] with b[0], a[1] with b[1], and a[2] with b[2].\nIf a[i] > b[i], then Alice is awarded 1 point.\nIf a[i] < b[i], then Bob is awarded 1 point.\nIf a[i] = b[i], then neither person receives a point.\nComparison points is the total points a person earned.\nGiven a and b, determine their respective comparison points.\nExample\na = [1, 2, 3]\nb = [3, 2, 1]\nFor elements *0*, Bob is awarded a point because a[0] .\nFor the equal elements a[1] and b[1], no points are earned.\nFinally, for elements 2, a[2] > b[2] so Alice receives a point.\nThe return array is [1, 1] with Alice's score first and Bob's second.\nFunction Description\nComplete the function compareTriplets in the editor below.\ncompareTriplets has the following parameter(s):\nint a[3]: Alice's challenge rating\nint b[3]: Bob's challenge rating\nReturn\nint[2]: Alice's score is in the first position, and Bob's score is in the second.\nInput Format\nThe first line contains 3 space-separated integers, a[0], a[1], and a[2], the respective values in triplet a.\nThe second line contains 3 space-separated integers, b[0], b[1], and b[2], the respective values in triplet b.\nConstraints\n1 \u2264 a[i] \u2264 100\n1 \u2264 b[i] \u2264 100\nSample Input 0\n5 6 7\n3 6 10\nSample Output 0\n1 1\nExplanation 0\nIn this example:\nNow, let's compare each individual score:\n, so Alice receives point.\n, so nobody receives a point.\n, so Bob receives point.\nAlice's comparison score is , and Bob's comparison score is . Thus, we return the array .\nSample Input 1\n17 28 30\n99 16 8\nSample Output 1\n2 1\nExplanation 1\nComparing the elements, so Bob receives a point.\nComparing the and elements, and so Alice receives two points.\nThe return array is .",
        "3": "In this challenge, you are required to calculate and print the sum of the elements in an array, keeping in mind that some of those integers may be quite large.\nFunction Description\nComplete the aVeryBigSum function in the editor below. It must return the sum of all array elements.\naVeryBigSum has the following parameter(s):\nint ar[n]: an array of integers .\nReturn\nlong: the sum of all array elements\nInput Format\nThe first line of the input consists of an integer .\nThe next line contains space-separated integers contained in the array.\nOutput Format\nReturn the integer sum of the elements in the array.\nConstraints\n\nSample Input\n5\n1000000001 1000000002 1000000003 1000000004 1000000005\nOutput\n5000000015\nNote:\nThe range of the 32-bit integer is .\nWhen we add several integer values, the resulting sum might exceed the above range. You might need to use long int C\/C++\/Java to store such sums.",
        "4": "Given a square matrix, calculate the absolute difference between the sums of its diagonals.\nFor example, the square matrix is shown below:\n1 2 3\n4 5 6\n9 8 9  \nThe left-to-right diagonal = . The right to left diagonal = . Their absolute difference is .\nFunction description\nComplete the function in the editor below.\ndiagonalDifference takes the following parameter:\nint arr[n][m]: an array of integers\nReturn\nint: the absolute diagonal difference\nInput Format\nThe first line contains a single integer, , the number of rows and columns in the square matrix .\nEach of the next lines describes a row, , and consists of space-separated integers .\nConstraints\nOutput Format\nReturn the absolute difference between the sums of the matrix's two diagonals as a single integer.\nSample Input\n3\n11 2 4\n4 5 6\n10 8 -12\nSample Output\n15\nExplanation\nThe primary diagonal is:\n11\n   5\n     -12\nSum across the primary diagonal: 11 + 5 - 12 = 4\nThe secondary diagonal is:\n     4\n   5\n10\nSum across the secondary diagonal: 4 + 5 + 10 = 19\nDifference: |4 - 19| = 15\nNote: |x| is the absolute value of x",
        "5": "Given an array of integers, calculate the ratios of its elements that are positive, negative, and zero. Print the decimal value of each fraction on a new line with places after the decimal.\nNote: This challenge introduces precision problems. The test cases are scaled to six decimal places, though answers with absolute error of up to are acceptable.\nExample\nThere are elements, two positive, two negative and one zero. Their ratios are , and . Results are printed as:\n0.400000\n0.400000\n0.200000\nFunction Description\nComplete the plusMinus function in the editor below.\nplusMinus has the following parameter(s):\nint arr[n]: an array of integers\nPrint\nPrint the ratios of positive, negative and zero values in the array. Each value should be printed on a separate line with digits after the decimal. The function should not return a value.\nInput Format\nThe first line contains an integer, , the size of the array.\nThe second line contains space-separated integers that describe .\nConstraints\n\nOutput Format\nPrint the following lines, each to decimals:\nproportion of positive values\nproportion of negative values\nproportion of zeros\nSample Input\nSTDIN           Function\n-----           --------\n6               arr[] size n = 6\n-4 3 -9 0 4 1   arr = [-4, 3, -9, 0, 4, 1]\nSample Output\n0.500000\n0.333333\n0.166667\nExplanation\nThere are positive numbers, negative numbers, and zero in the array.\nThe proportions of occurrence are positive: , negative: and zeros: .",
        "6": "Staircase detail\nThis is a staircase of size :\n   #\n  ##\n ###\n####\nIts base and height are both equal to . It is drawn using # symbols and spaces. The last line is not preceded by any spaces.\nWrite a program that prints a staircase of size .\nFunction Description\nComplete the staircase function in the editor below.\nstaircase has the following parameter(s):\nint n: an integer\nPrint\nPrint a staircase as described above.\nInput Format\nA single integer, , denoting the size of the staircase.\nConstraints\n.\nOutput Format\nPrint a staircase of size using # symbols and spaces.\nNote: The last line must have spaces in it.\nSample Input\n6 \nSample Output\n     #\n    ##\n   ###\n  ####\n #####\n######\nExplanation\nThe staircase is right-aligned, composed of # symbols and spaces, and has a height and width of .",
        "7": "Given five positive integers, find the minimum and maximum values that can be calculated by summing exactly four of the five integers. Then print the respective minimum and maximum values as a single line of two space-separated long integers.\nExample\nThe minimum sum is and the maximum sum is . The function prints\n16 24\nFunction Description\nComplete the miniMaxSum function in the editor below.\nminiMaxSum has the following parameter(s):\narr: an array of integers\nPrint\nPrint two space-separated integers on one line: the minimum sum and the maximum sum of of elements.\nInput Format\nA single line of five space-separated integers.\nConstraints\nOutput Format\nPrint two space-separated long integers denoting the respective minimum and maximum values that can be calculated by summing exactly four of the five integers. (The output can be greater than a 32 bit integer.)\nSample Input\n1 2 3 4 5\nSample Output\n10 14\nExplanation\nThe numbers are , , , , and . Calculate the following sums using four of the five integers:\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nHints: Beware of integer overflow! Use 64-bit Integer.\nNeed help to get started? Try the Solve Me First problem",
        "8": "You are in charge of the cake for a child's birthday. You have decided the cake will have one candle for each year of their total age. They will only be able to blow out the tallest of the candles. Count how many candles are tallest.\nExample\nThe maximum height candles are units high. There are of them, so return .\nFunction Description\nComplete the function birthdayCakeCandles in the editor below.\nbirthdayCakeCandles has the following parameter(s):\nint candles[n]: the candle heights\nReturns\nint: the number of candles that are tallest\nInput Format\nThe first line contains a single integer, , the size of .\nThe second line contains space-separated integers, where each integer describes the height of .\nConstraints\nSample Input 0\n4\n3 2 1 3\nSample Output 0\n2\nExplanation 0\nCandle heights are . The tallest candles are units, and there are of them.",
        "9": "Given a time in -hour AM\/PM format, convert it to military (24-hour) time.\nNote: - 12:00:00AM on a 12-hour clock is 00:00:00 on a 24-hour clock.\n- 12:00:00PM on a 12-hour clock is 12:00:00 on a 24-hour clock.\nExample\nReturn '12:01:00'.\nReturn '00:01:00'.\nFunction Description\nComplete the timeConversion function in the editor below. It should return a new string representing the input time in 24 hour format.\ntimeConversion has the following parameter(s):\nstring s: a time in hour format\nReturns\nstring: the time in hour format\nInput Format\nA single string that represents a time in -hour clock format (i.e.: or ).\nConstraints\nAll input times are valid\nSample Input 0\n07:05:45PM\nSample Output 0\n19:05:45",
        "10": "HackerLand University has the following grading policy:\nEvery student receives a in the inclusive range from to .\nAny less than is a failing grade.\nSam is a professor at the university and likes to round each student's according to these rules:\nIf the difference between the and the next multiple of is less than , round up to the next multiple of .\nIf the value of is less than , no rounding occurs as the result will still be a failing grade.\nExamples\nround to (85 - 84 is less than 3)\ndo not round (result is less than 40)\ndo not round (60 - 57 is 3 or higher)\nGiven the initial value of for each of Sam's students, write code to automate the rounding process.\nFunction Description\nComplete the function gradingStudents in the editor below.\ngradingStudents has the following parameter(s):\nint grades[n]: the grades before rounding\nReturns\nint[n]: the grades after rounding as appropriate\nInput Format\nThe first line contains a single integer, , the number of students.\nEach line of the subsequent lines contains a single integer, .\nConstraints\nSample Input 0\n4\n73\n67\n38\n33\nSample Output 0\n75\n67\n40\n33\nExplanation 0\nStudent received a , and the next multiple of from is . Since , the student's grade is rounded to .\nStudent received a , and the next multiple of from is . Since , the grade will not be modified and the student's final grade is .\nStudent received a , and the next multiple of from is . Since , the student's grade will be rounded to .\nStudent received a grade below , so the grade will not be modified and the student's final grade is .",
        "11": "Sam's house has an apple tree and an orange tree that yield an abundance of fruit. Using the information given below, determine the number of apples and oranges that land on Sam's house.\nIn the diagram below:\nThe red region denotes the house, where is the start point, and is the endpoint. The apple tree is to the left of the house, and the orange tree is to its right.\nAssume the trees are located on a single point, where the apple tree is at point , and the orange tree is at point .\nWhen a fruit falls from its tree, it lands units of distance from its tree of origin along the -axis. *A negative value of means the fruit fell units to the tree's left, and a positive value of means it falls units to the tree's right. *\nGiven the value of for apples and oranges, determine how many apples and oranges will fall on Sam's house (i.e., in the inclusive range )?\nFor example, Sam's house is between and . The apple tree is located at and the orange at . There are apples and oranges. Apples are thrown units distance from , and units distance. Adding each apple distance to the position of the tree, they land at . Oranges land at . One apple and two oranges land in the inclusive range so we print\n1\n2\nFunction Description\nComplete the countApplesAndOranges function in the editor below. It should print the number of apples and oranges that land on Sam's house, each on a separate line.\ncountApplesAndOranges has the following parameter(s):\ns: integer, starting point of Sam's house location.\nt: integer, ending location of Sam's house location.\na: integer, location of the Apple tree.\nb: integer, location of the Orange tree.\napples: integer array, distances at which each apple falls from the tree.\noranges: integer array, distances at which each orange falls from the tree.\nInput Format\nThe first line contains two space-separated integers denoting the respective values of and .\nThe second line contains two space-separated integers denoting the respective values of and .\nThe third line contains two space-separated integers denoting the respective values of and .\nThe fourth line contains space-separated integers denoting the respective distances that each apple falls from point .\nThe fifth line contains space-separated integers denoting the respective distances that each orange falls from point .\nConstraints\nOutput Format\nPrint two integers on two different lines:\nThe first integer: the number of apples that fall on Sam's house.\nThe second integer: the number of oranges that fall on Sam's house.\nSample Input 0\n7 11\n5 15\n3 2\n-2 2 1\n5 -6\nSample Output 0\n1\n1\nExplanation 0\nThe first apple falls at position .\nThe second apple falls at position .\nThe third apple falls at position .\nThe first orange falls at position .\nThe second orange falls at position .\nOnly one fruit (the second apple) falls within the region between and , so we print as our first line of output.\nOnly the second orange falls within the region between and , so we print as our second line of output.",
        "12": "You are choreographing a circus show with various animals. For one act, you are given two kangaroos on a number line ready to jump in the positive direction (i.e, toward positive infinity).\nThe first kangaroo starts at location and moves at a rate of meters per jump.\nThe second kangaroo starts at location and moves at a rate of meters per jump.\nYou have to figure out a way to get both kangaroos at the same location at the same time as part of the show. If it is possible, return YES, otherwise return NO.\nExample\n\n\n\nAfter one jump, they are both at , (, ), so the answer is YES.\nFunction Description\nComplete the function kangaroo in the editor below.\nkangaroo has the following parameter(s):\nint x1, int v1: starting position and jump distance for kangaroo 1\nint x2, int v2: starting position and jump distance for kangaroo 2\nReturns\nstring: either YES or NO\nInput Format\nA single line of four space-separated integers denoting the respective values of , , , and .\nConstraints\nSample Input 0\n0 3 4 2\nSample Output 0\nYES\nExplanation 0\nThe two kangaroos jump through the following sequence of locations:\nFrom the image, it is clear that the kangaroos meet at the same location (number on the number line) after same number of jumps ( jumps), and we print YES.\nSample Input 1\n0 2 5 3\nSample Output 1\nNO\nExplanation 1\nThe second kangaroo has a starting location that is ahead (further to the right) of the first kangaroo's starting location (i.e., ). Because the second kangaroo moves at a faster rate (meaning ) and is already ahead of the first kangaroo, the first kangaroo will never be able to catch up. Thus, we print NO.",
        "13": "There will be two arrays of integers. Determine all integers that satisfy the following two conditions:\nThe elements of the first array are all factors of the integer being considered\nThe integer being considered is a factor of all elements of the second array\nThese numbers are referred to as being between the two arrays. Determine how many such numbers exist.\nExample\n\nThere are two numbers between the arrays: and .\n, , and for the first value.\n, and , for the second value. Return .\nFunction Description\nComplete the getTotalX function in the editor below. It should return the number of integers that are betwen the sets.\ngetTotalX has the following parameter(s):\nint a[n]: an array of integers\nint b[m]: an array of integers\nReturns\nint: the number of integers that are between the sets\nInput Format\nThe first line contains two space-separated integers, and , the number of elements in arrays and .\nThe second line contains distinct space-separated integers where .\nThe third line contains distinct space-separated integers where .\nConstraints\nSample Input\n2 3\n2 4\n16 32 96\nSample Output\n3\nExplanation\n2 and 4 divide evenly into 4, 8, 12 and 16.\n4, 8 and 16 divide evenly into 16, 32, 96.\n4, 8 and 16 are the only three numbers for which each element of a is a factor and each is a factor of all elements of b.",
        "14": "Maria plays college basketball and wants to go pro. Each season she maintains a record of her play. She tabulates the number of times she breaks her season record for most points and least points in a game. Points scored in the first game establish her record for the season, and she begins counting from there.\nExample\nScores are in the same order as the games played. She tabulates her results as follows:\n                                     Count\n    Game  Score  Minimum  Maximum   Min Max\n     0      12     12       12       0   0\n     1      24     12       24       0   1\n     2      10     10       24       1   1\n     3      24     10       24       1   1\nGiven the scores for a season, determine the number of times Maria breaks her records for most and least points scored during the season.\nFunction Description\nComplete the breakingRecords function in the editor below.\nbreakingRecords has the following parameter(s):\nint scores[n]: points scored per game\nReturns\nint[2]: An array with the numbers of times she broke her records. Index is for breaking most points records, and index is for breaking least points records.\nInput Format\nThe first line contains an integer , the number of games.\nThe second line contains space-separated integers describing the respective values of .\nConstraints\nSample Input 0\n9\n10 5 20 20 4 5 2 25 1\nSample Output 0\n2 4\nExplanation 0\nThe diagram below depicts the number of times Maria broke her best and worst records throughout the season:\nShe broke her best record twice (after games and ) and her worst record four times (after games , , , and ), so we print 2 4 as our answer. Note that she did not break her record for best score during game , as her score during that game was not strictly greater than her best record at the time.\nSample Input 1\n10\n3 4 21 36 10 28 35 5 24 42\nSample Output 1\n4 0\nExplanation 1\nThe diagram below depicts the number of times Maria broke her best and worst records throughout the season:\nShe broke her best record four times (after games , , , and ) and her worst record zero times (no score during the season was lower than the one she earned during her first game), so we print 4 0 as our answer.",
        "15": "Two children, Lily and Ron, want to share a chocolate bar. Each of the squares has an integer on it.\nLily decides to share a contiguous segment of the bar selected such that:\nThe length of the segment matches Ron's birth month, and,\nThe sum of the integers on the squares is equal to his birth day.\nDetermine how many ways she can divide the chocolate.\nExample\n\n\nLily wants to find segments summing to Ron's birth day, with a length equalling his birth month, . In this case, there are two segments meeting her criteria: and .\nFunction Description\nComplete the birthday function in the editor below.\nbirthday has the following parameter(s):\nint s[n]: the numbers on each of the squares of chocolate\nint d: Ron's birth day\nint m: Ron's birth month\nReturns\nint: the number of ways the bar can be divided\nInput Format\nThe first line contains an integer , the number of squares in the chocolate bar.\nThe second line contains space-separated integers , the numbers on the chocolate squares where .\nThe third line contains two space-separated integers, and , Ron's birth day and his birth month.\nConstraints\n, where ()\nSample Input 0\n5\n1 2 1 3 2\n3 2\nSample Output 0\n2\nExplanation 0\nLily wants to give Ron squares summing to . The following two segments meet the criteria:\nSample Input 1\n6\n1 1 1 1 1 1\n3 2\nSample Output 1\n0\nExplanation 1\nLily only wants to give Ron consecutive squares of chocolate whose integers sum to . There are no possible pieces satisfying these constraints:\nThus, we print as our answer.\nSample Input 2\n1\n4\n4 1\nSample Output 2\n1\nExplanation 2\nLily only wants to give Ron square of chocolate with an integer value of . Because the only square of chocolate in the bar satisfies this constraint, we print as our answer.",
        "16": "Given an array of integers and a positive integer , determine the number of pairs where and + is divisible by .\nExample\n\nThree pairs meet the criteria: and .\nFunction Description\nComplete the divisibleSumPairs function in the editor below.\ndivisibleSumPairs has the following parameter(s):\nint n: the length of array\nint ar[n]: an array of integers\nint k: the integer divisor\nReturns\n- int: the number of pairs\nInput Format\nThe first line contains space-separated integers, and .\nThe second line contains space-separated integers, each a value of .\nConstraints\nSample Input\nSTDIN           Function\n-----           --------\n6 3             n = 6, k = 3\n1 3 2 6 1 2     ar = [1, 3, 2, 6, 1, 2]\nSample Output\n 5\nExplanation\nHere are the valid pairs when :",
        "17": "Given an array of bird sightings where every element represents a bird type id, determine the id of the most frequently sighted type. If more than 1 type has been spotted that maximum amount, return the smallest of their ids.\nExample\nThere are two each of types and , and one sighting of type . Pick the lower of the two types seen twice: type .\nFunction Description\nComplete the migratoryBirds function in the editor below.\nmigratoryBirds has the following parameter(s):\nint arr[n]: the types of birds sighted\nReturns\nint: the lowest type id of the most frequently sighted birds\nInput Format\nThe first line contains an integer, , the size of .\nThe second line describes as space-separated integers, each a type number of the bird sighted.\nConstraints\nIt is guaranteed that each type is , , , , or .\nSample Input 0\n6\n1 4 4 4 5 3\nSample Output 0\n4\nExplanation 0\nThe different types of birds occur in the following frequencies:\nType : bird\nType : birds\nType : bird\nType : birds\nType : bird\nThe type number that occurs at the highest frequency is type , so we print as our answer.\nSample Input 1\n11\n1 2 3 4 5 4 3 2 1 3 4\nSample Output 1\n3\nExplanation 1\nThe different types of birds occur in the following frequencies:\nType :\nType :\nType :\nType :\nType :\nTwo types have a frequency of , and the lower of those is type .",
        "18": "Marie invented a Time Machine and wants to test it by time-traveling to visit Russia on the Day of the Programmer (the 256th day of the year) during a year in the inclusive range from 1700 to 2700.\nFrom 1700 to 1917, Russia's official calendar was the Julian calendar; since 1919 they used the Gregorian calendar system. The transition from the Julian to Gregorian calendar system occurred in 1918, when the next day after January 31st was February 14th. This means that in 1918, February 14th was the 32nd day of the year in Russia.\nIn both calendar systems, February is the only month with a variable amount of days; it has 29 days during a leap year, and 28 days during all other years. In the Julian calendar, leap years are divisible by 4; in the Gregorian calendar, leap years are either of the following:\nDivisible by 400.\nDivisible by 4 and not divisible by 100.\nGiven a year, , find the date of the 256th day of that year according to the official Russian calendar during that year. Then print it in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is .\nFor example, the given = 1984. 1984 is divisible by 4, so it is a leap year. The 256th day of a leap year after 1918 is September 12, so the answer is .\nFunction Description\nComplete the dayOfProgrammer function in the editor below. It should return a string representing the date of the 256th day of the year given.\ndayOfProgrammer has the following parameter(s):\nyear: an integer\nInput Format\nA single integer denoting year .\nConstraints\n1700 \\le y \\le 2700\nOutput Format\nPrint the full date of Day of the Programmer during year in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is .\nSample Input 0\n2017\nSample Output 0\n13.09.2017\nExplanation 0\nIn the year = 2017, January has 31 days, February has 28 days, March has 31 days, April has 30 days, May has 31 days, June has 30 days, July has 31 days, and August has 31 days. When we sum the total number of days in the first eight months, we get 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 = 243. Day of the Programmer is the 256th day, so then calculate 256 - 243 = 13 to determine that it falls on day 13 of the 9th month (September). We then print the full date in the specified format, which is 13.09.2017.\nSample Input 1\n2016\nSample Output 1\n12.09.2016\nExplanation 1\nYear = 2016 is a leap year, so February has 29 days but all the other months have the same number of days as in 2017. When we sum the total number of days in the first eight months, we get 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 = 244. Day of the Programmer is the 256th day, so then calculate 256 - 244 = 12 to determine that it falls on day 12 of the 9th month (September). We then print the full date in the specified format, which is 12.09.2016.\nSample Input 2\n1800\nSample Output 2\n12.09.1800\nExplanation 2\nSince 1800 is leap year as per Julian calendar. Day lies on 12 September.",
        "19": "Two friends Anna and Brian, are deciding how to split the bill at a dinner. Each will only pay for the items they consume. Brian gets the check and calculates Anna's portion. You must determine if his calculation is correct.\nFor example, assume the bill has the following prices: . Anna declines to eat item which costs . If Brian calculates the bill correctly, Anna will pay . If he includes the cost of , he will calculate . In the second case, he should refund to Anna.\nFunction Description\nComplete the bonAppetit function in the editor below. It should print Bon Appetit if the bill is fairly split. Otherwise, it should print the integer amount of money that Brian owes Anna.\nbonAppetit has the following parameter(s):\nbill: an array of integers representing the cost of each item ordered\nk: an integer representing the zero-based index of the item Anna doesn't eat\nb: the amount of money that Anna contributed to the bill\nInput Format\nThe first line contains two space-separated integers and , the number of items ordered and the -based index of the item that Anna did not eat.\nThe second line contains space-separated integers where .\nThe third line contains an integer, , the amount of money that Brian charged Anna for her share of the bill.\nConstraints\nThe amount of money due Anna will always be an integer\nOutput Format\nIf Brian did not overcharge Anna, print Bon Appetit on a new line; otherwise, print the difference (i.e., ) that Brian must refund to Anna. This will always be an integer.\nSample Input 0\n4 1\n3 10 2 9\n12\nSample Output 0\n5\nExplanation 0\nAnna didn't eat item , but she shared the rest of the items with Brian. The total cost of the shared items is and, split in half, the cost per person is . Brian charged her for her portion of the bill. We print the amount Anna was overcharged, , on a new line.\nSample Input 1\n4 1\n3 10 2 9\n7\nSample Output 1\nBon Appetit\nExplanation 1\nAnna didn't eat item , but she shared the rest of the items with Brian. The total cost of the shared items is and, split in half, the cost per person is . Because , we print Bon Appetit on a new line.",
        "20": "Complete the function solveMeFirst to compute the sum of two integers.\nExample\n\nReturn .\nFunction Description\nComplete the solveMeFirst function in the editor below.\nsolveMeFirst has the following parameters:\nint a: the first value\nint b: the second value\nReturns\n- int: the sum of and\nConstraints\nSample Input\na = 2\nb = 3\nSample Output\n5\nExplanation\n.",
        "21": "Given an array of integers, find the sum of its elements.\nFor example, if the array , , so return .\nFunction Description\nComplete the simpleArraySum function in the editor below. It must return the sum of the array elements as an integer.\nsimpleArraySum has the following parameter(s):\nar: an array of integers\nInput Format\nThe first line contains an integer, , denoting the size of the array.\nThe second line contains space-separated integers representing the array's elements.\nConstraints\nOutput Format\nPrint the sum of the array's elements as a single integer.\nSample Input\n6\n1 2 3 4 10 11\nSample Output\n31\nExplanation\nWe print the sum of the array's elements: .",
        "22": "Alice and Bob each created one problem for HackerRank. A reviewer rates the two challenges, awarding points on a scale from 1 to 100 for three categories: problem clarity, originality, and difficulty.\nThe rating for Alice's challenge is the triplet a = (a[0], a[1], a[2]), and the rating for Bob's challenge is the triplet b = (b[0], b[1], b[2]).\nThe task is to find their comparison points by comparing a[0] with b[0], a[1] with b[1], and a[2] with b[2].\nIf a[i] > b[i], then Alice is awarded 1 point.\nIf a[i] < b[i], then Bob is awarded 1 point.\nIf a[i] = b[i], then neither person receives a point.\nComparison points is the total points a person earned.\nGiven a and b, determine their respective comparison points.\nExample\na = [1, 2, 3]\nb = [3, 2, 1]\nFor elements *0*, Bob is awarded a point because a[0] .\nFor the equal elements a[1] and b[1], no points are earned.\nFinally, for elements 2, a[2] > b[2] so Alice receives a point.\nThe return array is [1, 1] with Alice's score first and Bob's second.\nFunction Description\nComplete the function compareTriplets in the editor below.\ncompareTriplets has the following parameter(s):\nint a[3]: Alice's challenge rating\nint b[3]: Bob's challenge rating\nReturn\nint[2]: Alice's score is in the first position, and Bob's score is in the second.\nInput Format\nThe first line contains 3 space-separated integers, a[0], a[1], and a[2], the respective values in triplet a.\nThe second line contains 3 space-separated integers, b[0], b[1], and b[2], the respective values in triplet b.\nConstraints\n1 \u2264 a[i] \u2264 100\n1 \u2264 b[i] \u2264 100\nSample Input 0\n5 6 7\n3 6 10\nSample Output 0\n1 1\nExplanation 0\nIn this example:\nNow, let's compare each individual score:\n, so Alice receives point.\n, so nobody receives a point.\n, so Bob receives point.\nAlice's comparison score is , and Bob's comparison score is . Thus, we return the array .\nSample Input 1\n17 28 30\n99 16 8\nSample Output 1\n2 1\nExplanation 1\nComparing the elements, so Bob receives a point.\nComparing the and elements, and so Alice receives two points.\nThe return array is .",
        "23": "In this challenge, you are required to calculate and print the sum of the elements in an array, keeping in mind that some of those integers may be quite large.\nFunction Description\nComplete the aVeryBigSum function in the editor below. It must return the sum of all array elements.\naVeryBigSum has the following parameter(s):\nint ar[n]: an array of integers .\nReturn\nlong: the sum of all array elements\nInput Format\nThe first line of the input consists of an integer .\nThe next line contains space-separated integers contained in the array.\nOutput Format\nReturn the integer sum of the elements in the array.\nConstraints\n\nSample Input\n5\n1000000001 1000000002 1000000003 1000000004 1000000005\nOutput\n5000000015\nNote:\nThe range of the 32-bit integer is .\nWhen we add several integer values, the resulting sum might exceed the above range. You might need to use long int C\/C++\/Java to store such sums.",
        "24": "Given a square matrix, calculate the absolute difference between the sums of its diagonals.\nFor example, the square matrix is shown below:\n1 2 3\n4 5 6\n9 8 9  \nThe left-to-right diagonal = . The right to left diagonal = . Their absolute difference is .\nFunction description\nComplete the function in the editor below.\ndiagonalDifference takes the following parameter:\nint arr[n][m]: an array of integers\nReturn\nint: the absolute diagonal difference\nInput Format\nThe first line contains a single integer, , the number of rows and columns in the square matrix .\nEach of the next lines describes a row, , and consists of space-separated integers .\nConstraints\nOutput Format\nReturn the absolute difference between the sums of the matrix's two diagonals as a single integer.\nSample Input\n3\n11 2 4\n4 5 6\n10 8 -12\nSample Output\n15\nExplanation\nThe primary diagonal is:\n11\n   5\n     -12\nSum across the primary diagonal: 11 + 5 - 12 = 4\nThe secondary diagonal is:\n     4\n   5\n10\nSum across the secondary diagonal: 4 + 5 + 10 = 19\nDifference: |4 - 19| = 15\nNote: |x| is the absolute value of x",
        "25": "Given an array of integers, calculate the ratios of its elements that are positive, negative, and zero. Print the decimal value of each fraction on a new line with places after the decimal.\nNote: This challenge introduces precision problems. The test cases are scaled to six decimal places, though answers with absolute error of up to are acceptable.\nExample\nThere are elements, two positive, two negative and one zero. Their ratios are , and . Results are printed as:\n0.400000\n0.400000\n0.200000\nFunction Description\nComplete the plusMinus function in the editor below.\nplusMinus has the following parameter(s):\nint arr[n]: an array of integers\nPrint\nPrint the ratios of positive, negative and zero values in the array. Each value should be printed on a separate line with digits after the decimal. The function should not return a value.\nInput Format\nThe first line contains an integer, , the size of the array.\nThe second line contains space-separated integers that describe .\nConstraints\n\nOutput Format\nPrint the following lines, each to decimals:\nproportion of positive values\nproportion of negative values\nproportion of zeros\nSample Input\nSTDIN           Function\n-----           --------\n6               arr[] size n = 6\n-4 3 -9 0 4 1   arr = [-4, 3, -9, 0, 4, 1]\nSample Output\n0.500000\n0.333333\n0.166667\nExplanation\nThere are positive numbers, negative numbers, and zero in the array.\nThe proportions of occurrence are positive: , negative: and zeros: .",
        "26": "Staircase detail\nThis is a staircase of size :\n   #\n  ##\n ###\n####\nIts base and height are both equal to . It is drawn using # symbols and spaces. The last line is not preceded by any spaces.\nWrite a program that prints a staircase of size .\nFunction Description\nComplete the staircase function in the editor below.\nstaircase has the following parameter(s):\nint n: an integer\nPrint\nPrint a staircase as described above.\nInput Format\nA single integer, , denoting the size of the staircase.\nConstraints\n.\nOutput Format\nPrint a staircase of size using # symbols and spaces.\nNote: The last line must have spaces in it.\nSample Input\n6 \nSample Output\n     #\n    ##\n   ###\n  ####\n #####\n######\nExplanation\nThe staircase is right-aligned, composed of # symbols and spaces, and has a height and width of .",
        "27": "Given five positive integers, find the minimum and maximum values that can be calculated by summing exactly four of the five integers. Then print the respective minimum and maximum values as a single line of two space-separated long integers.\nExample\nThe minimum sum is and the maximum sum is . The function prints\n16 24\nFunction Description\nComplete the miniMaxSum function in the editor below.\nminiMaxSum has the following parameter(s):\narr: an array of integers\nPrint\nPrint two space-separated integers on one line: the minimum sum and the maximum sum of of elements.\nInput Format\nA single line of five space-separated integers.\nConstraints\nOutput Format\nPrint two space-separated long integers denoting the respective minimum and maximum values that can be calculated by summing exactly four of the five integers. (The output can be greater than a 32 bit integer.)\nSample Input\n1 2 3 4 5\nSample Output\n10 14\nExplanation\nThe numbers are , , , , and . Calculate the following sums using four of the five integers:\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nHints: Beware of integer overflow! Use 64-bit Integer.\nNeed help to get started? Try the Solve Me First problem",
        "28": "You are in charge of the cake for a child's birthday. You have decided the cake will have one candle for each year of their total age. They will only be able to blow out the tallest of the candles. Count how many candles are tallest.\nExample\nThe maximum height candles are units high. There are of them, so return .\nFunction Description\nComplete the function birthdayCakeCandles in the editor below.\nbirthdayCakeCandles has the following parameter(s):\nint candles[n]: the candle heights\nReturns\nint: the number of candles that are tallest\nInput Format\nThe first line contains a single integer, , the size of .\nThe second line contains space-separated integers, where each integer describes the height of .\nConstraints\nSample Input 0\n4\n3 2 1 3\nSample Output 0\n2\nExplanation 0\nCandle heights are . The tallest candles are units, and there are of them.",
        "29": "Given a time in -hour AM\/PM format, convert it to military (24-hour) time.\nNote: - 12:00:00AM on a 12-hour clock is 00:00:00 on a 24-hour clock.\n- 12:00:00PM on a 12-hour clock is 12:00:00 on a 24-hour clock.\nExample\nReturn '12:01:00'.\nReturn '00:01:00'.\nFunction Description\nComplete the timeConversion function in the editor below. It should return a new string representing the input time in 24 hour format.\ntimeConversion has the following parameter(s):\nstring s: a time in hour format\nReturns\nstring: the time in hour format\nInput Format\nA single string that represents a time in -hour clock format (i.e.: or ).\nConstraints\nAll input times are valid\nSample Input 0\n07:05:45PM\nSample Output 0\n19:05:45",
        "30": "HackerLand University has the following grading policy:\nEvery student receives a in the inclusive range from to .\nAny less than is a failing grade.\nSam is a professor at the university and likes to round each student's according to these rules:\nIf the difference between the and the next multiple of is less than , round up to the next multiple of .\nIf the value of is less than , no rounding occurs as the result will still be a failing grade.\nExamples\nround to (85 - 84 is less than 3)\ndo not round (result is less than 40)\ndo not round (60 - 57 is 3 or higher)\nGiven the initial value of for each of Sam's students, write code to automate the rounding process.\nFunction Description\nComplete the function gradingStudents in the editor below.\ngradingStudents has the following parameter(s):\nint grades[n]: the grades before rounding\nReturns\nint[n]: the grades after rounding as appropriate\nInput Format\nThe first line contains a single integer, , the number of students.\nEach line of the subsequent lines contains a single integer, .\nConstraints\nSample Input 0\n4\n73\n67\n38\n33\nSample Output 0\n75\n67\n40\n33\nExplanation 0\nStudent received a , and the next multiple of from is . Since , the student's grade is rounded to .\nStudent received a , and the next multiple of from is . Since , the grade will not be modified and the student's final grade is .\nStudent received a , and the next multiple of from is . Since , the student's grade will be rounded to .\nStudent received a grade below , so the grade will not be modified and the student's final grade is .",
        "31": "Sam's house has an apple tree and an orange tree that yield an abundance of fruit. Using the information given below, determine the number of apples and oranges that land on Sam's house.\nIn the diagram below:\nThe red region denotes the house, where is the start point, and is the endpoint. The apple tree is to the left of the house, and the orange tree is to its right.\nAssume the trees are located on a single point, where the apple tree is at point , and the orange tree is at point .\nWhen a fruit falls from its tree, it lands units of distance from its tree of origin along the -axis. *A negative value of means the fruit fell units to the tree's left, and a positive value of means it falls units to the tree's right. *\nGiven the value of for apples and oranges, determine how many apples and oranges will fall on Sam's house (i.e., in the inclusive range )?\nFor example, Sam's house is between and . The apple tree is located at and the orange at . There are apples and oranges. Apples are thrown units distance from , and units distance. Adding each apple distance to the position of the tree, they land at . Oranges land at . One apple and two oranges land in the inclusive range so we print\n1\n2\nFunction Description\nComplete the countApplesAndOranges function in the editor below. It should print the number of apples and oranges that land on Sam's house, each on a separate line.\ncountApplesAndOranges has the following parameter(s):\ns: integer, starting point of Sam's house location.\nt: integer, ending location of Sam's house location.\na: integer, location of the Apple tree.\nb: integer, location of the Orange tree.\napples: integer array, distances at which each apple falls from the tree.\noranges: integer array, distances at which each orange falls from the tree.\nInput Format\nThe first line contains two space-separated integers denoting the respective values of and .\nThe second line contains two space-separated integers denoting the respective values of and .\nThe third line contains two space-separated integers denoting the respective values of and .\nThe fourth line contains space-separated integers denoting the respective distances that each apple falls from point .\nThe fifth line contains space-separated integers denoting the respective distances that each orange falls from point .\nConstraints\nOutput Format\nPrint two integers on two different lines:\nThe first integer: the number of apples that fall on Sam's house.\nThe second integer: the number of oranges that fall on Sam's house.\nSample Input 0\n7 11\n5 15\n3 2\n-2 2 1\n5 -6\nSample Output 0\n1\n1\nExplanation 0\nThe first apple falls at position .\nThe second apple falls at position .\nThe third apple falls at position .\nThe first orange falls at position .\nThe second orange falls at position .\nOnly one fruit (the second apple) falls within the region between and , so we print as our first line of output.\nOnly the second orange falls within the region between and , so we print as our second line of output.",
        "32": "You are choreographing a circus show with various animals. For one act, you are given two kangaroos on a number line ready to jump in the positive direction (i.e, toward positive infinity).\nThe first kangaroo starts at location and moves at a rate of meters per jump.\nThe second kangaroo starts at location and moves at a rate of meters per jump.\nYou have to figure out a way to get both kangaroos at the same location at the same time as part of the show. If it is possible, return YES, otherwise return NO.\nExample\n\n\n\nAfter one jump, they are both at , (, ), so the answer is YES.\nFunction Description\nComplete the function kangaroo in the editor below.\nkangaroo has the following parameter(s):\nint x1, int v1: starting position and jump distance for kangaroo 1\nint x2, int v2: starting position and jump distance for kangaroo 2\nReturns\nstring: either YES or NO\nInput Format\nA single line of four space-separated integers denoting the respective values of , , , and .\nConstraints\nSample Input 0\n0 3 4 2\nSample Output 0\nYES\nExplanation 0\nThe two kangaroos jump through the following sequence of locations:\nFrom the image, it is clear that the kangaroos meet at the same location (number on the number line) after same number of jumps ( jumps), and we print YES.\nSample Input 1\n0 2 5 3\nSample Output 1\nNO\nExplanation 1\nThe second kangaroo has a starting location that is ahead (further to the right) of the first kangaroo's starting location (i.e., ). Because the second kangaroo moves at a faster rate (meaning ) and is already ahead of the first kangaroo, the first kangaroo will never be able to catch up. Thus, we print NO.",
        "33": "There will be two arrays of integers. Determine all integers that satisfy the following two conditions:\nThe elements of the first array are all factors of the integer being considered\nThe integer being considered is a factor of all elements of the second array\nThese numbers are referred to as being between the two arrays. Determine how many such numbers exist.\nExample\n\nThere are two numbers between the arrays: and .\n, , and for the first value.\n, and , for the second value. Return .\nFunction Description\nComplete the getTotalX function in the editor below. It should return the number of integers that are betwen the sets.\ngetTotalX has the following parameter(s):\nint a[n]: an array of integers\nint b[m]: an array of integers\nReturns\nint: the number of integers that are between the sets\nInput Format\nThe first line contains two space-separated integers, and , the number of elements in arrays and .\nThe second line contains distinct space-separated integers where .\nThe third line contains distinct space-separated integers where .\nConstraints\nSample Input\n2 3\n2 4\n16 32 96\nSample Output\n3\nExplanation\n2 and 4 divide evenly into 4, 8, 12 and 16.\n4, 8 and 16 divide evenly into 16, 32, 96.\n4, 8 and 16 are the only three numbers for which each element of a is a factor and each is a factor of all elements of b.",
        "34": "Maria plays college basketball and wants to go pro. Each season she maintains a record of her play. She tabulates the number of times she breaks her season record for most points and least points in a game. Points scored in the first game establish her record for the season, and she begins counting from there.\nExample\nScores are in the same order as the games played. She tabulates her results as follows:\n                                     Count\n    Game  Score  Minimum  Maximum   Min Max\n     0      12     12       12       0   0\n     1      24     12       24       0   1\n     2      10     10       24       1   1\n     3      24     10       24       1   1\nGiven the scores for a season, determine the number of times Maria breaks her records for most and least points scored during the season.\nFunction Description\nComplete the breakingRecords function in the editor below.\nbreakingRecords has the following parameter(s):\nint scores[n]: points scored per game\nReturns\nint[2]: An array with the numbers of times she broke her records. Index is for breaking most points records, and index is for breaking least points records.\nInput Format\nThe first line contains an integer , the number of games.\nThe second line contains space-separated integers describing the respective values of .\nConstraints\nSample Input 0\n9\n10 5 20 20 4 5 2 25 1\nSample Output 0\n2 4\nExplanation 0\nThe diagram below depicts the number of times Maria broke her best and worst records throughout the season:\nShe broke her best record twice (after games and ) and her worst record four times (after games , , , and ), so we print 2 4 as our answer. Note that she did not break her record for best score during game , as her score during that game was not strictly greater than her best record at the time.\nSample Input 1\n10\n3 4 21 36 10 28 35 5 24 42\nSample Output 1\n4 0\nExplanation 1\nThe diagram below depicts the number of times Maria broke her best and worst records throughout the season:\nShe broke her best record four times (after games , , , and ) and her worst record zero times (no score during the season was lower than the one she earned during her first game), so we print 4 0 as our answer.",
        "35": "Two children, Lily and Ron, want to share a chocolate bar. Each of the squares has an integer on it.\nLily decides to share a contiguous segment of the bar selected such that:\nThe length of the segment matches Ron's birth month, and,\nThe sum of the integers on the squares is equal to his birth day.\nDetermine how many ways she can divide the chocolate.\nExample\n\n\nLily wants to find segments summing to Ron's birth day, with a length equalling his birth month, . In this case, there are two segments meeting her criteria: and .\nFunction Description\nComplete the birthday function in the editor below.\nbirthday has the following parameter(s):\nint s[n]: the numbers on each of the squares of chocolate\nint d: Ron's birth day\nint m: Ron's birth month\nReturns\nint: the number of ways the bar can be divided\nInput Format\nThe first line contains an integer , the number of squares in the chocolate bar.\nThe second line contains space-separated integers , the numbers on the chocolate squares where .\nThe third line contains two space-separated integers, and , Ron's birth day and his birth month.\nConstraints\n, where ()\nSample Input 0\n5\n1 2 1 3 2\n3 2\nSample Output 0\n2\nExplanation 0\nLily wants to give Ron squares summing to . The following two segments meet the criteria:\nSample Input 1\n6\n1 1 1 1 1 1\n3 2\nSample Output 1\n0\nExplanation 1\nLily only wants to give Ron consecutive squares of chocolate whose integers sum to . There are no possible pieces satisfying these constraints:\nThus, we print as our answer.\nSample Input 2\n1\n4\n4 1\nSample Output 2\n1\nExplanation 2\nLily only wants to give Ron square of chocolate with an integer value of . Because the only square of chocolate in the bar satisfies this constraint, we print as our answer.",
        "36": "Given an array of integers and a positive integer , determine the number of pairs where and + is divisible by .\nExample\n\nThree pairs meet the criteria: and .\nFunction Description\nComplete the divisibleSumPairs function in the editor below.\ndivisibleSumPairs has the following parameter(s):\nint n: the length of array\nint ar[n]: an array of integers\nint k: the integer divisor\nReturns\n- int: the number of pairs\nInput Format\nThe first line contains space-separated integers, and .\nThe second line contains space-separated integers, each a value of .\nConstraints\nSample Input\nSTDIN           Function\n-----           --------\n6 3             n = 6, k = 3\n1 3 2 6 1 2     ar = [1, 3, 2, 6, 1, 2]\nSample Output\n 5\nExplanation\nHere are the valid pairs when :",
        "37": "Given an array of bird sightings where every element represents a bird type id, determine the id of the most frequently sighted type. If more than 1 type has been spotted that maximum amount, return the smallest of their ids.\nExample\nThere are two each of types and , and one sighting of type . Pick the lower of the two types seen twice: type .\nFunction Description\nComplete the migratoryBirds function in the editor below.\nmigratoryBirds has the following parameter(s):\nint arr[n]: the types of birds sighted\nReturns\nint: the lowest type id of the most frequently sighted birds\nInput Format\nThe first line contains an integer, , the size of .\nThe second line describes as space-separated integers, each a type number of the bird sighted.\nConstraints\nIt is guaranteed that each type is , , , , or .\nSample Input 0\n6\n1 4 4 4 5 3\nSample Output 0\n4\nExplanation 0\nThe different types of birds occur in the following frequencies:\nType : bird\nType : birds\nType : bird\nType : birds\nType : bird\nThe type number that occurs at the highest frequency is type , so we print as our answer.\nSample Input 1\n11\n1 2 3 4 5 4 3 2 1 3 4\nSample Output 1\n3\nExplanation 1\nThe different types of birds occur in the following frequencies:\nType :\nType :\nType :\nType :\nType :\nTwo types have a frequency of , and the lower of those is type .",
        "38": "Marie invented a Time Machine and wants to test it by time-traveling to visit Russia on the Day of the Programmer (the 256th day of the year) during a year in the inclusive range from 1700 to 2700.\nFrom 1700 to 1917, Russia's official calendar was the Julian calendar; since 1919 they used the Gregorian calendar system. The transition from the Julian to Gregorian calendar system occurred in 1918, when the next day after January 31st was February 14th. This means that in 1918, February 14th was the 32nd day of the year in Russia.\nIn both calendar systems, February is the only month with a variable amount of days; it has 29 days during a leap year, and 28 days during all other years. In the Julian calendar, leap years are divisible by 4; in the Gregorian calendar, leap years are either of the following:\nDivisible by 400.\nDivisible by 4 and not divisible by 100.\nGiven a year, , find the date of the 256th day of that year according to the official Russian calendar during that year. Then print it in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is .\nFor example, the given = 1984. 1984 is divisible by 4, so it is a leap year. The 256th day of a leap year after 1918 is September 12, so the answer is .\nFunction Description\nComplete the dayOfProgrammer function in the editor below. It should return a string representing the date of the 256th day of the year given.\ndayOfProgrammer has the following parameter(s):\nyear: an integer\nInput Format\nA single integer denoting year .\nConstraints\n1700 \\le y \\le 2700\nOutput Format\nPrint the full date of Day of the Programmer during year in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is .\nSample Input 0\n2017\nSample Output 0\n13.09.2017\nExplanation 0\nIn the year = 2017, January has 31 days, February has 28 days, March has 31 days, April has 30 days, May has 31 days, June has 30 days, July has 31 days, and August has 31 days. When we sum the total number of days in the first eight months, we get 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 = 243. Day of the Programmer is the 256th day, so then calculate 256 - 243 = 13 to determine that it falls on day 13 of the 9th month (September). We then print the full date in the specified format, which is 13.09.2017.\nSample Input 1\n2016\nSample Output 1\n12.09.2016\nExplanation 1\nYear = 2016 is a leap year, so February has 29 days but all the other months have the same number of days as in 2017. When we sum the total number of days in the first eight months, we get 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 = 244. Day of the Programmer is the 256th day, so then calculate 256 - 244 = 12 to determine that it falls on day 12 of the 9th month (September). We then print the full date in the specified format, which is 12.09.2016.\nSample Input 2\n1800\nSample Output 2\n12.09.1800\nExplanation 2\nSince 1800 is leap year as per Julian calendar. Day lies on 12 September.",
        "39": "Two friends Anna and Brian, are deciding how to split the bill at a dinner. Each will only pay for the items they consume. Brian gets the check and calculates Anna's portion. You must determine if his calculation is correct.\nFor example, assume the bill has the following prices: . Anna declines to eat item which costs . If Brian calculates the bill correctly, Anna will pay . If he includes the cost of , he will calculate . In the second case, he should refund to Anna.\nFunction Description\nComplete the bonAppetit function in the editor below. It should print Bon Appetit if the bill is fairly split. Otherwise, it should print the integer amount of money that Brian owes Anna.\nbonAppetit has the following parameter(s):\nbill: an array of integers representing the cost of each item ordered\nk: an integer representing the zero-based index of the item Anna doesn't eat\nb: the amount of money that Anna contributed to the bill\nInput Format\nThe first line contains two space-separated integers and , the number of items ordered and the -based index of the item that Anna did not eat.\nThe second line contains space-separated integers where .\nThe third line contains an integer, , the amount of money that Brian charged Anna for her share of the bill.\nConstraints\nThe amount of money due Anna will always be an integer\nOutput Format\nIf Brian did not overcharge Anna, print Bon Appetit on a new line; otherwise, print the difference (i.e., ) that Brian must refund to Anna. This will always be an integer.\nSample Input 0\n4 1\n3 10 2 9\n12\nSample Output 0\n5\nExplanation 0\nAnna didn't eat item , but she shared the rest of the items with Brian. The total cost of the shared items is and, split in half, the cost per person is . Brian charged her for her portion of the bill. We print the amount Anna was overcharged, , on a new line.\nSample Input 1\n4 1\n3 10 2 9\n7\nSample Output 1\nBon Appetit\nExplanation 1\nAnna didn't eat item , but she shared the rest of the items with Brian. The total cost of the shared items is and, split in half, the cost per person is . Because , we print Bon Appetit on a new line.",
        "40": "There is a large pile of socks that must be paired by color. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.\nExample\n\nThere is one pair of color and one of color . There are three odd socks left, one of each color. The number of pairs is .\nFunction Description\nComplete the sockMerchant function in the editor below.\nsockMerchant has the following parameter(s):\nint n: the number of socks in the pile\nint ar[n]: the colors of each sock\nReturns\nint: the number of pairs\nInput Format\nThe first line contains an integer , the number of socks represented in .\nThe second line contains space-separated integers, , the colors of the socks in the pile.\nConstraints\nwhere\nSample Input\nSTDIN                       Function\n-----                       --------\n9                           n = 9\n10 20 20 10 10 30 50 10 20  ar = [10, 20, 20, 10, 10, 30, 50, 10, 20]\nSample Output\n3\nExplanation\nThere are three pairs of socks.",
        "41": "A teacher asks the class to open their books to a page number. A student can either start turning pages from the front of the book or from the back of the book. They always turn pages one at a time. When they open the book, page is always on the right side:\nWhen they flip page , they see pages and . Each page except the last page will always be printed on both sides. The last page may only be printed on the front, given the length of the book. If the book is pages long, and a student wants to turn to page , what is the minimum number of pages to turn? They can start at the beginning or the end of the book.\nGiven and , find and print the minimum number of pages that must be turned in order to arrive at page .\nExample\n\nUsing the diagram above, if the student wants to get to page , they open the book to page , flip page and they are on the correct page. If they open the book to the last page, page , they turn page and are at the correct page. Return .\nFunction Description\nComplete the pageCount function in the editor below.\npageCount has the following parameter(s):\nint n: the number of pages in the book\nint p: the page number to turn to\nReturns\nint: the minimum number of pages to turn\nInput Format\nThe first line contains an integer , the number of pages in the book.\nThe second line contains an integer, , the page to turn to.\nConstraints\nSample Input 0\n6\n2\nSample Output 0\n1\nExplanation 0\nIf the student starts turning from page , they only need to turn page:\nIf a student starts turning from page , they need to turn pages:\nReturn the minimum value, .\nSample Input 1\n5\n4\nSample Output 1\n0\nExplanation 1\nIf the student starts turning from page , they need to turn pages:\nIf they start turning from page , they do not need to turn any pages:\nReturn the minimum value, .",
        "42": "An avid hiker keeps meticulous records of their hikes. During the last hike that took exactly steps, for every step it was noted if it was an uphill, , or a downhill, step. Hikes always start and end at sea level, and each step up or down represents a unit change in altitude. We define the following terms:\nA mountain is a sequence of consecutive steps above sea level, starting with a step up from sea level and ending with a step down to sea level.\nA valley is a sequence of consecutive steps below sea level, starting with a step down from sea level and ending with a step up to sea level.\nGiven the sequence of up and down steps during a hike, find and print the number of valleys walked through.\nExample\nThe hiker first enters a valley units deep. Then they climb out and up onto a mountain units high. Finally, the hiker returns to sea level and ends the hike.\nFunction Description\nComplete the countingValleys function in the editor below.\ncountingValleys has the following parameter(s):\nint steps: the number of steps on the hike\nstring path: a string describing the path\nReturns\nint: the number of valleys traversed\nInput Format\nThe first line contains an integer , the number of steps in the hike.\nThe second line contains a single string , of characters that describe the path.\nConstraints\nSample Input\n8\nUDDDUDUU\nSample Output\n1\nExplanation\nIf we represent _ as sea level, a step up as \/, and a step down as \\, the hike can be drawn as:\n_\/\\      _\n   \\    \/\n    \\\/\\\/\nThe hiker enters and leaves one valley.",
        "43": "A person wants to determine the most expensive computer keyboard and USB drive that can be purchased with a give budget. Given price lists for keyboards and USB drives and a budget, find the cost to buy them. If it is not possible to buy both items, return .\nExample\n\n\nThe person can buy a , or a . Choose the latter as the more expensive option and return .\nFunction Description\nComplete the getMoneySpent function in the editor below.\ngetMoneySpent has the following parameter(s):\nint keyboards[n]: the keyboard prices\nint drives[m]: the drive prices\nint b: the budget\nReturns\nint: the maximum that can be spent, or if it is not possible to buy both items\nInput Format\nThe first line contains three space-separated integers , , and , the budget, the number of keyboard models and the number of USB drive models.\nThe second line contains space-separated integers , the prices of each keyboard model.\nThe third line contains space-separated integers , the prices of the USB drives.\nConstraints\nThe price of each item is in the inclusive range .\nSample Input 0\n10 2 3\n3 1\n5 2 8\nSample Output 0\n9\nExplanation 0\nBuy the keyboard and the USB drive for a total cost of .\nSample Input 1\n5 1 1\n4\n5\nSample Output 1\n-1\nExplanation 1\nThere is no way to buy one keyboard and one USB drive because , so return .",
        "44": "Two cats and a mouse are at various positions on a line. You will be given their starting positions. Your task is to determine which cat will reach the mouse first, assuming the mouse does not move and the cats travel at equal speed. If the cats arrive at the same time, the mouse will be allowed to move and it will escape while they fight.\nYou are given queries in the form of , , and representing the respective positions for cats and , and for mouse . Complete the function to return the appropriate answer to each query, which will be printed on a new line.\nIf cat catches the mouse first, print Cat A.\nIf cat catches the mouse first, print Cat B.\nIf both cats reach the mouse at the same time, print Mouse C as the two cats fight and mouse escapes.\nExample\n\n\nThe cats are at positions (Cat A) and (Cat B), and the mouse is at position . Cat B, at position will arrive first since it is only unit away while the other is units away. Return 'Cat B'.\nFunction Description\nComplete the catAndMouse function in the editor below.\ncatAndMouse has the following parameter(s):\nint x: Cat 's position\nint y: Cat 's position\nint z: Mouse 's position\nReturns\nstring: Either 'Cat A', 'Cat B', or 'Mouse C'\nInput Format\nThe first line contains a single integer, , denoting the number of queries.\nEach of the subsequent lines contains three space-separated integers describing the respective values of (cat 's location), (cat 's location), and (mouse 's location).\nConstraints\nSample Input 0\n2\n1 2 3\n1 3 2\nSample Output 0\nCat B\nMouse C\nExplanation 0\nQuery 0: The positions of the cats and mouse are shown below:\nCat will catch the mouse first, so we print Cat B on a new line.\nQuery 1: In this query, cats and reach mouse at the exact same time:\nBecause the mouse escapes, we print Mouse C on a new line.",
        "45": "We define a magic square to be an matrix of distinct positive integers from to where the sum of any row, column, or diagonal of length is always equal to the same number: the magic constant.\nYou will be given a matrix of integers in the inclusive range . We can convert any digit to any other digit in the range at cost of . Given , convert it into a magic square at minimal cost. Print this cost on a new line.\nNote: The resulting magic square must contain distinct integers in the inclusive range .\nExample\n$s = [[5, 3, 4], [1, 5, 8], [6, 4, 2]]\nThe matrix looks like this:\n5 3 4\n1 5 8\n6 4 2\nWe can convert it to the following magic square:\n8 3 4\n1 5 9\n6 7 2\nThis took three replacements at a cost of .\nFunction Description\nComplete the formingMagicSquare function in the editor below.\nformingMagicSquare has the following parameter(s):\nint s[3][3]: a array of integers\nReturns\nint: the minimal total cost of converting the input square to a magic square\nInput Format\nEach of the lines contains three space-separated integers of row .\nConstraints\nSample Input 0\n4 9 2\n3 5 7\n8 1 5\nSample Output 0\n1\nExplanation 0\nIf we change the bottom right value, , from to at a cost of , becomes a magic square at the minimum possible cost.\nSample Input 1\n4 8 2\n4 5 7\n6 1 6\nSample Output 1\n4\nExplanation 1\nUsing 0-based indexing, if we make\n-> at a cost of\n-> at a cost of\n-> at a cost of ,\nthen the total cost will be .",
        "46": "Given an array of integers, find the longest subarray where the absolute difference between any two elements is less than or equal to .\nExample\nThere are two subarrays meeting the criterion: and . The maximum length subarray has elements.\nFunction Description\nComplete the pickingNumbers function in the editor below.\npickingNumbers has the following parameter(s):\nint a[n]: an array of integers\nReturns\nint: the length of the longest subarray that meets the criterion\nInput Format\nThe first line contains a single integer , the size of the array .\nThe second line contains space-separated integers, each an .\nConstraints\nThe answer will be .\nSample Input 0\n6\n4 6 5 3 3 1\nSample Output 0\n3\nExplanation 0\nWe choose the following multiset of integers from the array: . Each pair in the multiset has an absolute difference (i.e., and ), so we print the number of chosen integers, , as our answer.\nSample Input 1\n6\n1 2 2 3 1 2\nSample Output 1\n5\nExplanation 1\nWe choose the following multiset of integers from the array: . Each pair in the multiset has an absolute difference (i.e., , , and ), so we print the number of chosen integers, , as our answer.",
        "47": "An arcade game player wants to climb to the top of the leaderboard and track their ranking. The game uses Dense Ranking, so its leaderboard works like this:\nThe player with the highest score is ranked number on the leaderboard.\nPlayers who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number.\nExample\n\nThe ranked players will have ranks , , , and , respectively. If the player's scores are , and , their rankings after each game are , and . Return .\nFunction Description\nComplete the climbingLeaderboard function in the editor below.\nclimbingLeaderboard has the following parameter(s):\nint ranked[n]: the leaderboard scores\nint player[m]: the player's scores\nReturns\nint[m]: the player's rank after each new score\nInput Format\nThe first line contains an integer , the number of players on the leaderboard.\nThe next line contains space-separated integers , the leaderboard scores in decreasing order.\nThe next line contains an integer, , the number games the player plays.\nThe last line contains space-separated integers , the game scores.\nConstraints\nfor\nfor\nThe existing leaderboard, , is in descending order.\nThe player's scores, , are in ascending order.\nSubtask\nFor of the maximum score:",
        "48": "A video player plays a game in which the character competes in a hurdle race. Hurdles are of varying heights, and the characters have a maximum height they can jump. There is a magic potion they can take that will increase their maximum jump height by unit for each dose. How many doses of the potion must the character take to be able to jump all of the hurdles. If the character can already clear all of the hurdles, return .\nExample\n\nThe character can jump unit high initially and must take doses of potion to be able to jump all of the hurdles.\nFunction Description\nComplete the hurdleRace function in the editor below.\nhurdleRace has the following parameter(s):\nint k: the height the character can jump naturally\nint height[n]: the heights of each hurdle\nReturns\nint: the minimum number of doses required, always or more\nInput Format\nThe first line contains two space-separated integers and , the number of hurdles and the maximum height the character can jump naturally.\nThe second line contains space-separated integers where .\nConstraints\nSample Input 0\n5 4\n1 6 3 5 2\nSample Output 0\n2\nExplanation 0\nDan's character can jump a maximum of units, but the tallest hurdle has a height of :\nTo be able to jump all the hurdles, Dan must drink doses.\nSample Input 1\n5 7\n2 5 4 5 2\nSample Output 1\n0\nExplanation 1\nDan's character can jump a maximum of units, which is enough to cross all the hurdles:\nBecause he can already jump all the hurdles, Dan needs to drink doses.",
        "49": "When a contiguous block of text is selected in a PDF viewer, the selection is highlighted with a blue rectangle. In this PDF viewer, each word is highlighted independently. For example:\nThere is a list of character heights aligned by index to their letters. For example, 'a' is at index and 'z' is at index . There will also be a string. Using the letter heights given, determine the area of the rectangle highlight in assuming all letters are wide.\nExample\nThe heights are and . The tallest letter is high and there are letters. The hightlighted area will be so the answer is .\nFunction Description\nComplete the designerPdfViewer function in the editor below.\ndesignerPdfViewer has the following parameter(s):\nint h[26]: the heights of each letter\nstring word: a string\nReturns\nint: the size of the highlighted area\nInput Format\nThe first line contains space-separated integers describing the respective heights of each consecutive lowercase English letter, ascii[a-z].\nThe second line contains a single word consisting of lowercase English alphabetic letters.\nConstraints\n, where is an English lowercase letter.\ncontains no more than letters.\nSample Input 0\n1 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\nabc\nSample Output 0\n9\nExplanation 0\nWe are highlighting the word abc:\nLetter heights are , and . The tallest letter, b, is high. The selection area for this word is .\nNote: Recall that the width of each character is .\nSample Input 1\n1 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7\nzaba\nSample Output 1\n28\nExplanation 1\nThe tallest letter in is at . The selection area for this word is .",
        "50": "Complete the function solveMeFirst to compute the sum of two integers.\nExample\n\nReturn .\nFunction Description\nComplete the solveMeFirst function in the editor below.\nsolveMeFirst has the following parameters:\nint a: the first value\nint b: the second value\nReturns\n- int: the sum of and\nConstraints\nSample Input\na = 2\nb = 3\nSample Output\n5\nExplanation\n.",
        "51": "Given an array of integers, find the sum of its elements.\nFor example, if the array , , so return .\nFunction Description\nComplete the simpleArraySum function in the editor below. It must return the sum of the array elements as an integer.\nsimpleArraySum has the following parameter(s):\nar: an array of integers\nInput Format\nThe first line contains an integer, , denoting the size of the array.\nThe second line contains space-separated integers representing the array's elements.\nConstraints\nOutput Format\nPrint the sum of the array's elements as a single integer.\nSample Input\n6\n1 2 3 4 10 11\nSample Output\n31\nExplanation\nWe print the sum of the array's elements: .",
        "52": "Alice and Bob each created one problem for HackerRank. A reviewer rates the two challenges, awarding points on a scale from 1 to 100 for three categories: problem clarity, originality, and difficulty.\nThe rating for Alice's challenge is the triplet a = (a[0], a[1], a[2]), and the rating for Bob's challenge is the triplet b = (b[0], b[1], b[2]).\nThe task is to find their comparison points by comparing a[0] with b[0], a[1] with b[1], and a[2] with b[2].\nIf a[i] > b[i], then Alice is awarded 1 point.\nIf a[i] < b[i], then Bob is awarded 1 point.\nIf a[i] = b[i], then neither person receives a point.\nComparison points is the total points a person earned.\nGiven a and b, determine their respective comparison points.\nExample\na = [1, 2, 3]\nb = [3, 2, 1]\nFor elements *0*, Bob is awarded a point because a[0] .\nFor the equal elements a[1] and b[1], no points are earned.\nFinally, for elements 2, a[2] > b[2] so Alice receives a point.\nThe return array is [1, 1] with Alice's score first and Bob's second.\nFunction Description\nComplete the function compareTriplets in the editor below.\ncompareTriplets has the following parameter(s):\nint a[3]: Alice's challenge rating\nint b[3]: Bob's challenge rating\nReturn\nint[2]: Alice's score is in the first position, and Bob's score is in the second.\nInput Format\nThe first line contains 3 space-separated integers, a[0], a[1], and a[2], the respective values in triplet a.\nThe second line contains 3 space-separated integers, b[0], b[1], and b[2], the respective values in triplet b.\nConstraints\n1 \u2264 a[i] \u2264 100\n1 \u2264 b[i] \u2264 100\nSample Input 0\n5 6 7\n3 6 10\nSample Output 0\n1 1\nExplanation 0\nIn this example:\nNow, let's compare each individual score:\n, so Alice receives point.\n, so nobody receives a point.\n, so Bob receives point.\nAlice's comparison score is , and Bob's comparison score is . Thus, we return the array .\nSample Input 1\n17 28 30\n99 16 8\nSample Output 1\n2 1\nExplanation 1\nComparing the elements, so Bob receives a point.\nComparing the and elements, and so Alice receives two points.\nThe return array is .",
        "53": "In this challenge, you are required to calculate and print the sum of the elements in an array, keeping in mind that some of those integers may be quite large.\nFunction Description\nComplete the aVeryBigSum function in the editor below. It must return the sum of all array elements.\naVeryBigSum has the following parameter(s):\nint ar[n]: an array of integers .\nReturn\nlong: the sum of all array elements\nInput Format\nThe first line of the input consists of an integer .\nThe next line contains space-separated integers contained in the array.\nOutput Format\nReturn the integer sum of the elements in the array.\nConstraints\n\nSample Input\n5\n1000000001 1000000002 1000000003 1000000004 1000000005\nOutput\n5000000015\nNote:\nThe range of the 32-bit integer is .\nWhen we add several integer values, the resulting sum might exceed the above range. You might need to use long int C\/C++\/Java to store such sums.",
        "54": "Given a square matrix, calculate the absolute difference between the sums of its diagonals.\nFor example, the square matrix is shown below:\n1 2 3\n4 5 6\n9 8 9  \nThe left-to-right diagonal = . The right to left diagonal = . Their absolute difference is .\nFunction description\nComplete the function in the editor below.\ndiagonalDifference takes the following parameter:\nint arr[n][m]: an array of integers\nReturn\nint: the absolute diagonal difference\nInput Format\nThe first line contains a single integer, , the number of rows and columns in the square matrix .\nEach of the next lines describes a row, , and consists of space-separated integers .\nConstraints\nOutput Format\nReturn the absolute difference between the sums of the matrix's two diagonals as a single integer.\nSample Input\n3\n11 2 4\n4 5 6\n10 8 -12\nSample Output\n15\nExplanation\nThe primary diagonal is:\n11\n   5\n     -12\nSum across the primary diagonal: 11 + 5 - 12 = 4\nThe secondary diagonal is:\n     4\n   5\n10\nSum across the secondary diagonal: 4 + 5 + 10 = 19\nDifference: |4 - 19| = 15\nNote: |x| is the absolute value of x",
        "55": "Given an array of integers, calculate the ratios of its elements that are positive, negative, and zero. Print the decimal value of each fraction on a new line with places after the decimal.\nNote: This challenge introduces precision problems. The test cases are scaled to six decimal places, though answers with absolute error of up to are acceptable.\nExample\nThere are elements, two positive, two negative and one zero. Their ratios are , and . Results are printed as:\n0.400000\n0.400000\n0.200000\nFunction Description\nComplete the plusMinus function in the editor below.\nplusMinus has the following parameter(s):\nint arr[n]: an array of integers\nPrint\nPrint the ratios of positive, negative and zero values in the array. Each value should be printed on a separate line with digits after the decimal. The function should not return a value.\nInput Format\nThe first line contains an integer, , the size of the array.\nThe second line contains space-separated integers that describe .\nConstraints\n\nOutput Format\nPrint the following lines, each to decimals:\nproportion of positive values\nproportion of negative values\nproportion of zeros\nSample Input\nSTDIN           Function\n-----           --------\n6               arr[] size n = 6\n-4 3 -9 0 4 1   arr = [-4, 3, -9, 0, 4, 1]\nSample Output\n0.500000\n0.333333\n0.166667\nExplanation\nThere are positive numbers, negative numbers, and zero in the array.\nThe proportions of occurrence are positive: , negative: and zeros: .",
        "56": "Staircase detail\nThis is a staircase of size :\n   #\n  ##\n ###\n####\nIts base and height are both equal to . It is drawn using # symbols and spaces. The last line is not preceded by any spaces.\nWrite a program that prints a staircase of size .\nFunction Description\nComplete the staircase function in the editor below.\nstaircase has the following parameter(s):\nint n: an integer\nPrint\nPrint a staircase as described above.\nInput Format\nA single integer, , denoting the size of the staircase.\nConstraints\n.\nOutput Format\nPrint a staircase of size using # symbols and spaces.\nNote: The last line must have spaces in it.\nSample Input\n6 \nSample Output\n     #\n    ##\n   ###\n  ####\n #####\n######\nExplanation\nThe staircase is right-aligned, composed of # symbols and spaces, and has a height and width of .",
        "57": "Given five positive integers, find the minimum and maximum values that can be calculated by summing exactly four of the five integers. Then print the respective minimum and maximum values as a single line of two space-separated long integers.\nExample\nThe minimum sum is and the maximum sum is . The function prints\n16 24\nFunction Description\nComplete the miniMaxSum function in the editor below.\nminiMaxSum has the following parameter(s):\narr: an array of integers\nPrint\nPrint two space-separated integers on one line: the minimum sum and the maximum sum of of elements.\nInput Format\nA single line of five space-separated integers.\nConstraints\nOutput Format\nPrint two space-separated long integers denoting the respective minimum and maximum values that can be calculated by summing exactly four of the five integers. (The output can be greater than a 32 bit integer.)\nSample Input\n1 2 3 4 5\nSample Output\n10 14\nExplanation\nThe numbers are , , , , and . Calculate the following sums using four of the five integers:\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nHints: Beware of integer overflow! Use 64-bit Integer.\nNeed help to get started? Try the Solve Me First problem",
        "58": "You are in charge of the cake for a child's birthday. You have decided the cake will have one candle for each year of their total age. They will only be able to blow out the tallest of the candles. Count how many candles are tallest.\nExample\nThe maximum height candles are units high. There are of them, so return .\nFunction Description\nComplete the function birthdayCakeCandles in the editor below.\nbirthdayCakeCandles has the following parameter(s):\nint candles[n]: the candle heights\nReturns\nint: the number of candles that are tallest\nInput Format\nThe first line contains a single integer, , the size of .\nThe second line contains space-separated integers, where each integer describes the height of .\nConstraints\nSample Input 0\n4\n3 2 1 3\nSample Output 0\n2\nExplanation 0\nCandle heights are . The tallest candles are units, and there are of them.",
        "59": "Given a time in -hour AM\/PM format, convert it to military (24-hour) time.\nNote: - 12:00:00AM on a 12-hour clock is 00:00:00 on a 24-hour clock.\n- 12:00:00PM on a 12-hour clock is 12:00:00 on a 24-hour clock.\nExample\nReturn '12:01:00'.\nReturn '00:01:00'.\nFunction Description\nComplete the timeConversion function in the editor below. It should return a new string representing the input time in 24 hour format.\ntimeConversion has the following parameter(s):\nstring s: a time in hour format\nReturns\nstring: the time in hour format\nInput Format\nA single string that represents a time in -hour clock format (i.e.: or ).\nConstraints\nAll input times are valid\nSample Input 0\n07:05:45PM\nSample Output 0\n19:05:45",
        "60": "HackerLand University has the following grading policy:\nEvery student receives a in the inclusive range from to .\nAny less than is a failing grade.\nSam is a professor at the university and likes to round each student's according to these rules:\nIf the difference between the and the next multiple of is less than , round up to the next multiple of .\nIf the value of is less than , no rounding occurs as the result will still be a failing grade.\nExamples\nround to (85 - 84 is less than 3)\ndo not round (result is less than 40)\ndo not round (60 - 57 is 3 or higher)\nGiven the initial value of for each of Sam's students, write code to automate the rounding process.\nFunction Description\nComplete the function gradingStudents in the editor below.\ngradingStudents has the following parameter(s):\nint grades[n]: the grades before rounding\nReturns\nint[n]: the grades after rounding as appropriate\nInput Format\nThe first line contains a single integer, , the number of students.\nEach line of the subsequent lines contains a single integer, .\nConstraints\nSample Input 0\n4\n73\n67\n38\n33\nSample Output 0\n75\n67\n40\n33\nExplanation 0\nStudent received a , and the next multiple of from is . Since , the student's grade is rounded to .\nStudent received a , and the next multiple of from is . Since , the grade will not be modified and the student's final grade is .\nStudent received a , and the next multiple of from is . Since , the student's grade will be rounded to .\nStudent received a grade below , so the grade will not be modified and the student's final grade is .",
        "61": "Sam's house has an apple tree and an orange tree that yield an abundance of fruit. Using the information given below, determine the number of apples and oranges that land on Sam's house.\nIn the diagram below:\nThe red region denotes the house, where is the start point, and is the endpoint. The apple tree is to the left of the house, and the orange tree is to its right.\nAssume the trees are located on a single point, where the apple tree is at point , and the orange tree is at point .\nWhen a fruit falls from its tree, it lands units of distance from its tree of origin along the -axis. *A negative value of means the fruit fell units to the tree's left, and a positive value of means it falls units to the tree's right. *\nGiven the value of for apples and oranges, determine how many apples and oranges will fall on Sam's house (i.e., in the inclusive range )?\nFor example, Sam's house is between and . The apple tree is located at and the orange at . There are apples and oranges. Apples are thrown units distance from , and units distance. Adding each apple distance to the position of the tree, they land at . Oranges land at . One apple and two oranges land in the inclusive range so we print\n1\n2\nFunction Description\nComplete the countApplesAndOranges function in the editor below. It should print the number of apples and oranges that land on Sam's house, each on a separate line.\ncountApplesAndOranges has the following parameter(s):\ns: integer, starting point of Sam's house location.\nt: integer, ending location of Sam's house location.\na: integer, location of the Apple tree.\nb: integer, location of the Orange tree.\napples: integer array, distances at which each apple falls from the tree.\noranges: integer array, distances at which each orange falls from the tree.\nInput Format\nThe first line contains two space-separated integers denoting the respective values of and .\nThe second line contains two space-separated integers denoting the respective values of and .\nThe third line contains two space-separated integers denoting the respective values of and .\nThe fourth line contains space-separated integers denoting the respective distances that each apple falls from point .\nThe fifth line contains space-separated integers denoting the respective distances that each orange falls from point .\nConstraints\nOutput Format\nPrint two integers on two different lines:\nThe first integer: the number of apples that fall on Sam's house.\nThe second integer: the number of oranges that fall on Sam's house.\nSample Input 0\n7 11\n5 15\n3 2\n-2 2 1\n5 -6\nSample Output 0\n1\n1\nExplanation 0\nThe first apple falls at position .\nThe second apple falls at position .\nThe third apple falls at position .\nThe first orange falls at position .\nThe second orange falls at position .\nOnly one fruit (the second apple) falls within the region between and , so we print as our first line of output.\nOnly the second orange falls within the region between and , so we print as our second line of output.",
        "62": "You are choreographing a circus show with various animals. For one act, you are given two kangaroos on a number line ready to jump in the positive direction (i.e, toward positive infinity).\nThe first kangaroo starts at location and moves at a rate of meters per jump.\nThe second kangaroo starts at location and moves at a rate of meters per jump.\nYou have to figure out a way to get both kangaroos at the same location at the same time as part of the show. If it is possible, return YES, otherwise return NO.\nExample\n\n\n\nAfter one jump, they are both at , (, ), so the answer is YES.\nFunction Description\nComplete the function kangaroo in the editor below.\nkangaroo has the following parameter(s):\nint x1, int v1: starting position and jump distance for kangaroo 1\nint x2, int v2: starting position and jump distance for kangaroo 2\nReturns\nstring: either YES or NO\nInput Format\nA single line of four space-separated integers denoting the respective values of , , , and .\nConstraints\nSample Input 0\n0 3 4 2\nSample Output 0\nYES\nExplanation 0\nThe two kangaroos jump through the following sequence of locations:\nFrom the image, it is clear that the kangaroos meet at the same location (number on the number line) after same number of jumps ( jumps), and we print YES.\nSample Input 1\n0 2 5 3\nSample Output 1\nNO\nExplanation 1\nThe second kangaroo has a starting location that is ahead (further to the right) of the first kangaroo's starting location (i.e., ). Because the second kangaroo moves at a faster rate (meaning ) and is already ahead of the first kangaroo, the first kangaroo will never be able to catch up. Thus, we print NO.",
        "63": "There will be two arrays of integers. Determine all integers that satisfy the following two conditions:\nThe elements of the first array are all factors of the integer being considered\nThe integer being considered is a factor of all elements of the second array\nThese numbers are referred to as being between the two arrays. Determine how many such numbers exist.\nExample\n\nThere are two numbers between the arrays: and .\n, , and for the first value.\n, and , for the second value. Return .\nFunction Description\nComplete the getTotalX function in the editor below. It should return the number of integers that are betwen the sets.\ngetTotalX has the following parameter(s):\nint a[n]: an array of integers\nint b[m]: an array of integers\nReturns\nint: the number of integers that are between the sets\nInput Format\nThe first line contains two space-separated integers, and , the number of elements in arrays and .\nThe second line contains distinct space-separated integers where .\nThe third line contains distinct space-separated integers where .\nConstraints\nSample Input\n2 3\n2 4\n16 32 96\nSample Output\n3\nExplanation\n2 and 4 divide evenly into 4, 8, 12 and 16.\n4, 8 and 16 divide evenly into 16, 32, 96.\n4, 8 and 16 are the only three numbers for which each element of a is a factor and each is a factor of all elements of b.",
        "64": "Maria plays college basketball and wants to go pro. Each season she maintains a record of her play. She tabulates the number of times she breaks her season record for most points and least points in a game. Points scored in the first game establish her record for the season, and she begins counting from there.\nExample\nScores are in the same order as the games played. She tabulates her results as follows:\n                                     Count\n    Game  Score  Minimum  Maximum   Min Max\n     0      12     12       12       0   0\n     1      24     12       24       0   1\n     2      10     10       24       1   1\n     3      24     10       24       1   1\nGiven the scores for a season, determine the number of times Maria breaks her records for most and least points scored during the season.\nFunction Description\nComplete the breakingRecords function in the editor below.\nbreakingRecords has the following parameter(s):\nint scores[n]: points scored per game\nReturns\nint[2]: An array with the numbers of times she broke her records. Index is for breaking most points records, and index is for breaking least points records.\nInput Format\nThe first line contains an integer , the number of games.\nThe second line contains space-separated integers describing the respective values of .\nConstraints\nSample Input 0\n9\n10 5 20 20 4 5 2 25 1\nSample Output 0\n2 4\nExplanation 0\nThe diagram below depicts the number of times Maria broke her best and worst records throughout the season:\nShe broke her best record twice (after games and ) and her worst record four times (after games , , , and ), so we print 2 4 as our answer. Note that she did not break her record for best score during game , as her score during that game was not strictly greater than her best record at the time.\nSample Input 1\n10\n3 4 21 36 10 28 35 5 24 42\nSample Output 1\n4 0\nExplanation 1\nThe diagram below depicts the number of times Maria broke her best and worst records throughout the season:\nShe broke her best record four times (after games , , , and ) and her worst record zero times (no score during the season was lower than the one she earned during her first game), so we print 4 0 as our answer.",
        "65": "Two children, Lily and Ron, want to share a chocolate bar. Each of the squares has an integer on it.\nLily decides to share a contiguous segment of the bar selected such that:\nThe length of the segment matches Ron's birth month, and,\nThe sum of the integers on the squares is equal to his birth day.\nDetermine how many ways she can divide the chocolate.\nExample\n\n\nLily wants to find segments summing to Ron's birth day, with a length equalling his birth month, . In this case, there are two segments meeting her criteria: and .\nFunction Description\nComplete the birthday function in the editor below.\nbirthday has the following parameter(s):\nint s[n]: the numbers on each of the squares of chocolate\nint d: Ron's birth day\nint m: Ron's birth month\nReturns\nint: the number of ways the bar can be divided\nInput Format\nThe first line contains an integer , the number of squares in the chocolate bar.\nThe second line contains space-separated integers , the numbers on the chocolate squares where .\nThe third line contains two space-separated integers, and , Ron's birth day and his birth month.\nConstraints\n, where ()\nSample Input 0\n5\n1 2 1 3 2\n3 2\nSample Output 0\n2\nExplanation 0\nLily wants to give Ron squares summing to . The following two segments meet the criteria:\nSample Input 1\n6\n1 1 1 1 1 1\n3 2\nSample Output 1\n0\nExplanation 1\nLily only wants to give Ron consecutive squares of chocolate whose integers sum to . There are no possible pieces satisfying these constraints:\nThus, we print as our answer.\nSample Input 2\n1\n4\n4 1\nSample Output 2\n1\nExplanation 2\nLily only wants to give Ron square of chocolate with an integer value of . Because the only square of chocolate in the bar satisfies this constraint, we print as our answer.",
        "66": "Given an array of integers and a positive integer , determine the number of pairs where and + is divisible by .\nExample\n\nThree pairs meet the criteria: and .\nFunction Description\nComplete the divisibleSumPairs function in the editor below.\ndivisibleSumPairs has the following parameter(s):\nint n: the length of array\nint ar[n]: an array of integers\nint k: the integer divisor\nReturns\n- int: the number of pairs\nInput Format\nThe first line contains space-separated integers, and .\nThe second line contains space-separated integers, each a value of .\nConstraints\nSample Input\nSTDIN           Function\n-----           --------\n6 3             n = 6, k = 3\n1 3 2 6 1 2     ar = [1, 3, 2, 6, 1, 2]\nSample Output\n 5\nExplanation\nHere are the valid pairs when :",
        "67": "Given an array of bird sightings where every element represents a bird type id, determine the id of the most frequently sighted type. If more than 1 type has been spotted that maximum amount, return the smallest of their ids.\nExample\nThere are two each of types and , and one sighting of type . Pick the lower of the two types seen twice: type .\nFunction Description\nComplete the migratoryBirds function in the editor below.\nmigratoryBirds has the following parameter(s):\nint arr[n]: the types of birds sighted\nReturns\nint: the lowest type id of the most frequently sighted birds\nInput Format\nThe first line contains an integer, , the size of .\nThe second line describes as space-separated integers, each a type number of the bird sighted.\nConstraints\nIt is guaranteed that each type is , , , , or .\nSample Input 0\n6\n1 4 4 4 5 3\nSample Output 0\n4\nExplanation 0\nThe different types of birds occur in the following frequencies:\nType : bird\nType : birds\nType : bird\nType : birds\nType : bird\nThe type number that occurs at the highest frequency is type , so we print as our answer.\nSample Input 1\n11\n1 2 3 4 5 4 3 2 1 3 4\nSample Output 1\n3\nExplanation 1\nThe different types of birds occur in the following frequencies:\nType :\nType :\nType :\nType :\nType :\nTwo types have a frequency of , and the lower of those is type .",
        "68": "Marie invented a Time Machine and wants to test it by time-traveling to visit Russia on the Day of the Programmer (the 256th day of the year) during a year in the inclusive range from 1700 to 2700.\nFrom 1700 to 1917, Russia's official calendar was the Julian calendar; since 1919 they used the Gregorian calendar system. The transition from the Julian to Gregorian calendar system occurred in 1918, when the next day after January 31st was February 14th. This means that in 1918, February 14th was the 32nd day of the year in Russia.\nIn both calendar systems, February is the only month with a variable amount of days; it has 29 days during a leap year, and 28 days during all other years. In the Julian calendar, leap years are divisible by 4; in the Gregorian calendar, leap years are either of the following:\nDivisible by 400.\nDivisible by 4 and not divisible by 100.\nGiven a year, , find the date of the 256th day of that year according to the official Russian calendar during that year. Then print it in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is .\nFor example, the given = 1984. 1984 is divisible by 4, so it is a leap year. The 256th day of a leap year after 1918 is September 12, so the answer is .\nFunction Description\nComplete the dayOfProgrammer function in the editor below. It should return a string representing the date of the 256th day of the year given.\ndayOfProgrammer has the following parameter(s):\nyear: an integer\nInput Format\nA single integer denoting year .\nConstraints\n1700 \\le y \\le 2700\nOutput Format\nPrint the full date of Day of the Programmer during year in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is .\nSample Input 0\n2017\nSample Output 0\n13.09.2017\nExplanation 0\nIn the year = 2017, January has 31 days, February has 28 days, March has 31 days, April has 30 days, May has 31 days, June has 30 days, July has 31 days, and August has 31 days. When we sum the total number of days in the first eight months, we get 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 = 243. Day of the Programmer is the 256th day, so then calculate 256 - 243 = 13 to determine that it falls on day 13 of the 9th month (September). We then print the full date in the specified format, which is 13.09.2017.\nSample Input 1\n2016\nSample Output 1\n12.09.2016\nExplanation 1\nYear = 2016 is a leap year, so February has 29 days but all the other months have the same number of days as in 2017. When we sum the total number of days in the first eight months, we get 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 = 244. Day of the Programmer is the 256th day, so then calculate 256 - 244 = 12 to determine that it falls on day 12 of the 9th month (September). We then print the full date in the specified format, which is 12.09.2016.\nSample Input 2\n1800\nSample Output 2\n12.09.1800\nExplanation 2\nSince 1800 is leap year as per Julian calendar. Day lies on 12 September.",
        "69": "Two friends Anna and Brian, are deciding how to split the bill at a dinner. Each will only pay for the items they consume. Brian gets the check and calculates Anna's portion. You must determine if his calculation is correct.\nFor example, assume the bill has the following prices: . Anna declines to eat item which costs . If Brian calculates the bill correctly, Anna will pay . If he includes the cost of , he will calculate . In the second case, he should refund to Anna.\nFunction Description\nComplete the bonAppetit function in the editor below. It should print Bon Appetit if the bill is fairly split. Otherwise, it should print the integer amount of money that Brian owes Anna.\nbonAppetit has the following parameter(s):\nbill: an array of integers representing the cost of each item ordered\nk: an integer representing the zero-based index of the item Anna doesn't eat\nb: the amount of money that Anna contributed to the bill\nInput Format\nThe first line contains two space-separated integers and , the number of items ordered and the -based index of the item that Anna did not eat.\nThe second line contains space-separated integers where .\nThe third line contains an integer, , the amount of money that Brian charged Anna for her share of the bill.\nConstraints\nThe amount of money due Anna will always be an integer\nOutput Format\nIf Brian did not overcharge Anna, print Bon Appetit on a new line; otherwise, print the difference (i.e., ) that Brian must refund to Anna. This will always be an integer.\nSample Input 0\n4 1\n3 10 2 9\n12\nSample Output 0\n5\nExplanation 0\nAnna didn't eat item , but she shared the rest of the items with Brian. The total cost of the shared items is and, split in half, the cost per person is . Brian charged her for her portion of the bill. We print the amount Anna was overcharged, , on a new line.\nSample Input 1\n4 1\n3 10 2 9\n7\nSample Output 1\nBon Appetit\nExplanation 1\nAnna didn't eat item , but she shared the rest of the items with Brian. The total cost of the shared items is and, split in half, the cost per person is . Because , we print Bon Appetit on a new line.",
        "70": "There is a large pile of socks that must be paired by color. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.\nExample\n\nThere is one pair of color and one of color . There are three odd socks left, one of each color. The number of pairs is .\nFunction Description\nComplete the sockMerchant function in the editor below.\nsockMerchant has the following parameter(s):\nint n: the number of socks in the pile\nint ar[n]: the colors of each sock\nReturns\nint: the number of pairs\nInput Format\nThe first line contains an integer , the number of socks represented in .\nThe second line contains space-separated integers, , the colors of the socks in the pile.\nConstraints\nwhere\nSample Input\nSTDIN                       Function\n-----                       --------\n9                           n = 9\n10 20 20 10 10 30 50 10 20  ar = [10, 20, 20, 10, 10, 30, 50, 10, 20]\nSample Output\n3\nExplanation\nThere are three pairs of socks.",
        "71": "A teacher asks the class to open their books to a page number. A student can either start turning pages from the front of the book or from the back of the book. They always turn pages one at a time. When they open the book, page is always on the right side:\nWhen they flip page , they see pages and . Each page except the last page will always be printed on both sides. The last page may only be printed on the front, given the length of the book. If the book is pages long, and a student wants to turn to page , what is the minimum number of pages to turn? They can start at the beginning or the end of the book.\nGiven and , find and print the minimum number of pages that must be turned in order to arrive at page .\nExample\n\nUsing the diagram above, if the student wants to get to page , they open the book to page , flip page and they are on the correct page. If they open the book to the last page, page , they turn page and are at the correct page. Return .\nFunction Description\nComplete the pageCount function in the editor below.\npageCount has the following parameter(s):\nint n: the number of pages in the book\nint p: the page number to turn to\nReturns\nint: the minimum number of pages to turn\nInput Format\nThe first line contains an integer , the number of pages in the book.\nThe second line contains an integer, , the page to turn to.\nConstraints\nSample Input 0\n6\n2\nSample Output 0\n1\nExplanation 0\nIf the student starts turning from page , they only need to turn page:\nIf a student starts turning from page , they need to turn pages:\nReturn the minimum value, .\nSample Input 1\n5\n4\nSample Output 1\n0\nExplanation 1\nIf the student starts turning from page , they need to turn pages:\nIf they start turning from page , they do not need to turn any pages:\nReturn the minimum value, .",
        "72": "An avid hiker keeps meticulous records of their hikes. During the last hike that took exactly steps, for every step it was noted if it was an uphill, , or a downhill, step. Hikes always start and end at sea level, and each step up or down represents a unit change in altitude. We define the following terms:\nA mountain is a sequence of consecutive steps above sea level, starting with a step up from sea level and ending with a step down to sea level.\nA valley is a sequence of consecutive steps below sea level, starting with a step down from sea level and ending with a step up to sea level.\nGiven the sequence of up and down steps during a hike, find and print the number of valleys walked through.\nExample\nThe hiker first enters a valley units deep. Then they climb out and up onto a mountain units high. Finally, the hiker returns to sea level and ends the hike.\nFunction Description\nComplete the countingValleys function in the editor below.\ncountingValleys has the following parameter(s):\nint steps: the number of steps on the hike\nstring path: a string describing the path\nReturns\nint: the number of valleys traversed\nInput Format\nThe first line contains an integer , the number of steps in the hike.\nThe second line contains a single string , of characters that describe the path.\nConstraints\nSample Input\n8\nUDDDUDUU\nSample Output\n1\nExplanation\nIf we represent _ as sea level, a step up as \/, and a step down as \\, the hike can be drawn as:\n_\/\\      _\n   \\    \/\n    \\\/\\\/\nThe hiker enters and leaves one valley.",
        "73": "A person wants to determine the most expensive computer keyboard and USB drive that can be purchased with a give budget. Given price lists for keyboards and USB drives and a budget, find the cost to buy them. If it is not possible to buy both items, return .\nExample\n\n\nThe person can buy a , or a . Choose the latter as the more expensive option and return .\nFunction Description\nComplete the getMoneySpent function in the editor below.\ngetMoneySpent has the following parameter(s):\nint keyboards[n]: the keyboard prices\nint drives[m]: the drive prices\nint b: the budget\nReturns\nint: the maximum that can be spent, or if it is not possible to buy both items\nInput Format\nThe first line contains three space-separated integers , , and , the budget, the number of keyboard models and the number of USB drive models.\nThe second line contains space-separated integers , the prices of each keyboard model.\nThe third line contains space-separated integers , the prices of the USB drives.\nConstraints\nThe price of each item is in the inclusive range .\nSample Input 0\n10 2 3\n3 1\n5 2 8\nSample Output 0\n9\nExplanation 0\nBuy the keyboard and the USB drive for a total cost of .\nSample Input 1\n5 1 1\n4\n5\nSample Output 1\n-1\nExplanation 1\nThere is no way to buy one keyboard and one USB drive because , so return .",
        "74": "Two cats and a mouse are at various positions on a line. You will be given their starting positions. Your task is to determine which cat will reach the mouse first, assuming the mouse does not move and the cats travel at equal speed. If the cats arrive at the same time, the mouse will be allowed to move and it will escape while they fight.\nYou are given queries in the form of , , and representing the respective positions for cats and , and for mouse . Complete the function to return the appropriate answer to each query, which will be printed on a new line.\nIf cat catches the mouse first, print Cat A.\nIf cat catches the mouse first, print Cat B.\nIf both cats reach the mouse at the same time, print Mouse C as the two cats fight and mouse escapes.\nExample\n\n\nThe cats are at positions (Cat A) and (Cat B), and the mouse is at position . Cat B, at position will arrive first since it is only unit away while the other is units away. Return 'Cat B'.\nFunction Description\nComplete the catAndMouse function in the editor below.\ncatAndMouse has the following parameter(s):\nint x: Cat 's position\nint y: Cat 's position\nint z: Mouse 's position\nReturns\nstring: Either 'Cat A', 'Cat B', or 'Mouse C'\nInput Format\nThe first line contains a single integer, , denoting the number of queries.\nEach of the subsequent lines contains three space-separated integers describing the respective values of (cat 's location), (cat 's location), and (mouse 's location).\nConstraints\nSample Input 0\n2\n1 2 3\n1 3 2\nSample Output 0\nCat B\nMouse C\nExplanation 0\nQuery 0: The positions of the cats and mouse are shown below:\nCat will catch the mouse first, so we print Cat B on a new line.\nQuery 1: In this query, cats and reach mouse at the exact same time:\nBecause the mouse escapes, we print Mouse C on a new line.",
        "75": "We define a magic square to be an matrix of distinct positive integers from to where the sum of any row, column, or diagonal of length is always equal to the same number: the magic constant.\nYou will be given a matrix of integers in the inclusive range . We can convert any digit to any other digit in the range at cost of . Given , convert it into a magic square at minimal cost. Print this cost on a new line.\nNote: The resulting magic square must contain distinct integers in the inclusive range .\nExample\n$s = [[5, 3, 4], [1, 5, 8], [6, 4, 2]]\nThe matrix looks like this:\n5 3 4\n1 5 8\n6 4 2\nWe can convert it to the following magic square:\n8 3 4\n1 5 9\n6 7 2\nThis took three replacements at a cost of .\nFunction Description\nComplete the formingMagicSquare function in the editor below.\nformingMagicSquare has the following parameter(s):\nint s[3][3]: a array of integers\nReturns\nint: the minimal total cost of converting the input square to a magic square\nInput Format\nEach of the lines contains three space-separated integers of row .\nConstraints\nSample Input 0\n4 9 2\n3 5 7\n8 1 5\nSample Output 0\n1\nExplanation 0\nIf we change the bottom right value, , from to at a cost of , becomes a magic square at the minimum possible cost.\nSample Input 1\n4 8 2\n4 5 7\n6 1 6\nSample Output 1\n4\nExplanation 1\nUsing 0-based indexing, if we make\n-> at a cost of\n-> at a cost of\n-> at a cost of ,\nthen the total cost will be .",
        "76": "Given an array of integers, find the longest subarray where the absolute difference between any two elements is less than or equal to .\nExample\nThere are two subarrays meeting the criterion: and . The maximum length subarray has elements.\nFunction Description\nComplete the pickingNumbers function in the editor below.\npickingNumbers has the following parameter(s):\nint a[n]: an array of integers\nReturns\nint: the length of the longest subarray that meets the criterion\nInput Format\nThe first line contains a single integer , the size of the array .\nThe second line contains space-separated integers, each an .\nConstraints\nThe answer will be .\nSample Input 0\n6\n4 6 5 3 3 1\nSample Output 0\n3\nExplanation 0\nWe choose the following multiset of integers from the array: . Each pair in the multiset has an absolute difference (i.e., and ), so we print the number of chosen integers, , as our answer.\nSample Input 1\n6\n1 2 2 3 1 2\nSample Output 1\n5\nExplanation 1\nWe choose the following multiset of integers from the array: . Each pair in the multiset has an absolute difference (i.e., , , and ), so we print the number of chosen integers, , as our answer.",
        "77": "An arcade game player wants to climb to the top of the leaderboard and track their ranking. The game uses Dense Ranking, so its leaderboard works like this:\nThe player with the highest score is ranked number on the leaderboard.\nPlayers who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number.\nExample\n\nThe ranked players will have ranks , , , and , respectively. If the player's scores are , and , their rankings after each game are , and . Return .\nFunction Description\nComplete the climbingLeaderboard function in the editor below.\nclimbingLeaderboard has the following parameter(s):\nint ranked[n]: the leaderboard scores\nint player[m]: the player's scores\nReturns\nint[m]: the player's rank after each new score\nInput Format\nThe first line contains an integer , the number of players on the leaderboard.\nThe next line contains space-separated integers , the leaderboard scores in decreasing order.\nThe next line contains an integer, , the number games the player plays.\nThe last line contains space-separated integers , the game scores.\nConstraints\nfor\nfor\nThe existing leaderboard, , is in descending order.\nThe player's scores, , are in ascending order.\nSubtask\nFor of the maximum score:",
        "78": "A video player plays a game in which the character competes in a hurdle race. Hurdles are of varying heights, and the characters have a maximum height they can jump. There is a magic potion they can take that will increase their maximum jump height by unit for each dose. How many doses of the potion must the character take to be able to jump all of the hurdles. If the character can already clear all of the hurdles, return .\nExample\n\nThe character can jump unit high initially and must take doses of potion to be able to jump all of the hurdles.\nFunction Description\nComplete the hurdleRace function in the editor below.\nhurdleRace has the following parameter(s):\nint k: the height the character can jump naturally\nint height[n]: the heights of each hurdle\nReturns\nint: the minimum number of doses required, always or more\nInput Format\nThe first line contains two space-separated integers and , the number of hurdles and the maximum height the character can jump naturally.\nThe second line contains space-separated integers where .\nConstraints\nSample Input 0\n5 4\n1 6 3 5 2\nSample Output 0\n2\nExplanation 0\nDan's character can jump a maximum of units, but the tallest hurdle has a height of :\nTo be able to jump all the hurdles, Dan must drink doses.\nSample Input 1\n5 7\n2 5 4 5 2\nSample Output 1\n0\nExplanation 1\nDan's character can jump a maximum of units, which is enough to cross all the hurdles:\nBecause he can already jump all the hurdles, Dan needs to drink doses.",
        "79": "When a contiguous block of text is selected in a PDF viewer, the selection is highlighted with a blue rectangle. In this PDF viewer, each word is highlighted independently. For example:\nThere is a list of character heights aligned by index to their letters. For example, 'a' is at index and 'z' is at index . There will also be a string. Using the letter heights given, determine the area of the rectangle highlight in assuming all letters are wide.\nExample\nThe heights are and . The tallest letter is high and there are letters. The hightlighted area will be so the answer is .\nFunction Description\nComplete the designerPdfViewer function in the editor below.\ndesignerPdfViewer has the following parameter(s):\nint h[26]: the heights of each letter\nstring word: a string\nReturns\nint: the size of the highlighted area\nInput Format\nThe first line contains space-separated integers describing the respective heights of each consecutive lowercase English letter, ascii[a-z].\nThe second line contains a single word consisting of lowercase English alphabetic letters.\nConstraints\n, where is an English lowercase letter.\ncontains no more than letters.\nSample Input 0\n1 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\nabc\nSample Output 0\n9\nExplanation 0\nWe are highlighting the word abc:\nLetter heights are , and . The tallest letter, b, is high. The selection area for this word is .\nNote: Recall that the width of each character is .\nSample Input 1\n1 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7\nzaba\nSample Output 1\n28\nExplanation 1\nThe tallest letter in is at . The selection area for this word is .",
        "80": "Complete the function solveMeFirst to compute the sum of two integers.\nExample\n\nReturn .\nFunction Description\nComplete the solveMeFirst function in the editor below.\nsolveMeFirst has the following parameters:\nint a: the first value\nint b: the second value\nReturns\n- int: the sum of and\nConstraints\nSample Input\na = 2\nb = 3\nSample Output\n5\nExplanation\n.",
        "81": "Given an array of integers, find the sum of its elements.\nFor example, if the array , , so return .\nFunction Description\nComplete the simpleArraySum function in the editor below. It must return the sum of the array elements as an integer.\nsimpleArraySum has the following parameter(s):\nar: an array of integers\nInput Format\nThe first line contains an integer, , denoting the size of the array.\nThe second line contains space-separated integers representing the array's elements.\nConstraints\nOutput Format\nPrint the sum of the array's elements as a single integer.\nSample Input\n6\n1 2 3 4 10 11\nSample Output\n31\nExplanation\nWe print the sum of the array's elements: .",
        "82": "Alice and Bob each created one problem for HackerRank. A reviewer rates the two challenges, awarding points on a scale from 1 to 100 for three categories: problem clarity, originality, and difficulty.\nThe rating for Alice's challenge is the triplet a = (a[0], a[1], a[2]), and the rating for Bob's challenge is the triplet b = (b[0], b[1], b[2]).\nThe task is to find their comparison points by comparing a[0] with b[0], a[1] with b[1], and a[2] with b[2].\nIf a[i] > b[i], then Alice is awarded 1 point.\nIf a[i] < b[i], then Bob is awarded 1 point.\nIf a[i] = b[i], then neither person receives a point.\nComparison points is the total points a person earned.\nGiven a and b, determine their respective comparison points.\nExample\na = [1, 2, 3]\nb = [3, 2, 1]\nFor elements *0*, Bob is awarded a point because a[0] .\nFor the equal elements a[1] and b[1], no points are earned.\nFinally, for elements 2, a[2] > b[2] so Alice receives a point.\nThe return array is [1, 1] with Alice's score first and Bob's second.\nFunction Description\nComplete the function compareTriplets in the editor below.\ncompareTriplets has the following parameter(s):\nint a[3]: Alice's challenge rating\nint b[3]: Bob's challenge rating\nReturn\nint[2]: Alice's score is in the first position, and Bob's score is in the second.\nInput Format\nThe first line contains 3 space-separated integers, a[0], a[1], and a[2], the respective values in triplet a.\nThe second line contains 3 space-separated integers, b[0], b[1], and b[2], the respective values in triplet b.\nConstraints\n1 \u2264 a[i] \u2264 100\n1 \u2264 b[i] \u2264 100\nSample Input 0\n5 6 7\n3 6 10\nSample Output 0\n1 1\nExplanation 0\nIn this example:\nNow, let's compare each individual score:\n, so Alice receives point.\n, so nobody receives a point.\n, so Bob receives point.\nAlice's comparison score is , and Bob's comparison score is . Thus, we return the array .\nSample Input 1\n17 28 30\n99 16 8\nSample Output 1\n2 1\nExplanation 1\nComparing the elements, so Bob receives a point.\nComparing the and elements, and so Alice receives two points.\nThe return array is .",
        "83": "In this challenge, you are required to calculate and print the sum of the elements in an array, keeping in mind that some of those integers may be quite large.\nFunction Description\nComplete the aVeryBigSum function in the editor below. It must return the sum of all array elements.\naVeryBigSum has the following parameter(s):\nint ar[n]: an array of integers .\nReturn\nlong: the sum of all array elements\nInput Format\nThe first line of the input consists of an integer .\nThe next line contains space-separated integers contained in the array.\nOutput Format\nReturn the integer sum of the elements in the array.\nConstraints\n\nSample Input\n5\n1000000001 1000000002 1000000003 1000000004 1000000005\nOutput\n5000000015\nNote:\nThe range of the 32-bit integer is .\nWhen we add several integer values, the resulting sum might exceed the above range. You might need to use long int C\/C++\/Java to store such sums.",
        "84": "Given a square matrix, calculate the absolute difference between the sums of its diagonals.\nFor example, the square matrix is shown below:\n1 2 3\n4 5 6\n9 8 9  \nThe left-to-right diagonal = . The right to left diagonal = . Their absolute difference is .\nFunction description\nComplete the function in the editor below.\ndiagonalDifference takes the following parameter:\nint arr[n][m]: an array of integers\nReturn\nint: the absolute diagonal difference\nInput Format\nThe first line contains a single integer, , the number of rows and columns in the square matrix .\nEach of the next lines describes a row, , and consists of space-separated integers .\nConstraints\nOutput Format\nReturn the absolute difference between the sums of the matrix's two diagonals as a single integer.\nSample Input\n3\n11 2 4\n4 5 6\n10 8 -12\nSample Output\n15\nExplanation\nThe primary diagonal is:\n11\n   5\n     -12\nSum across the primary diagonal: 11 + 5 - 12 = 4\nThe secondary diagonal is:\n     4\n   5\n10\nSum across the secondary diagonal: 4 + 5 + 10 = 19\nDifference: |4 - 19| = 15\nNote: |x| is the absolute value of x",
        "85": "Given an array of integers, calculate the ratios of its elements that are positive, negative, and zero. Print the decimal value of each fraction on a new line with places after the decimal.\nNote: This challenge introduces precision problems. The test cases are scaled to six decimal places, though answers with absolute error of up to are acceptable.\nExample\nThere are elements, two positive, two negative and one zero. Their ratios are , and . Results are printed as:\n0.400000\n0.400000\n0.200000\nFunction Description\nComplete the plusMinus function in the editor below.\nplusMinus has the following parameter(s):\nint arr[n]: an array of integers\nPrint\nPrint the ratios of positive, negative and zero values in the array. Each value should be printed on a separate line with digits after the decimal. The function should not return a value.\nInput Format\nThe first line contains an integer, , the size of the array.\nThe second line contains space-separated integers that describe .\nConstraints\n\nOutput Format\nPrint the following lines, each to decimals:\nproportion of positive values\nproportion of negative values\nproportion of zeros\nSample Input\nSTDIN           Function\n-----           --------\n6               arr[] size n = 6\n-4 3 -9 0 4 1   arr = [-4, 3, -9, 0, 4, 1]\nSample Output\n0.500000\n0.333333\n0.166667\nExplanation\nThere are positive numbers, negative numbers, and zero in the array.\nThe proportions of occurrence are positive: , negative: and zeros: .",
        "86": "Staircase detail\nThis is a staircase of size :\n   #\n  ##\n ###\n####\nIts base and height are both equal to . It is drawn using # symbols and spaces. The last line is not preceded by any spaces.\nWrite a program that prints a staircase of size .\nFunction Description\nComplete the staircase function in the editor below.\nstaircase has the following parameter(s):\nint n: an integer\nPrint\nPrint a staircase as described above.\nInput Format\nA single integer, , denoting the size of the staircase.\nConstraints\n.\nOutput Format\nPrint a staircase of size using # symbols and spaces.\nNote: The last line must have spaces in it.\nSample Input\n6 \nSample Output\n     #\n    ##\n   ###\n  ####\n #####\n######\nExplanation\nThe staircase is right-aligned, composed of # symbols and spaces, and has a height and width of .",
        "87": "Given five positive integers, find the minimum and maximum values that can be calculated by summing exactly four of the five integers. Then print the respective minimum and maximum values as a single line of two space-separated long integers.\nExample\nThe minimum sum is and the maximum sum is . The function prints\n16 24\nFunction Description\nComplete the miniMaxSum function in the editor below.\nminiMaxSum has the following parameter(s):\narr: an array of integers\nPrint\nPrint two space-separated integers on one line: the minimum sum and the maximum sum of of elements.\nInput Format\nA single line of five space-separated integers.\nConstraints\nOutput Format\nPrint two space-separated long integers denoting the respective minimum and maximum values that can be calculated by summing exactly four of the five integers. (The output can be greater than a 32 bit integer.)\nSample Input\n1 2 3 4 5\nSample Output\n10 14\nExplanation\nThe numbers are , , , , and . Calculate the following sums using four of the five integers:\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nHints: Beware of integer overflow! Use 64-bit Integer.\nNeed help to get started? Try the Solve Me First problem",
        "88": "You are in charge of the cake for a child's birthday. You have decided the cake will have one candle for each year of their total age. They will only be able to blow out the tallest of the candles. Count how many candles are tallest.\nExample\nThe maximum height candles are units high. There are of them, so return .\nFunction Description\nComplete the function birthdayCakeCandles in the editor below.\nbirthdayCakeCandles has the following parameter(s):\nint candles[n]: the candle heights\nReturns\nint: the number of candles that are tallest\nInput Format\nThe first line contains a single integer, , the size of .\nThe second line contains space-separated integers, where each integer describes the height of .\nConstraints\nSample Input 0\n4\n3 2 1 3\nSample Output 0\n2\nExplanation 0\nCandle heights are . The tallest candles are units, and there are of them.",
        "89": "Given a time in -hour AM\/PM format, convert it to military (24-hour) time.\nNote: - 12:00:00AM on a 12-hour clock is 00:00:00 on a 24-hour clock.\n- 12:00:00PM on a 12-hour clock is 12:00:00 on a 24-hour clock.\nExample\nReturn '12:01:00'.\nReturn '00:01:00'.\nFunction Description\nComplete the timeConversion function in the editor below. It should return a new string representing the input time in 24 hour format.\ntimeConversion has the following parameter(s):\nstring s: a time in hour format\nReturns\nstring: the time in hour format\nInput Format\nA single string that represents a time in -hour clock format (i.e.: or ).\nConstraints\nAll input times are valid\nSample Input 0\n07:05:45PM\nSample Output 0\n19:05:45",
        "90": "HackerLand University has the following grading policy:\nEvery student receives a in the inclusive range from to .\nAny less than is a failing grade.\nSam is a professor at the university and likes to round each student's according to these rules:\nIf the difference between the and the next multiple of is less than , round up to the next multiple of .\nIf the value of is less than , no rounding occurs as the result will still be a failing grade.\nExamples\nround to (85 - 84 is less than 3)\ndo not round (result is less than 40)\ndo not round (60 - 57 is 3 or higher)\nGiven the initial value of for each of Sam's students, write code to automate the rounding process.\nFunction Description\nComplete the function gradingStudents in the editor below.\ngradingStudents has the following parameter(s):\nint grades[n]: the grades before rounding\nReturns\nint[n]: the grades after rounding as appropriate\nInput Format\nThe first line contains a single integer, , the number of students.\nEach line of the subsequent lines contains a single integer, .\nConstraints\nSample Input 0\n4\n73\n67\n38\n33\nSample Output 0\n75\n67\n40\n33\nExplanation 0\nStudent received a , and the next multiple of from is . Since , the student's grade is rounded to .\nStudent received a , and the next multiple of from is . Since , the grade will not be modified and the student's final grade is .\nStudent received a , and the next multiple of from is . Since , the student's grade will be rounded to .\nStudent received a grade below , so the grade will not be modified and the student's final grade is .",
        "91": "Sam's house has an apple tree and an orange tree that yield an abundance of fruit. Using the information given below, determine the number of apples and oranges that land on Sam's house.\nIn the diagram below:\nThe red region denotes the house, where is the start point, and is the endpoint. The apple tree is to the left of the house, and the orange tree is to its right.\nAssume the trees are located on a single point, where the apple tree is at point , and the orange tree is at point .\nWhen a fruit falls from its tree, it lands units of distance from its tree of origin along the -axis. *A negative value of means the fruit fell units to the tree's left, and a positive value of means it falls units to the tree's right. *\nGiven the value of for apples and oranges, determine how many apples and oranges will fall on Sam's house (i.e., in the inclusive range )?\nFor example, Sam's house is between and . The apple tree is located at and the orange at . There are apples and oranges. Apples are thrown units distance from , and units distance. Adding each apple distance to the position of the tree, they land at . Oranges land at . One apple and two oranges land in the inclusive range so we print\n1\n2\nFunction Description\nComplete the countApplesAndOranges function in the editor below. It should print the number of apples and oranges that land on Sam's house, each on a separate line.\ncountApplesAndOranges has the following parameter(s):\ns: integer, starting point of Sam's house location.\nt: integer, ending location of Sam's house location.\na: integer, location of the Apple tree.\nb: integer, location of the Orange tree.\napples: integer array, distances at which each apple falls from the tree.\noranges: integer array, distances at which each orange falls from the tree.\nInput Format\nThe first line contains two space-separated integers denoting the respective values of and .\nThe second line contains two space-separated integers denoting the respective values of and .\nThe third line contains two space-separated integers denoting the respective values of and .\nThe fourth line contains space-separated integers denoting the respective distances that each apple falls from point .\nThe fifth line contains space-separated integers denoting the respective distances that each orange falls from point .\nConstraints\nOutput Format\nPrint two integers on two different lines:\nThe first integer: the number of apples that fall on Sam's house.\nThe second integer: the number of oranges that fall on Sam's house.\nSample Input 0\n7 11\n5 15\n3 2\n-2 2 1\n5 -6\nSample Output 0\n1\n1\nExplanation 0\nThe first apple falls at position .\nThe second apple falls at position .\nThe third apple falls at position .\nThe first orange falls at position .\nThe second orange falls at position .\nOnly one fruit (the second apple) falls within the region between and , so we print as our first line of output.\nOnly the second orange falls within the region between and , so we print as our second line of output.",
        "92": "You are choreographing a circus show with various animals. For one act, you are given two kangaroos on a number line ready to jump in the positive direction (i.e, toward positive infinity).\nThe first kangaroo starts at location and moves at a rate of meters per jump.\nThe second kangaroo starts at location and moves at a rate of meters per jump.\nYou have to figure out a way to get both kangaroos at the same location at the same time as part of the show. If it is possible, return YES, otherwise return NO.\nExample\n\n\n\nAfter one jump, they are both at , (, ), so the answer is YES.\nFunction Description\nComplete the function kangaroo in the editor below.\nkangaroo has the following parameter(s):\nint x1, int v1: starting position and jump distance for kangaroo 1\nint x2, int v2: starting position and jump distance for kangaroo 2\nReturns\nstring: either YES or NO\nInput Format\nA single line of four space-separated integers denoting the respective values of , , , and .\nConstraints\nSample Input 0\n0 3 4 2\nSample Output 0\nYES\nExplanation 0\nThe two kangaroos jump through the following sequence of locations:\nFrom the image, it is clear that the kangaroos meet at the same location (number on the number line) after same number of jumps ( jumps), and we print YES.\nSample Input 1\n0 2 5 3\nSample Output 1\nNO\nExplanation 1\nThe second kangaroo has a starting location that is ahead (further to the right) of the first kangaroo's starting location (i.e., ). Because the second kangaroo moves at a faster rate (meaning ) and is already ahead of the first kangaroo, the first kangaroo will never be able to catch up. Thus, we print NO.",
        "93": "There will be two arrays of integers. Determine all integers that satisfy the following two conditions:\nThe elements of the first array are all factors of the integer being considered\nThe integer being considered is a factor of all elements of the second array\nThese numbers are referred to as being between the two arrays. Determine how many such numbers exist.\nExample\n\nThere are two numbers between the arrays: and .\n, , and for the first value.\n, and , for the second value. Return .\nFunction Description\nComplete the getTotalX function in the editor below. It should return the number of integers that are betwen the sets.\ngetTotalX has the following parameter(s):\nint a[n]: an array of integers\nint b[m]: an array of integers\nReturns\nint: the number of integers that are between the sets\nInput Format\nThe first line contains two space-separated integers, and , the number of elements in arrays and .\nThe second line contains distinct space-separated integers where .\nThe third line contains distinct space-separated integers where .\nConstraints\nSample Input\n2 3\n2 4\n16 32 96\nSample Output\n3\nExplanation\n2 and 4 divide evenly into 4, 8, 12 and 16.\n4, 8 and 16 divide evenly into 16, 32, 96.\n4, 8 and 16 are the only three numbers for which each element of a is a factor and each is a factor of all elements of b.",
        "94": "Maria plays college basketball and wants to go pro. Each season she maintains a record of her play. She tabulates the number of times she breaks her season record for most points and least points in a game. Points scored in the first game establish her record for the season, and she begins counting from there.\nExample\nScores are in the same order as the games played. She tabulates her results as follows:\n                                     Count\n    Game  Score  Minimum  Maximum   Min Max\n     0      12     12       12       0   0\n     1      24     12       24       0   1\n     2      10     10       24       1   1\n     3      24     10       24       1   1\nGiven the scores for a season, determine the number of times Maria breaks her records for most and least points scored during the season.\nFunction Description\nComplete the breakingRecords function in the editor below.\nbreakingRecords has the following parameter(s):\nint scores[n]: points scored per game\nReturns\nint[2]: An array with the numbers of times she broke her records. Index is for breaking most points records, and index is for breaking least points records.\nInput Format\nThe first line contains an integer , the number of games.\nThe second line contains space-separated integers describing the respective values of .\nConstraints\nSample Input 0\n9\n10 5 20 20 4 5 2 25 1\nSample Output 0\n2 4\nExplanation 0\nThe diagram below depicts the number of times Maria broke her best and worst records throughout the season:\nShe broke her best record twice (after games and ) and her worst record four times (after games , , , and ), so we print 2 4 as our answer. Note that she did not break her record for best score during game , as her score during that game was not strictly greater than her best record at the time.\nSample Input 1\n10\n3 4 21 36 10 28 35 5 24 42\nSample Output 1\n4 0\nExplanation 1\nThe diagram below depicts the number of times Maria broke her best and worst records throughout the season:\nShe broke her best record four times (after games , , , and ) and her worst record zero times (no score during the season was lower than the one she earned during her first game), so we print 4 0 as our answer.",
        "95": "Two children, Lily and Ron, want to share a chocolate bar. Each of the squares has an integer on it.\nLily decides to share a contiguous segment of the bar selected such that:\nThe length of the segment matches Ron's birth month, and,\nThe sum of the integers on the squares is equal to his birth day.\nDetermine how many ways she can divide the chocolate.\nExample\n\n\nLily wants to find segments summing to Ron's birth day, with a length equalling his birth month, . In this case, there are two segments meeting her criteria: and .\nFunction Description\nComplete the birthday function in the editor below.\nbirthday has the following parameter(s):\nint s[n]: the numbers on each of the squares of chocolate\nint d: Ron's birth day\nint m: Ron's birth month\nReturns\nint: the number of ways the bar can be divided\nInput Format\nThe first line contains an integer , the number of squares in the chocolate bar.\nThe second line contains space-separated integers , the numbers on the chocolate squares where .\nThe third line contains two space-separated integers, and , Ron's birth day and his birth month.\nConstraints\n, where ()\nSample Input 0\n5\n1 2 1 3 2\n3 2\nSample Output 0\n2\nExplanation 0\nLily wants to give Ron squares summing to . The following two segments meet the criteria:\nSample Input 1\n6\n1 1 1 1 1 1\n3 2\nSample Output 1\n0\nExplanation 1\nLily only wants to give Ron consecutive squares of chocolate whose integers sum to . There are no possible pieces satisfying these constraints:\nThus, we print as our answer.\nSample Input 2\n1\n4\n4 1\nSample Output 2\n1\nExplanation 2\nLily only wants to give Ron square of chocolate with an integer value of . Because the only square of chocolate in the bar satisfies this constraint, we print as our answer.",
        "96": "Given an array of integers and a positive integer , determine the number of pairs where and + is divisible by .\nExample\n\nThree pairs meet the criteria: and .\nFunction Description\nComplete the divisibleSumPairs function in the editor below.\ndivisibleSumPairs has the following parameter(s):\nint n: the length of array\nint ar[n]: an array of integers\nint k: the integer divisor\nReturns\n- int: the number of pairs\nInput Format\nThe first line contains space-separated integers, and .\nThe second line contains space-separated integers, each a value of .\nConstraints\nSample Input\nSTDIN           Function\n-----           --------\n6 3             n = 6, k = 3\n1 3 2 6 1 2     ar = [1, 3, 2, 6, 1, 2]\nSample Output\n 5\nExplanation\nHere are the valid pairs when :",
        "97": "Given an array of bird sightings where every element represents a bird type id, determine the id of the most frequently sighted type. If more than 1 type has been spotted that maximum amount, return the smallest of their ids.\nExample\nThere are two each of types and , and one sighting of type . Pick the lower of the two types seen twice: type .\nFunction Description\nComplete the migratoryBirds function in the editor below.\nmigratoryBirds has the following parameter(s):\nint arr[n]: the types of birds sighted\nReturns\nint: the lowest type id of the most frequently sighted birds\nInput Format\nThe first line contains an integer, , the size of .\nThe second line describes as space-separated integers, each a type number of the bird sighted.\nConstraints\nIt is guaranteed that each type is , , , , or .\nSample Input 0\n6\n1 4 4 4 5 3\nSample Output 0\n4\nExplanation 0\nThe different types of birds occur in the following frequencies:\nType : bird\nType : birds\nType : bird\nType : birds\nType : bird\nThe type number that occurs at the highest frequency is type , so we print as our answer.\nSample Input 1\n11\n1 2 3 4 5 4 3 2 1 3 4\nSample Output 1\n3\nExplanation 1\nThe different types of birds occur in the following frequencies:\nType :\nType :\nType :\nType :\nType :\nTwo types have a frequency of , and the lower of those is type .",
        "98": "Marie invented a Time Machine and wants to test it by time-traveling to visit Russia on the Day of the Programmer (the 256th day of the year) during a year in the inclusive range from 1700 to 2700.\nFrom 1700 to 1917, Russia's official calendar was the Julian calendar; since 1919 they used the Gregorian calendar system. The transition from the Julian to Gregorian calendar system occurred in 1918, when the next day after January 31st was February 14th. This means that in 1918, February 14th was the 32nd day of the year in Russia.\nIn both calendar systems, February is the only month with a variable amount of days; it has 29 days during a leap year, and 28 days during all other years. In the Julian calendar, leap years are divisible by 4; in the Gregorian calendar, leap years are either of the following:\nDivisible by 400.\nDivisible by 4 and not divisible by 100.\nGiven a year, , find the date of the 256th day of that year according to the official Russian calendar during that year. Then print it in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is .\nFor example, the given = 1984. 1984 is divisible by 4, so it is a leap year. The 256th day of a leap year after 1918 is September 12, so the answer is .\nFunction Description\nComplete the dayOfProgrammer function in the editor below. It should return a string representing the date of the 256th day of the year given.\ndayOfProgrammer has the following parameter(s):\nyear: an integer\nInput Format\nA single integer denoting year .\nConstraints\n1700 \\le y \\le 2700\nOutput Format\nPrint the full date of Day of the Programmer during year in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is .\nSample Input 0\n2017\nSample Output 0\n13.09.2017\nExplanation 0\nIn the year = 2017, January has 31 days, February has 28 days, March has 31 days, April has 30 days, May has 31 days, June has 30 days, July has 31 days, and August has 31 days. When we sum the total number of days in the first eight months, we get 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 = 243. Day of the Programmer is the 256th day, so then calculate 256 - 243 = 13 to determine that it falls on day 13 of the 9th month (September). We then print the full date in the specified format, which is 13.09.2017.\nSample Input 1\n2016\nSample Output 1\n12.09.2016\nExplanation 1\nYear = 2016 is a leap year, so February has 29 days but all the other months have the same number of days as in 2017. When we sum the total number of days in the first eight months, we get 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 = 244. Day of the Programmer is the 256th day, so then calculate 256 - 244 = 12 to determine that it falls on day 12 of the 9th month (September). We then print the full date in the specified format, which is 12.09.2016.\nSample Input 2\n1800\nSample Output 2\n12.09.1800\nExplanation 2\nSince 1800 is leap year as per Julian calendar. Day lies on 12 September.",
        "99": "Two friends Anna and Brian, are deciding how to split the bill at a dinner. Each will only pay for the items they consume. Brian gets the check and calculates Anna's portion. You must determine if his calculation is correct.\nFor example, assume the bill has the following prices: . Anna declines to eat item which costs . If Brian calculates the bill correctly, Anna will pay . If he includes the cost of , he will calculate . In the second case, he should refund to Anna.\nFunction Description\nComplete the bonAppetit function in the editor below. It should print Bon Appetit if the bill is fairly split. Otherwise, it should print the integer amount of money that Brian owes Anna.\nbonAppetit has the following parameter(s):\nbill: an array of integers representing the cost of each item ordered\nk: an integer representing the zero-based index of the item Anna doesn't eat\nb: the amount of money that Anna contributed to the bill\nInput Format\nThe first line contains two space-separated integers and , the number of items ordered and the -based index of the item that Anna did not eat.\nThe second line contains space-separated integers where .\nThe third line contains an integer, , the amount of money that Brian charged Anna for her share of the bill.\nConstraints\nThe amount of money due Anna will always be an integer\nOutput Format\nIf Brian did not overcharge Anna, print Bon Appetit on a new line; otherwise, print the difference (i.e., ) that Brian must refund to Anna. This will always be an integer.\nSample Input 0\n4 1\n3 10 2 9\n12\nSample Output 0\n5\nExplanation 0\nAnna didn't eat item , but she shared the rest of the items with Brian. The total cost of the shared items is and, split in half, the cost per person is . Brian charged her for her portion of the bill. We print the amount Anna was overcharged, , on a new line.\nSample Input 1\n4 1\n3 10 2 9\n7\nSample Output 1\nBon Appetit\nExplanation 1\nAnna didn't eat item , but she shared the rest of the items with Brian. The total cost of the shared items is and, split in half, the cost per person is . Because , we print Bon Appetit on a new line.",
        "100": "There is a large pile of socks that must be paired by color. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.\nExample\n\nThere is one pair of color and one of color . There are three odd socks left, one of each color. The number of pairs is .\nFunction Description\nComplete the sockMerchant function in the editor below.\nsockMerchant has the following parameter(s):\nint n: the number of socks in the pile\nint ar[n]: the colors of each sock\nReturns\nint: the number of pairs\nInput Format\nThe first line contains an integer , the number of socks represented in .\nThe second line contains space-separated integers, , the colors of the socks in the pile.\nConstraints\nwhere\nSample Input\nSTDIN                       Function\n-----                       --------\n9                           n = 9\n10 20 20 10 10 30 50 10 20  ar = [10, 20, 20, 10, 10, 30, 50, 10, 20]\nSample Output\n3\nExplanation\nThere are three pairs of socks.",
        "101": "A teacher asks the class to open their books to a page number. A student can either start turning pages from the front of the book or from the back of the book. They always turn pages one at a time. When they open the book, page is always on the right side:\nWhen they flip page , they see pages and . Each page except the last page will always be printed on both sides. The last page may only be printed on the front, given the length of the book. If the book is pages long, and a student wants to turn to page , what is the minimum number of pages to turn? They can start at the beginning or the end of the book.\nGiven and , find and print the minimum number of pages that must be turned in order to arrive at page .\nExample\n\nUsing the diagram above, if the student wants to get to page , they open the book to page , flip page and they are on the correct page. If they open the book to the last page, page , they turn page and are at the correct page. Return .\nFunction Description\nComplete the pageCount function in the editor below.\npageCount has the following parameter(s):\nint n: the number of pages in the book\nint p: the page number to turn to\nReturns\nint: the minimum number of pages to turn\nInput Format\nThe first line contains an integer , the number of pages in the book.\nThe second line contains an integer, , the page to turn to.\nConstraints\nSample Input 0\n6\n2\nSample Output 0\n1\nExplanation 0\nIf the student starts turning from page , they only need to turn page:\nIf a student starts turning from page , they need to turn pages:\nReturn the minimum value, .\nSample Input 1\n5\n4\nSample Output 1\n0\nExplanation 1\nIf the student starts turning from page , they need to turn pages:\nIf they start turning from page , they do not need to turn any pages:\nReturn the minimum value, .",
        "102": "An avid hiker keeps meticulous records of their hikes. During the last hike that took exactly steps, for every step it was noted if it was an uphill, , or a downhill, step. Hikes always start and end at sea level, and each step up or down represents a unit change in altitude. We define the following terms:\nA mountain is a sequence of consecutive steps above sea level, starting with a step up from sea level and ending with a step down to sea level.\nA valley is a sequence of consecutive steps below sea level, starting with a step down from sea level and ending with a step up to sea level.\nGiven the sequence of up and down steps during a hike, find and print the number of valleys walked through.\nExample\nThe hiker first enters a valley units deep. Then they climb out and up onto a mountain units high. Finally, the hiker returns to sea level and ends the hike.\nFunction Description\nComplete the countingValleys function in the editor below.\ncountingValleys has the following parameter(s):\nint steps: the number of steps on the hike\nstring path: a string describing the path\nReturns\nint: the number of valleys traversed\nInput Format\nThe first line contains an integer , the number of steps in the hike.\nThe second line contains a single string , of characters that describe the path.\nConstraints\nSample Input\n8\nUDDDUDUU\nSample Output\n1\nExplanation\nIf we represent _ as sea level, a step up as \/, and a step down as \\, the hike can be drawn as:\n_\/\\      _\n   \\    \/\n    \\\/\\\/\nThe hiker enters and leaves one valley.",
        "103": "A person wants to determine the most expensive computer keyboard and USB drive that can be purchased with a give budget. Given price lists for keyboards and USB drives and a budget, find the cost to buy them. If it is not possible to buy both items, return .\nExample\n\n\nThe person can buy a , or a . Choose the latter as the more expensive option and return .\nFunction Description\nComplete the getMoneySpent function in the editor below.\ngetMoneySpent has the following parameter(s):\nint keyboards[n]: the keyboard prices\nint drives[m]: the drive prices\nint b: the budget\nReturns\nint: the maximum that can be spent, or if it is not possible to buy both items\nInput Format\nThe first line contains three space-separated integers , , and , the budget, the number of keyboard models and the number of USB drive models.\nThe second line contains space-separated integers , the prices of each keyboard model.\nThe third line contains space-separated integers , the prices of the USB drives.\nConstraints\nThe price of each item is in the inclusive range .\nSample Input 0\n10 2 3\n3 1\n5 2 8\nSample Output 0\n9\nExplanation 0\nBuy the keyboard and the USB drive for a total cost of .\nSample Input 1\n5 1 1\n4\n5\nSample Output 1\n-1\nExplanation 1\nThere is no way to buy one keyboard and one USB drive because , so return .",
        "104": "Two cats and a mouse are at various positions on a line. You will be given their starting positions. Your task is to determine which cat will reach the mouse first, assuming the mouse does not move and the cats travel at equal speed. If the cats arrive at the same time, the mouse will be allowed to move and it will escape while they fight.\nYou are given queries in the form of , , and representing the respective positions for cats and , and for mouse . Complete the function to return the appropriate answer to each query, which will be printed on a new line.\nIf cat catches the mouse first, print Cat A.\nIf cat catches the mouse first, print Cat B.\nIf both cats reach the mouse at the same time, print Mouse C as the two cats fight and mouse escapes.\nExample\n\n\nThe cats are at positions (Cat A) and (Cat B), and the mouse is at position . Cat B, at position will arrive first since it is only unit away while the other is units away. Return 'Cat B'.\nFunction Description\nComplete the catAndMouse function in the editor below.\ncatAndMouse has the following parameter(s):\nint x: Cat 's position\nint y: Cat 's position\nint z: Mouse 's position\nReturns\nstring: Either 'Cat A', 'Cat B', or 'Mouse C'\nInput Format\nThe first line contains a single integer, , denoting the number of queries.\nEach of the subsequent lines contains three space-separated integers describing the respective values of (cat 's location), (cat 's location), and (mouse 's location).\nConstraints\nSample Input 0\n2\n1 2 3\n1 3 2\nSample Output 0\nCat B\nMouse C\nExplanation 0\nQuery 0: The positions of the cats and mouse are shown below:\nCat will catch the mouse first, so we print Cat B on a new line.\nQuery 1: In this query, cats and reach mouse at the exact same time:\nBecause the mouse escapes, we print Mouse C on a new line.",
        "105": "We define a magic square to be an matrix of distinct positive integers from to where the sum of any row, column, or diagonal of length is always equal to the same number: the magic constant.\nYou will be given a matrix of integers in the inclusive range . We can convert any digit to any other digit in the range at cost of . Given , convert it into a magic square at minimal cost. Print this cost on a new line.\nNote: The resulting magic square must contain distinct integers in the inclusive range .\nExample\n$s = [[5, 3, 4], [1, 5, 8], [6, 4, 2]]\nThe matrix looks like this:\n5 3 4\n1 5 8\n6 4 2\nWe can convert it to the following magic square:\n8 3 4\n1 5 9\n6 7 2\nThis took three replacements at a cost of .\nFunction Description\nComplete the formingMagicSquare function in the editor below.\nformingMagicSquare has the following parameter(s):\nint s[3][3]: a array of integers\nReturns\nint: the minimal total cost of converting the input square to a magic square\nInput Format\nEach of the lines contains three space-separated integers of row .\nConstraints\nSample Input 0\n4 9 2\n3 5 7\n8 1 5\nSample Output 0\n1\nExplanation 0\nIf we change the bottom right value, , from to at a cost of , becomes a magic square at the minimum possible cost.\nSample Input 1\n4 8 2\n4 5 7\n6 1 6\nSample Output 1\n4\nExplanation 1\nUsing 0-based indexing, if we make\n-> at a cost of\n-> at a cost of\n-> at a cost of ,\nthen the total cost will be .",
        "106": "Given an array of integers, find the longest subarray where the absolute difference between any two elements is less than or equal to .\nExample\nThere are two subarrays meeting the criterion: and . The maximum length subarray has elements.\nFunction Description\nComplete the pickingNumbers function in the editor below.\npickingNumbers has the following parameter(s):\nint a[n]: an array of integers\nReturns\nint: the length of the longest subarray that meets the criterion\nInput Format\nThe first line contains a single integer , the size of the array .\nThe second line contains space-separated integers, each an .\nConstraints\nThe answer will be .\nSample Input 0\n6\n4 6 5 3 3 1\nSample Output 0\n3\nExplanation 0\nWe choose the following multiset of integers from the array: . Each pair in the multiset has an absolute difference (i.e., and ), so we print the number of chosen integers, , as our answer.\nSample Input 1\n6\n1 2 2 3 1 2\nSample Output 1\n5\nExplanation 1\nWe choose the following multiset of integers from the array: . Each pair in the multiset has an absolute difference (i.e., , , and ), so we print the number of chosen integers, , as our answer.",
        "107": "An arcade game player wants to climb to the top of the leaderboard and track their ranking. The game uses Dense Ranking, so its leaderboard works like this:\nThe player with the highest score is ranked number on the leaderboard.\nPlayers who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number.\nExample\n\nThe ranked players will have ranks , , , and , respectively. If the player's scores are , and , their rankings after each game are , and . Return .\nFunction Description\nComplete the climbingLeaderboard function in the editor below.\nclimbingLeaderboard has the following parameter(s):\nint ranked[n]: the leaderboard scores\nint player[m]: the player's scores\nReturns\nint[m]: the player's rank after each new score\nInput Format\nThe first line contains an integer , the number of players on the leaderboard.\nThe next line contains space-separated integers , the leaderboard scores in decreasing order.\nThe next line contains an integer, , the number games the player plays.\nThe last line contains space-separated integers , the game scores.\nConstraints\nfor\nfor\nThe existing leaderboard, , is in descending order.\nThe player's scores, , are in ascending order.\nSubtask\nFor of the maximum score:",
        "108": "A video player plays a game in which the character competes in a hurdle race. Hurdles are of varying heights, and the characters have a maximum height they can jump. There is a magic potion they can take that will increase their maximum jump height by unit for each dose. How many doses of the potion must the character take to be able to jump all of the hurdles. If the character can already clear all of the hurdles, return .\nExample\n\nThe character can jump unit high initially and must take doses of potion to be able to jump all of the hurdles.\nFunction Description\nComplete the hurdleRace function in the editor below.\nhurdleRace has the following parameter(s):\nint k: the height the character can jump naturally\nint height[n]: the heights of each hurdle\nReturns\nint: the minimum number of doses required, always or more\nInput Format\nThe first line contains two space-separated integers and , the number of hurdles and the maximum height the character can jump naturally.\nThe second line contains space-separated integers where .\nConstraints\nSample Input 0\n5 4\n1 6 3 5 2\nSample Output 0\n2\nExplanation 0\nDan's character can jump a maximum of units, but the tallest hurdle has a height of :\nTo be able to jump all the hurdles, Dan must drink doses.\nSample Input 1\n5 7\n2 5 4 5 2\nSample Output 1\n0\nExplanation 1\nDan's character can jump a maximum of units, which is enough to cross all the hurdles:\nBecause he can already jump all the hurdles, Dan needs to drink doses.",
        "109": "When a contiguous block of text is selected in a PDF viewer, the selection is highlighted with a blue rectangle. In this PDF viewer, each word is highlighted independently. For example:\nThere is a list of character heights aligned by index to their letters. For example, 'a' is at index and 'z' is at index . There will also be a string. Using the letter heights given, determine the area of the rectangle highlight in assuming all letters are wide.\nExample\nThe heights are and . The tallest letter is high and there are letters. The hightlighted area will be so the answer is .\nFunction Description\nComplete the designerPdfViewer function in the editor below.\ndesignerPdfViewer has the following parameter(s):\nint h[26]: the heights of each letter\nstring word: a string\nReturns\nint: the size of the highlighted area\nInput Format\nThe first line contains space-separated integers describing the respective heights of each consecutive lowercase English letter, ascii[a-z].\nThe second line contains a single word consisting of lowercase English alphabetic letters.\nConstraints\n, where is an English lowercase letter.\ncontains no more than letters.\nSample Input 0\n1 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\nabc\nSample Output 0\n9\nExplanation 0\nWe are highlighting the word abc:\nLetter heights are , and . The tallest letter, b, is high. The selection area for this word is .\nNote: Recall that the width of each character is .\nSample Input 1\n1 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7\nzaba\nSample Output 1\n28\nExplanation 1\nThe tallest letter in is at . The selection area for this word is .",
        "110": "The Utopian Tree goes through 2 cycles of growth every year. Each spring, it doubles in height. Each summer, its height increases by 1 meter.\nA Utopian Tree sapling with a height of 1 meter is planted at the onset of spring. How tall will the tree be after growth cycles?\nFor example, if the number of growth cycles is , the calculations are as follows:\nPeriod  Height\n0          1\n1          2\n2          3\n3          6\n4          7\n5          14\nFunction Description\nComplete the utopianTree function in the editor below.\nutopianTree has the following parameter(s):\nint n: the number of growth cycles to simulate\nReturns\nint: the height of the tree after the given number of cycles\nInput Format\nThe first line contains an integer, , the number of test cases.\nsubsequent lines each contain an integer, , the number of cycles for that test case.\nConstraints\n\nSample Input\n3\n0\n1\n4\nSample Output\n1\n2\n7\nExplanation\nThere are 3 test cases.\nIn the first case (), the initial height () of the tree remains unchanged.\nIn the second case (), the tree doubles in height and is meters tall after the spring cycle.\nIn the third case (), the tree doubles its height in spring (, ), then grows a meter in summer (, ), then doubles after the next spring (, ), and grows another meter after summer (, ). Thus, at the end of 4 cycles, its height is meters.",
        "111": "A Discrete Mathematics professor has a class of students. Frustrated with their lack of discipline, the professor decides to cancel class if fewer than some number of students are present when class starts. Arrival times go from on time () to arrived late ().\nGiven the arrival time of each student and a threshhold number of attendees, determine if the class is cancelled.\nExample\n\n\nThe first students arrived on. The last were late. The threshold is students, so class will go on. Return YES.\nNote: Non-positive arrival times () indicate the student arrived early or on time; positive arrival times () indicate the student arrived minutes late.\nFunction Description\nComplete the angryProfessor function in the editor below. It must return YES if class is cancelled, or NO otherwise.\nangryProfessor has the following parameter(s):\nint k: the threshold number of students\nint a[n]: the arrival times of the students\nReturns\nstring: either YES or NO\nInput Format\nThe first line of input contains , the number of test cases.\nEach test case consists of two lines.\nThe first line has two space-separated integers, and , the number of students (size of ) and the cancellation threshold.\nThe second line contains space-separated integers () that describe the arrival times for each student.\nConstraints\nSample Input\n2\n4 3\n-1 -3 4 2\n4 2\n0 -1 2 1\nSample Output\nYES\nNO\nExplanation\nFor the first test case, . The professor wants at least students in attendance, but only have arrived on time ( and ) so the class is cancelled.\nFor the second test case, . The professor wants at least students in attendance, and there are who arrived on time ( and ). The class is not cancelled.",
        "112": "Lily likes to play games with integers. She has created a new game where she determines the difference between a number and its reverse. For instance, given the number , its reverse is . Their difference is . The number reversed is , and their difference is .\nShe decides to apply her game to decision making. She will look at a numbered range of days and will only go to a movie on a beautiful day.\nGiven a range of numbered days, and a number , determine the number of days in the range that are beautiful. Beautiful numbers are defined as numbers where is evenly divisible by . If a day's value is a beautiful number, it is a beautiful day. Return the number of beautiful days in the range.\nFunction Description\nComplete the beautifulDays function in the editor below.\nbeautifulDays has the following parameter(s):\nint i: the starting day number\nint j: the ending day number\nint k: the divisor\nReturns\nint: the number of beautiful days in the range\nInput Format\nA single line of three space-separated integers describing the respective values of , , and .\nConstraints\nSample Input\n20 23 6\nSample Output\n2\nExplanation\nLily may go to the movies on days , , , and . We perform the following calculations to determine which days are beautiful:\nDay is beautiful because the following evaluates to a whole number:\nDay is not beautiful because the following doesn't evaluate to a whole number:\nDay is beautiful because the following evaluates to a whole number:\nDay is not beautiful because the following doesn't evaluate to a whole number:\nOnly two days, and , in this interval are beautiful. Thus, we print as our answer.",
        "113": "HackerLand Enterprise is adopting a new viral advertising strategy. When they launch a new product, they advertise it to exactly people on social media.\nOn the first day, half of those people (i.e., ) like the advertisement and each shares it with of their friends. At the beginning of the second day, people receive the advertisement.\nEach day, of the recipients like the advertisement and will share it with friends on the following day. Assuming nobody receives the advertisement twice, determine how many people have liked the ad by the end of a given day, beginning with launch day as day .\nExample\n.\nDay Shared Liked Cumulative\n1      5     2       2\n2      6     3       5\n3      9     4       9\n4     12     6      15\n5     18     9      24\nThe progression is shown above. The cumulative number of likes on the day is .\nFunction Description\nComplete the viralAdvertising function in the editor below.\nviralAdvertising has the following parameter(s):\nint n: the day number to report\nReturns\nint: the cumulative likes at that day\nInput Format\nA single integer, , the day number.\nConstraints\nSample Input\n3\nSample Output\n9\nExplanation\nThis example is depicted in the following diagram:\npeople liked the advertisement on the first day, people liked the advertisement on the second day and people liked the advertisement on the third day, so the answer is .",
        "114": "A jail has a number of prisoners and a number of treats to pass out to them. Their jailer decides the fairest way to divide the treats is to seat the prisoners around a circular table in sequentially numbered chairs. A chair number will be drawn from a hat. Beginning with the prisoner in that chair, one candy will be handed to each prisoner sequentially around the table until all have been distributed.\nThe jailer is playing a little joke, though. The last piece of candy looks like all the others, but it tastes awful. Determine the chair number occupied by the prisoner who will receive that candy.\nExample\n\n\nThere are prisoners, pieces of candy and distribution starts at chair . The prisoners arrange themselves in seats numbered to . Prisoners receive candy at positions . The prisoner to be warned sits in chair number .\nFunction Description\nComplete the saveThePrisoner function in the editor below. It should return an integer representing the chair number of the prisoner to warn.\nsaveThePrisoner has the following parameter(s):\nint n: the number of prisoners\nint m: the number of sweets\nint s: the chair number to begin passing out sweets from\nReturns\nint: the chair number of the prisoner to warn\nInput Format\nThe first line contains an integer, , the number of test cases.\nThe next lines each contain space-separated integers:\n: the number of prisoners\n: the number of sweets\n: the chair number to start passing out treats at\nConstraints\nSample Input 0\n2\n5 2 1\n5 2 2\nSample Output 0\n2\n3\nExplanation 0\nIn the first query, there are prisoners and sweets. Distribution starts at seat number . Prisoners in seats numbered and get sweets. Warn prisoner .\nIn the second query, distribution starts at seat so prisoners in seats and get sweets. Warn prisoner .\nSample Input 1\n2\n7 19 2\n3 7 3\nSample Output 1\n6\n3\nExplanation 1\nIn the first test case, there are prisoners, sweets and they are passed out starting at chair . The candies go all around twice and there are more candies passed to each prisoner from seat to seat .\nIn the second test case, there are prisoners, candies and they are passed out starting at seat . They go around twice, and there is one more to pass out to the prisoner at seat .",
        "115": "John Watson knows of an operation called a right circular rotation on an array of integers. One rotation operation moves the last array element to the first position and shifts all remaining elements right one. To test Sherlock's abilities, Watson provides Sherlock with an array of integers. Sherlock is to perform the rotation operation a number of times then determine the value of the element at a given position.\nFor each array, perform a number of right circular rotations and return the values of the elements at the given indices.\nExample\n\n\nHere is the number of rotations on , and holds the list of indices to report. First we perform the two rotations:\nNow return the values from the zero-based indices and as indicated in the array.\n\nFunction Description\nComplete the circularArrayRotation function in the editor below.\ncircularArrayRotation has the following parameter(s):\nint a[n]: the array to rotate\nint k: the rotation count\nint queries[1]: the indices to report\nReturns\nint[q]: the values in the rotated as requested in\nInput Format\nThe first line contains space-separated integers, , , and , the number of elements in the integer array, the rotation count and the number of queries.\nThe second line contains space-separated integers, where each integer describes array element (where ).\nEach of the subsequent lines contains a single integer, , an index of an element in to return.\nConstraints\nSample Input 0\n3 2 3\n1 2 3\n0\n1\n2\nSample Output 0\n2\n3\n1\nExplanation 0\nAfter the first rotation, the array is .\nAfter the second (and final) rotation, the array is .\nWe will call this final state array . For each query, we just have to get the value of .\n, .\n, .\n, .",
        "116": "Given a sequence of integers, where each element is distinct and satisfies . For each where , that is increments from to , find any integer such that and keep a history of the values of in a return array.\nExample\nEach value of between and , the length of the sequence, is analyzed as follows:\n, so\n, so\n, so\n, so\n, so\nThe values for are .\nFunction Description\nComplete the permutationEquation function in the editor below.\npermutationEquation has the following parameter(s):\nint p[n]: an array of integers\nReturns\nint[n]: the values of for all in the arithmetic sequence to\nInput Format\nThe first line contains an integer , the number of elements in the sequence.\nThe second line contains space-separated integers where .\nConstraints\n, where .\nEach element in the sequence is distinct.\nSample Input 0\n3\n2 3 1\nSample Output 0\n2\n3\n1\nExplanation 0\nGiven the values of , , and , we calculate and print the following values for each from to :\n, so we print the value of on a new line.\n, so we print the value of on a new line.\n, so we print the value of on a new line.\nSample Input 1\n5\n4 3 5 1 2\nSample Output 1\n1\n3\n5\n4\n2",
        "117": "A child is playing a cloud hopping game. In this game, there are sequentially numbered clouds that can be thunderheads or cumulus clouds. The character must jump from cloud to cloud until it reaches the start again.\nThere is an array of clouds, and an energy level . The character starts from and uses unit of energy to make a jump of size to cloud . If it lands on a thundercloud, , its energy () decreases by additional units. The game ends when the character lands back on cloud .\nGiven the values of , , and the configuration of the clouds as an array , determine the final value of after the game ends.\nExample.\nThe indices of the path are . The energy level reduces by for each jump to . The character landed on one thunderhead at an additional cost of energy units. The final energy level is .\nNote: Recall that refers to the modulo operation. In this case, it serves to make the route circular. If the character is at and jumps , it will arrive at .\nFunction Description\nComplete the jumpingOnClouds function in the editor below.\njumpingOnClouds has the following parameter(s):\nint c[n]: the cloud types along the path\nint k: the length of one jump\nReturns\nint: the energy level remaining.\nInput Format\nThe first line contains two space-separated integers, and , the number of clouds and the jump distance.\nThe second line contains space-separated integers where . Each cloud is described as follows:\nIf , then cloud is a cumulus cloud.\nIf , then cloud is a thunderhead.\nConstraints\nSample Input\nSTDIN             Function\n-----             --------\n8 2               n = 8, k = 2\n0 0 1 0 0 1 1 0   c = [0, 0, 1, 0, 0, 1, 1, 0]\nSample Output\n92\nExplanation\nIn the diagram below, red clouds are thunderheads and purple clouds are cumulus clouds:\nObserve that our thunderheads are the clouds numbered , , and . The character makes the following sequence of moves:\nMove: , Energy: .\nMove: , Energy: .\nMove: , Energy: .\nMove: , Energy: .",
        "118": "An integer is a divisor of an integer if the remainder of .\nGiven an integer, for each digit that makes up the integer determine whether it is a divisor. Count the number of divisors occurring within the integer.\nExample\nCheck whether , and are divisors of . All 3 numbers divide evenly into so return .\nCheck whether , , and are divisors of . All 3 numbers divide evenly into so return .\nCheck whether and are divisors of . is, but is not. Return .\nFunction Description\nComplete the findDigits function in the editor below.\nfindDigits has the following parameter(s):\nint n: the value to analyze\nReturns\nint: the number of digits in that are divisors of\nInput Format\nThe first line is an integer, , the number of test cases.\nThe subsequent lines each contain an integer, .\nConstraints\n\nSample Input\n2\n12\n1012\nSample Output\n2\n3\nExplanation\nThe number is broken into two digits, and . When is divided by either of those two digits, the remainder is so they are both divisors.\nThe number is broken into four digits, , , , and . is evenly divisible by its digits , , and , but it is not divisible by as division by zero is undefined.",
        "119": "The factorial of the integer , written , is defined as:\nCalculate and print the factorial of a given integer.\nFor example, if , we calculate and get .\nFunction Description\nComplete the extraLongFactorials function in the editor below. It should print the result and return.\nextraLongFactorials has the following parameter(s):\nn: an integer\nNote: Factorials of can't be stored even in a long long variable. Big integers must be used for such calculations. Languages like Java, Python, Ruby etc. can handle big integers, but we need to write additional code in C\/C++ to handle huge values.\nWe recommend solving this challenge using BigIntegers.\nInput Format\nInput consists of a single integer\nConstraints\nOutput Format\nPrint the factorial of .\nSample Input\nSample Output\nExplanation",
        "120": "Complete the function solveMeFirst to compute the sum of two integers.\nExample\n\nReturn .\nFunction Description\nComplete the solveMeFirst function in the editor below.\nsolveMeFirst has the following parameters:\nint a: the first value\nint b: the second value\nReturns\n- int: the sum of and\nConstraints\nSample Input\na = 2\nb = 3\nSample Output\n5\nExplanation\n.",
        "121": "Given an array of integers, find the sum of its elements.\nFor example, if the array , , so return .\nFunction Description\nComplete the simpleArraySum function in the editor below. It must return the sum of the array elements as an integer.\nsimpleArraySum has the following parameter(s):\nar: an array of integers\nInput Format\nThe first line contains an integer, , denoting the size of the array.\nThe second line contains space-separated integers representing the array's elements.\nConstraints\nOutput Format\nPrint the sum of the array's elements as a single integer.\nSample Input\n6\n1 2 3 4 10 11\nSample Output\n31\nExplanation\nWe print the sum of the array's elements: .",
        "122": "Alice and Bob each created one problem for HackerRank. A reviewer rates the two challenges, awarding points on a scale from 1 to 100 for three categories: problem clarity, originality, and difficulty.\nThe rating for Alice's challenge is the triplet a = (a[0], a[1], a[2]), and the rating for Bob's challenge is the triplet b = (b[0], b[1], b[2]).\nThe task is to find their comparison points by comparing a[0] with b[0], a[1] with b[1], and a[2] with b[2].\nIf a[i] > b[i], then Alice is awarded 1 point.\nIf a[i] < b[i], then Bob is awarded 1 point.\nIf a[i] = b[i], then neither person receives a point.\nComparison points is the total points a person earned.\nGiven a and b, determine their respective comparison points.\nExample\na = [1, 2, 3]\nb = [3, 2, 1]\nFor elements *0*, Bob is awarded a point because a[0] .\nFor the equal elements a[1] and b[1], no points are earned.\nFinally, for elements 2, a[2] > b[2] so Alice receives a point.\nThe return array is [1, 1] with Alice's score first and Bob's second.\nFunction Description\nComplete the function compareTriplets in the editor below.\ncompareTriplets has the following parameter(s):\nint a[3]: Alice's challenge rating\nint b[3]: Bob's challenge rating\nReturn\nint[2]: Alice's score is in the first position, and Bob's score is in the second.\nInput Format\nThe first line contains 3 space-separated integers, a[0], a[1], and a[2], the respective values in triplet a.\nThe second line contains 3 space-separated integers, b[0], b[1], and b[2], the respective values in triplet b.\nConstraints\n1 \u2264 a[i] \u2264 100\n1 \u2264 b[i] \u2264 100\nSample Input 0\n5 6 7\n3 6 10\nSample Output 0\n1 1\nExplanation 0\nIn this example:\nNow, let's compare each individual score:\n, so Alice receives point.\n, so nobody receives a point.\n, so Bob receives point.\nAlice's comparison score is , and Bob's comparison score is . Thus, we return the array .\nSample Input 1\n17 28 30\n99 16 8\nSample Output 1\n2 1\nExplanation 1\nComparing the elements, so Bob receives a point.\nComparing the and elements, and so Alice receives two points.\nThe return array is .",
        "123": "In this challenge, you are required to calculate and print the sum of the elements in an array, keeping in mind that some of those integers may be quite large.\nFunction Description\nComplete the aVeryBigSum function in the editor below. It must return the sum of all array elements.\naVeryBigSum has the following parameter(s):\nint ar[n]: an array of integers .\nReturn\nlong: the sum of all array elements\nInput Format\nThe first line of the input consists of an integer .\nThe next line contains space-separated integers contained in the array.\nOutput Format\nReturn the integer sum of the elements in the array.\nConstraints\n\nSample Input\n5\n1000000001 1000000002 1000000003 1000000004 1000000005\nOutput\n5000000015\nNote:\nThe range of the 32-bit integer is .\nWhen we add several integer values, the resulting sum might exceed the above range. You might need to use long int C\/C++\/Java to store such sums.",
        "124": "Given a square matrix, calculate the absolute difference between the sums of its diagonals.\nFor example, the square matrix is shown below:\n1 2 3\n4 5 6\n9 8 9  \nThe left-to-right diagonal = . The right to left diagonal = . Their absolute difference is .\nFunction description\nComplete the function in the editor below.\ndiagonalDifference takes the following parameter:\nint arr[n][m]: an array of integers\nReturn\nint: the absolute diagonal difference\nInput Format\nThe first line contains a single integer, , the number of rows and columns in the square matrix .\nEach of the next lines describes a row, , and consists of space-separated integers .\nConstraints\nOutput Format\nReturn the absolute difference between the sums of the matrix's two diagonals as a single integer.\nSample Input\n3\n11 2 4\n4 5 6\n10 8 -12\nSample Output\n15\nExplanation\nThe primary diagonal is:\n11\n   5\n     -12\nSum across the primary diagonal: 11 + 5 - 12 = 4\nThe secondary diagonal is:\n     4\n   5\n10\nSum across the secondary diagonal: 4 + 5 + 10 = 19\nDifference: |4 - 19| = 15\nNote: |x| is the absolute value of x",
        "125": "Given an array of integers, calculate the ratios of its elements that are positive, negative, and zero. Print the decimal value of each fraction on a new line with places after the decimal.\nNote: This challenge introduces precision problems. The test cases are scaled to six decimal places, though answers with absolute error of up to are acceptable.\nExample\nThere are elements, two positive, two negative and one zero. Their ratios are , and . Results are printed as:\n0.400000\n0.400000\n0.200000\nFunction Description\nComplete the plusMinus function in the editor below.\nplusMinus has the following parameter(s):\nint arr[n]: an array of integers\nPrint\nPrint the ratios of positive, negative and zero values in the array. Each value should be printed on a separate line with digits after the decimal. The function should not return a value.\nInput Format\nThe first line contains an integer, , the size of the array.\nThe second line contains space-separated integers that describe .\nConstraints\n\nOutput Format\nPrint the following lines, each to decimals:\nproportion of positive values\nproportion of negative values\nproportion of zeros\nSample Input\nSTDIN           Function\n-----           --------\n6               arr[] size n = 6\n-4 3 -9 0 4 1   arr = [-4, 3, -9, 0, 4, 1]\nSample Output\n0.500000\n0.333333\n0.166667\nExplanation\nThere are positive numbers, negative numbers, and zero in the array.\nThe proportions of occurrence are positive: , negative: and zeros: .",
        "126": "Staircase detail\nThis is a staircase of size :\n   #\n  ##\n ###\n####\nIts base and height are both equal to . It is drawn using # symbols and spaces. The last line is not preceded by any spaces.\nWrite a program that prints a staircase of size .\nFunction Description\nComplete the staircase function in the editor below.\nstaircase has the following parameter(s):\nint n: an integer\nPrint\nPrint a staircase as described above.\nInput Format\nA single integer, , denoting the size of the staircase.\nConstraints\n.\nOutput Format\nPrint a staircase of size using # symbols and spaces.\nNote: The last line must have spaces in it.\nSample Input\n6 \nSample Output\n     #\n    ##\n   ###\n  ####\n #####\n######\nExplanation\nThe staircase is right-aligned, composed of # symbols and spaces, and has a height and width of .",
        "127": "Given five positive integers, find the minimum and maximum values that can be calculated by summing exactly four of the five integers. Then print the respective minimum and maximum values as a single line of two space-separated long integers.\nExample\nThe minimum sum is and the maximum sum is . The function prints\n16 24\nFunction Description\nComplete the miniMaxSum function in the editor below.\nminiMaxSum has the following parameter(s):\narr: an array of integers\nPrint\nPrint two space-separated integers on one line: the minimum sum and the maximum sum of of elements.\nInput Format\nA single line of five space-separated integers.\nConstraints\nOutput Format\nPrint two space-separated long integers denoting the respective minimum and maximum values that can be calculated by summing exactly four of the five integers. (The output can be greater than a 32 bit integer.)\nSample Input\n1 2 3 4 5\nSample Output\n10 14\nExplanation\nThe numbers are , , , , and . Calculate the following sums using four of the five integers:\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nHints: Beware of integer overflow! Use 64-bit Integer.\nNeed help to get started? Try the Solve Me First problem",
        "128": "You are in charge of the cake for a child's birthday. You have decided the cake will have one candle for each year of their total age. They will only be able to blow out the tallest of the candles. Count how many candles are tallest.\nExample\nThe maximum height candles are units high. There are of them, so return .\nFunction Description\nComplete the function birthdayCakeCandles in the editor below.\nbirthdayCakeCandles has the following parameter(s):\nint candles[n]: the candle heights\nReturns\nint: the number of candles that are tallest\nInput Format\nThe first line contains a single integer, , the size of .\nThe second line contains space-separated integers, where each integer describes the height of .\nConstraints\nSample Input 0\n4\n3 2 1 3\nSample Output 0\n2\nExplanation 0\nCandle heights are . The tallest candles are units, and there are of them.",
        "129": "Given a time in -hour AM\/PM format, convert it to military (24-hour) time.\nNote: - 12:00:00AM on a 12-hour clock is 00:00:00 on a 24-hour clock.\n- 12:00:00PM on a 12-hour clock is 12:00:00 on a 24-hour clock.\nExample\nReturn '12:01:00'.\nReturn '00:01:00'.\nFunction Description\nComplete the timeConversion function in the editor below. It should return a new string representing the input time in 24 hour format.\ntimeConversion has the following parameter(s):\nstring s: a time in hour format\nReturns\nstring: the time in hour format\nInput Format\nA single string that represents a time in -hour clock format (i.e.: or ).\nConstraints\nAll input times are valid\nSample Input 0\n07:05:45PM\nSample Output 0\n19:05:45",
        "130": "HackerLand University has the following grading policy:\nEvery student receives a in the inclusive range from to .\nAny less than is a failing grade.\nSam is a professor at the university and likes to round each student's according to these rules:\nIf the difference between the and the next multiple of is less than , round up to the next multiple of .\nIf the value of is less than , no rounding occurs as the result will still be a failing grade.\nExamples\nround to (85 - 84 is less than 3)\ndo not round (result is less than 40)\ndo not round (60 - 57 is 3 or higher)\nGiven the initial value of for each of Sam's students, write code to automate the rounding process.\nFunction Description\nComplete the function gradingStudents in the editor below.\ngradingStudents has the following parameter(s):\nint grades[n]: the grades before rounding\nReturns\nint[n]: the grades after rounding as appropriate\nInput Format\nThe first line contains a single integer, , the number of students.\nEach line of the subsequent lines contains a single integer, .\nConstraints\nSample Input 0\n4\n73\n67\n38\n33\nSample Output 0\n75\n67\n40\n33\nExplanation 0\nStudent received a , and the next multiple of from is . Since , the student's grade is rounded to .\nStudent received a , and the next multiple of from is . Since , the grade will not be modified and the student's final grade is .\nStudent received a , and the next multiple of from is . Since , the student's grade will be rounded to .\nStudent received a grade below , so the grade will not be modified and the student's final grade is .",
        "131": "Sam's house has an apple tree and an orange tree that yield an abundance of fruit. Using the information given below, determine the number of apples and oranges that land on Sam's house.\nIn the diagram below:\nThe red region denotes the house, where is the start point, and is the endpoint. The apple tree is to the left of the house, and the orange tree is to its right.\nAssume the trees are located on a single point, where the apple tree is at point , and the orange tree is at point .\nWhen a fruit falls from its tree, it lands units of distance from its tree of origin along the -axis. *A negative value of means the fruit fell units to the tree's left, and a positive value of means it falls units to the tree's right. *\nGiven the value of for apples and oranges, determine how many apples and oranges will fall on Sam's house (i.e., in the inclusive range )?\nFor example, Sam's house is between and . The apple tree is located at and the orange at . There are apples and oranges. Apples are thrown units distance from , and units distance. Adding each apple distance to the position of the tree, they land at . Oranges land at . One apple and two oranges land in the inclusive range so we print\n1\n2\nFunction Description\nComplete the countApplesAndOranges function in the editor below. It should print the number of apples and oranges that land on Sam's house, each on a separate line.\ncountApplesAndOranges has the following parameter(s):\ns: integer, starting point of Sam's house location.\nt: integer, ending location of Sam's house location.\na: integer, location of the Apple tree.\nb: integer, location of the Orange tree.\napples: integer array, distances at which each apple falls from the tree.\noranges: integer array, distances at which each orange falls from the tree.\nInput Format\nThe first line contains two space-separated integers denoting the respective values of and .\nThe second line contains two space-separated integers denoting the respective values of and .\nThe third line contains two space-separated integers denoting the respective values of and .\nThe fourth line contains space-separated integers denoting the respective distances that each apple falls from point .\nThe fifth line contains space-separated integers denoting the respective distances that each orange falls from point .\nConstraints\nOutput Format\nPrint two integers on two different lines:\nThe first integer: the number of apples that fall on Sam's house.\nThe second integer: the number of oranges that fall on Sam's house.\nSample Input 0\n7 11\n5 15\n3 2\n-2 2 1\n5 -6\nSample Output 0\n1\n1\nExplanation 0\nThe first apple falls at position .\nThe second apple falls at position .\nThe third apple falls at position .\nThe first orange falls at position .\nThe second orange falls at position .\nOnly one fruit (the second apple) falls within the region between and , so we print as our first line of output.\nOnly the second orange falls within the region between and , so we print as our second line of output.",
        "132": "You are choreographing a circus show with various animals. For one act, you are given two kangaroos on a number line ready to jump in the positive direction (i.e, toward positive infinity).\nThe first kangaroo starts at location and moves at a rate of meters per jump.\nThe second kangaroo starts at location and moves at a rate of meters per jump.\nYou have to figure out a way to get both kangaroos at the same location at the same time as part of the show. If it is possible, return YES, otherwise return NO.\nExample\n\n\n\nAfter one jump, they are both at , (, ), so the answer is YES.\nFunction Description\nComplete the function kangaroo in the editor below.\nkangaroo has the following parameter(s):\nint x1, int v1: starting position and jump distance for kangaroo 1\nint x2, int v2: starting position and jump distance for kangaroo 2\nReturns\nstring: either YES or NO\nInput Format\nA single line of four space-separated integers denoting the respective values of , , , and .\nConstraints\nSample Input 0\n0 3 4 2\nSample Output 0\nYES\nExplanation 0\nThe two kangaroos jump through the following sequence of locations:\nFrom the image, it is clear that the kangaroos meet at the same location (number on the number line) after same number of jumps ( jumps), and we print YES.\nSample Input 1\n0 2 5 3\nSample Output 1\nNO\nExplanation 1\nThe second kangaroo has a starting location that is ahead (further to the right) of the first kangaroo's starting location (i.e., ). Because the second kangaroo moves at a faster rate (meaning ) and is already ahead of the first kangaroo, the first kangaroo will never be able to catch up. Thus, we print NO.",
        "133": "There will be two arrays of integers. Determine all integers that satisfy the following two conditions:\nThe elements of the first array are all factors of the integer being considered\nThe integer being considered is a factor of all elements of the second array\nThese numbers are referred to as being between the two arrays. Determine how many such numbers exist.\nExample\n\nThere are two numbers between the arrays: and .\n, , and for the first value.\n, and , for the second value. Return .\nFunction Description\nComplete the getTotalX function in the editor below. It should return the number of integers that are betwen the sets.\ngetTotalX has the following parameter(s):\nint a[n]: an array of integers\nint b[m]: an array of integers\nReturns\nint: the number of integers that are between the sets\nInput Format\nThe first line contains two space-separated integers, and , the number of elements in arrays and .\nThe second line contains distinct space-separated integers where .\nThe third line contains distinct space-separated integers where .\nConstraints\nSample Input\n2 3\n2 4\n16 32 96\nSample Output\n3\nExplanation\n2 and 4 divide evenly into 4, 8, 12 and 16.\n4, 8 and 16 divide evenly into 16, 32, 96.\n4, 8 and 16 are the only three numbers for which each element of a is a factor and each is a factor of all elements of b.",
        "134": "Maria plays college basketball and wants to go pro. Each season she maintains a record of her play. She tabulates the number of times she breaks her season record for most points and least points in a game. Points scored in the first game establish her record for the season, and she begins counting from there.\nExample\nScores are in the same order as the games played. She tabulates her results as follows:\n                                     Count\n    Game  Score  Minimum  Maximum   Min Max\n     0      12     12       12       0   0\n     1      24     12       24       0   1\n     2      10     10       24       1   1\n     3      24     10       24       1   1\nGiven the scores for a season, determine the number of times Maria breaks her records for most and least points scored during the season.\nFunction Description\nComplete the breakingRecords function in the editor below.\nbreakingRecords has the following parameter(s):\nint scores[n]: points scored per game\nReturns\nint[2]: An array with the numbers of times she broke her records. Index is for breaking most points records, and index is for breaking least points records.\nInput Format\nThe first line contains an integer , the number of games.\nThe second line contains space-separated integers describing the respective values of .\nConstraints\nSample Input 0\n9\n10 5 20 20 4 5 2 25 1\nSample Output 0\n2 4\nExplanation 0\nThe diagram below depicts the number of times Maria broke her best and worst records throughout the season:\nShe broke her best record twice (after games and ) and her worst record four times (after games , , , and ), so we print 2 4 as our answer. Note that she did not break her record for best score during game , as her score during that game was not strictly greater than her best record at the time.\nSample Input 1\n10\n3 4 21 36 10 28 35 5 24 42\nSample Output 1\n4 0\nExplanation 1\nThe diagram below depicts the number of times Maria broke her best and worst records throughout the season:\nShe broke her best record four times (after games , , , and ) and her worst record zero times (no score during the season was lower than the one she earned during her first game), so we print 4 0 as our answer.",
        "135": "Two children, Lily and Ron, want to share a chocolate bar. Each of the squares has an integer on it.\nLily decides to share a contiguous segment of the bar selected such that:\nThe length of the segment matches Ron's birth month, and,\nThe sum of the integers on the squares is equal to his birth day.\nDetermine how many ways she can divide the chocolate.\nExample\n\n\nLily wants to find segments summing to Ron's birth day, with a length equalling his birth month, . In this case, there are two segments meeting her criteria: and .\nFunction Description\nComplete the birthday function in the editor below.\nbirthday has the following parameter(s):\nint s[n]: the numbers on each of the squares of chocolate\nint d: Ron's birth day\nint m: Ron's birth month\nReturns\nint: the number of ways the bar can be divided\nInput Format\nThe first line contains an integer , the number of squares in the chocolate bar.\nThe second line contains space-separated integers , the numbers on the chocolate squares where .\nThe third line contains two space-separated integers, and , Ron's birth day and his birth month.\nConstraints\n, where ()\nSample Input 0\n5\n1 2 1 3 2\n3 2\nSample Output 0\n2\nExplanation 0\nLily wants to give Ron squares summing to . The following two segments meet the criteria:\nSample Input 1\n6\n1 1 1 1 1 1\n3 2\nSample Output 1\n0\nExplanation 1\nLily only wants to give Ron consecutive squares of chocolate whose integers sum to . There are no possible pieces satisfying these constraints:\nThus, we print as our answer.\nSample Input 2\n1\n4\n4 1\nSample Output 2\n1\nExplanation 2\nLily only wants to give Ron square of chocolate with an integer value of . Because the only square of chocolate in the bar satisfies this constraint, we print as our answer.",
        "136": "Given an array of integers and a positive integer , determine the number of pairs where and + is divisible by .\nExample\n\nThree pairs meet the criteria: and .\nFunction Description\nComplete the divisibleSumPairs function in the editor below.\ndivisibleSumPairs has the following parameter(s):\nint n: the length of array\nint ar[n]: an array of integers\nint k: the integer divisor\nReturns\n- int: the number of pairs\nInput Format\nThe first line contains space-separated integers, and .\nThe second line contains space-separated integers, each a value of .\nConstraints\nSample Input\nSTDIN           Function\n-----           --------\n6 3             n = 6, k = 3\n1 3 2 6 1 2     ar = [1, 3, 2, 6, 1, 2]\nSample Output\n 5\nExplanation\nHere are the valid pairs when :",
        "137": "Given an array of bird sightings where every element represents a bird type id, determine the id of the most frequently sighted type. If more than 1 type has been spotted that maximum amount, return the smallest of their ids.\nExample\nThere are two each of types and , and one sighting of type . Pick the lower of the two types seen twice: type .\nFunction Description\nComplete the migratoryBirds function in the editor below.\nmigratoryBirds has the following parameter(s):\nint arr[n]: the types of birds sighted\nReturns\nint: the lowest type id of the most frequently sighted birds\nInput Format\nThe first line contains an integer, , the size of .\nThe second line describes as space-separated integers, each a type number of the bird sighted.\nConstraints\nIt is guaranteed that each type is , , , , or .\nSample Input 0\n6\n1 4 4 4 5 3\nSample Output 0\n4\nExplanation 0\nThe different types of birds occur in the following frequencies:\nType : bird\nType : birds\nType : bird\nType : birds\nType : bird\nThe type number that occurs at the highest frequency is type , so we print as our answer.\nSample Input 1\n11\n1 2 3 4 5 4 3 2 1 3 4\nSample Output 1\n3\nExplanation 1\nThe different types of birds occur in the following frequencies:\nType :\nType :\nType :\nType :\nType :\nTwo types have a frequency of , and the lower of those is type .",
        "138": "Marie invented a Time Machine and wants to test it by time-traveling to visit Russia on the Day of the Programmer (the 256th day of the year) during a year in the inclusive range from 1700 to 2700.\nFrom 1700 to 1917, Russia's official calendar was the Julian calendar; since 1919 they used the Gregorian calendar system. The transition from the Julian to Gregorian calendar system occurred in 1918, when the next day after January 31st was February 14th. This means that in 1918, February 14th was the 32nd day of the year in Russia.\nIn both calendar systems, February is the only month with a variable amount of days; it has 29 days during a leap year, and 28 days during all other years. In the Julian calendar, leap years are divisible by 4; in the Gregorian calendar, leap years are either of the following:\nDivisible by 400.\nDivisible by 4 and not divisible by 100.\nGiven a year, , find the date of the 256th day of that year according to the official Russian calendar during that year. Then print it in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is .\nFor example, the given = 1984. 1984 is divisible by 4, so it is a leap year. The 256th day of a leap year after 1918 is September 12, so the answer is .\nFunction Description\nComplete the dayOfProgrammer function in the editor below. It should return a string representing the date of the 256th day of the year given.\ndayOfProgrammer has the following parameter(s):\nyear: an integer\nInput Format\nA single integer denoting year .\nConstraints\n1700 \\le y \\le 2700\nOutput Format\nPrint the full date of Day of the Programmer during year in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is .\nSample Input 0\n2017\nSample Output 0\n13.09.2017\nExplanation 0\nIn the year = 2017, January has 31 days, February has 28 days, March has 31 days, April has 30 days, May has 31 days, June has 30 days, July has 31 days, and August has 31 days. When we sum the total number of days in the first eight months, we get 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 = 243. Day of the Programmer is the 256th day, so then calculate 256 - 243 = 13 to determine that it falls on day 13 of the 9th month (September). We then print the full date in the specified format, which is 13.09.2017.\nSample Input 1\n2016\nSample Output 1\n12.09.2016\nExplanation 1\nYear = 2016 is a leap year, so February has 29 days but all the other months have the same number of days as in 2017. When we sum the total number of days in the first eight months, we get 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 = 244. Day of the Programmer is the 256th day, so then calculate 256 - 244 = 12 to determine that it falls on day 12 of the 9th month (September). We then print the full date in the specified format, which is 12.09.2016.\nSample Input 2\n1800\nSample Output 2\n12.09.1800\nExplanation 2\nSince 1800 is leap year as per Julian calendar. Day lies on 12 September.",
        "139": "Two friends Anna and Brian, are deciding how to split the bill at a dinner. Each will only pay for the items they consume. Brian gets the check and calculates Anna's portion. You must determine if his calculation is correct.\nFor example, assume the bill has the following prices: . Anna declines to eat item which costs . If Brian calculates the bill correctly, Anna will pay . If he includes the cost of , he will calculate . In the second case, he should refund to Anna.\nFunction Description\nComplete the bonAppetit function in the editor below. It should print Bon Appetit if the bill is fairly split. Otherwise, it should print the integer amount of money that Brian owes Anna.\nbonAppetit has the following parameter(s):\nbill: an array of integers representing the cost of each item ordered\nk: an integer representing the zero-based index of the item Anna doesn't eat\nb: the amount of money that Anna contributed to the bill\nInput Format\nThe first line contains two space-separated integers and , the number of items ordered and the -based index of the item that Anna did not eat.\nThe second line contains space-separated integers where .\nThe third line contains an integer, , the amount of money that Brian charged Anna for her share of the bill.\nConstraints\nThe amount of money due Anna will always be an integer\nOutput Format\nIf Brian did not overcharge Anna, print Bon Appetit on a new line; otherwise, print the difference (i.e., ) that Brian must refund to Anna. This will always be an integer.\nSample Input 0\n4 1\n3 10 2 9\n12\nSample Output 0\n5\nExplanation 0\nAnna didn't eat item , but she shared the rest of the items with Brian. The total cost of the shared items is and, split in half, the cost per person is . Brian charged her for her portion of the bill. We print the amount Anna was overcharged, , on a new line.\nSample Input 1\n4 1\n3 10 2 9\n7\nSample Output 1\nBon Appetit\nExplanation 1\nAnna didn't eat item , but she shared the rest of the items with Brian. The total cost of the shared items is and, split in half, the cost per person is . Because , we print Bon Appetit on a new line.",
        "140": "There is a large pile of socks that must be paired by color. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.\nExample\n\nThere is one pair of color and one of color . There are three odd socks left, one of each color. The number of pairs is .\nFunction Description\nComplete the sockMerchant function in the editor below.\nsockMerchant has the following parameter(s):\nint n: the number of socks in the pile\nint ar[n]: the colors of each sock\nReturns\nint: the number of pairs\nInput Format\nThe first line contains an integer , the number of socks represented in .\nThe second line contains space-separated integers, , the colors of the socks in the pile.\nConstraints\nwhere\nSample Input\nSTDIN                       Function\n-----                       --------\n9                           n = 9\n10 20 20 10 10 30 50 10 20  ar = [10, 20, 20, 10, 10, 30, 50, 10, 20]\nSample Output\n3\nExplanation\nThere are three pairs of socks.",
        "141": "A teacher asks the class to open their books to a page number. A student can either start turning pages from the front of the book or from the back of the book. They always turn pages one at a time. When they open the book, page is always on the right side:\nWhen they flip page , they see pages and . Each page except the last page will always be printed on both sides. The last page may only be printed on the front, given the length of the book. If the book is pages long, and a student wants to turn to page , what is the minimum number of pages to turn? They can start at the beginning or the end of the book.\nGiven and , find and print the minimum number of pages that must be turned in order to arrive at page .\nExample\n\nUsing the diagram above, if the student wants to get to page , they open the book to page , flip page and they are on the correct page. If they open the book to the last page, page , they turn page and are at the correct page. Return .\nFunction Description\nComplete the pageCount function in the editor below.\npageCount has the following parameter(s):\nint n: the number of pages in the book\nint p: the page number to turn to\nReturns\nint: the minimum number of pages to turn\nInput Format\nThe first line contains an integer , the number of pages in the book.\nThe second line contains an integer, , the page to turn to.\nConstraints\nSample Input 0\n6\n2\nSample Output 0\n1\nExplanation 0\nIf the student starts turning from page , they only need to turn page:\nIf a student starts turning from page , they need to turn pages:\nReturn the minimum value, .\nSample Input 1\n5\n4\nSample Output 1\n0\nExplanation 1\nIf the student starts turning from page , they need to turn pages:\nIf they start turning from page , they do not need to turn any pages:\nReturn the minimum value, .",
        "142": "An avid hiker keeps meticulous records of their hikes. During the last hike that took exactly steps, for every step it was noted if it was an uphill, , or a downhill, step. Hikes always start and end at sea level, and each step up or down represents a unit change in altitude. We define the following terms:\nA mountain is a sequence of consecutive steps above sea level, starting with a step up from sea level and ending with a step down to sea level.\nA valley is a sequence of consecutive steps below sea level, starting with a step down from sea level and ending with a step up to sea level.\nGiven the sequence of up and down steps during a hike, find and print the number of valleys walked through.\nExample\nThe hiker first enters a valley units deep. Then they climb out and up onto a mountain units high. Finally, the hiker returns to sea level and ends the hike.\nFunction Description\nComplete the countingValleys function in the editor below.\ncountingValleys has the following parameter(s):\nint steps: the number of steps on the hike\nstring path: a string describing the path\nReturns\nint: the number of valleys traversed\nInput Format\nThe first line contains an integer , the number of steps in the hike.\nThe second line contains a single string , of characters that describe the path.\nConstraints\nSample Input\n8\nUDDDUDUU\nSample Output\n1\nExplanation\nIf we represent _ as sea level, a step up as \/, and a step down as \\, the hike can be drawn as:\n_\/\\      _\n   \\    \/\n    \\\/\\\/\nThe hiker enters and leaves one valley.",
        "143": "A person wants to determine the most expensive computer keyboard and USB drive that can be purchased with a give budget. Given price lists for keyboards and USB drives and a budget, find the cost to buy them. If it is not possible to buy both items, return .\nExample\n\n\nThe person can buy a , or a . Choose the latter as the more expensive option and return .\nFunction Description\nComplete the getMoneySpent function in the editor below.\ngetMoneySpent has the following parameter(s):\nint keyboards[n]: the keyboard prices\nint drives[m]: the drive prices\nint b: the budget\nReturns\nint: the maximum that can be spent, or if it is not possible to buy both items\nInput Format\nThe first line contains three space-separated integers , , and , the budget, the number of keyboard models and the number of USB drive models.\nThe second line contains space-separated integers , the prices of each keyboard model.\nThe third line contains space-separated integers , the prices of the USB drives.\nConstraints\nThe price of each item is in the inclusive range .\nSample Input 0\n10 2 3\n3 1\n5 2 8\nSample Output 0\n9\nExplanation 0\nBuy the keyboard and the USB drive for a total cost of .\nSample Input 1\n5 1 1\n4\n5\nSample Output 1\n-1\nExplanation 1\nThere is no way to buy one keyboard and one USB drive because , so return .",
        "144": "Two cats and a mouse are at various positions on a line. You will be given their starting positions. Your task is to determine which cat will reach the mouse first, assuming the mouse does not move and the cats travel at equal speed. If the cats arrive at the same time, the mouse will be allowed to move and it will escape while they fight.\nYou are given queries in the form of , , and representing the respective positions for cats and , and for mouse . Complete the function to return the appropriate answer to each query, which will be printed on a new line.\nIf cat catches the mouse first, print Cat A.\nIf cat catches the mouse first, print Cat B.\nIf both cats reach the mouse at the same time, print Mouse C as the two cats fight and mouse escapes.\nExample\n\n\nThe cats are at positions (Cat A) and (Cat B), and the mouse is at position . Cat B, at position will arrive first since it is only unit away while the other is units away. Return 'Cat B'.\nFunction Description\nComplete the catAndMouse function in the editor below.\ncatAndMouse has the following parameter(s):\nint x: Cat 's position\nint y: Cat 's position\nint z: Mouse 's position\nReturns\nstring: Either 'Cat A', 'Cat B', or 'Mouse C'\nInput Format\nThe first line contains a single integer, , denoting the number of queries.\nEach of the subsequent lines contains three space-separated integers describing the respective values of (cat 's location), (cat 's location), and (mouse 's location).\nConstraints\nSample Input 0\n2\n1 2 3\n1 3 2\nSample Output 0\nCat B\nMouse C\nExplanation 0\nQuery 0: The positions of the cats and mouse are shown below:\nCat will catch the mouse first, so we print Cat B on a new line.\nQuery 1: In this query, cats and reach mouse at the exact same time:\nBecause the mouse escapes, we print Mouse C on a new line.",
        "145": "We define a magic square to be an matrix of distinct positive integers from to where the sum of any row, column, or diagonal of length is always equal to the same number: the magic constant.\nYou will be given a matrix of integers in the inclusive range . We can convert any digit to any other digit in the range at cost of . Given , convert it into a magic square at minimal cost. Print this cost on a new line.\nNote: The resulting magic square must contain distinct integers in the inclusive range .\nExample\n$s = [[5, 3, 4], [1, 5, 8], [6, 4, 2]]\nThe matrix looks like this:\n5 3 4\n1 5 8\n6 4 2\nWe can convert it to the following magic square:\n8 3 4\n1 5 9\n6 7 2\nThis took three replacements at a cost of .\nFunction Description\nComplete the formingMagicSquare function in the editor below.\nformingMagicSquare has the following parameter(s):\nint s[3][3]: a array of integers\nReturns\nint: the minimal total cost of converting the input square to a magic square\nInput Format\nEach of the lines contains three space-separated integers of row .\nConstraints\nSample Input 0\n4 9 2\n3 5 7\n8 1 5\nSample Output 0\n1\nExplanation 0\nIf we change the bottom right value, , from to at a cost of , becomes a magic square at the minimum possible cost.\nSample Input 1\n4 8 2\n4 5 7\n6 1 6\nSample Output 1\n4\nExplanation 1\nUsing 0-based indexing, if we make\n-> at a cost of\n-> at a cost of\n-> at a cost of ,\nthen the total cost will be .",
        "146": "Given an array of integers, find the longest subarray where the absolute difference between any two elements is less than or equal to .\nExample\nThere are two subarrays meeting the criterion: and . The maximum length subarray has elements.\nFunction Description\nComplete the pickingNumbers function in the editor below.\npickingNumbers has the following parameter(s):\nint a[n]: an array of integers\nReturns\nint: the length of the longest subarray that meets the criterion\nInput Format\nThe first line contains a single integer , the size of the array .\nThe second line contains space-separated integers, each an .\nConstraints\nThe answer will be .\nSample Input 0\n6\n4 6 5 3 3 1\nSample Output 0\n3\nExplanation 0\nWe choose the following multiset of integers from the array: . Each pair in the multiset has an absolute difference (i.e., and ), so we print the number of chosen integers, , as our answer.\nSample Input 1\n6\n1 2 2 3 1 2\nSample Output 1\n5\nExplanation 1\nWe choose the following multiset of integers from the array: . Each pair in the multiset has an absolute difference (i.e., , , and ), so we print the number of chosen integers, , as our answer.",
        "147": "An arcade game player wants to climb to the top of the leaderboard and track their ranking. The game uses Dense Ranking, so its leaderboard works like this:\nThe player with the highest score is ranked number on the leaderboard.\nPlayers who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number.\nExample\n\nThe ranked players will have ranks , , , and , respectively. If the player's scores are , and , their rankings after each game are , and . Return .\nFunction Description\nComplete the climbingLeaderboard function in the editor below.\nclimbingLeaderboard has the following parameter(s):\nint ranked[n]: the leaderboard scores\nint player[m]: the player's scores\nReturns\nint[m]: the player's rank after each new score\nInput Format\nThe first line contains an integer , the number of players on the leaderboard.\nThe next line contains space-separated integers , the leaderboard scores in decreasing order.\nThe next line contains an integer, , the number games the player plays.\nThe last line contains space-separated integers , the game scores.\nConstraints\nfor\nfor\nThe existing leaderboard, , is in descending order.\nThe player's scores, , are in ascending order.\nSubtask\nFor of the maximum score:",
        "148": "A video player plays a game in which the character competes in a hurdle race. Hurdles are of varying heights, and the characters have a maximum height they can jump. There is a magic potion they can take that will increase their maximum jump height by unit for each dose. How many doses of the potion must the character take to be able to jump all of the hurdles. If the character can already clear all of the hurdles, return .\nExample\n\nThe character can jump unit high initially and must take doses of potion to be able to jump all of the hurdles.\nFunction Description\nComplete the hurdleRace function in the editor below.\nhurdleRace has the following parameter(s):\nint k: the height the character can jump naturally\nint height[n]: the heights of each hurdle\nReturns\nint: the minimum number of doses required, always or more\nInput Format\nThe first line contains two space-separated integers and , the number of hurdles and the maximum height the character can jump naturally.\nThe second line contains space-separated integers where .\nConstraints\nSample Input 0\n5 4\n1 6 3 5 2\nSample Output 0\n2\nExplanation 0\nDan's character can jump a maximum of units, but the tallest hurdle has a height of :\nTo be able to jump all the hurdles, Dan must drink doses.\nSample Input 1\n5 7\n2 5 4 5 2\nSample Output 1\n0\nExplanation 1\nDan's character can jump a maximum of units, which is enough to cross all the hurdles:\nBecause he can already jump all the hurdles, Dan needs to drink doses.",
        "149": "When a contiguous block of text is selected in a PDF viewer, the selection is highlighted with a blue rectangle. In this PDF viewer, each word is highlighted independently. For example:\nThere is a list of character heights aligned by index to their letters. For example, 'a' is at index and 'z' is at index . There will also be a string. Using the letter heights given, determine the area of the rectangle highlight in assuming all letters are wide.\nExample\nThe heights are and . The tallest letter is high and there are letters. The hightlighted area will be so the answer is .\nFunction Description\nComplete the designerPdfViewer function in the editor below.\ndesignerPdfViewer has the following parameter(s):\nint h[26]: the heights of each letter\nstring word: a string\nReturns\nint: the size of the highlighted area\nInput Format\nThe first line contains space-separated integers describing the respective heights of each consecutive lowercase English letter, ascii[a-z].\nThe second line contains a single word consisting of lowercase English alphabetic letters.\nConstraints\n, where is an English lowercase letter.\ncontains no more than letters.\nSample Input 0\n1 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\nabc\nSample Output 0\n9\nExplanation 0\nWe are highlighting the word abc:\nLetter heights are , and . The tallest letter, b, is high. The selection area for this word is .\nNote: Recall that the width of each character is .\nSample Input 1\n1 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7\nzaba\nSample Output 1\n28\nExplanation 1\nThe tallest letter in is at . The selection area for this word is .",
        "150": "The Utopian Tree goes through 2 cycles of growth every year. Each spring, it doubles in height. Each summer, its height increases by 1 meter.\nA Utopian Tree sapling with a height of 1 meter is planted at the onset of spring. How tall will the tree be after growth cycles?\nFor example, if the number of growth cycles is , the calculations are as follows:\nPeriod  Height\n0          1\n1          2\n2          3\n3          6\n4          7\n5          14\nFunction Description\nComplete the utopianTree function in the editor below.\nutopianTree has the following parameter(s):\nint n: the number of growth cycles to simulate\nReturns\nint: the height of the tree after the given number of cycles\nInput Format\nThe first line contains an integer, , the number of test cases.\nsubsequent lines each contain an integer, , the number of cycles for that test case.\nConstraints\n\nSample Input\n3\n0\n1\n4\nSample Output\n1\n2\n7\nExplanation\nThere are 3 test cases.\nIn the first case (), the initial height () of the tree remains unchanged.\nIn the second case (), the tree doubles in height and is meters tall after the spring cycle.\nIn the third case (), the tree doubles its height in spring (, ), then grows a meter in summer (, ), then doubles after the next spring (, ), and grows another meter after summer (, ). Thus, at the end of 4 cycles, its height is meters.",
        "151": "A Discrete Mathematics professor has a class of students. Frustrated with their lack of discipline, the professor decides to cancel class if fewer than some number of students are present when class starts. Arrival times go from on time () to arrived late ().\nGiven the arrival time of each student and a threshhold number of attendees, determine if the class is cancelled.\nExample\n\n\nThe first students arrived on. The last were late. The threshold is students, so class will go on. Return YES.\nNote: Non-positive arrival times () indicate the student arrived early or on time; positive arrival times () indicate the student arrived minutes late.\nFunction Description\nComplete the angryProfessor function in the editor below. It must return YES if class is cancelled, or NO otherwise.\nangryProfessor has the following parameter(s):\nint k: the threshold number of students\nint a[n]: the arrival times of the students\nReturns\nstring: either YES or NO\nInput Format\nThe first line of input contains , the number of test cases.\nEach test case consists of two lines.\nThe first line has two space-separated integers, and , the number of students (size of ) and the cancellation threshold.\nThe second line contains space-separated integers () that describe the arrival times for each student.\nConstraints\nSample Input\n2\n4 3\n-1 -3 4 2\n4 2\n0 -1 2 1\nSample Output\nYES\nNO\nExplanation\nFor the first test case, . The professor wants at least students in attendance, but only have arrived on time ( and ) so the class is cancelled.\nFor the second test case, . The professor wants at least students in attendance, and there are who arrived on time ( and ). The class is not cancelled.",
        "152": "Lily likes to play games with integers. She has created a new game where she determines the difference between a number and its reverse. For instance, given the number , its reverse is . Their difference is . The number reversed is , and their difference is .\nShe decides to apply her game to decision making. She will look at a numbered range of days and will only go to a movie on a beautiful day.\nGiven a range of numbered days, and a number , determine the number of days in the range that are beautiful. Beautiful numbers are defined as numbers where is evenly divisible by . If a day's value is a beautiful number, it is a beautiful day. Return the number of beautiful days in the range.\nFunction Description\nComplete the beautifulDays function in the editor below.\nbeautifulDays has the following parameter(s):\nint i: the starting day number\nint j: the ending day number\nint k: the divisor\nReturns\nint: the number of beautiful days in the range\nInput Format\nA single line of three space-separated integers describing the respective values of , , and .\nConstraints\nSample Input\n20 23 6\nSample Output\n2\nExplanation\nLily may go to the movies on days , , , and . We perform the following calculations to determine which days are beautiful:\nDay is beautiful because the following evaluates to a whole number:\nDay is not beautiful because the following doesn't evaluate to a whole number:\nDay is beautiful because the following evaluates to a whole number:\nDay is not beautiful because the following doesn't evaluate to a whole number:\nOnly two days, and , in this interval are beautiful. Thus, we print as our answer.",
        "153": "HackerLand Enterprise is adopting a new viral advertising strategy. When they launch a new product, they advertise it to exactly people on social media.\nOn the first day, half of those people (i.e., ) like the advertisement and each shares it with of their friends. At the beginning of the second day, people receive the advertisement.\nEach day, of the recipients like the advertisement and will share it with friends on the following day. Assuming nobody receives the advertisement twice, determine how many people have liked the ad by the end of a given day, beginning with launch day as day .\nExample\n.\nDay Shared Liked Cumulative\n1      5     2       2\n2      6     3       5\n3      9     4       9\n4     12     6      15\n5     18     9      24\nThe progression is shown above. The cumulative number of likes on the day is .\nFunction Description\nComplete the viralAdvertising function in the editor below.\nviralAdvertising has the following parameter(s):\nint n: the day number to report\nReturns\nint: the cumulative likes at that day\nInput Format\nA single integer, , the day number.\nConstraints\nSample Input\n3\nSample Output\n9\nExplanation\nThis example is depicted in the following diagram:\npeople liked the advertisement on the first day, people liked the advertisement on the second day and people liked the advertisement on the third day, so the answer is .",
        "154": "A jail has a number of prisoners and a number of treats to pass out to them. Their jailer decides the fairest way to divide the treats is to seat the prisoners around a circular table in sequentially numbered chairs. A chair number will be drawn from a hat. Beginning with the prisoner in that chair, one candy will be handed to each prisoner sequentially around the table until all have been distributed.\nThe jailer is playing a little joke, though. The last piece of candy looks like all the others, but it tastes awful. Determine the chair number occupied by the prisoner who will receive that candy.\nExample\n\n\nThere are prisoners, pieces of candy and distribution starts at chair . The prisoners arrange themselves in seats numbered to . Prisoners receive candy at positions . The prisoner to be warned sits in chair number .\nFunction Description\nComplete the saveThePrisoner function in the editor below. It should return an integer representing the chair number of the prisoner to warn.\nsaveThePrisoner has the following parameter(s):\nint n: the number of prisoners\nint m: the number of sweets\nint s: the chair number to begin passing out sweets from\nReturns\nint: the chair number of the prisoner to warn\nInput Format\nThe first line contains an integer, , the number of test cases.\nThe next lines each contain space-separated integers:\n: the number of prisoners\n: the number of sweets\n: the chair number to start passing out treats at\nConstraints\nSample Input 0\n2\n5 2 1\n5 2 2\nSample Output 0\n2\n3\nExplanation 0\nIn the first query, there are prisoners and sweets. Distribution starts at seat number . Prisoners in seats numbered and get sweets. Warn prisoner .\nIn the second query, distribution starts at seat so prisoners in seats and get sweets. Warn prisoner .\nSample Input 1\n2\n7 19 2\n3 7 3\nSample Output 1\n6\n3\nExplanation 1\nIn the first test case, there are prisoners, sweets and they are passed out starting at chair . The candies go all around twice and there are more candies passed to each prisoner from seat to seat .\nIn the second test case, there are prisoners, candies and they are passed out starting at seat . They go around twice, and there is one more to pass out to the prisoner at seat .",
        "155": "John Watson knows of an operation called a right circular rotation on an array of integers. One rotation operation moves the last array element to the first position and shifts all remaining elements right one. To test Sherlock's abilities, Watson provides Sherlock with an array of integers. Sherlock is to perform the rotation operation a number of times then determine the value of the element at a given position.\nFor each array, perform a number of right circular rotations and return the values of the elements at the given indices.\nExample\n\n\nHere is the number of rotations on , and holds the list of indices to report. First we perform the two rotations:\nNow return the values from the zero-based indices and as indicated in the array.\n\nFunction Description\nComplete the circularArrayRotation function in the editor below.\ncircularArrayRotation has the following parameter(s):\nint a[n]: the array to rotate\nint k: the rotation count\nint queries[1]: the indices to report\nReturns\nint[q]: the values in the rotated as requested in\nInput Format\nThe first line contains space-separated integers, , , and , the number of elements in the integer array, the rotation count and the number of queries.\nThe second line contains space-separated integers, where each integer describes array element (where ).\nEach of the subsequent lines contains a single integer, , an index of an element in to return.\nConstraints\nSample Input 0\n3 2 3\n1 2 3\n0\n1\n2\nSample Output 0\n2\n3\n1\nExplanation 0\nAfter the first rotation, the array is .\nAfter the second (and final) rotation, the array is .\nWe will call this final state array . For each query, we just have to get the value of .\n, .\n, .\n, .",
        "156": "Given a sequence of integers, where each element is distinct and satisfies . For each where , that is increments from to , find any integer such that and keep a history of the values of in a return array.\nExample\nEach value of between and , the length of the sequence, is analyzed as follows:\n, so\n, so\n, so\n, so\n, so\nThe values for are .\nFunction Description\nComplete the permutationEquation function in the editor below.\npermutationEquation has the following parameter(s):\nint p[n]: an array of integers\nReturns\nint[n]: the values of for all in the arithmetic sequence to\nInput Format\nThe first line contains an integer , the number of elements in the sequence.\nThe second line contains space-separated integers where .\nConstraints\n, where .\nEach element in the sequence is distinct.\nSample Input 0\n3\n2 3 1\nSample Output 0\n2\n3\n1\nExplanation 0\nGiven the values of , , and , we calculate and print the following values for each from to :\n, so we print the value of on a new line.\n, so we print the value of on a new line.\n, so we print the value of on a new line.\nSample Input 1\n5\n4 3 5 1 2\nSample Output 1\n1\n3\n5\n4\n2",
        "157": "A child is playing a cloud hopping game. In this game, there are sequentially numbered clouds that can be thunderheads or cumulus clouds. The character must jump from cloud to cloud until it reaches the start again.\nThere is an array of clouds, and an energy level . The character starts from and uses unit of energy to make a jump of size to cloud . If it lands on a thundercloud, , its energy () decreases by additional units. The game ends when the character lands back on cloud .\nGiven the values of , , and the configuration of the clouds as an array , determine the final value of after the game ends.\nExample.\nThe indices of the path are . The energy level reduces by for each jump to . The character landed on one thunderhead at an additional cost of energy units. The final energy level is .\nNote: Recall that refers to the modulo operation. In this case, it serves to make the route circular. If the character is at and jumps , it will arrive at .\nFunction Description\nComplete the jumpingOnClouds function in the editor below.\njumpingOnClouds has the following parameter(s):\nint c[n]: the cloud types along the path\nint k: the length of one jump\nReturns\nint: the energy level remaining.\nInput Format\nThe first line contains two space-separated integers, and , the number of clouds and the jump distance.\nThe second line contains space-separated integers where . Each cloud is described as follows:\nIf , then cloud is a cumulus cloud.\nIf , then cloud is a thunderhead.\nConstraints\nSample Input\nSTDIN             Function\n-----             --------\n8 2               n = 8, k = 2\n0 0 1 0 0 1 1 0   c = [0, 0, 1, 0, 0, 1, 1, 0]\nSample Output\n92\nExplanation\nIn the diagram below, red clouds are thunderheads and purple clouds are cumulus clouds:\nObserve that our thunderheads are the clouds numbered , , and . The character makes the following sequence of moves:\nMove: , Energy: .\nMove: , Energy: .\nMove: , Energy: .\nMove: , Energy: .",
        "158": "An integer is a divisor of an integer if the remainder of .\nGiven an integer, for each digit that makes up the integer determine whether it is a divisor. Count the number of divisors occurring within the integer.\nExample\nCheck whether , and are divisors of . All 3 numbers divide evenly into so return .\nCheck whether , , and are divisors of . All 3 numbers divide evenly into so return .\nCheck whether and are divisors of . is, but is not. Return .\nFunction Description\nComplete the findDigits function in the editor below.\nfindDigits has the following parameter(s):\nint n: the value to analyze\nReturns\nint: the number of digits in that are divisors of\nInput Format\nThe first line is an integer, , the number of test cases.\nThe subsequent lines each contain an integer, .\nConstraints\n\nSample Input\n2\n12\n1012\nSample Output\n2\n3\nExplanation\nThe number is broken into two digits, and . When is divided by either of those two digits, the remainder is so they are both divisors.\nThe number is broken into four digits, , , , and . is evenly divisible by its digits , , and , but it is not divisible by as division by zero is undefined.",
        "159": "The factorial of the integer , written , is defined as:\nCalculate and print the factorial of a given integer.\nFor example, if , we calculate and get .\nFunction Description\nComplete the extraLongFactorials function in the editor below. It should print the result and return.\nextraLongFactorials has the following parameter(s):\nn: an integer\nNote: Factorials of can't be stored even in a long long variable. Big integers must be used for such calculations. Languages like Java, Python, Ruby etc. can handle big integers, but we need to write additional code in C\/C++ to handle huge values.\nWe recommend solving this challenge using BigIntegers.\nInput Format\nInput consists of a single integer\nConstraints\nOutput Format\nPrint the factorial of .\nSample Input\nSample Output\nExplanation",
        "160": "You have two strings of lowercase English letters. You can perform two types of operations on the first string:\nAppend a lowercase English letter to the end of the string.\nDelete the last character of the string. Performing this operation on an empty string results in an empty string.\nGiven an integer, , and two strings, and , determine whether or not you can convert to by performing exactly of the above operations on . If it's possible, print Yes. Otherwise, print No.\nExample.\n\nTo convert to , we first delete all of the characters in moves. Next we add each of the characters of in order. On the move, you will have the matching string. Return Yes.\nIf there were more moves available, they could have been eliminated by performing multiple deletions on an empty string. If there were fewer than moves, we would not have succeeded in creating the new string.\nFunction Description\nComplete the appendAndDelete function in the editor below. It should return a string, either Yes or No.\nappendAndDelete has the following parameter(s):\nstring s: the initial string\nstring t: the desired string\nint k: the exact number of operations that must be performed\nReturns\nstring: either Yes or No\nInput Format\nThe first line contains a string , the initial string.\nThe second line contains a string , the desired final string.\nThe third line contains an integer , the number of operations.\nConstraints\nand consist of lowercase English letters, .\nSample Input 0\nhackerhappy\nhackerrank\n9\nSample Output 0\nYes\nExplanation 0\nWe perform delete operations to reduce string to hacker. Next, we perform append operations (i.e., r, a, n, and k), to get hackerrank. Because we were able to convert to by performing exactly operations, we return Yes.\nSample Input 1\naba\naba\n7\nSample Output 1\nYes\nExplanation 1\nWe perform delete operations to reduce string to the empty string. Recall that though the string will be empty after deletions, we can still perform a delete operation on an empty string to get the empty string. Next, we perform append operations (i.e., a, b, and a). Because we were able to convert to by performing exactly operations, we return Yes.\nSample Input 2\nashley\nash\n2\nSample Output 2\nNo\nExplanation 2\nTo convert ashley to ash a minimum of steps are needed. Hence we print No as answer.",
        "161": "Watson likes to challenge Sherlock's math ability. He will provide a starting and ending value that describe a range of integers, inclusive of the endpoints. Sherlock must determine the number of square integers within that range.\nNote: A square integer is an integer which is the square of an integer, e.g. .\nExample\n\nThere are three square integers in the range: and . Return .\nFunction Description\nComplete the squares function in the editor below. It should return an integer representing the number of square integers in the inclusive range from to .\nsquares has the following parameter(s):\nint a: the lower range boundary\nint b: the upper range boundary\nReturns\nint: the number of square integers in the range\nInput Format\nThe first line contains , the number of test cases.\nEach of the next lines contains two space-separated integers, and , the starting and ending integers in the ranges.\nConstraints\n\nSample Input\n2\n3 9\n17 24\nSample Output\n2\n0\nExplanation\nTest Case #00: In range , and are the two square integers.\nTest Case #01: In range , there are no square integers.",
        "162": "Your local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any). The fee structure is as follows:\nIf the book is returned on or before the expected return date, no fine will be charged (i.e.: .\nIf the book is returned after the expected return day but still within the same calendar month and year as the expected return date, .\nIf the book is returned after the expected return month but still within the same calendar year as the expected return date, the .\nIf the book is returned after the calendar year in which it was expected, there is a fixed fine of .\nCharges are based only on the least precise measure of lateness. For example, whether a book is due January 1, 2017 or December 31, 2017, if it is returned January 1, 2018, that is a year late and the fine would be .\nExample\n\nThe first values are the return date and the second are the due date. The years are the same and the months are the same. The book is days late. Return .\nFunction Description\nComplete the libraryFine function in the editor below.\nlibraryFine has the following parameter(s):\nd1, m1, y1: returned date day, month and year, each an integer\nd2, m2, y2: due date day, month and year, each an integer\nReturns\nint: the amount of the fine or if there is none\nInput Format\nThe first line contains space-separated integers, , denoting the respective , , and on which the book was returned.\nThe second line contains space-separated integers, , denoting the respective , , and on which the book was due to be returned.\nConstraints\nSample Input\n9 6 2015\n6 6 2015\nSample Output\n45\nExplanation\nGiven the following dates:\nReturned:\nDue:\nBecause , we know it is less than a year late.\nBecause , we know it's less than a month late.\nBecause , we know that it was returned late (but still within the same month and year).\nPer the library's fee structure, we know that our fine will be . We then print the result of as our output.",
        "163": "You are given a number of sticks of varying lengths. You will iteratively cut the sticks into smaller sticks, discarding the shortest pieces until there are none left. At each iteration you will determine the length of the shortest stick remaining, cut that length from each of the longer sticks and then discard all the pieces of that shortest length. When all the remaining sticks are the same length, they cannot be shortened so discard them.\nGiven the lengths of sticks, print the number of sticks that are left before each iteration until there are none left.\nExample\nThe shortest stick length is , so cut that length from the longer two and discard the pieces of length . Now the lengths are . Again, the shortest stick is of length , so cut that amount from the longer stick and discard those pieces. There is only one stick left, , so discard that stick. The number of sticks at each iteration are .\nFunction Description\nComplete the cutTheSticks function in the editor below. It should return an array of integers representing the number of sticks before each cut operation is performed.\ncutTheSticks has the following parameter(s):\nint arr[n]: the lengths of each stick\nReturns\nint[]: the number of sticks after each iteration\nInput Format\nThe first line contains a single integer , the size of .\nThe next line contains space-separated integers, each an , where each value represents the length of the stick.\nConstraints\nSample Input 0\nSTDIN           Function\n-----           --------\n6               arr[] size n = 6\n5 4 4 2 2 8     arr = [5, 4, 4, 2, 2, 8]\nSample Output 0\n6\n4\n2\n1\nExplanation 0\nsticks-length        length-of-cut   sticks-cut\n5 4 4 2 2 8             2               6\n3 2 2 _ _ 6             2               4\n1 _ _ _ _ 4             1               2\n_ _ _ _ _ 3             3               1\n_ _ _ _ _ _           DONE            DONE\nSample Input 1\n8\n1 2 3 4 3 3 2 1\nSample Output 1\n8\n6\n4\n1\nExplanation 1\nsticks-length         length-of-cut   sticks-cut\n1 2 3 4 3 3 2 1         1               8\n_ 1 2 3 2 2 1 _         1               6\n_ _ 1 2 1 1 _ _         1               4\n_ _ _ 1 _ _ _ _         1               1\n_ _ _ _ _ _ _ _       DONE            DONE",
        "164": "Given a set of distinct integers, print the size of a maximal subset of where the sum of any numbers in is not evenly divisible by .\nExample\nOne of the arrays that can be created is . Another is . After testing all permutations, the maximum length solution array has elements.\nFunction Description\nComplete the nonDivisibleSubset function in the editor below.\nnonDivisibleSubset has the following parameter(s):\nint S[n]: an array of integers\nint k: the divisor\nReturns\nint: the length of the longest subset of meeting the criteria\nInput Format\nThe first line contains space-separated integers, and , the number of values in and the non factor.\nThe second line contains space-separated integers, each an , the unique values of the set.\nConstraints\nAll of the given numbers are distinct.\nSample Input\nSTDIN    Function\n-----    --------\n4 3      S[] size n = 4, k = 3\n1 7 2 4  S = [1, 7, 2, 4]\nSample Output\n3\nExplanation\nThe sums of all permutations of two elements from are:\n1 + 7 = 8\n1 + 2 = 3\n1 + 4 = 5\n7 + 2 = 9\n7 + 4 = 11\n2 + 4 = 6\nOnly will not ever sum to a multiple of .",
        "165": "There is a string, , of lowercase English letters that is repeated infinitely many times. Given an integer, , find and print the number of letter a's in the first letters of the infinite string.\nExample\n\nThe substring we consider is , the first characters of the infinite string. There are occurrences of a in the substring.\nFunction Description\nComplete the repeatedString function in the editor below.\nrepeatedString has the following parameter(s):\ns: a string to repeat\nn: the number of characters to consider\nReturns\nint: the frequency of a in the substring\nInput Format\nThe first line contains a single string, .\nThe second line contains an integer, .\nConstraints\nFor of the test cases, .\nSample Input\nSample Input 0\naba\n10\nSample Output 0\n7\nExplanation 0\nThe first letters of the infinite string are abaabaabaa. Because there are a's, we return .\nSample Input 1\na\n1000000000000\nSample Output 1\n1000000000000\nExplanation 1\nBecause all of the first letters of the infinite string are a, we return .",
        "166": "There is a new mobile game that starts with consecutively numbered clouds. Some of the clouds are thunderheads and others are cumulus. The player can jump on any cumulus cloud having a number that is equal to the number of the current cloud plus or . The player must avoid the thunderheads. Determine the minimum number of jumps it will take to jump from the starting postion to the last cloud. It is always possible to win the game.\nFor each game, you will get an array of clouds numbered if they are safe or if they must be avoided.\nExample\nIndex the array from . The number on each cloud is its index in the list so the player must avoid the clouds at indices and . They could follow these two paths: or . The first path takes jumps while the second takes . Return .\nFunction Description\nComplete the jumpingOnClouds function in the editor below.\njumpingOnClouds has the following parameter(s):\nint c[n]: an array of binary integers\nReturns\nint: the minimum number of jumps required\nInput Format\nThe first line contains an integer , the total number of clouds. The second line contains space-separated binary integers describing clouds where .\nConstraints\nOutput Format\nPrint the minimum number of jumps needed to win the game.\nSample Input 0\n7\n0 0 1 0 0 1 0\nSample Output 0\n4\nExplanation 0:\nThe player must avoid and . The game can be won with a minimum of jumps:\nSample Input 1\n6\n0 0 0 0 1 0\nSample Output 1\n3\nExplanation 1:\nThe only thundercloud to avoid is . The game can be won in jumps:",
        "167": "Given an array of integers, determine the minimum number of elements to delete to leave only elements of equal value.\nExample\nDelete the elements and leaving . If both twos plus either the or the are deleted, it takes deletions to leave either or . The minimum number of deletions is .\nFunction Description\nComplete the equalizeArray function in the editor below.\nequalizeArray has the following parameter(s):\nint arr[n]: an array of integers\nReturns\nint: the minimum number of deletions required\nInput Format\nThe first line contains an integer , the number of elements in .\nThe next line contains space-separated integers .\nConstraints\nSample Input\nSTDIN       Function\n-----       --------\n5           arr[] size n = 5\n3 3 2 1 3   arr = [3, 3, 2, 1, 3]\nSample Output\n2   \nExplanation\nDelete and to leave . This is minimal. The only other options are to delete elements to get an array of either or .",
        "168": "You will be given a square chess board with one queen and a number of obstacles placed on it. Determine how many squares the queen can attack.\nA queen is standing on an chessboard. The chess board's rows are numbered from to , going from bottom to top. Its columns are numbered from to , going from left to right. Each square is referenced by a tuple, , describing the row, , and column, , where the square is located.\nThe queen is standing at position . In a single move, she can attack any square in any of the eight directions (left, right, up, down, and the four diagonals). In the diagram below, the green circles denote all the cells the queen can attack from :\nThere are obstacles on the chessboard, each preventing the queen from attacking any square beyond it on that path. For example, an obstacle at location in the diagram above prevents the queen from attacking cells , , and :\nGiven the queen's position and the locations of all the obstacles, find and print the number of squares the queen can attack from her position at . In the board above, there are such squares.\nFunction Description\nComplete the queensAttack function in the editor below.\nqueensAttack has the following parameters:\n- int n: the number of rows and columns in the board\n- nt k: the number of obstacles on the board\n- int r_q: the row number of the queen's position\n- int c_q: the column number of the queen's position\n- int obstacles[k][2]: each element is an array of integers, the row and column of an obstacle\nReturns\n- int: the number of squares the queen can attack\nInput Format\nThe first line contains two space-separated integers and , the length of the board's sides and the number of obstacles.\nThe next line contains two space-separated integers and , the queen's row and column position.\nEach of the next lines contains two space-separated integers and , the row and column position of .\nConstraints\nA single cell may contain more than one obstacle.\nThere will never be an obstacle at the position where the queen is located.\nSubtasks\nFor of the maximum score:\nFor of the maximum score:\nSample Input 0\n4 0\n4 4\nSample Output 0\n9\nExplanation 0\nThe queen is standing at position on a chessboard with no obstacles:\nSample Input 1\n5 3\n4 3\n5 5\n4 2\n2 3\nSample Output 1\n10\nExplanation 1\nThe queen is standing at position on a chessboard with obstacles:\nThe number of squares she can attack from that position is .\nSample Input 2\n1 0\n1 1\nSample Output 2\n0\nExplanation 2\nSince there is only one square, and the queen is on it, the queen can move 0 squares.",
        "169": "There are a number of people who will be attending ACM-ICPC World Finals. Each of them may be well versed in a number of topics. Given a list of topics known by each attendee, presented as binary strings, determine the maximum number of topics a 2-person team can know. Each subject has a column in the binary string, and a '1' means the subject is known while '0' means it is not. Also determine the number of teams that know the maximum number of topics. Return an integer array with two elements. The first is the maximum number of topics known, and the second is the number of teams that know that number of topics.\nExample\n\nThe attendee data is aligned for clarity below:\n10101\n11110\n00010\nThese are all possible teams that can be formed:\nMembers Subjects\n(1,2)   [1,2,3,4,5]\n(1,3)   [1,3,4,5]\n(2,3)   [1,2,3,4]\nIn this case, the first team will know all 5 subjects. They are the only team that can be created that knows that many subjects, so is returned.\nFunction Description\nComplete the acmTeam function in the editor below.\nacmTeam has the following parameter(s):\nstring topic: a string of binary digits\nReturns\nint[2]: the maximum topics and the number of teams that know that many topics\nInput Format\nThe first line contains two space-separated integers and , where is the number of attendees and is the number of topics.\nEach of the next lines contains a binary string of length .\nConstraints\n\nSample Input\n4 5\n10101\n11100\n11010\n00101\nSample Output\n5\n2\nExplanation\nCalculating topics known for all permutations of 2 attendees we get:\n\n\n\n\n\nThe 2 teams (1, 3) and (3, 4) know all 5 topics which is maximal.",
        "170": "Complete the function solveMeFirst to compute the sum of two integers.\nExample\n\nReturn .\nFunction Description\nComplete the solveMeFirst function in the editor below.\nsolveMeFirst has the following parameters:\nint a: the first value\nint b: the second value\nReturns\n- int: the sum of and\nConstraints\nSample Input\na = 2\nb = 3\nSample Output\n5\nExplanation\n.",
        "171": "Given an array of integers, find the sum of its elements.\nFor example, if the array , , so return .\nFunction Description\nComplete the simpleArraySum function in the editor below. It must return the sum of the array elements as an integer.\nsimpleArraySum has the following parameter(s):\nar: an array of integers\nInput Format\nThe first line contains an integer, , denoting the size of the array.\nThe second line contains space-separated integers representing the array's elements.\nConstraints\nOutput Format\nPrint the sum of the array's elements as a single integer.\nSample Input\n6\n1 2 3 4 10 11\nSample Output\n31\nExplanation\nWe print the sum of the array's elements: .",
        "172": "Alice and Bob each created one problem for HackerRank. A reviewer rates the two challenges, awarding points on a scale from 1 to 100 for three categories: problem clarity, originality, and difficulty.\nThe rating for Alice's challenge is the triplet a = (a[0], a[1], a[2]), and the rating for Bob's challenge is the triplet b = (b[0], b[1], b[2]).\nThe task is to find their comparison points by comparing a[0] with b[0], a[1] with b[1], and a[2] with b[2].\nIf a[i] > b[i], then Alice is awarded 1 point.\nIf a[i] < b[i], then Bob is awarded 1 point.\nIf a[i] = b[i], then neither person receives a point.\nComparison points is the total points a person earned.\nGiven a and b, determine their respective comparison points.\nExample\na = [1, 2, 3]\nb = [3, 2, 1]\nFor elements *0*, Bob is awarded a point because a[0] .\nFor the equal elements a[1] and b[1], no points are earned.\nFinally, for elements 2, a[2] > b[2] so Alice receives a point.\nThe return array is [1, 1] with Alice's score first and Bob's second.\nFunction Description\nComplete the function compareTriplets in the editor below.\ncompareTriplets has the following parameter(s):\nint a[3]: Alice's challenge rating\nint b[3]: Bob's challenge rating\nReturn\nint[2]: Alice's score is in the first position, and Bob's score is in the second.\nInput Format\nThe first line contains 3 space-separated integers, a[0], a[1], and a[2], the respective values in triplet a.\nThe second line contains 3 space-separated integers, b[0], b[1], and b[2], the respective values in triplet b.\nConstraints\n1 \u2264 a[i] \u2264 100\n1 \u2264 b[i] \u2264 100\nSample Input 0\n5 6 7\n3 6 10\nSample Output 0\n1 1\nExplanation 0\nIn this example:\nNow, let's compare each individual score:\n, so Alice receives point.\n, so nobody receives a point.\n, so Bob receives point.\nAlice's comparison score is , and Bob's comparison score is . Thus, we return the array .\nSample Input 1\n17 28 30\n99 16 8\nSample Output 1\n2 1\nExplanation 1\nComparing the elements, so Bob receives a point.\nComparing the and elements, and so Alice receives two points.\nThe return array is .",
        "173": "In this challenge, you are required to calculate and print the sum of the elements in an array, keeping in mind that some of those integers may be quite large.\nFunction Description\nComplete the aVeryBigSum function in the editor below. It must return the sum of all array elements.\naVeryBigSum has the following parameter(s):\nint ar[n]: an array of integers .\nReturn\nlong: the sum of all array elements\nInput Format\nThe first line of the input consists of an integer .\nThe next line contains space-separated integers contained in the array.\nOutput Format\nReturn the integer sum of the elements in the array.\nConstraints\n\nSample Input\n5\n1000000001 1000000002 1000000003 1000000004 1000000005\nOutput\n5000000015\nNote:\nThe range of the 32-bit integer is .\nWhen we add several integer values, the resulting sum might exceed the above range. You might need to use long int C\/C++\/Java to store such sums.",
        "174": "Given a square matrix, calculate the absolute difference between the sums of its diagonals.\nFor example, the square matrix is shown below:\n1 2 3\n4 5 6\n9 8 9  \nThe left-to-right diagonal = . The right to left diagonal = . Their absolute difference is .\nFunction description\nComplete the function in the editor below.\ndiagonalDifference takes the following parameter:\nint arr[n][m]: an array of integers\nReturn\nint: the absolute diagonal difference\nInput Format\nThe first line contains a single integer, , the number of rows and columns in the square matrix .\nEach of the next lines describes a row, , and consists of space-separated integers .\nConstraints\nOutput Format\nReturn the absolute difference between the sums of the matrix's two diagonals as a single integer.\nSample Input\n3\n11 2 4\n4 5 6\n10 8 -12\nSample Output\n15\nExplanation\nThe primary diagonal is:\n11\n   5\n     -12\nSum across the primary diagonal: 11 + 5 - 12 = 4\nThe secondary diagonal is:\n     4\n   5\n10\nSum across the secondary diagonal: 4 + 5 + 10 = 19\nDifference: |4 - 19| = 15\nNote: |x| is the absolute value of x",
        "175": "Given an array of integers, calculate the ratios of its elements that are positive, negative, and zero. Print the decimal value of each fraction on a new line with places after the decimal.\nNote: This challenge introduces precision problems. The test cases are scaled to six decimal places, though answers with absolute error of up to are acceptable.\nExample\nThere are elements, two positive, two negative and one zero. Their ratios are , and . Results are printed as:\n0.400000\n0.400000\n0.200000\nFunction Description\nComplete the plusMinus function in the editor below.\nplusMinus has the following parameter(s):\nint arr[n]: an array of integers\nPrint\nPrint the ratios of positive, negative and zero values in the array. Each value should be printed on a separate line with digits after the decimal. The function should not return a value.\nInput Format\nThe first line contains an integer, , the size of the array.\nThe second line contains space-separated integers that describe .\nConstraints\n\nOutput Format\nPrint the following lines, each to decimals:\nproportion of positive values\nproportion of negative values\nproportion of zeros\nSample Input\nSTDIN           Function\n-----           --------\n6               arr[] size n = 6\n-4 3 -9 0 4 1   arr = [-4, 3, -9, 0, 4, 1]\nSample Output\n0.500000\n0.333333\n0.166667\nExplanation\nThere are positive numbers, negative numbers, and zero in the array.\nThe proportions of occurrence are positive: , negative: and zeros: .",
        "176": "Staircase detail\nThis is a staircase of size :\n   #\n  ##\n ###\n####\nIts base and height are both equal to . It is drawn using # symbols and spaces. The last line is not preceded by any spaces.\nWrite a program that prints a staircase of size .\nFunction Description\nComplete the staircase function in the editor below.\nstaircase has the following parameter(s):\nint n: an integer\nPrint\nPrint a staircase as described above.\nInput Format\nA single integer, , denoting the size of the staircase.\nConstraints\n.\nOutput Format\nPrint a staircase of size using # symbols and spaces.\nNote: The last line must have spaces in it.\nSample Input\n6 \nSample Output\n     #\n    ##\n   ###\n  ####\n #####\n######\nExplanation\nThe staircase is right-aligned, composed of # symbols and spaces, and has a height and width of .",
        "177": "Given five positive integers, find the minimum and maximum values that can be calculated by summing exactly four of the five integers. Then print the respective minimum and maximum values as a single line of two space-separated long integers.\nExample\nThe minimum sum is and the maximum sum is . The function prints\n16 24\nFunction Description\nComplete the miniMaxSum function in the editor below.\nminiMaxSum has the following parameter(s):\narr: an array of integers\nPrint\nPrint two space-separated integers on one line: the minimum sum and the maximum sum of of elements.\nInput Format\nA single line of five space-separated integers.\nConstraints\nOutput Format\nPrint two space-separated long integers denoting the respective minimum and maximum values that can be calculated by summing exactly four of the five integers. (The output can be greater than a 32 bit integer.)\nSample Input\n1 2 3 4 5\nSample Output\n10 14\nExplanation\nThe numbers are , , , , and . Calculate the following sums using four of the five integers:\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nSum everything except , the sum is .\nHints: Beware of integer overflow! Use 64-bit Integer.\nNeed help to get started? Try the Solve Me First problem",
        "178": "You are in charge of the cake for a child's birthday. You have decided the cake will have one candle for each year of their total age. They will only be able to blow out the tallest of the candles. Count how many candles are tallest.\nExample\nThe maximum height candles are units high. There are of them, so return .\nFunction Description\nComplete the function birthdayCakeCandles in the editor below.\nbirthdayCakeCandles has the following parameter(s):\nint candles[n]: the candle heights\nReturns\nint: the number of candles that are tallest\nInput Format\nThe first line contains a single integer, , the size of .\nThe second line contains space-separated integers, where each integer describes the height of .\nConstraints\nSample Input 0\n4\n3 2 1 3\nSample Output 0\n2\nExplanation 0\nCandle heights are . The tallest candles are units, and there are of them.",
        "179": "Given a time in -hour AM\/PM format, convert it to military (24-hour) time.\nNote: - 12:00:00AM on a 12-hour clock is 00:00:00 on a 24-hour clock.\n- 12:00:00PM on a 12-hour clock is 12:00:00 on a 24-hour clock.\nExample\nReturn '12:01:00'.\nReturn '00:01:00'.\nFunction Description\nComplete the timeConversion function in the editor below. It should return a new string representing the input time in 24 hour format.\ntimeConversion has the following parameter(s):\nstring s: a time in hour format\nReturns\nstring: the time in hour format\nInput Format\nA single string that represents a time in -hour clock format (i.e.: or ).\nConstraints\nAll input times are valid\nSample Input 0\n07:05:45PM\nSample Output 0\n19:05:45",
        "180": "HackerLand University has the following grading policy:\nEvery student receives a in the inclusive range from to .\nAny less than is a failing grade.\nSam is a professor at the university and likes to round each student's according to these rules:\nIf the difference between the and the next multiple of is less than , round up to the next multiple of .\nIf the value of is less than , no rounding occurs as the result will still be a failing grade.\nExamples\nround to (85 - 84 is less than 3)\ndo not round (result is less than 40)\ndo not round (60 - 57 is 3 or higher)\nGiven the initial value of for each of Sam's students, write code to automate the rounding process.\nFunction Description\nComplete the function gradingStudents in the editor below.\ngradingStudents has the following parameter(s):\nint grades[n]: the grades before rounding\nReturns\nint[n]: the grades after rounding as appropriate\nInput Format\nThe first line contains a single integer, , the number of students.\nEach line of the subsequent lines contains a single integer, .\nConstraints\nSample Input 0\n4\n73\n67\n38\n33\nSample Output 0\n75\n67\n40\n33\nExplanation 0\nStudent received a , and the next multiple of from is . Since , the student's grade is rounded to .\nStudent received a , and the next multiple of from is . Since , the grade will not be modified and the student's final grade is .\nStudent received a , and the next multiple of from is . Since , the student's grade will be rounded to .\nStudent received a grade below , so the grade will not be modified and the student's final grade is .",
        "181": "Sam's house has an apple tree and an orange tree that yield an abundance of fruit. Using the information given below, determine the number of apples and oranges that land on Sam's house.\nIn the diagram below:\nThe red region denotes the house, where is the start point, and is the endpoint. The apple tree is to the left of the house, and the orange tree is to its right.\nAssume the trees are located on a single point, where the apple tree is at point , and the orange tree is at point .\nWhen a fruit falls from its tree, it lands units of distance from its tree of origin along the -axis. *A negative value of means the fruit fell units to the tree's left, and a positive value of means it falls units to the tree's right. *\nGiven the value of for apples and oranges, determine how many apples and oranges will fall on Sam's house (i.e., in the inclusive range )?\nFor example, Sam's house is between and . The apple tree is located at and the orange at . There are apples and oranges. Apples are thrown units distance from , and units distance. Adding each apple distance to the position of the tree, they land at . Oranges land at . One apple and two oranges land in the inclusive range so we print\n1\n2\nFunction Description\nComplete the countApplesAndOranges function in the editor below. It should print the number of apples and oranges that land on Sam's house, each on a separate line.\ncountApplesAndOranges has the following parameter(s):\ns: integer, starting point of Sam's house location.\nt: integer, ending location of Sam's house location.\na: integer, location of the Apple tree.\nb: integer, location of the Orange tree.\napples: integer array, distances at which each apple falls from the tree.\noranges: integer array, distances at which each orange falls from the tree.\nInput Format\nThe first line contains two space-separated integers denoting the respective values of and .\nThe second line contains two space-separated integers denoting the respective values of and .\nThe third line contains two space-separated integers denoting the respective values of and .\nThe fourth line contains space-separated integers denoting the respective distances that each apple falls from point .\nThe fifth line contains space-separated integers denoting the respective distances that each orange falls from point .\nConstraints\nOutput Format\nPrint two integers on two different lines:\nThe first integer: the number of apples that fall on Sam's house.\nThe second integer: the number of oranges that fall on Sam's house.\nSample Input 0\n7 11\n5 15\n3 2\n-2 2 1\n5 -6\nSample Output 0\n1\n1\nExplanation 0\nThe first apple falls at position .\nThe second apple falls at position .\nThe third apple falls at position .\nThe first orange falls at position .\nThe second orange falls at position .\nOnly one fruit (the second apple) falls within the region between and , so we print as our first line of output.\nOnly the second orange falls within the region between and , so we print as our second line of output.",
        "182": "You are choreographing a circus show with various animals. For one act, you are given two kangaroos on a number line ready to jump in the positive direction (i.e, toward positive infinity).\nThe first kangaroo starts at location and moves at a rate of meters per jump.\nThe second kangaroo starts at location and moves at a rate of meters per jump.\nYou have to figure out a way to get both kangaroos at the same location at the same time as part of the show. If it is possible, return YES, otherwise return NO.\nExample\n\n\n\nAfter one jump, they are both at , (, ), so the answer is YES.\nFunction Description\nComplete the function kangaroo in the editor below.\nkangaroo has the following parameter(s):\nint x1, int v1: starting position and jump distance for kangaroo 1\nint x2, int v2: starting position and jump distance for kangaroo 2\nReturns\nstring: either YES or NO\nInput Format\nA single line of four space-separated integers denoting the respective values of , , , and .\nConstraints\nSample Input 0\n0 3 4 2\nSample Output 0\nYES\nExplanation 0\nThe two kangaroos jump through the following sequence of locations:\nFrom the image, it is clear that the kangaroos meet at the same location (number on the number line) after same number of jumps ( jumps), and we print YES.\nSample Input 1\n0 2 5 3\nSample Output 1\nNO\nExplanation 1\nThe second kangaroo has a starting location that is ahead (further to the right) of the first kangaroo's starting location (i.e., ). Because the second kangaroo moves at a faster rate (meaning ) and is already ahead of the first kangaroo, the first kangaroo will never be able to catch up. Thus, we print NO.",
        "183": "There will be two arrays of integers. Determine all integers that satisfy the following two conditions:\nThe elements of the first array are all factors of the integer being considered\nThe integer being considered is a factor of all elements of the second array\nThese numbers are referred to as being between the two arrays. Determine how many such numbers exist.\nExample\n\nThere are two numbers between the arrays: and .\n, , and for the first value.\n, and , for the second value. Return .\nFunction Description\nComplete the getTotalX function in the editor below. It should return the number of integers that are betwen the sets.\ngetTotalX has the following parameter(s):\nint a[n]: an array of integers\nint b[m]: an array of integers\nReturns\nint: the number of integers that are between the sets\nInput Format\nThe first line contains two space-separated integers, and , the number of elements in arrays and .\nThe second line contains distinct space-separated integers where .\nThe third line contains distinct space-separated integers where .\nConstraints\nSample Input\n2 3\n2 4\n16 32 96\nSample Output\n3\nExplanation\n2 and 4 divide evenly into 4, 8, 12 and 16.\n4, 8 and 16 divide evenly into 16, 32, 96.\n4, 8 and 16 are the only three numbers for which each element of a is a factor and each is a factor of all elements of b.",
        "184": "Maria plays college basketball and wants to go pro. Each season she maintains a record of her play. She tabulates the number of times she breaks her season record for most points and least points in a game. Points scored in the first game establish her record for the season, and she begins counting from there.\nExample\nScores are in the same order as the games played. She tabulates her results as follows:\n                                     Count\n    Game  Score  Minimum  Maximum   Min Max\n     0      12     12       12       0   0\n     1      24     12       24       0   1\n     2      10     10       24       1   1\n     3      24     10       24       1   1\nGiven the scores for a season, determine the number of times Maria breaks her records for most and least points scored during the season.\nFunction Description\nComplete the breakingRecords function in the editor below.\nbreakingRecords has the following parameter(s):\nint scores[n]: points scored per game\nReturns\nint[2]: An array with the numbers of times she broke her records. Index is for breaking most points records, and index is for breaking least points records.\nInput Format\nThe first line contains an integer , the number of games.\nThe second line contains space-separated integers describing the respective values of .\nConstraints\nSample Input 0\n9\n10 5 20 20 4 5 2 25 1\nSample Output 0\n2 4\nExplanation 0\nThe diagram below depicts the number of times Maria broke her best and worst records throughout the season:\nShe broke her best record twice (after games and ) and her worst record four times (after games , , , and ), so we print 2 4 as our answer. Note that she did not break her record for best score during game , as her score during that game was not strictly greater than her best record at the time.\nSample Input 1\n10\n3 4 21 36 10 28 35 5 24 42\nSample Output 1\n4 0\nExplanation 1\nThe diagram below depicts the number of times Maria broke her best and worst records throughout the season:\nShe broke her best record four times (after games , , , and ) and her worst record zero times (no score during the season was lower than the one she earned during her first game), so we print 4 0 as our answer.",
        "185": "Two children, Lily and Ron, want to share a chocolate bar. Each of the squares has an integer on it.\nLily decides to share a contiguous segment of the bar selected such that:\nThe length of the segment matches Ron's birth month, and,\nThe sum of the integers on the squares is equal to his birth day.\nDetermine how many ways she can divide the chocolate.\nExample\n\n\nLily wants to find segments summing to Ron's birth day, with a length equalling his birth month, . In this case, there are two segments meeting her criteria: and .\nFunction Description\nComplete the birthday function in the editor below.\nbirthday has the following parameter(s):\nint s[n]: the numbers on each of the squares of chocolate\nint d: Ron's birth day\nint m: Ron's birth month\nReturns\nint: the number of ways the bar can be divided\nInput Format\nThe first line contains an integer , the number of squares in the chocolate bar.\nThe second line contains space-separated integers , the numbers on the chocolate squares where .\nThe third line contains two space-separated integers, and , Ron's birth day and his birth month.\nConstraints\n, where ()\nSample Input 0\n5\n1 2 1 3 2\n3 2\nSample Output 0\n2\nExplanation 0\nLily wants to give Ron squares summing to . The following two segments meet the criteria:\nSample Input 1\n6\n1 1 1 1 1 1\n3 2\nSample Output 1\n0\nExplanation 1\nLily only wants to give Ron consecutive squares of chocolate whose integers sum to . There are no possible pieces satisfying these constraints:\nThus, we print as our answer.\nSample Input 2\n1\n4\n4 1\nSample Output 2\n1\nExplanation 2\nLily only wants to give Ron square of chocolate with an integer value of . Because the only square of chocolate in the bar satisfies this constraint, we print as our answer.",
        "186": "Given an array of integers and a positive integer , determine the number of pairs where and + is divisible by .\nExample\n\nThree pairs meet the criteria: and .\nFunction Description\nComplete the divisibleSumPairs function in the editor below.\ndivisibleSumPairs has the following parameter(s):\nint n: the length of array\nint ar[n]: an array of integers\nint k: the integer divisor\nReturns\n- int: the number of pairs\nInput Format\nThe first line contains space-separated integers, and .\nThe second line contains space-separated integers, each a value of .\nConstraints\nSample Input\nSTDIN           Function\n-----           --------\n6 3             n = 6, k = 3\n1 3 2 6 1 2     ar = [1, 3, 2, 6, 1, 2]\nSample Output\n 5\nExplanation\nHere are the valid pairs when :",
        "187": "Given an array of bird sightings where every element represents a bird type id, determine the id of the most frequently sighted type. If more than 1 type has been spotted that maximum amount, return the smallest of their ids.\nExample\nThere are two each of types and , and one sighting of type . Pick the lower of the two types seen twice: type .\nFunction Description\nComplete the migratoryBirds function in the editor below.\nmigratoryBirds has the following parameter(s):\nint arr[n]: the types of birds sighted\nReturns\nint: the lowest type id of the most frequently sighted birds\nInput Format\nThe first line contains an integer, , the size of .\nThe second line describes as space-separated integers, each a type number of the bird sighted.\nConstraints\nIt is guaranteed that each type is , , , , or .\nSample Input 0\n6\n1 4 4 4 5 3\nSample Output 0\n4\nExplanation 0\nThe different types of birds occur in the following frequencies:\nType : bird\nType : birds\nType : bird\nType : birds\nType : bird\nThe type number that occurs at the highest frequency is type , so we print as our answer.\nSample Input 1\n11\n1 2 3 4 5 4 3 2 1 3 4\nSample Output 1\n3\nExplanation 1\nThe different types of birds occur in the following frequencies:\nType :\nType :\nType :\nType :\nType :\nTwo types have a frequency of , and the lower of those is type .",
        "188": "Marie invented a Time Machine and wants to test it by time-traveling to visit Russia on the Day of the Programmer (the 256th day of the year) during a year in the inclusive range from 1700 to 2700.\nFrom 1700 to 1917, Russia's official calendar was the Julian calendar; since 1919 they used the Gregorian calendar system. The transition from the Julian to Gregorian calendar system occurred in 1918, when the next day after January 31st was February 14th. This means that in 1918, February 14th was the 32nd day of the year in Russia.\nIn both calendar systems, February is the only month with a variable amount of days; it has 29 days during a leap year, and 28 days during all other years. In the Julian calendar, leap years are divisible by 4; in the Gregorian calendar, leap years are either of the following:\nDivisible by 400.\nDivisible by 4 and not divisible by 100.\nGiven a year, , find the date of the 256th day of that year according to the official Russian calendar during that year. Then print it in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is .\nFor example, the given = 1984. 1984 is divisible by 4, so it is a leap year. The 256th day of a leap year after 1918 is September 12, so the answer is .\nFunction Description\nComplete the dayOfProgrammer function in the editor below. It should return a string representing the date of the 256th day of the year given.\ndayOfProgrammer has the following parameter(s):\nyear: an integer\nInput Format\nA single integer denoting year .\nConstraints\n1700 \\le y \\le 2700\nOutput Format\nPrint the full date of Day of the Programmer during year in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is .\nSample Input 0\n2017\nSample Output 0\n13.09.2017\nExplanation 0\nIn the year = 2017, January has 31 days, February has 28 days, March has 31 days, April has 30 days, May has 31 days, June has 30 days, July has 31 days, and August has 31 days. When we sum the total number of days in the first eight months, we get 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 = 243. Day of the Programmer is the 256th day, so then calculate 256 - 243 = 13 to determine that it falls on day 13 of the 9th month (September). We then print the full date in the specified format, which is 13.09.2017.\nSample Input 1\n2016\nSample Output 1\n12.09.2016\nExplanation 1\nYear = 2016 is a leap year, so February has 29 days but all the other months have the same number of days as in 2017. When we sum the total number of days in the first eight months, we get 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 = 244. Day of the Programmer is the 256th day, so then calculate 256 - 244 = 12 to determine that it falls on day 12 of the 9th month (September). We then print the full date in the specified format, which is 12.09.2016.\nSample Input 2\n1800\nSample Output 2\n12.09.1800\nExplanation 2\nSince 1800 is leap year as per Julian calendar. Day lies on 12 September.",
        "189": "Two friends Anna and Brian, are deciding how to split the bill at a dinner. Each will only pay for the items they consume. Brian gets the check and calculates Anna's portion. You must determine if his calculation is correct.\nFor example, assume the bill has the following prices: . Anna declines to eat item which costs . If Brian calculates the bill correctly, Anna will pay . If he includes the cost of , he will calculate . In the second case, he should refund to Anna.\nFunction Description\nComplete the bonAppetit function in the editor below. It should print Bon Appetit if the bill is fairly split. Otherwise, it should print the integer amount of money that Brian owes Anna.\nbonAppetit has the following parameter(s):\nbill: an array of integers representing the cost of each item ordered\nk: an integer representing the zero-based index of the item Anna doesn't eat\nb: the amount of money that Anna contributed to the bill\nInput Format\nThe first line contains two space-separated integers and , the number of items ordered and the -based index of the item that Anna did not eat.\nThe second line contains space-separated integers where .\nThe third line contains an integer, , the amount of money that Brian charged Anna for her share of the bill.\nConstraints\nThe amount of money due Anna will always be an integer\nOutput Format\nIf Brian did not overcharge Anna, print Bon Appetit on a new line; otherwise, print the difference (i.e., ) that Brian must refund to Anna. This will always be an integer.\nSample Input 0\n4 1\n3 10 2 9\n12\nSample Output 0\n5\nExplanation 0\nAnna didn't eat item , but she shared the rest of the items with Brian. The total cost of the shared items is and, split in half, the cost per person is . Brian charged her for her portion of the bill. We print the amount Anna was overcharged, , on a new line.\nSample Input 1\n4 1\n3 10 2 9\n7\nSample Output 1\nBon Appetit\nExplanation 1\nAnna didn't eat item , but she shared the rest of the items with Brian. The total cost of the shared items is and, split in half, the cost per person is . Because , we print Bon Appetit on a new line.",
        "190": "There is a large pile of socks that must be paired by color. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.\nExample\n\nThere is one pair of color and one of color . There are three odd socks left, one of each color. The number of pairs is .\nFunction Description\nComplete the sockMerchant function in the editor below.\nsockMerchant has the following parameter(s):\nint n: the number of socks in the pile\nint ar[n]: the colors of each sock\nReturns\nint: the number of pairs\nInput Format\nThe first line contains an integer , the number of socks represented in .\nThe second line contains space-separated integers, , the colors of the socks in the pile.\nConstraints\nwhere\nSample Input\nSTDIN                       Function\n-----                       --------\n9                           n = 9\n10 20 20 10 10 30 50 10 20  ar = [10, 20, 20, 10, 10, 30, 50, 10, 20]\nSample Output\n3\nExplanation\nThere are three pairs of socks.",
        "191": "A teacher asks the class to open their books to a page number. A student can either start turning pages from the front of the book or from the back of the book. They always turn pages one at a time. When they open the book, page is always on the right side:\nWhen they flip page , they see pages and . Each page except the last page will always be printed on both sides. The last page may only be printed on the front, given the length of the book. If the book is pages long, and a student wants to turn to page , what is the minimum number of pages to turn? They can start at the beginning or the end of the book.\nGiven and , find and print the minimum number of pages that must be turned in order to arrive at page .\nExample\n\nUsing the diagram above, if the student wants to get to page , they open the book to page , flip page and they are on the correct page. If they open the book to the last page, page , they turn page and are at the correct page. Return .\nFunction Description\nComplete the pageCount function in the editor below.\npageCount has the following parameter(s):\nint n: the number of pages in the book\nint p: the page number to turn to\nReturns\nint: the minimum number of pages to turn\nInput Format\nThe first line contains an integer , the number of pages in the book.\nThe second line contains an integer, , the page to turn to.\nConstraints\nSample Input 0\n6\n2\nSample Output 0\n1\nExplanation 0\nIf the student starts turning from page , they only need to turn page:\nIf a student starts turning from page , they need to turn pages:\nReturn the minimum value, .\nSample Input 1\n5\n4\nSample Output 1\n0\nExplanation 1\nIf the student starts turning from page , they need to turn pages:\nIf they start turning from page , they do not need to turn any pages:\nReturn the minimum value, .",
        "192": "An avid hiker keeps meticulous records of their hikes. During the last hike that took exactly steps, for every step it was noted if it was an uphill, , or a downhill, step. Hikes always start and end at sea level, and each step up or down represents a unit change in altitude. We define the following terms:\nA mountain is a sequence of consecutive steps above sea level, starting with a step up from sea level and ending with a step down to sea level.\nA valley is a sequence of consecutive steps below sea level, starting with a step down from sea level and ending with a step up to sea level.\nGiven the sequence of up and down steps during a hike, find and print the number of valleys walked through.\nExample\nThe hiker first enters a valley units deep. Then they climb out and up onto a mountain units high. Finally, the hiker returns to sea level and ends the hike.\nFunction Description\nComplete the countingValleys function in the editor below.\ncountingValleys has the following parameter(s):\nint steps: the number of steps on the hike\nstring path: a string describing the path\nReturns\nint: the number of valleys traversed\nInput Format\nThe first line contains an integer , the number of steps in the hike.\nThe second line contains a single string , of characters that describe the path.\nConstraints\nSample Input\n8\nUDDDUDUU\nSample Output\n1\nExplanation\nIf we represent _ as sea level, a step up as \/, and a step down as \\, the hike can be drawn as:\n_\/\\      _\n   \\    \/\n    \\\/\\\/\nThe hiker enters and leaves one valley.",
        "193": "A person wants to determine the most expensive computer keyboard and USB drive that can be purchased with a give budget. Given price lists for keyboards and USB drives and a budget, find the cost to buy them. If it is not possible to buy both items, return .\nExample\n\n\nThe person can buy a , or a . Choose the latter as the more expensive option and return .\nFunction Description\nComplete the getMoneySpent function in the editor below.\ngetMoneySpent has the following parameter(s):\nint keyboards[n]: the keyboard prices\nint drives[m]: the drive prices\nint b: the budget\nReturns\nint: the maximum that can be spent, or if it is not possible to buy both items\nInput Format\nThe first line contains three space-separated integers , , and , the budget, the number of keyboard models and the number of USB drive models.\nThe second line contains space-separated integers , the prices of each keyboard model.\nThe third line contains space-separated integers , the prices of the USB drives.\nConstraints\nThe price of each item is in the inclusive range .\nSample Input 0\n10 2 3\n3 1\n5 2 8\nSample Output 0\n9\nExplanation 0\nBuy the keyboard and the USB drive for a total cost of .\nSample Input 1\n5 1 1\n4\n5\nSample Output 1\n-1\nExplanation 1\nThere is no way to buy one keyboard and one USB drive because , so return .",
        "194": "Two cats and a mouse are at various positions on a line. You will be given their starting positions. Your task is to determine which cat will reach the mouse first, assuming the mouse does not move and the cats travel at equal speed. If the cats arrive at the same time, the mouse will be allowed to move and it will escape while they fight.\nYou are given queries in the form of , , and representing the respective positions for cats and , and for mouse . Complete the function to return the appropriate answer to each query, which will be printed on a new line.\nIf cat catches the mouse first, print Cat A.\nIf cat catches the mouse first, print Cat B.\nIf both cats reach the mouse at the same time, print Mouse C as the two cats fight and mouse escapes.\nExample\n\n\nThe cats are at positions (Cat A) and (Cat B), and the mouse is at position . Cat B, at position will arrive first since it is only unit away while the other is units away. Return 'Cat B'.\nFunction Description\nComplete the catAndMouse function in the editor below.\ncatAndMouse has the following parameter(s):\nint x: Cat 's position\nint y: Cat 's position\nint z: Mouse 's position\nReturns\nstring: Either 'Cat A', 'Cat B', or 'Mouse C'\nInput Format\nThe first line contains a single integer, , denoting the number of queries.\nEach of the subsequent lines contains three space-separated integers describing the respective values of (cat 's location), (cat 's location), and (mouse 's location).\nConstraints\nSample Input 0\n2\n1 2 3\n1 3 2\nSample Output 0\nCat B\nMouse C\nExplanation 0\nQuery 0: The positions of the cats and mouse are shown below:\nCat will catch the mouse first, so we print Cat B on a new line.\nQuery 1: In this query, cats and reach mouse at the exact same time:\nBecause the mouse escapes, we print Mouse C on a new line.",
        "195": "We define a magic square to be an matrix of distinct positive integers from to where the sum of any row, column, or diagonal of length is always equal to the same number: the magic constant.\nYou will be given a matrix of integers in the inclusive range . We can convert any digit to any other digit in the range at cost of . Given , convert it into a magic square at minimal cost. Print this cost on a new line.\nNote: The resulting magic square must contain distinct integers in the inclusive range .\nExample\n$s = [[5, 3, 4], [1, 5, 8], [6, 4, 2]]\nThe matrix looks like this:\n5 3 4\n1 5 8\n6 4 2\nWe can convert it to the following magic square:\n8 3 4\n1 5 9\n6 7 2\nThis took three replacements at a cost of .\nFunction Description\nComplete the formingMagicSquare function in the editor below.\nformingMagicSquare has the following parameter(s):\nint s[3][3]: a array of integers\nReturns\nint: the minimal total cost of converting the input square to a magic square\nInput Format\nEach of the lines contains three space-separated integers of row .\nConstraints\nSample Input 0\n4 9 2\n3 5 7\n8 1 5\nSample Output 0\n1\nExplanation 0\nIf we change the bottom right value, , from to at a cost of , becomes a magic square at the minimum possible cost.\nSample Input 1\n4 8 2\n4 5 7\n6 1 6\nSample Output 1\n4\nExplanation 1\nUsing 0-based indexing, if we make\n-> at a cost of\n-> at a cost of\n-> at a cost of ,\nthen the total cost will be .",
        "196": "Given an array of integers, find the longest subarray where the absolute difference between any two elements is less than or equal to .\nExample\nThere are two subarrays meeting the criterion: and . The maximum length subarray has elements.\nFunction Description\nComplete the pickingNumbers function in the editor below.\npickingNumbers has the following parameter(s):\nint a[n]: an array of integers\nReturns\nint: the length of the longest subarray that meets the criterion\nInput Format\nThe first line contains a single integer , the size of the array .\nThe second line contains space-separated integers, each an .\nConstraints\nThe answer will be .\nSample Input 0\n6\n4 6 5 3 3 1\nSample Output 0\n3\nExplanation 0\nWe choose the following multiset of integers from the array: . Each pair in the multiset has an absolute difference (i.e., and ), so we print the number of chosen integers, , as our answer.\nSample Input 1\n6\n1 2 2 3 1 2\nSample Output 1\n5\nExplanation 1\nWe choose the following multiset of integers from the array: . Each pair in the multiset has an absolute difference (i.e., , , and ), so we print the number of chosen integers, , as our answer.",
        "197": "An arcade game player wants to climb to the top of the leaderboard and track their ranking. The game uses Dense Ranking, so its leaderboard works like this:\nThe player with the highest score is ranked number on the leaderboard.\nPlayers who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number.\nExample\n\nThe ranked players will have ranks , , , and , respectively. If the player's scores are , and , their rankings after each game are , and . Return .\nFunction Description\nComplete the climbingLeaderboard function in the editor below.\nclimbingLeaderboard has the following parameter(s):\nint ranked[n]: the leaderboard scores\nint player[m]: the player's scores\nReturns\nint[m]: the player's rank after each new score\nInput Format\nThe first line contains an integer , the number of players on the leaderboard.\nThe next line contains space-separated integers , the leaderboard scores in decreasing order.\nThe next line contains an integer, , the number games the player plays.\nThe last line contains space-separated integers , the game scores.\nConstraints\nfor\nfor\nThe existing leaderboard, , is in descending order.\nThe player's scores, , are in ascending order.\nSubtask\nFor of the maximum score:",
        "198": "A video player plays a game in which the character competes in a hurdle race. Hurdles are of varying heights, and the characters have a maximum height they can jump. There is a magic potion they can take that will increase their maximum jump height by unit for each dose. How many doses of the potion must the character take to be able to jump all of the hurdles. If the character can already clear all of the hurdles, return .\nExample\n\nThe character can jump unit high initially and must take doses of potion to be able to jump all of the hurdles.\nFunction Description\nComplete the hurdleRace function in the editor below.\nhurdleRace has the following parameter(s):\nint k: the height the character can jump naturally\nint height[n]: the heights of each hurdle\nReturns\nint: the minimum number of doses required, always or more\nInput Format\nThe first line contains two space-separated integers and , the number of hurdles and the maximum height the character can jump naturally.\nThe second line contains space-separated integers where .\nConstraints\nSample Input 0\n5 4\n1 6 3 5 2\nSample Output 0\n2\nExplanation 0\nDan's character can jump a maximum of units, but the tallest hurdle has a height of :\nTo be able to jump all the hurdles, Dan must drink doses.\nSample Input 1\n5 7\n2 5 4 5 2\nSample Output 1\n0\nExplanation 1\nDan's character can jump a maximum of units, which is enough to cross all the hurdles:\nBecause he can already jump all the hurdles, Dan needs to drink doses.",
        "199": "When a contiguous block of text is selected in a PDF viewer, the selection is highlighted with a blue rectangle. In this PDF viewer, each word is highlighted independently. For example:\nThere is a list of character heights aligned by index to their letters. For example, 'a' is at index and 'z' is at index . There will also be a string. Using the letter heights given, determine the area of the rectangle highlight in assuming all letters are wide.\nExample\nThe heights are and . The tallest letter is high and there are letters. The hightlighted area will be so the answer is .\nFunction Description\nComplete the designerPdfViewer function in the editor below.\ndesignerPdfViewer has the following parameter(s):\nint h[26]: the heights of each letter\nstring word: a string\nReturns\nint: the size of the highlighted area\nInput Format\nThe first line contains space-separated integers describing the respective heights of each consecutive lowercase English letter, ascii[a-z].\nThe second line contains a single word consisting of lowercase English alphabetic letters.\nConstraints\n, where is an English lowercase letter.\ncontains no more than letters.\nSample Input 0\n1 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\nabc\nSample Output 0\n9\nExplanation 0\nWe are highlighting the word abc:\nLetter heights are , and . The tallest letter, b, is high. The selection area for this word is .\nNote: Recall that the width of each character is .\nSample Input 1\n1 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7\nzaba\nSample Output 1\n28\nExplanation 1\nThe tallest letter in is at . The selection area for this word is .",
        "200": "The Utopian Tree goes through 2 cycles of growth every year. Each spring, it doubles in height. Each summer, its height increases by 1 meter.\nA Utopian Tree sapling with a height of 1 meter is planted at the onset of spring. How tall will the tree be after growth cycles?\nFor example, if the number of growth cycles is , the calculations are as follows:\nPeriod  Height\n0          1\n1          2\n2          3\n3          6\n4          7\n5          14\nFunction Description\nComplete the utopianTree function in the editor below.\nutopianTree has the following parameter(s):\nint n: the number of growth cycles to simulate\nReturns\nint: the height of the tree after the given number of cycles\nInput Format\nThe first line contains an integer, , the number of test cases.\nsubsequent lines each contain an integer, , the number of cycles for that test case.\nConstraints\n\nSample Input\n3\n0\n1\n4\nSample Output\n1\n2\n7\nExplanation\nThere are 3 test cases.\nIn the first case (), the initial height () of the tree remains unchanged.\nIn the second case (), the tree doubles in height and is meters tall after the spring cycle.\nIn the third case (), the tree doubles its height in spring (, ), then grows a meter in summer (, ), then doubles after the next spring (, ), and grows another meter after summer (, ). Thus, at the end of 4 cycles, its height is meters.",
        "201": "A Discrete Mathematics professor has a class of students. Frustrated with their lack of discipline, the professor decides to cancel class if fewer than some number of students are present when class starts. Arrival times go from on time () to arrived late ().\nGiven the arrival time of each student and a threshhold number of attendees, determine if the class is cancelled.\nExample\n\n\nThe first students arrived on. The last were late. The threshold is students, so class will go on. Return YES.\nNote: Non-positive arrival times () indicate the student arrived early or on time; positive arrival times () indicate the student arrived minutes late.\nFunction Description\nComplete the angryProfessor function in the editor below. It must return YES if class is cancelled, or NO otherwise.\nangryProfessor has the following parameter(s):\nint k: the threshold number of students\nint a[n]: the arrival times of the students\nReturns\nstring: either YES or NO\nInput Format\nThe first line of input contains , the number of test cases.\nEach test case consists of two lines.\nThe first line has two space-separated integers, and , the number of students (size of ) and the cancellation threshold.\nThe second line contains space-separated integers () that describe the arrival times for each student.\nConstraints\nSample Input\n2\n4 3\n-1 -3 4 2\n4 2\n0 -1 2 1\nSample Output\nYES\nNO\nExplanation\nFor the first test case, . The professor wants at least students in attendance, but only have arrived on time ( and ) so the class is cancelled.\nFor the second test case, . The professor wants at least students in attendance, and there are who arrived on time ( and ). The class is not cancelled.",
        "202": "Lily likes to play games with integers. She has created a new game where she determines the difference between a number and its reverse. For instance, given the number , its reverse is . Their difference is . The number reversed is , and their difference is .\nShe decides to apply her game to decision making. She will look at a numbered range of days and will only go to a movie on a beautiful day.\nGiven a range of numbered days, and a number , determine the number of days in the range that are beautiful. Beautiful numbers are defined as numbers where is evenly divisible by . If a day's value is a beautiful number, it is a beautiful day. Return the number of beautiful days in the range.\nFunction Description\nComplete the beautifulDays function in the editor below.\nbeautifulDays has the following parameter(s):\nint i: the starting day number\nint j: the ending day number\nint k: the divisor\nReturns\nint: the number of beautiful days in the range\nInput Format\nA single line of three space-separated integers describing the respective values of , , and .\nConstraints\nSample Input\n20 23 6\nSample Output\n2\nExplanation\nLily may go to the movies on days , , , and . We perform the following calculations to determine which days are beautiful:\nDay is beautiful because the following evaluates to a whole number:\nDay is not beautiful because the following doesn't evaluate to a whole number:\nDay is beautiful because the following evaluates to a whole number:\nDay is not beautiful because the following doesn't evaluate to a whole number:\nOnly two days, and , in this interval are beautiful. Thus, we print as our answer.",
        "203": "HackerLand Enterprise is adopting a new viral advertising strategy. When they launch a new product, they advertise it to exactly people on social media.\nOn the first day, half of those people (i.e., ) like the advertisement and each shares it with of their friends. At the beginning of the second day, people receive the advertisement.\nEach day, of the recipients like the advertisement and will share it with friends on the following day. Assuming nobody receives the advertisement twice, determine how many people have liked the ad by the end of a given day, beginning with launch day as day .\nExample\n.\nDay Shared Liked Cumulative\n1      5     2       2\n2      6     3       5\n3      9     4       9\n4     12     6      15\n5     18     9      24\nThe progression is shown above. The cumulative number of likes on the day is .\nFunction Description\nComplete the viralAdvertising function in the editor below.\nviralAdvertising has the following parameter(s):\nint n: the day number to report\nReturns\nint: the cumulative likes at that day\nInput Format\nA single integer, , the day number.\nConstraints\nSample Input\n3\nSample Output\n9\nExplanation\nThis example is depicted in the following diagram:\npeople liked the advertisement on the first day, people liked the advertisement on the second day and people liked the advertisement on the third day, so the answer is .",
        "204": "A jail has a number of prisoners and a number of treats to pass out to them. Their jailer decides the fairest way to divide the treats is to seat the prisoners around a circular table in sequentially numbered chairs. A chair number will be drawn from a hat. Beginning with the prisoner in that chair, one candy will be handed to each prisoner sequentially around the table until all have been distributed.\nThe jailer is playing a little joke, though. The last piece of candy looks like all the others, but it tastes awful. Determine the chair number occupied by the prisoner who will receive that candy.\nExample\n\n\nThere are prisoners, pieces of candy and distribution starts at chair . The prisoners arrange themselves in seats numbered to . Prisoners receive candy at positions . The prisoner to be warned sits in chair number .\nFunction Description\nComplete the saveThePrisoner function in the editor below. It should return an integer representing the chair number of the prisoner to warn.\nsaveThePrisoner has the following parameter(s):\nint n: the number of prisoners\nint m: the number of sweets\nint s: the chair number to begin passing out sweets from\nReturns\nint: the chair number of the prisoner to warn\nInput Format\nThe first line contains an integer, , the number of test cases.\nThe next lines each contain space-separated integers:\n: the number of prisoners\n: the number of sweets\n: the chair number to start passing out treats at\nConstraints\nSample Input 0\n2\n5 2 1\n5 2 2\nSample Output 0\n2\n3\nExplanation 0\nIn the first query, there are prisoners and sweets. Distribution starts at seat number . Prisoners in seats numbered and get sweets. Warn prisoner .\nIn the second query, distribution starts at seat so prisoners in seats and get sweets. Warn prisoner .\nSample Input 1\n2\n7 19 2\n3 7 3\nSample Output 1\n6\n3\nExplanation 1\nIn the first test case, there are prisoners, sweets and they are passed out starting at chair . The candies go all around twice and there are more candies passed to each prisoner from seat to seat .\nIn the second test case, there are prisoners, candies and they are passed out starting at seat . They go around twice, and there is one more to pass out to the prisoner at seat .",
        "205": "John Watson knows of an operation called a right circular rotation on an array of integers. One rotation operation moves the last array element to the first position and shifts all remaining elements right one. To test Sherlock's abilities, Watson provides Sherlock with an array of integers. Sherlock is to perform the rotation operation a number of times then determine the value of the element at a given position.\nFor each array, perform a number of right circular rotations and return the values of the elements at the given indices.\nExample\n\n\nHere is the number of rotations on , and holds the list of indices to report. First we perform the two rotations:\nNow return the values from the zero-based indices and as indicated in the array.\n\nFunction Description\nComplete the circularArrayRotation function in the editor below.\ncircularArrayRotation has the following parameter(s):\nint a[n]: the array to rotate\nint k: the rotation count\nint queries[1]: the indices to report\nReturns\nint[q]: the values in the rotated as requested in\nInput Format\nThe first line contains space-separated integers, , , and , the number of elements in the integer array, the rotation count and the number of queries.\nThe second line contains space-separated integers, where each integer describes array element (where ).\nEach of the subsequent lines contains a single integer, , an index of an element in to return.\nConstraints\nSample Input 0\n3 2 3\n1 2 3\n0\n1\n2\nSample Output 0\n2\n3\n1\nExplanation 0\nAfter the first rotation, the array is .\nAfter the second (and final) rotation, the array is .\nWe will call this final state array . For each query, we just have to get the value of .\n, .\n, .\n, .",
        "206": "Given a sequence of integers, where each element is distinct and satisfies . For each where , that is increments from to , find any integer such that and keep a history of the values of in a return array.\nExample\nEach value of between and , the length of the sequence, is analyzed as follows:\n, so\n, so\n, so\n, so\n, so\nThe values for are .\nFunction Description\nComplete the permutationEquation function in the editor below.\npermutationEquation has the following parameter(s):\nint p[n]: an array of integers\nReturns\nint[n]: the values of for all in the arithmetic sequence to\nInput Format\nThe first line contains an integer , the number of elements in the sequence.\nThe second line contains space-separated integers where .\nConstraints\n, where .\nEach element in the sequence is distinct.\nSample Input 0\n3\n2 3 1\nSample Output 0\n2\n3\n1\nExplanation 0\nGiven the values of , , and , we calculate and print the following values for each from to :\n, so we print the value of on a new line.\n, so we print the value of on a new line.\n, so we print the value of on a new line.\nSample Input 1\n5\n4 3 5 1 2\nSample Output 1\n1\n3\n5\n4\n2",
        "207": "A child is playing a cloud hopping game. In this game, there are sequentially numbered clouds that can be thunderheads or cumulus clouds. The character must jump from cloud to cloud until it reaches the start again.\nThere is an array of clouds, and an energy level . The character starts from and uses unit of energy to make a jump of size to cloud . If it lands on a thundercloud, , its energy () decreases by additional units. The game ends when the character lands back on cloud .\nGiven the values of , , and the configuration of the clouds as an array , determine the final value of after the game ends.\nExample.\nThe indices of the path are . The energy level reduces by for each jump to . The character landed on one thunderhead at an additional cost of energy units. The final energy level is .\nNote: Recall that refers to the modulo operation. In this case, it serves to make the route circular. If the character is at and jumps , it will arrive at .\nFunction Description\nComplete the jumpingOnClouds function in the editor below.\njumpingOnClouds has the following parameter(s):\nint c[n]: the cloud types along the path\nint k: the length of one jump\nReturns\nint: the energy level remaining.\nInput Format\nThe first line contains two space-separated integers, and , the number of clouds and the jump distance.\nThe second line contains space-separated integers where . Each cloud is described as follows:\nIf , then cloud is a cumulus cloud.\nIf , then cloud is a thunderhead.\nConstraints\nSample Input\nSTDIN             Function\n-----             --------\n8 2               n = 8, k = 2\n0 0 1 0 0 1 1 0   c = [0, 0, 1, 0, 0, 1, 1, 0]\nSample Output\n92\nExplanation\nIn the diagram below, red clouds are thunderheads and purple clouds are cumulus clouds:\nObserve that our thunderheads are the clouds numbered , , and . The character makes the following sequence of moves:\nMove: , Energy: .\nMove: , Energy: .\nMove: , Energy: .\nMove: , Energy: .",
        "208": "An integer is a divisor of an integer if the remainder of .\nGiven an integer, for each digit that makes up the integer determine whether it is a divisor. Count the number of divisors occurring within the integer.\nExample\nCheck whether , and are divisors of . All 3 numbers divide evenly into so return .\nCheck whether , , and are divisors of . All 3 numbers divide evenly into so return .\nCheck whether and are divisors of . is, but is not. Return .\nFunction Description\nComplete the findDigits function in the editor below.\nfindDigits has the following parameter(s):\nint n: the value to analyze\nReturns\nint: the number of digits in that are divisors of\nInput Format\nThe first line is an integer, , the number of test cases.\nThe subsequent lines each contain an integer, .\nConstraints\n\nSample Input\n2\n12\n1012\nSample Output\n2\n3\nExplanation\nThe number is broken into two digits, and . When is divided by either of those two digits, the remainder is so they are both divisors.\nThe number is broken into four digits, , , , and . is evenly divisible by its digits , , and , but it is not divisible by as division by zero is undefined.",
        "209": "The factorial of the integer , written , is defined as:\nCalculate and print the factorial of a given integer.\nFor example, if , we calculate and get .\nFunction Description\nComplete the extraLongFactorials function in the editor below. It should print the result and return.\nextraLongFactorials has the following parameter(s):\nn: an integer\nNote: Factorials of can't be stored even in a long long variable. Big integers must be used for such calculations. Languages like Java, Python, Ruby etc. can handle big integers, but we need to write additional code in C\/C++ to handle huge values.\nWe recommend solving this challenge using BigIntegers.\nInput Format\nInput consists of a single integer\nConstraints\nOutput Format\nPrint the factorial of .\nSample Input\nSample Output\nExplanation",
        "210": "You have two strings of lowercase English letters. You can perform two types of operations on the first string:\nAppend a lowercase English letter to the end of the string.\nDelete the last character of the string. Performing this operation on an empty string results in an empty string.\nGiven an integer, , and two strings, and , determine whether or not you can convert to by performing exactly of the above operations on . If it's possible, print Yes. Otherwise, print No.\nExample.\n\nTo convert to , we first delete all of the characters in moves. Next we add each of the characters of in order. On the move, you will have the matching string. Return Yes.\nIf there were more moves available, they could have been eliminated by performing multiple deletions on an empty string. If there were fewer than moves, we would not have succeeded in creating the new string.\nFunction Description\nComplete the appendAndDelete function in the editor below. It should return a string, either Yes or No.\nappendAndDelete has the following parameter(s):\nstring s: the initial string\nstring t: the desired string\nint k: the exact number of operations that must be performed\nReturns\nstring: either Yes or No\nInput Format\nThe first line contains a string , the initial string.\nThe second line contains a string , the desired final string.\nThe third line contains an integer , the number of operations.\nConstraints\nand consist of lowercase English letters, .\nSample Input 0\nhackerhappy\nhackerrank\n9\nSample Output 0\nYes\nExplanation 0\nWe perform delete operations to reduce string to hacker. Next, we perform append operations (i.e., r, a, n, and k), to get hackerrank. Because we were able to convert to by performing exactly operations, we return Yes.\nSample Input 1\naba\naba\n7\nSample Output 1\nYes\nExplanation 1\nWe perform delete operations to reduce string to the empty string. Recall that though the string will be empty after deletions, we can still perform a delete operation on an empty string to get the empty string. Next, we perform append operations (i.e., a, b, and a). Because we were able to convert to by performing exactly operations, we return Yes.\nSample Input 2\nashley\nash\n2\nSample Output 2\nNo\nExplanation 2\nTo convert ashley to ash a minimum of steps are needed. Hence we print No as answer.",
        "211": "Watson likes to challenge Sherlock's math ability. He will provide a starting and ending value that describe a range of integers, inclusive of the endpoints. Sherlock must determine the number of square integers within that range.\nNote: A square integer is an integer which is the square of an integer, e.g. .\nExample\n\nThere are three square integers in the range: and . Return .\nFunction Description\nComplete the squares function in the editor below. It should return an integer representing the number of square integers in the inclusive range from to .\nsquares has the following parameter(s):\nint a: the lower range boundary\nint b: the upper range boundary\nReturns\nint: the number of square integers in the range\nInput Format\nThe first line contains , the number of test cases.\nEach of the next lines contains two space-separated integers, and , the starting and ending integers in the ranges.\nConstraints\n\nSample Input\n2\n3 9\n17 24\nSample Output\n2\n0\nExplanation\nTest Case #00: In range , and are the two square integers.\nTest Case #01: In range , there are no square integers.",
        "212": "Your local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any). The fee structure is as follows:\nIf the book is returned on or before the expected return date, no fine will be charged (i.e.: .\nIf the book is returned after the expected return day but still within the same calendar month and year as the expected return date, .\nIf the book is returned after the expected return month but still within the same calendar year as the expected return date, the .\nIf the book is returned after the calendar year in which it was expected, there is a fixed fine of .\nCharges are based only on the least precise measure of lateness. For example, whether a book is due January 1, 2017 or December 31, 2017, if it is returned January 1, 2018, that is a year late and the fine would be .\nExample\n\nThe first values are the return date and the second are the due date. The years are the same and the months are the same. The book is days late. Return .\nFunction Description\nComplete the libraryFine function in the editor below.\nlibraryFine has the following parameter(s):\nd1, m1, y1: returned date day, month and year, each an integer\nd2, m2, y2: due date day, month and year, each an integer\nReturns\nint: the amount of the fine or if there is none\nInput Format\nThe first line contains space-separated integers, , denoting the respective , , and on which the book was returned.\nThe second line contains space-separated integers, , denoting the respective , , and on which the book was due to be returned.\nConstraints\nSample Input\n9 6 2015\n6 6 2015\nSample Output\n45\nExplanation\nGiven the following dates:\nReturned:\nDue:\nBecause , we know it is less than a year late.\nBecause , we know it's less than a month late.\nBecause , we know that it was returned late (but still within the same month and year).\nPer the library's fee structure, we know that our fine will be . We then print the result of as our output.",
        "213": "You are given a number of sticks of varying lengths. You will iteratively cut the sticks into smaller sticks, discarding the shortest pieces until there are none left. At each iteration you will determine the length of the shortest stick remaining, cut that length from each of the longer sticks and then discard all the pieces of that shortest length. When all the remaining sticks are the same length, they cannot be shortened so discard them.\nGiven the lengths of sticks, print the number of sticks that are left before each iteration until there are none left.\nExample\nThe shortest stick length is , so cut that length from the longer two and discard the pieces of length . Now the lengths are . Again, the shortest stick is of length , so cut that amount from the longer stick and discard those pieces. There is only one stick left, , so discard that stick. The number of sticks at each iteration are .\nFunction Description\nComplete the cutTheSticks function in the editor below. It should return an array of integers representing the number of sticks before each cut operation is performed.\ncutTheSticks has the following parameter(s):\nint arr[n]: the lengths of each stick\nReturns\nint[]: the number of sticks after each iteration\nInput Format\nThe first line contains a single integer , the size of .\nThe next line contains space-separated integers, each an , where each value represents the length of the stick.\nConstraints\nSample Input 0\nSTDIN           Function\n-----           --------\n6               arr[] size n = 6\n5 4 4 2 2 8     arr = [5, 4, 4, 2, 2, 8]\nSample Output 0\n6\n4\n2\n1\nExplanation 0\nsticks-length        length-of-cut   sticks-cut\n5 4 4 2 2 8             2               6\n3 2 2 _ _ 6             2               4\n1 _ _ _ _ 4             1               2\n_ _ _ _ _ 3             3               1\n_ _ _ _ _ _           DONE            DONE\nSample Input 1\n8\n1 2 3 4 3 3 2 1\nSample Output 1\n8\n6\n4\n1\nExplanation 1\nsticks-length         length-of-cut   sticks-cut\n1 2 3 4 3 3 2 1         1               8\n_ 1 2 3 2 2 1 _         1               6\n_ _ 1 2 1 1 _ _         1               4\n_ _ _ 1 _ _ _ _         1               1\n_ _ _ _ _ _ _ _       DONE            DONE",
        "214": "Given a set of distinct integers, print the size of a maximal subset of where the sum of any numbers in is not evenly divisible by .\nExample\nOne of the arrays that can be created is . Another is . After testing all permutations, the maximum length solution array has elements.\nFunction Description\nComplete the nonDivisibleSubset function in the editor below.\nnonDivisibleSubset has the following parameter(s):\nint S[n]: an array of integers\nint k: the divisor\nReturns\nint: the length of the longest subset of meeting the criteria\nInput Format\nThe first line contains space-separated integers, and , the number of values in and the non factor.\nThe second line contains space-separated integers, each an , the unique values of the set.\nConstraints\nAll of the given numbers are distinct.\nSample Input\nSTDIN    Function\n-----    --------\n4 3      S[] size n = 4, k = 3\n1 7 2 4  S = [1, 7, 2, 4]\nSample Output\n3\nExplanation\nThe sums of all permutations of two elements from are:\n1 + 7 = 8\n1 + 2 = 3\n1 + 4 = 5\n7 + 2 = 9\n7 + 4 = 11\n2 + 4 = 6\nOnly will not ever sum to a multiple of .",
        "215": "There is a string, , of lowercase English letters that is repeated infinitely many times. Given an integer, , find and print the number of letter a's in the first letters of the infinite string.\nExample\n\nThe substring we consider is , the first characters of the infinite string. There are occurrences of a in the substring.\nFunction Description\nComplete the repeatedString function in the editor below.\nrepeatedString has the following parameter(s):\ns: a string to repeat\nn: the number of characters to consider\nReturns\nint: the frequency of a in the substring\nInput Format\nThe first line contains a single string, .\nThe second line contains an integer, .\nConstraints\nFor of the test cases, .\nSample Input\nSample Input 0\naba\n10\nSample Output 0\n7\nExplanation 0\nThe first letters of the infinite string are abaabaabaa. Because there are a's, we return .\nSample Input 1\na\n1000000000000\nSample Output 1\n1000000000000\nExplanation 1\nBecause all of the first letters of the infinite string are a, we return .",
        "216": "There is a new mobile game that starts with consecutively numbered clouds. Some of the clouds are thunderheads and others are cumulus. The player can jump on any cumulus cloud having a number that is equal to the number of the current cloud plus or . The player must avoid the thunderheads. Determine the minimum number of jumps it will take to jump from the starting postion to the last cloud. It is always possible to win the game.\nFor each game, you will get an array of clouds numbered if they are safe or if they must be avoided.\nExample\nIndex the array from . The number on each cloud is its index in the list so the player must avoid the clouds at indices and . They could follow these two paths: or . The first path takes jumps while the second takes . Return .\nFunction Description\nComplete the jumpingOnClouds function in the editor below.\njumpingOnClouds has the following parameter(s):\nint c[n]: an array of binary integers\nReturns\nint: the minimum number of jumps required\nInput Format\nThe first line contains an integer , the total number of clouds. The second line contains space-separated binary integers describing clouds where .\nConstraints\nOutput Format\nPrint the minimum number of jumps needed to win the game.\nSample Input 0\n7\n0 0 1 0 0 1 0\nSample Output 0\n4\nExplanation 0:\nThe player must avoid and . The game can be won with a minimum of jumps:\nSample Input 1\n6\n0 0 0 0 1 0\nSample Output 1\n3\nExplanation 1:\nThe only thundercloud to avoid is . The game can be won in jumps:",
        "217": "Given an array of integers, determine the minimum number of elements to delete to leave only elements of equal value.\nExample\nDelete the elements and leaving . If both twos plus either the or the are deleted, it takes deletions to leave either or . The minimum number of deletions is .\nFunction Description\nComplete the equalizeArray function in the editor below.\nequalizeArray has the following parameter(s):\nint arr[n]: an array of integers\nReturns\nint: the minimum number of deletions required\nInput Format\nThe first line contains an integer , the number of elements in .\nThe next line contains space-separated integers .\nConstraints\nSample Input\nSTDIN       Function\n-----       --------\n5           arr[] size n = 5\n3 3 2 1 3   arr = [3, 3, 2, 1, 3]\nSample Output\n2   \nExplanation\nDelete and to leave . This is minimal. The only other options are to delete elements to get an array of either or .",
        "218": "You will be given a square chess board with one queen and a number of obstacles placed on it. Determine how many squares the queen can attack.\nA queen is standing on an chessboard. The chess board's rows are numbered from to , going from bottom to top. Its columns are numbered from to , going from left to right. Each square is referenced by a tuple, , describing the row, , and column, , where the square is located.\nThe queen is standing at position . In a single move, she can attack any square in any of the eight directions (left, right, up, down, and the four diagonals). In the diagram below, the green circles denote all the cells the queen can attack from :\nThere are obstacles on the chessboard, each preventing the queen from attacking any square beyond it on that path. For example, an obstacle at location in the diagram above prevents the queen from attacking cells , , and :\nGiven the queen's position and the locations of all the obstacles, find and print the number of squares the queen can attack from her position at . In the board above, there are such squares.\nFunction Description\nComplete the queensAttack function in the editor below.\nqueensAttack has the following parameters:\n- int n: the number of rows and columns in the board\n- nt k: the number of obstacles on the board\n- int r_q: the row number of the queen's position\n- int c_q: the column number of the queen's position\n- int obstacles[k][2]: each element is an array of integers, the row and column of an obstacle\nReturns\n- int: the number of squares the queen can attack\nInput Format\nThe first line contains two space-separated integers and , the length of the board's sides and the number of obstacles.\nThe next line contains two space-separated integers and , the queen's row and column position.\nEach of the next lines contains two space-separated integers and , the row and column position of .\nConstraints\nA single cell may contain more than one obstacle.\nThere will never be an obstacle at the position where the queen is located.\nSubtasks\nFor of the maximum score:\nFor of the maximum score:\nSample Input 0\n4 0\n4 4\nSample Output 0\n9\nExplanation 0\nThe queen is standing at position on a chessboard with no obstacles:\nSample Input 1\n5 3\n4 3\n5 5\n4 2\n2 3\nSample Output 1\n10\nExplanation 1\nThe queen is standing at position on a chessboard with obstacles:\nThe number of squares she can attack from that position is .\nSample Input 2\n1 0\n1 1\nSample Output 2\n0\nExplanation 2\nSince there is only one square, and the queen is on it, the queen can move 0 squares.",
        "219": "There are a number of people who will be attending ACM-ICPC World Finals. Each of them may be well versed in a number of topics. Given a list of topics known by each attendee, presented as binary strings, determine the maximum number of topics a 2-person team can know. Each subject has a column in the binary string, and a '1' means the subject is known while '0' means it is not. Also determine the number of teams that know the maximum number of topics. Return an integer array with two elements. The first is the maximum number of topics known, and the second is the number of teams that know that number of topics.\nExample\n\nThe attendee data is aligned for clarity below:\n10101\n11110\n00010\nThese are all possible teams that can be formed:\nMembers Subjects\n(1,2)   [1,2,3,4,5]\n(1,3)   [1,3,4,5]\n(2,3)   [1,2,3,4]\nIn this case, the first team will know all 5 subjects. They are the only team that can be created that knows that many subjects, so is returned.\nFunction Description\nComplete the acmTeam function in the editor below.\nacmTeam has the following parameter(s):\nstring topic: a string of binary digits\nReturns\nint[2]: the maximum topics and the number of teams that know that many topics\nInput Format\nThe first line contains two space-separated integers and , where is the number of attendees and is the number of topics.\nEach of the next lines contains a binary string of length .\nConstraints\n\nSample Input\n4 5\n10101\n11100\n11010\n00101\nSample Output\n5\n2\nExplanation\nCalculating topics known for all permutations of 2 attendees we get:\n\n\n\n\n\nThe 2 teams (1, 3) and (3, 4) know all 5 topics which is maximal.",
        "220": "Taum is planning to celebrate the birthday of his friend, Diksha. There are two types of gifts that Diksha wants from Taum: one is black and the other is white. To make her happy, Taum has to buy black gifts and white gifts.\nThe cost of each black gift is units.\nThe cost of every white gift is units.\nThe cost to convert a black gift into white gift or vice versa is units.\nDetermine the minimum cost of Diksha's gifts.\nExample\n\n\n\n\nHe can buy a black gift for and convert it to a white gift for , making the total cost of each white gift . That matches the cost of a white gift, so he can do that or just buy black gifts and white gifts. Either way, the overall cost is .\nFunction Description\nComplete the function taumBday in the editor below. It should return the minimal cost of obtaining the desired gifts.\ntaumBday has the following parameter(s):\nint b: the number of black gifts\nint w: the number of white gifts\nint bc: the cost of a black gift\nint wc: the cost of a white gift\nint z: the cost to convert one color gift to the other color\nReturns\nint: the minimum cost to purchase the gifts\nInput Format\nThe first line will contain an integer , the number of test cases.\nThe next pairs of lines are as follows:\n- The first line contains the values of integers and .\n- The next line contains the values of integers , , and .\nConstraints\n\nOutput Format\nlines, each containing an integer: the minimum amount of units Taum needs to spend on gifts.\nSample Input\nSTDIN   Function\n-----   --------\n5       t = 5\n10 10   b = 10, w = 10\n1 1 1   bc = 1, wc = 1, z = 1\n5 9     b = 5, w = 5\n2 3 4   bc = 2, wc = 3, z = 4\n3 6     b = 3, w = 6\n9 1 1   bc = 9, wc = 1, z = 1\n7 7     b = 7, w = 7\n4 2 1   bc = 4, wc = 2, z = 1\n3 3     b = 3, w = 3\n1 9 2   bc = 1, wc = 9, z = 2\nSample Output\n20\n37\n12\n35\n12\nExplanation\nTest Case #01:\nSince black gifts cost the same as white, there is no benefit to converting the gifts. Taum will have to buy each gift for 1 unit. The cost of buying all gifts will be: .\nTest Case #02:\nAgain, he cannot decrease the cost of black or white gifts by converting colors. is too high. He will buy gifts at their original prices, so the cost of buying all gifts will be: .\nTest Case #03:\nSince , he will buy white gifts at their original price of . of the gifts must be black, and the cost per conversion, . Total cost is .\nTest Case #04:\nSimilarly, he will buy white gifts at their original price, . For black gifts, he will first buy white ones and color them to black, so that their cost will be reduced to . So cost of buying all gifts will be: .\nTest Case #05: He will buy black gifts at their original price, . For white gifts, he will first black gifts worth unit and color them to white for units. The cost for white gifts is reduced to units. The cost of buying all gifts will be: .",
        "221": "David has several containers, each with a number of balls in it. He has just enough containers to sort each type of ball he has into its own container. David wants to sort the balls using his sort method.\nDavid wants to perform some number of swap operations such that:\nEach container contains only balls of the same type.\nNo two balls of the same type are located in different containers.\nExample\nDavid has containers and different types of balls, both of which are numbered from to . The distribution of ball types per container are shown in the following diagram.\nIn a single operation, David can swap two balls located in different containers.\nThe diagram below depicts a single swap operation:\nIn this case, there is no way to have all green balls in one container and all red in the other using only swap operations. Return Impossible.\nYou must perform queries where each query is in the form of a matrix, . For each query, print Possible on a new line if David can satisfy the conditions above for the given matrix. Otherwise, print Impossible.\nFunction Description\nComplete the organizingContainers function in the editor below.\norganizingContainers has the following parameter(s):\nint containter[n][m]: a two dimensional array of integers that represent the number of balls of each color in each container\nReturns\nstring: either Possible or Impossible\nInput Format\nThe first line contains an integer , the number of queries.\nEach of the next sets of lines is as follows:\nThe first line contains an integer , the number of containers (rows) and ball types (columns).\nEach of the next lines contains space-separated integers describing row .\nConstraints\nScoring\nFor of score, .\nFor of score, .\nOutput Format\nFor each query, print Possible on a new line if David can satisfy the conditions above for the given matrix. Otherwise, print Impossible.\nSample Input 0\n2\n2\n1 1\n1 1\n2\n0 2\n1 1\nSample Output 0\nPossible\nImpossible\nExplanation 0\nWe perform the following queries:\nThe diagram below depicts one possible way to satisfy David's requirements for the first query:\nThus, we print Possible on a new line.\nThe diagram below depicts the matrix for the second query:\nNo matter how many times we swap balls of type and between the two containers, we'll never end up with one container only containing type and the other container only containing type . Thus, we print Impossible on a new line.\nSample Input 1\n2\n3\n1 3 1\n2 1 2\n3 3 3\n3\n0 2 1\n1 1 1\n2 0 0\nSample Output 1\nImpossible\nPossible",
        "222": "An English text needs to be encrypted using the following encryption scheme.\nFirst, the spaces are removed from the text. Let be the length of this text.\nThen, characters are written into a grid, whose rows and columns have the following constraints:\nExample\nAfter removing spaces, the string is characters long. is between and , so it is written in the form of a grid with 7 rows and 8 columns.\nifmanwas  \nmeanttos          \ntayonthe  \ngroundgo  \ndwouldha  \nvegivenu  \nsroots\nEnsure that\nIf multiple grids satisfy the above conditions, choose the one with the minimum area, i.e. .\nThe encoded message is obtained by displaying the characters of each column, with a space between column texts. The encoded message for the grid above is:\nimtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn sseoau\nCreate a function to encode a message.\nFunction Description\nComplete the encryption function in the editor below.\nencryption has the following parameter(s):\nstring s: a string to encrypt\nReturns\nstring: the encrypted string\nInput Format\nOne line of text, the string\nConstraints\n\ncontains characters in the range ascii[a-z] and space, ascii(32).\nSample Input\nhaveaniceday\nSample Output 0\nhae and via ecy\nExplanation 0\n, is between and .\nRewritten with rows and columns:\nhave\nanic\neday\nSample Input 1\nfeedthedog    \nSample Output 1\nfto ehg ee dd\nExplanation 1\n, is between and .\nRewritten with rows and columns:\nfeed\nthed\nog\nSample Input 2\nchillout\nSample Output 2\nclu hlt io\nExplanation 2\n, is between and .\nRewritten with columns and rows ( so we have to use .)\nchi\nllo\nut",
        "223": "Lexicographical order is often known as alphabetical order when dealing with strings. A string is greater than another string if it comes later in a lexicographically sorted list.\nGiven a word, create a new word by swapping some or all of its characters. This new word must meet two criteria:\nIt must be greater than the original word\nIt must be the smallest word that meets the first condition\nExample\nThe next largest word is .\nComplete the function biggerIsGreater below to create and return the new string meeting the criteria. If it is not possible, return no answer.\nFunction Description\nComplete the biggerIsGreater function in the editor below.\nbiggerIsGreater has the following parameter(s):\nstring w: a word\nReturns\n- string: the smallest lexicographically higher string possible or no answer\nInput Format\nThe first line of input contains , the number of test cases.\nEach of the next lines contains .\nConstraints\nwill contain only letters in the range ascii[a..z].\nSample Input 0\n5\nab\nbb\nhefg\ndhck\ndkhc\nSample Output 0\nba\nno answer\nhegf\ndhkc\nhcdk\nExplanation 0\nTest case 1:\nba is the only string which can be made by rearranging ab. It is greater.\nTest case 2:\nIt is not possible to rearrange bb and get a greater string.\nTest case 3:\nhegf is the next string greater than hefg.\nTest case 4:\ndhkc is the next string greater than dhck.\nTest case 5:\nhcdk is the next string greater than dkhc.\nSample Input 1\n6\nlmno\ndcba\ndcbb\nabdc\nabcd\nfedcbabcd\nSample Output 1\nlmon\nno answer\nno answer\nacbd\nabdc\nfedcbabdc"
    }
}