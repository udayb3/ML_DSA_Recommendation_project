{
    "link": {
        "0": "https:\/\/www.hackerrank.com\/challenges\/find-point?isFullScreen=true",
        "1": "https:\/\/www.hackerrank.com\/challenges\/maximum-draws?isFullScreen=true",
        "2": "https:\/\/www.hackerrank.com\/challenges\/handshake?isFullScreen=true",
        "3": "https:\/\/www.hackerrank.com\/challenges\/lowest-triangle?isFullScreen=true",
        "4": "https:\/\/www.hackerrank.com\/challenges\/game-with-cells?isFullScreen=true",
        "5": "https:\/\/www.hackerrank.com\/challenges\/leonardo-and-prime?isFullScreen=true",
        "6": "https:\/\/www.hackerrank.com\/challenges\/connecting-towns?isFullScreen=true",
        "7": "https:\/\/www.hackerrank.com\/challenges\/p1-paper-cutting?isFullScreen=true",
        "8": "https:\/\/www.hackerrank.com\/challenges\/summing-the-n-series?isFullScreen=true",
        "9": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-moving-tiles?isFullScreen=true",
        "10": "https:\/\/www.hackerrank.com\/challenges\/best-divisor?isFullScreen=true",
        "11": "https:\/\/www.hackerrank.com\/challenges\/restaurant?isFullScreen=true",
        "12": "https:\/\/www.hackerrank.com\/challenges\/reverse-game?isFullScreen=true",
        "13": "https:\/\/www.hackerrank.com\/challenges\/strange-grid?isFullScreen=true",
        "14": "https:\/\/www.hackerrank.com\/challenges\/diwali-lights?isFullScreen=true",
        "15": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-divisors?isFullScreen=true",
        "16": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-permutations?isFullScreen=true",
        "17": "https:\/\/www.hackerrank.com\/challenges\/even-odd-query?isFullScreen=true",
        "18": "https:\/\/www.hackerrank.com\/challenges\/special-multiple?isFullScreen=true",
        "19": "https:\/\/www.hackerrank.com\/challenges\/matrix-tracing?isFullScreen=true",
        "20": "https:\/\/www.hackerrank.com\/challenges\/die-hard-3?isFullScreen=true",
        "21": "https:\/\/www.hackerrank.com\/challenges\/halloween-party?isFullScreen=true",
        "22": "https:\/\/www.hackerrank.com\/challenges\/filling-jars?isFullScreen=true",
        "23": "https:\/\/www.hackerrank.com\/challenges\/is-fibo?isFullScreen=true",
        "24": "https:\/\/www.hackerrank.com\/challenges\/k-candy-store?isFullScreen=true",
        "25": "https:\/\/www.hackerrank.com\/challenges\/harry-potter-and-the-floating-rocks?isFullScreen=true",
        "26": "https:\/\/www.hackerrank.com\/challenges\/russian-peasant-exponentiation?isFullScreen=true",
        "27": "https:\/\/www.hackerrank.com\/challenges\/bus-station?isFullScreen=true",
        "28": "https:\/\/www.hackerrank.com\/challenges\/most-distant?isFullScreen=true",
        "29": "https:\/\/www.hackerrank.com\/challenges\/jim-and-the-jokes?isFullScreen=true",
        "30": "https:\/\/www.hackerrank.com\/challenges\/find-point?isFullScreen=true",
        "31": "https:\/\/www.hackerrank.com\/challenges\/maximum-draws?isFullScreen=true",
        "32": "https:\/\/www.hackerrank.com\/challenges\/handshake?isFullScreen=true",
        "33": "https:\/\/www.hackerrank.com\/challenges\/lowest-triangle?isFullScreen=true",
        "34": "https:\/\/www.hackerrank.com\/challenges\/game-with-cells?isFullScreen=true",
        "35": "https:\/\/www.hackerrank.com\/challenges\/leonardo-and-prime?isFullScreen=true",
        "36": "https:\/\/www.hackerrank.com\/challenges\/connecting-towns?isFullScreen=true",
        "37": "https:\/\/www.hackerrank.com\/challenges\/p1-paper-cutting?isFullScreen=true",
        "38": "https:\/\/www.hackerrank.com\/challenges\/summing-the-n-series?isFullScreen=true",
        "39": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-moving-tiles?isFullScreen=true",
        "40": "https:\/\/www.hackerrank.com\/challenges\/best-divisor?isFullScreen=true",
        "41": "https:\/\/www.hackerrank.com\/challenges\/restaurant?isFullScreen=true",
        "42": "https:\/\/www.hackerrank.com\/challenges\/reverse-game?isFullScreen=true",
        "43": "https:\/\/www.hackerrank.com\/challenges\/strange-grid?isFullScreen=true",
        "44": "https:\/\/www.hackerrank.com\/challenges\/diwali-lights?isFullScreen=true",
        "45": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-divisors?isFullScreen=true",
        "46": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-permutations?isFullScreen=true",
        "47": "https:\/\/www.hackerrank.com\/challenges\/even-odd-query?isFullScreen=true",
        "48": "https:\/\/www.hackerrank.com\/challenges\/special-multiple?isFullScreen=true",
        "49": "https:\/\/www.hackerrank.com\/challenges\/matrix-tracing?isFullScreen=true",
        "50": "https:\/\/www.hackerrank.com\/challenges\/die-hard-3?isFullScreen=true",
        "51": "https:\/\/www.hackerrank.com\/challenges\/halloween-party?isFullScreen=true",
        "52": "https:\/\/www.hackerrank.com\/challenges\/filling-jars?isFullScreen=true",
        "53": "https:\/\/www.hackerrank.com\/challenges\/is-fibo?isFullScreen=true",
        "54": "https:\/\/www.hackerrank.com\/challenges\/k-candy-store?isFullScreen=true",
        "55": "https:\/\/www.hackerrank.com\/challenges\/harry-potter-and-the-floating-rocks?isFullScreen=true",
        "56": "https:\/\/www.hackerrank.com\/challenges\/russian-peasant-exponentiation?isFullScreen=true",
        "57": "https:\/\/www.hackerrank.com\/challenges\/bus-station?isFullScreen=true",
        "58": "https:\/\/www.hackerrank.com\/challenges\/most-distant?isFullScreen=true",
        "59": "https:\/\/www.hackerrank.com\/challenges\/jim-and-the-jokes?isFullScreen=true",
        "60": "https:\/\/www.hackerrank.com\/challenges\/possible-path?isFullScreen=true",
        "61": "https:\/\/www.hackerrank.com\/challenges\/mutual-recurrences?isFullScreen=true",
        "62": "https:\/\/www.hackerrank.com\/challenges\/constructing-a-number?isFullScreen=true",
        "63": "https:\/\/www.hackerrank.com\/challenges\/closest-number?isFullScreen=true",
        "64": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-gcd?isFullScreen=true",
        "65": "https:\/\/www.hackerrank.com\/challenges\/primitive-problem?isFullScreen=true",
        "66": "https:\/\/www.hackerrank.com\/challenges\/identify-smith-numbers?isFullScreen=true",
        "67": "https:\/\/www.hackerrank.com\/challenges\/eulers-criterion?isFullScreen=true",
        "68": "https:\/\/www.hackerrank.com\/challenges\/twins?isFullScreen=true",
        "69": "https:\/\/www.hackerrank.com\/challenges\/fibonacci-finding-easy?isFullScreen=true",
        "70": "https:\/\/www.hackerrank.com\/challenges\/find-point?isFullScreen=true",
        "71": "https:\/\/www.hackerrank.com\/challenges\/maximum-draws?isFullScreen=true",
        "72": "https:\/\/www.hackerrank.com\/challenges\/handshake?isFullScreen=true",
        "73": "https:\/\/www.hackerrank.com\/challenges\/lowest-triangle?isFullScreen=true",
        "74": "https:\/\/www.hackerrank.com\/challenges\/game-with-cells?isFullScreen=true",
        "75": "https:\/\/www.hackerrank.com\/challenges\/leonardo-and-prime?isFullScreen=true",
        "76": "https:\/\/www.hackerrank.com\/challenges\/connecting-towns?isFullScreen=true",
        "77": "https:\/\/www.hackerrank.com\/challenges\/p1-paper-cutting?isFullScreen=true",
        "78": "https:\/\/www.hackerrank.com\/challenges\/summing-the-n-series?isFullScreen=true",
        "79": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-moving-tiles?isFullScreen=true",
        "80": "https:\/\/www.hackerrank.com\/challenges\/best-divisor?isFullScreen=true",
        "81": "https:\/\/www.hackerrank.com\/challenges\/restaurant?isFullScreen=true",
        "82": "https:\/\/www.hackerrank.com\/challenges\/reverse-game?isFullScreen=true",
        "83": "https:\/\/www.hackerrank.com\/challenges\/strange-grid?isFullScreen=true",
        "84": "https:\/\/www.hackerrank.com\/challenges\/diwali-lights?isFullScreen=true",
        "85": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-divisors?isFullScreen=true",
        "86": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-permutations?isFullScreen=true",
        "87": "https:\/\/www.hackerrank.com\/challenges\/even-odd-query?isFullScreen=true",
        "88": "https:\/\/www.hackerrank.com\/challenges\/special-multiple?isFullScreen=true",
        "89": "https:\/\/www.hackerrank.com\/challenges\/matrix-tracing?isFullScreen=true",
        "90": "https:\/\/www.hackerrank.com\/challenges\/die-hard-3?isFullScreen=true",
        "91": "https:\/\/www.hackerrank.com\/challenges\/halloween-party?isFullScreen=true",
        "92": "https:\/\/www.hackerrank.com\/challenges\/filling-jars?isFullScreen=true",
        "93": "https:\/\/www.hackerrank.com\/challenges\/is-fibo?isFullScreen=true",
        "94": "https:\/\/www.hackerrank.com\/challenges\/k-candy-store?isFullScreen=true",
        "95": "https:\/\/www.hackerrank.com\/challenges\/harry-potter-and-the-floating-rocks?isFullScreen=true",
        "96": "https:\/\/www.hackerrank.com\/challenges\/russian-peasant-exponentiation?isFullScreen=true",
        "97": "https:\/\/www.hackerrank.com\/challenges\/bus-station?isFullScreen=true",
        "98": "https:\/\/www.hackerrank.com\/challenges\/most-distant?isFullScreen=true",
        "99": "https:\/\/www.hackerrank.com\/challenges\/jim-and-the-jokes?isFullScreen=true",
        "100": "https:\/\/www.hackerrank.com\/challenges\/possible-path?isFullScreen=true",
        "101": "https:\/\/www.hackerrank.com\/challenges\/mutual-recurrences?isFullScreen=true",
        "102": "https:\/\/www.hackerrank.com\/challenges\/constructing-a-number?isFullScreen=true",
        "103": "https:\/\/www.hackerrank.com\/challenges\/closest-number?isFullScreen=true",
        "104": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-gcd?isFullScreen=true",
        "105": "https:\/\/www.hackerrank.com\/challenges\/primitive-problem?isFullScreen=true",
        "106": "https:\/\/www.hackerrank.com\/challenges\/identify-smith-numbers?isFullScreen=true",
        "107": "https:\/\/www.hackerrank.com\/challenges\/eulers-criterion?isFullScreen=true",
        "108": "https:\/\/www.hackerrank.com\/challenges\/twins?isFullScreen=true",
        "109": "https:\/\/www.hackerrank.com\/challenges\/fibonacci-finding-easy?isFullScreen=true",
        "110": "https:\/\/www.hackerrank.com\/challenges\/littlepandapower?isFullScreen=true",
        "111": "https:\/\/www.hackerrank.com\/challenges\/mehta-and-his-laziness?isFullScreen=true",
        "112": "https:\/\/www.hackerrank.com\/challenges\/minimal-distance-to-pi?isFullScreen=true",
        "113": "https:\/\/www.hackerrank.com\/challenges\/help-mike?isFullScreen=true",
        "114": "https:\/\/www.hackerrank.com\/challenges\/dance-class?isFullScreen=true",
        "115": "https:\/\/www.hackerrank.com\/challenges\/the-chosen-one?isFullScreen=true",
        "116": "https:\/\/www.hackerrank.com\/challenges\/power-of-large-numbers?isFullScreen=true",
        "117": "https:\/\/www.hackerrank.com\/challenges\/salary-blues?isFullScreen=true",
        "118": "https:\/\/www.hackerrank.com\/challenges\/akhil-and-gf?isFullScreen=true",
        "119": "https:\/\/www.hackerrank.com\/challenges\/little-chammys-huge-donation?isFullScreen=true",
        "120": "https:\/\/www.hackerrank.com\/challenges\/find-point?isFullScreen=true",
        "121": "https:\/\/www.hackerrank.com\/challenges\/maximum-draws?isFullScreen=true",
        "122": "https:\/\/www.hackerrank.com\/challenges\/handshake?isFullScreen=true",
        "123": "https:\/\/www.hackerrank.com\/challenges\/lowest-triangle?isFullScreen=true",
        "124": "https:\/\/www.hackerrank.com\/challenges\/game-with-cells?isFullScreen=true",
        "125": "https:\/\/www.hackerrank.com\/challenges\/leonardo-and-prime?isFullScreen=true",
        "126": "https:\/\/www.hackerrank.com\/challenges\/connecting-towns?isFullScreen=true",
        "127": "https:\/\/www.hackerrank.com\/challenges\/p1-paper-cutting?isFullScreen=true",
        "128": "https:\/\/www.hackerrank.com\/challenges\/summing-the-n-series?isFullScreen=true",
        "129": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-moving-tiles?isFullScreen=true",
        "130": "https:\/\/www.hackerrank.com\/challenges\/best-divisor?isFullScreen=true",
        "131": "https:\/\/www.hackerrank.com\/challenges\/restaurant?isFullScreen=true",
        "132": "https:\/\/www.hackerrank.com\/challenges\/reverse-game?isFullScreen=true",
        "133": "https:\/\/www.hackerrank.com\/challenges\/strange-grid?isFullScreen=true",
        "134": "https:\/\/www.hackerrank.com\/challenges\/diwali-lights?isFullScreen=true",
        "135": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-divisors?isFullScreen=true",
        "136": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-permutations?isFullScreen=true",
        "137": "https:\/\/www.hackerrank.com\/challenges\/even-odd-query?isFullScreen=true",
        "138": "https:\/\/www.hackerrank.com\/challenges\/special-multiple?isFullScreen=true",
        "139": "https:\/\/www.hackerrank.com\/challenges\/matrix-tracing?isFullScreen=true",
        "140": "https:\/\/www.hackerrank.com\/challenges\/die-hard-3?isFullScreen=true",
        "141": "https:\/\/www.hackerrank.com\/challenges\/halloween-party?isFullScreen=true",
        "142": "https:\/\/www.hackerrank.com\/challenges\/filling-jars?isFullScreen=true",
        "143": "https:\/\/www.hackerrank.com\/challenges\/is-fibo?isFullScreen=true",
        "144": "https:\/\/www.hackerrank.com\/challenges\/k-candy-store?isFullScreen=true",
        "145": "https:\/\/www.hackerrank.com\/challenges\/harry-potter-and-the-floating-rocks?isFullScreen=true",
        "146": "https:\/\/www.hackerrank.com\/challenges\/russian-peasant-exponentiation?isFullScreen=true",
        "147": "https:\/\/www.hackerrank.com\/challenges\/bus-station?isFullScreen=true",
        "148": "https:\/\/www.hackerrank.com\/challenges\/most-distant?isFullScreen=true",
        "149": "https:\/\/www.hackerrank.com\/challenges\/jim-and-the-jokes?isFullScreen=true",
        "150": "https:\/\/www.hackerrank.com\/challenges\/possible-path?isFullScreen=true",
        "151": "https:\/\/www.hackerrank.com\/challenges\/mutual-recurrences?isFullScreen=true",
        "152": "https:\/\/www.hackerrank.com\/challenges\/constructing-a-number?isFullScreen=true",
        "153": "https:\/\/www.hackerrank.com\/challenges\/closest-number?isFullScreen=true",
        "154": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-gcd?isFullScreen=true",
        "155": "https:\/\/www.hackerrank.com\/challenges\/primitive-problem?isFullScreen=true",
        "156": "https:\/\/www.hackerrank.com\/challenges\/identify-smith-numbers?isFullScreen=true",
        "157": "https:\/\/www.hackerrank.com\/challenges\/eulers-criterion?isFullScreen=true",
        "158": "https:\/\/www.hackerrank.com\/challenges\/twins?isFullScreen=true",
        "159": "https:\/\/www.hackerrank.com\/challenges\/fibonacci-finding-easy?isFullScreen=true",
        "160": "https:\/\/www.hackerrank.com\/challenges\/littlepandapower?isFullScreen=true",
        "161": "https:\/\/www.hackerrank.com\/challenges\/mehta-and-his-laziness?isFullScreen=true",
        "162": "https:\/\/www.hackerrank.com\/challenges\/minimal-distance-to-pi?isFullScreen=true",
        "163": "https:\/\/www.hackerrank.com\/challenges\/help-mike?isFullScreen=true",
        "164": "https:\/\/www.hackerrank.com\/challenges\/dance-class?isFullScreen=true",
        "165": "https:\/\/www.hackerrank.com\/challenges\/the-chosen-one?isFullScreen=true",
        "166": "https:\/\/www.hackerrank.com\/challenges\/power-of-large-numbers?isFullScreen=true",
        "167": "https:\/\/www.hackerrank.com\/challenges\/salary-blues?isFullScreen=true",
        "168": "https:\/\/www.hackerrank.com\/challenges\/akhil-and-gf?isFullScreen=true",
        "169": "https:\/\/www.hackerrank.com\/challenges\/little-chammys-huge-donation?isFullScreen=true",
        "170": "https:\/\/www.hackerrank.com\/challenges\/manasa-and-factorials?isFullScreen=true",
        "171": "https:\/\/www.hackerrank.com\/challenges\/number-of-subsets?isFullScreen=true",
        "172": "https:\/\/www.hackerrank.com\/challenges\/breaking-sticks?isFullScreen=true",
        "173": "https:\/\/www.hackerrank.com\/challenges\/cheese-and-random-toppings?isFullScreen=true",
        "174": "https:\/\/www.hackerrank.com\/challenges\/easy-gcd-1?isFullScreen=true",
        "175": "https:\/\/www.hackerrank.com\/challenges\/pairs-again?isFullScreen=true",
        "176": "https:\/\/www.hackerrank.com\/challenges\/manasa-loves-maths?isFullScreen=true",
        "177": "https:\/\/www.hackerrank.com\/challenges\/largest-coprime-submatrix?isFullScreen=true",
        "178": "https:\/\/www.hackerrank.com\/challenges\/john-and-gcd-list?isFullScreen=true",
        "179": "https:\/\/www.hackerrank.com\/challenges\/divisor-exploration-2?isFullScreen=true",
        "180": "https:\/\/www.hackerrank.com\/challenges\/find-point?isFullScreen=true",
        "181": "https:\/\/www.hackerrank.com\/challenges\/maximum-draws?isFullScreen=true",
        "182": "https:\/\/www.hackerrank.com\/challenges\/handshake?isFullScreen=true",
        "183": "https:\/\/www.hackerrank.com\/challenges\/lowest-triangle?isFullScreen=true",
        "184": "https:\/\/www.hackerrank.com\/challenges\/game-with-cells?isFullScreen=true",
        "185": "https:\/\/www.hackerrank.com\/challenges\/leonardo-and-prime?isFullScreen=true",
        "186": "https:\/\/www.hackerrank.com\/challenges\/connecting-towns?isFullScreen=true",
        "187": "https:\/\/www.hackerrank.com\/challenges\/p1-paper-cutting?isFullScreen=true",
        "188": "https:\/\/www.hackerrank.com\/challenges\/summing-the-n-series?isFullScreen=true",
        "189": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-moving-tiles?isFullScreen=true",
        "190": "https:\/\/www.hackerrank.com\/challenges\/best-divisor?isFullScreen=true",
        "191": "https:\/\/www.hackerrank.com\/challenges\/restaurant?isFullScreen=true",
        "192": "https:\/\/www.hackerrank.com\/challenges\/reverse-game?isFullScreen=true",
        "193": "https:\/\/www.hackerrank.com\/challenges\/strange-grid?isFullScreen=true",
        "194": "https:\/\/www.hackerrank.com\/challenges\/diwali-lights?isFullScreen=true",
        "195": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-divisors?isFullScreen=true",
        "196": "https:\/\/www.hackerrank.com\/challenges\/sherlock-and-permutations?isFullScreen=true",
        "197": "https:\/\/www.hackerrank.com\/challenges\/even-odd-query?isFullScreen=true",
        "198": "https:\/\/www.hackerrank.com\/challenges\/special-multiple?isFullScreen=true",
        "199": "https:\/\/www.hackerrank.com\/challenges\/matrix-tracing?isFullScreen=true"
    },
    "diff": {
        "0": "Easy",
        "1": "Easy",
        "2": "Easy",
        "3": "Easy",
        "4": "Easy",
        "5": "Easy",
        "6": "Easy",
        "7": "Easy",
        "8": "Medium",
        "9": "Easy",
        "10": "Easy",
        "11": "Easy",
        "12": "Easy",
        "13": "Easy",
        "14": "Medium",
        "15": "Easy",
        "16": "Hard",
        "17": "Hard",
        "18": "Medium",
        "19": "Hard",
        "20": "Medium",
        "21": "Easy",
        "22": "Easy",
        "23": "Medium",
        "24": "Medium",
        "25": "Easy",
        "26": "Easy",
        "27": "Medium",
        "28": "Easy",
        "29": "Medium",
        "30": "Easy",
        "31": "Easy",
        "32": "Easy",
        "33": "Easy",
        "34": "Easy",
        "35": "Easy",
        "36": "Easy",
        "37": "Easy",
        "38": "Medium",
        "39": "Easy",
        "40": "Easy",
        "41": "Easy",
        "42": "Easy",
        "43": "Easy",
        "44": "Medium",
        "45": "Easy",
        "46": "Hard",
        "47": "Hard",
        "48": "Medium",
        "49": "Hard",
        "50": "Medium",
        "51": "Easy",
        "52": "Easy",
        "53": "Medium",
        "54": "Medium",
        "55": "Easy",
        "56": "Easy",
        "57": "Medium",
        "58": "Easy",
        "59": "Medium",
        "60": "Easy",
        "61": "Medium",
        "62": "Easy",
        "63": "Medium",
        "64": "Easy",
        "65": "Easy",
        "66": "Easy",
        "67": "Easy",
        "68": "Medium",
        "69": "Easy",
        "70": "Easy",
        "71": "Easy",
        "72": "Easy",
        "73": "Easy",
        "74": "Easy",
        "75": "Easy",
        "76": "Easy",
        "77": "Easy",
        "78": "Medium",
        "79": "Easy",
        "80": "Easy",
        "81": "Easy",
        "82": "Easy",
        "83": "Easy",
        "84": "Medium",
        "85": "Easy",
        "86": "Hard",
        "87": "Hard",
        "88": "Medium",
        "89": "Hard",
        "90": "Medium",
        "91": "Easy",
        "92": "Easy",
        "93": "Medium",
        "94": "Medium",
        "95": "Easy",
        "96": "Easy",
        "97": "Medium",
        "98": "Easy",
        "99": "Medium",
        "100": "Easy",
        "101": "Medium",
        "102": "Easy",
        "103": "Medium",
        "104": "Easy",
        "105": "Easy",
        "106": "Easy",
        "107": "Easy",
        "108": "Medium",
        "109": "Easy",
        "110": "Hard",
        "111": "Hard",
        "112": "Hard",
        "113": "Hard",
        "114": "Hard",
        "115": "Medium",
        "116": "Medium",
        "117": "Medium",
        "118": "Hard",
        "119": "Hard",
        "120": "Easy",
        "121": "Easy",
        "122": "Easy",
        "123": "Easy",
        "124": "Easy",
        "125": "Easy",
        "126": "Easy",
        "127": "Easy",
        "128": "Medium",
        "129": "Easy",
        "130": "Easy",
        "131": "Easy",
        "132": "Easy",
        "133": "Easy",
        "134": "Medium",
        "135": "Easy",
        "136": "Hard",
        "137": "Hard",
        "138": "Medium",
        "139": "Hard",
        "140": "Medium",
        "141": "Easy",
        "142": "Easy",
        "143": "Medium",
        "144": "Medium",
        "145": "Easy",
        "146": "Easy",
        "147": "Medium",
        "148": "Easy",
        "149": "Medium",
        "150": "Easy",
        "151": "Medium",
        "152": "Easy",
        "153": "Medium",
        "154": "Easy",
        "155": "Easy",
        "156": "Easy",
        "157": "Easy",
        "158": "Medium",
        "159": "Easy",
        "160": "Hard",
        "161": "Hard",
        "162": "Hard",
        "163": "Hard",
        "164": "Hard",
        "165": "Medium",
        "166": "Medium",
        "167": "Medium",
        "168": "Hard",
        "169": "Hard",
        "170": "Hard",
        "171": "Medium",
        "172": "Medium",
        "173": "Easy",
        "174": "Medium",
        "175": "Hard",
        "176": "Medium",
        "177": "Hard",
        "178": "Easy",
        "179": "Hard",
        "180": "Easy",
        "181": "Easy",
        "182": "Easy",
        "183": "Easy",
        "184": "Easy",
        "185": "Easy",
        "186": "Easy",
        "187": "Easy",
        "188": "Medium",
        "189": "Easy",
        "190": "Easy",
        "191": "Easy",
        "192": "Easy",
        "193": "Easy",
        "194": "Medium",
        "195": "Easy",
        "196": "Hard",
        "197": "Hard",
        "198": "Medium",
        "199": "Hard"
    },
    "score": {
        "0": "Max Score: 5",
        "1": "Max Score: 5",
        "2": "Max Score: 10",
        "3": "Max Score: 10",
        "4": "Max Score: 10",
        "5": "Max Score: 10",
        "6": "Max Score: 10",
        "7": "Max Score: 15",
        "8": "Max Score: 20",
        "9": "Max Score: 20",
        "10": "Max Score: 20",
        "11": "Max Score: 30",
        "12": "Max Score: 30",
        "13": "Max Score: 20",
        "14": "Max Score: 20",
        "15": "Max Score: 30",
        "16": "Max Score: 20",
        "17": "Max Score: 30",
        "18": "Max Score: 30",
        "19": "Max Score: 30",
        "20": "Max Score: 30",
        "21": "Max Score: 20",
        "22": "Max Score: 20",
        "23": "Max Score: 20",
        "24": "Max Score: 30",
        "25": "Max Score: 30",
        "26": "Max Score: 20",
        "27": "Max Score: 30",
        "28": "Max Score: 30",
        "29": "Max Score: 30",
        "30": "Max Score: 5",
        "31": "Max Score: 5",
        "32": "Max Score: 10",
        "33": "Max Score: 10",
        "34": "Max Score: 10",
        "35": "Max Score: 10",
        "36": "Max Score: 10",
        "37": "Max Score: 15",
        "38": "Max Score: 20",
        "39": "Max Score: 20",
        "40": "Max Score: 20",
        "41": "Max Score: 30",
        "42": "Max Score: 30",
        "43": "Max Score: 20",
        "44": "Max Score: 20",
        "45": "Max Score: 30",
        "46": "Max Score: 20",
        "47": "Max Score: 30",
        "48": "Max Score: 30",
        "49": "Max Score: 30",
        "50": "Max Score: 30",
        "51": "Max Score: 20",
        "52": "Max Score: 20",
        "53": "Max Score: 20",
        "54": "Max Score: 30",
        "55": "Max Score: 30",
        "56": "Max Score: 20",
        "57": "Max Score: 30",
        "58": "Max Score: 30",
        "59": "Max Score: 30",
        "60": "Max Score: 20",
        "61": "Max Score: 40",
        "62": "Max Score: 15",
        "63": "Max Score: 30",
        "64": "Max Score: 20",
        "65": "Max Score: 20",
        "66": "Max Score: 20",
        "67": "Max Score: 30",
        "68": "Max Score: 30",
        "69": "Max Score: 30",
        "70": "Max Score: 5",
        "71": "Max Score: 5",
        "72": "Max Score: 10",
        "73": "Max Score: 10",
        "74": "Max Score: 10",
        "75": "Max Score: 10",
        "76": "Max Score: 10",
        "77": "Max Score: 15",
        "78": "Max Score: 20",
        "79": "Max Score: 20",
        "80": "Max Score: 20",
        "81": "Max Score: 30",
        "82": "Max Score: 30",
        "83": "Max Score: 20",
        "84": "Max Score: 20",
        "85": "Max Score: 30",
        "86": "Max Score: 20",
        "87": "Max Score: 30",
        "88": "Max Score: 30",
        "89": "Max Score: 30",
        "90": "Max Score: 30",
        "91": "Max Score: 20",
        "92": "Max Score: 20",
        "93": "Max Score: 20",
        "94": "Max Score: 30",
        "95": "Max Score: 30",
        "96": "Max Score: 20",
        "97": "Max Score: 30",
        "98": "Max Score: 30",
        "99": "Max Score: 30",
        "100": "Max Score: 20",
        "101": "Max Score: 40",
        "102": "Max Score: 15",
        "103": "Max Score: 30",
        "104": "Max Score: 20",
        "105": "Max Score: 20",
        "106": "Max Score: 20",
        "107": "Max Score: 30",
        "108": "Max Score: 30",
        "109": "Max Score: 30",
        "110": "Max Score: 30",
        "111": "Max Score: 30",
        "112": "Max Score: 75",
        "113": "Max Score: 40",
        "114": "Max Score: 40",
        "115": "Max Score: 40",
        "116": "Max Score: 40",
        "117": "Max Score: 40",
        "118": "Max Score: 40",
        "119": "Max Score: 40",
        "120": "Max Score: 5",
        "121": "Max Score: 5",
        "122": "Max Score: 10",
        "123": "Max Score: 10",
        "124": "Max Score: 10",
        "125": "Max Score: 10",
        "126": "Max Score: 10",
        "127": "Max Score: 15",
        "128": "Max Score: 20",
        "129": "Max Score: 20",
        "130": "Max Score: 20",
        "131": "Max Score: 30",
        "132": "Max Score: 30",
        "133": "Max Score: 20",
        "134": "Max Score: 20",
        "135": "Max Score: 30",
        "136": "Max Score: 20",
        "137": "Max Score: 30",
        "138": "Max Score: 30",
        "139": "Max Score: 30",
        "140": "Max Score: 30",
        "141": "Max Score: 20",
        "142": "Max Score: 20",
        "143": "Max Score: 20",
        "144": "Max Score: 30",
        "145": "Max Score: 30",
        "146": "Max Score: 20",
        "147": "Max Score: 30",
        "148": "Max Score: 30",
        "149": "Max Score: 30",
        "150": "Max Score: 20",
        "151": "Max Score: 40",
        "152": "Max Score: 15",
        "153": "Max Score: 30",
        "154": "Max Score: 20",
        "155": "Max Score: 20",
        "156": "Max Score: 20",
        "157": "Max Score: 30",
        "158": "Max Score: 30",
        "159": "Max Score: 30",
        "160": "Max Score: 30",
        "161": "Max Score: 30",
        "162": "Max Score: 75",
        "163": "Max Score: 40",
        "164": "Max Score: 40",
        "165": "Max Score: 40",
        "166": "Max Score: 40",
        "167": "Max Score: 40",
        "168": "Max Score: 40",
        "169": "Max Score: 40",
        "170": "Max Score: 40",
        "171": "Max Score: 40",
        "172": "Max Score: 40",
        "173": "Max Score: 30",
        "174": "Max Score: 30",
        "175": "Max Score: 60",
        "176": "Max Score: 50",
        "177": "Max Score: 50",
        "178": "Max Score: 50",
        "179": "Max Score: 50",
        "180": "Max Score: 5",
        "181": "Max Score: 5",
        "182": "Max Score: 10",
        "183": "Max Score: 10",
        "184": "Max Score: 10",
        "185": "Max Score: 10",
        "186": "Max Score: 10",
        "187": "Max Score: 15",
        "188": "Max Score: 20",
        "189": "Max Score: 20",
        "190": "Max Score: 20",
        "191": "Max Score: 30",
        "192": "Max Score: 30",
        "193": "Max Score: 20",
        "194": "Max Score: 20",
        "195": "Max Score: 30",
        "196": "Max Score: 20",
        "197": "Max Score: 30",
        "198": "Max Score: 30",
        "199": "Max Score: 30"
    },
    "success rate": {
        "0": "Success Rate: 88.40%",
        "1": "Success Rate: 95.74%",
        "2": "Success Rate: 93.90%",
        "3": "Success Rate: 92.26%",
        "4": "Success Rate: 84.87%",
        "5": "Success Rate: 77.23%",
        "6": "Success Rate: 87.51%",
        "7": "Success Rate: 87.92%",
        "8": "Success Rate: 75.14%",
        "9": "Success Rate: 76.50%",
        "10": "Success Rate: 84.98%",
        "11": "Success Rate: 88.54%",
        "12": "Success Rate: 85.91%",
        "13": "Success Rate: 90.40%",
        "14": "Success Rate: 79.75%",
        "15": "Success Rate: 63.90%",
        "16": "Success Rate: 61.89%",
        "17": "Success Rate: 61.25%",
        "18": "Success Rate: 81.04%",
        "19": "Success Rate: 49.44%",
        "20": "Success Rate: 75.49%",
        "21": "Success Rate: 93.43%",
        "22": "Success Rate: 83.10%",
        "23": "Success Rate: 78.80%",
        "24": "Success Rate: 71.87%",
        "25": "Success Rate: 75.94%",
        "26": "Success Rate: 75.36%",
        "27": "Success Rate: 66.11%",
        "28": "Success Rate: 74.84%",
        "29": "Success Rate: 77.68%",
        "30": "Success Rate: 88.40%",
        "31": "Success Rate: 95.74%",
        "32": "Success Rate: 93.90%",
        "33": "Success Rate: 92.26%",
        "34": "Success Rate: 84.87%",
        "35": "Success Rate: 77.23%",
        "36": "Success Rate: 87.51%",
        "37": "Success Rate: 87.92%",
        "38": "Success Rate: 75.14%",
        "39": "Success Rate: 76.50%",
        "40": "Success Rate: 84.98%",
        "41": "Success Rate: 88.54%",
        "42": "Success Rate: 85.91%",
        "43": "Success Rate: 90.40%",
        "44": "Success Rate: 79.75%",
        "45": "Success Rate: 63.90%",
        "46": "Success Rate: 61.89%",
        "47": "Success Rate: 61.25%",
        "48": "Success Rate: 81.04%",
        "49": "Success Rate: 49.44%",
        "50": "Success Rate: 75.49%",
        "51": "Success Rate: 93.43%",
        "52": "Success Rate: 83.10%",
        "53": "Success Rate: 78.80%",
        "54": "Success Rate: 71.87%",
        "55": "Success Rate: 75.94%",
        "56": "Success Rate: 75.36%",
        "57": "Success Rate: 66.11%",
        "58": "Success Rate: 74.84%",
        "59": "Success Rate: 77.68%",
        "60": "Success Rate: 66.20%",
        "61": "Success Rate: 70.50%",
        "62": "Success Rate: 92.12%",
        "63": "Success Rate: 72.45%",
        "64": "Success Rate: 78.11%",
        "65": "Success Rate: 46.96%",
        "66": "Success Rate: 86.08%",
        "67": "Success Rate: 56.55%",
        "68": "Success Rate: 43.48%",
        "69": "Success Rate: 36.22%",
        "70": "Success Rate: 88.40%",
        "71": "Success Rate: 95.74%",
        "72": "Success Rate: 93.90%",
        "73": "Success Rate: 92.26%",
        "74": "Success Rate: 84.87%",
        "75": "Success Rate: 77.23%",
        "76": "Success Rate: 87.51%",
        "77": "Success Rate: 87.92%",
        "78": "Success Rate: 75.14%",
        "79": "Success Rate: 76.50%",
        "80": "Success Rate: 84.98%",
        "81": "Success Rate: 88.54%",
        "82": "Success Rate: 85.91%",
        "83": "Success Rate: 90.40%",
        "84": "Success Rate: 79.75%",
        "85": "Success Rate: 63.90%",
        "86": "Success Rate: 61.89%",
        "87": "Success Rate: 61.25%",
        "88": "Success Rate: 81.04%",
        "89": "Success Rate: 49.44%",
        "90": "Success Rate: 75.49%",
        "91": "Success Rate: 93.43%",
        "92": "Success Rate: 83.10%",
        "93": "Success Rate: 78.80%",
        "94": "Success Rate: 71.87%",
        "95": "Success Rate: 75.94%",
        "96": "Success Rate: 75.36%",
        "97": "Success Rate: 66.11%",
        "98": "Success Rate: 74.84%",
        "99": "Success Rate: 77.68%",
        "100": "Success Rate: 66.20%",
        "101": "Success Rate: 70.50%",
        "102": "Success Rate: 92.12%",
        "103": "Success Rate: 72.45%",
        "104": "Success Rate: 78.11%",
        "105": "Success Rate: 46.96%",
        "106": "Success Rate: 86.08%",
        "107": "Success Rate: 56.55%",
        "108": "Success Rate: 43.48%",
        "109": "Success Rate: 36.22%",
        "110": "Success Rate: 61.19%",
        "111": "Success Rate: 65.98%",
        "112": "Success Rate: 27.14%",
        "113": "Success Rate: 60.22%",
        "114": "Success Rate: 64.41%",
        "115": "Success Rate: 76.61%",
        "116": "Success Rate: 80.15%",
        "117": "Success Rate: 69.32%",
        "118": "Success Rate: 49.33%",
        "119": "Success Rate: 72.58%",
        "120": "Success Rate: 88.40%",
        "121": "Success Rate: 95.74%",
        "122": "Success Rate: 93.90%",
        "123": "Success Rate: 92.26%",
        "124": "Success Rate: 84.87%",
        "125": "Success Rate: 77.23%",
        "126": "Success Rate: 87.51%",
        "127": "Success Rate: 87.92%",
        "128": "Success Rate: 75.14%",
        "129": "Success Rate: 76.50%",
        "130": "Success Rate: 84.98%",
        "131": "Success Rate: 88.54%",
        "132": "Success Rate: 85.91%",
        "133": "Success Rate: 90.40%",
        "134": "Success Rate: 79.75%",
        "135": "Success Rate: 63.90%",
        "136": "Success Rate: 61.89%",
        "137": "Success Rate: 61.25%",
        "138": "Success Rate: 81.04%",
        "139": "Success Rate: 49.44%",
        "140": "Success Rate: 75.49%",
        "141": "Success Rate: 93.43%",
        "142": "Success Rate: 83.10%",
        "143": "Success Rate: 78.80%",
        "144": "Success Rate: 71.87%",
        "145": "Success Rate: 75.94%",
        "146": "Success Rate: 75.36%",
        "147": "Success Rate: 66.11%",
        "148": "Success Rate: 74.84%",
        "149": "Success Rate: 77.68%",
        "150": "Success Rate: 66.20%",
        "151": "Success Rate: 70.50%",
        "152": "Success Rate: 92.12%",
        "153": "Success Rate: 72.45%",
        "154": "Success Rate: 78.11%",
        "155": "Success Rate: 46.96%",
        "156": "Success Rate: 86.08%",
        "157": "Success Rate: 56.55%",
        "158": "Success Rate: 43.48%",
        "159": "Success Rate: 36.22%",
        "160": "Success Rate: 61.19%",
        "161": "Success Rate: 65.98%",
        "162": "Success Rate: 27.14%",
        "163": "Success Rate: 60.22%",
        "164": "Success Rate: 64.41%",
        "165": "Success Rate: 76.61%",
        "166": "Success Rate: 80.15%",
        "167": "Success Rate: 69.32%",
        "168": "Success Rate: 49.33%",
        "169": "Success Rate: 72.58%",
        "170": "Success Rate: 56.54%",
        "171": "Success Rate: 68.99%",
        "172": "Success Rate: 73.08%",
        "173": "Success Rate: 53.81%",
        "174": "Success Rate: 66.41%",
        "175": "Success Rate: 56.95%",
        "176": "Success Rate: 72.69%",
        "177": "Success Rate: 80.63%",
        "178": "Success Rate: 94.00%",
        "179": "Success Rate: 58.67%",
        "180": "Success Rate: 88.40%",
        "181": "Success Rate: 95.74%",
        "182": "Success Rate: 93.90%",
        "183": "Success Rate: 92.26%",
        "184": "Success Rate: 84.87%",
        "185": "Success Rate: 77.23%",
        "186": "Success Rate: 87.51%",
        "187": "Success Rate: 87.92%",
        "188": "Success Rate: 75.14%",
        "189": "Success Rate: 76.50%",
        "190": "Success Rate: 84.98%",
        "191": "Success Rate: 88.54%",
        "192": "Success Rate: 85.91%",
        "193": "Success Rate: 90.40%",
        "194": "Success Rate: 79.75%",
        "195": "Success Rate: 63.90%",
        "196": "Success Rate: 61.89%",
        "197": "Success Rate: 61.25%",
        "198": "Success Rate: 81.04%",
        "199": "Success Rate: 49.44%"
    },
    "text": {
        "0": "Consider two points, and . We consider the inversion or point reflection, , of point across point to be a rotation of point around .\nGiven sets of points and , find for each pair of points and print two space-separated integers denoting the respective values of and on a new line.\nFunction Description\nComplete the findPoint function in the editor below.\nfindPoint has the following parameters:\nint px, py, qx, qy: x and y coordinates for points and\nReturns\nint[2]: x and y coordinates of the reflected point\nInput Format\nThe first line contains an integer, , denoting the number of sets of points.\nEach of the subsequent lines contains four space-separated integers that describe the respective values of , , , and defining points and .\nConstraints\nSample Input\n2\n0 0 1 1\n1 1 2 2\nSample Output\n2 2\n3 3\nExplanation\nThe graphs below depict points , , and for the points given as Sample Input:",
        "1": "A person is getting ready to leave and needs a pair of matching socks. If there are colors of socks in the drawer, how many socks need to be removed to be certain of having a matching pair?\nExample\nThere are colors of socks in the drawer. If they remove socks, they may not match. The minimum number to insure success is .\nFunction Description\nComplete the maximumDraws function in the editor below.\nmaximumDraws has the following parameter:\nint n: the number of colors of socks\nReturns\nint: the minimum number of socks to remove to guarantee a matching pair.\nInput Format\nThe first line contains the number of test cases, .\nEach of the following lines contains an integer .\nConstraints\n\nSample Input\n2\n1\n2\nSample Output\n2\n3\nExplanation\nCase 1 : Only 1 color of sock is in the drawer. Any will match.\nCase 2 : 2 colors of socks are in the drawer. The first two removed may not match. At least socks need to be removed to guarantee success.",
        "2": "At the annual meeting of Board of Directors of Acme Inc. If everyone attending shakes hands exactly one time with every other attendee, how many handshakes are there?\nExample\nThere are attendees, , and . shakes hands with and , and shakes hands with . Now they have all shaken hands after handshakes.\nFunction Description\nComplete the handshakes function in the editor below.\nhandshakes has the following parameter:\nint n: the number of attendees\nReturns\nint: the number of handshakes\nInput Format\nThe first line contains the number of test cases .\nEach of the following lines contains an integer, .\nConstraints\n\nSample Input\n2\n1\n2\nSample Output\n0\n1\nExplanation\nCase 1 : The lonely board member shakes no hands, hence 0.\nCase 2 : There are 2 board members, so 1 handshake takes place.",
        "3": "Given integers and , find the smallest integer , such that there exists a triangle of height , base , having an area of at least .\nExample\n\nThe minimum height is . One example is a triangle formed at points (0, 0), (4, 0), (2, 3).\nFunction Description\nComplete the lowestTriangle function in the editor below.\nlowestTriangle has the following parameters:\nint b: the base of the triangle\nint a: the minimum area of the triangle\nReturns\nint: the minimum integer height to form a triangle with an area of at least\nInput Format\nThere are two space-separated integers and , on a single line.\nConstraints\nSample Input 0\n2 2\nSample Output 0\n2\nExplanation 0\nThe task is to find the smallest integer height of the triangle with base and area at least . It turns out, that there are triangles with height , base and area , for example a triangle with corners in the following points: :\nIt can be proved that there is no triangle with integer height smaller than , base and area at least .\nSample Input 1\n17 100\nSample Output 1\n12\nExplanation 1\nThe task is to find the smallest integer height of the triangle with base and area at least . It turns out, that there are triangles with height , base and area , for example a triangle with corners in the following points: .\nIt can be proved that there is no triangle with integer height smaller than , base and area at least .",
        "4": "Luke is daydreaming in Math class. He has a sheet of graph paper with rows and columns, and he imagines that there is an army base in each cell for a total of bases. He wants to drop supplies at strategic points on the sheet, marking each drop point with a red dot. If a base contains at least one package inside or on top of its border fence, then it's considered to be supplied. For example:\nGiven and , what's the minimum number of packages that Luke must drop to supply all of his bases?\nExample\n\nPackages can be dropped at the corner between cells (0, 0), (0, 1), (1, 0) and (1, 1) to supply bases. Another package can be dropped at a border between (0, 2) and (1, 2). This supplies all bases using packages.\nFunction Description\nComplete the gameWithCells function in the editor below.\ngameWithCells has the following parameters:\nint n: the number of rows in the game\nint m: the number of columns in the game\nReturns\nint: the minimum number of packages required\nInput Format\nTwo space-separated integers describing the respective values of and .\nConstraints\nSample Input 0\n2 2\nSample Output 0\n1\nExplanation 0\nLuke has four bases in a grid. If he drops a single package where the walls of all four bases intersect, then those four cells can access the package:\nBecause he managed to supply all four bases with a single supply drop, we print as our answer.",
        "5": "Leonardo loves primes and created queries where each query takes the form of an integer, . For each , count the maximum number of distinct prime factors of any number in the inclusive range .\nNote: Recall that a prime number is only divisible by and itself, and is not a prime number.\nExample\nThe maximum number of distinct prime factors for values less than or equal to is . One value with distinct prime factors is . Another is .\nFunction Description\nComplete the primeCount function in the editor below.\nprimeCount has the following parameters:\nint n: the inclusive limit of the range to check\nReturns\nint: the maximum number of distinct prime factors of any number in the inclusive range .\nInput Format\nThe first line contains an integer, , the number of queries.\nEach of the next lines contains a single integer, .\nConstraints\nSample Input\n6\n1\n2\n3\n500\n5000\n10000000000\nSample Output\n0\n1\n1\n4\n5\n10\nExplanation\nis not prime and its only factor is itself.\nhas prime factor, .\nThe number has prime factor, , has and has prime factors.\nThe product of the first four primes is . While higher value primes may be a factor of some numbers, there will never be more than distinct prime factors for a number in this range.",
        "6": "Cities on a map are connected by a number of roads. The number of roads between each city is in an array and city is the starting location. The number of roads from city to city is the first value in the array, from city to city is the second, and so on.\nHow many paths are there from city to the last city in the list, modulo ?\nExample\n\nThere are roads to city , roads to city and roads to city . The total number of roads is .\nNote\nPass all the towns Ti for i=1 to n-1 in numerical order to reach Tn.\nFunction Description\nComplete the connectingTowns function in the editor below.\nconnectingTowns has the following parameters:\nint n: the number of towns\nint routes[n-1]: the number of routes between towns\nReturns\nint: the total number of routes, modulo 1234567.\nInput Format\nThe first line contains an integer T, T test-cases follow.\nEach test-case has 2 lines.\nThe first line contains an integer N (the number of towns).\nThe second line contains N - 1 space separated integers where the ith integer denotes the number of routes, Ni, from the town Ti to Ti+1\nConstraints\n1 <= T<=1000\n2< N <=100\n1 <= routes[i] <=1000\nSample Input\n2\n3\n1 3\n4\n2 2 2\nSample Output\n3\n8\nExplanation\nCase 1: 1 route from T1 to T2, 3 routes from T2 to T3, hence only 3 routes.\nCase 2: There are 2 routes from each city to the next, hence 2 * 2 * 2 = 8.",
        "7": "Mary has an piece of paper that she wants to cut into pieces according to the following rules:\nShe can only cut one piece of paper at a time, meaning she cannot fold the paper or layer already-cut pieces on top of one another.\nEach cut is a straight line from one side of the paper to the other side of the paper. For example, the diagram below depicts the three possible ways to cut a piece of paper:\nGiven and , find and print the minimum number of cuts Mary must make to cut the paper into squares that are unit in size.\nInput Format\nA single line of two space-separated integers denoting the respective values of and .\nConstraints\nOutput Format\nPrint a long integer denoting the minimum number of cuts needed to cut the entire paper into squares.\nSample Input\n3 1\nSample Output\n2\nExplanation\nMary first cuts the piece of paper into a piece and a piece. She then cuts the piece into two pieces:\nBecause it took her two cuts to get pieces of size , we print as our answer.",
        "8": "There is a sequence whose term is\nEvaluate the series\n\nFind .\nExample\nThe series is .\nFunction Description\nComplete the summingSeries function in the editor below.\nsummingSeries has the following parameter(s):\nint n: the inclusive limit of the range to sum\nReturns\nint: the sum of the sequence, modulo\nInput Format\nThe first line of input contains , the number of test cases.\nEach test case consists of one line containing a single integer .\nConstraints\nSample Input 0\n2\n2\n1\nSample Output 0\n4\n1\nExplanation 0\nCase 1: We have\nCase 2: We have",
        "9": "Sherlock is given square tiles, initially both of whose sides have length placed in an plane. Initially, the bottom left corners of each square are at the origin and their sides are parallel to the axes.\nAt , both squares start moving along line (along the positive and ) with velocities and .\nFor each querydetermine the time at which the overlapping area of tiles is equal to the query value, .\nNote: Assume all distances are in meters, time in seconds and velocities in meters per second.\nFunction Description\nComplete the movingTiles function in the editor below.\nmovingTiles has the following parameter(s):\nint l: side length for the two squares\nint s1: velocity of square 1\nint s2: velocity of square 2\nint queries[q]: the array of queries\nReturns\nint[n]: an array of answers to the queries, in order. Each answer will be considered correct if it is at most away from the true answer.\nInput Format\nFirst line contains integers .\nThe next line contains , the number of queries.\nEach of the next lines consists of one integer in one line.\nConstraints\n\n\n\nSample Input\n10 1 2\n2\n50\n100\nSample Output\n4.1421\n0.0000\nExplanation\nFor the first case, note that the answer is around 4.1421356237..., so any of the following will be accepted:\n4.1421356237\n4.14214\n4.14215000\n4.1421\n4.1422",
        "10": "Kristen loves playing with and comparing numbers. She thinks that if she takes two different positive numbers, the one whose digits sum to a larger number is better than the other. If the sum of digits is equal for both numbers, then she thinks the smaller number is better. For example, Kristen thinks that is better than and that is better than .\nGiven an integer, , can you find the divisor of that Kristin will consider to be the best?\nInput Format\nA single integer denoting .\nConstraints\nOutput Format\nPrint an integer denoting the best divisor of .\nSample Input 0\n12\nSample Output 0\n6\nExplanation 0\nThe set of divisors of can be expressed as . The divisor whose digits sum to the largest number is (which, having only one digit, sums to itself). Thus, we print as our answer.",
        "11": "Martha is interviewing at Subway. One of the rounds of the interview requires her to cut a bread of size into smaller identical pieces such that each piece is a square having maximum possible side length with no left over piece of bread.\nInput Format\nThe first line contains an integer . lines follow. Each line contains two space separated integers and which denote length and breadth of the bread.\nConstraints\nOutput Format\nlines, each containing an integer that denotes the number of squares of maximum size, when the bread is cut as per the given condition.\nSample Input 0\n2\n2 2\n6 9\nSample Output 0\n1\n6\nExplanation 0\nThe 1st testcase has a bread whose original dimensions are , the bread is uncut and is a square. Hence the answer is 1.\nThe 2nd testcase has a bread of size . We can cut it into 54 squares of size , 6 of size . For other sizes we will have leftovers. Hence, the number of squares of maximum size that can be cut is 6.",
        "12": "Akash and Akhil are playing a game. They have balls numbered from to . Akhil asks Akash to reverse the position of the balls, i.e., to change the order from say, 0,1,2,3 to 3,2,1,0. He further asks Akash to reverse the position of the balls times, each time starting from one position further to the right, till he reaches the last ball. So, Akash has to reverse the positions of the ball starting from position, then from position, then from position and so on. At the end of the game, Akhil will ask Akash the final position of any ball numbered . Akash will win the game, if he can answer. Help Akash.\nInput Format\nThe first line contains an integer , i.e., the number of the test cases.\nThe next lines will contain two integers and .\nOutput Format\nPrint the final index of ball in the array.\nConstraints\n\n\nSample Input\n2\n3 1\n5 2\nSample Output\n2\n4\nExplanation\nFor first test case, The rotation will be like this:\n0 1 2 -> 2 1 0 -> 2 0 1 -> 2 0 1\nSo, Index of 1 will be 2.",
        "13": "A strange grid has been recovered from an old book. It has columns and infinite number of rows. The bottom row is considered as the first row. First few rows of the grid are like this:\n..............\n\n..............\n\n20 22 24 26 28\n\n11 13 15 17 19\n\n10 12 14 16 18\n\n 1  3  5  7  9\n\n 0  2  4  6  8\nThe grid grows upwards forever!\nYour task is to find the integer in th column in th row of the grid.\nInput Format\nThere will be two integers r and c separated by a single space.\nConstraints\nRows are indexed from bottom to top and columns are indexed from left to right.\nOutput Format\nOutput the answer in a single line.\nSample Input\n6 3\nSample Output\n25\nExplanation\nThe number in the 6th row and 3rd column is 25.",
        "14": "On the eve of Diwali, Hari is decorating his house with a serial light bulb set. The serial light bulb set has N bulbs placed sequentially on a string which is programmed to change patterns every second. If at least one bulb in the set is on at any given instant of time, how many different patterns of light can the serial light bulb set produce?\nNote: Lighting two bulbs *-* is different from **-\nInput Format\nThe first line contains the number of test cases T, T lines follow.\nEach line contains an integer N, the number of bulbs in the serial light bulb set.\nOutput Format\nPrint the total number of patterns modulo 105\nConstraints\n1 <= T <= 1000\n0< N < 104\nSample Input\n2\n1\n2\nSample Output\n1\n3\nExplanation\nCase 1: 1 bulb can be lit in only 1 way.\nCase 2: 2 bulbs can be lit in -*, *-, ** i.e. 3 ways.",
        "15": "Watson gives an integer to Sherlock and asks him: What is the number of divisors of that are divisible by 2?.\nInput Format\nFirst line contains , the number of testcases. This is followed by lines each containing an integer .\nOutput Format\nFor each testcase, print the required answer in one line.\nConstraints\n\nSample Input\n2\n9\n8\nSample Output\n0\n3\nExplanation\n9 has three divisors 1, 3 and 9 none of which is divisible by 2.\n8 has four divisors 1,2,4 and 8, out of which three are divisible by 2.",
        "16": "Watson asks Sherlock:\nGiven a string S of N 0's and M 1's, how many unique permutations of this string start with 1?\nHelp Sherlock by printing the answer modulo (109+7).\nInput Format\nFirst line contains T, the number of test cases.\nEach test case consists of N and M separated by a space.\nOutput Format\nFor each test case, print the answer modulo (109+7).\nConstraints\n1 \u2264 T \u2264 200\n1 \u2264 N,M \u2264 1000\nSample Input\n2\n1 1\n2 3\nSample Output\n1\n6\nExplanation\nTest1: Out of all unique permutations ie. 01 and 10, only second permutation satisfies. Hence, output is 1.\nTest2: Out of all unique permutations ie. 00111 01011 01101 01110 10011 10101 10110 11001 11010 11100, only 10011 10101 10110 11001 11010 11100 satisfy. Hence, output is 6.",
        "17": "You are given an array A of size N. You are also given an integer Q. Can you figure out the answer to each of the Q queries?\nEach query contains 2 integers x and y, and you need to find whether the value find(x,y) is Odd or Even:\nfind(int x,int y)\n{\n    if(x>y) return 1;\n    ans = pow(A[x],find(x+1,y))\n    return ans\n}\nNote : pow(a,b) = ab.\nInput Format\nThe first line of the input contains an integer N. The next line contains N space separated non-negative integers(whole numbers less than or equal to 9).\nThe line after that contains a positive integer, Q , the denotes the number of queries to follow. Q lines follow, each line contains two positive integer x and y separated by a single space.\nOutput Format\nFor each query, display 'Even' if the value returned is Even, otherwise display 'Odd'.\nConstraints\n2 \u2264 N \u2264 105\n2 \u2264 Q \u2264 105\n1 \u2264 x,y \u2264 N\nx \u2264 y\nArray is 1-indexed.\nNo 2 consecutive entries in the array will be zero.\nSample Input\n3\n3 2 7\n2\n1 2\n2 3\nSample Output\nOdd\nEven\nExplanation\nfind(1,2) = 9, which is Odd\nfind(2,3) = 128, which is even",
        "18": "You are given an integer N. Can you find the least positive integer X made up of only 9's and 0's, such that, X is a multiple of N?\nUpdate\nX is made up of one or more occurences of 9 and zero or more occurences of 0.\nInput Format\nThe first line contains an integer T which denotes the number of test cases. T lines follow.\nEach line contains the integer N for which the solution has to be found.\nOutput Format\nPrint the answer X to STDOUT corresponding to each test case. The output should not contain any leading zeroes.\nConstraints\n1 <= T <= 104\n1 <= N <= 500\nSample Input\n3\n5\n7\n1\nSample Output\n90\n9009\n9\nExplanation\n90 is the smallest number made up of 9's and 0's divisible by 5. Similarly, you can derive for other cases.\nTimelimits Timelimits for this challenge is given here",
        "19": "A word from the English dictionary is taken and arranged as a matrix. e.g. \"MATHEMATICS\"\nMATHE  \nATHEM  \nTHEMA  \nHEMAT  \nEMATI  \nMATIC  \nATICS  \nThere are many ways to trace this matrix in a way that helps you construct this word. You start tracing the matrix from the top-left position and at each iteration, you either move RIGHT or DOWN, and ultimately reach the bottom-right of the matrix. It is assured that any such tracing generates the same word. How many such tracings can be possible for a given word of length m+n-1 written as a matrix of size m * n?\nInput Format\nThe first line of input contains an integer T. T test cases follow.\nEach test case contains 2 space separated integers m & n (in a new line) indicating that the matrix has m rows and each row has n characters.\nConstraints\n1 <= T <= 103\n1 \u2264 m,n \u2264 106\nOutput Format\nPrint the number of ways (S) the word can be traced as explained in the problem statement. If the number is larger than 109+7,\nprint S mod (10^9 + 7) for each testcase (in a new line).\nSample Input\n1\n2 3\nSample Output\n3\nExplanation\nLet's consider a word AWAY written as the matrix\nAWA\nWAY\nHere, the word AWAY can be traced in 3 different ways, traversing either RIGHT or DOWN.\nAWA\n  Y\n\nAW\n AY\n\nA\nWAY\nHence the answer is 3.\nTimelimit Time limit for this challenge is given here",
        "20": "Simon: On the fountain, there should be 2 jugs - a 5 gallon and a 3 gallon. Do you see them? Fill one of the jugs with exactly 4 gallons of water and place it on the scale and the timer will stop. You must be precise; one ounce more or less will result in detonation. If you\u2019re still alive in 5 minutes, we\u2019ll speak.\nBruce: Wait, wait a second. I don\u2019t get it. Do you get it?\nSamuel: No.\nBruce: Get the jugs. Obviously, we can\u2019t \ufb01ll the 3 gallon jug with 4 gallons of water.\nSamuel: Obviously.\nBruce: All right. I know, here we go. We \ufb01ll the 3 gallon jug exactly to the top, right?\nSamuel: Uh huh.\nBruce: Okay, now we pour this 3 gallons into the 5 gallon jug, giving us exactly 3 gallons in the 5 gallon jug, right?\nSamuel: Right, then what?\nBruce: We take the 3 gallon jug and \ufb01ll it a third of the way...\nSamuel: No! He said, \u201cBe precise.\u201d Exactly 4 gallons.\nBruce: Damn! Every cop within 50 miles is running his ass off and I\u2019m out here playing a kids' games in the park.\nSamuel: Hey, you want to focus on the problem at hand?\nGiven 2 jugs of capacity a and b gallons, and an infinite supply of water, can you fill one of the jugs with exactly c gallons of water ?\nInput Format\nFirst line contains the number of testcases T. T lines follow.\nEach line contains 3 space separated integers a, b and c . a and b indicate the capacity of the two jugs respectively, and c denotes the exact capacity with which one of the jugs should be filled.\nOutput Format\nFor each test case, print \"YES\" (in a new line) if one of the jugs can be filled with exactly c gallons of water and \"NO\" (in a new line) if they cannot be filled. ( quotes are for clarity )\nConstraints\n1 \u2264 a, b, c \u2264 103\n1 \u2264 T \u2264 100\nSample Input\n2\n5 3 4\n3 6 4\nSample Output\nYES\nNO\nExplanation\nBruce can do the following, fill jug a with 5 gallons.\na = 5, b = 0\nNow, he can fill jug b with 3 gallons from jug a.\na = 2, b = 3\nHe can empty jug b and empty 2 gallons from jug a to jug b.\na = 0, b = 2\nNow, he can fill jug a with 5 gallons and fill jug b with 1 gallon from jug a. This results in jug a containing exactly 4 gallons of water.\na = 5, b = 2\na = 4, b = 3\nIn the second testcase, it is impossible to generate 4 gallons of water, hence NO.",
        "21": "Alex is attending a Halloween party with his girlfriend, Silvia. At the party, Silvia spots the corner of an infinite chocolate bar (two dimensional, infinitely long in width and length).\nIf the chocolate can be served only as 1 x 1 sized pieces and Alex can cut the chocolate bar exactly times, what is the maximum number of chocolate pieces Alex can cut and give Silvia?\nInput Format\nThe first line contains an integer , the number of test cases. lines follow.\nEach line contains an integer .\nOutput Format\nlines; each line should contain an integer that denotes the maximum number of pieces that can be obtained for each test case.\nConstraints\n\n\nNote: Chocolate must be served in 1 x 1 sized pieces. Alex can't relocate any of the pieces, nor can he place any piece on top of another.\nSample Input #00\n4\n5\n6\n7\n8\nSample Output #00\n6\n9\n12\n16\nExplanation\nThe explanation below is for the first two test cases. The rest of them follow a similar logic.\nFor the first test-case where , you need horizontal and vertical cuts.\nFor the second test case, where , you need horizontal and vertical cuts.",
        "22": "Animesh has empty candy jars, numbered from to , with infinite capacity. He performs operations. Each operation is described by integers, , , and . Here, and are indices of the jars, and is the number of candies to be added inside each jar whose index lies between and (both inclusive). Can you tell the average number of candies after operations?\nExample\n\nThe array has elements that all start at . In the first operation, add to the first elements. Now the array is . In the second operation, add to the last elements (3 - 5). Now the array is and the average is 10. Sincd 10 is already an integer value, it does not need to be rounded.\nFunction Description\nComplete the solve function in the editor below.\nsolve has the following parameters:\nint n: the number of candy jars\nint operations[m][3]: a 2-dimensional array of operations\nReturns\nint: the floor of the average number of canidies in all jars\nInput Format\nThe first line contains two integers, and , separated by a single space.\nlines follow. Each of them contains three integers, , , and , separated by spaces.\nConstraints\n\n\n\nSample Input\nSTDIN       Function\n-----       --------\n5 3         n = 5, operations[] size = 3\n1 2 100     operations = [[1, 2, 100], [2, 5, 100], [3, 4, 100]]\n2 5 100\n3 4 100\nSample Output\n160\nExplanation\nInitially each of the jars contains 0 candies\n0 0 0 0 0  \nFirst operation:\n100 100 0 0 0  \nSecond operation:\n100 200 100 100 100  \nThird operation:\n100 200 200 200 100  \nTotal = 800, Average = 800\/5 = 160",
        "23": "You are given an integer, . Write a program to determine if is an element of the Fibonacci sequence.\nThe first few elements of the Fibonacci sequence are . A Fibonacci sequence is one where every element is a sum of the previous two elements in the sequence. The first two elements are and .\nFormally:\nFunction Description\nComplete the isFibo function in the editor below.\nisFibo has the following parameters:\n- int n: the number to check\nReturns\n- string: either IsFibo or IsNotFibo\nInput Format\nThe first line contains , number of test cases.\nlines follow. Each line contains an integer .\nConstraints\n\nSample Input\nSTDIN   Function\n-----   --------\n3       t = 3\n5       n = 5\n7       n = 7\n8       n = 8\nSample Output\nIsFibo\nIsNotFibo\nIsFibo\nExplanation\nis a Fibonacci number given by\nis not a Fibonacci number\nis a Fibonacci number given by\nTime Limit\nThe time limit for this challenge is given here.",
        "24": "Jim enters a candy shop which has N different types of candies, each candy is of the same price. Jim has enough money to buy K candies. In how many different ways can he purchase K candies if there are infinite candies of each kind?\nInput Format\nThe first line contains an integer T, the number of tests.\nThis is followed by 2T lines which contain T tests:\nThe first line (of each testcase) is an integer N and the second line (of each testcase) is an integer K.\nOutput Format\nFor each testcase, print the number of ways Jim can buy candies from the shop in a newline. If the answer has more than 9 digits, print the last 9 digits.\nNote\nThis problem may expect you to have solved nCr Table\nConstraints\n1 <= T <= 200\n1 <= N < 1000\n1 <= K < 1000\nSample Input\n2\n4\n1\n2\n3\nSample Output\n4\n4\nExplanation\nThere are 2 testcases, for the first testcase we have N = 4 and K = 1, as Jim can buy only 1 candy, he can choose to buy any of the 4 types of candies available. Hence, his answer is 4. For the 2nd testcase, we have N = 2 and K = 3, If we name two chocolates as a and b, he can buy\naaa bbb aab abb \nchocolates, hence 4.",
        "25": "Famous wizard Sumar moonji kumaru is stuck in a huge room and has to save Hermione Granger from a monster. Kumaru is at location P1 given by integral coordinates (x1,y1) and Hermione is at location P2 given by integral coordinates (x2,y2). Sadly P1 and P2 are the only points at which floating rocks are present. Rest of the room is without floor and underneath is hot lava.\nKumaru has to go from P1 to P2 but there are no floating rocks to walk on. Kumaru knows a spell that can make the rocks appear but only on the integral coordinates on the straight line joining P1 and P2.\nHow many rocks can appear at locations (x,y) on the line segment between P1 and P2 (excluding P1 and P2) which satisfy the condition that both x and y are integers?\nInput Format\nThe first line contains a single integer T, the number of test cases. T lines follow.\nEach of the following T lines contains one test case each. Each test case contains 4 integers x1, y1, x2 and y2 separated by a single space.\nOutput Format\nA single line containing the number of rocks.\nConstraints\n1 <= T <= 105\n-109 <= x1, y1, x2, y2 <= 109\nSample input\n3\n0 2 4 0\n2 2 5 5\n1 9 8 16\nSample Output\n1\n2\n6\nExplanation\nCase 1: As shown in the figure, between (0,2) and (4,0) there's only 1 integral point (2,1) hence 1 rock.\nCase 2: Between (2,2) and (5,5) lies (3,3) and (4,4), hence 2 rocks.\nCase 3: Between (1,9) and (8,16) there lies 6 rocks at positions (2,10) (3,11) (4,12) (5,13) (6,14) (7,15).",
        "26": "We all know how to calculate using operations by multiplying by a total of times. The drawback to this method is that can be large, which makes exponentiation very slow.\nThere is a well known method called Russian Peasant Multiplication that you can read about here. Now let's use this to raise some complex numbers to powers!\nYou're given queries where each query consists of four integers: , , , and . For each query, calculate (where is an imaginary unit) and then print the respective values of and as two space-separated integers on a new line.\nInput Format\nThe first line contains a single integer, , denoting the number of queries.\nEach of the subsequent lines describes a query in the form of four space-separated integers: , , , and (respectively).\nConstraints\nOutput Format\nFor each query, print the two space-separated integers denoting the respective values of and on a new line.\nSample Input\n3\n2 0 9 1000\n0 1 5 10\n8 2 10 1000000000\nSample Output\n512 0\n0 1\n880332800 927506432\nExplanation\nIn the first query, we have , , , . We calculate the following:",
        "27": "There are groups of friends, and each group is numbered from 1 to . The th group contains people.\nThey live near a bus stop, and only a single bus operates on this route. An empty bus arrives at the bus stop and all the groups want to travel by the bus.\nHowever, group of friends do not want to get separated. So they enter the bus only if the bus can carry the entire group.\nMoreover, the groups do not want to change their relative positioning while travelling. In other words, group 3 cannot travel by bus, unless group 1 and group 2 have either (a) already traveled by the bus in the previous trip or (b) they are also sitting inside the bus at present.\nYou are given that a bus of size can carry people simultaneously.\n\nFind the size of the bus so that (1) the bus can transport all the groups and (2) every time when the bus starts from the bus station, there is no empty space in the bus (i.e. the total number of people present inside the bus is equal to )?\nInput Format\nThe first line contains an integer . The second line contains space-separated integers .\nOutput Format\nPrint all possible sizes of the bus in an increasing order.\nSample Input\n8\n1 2 1 1 1 2 1 3\nSample Output\n3 4 6 12\nSample Explanation\nIn the above example, = 1, = 2, = 1, = 1, = 1, = 2, = 1, = 3.\nIf x = 1 : In the first trip, go by the bus. There will be no second trip because the bus cannot accommodate group 2. Hence \"x = 1\" is not the required answer.\nIf x = 2 : No bus trip is possible. That's because cannot go alone, as one seat will be left vacant in the bus. And, & cannot go together, because the bus is cannot accommodate both the groups simultaneously.\nIf x = 3 : In the first trip, & go by the bus. In the second trip, , & go by the bus. In the third trip, & go by the bus. In the fourth trip, go by the bus.\nIf x = 4 : In the first trip, , & go by the bus. In the second trip, , & go by the bus. In the third trip, & go by the bus.\nSimilarly you can figure out the output for x= 5, 6 & 7.",
        "28": "Keko has dots in a 2-D coordinate plane. He wants to measure the gap between the most distant two dots. To make the problem easier, Keko decided to change each dot's or coordinate to zero.\nHelp Keko calculate the distance!\nInput Format\nThe first line contains an integer, , the number of dots.\nThe next lines each contain the integer coordinates of the dots in fashion.\nConstraints\n\nIt is guaranteed that all dots are distinct, and either their or coordinate is equal to .\nOutput Format\nPrint the distance between the most distant dots with an absolute error of, at most, .\nSample Input\n4\n-1 0\n1 0\n0 1\n0 -1\nSample Output\n2.000000\nExplanation\nIn the sample, the most distant dots are located at and .\nThe distance between them is .",
        "29": "Jim runs a big burger restaurant and, to entertain his customers, he always tell them jokes. He is running out of jokes and he needs you to help him find new ones.\nAn often heard programmer joke goes like this:\n\"Why do programmers always mix up Christmas and Halloween? Because Dec 25 is Oct 31\".\nGot it? :-) It is because (25 in Decimal) is equal to (31 in Octal).\nIf we are talking about dates, then let be the month and be the date and the corresponding value be ( in base ). Let's describe some slightly different jokes:\n\"Why do programmers always mix up event and event ? Because \".\nHere means the month of event and the day of event . Similar for and .\nJim knows that his customers love this kind of jokes. That's why he gives you a calendar with events in it and asks you to count the number of such jokes he can create using the given events.\nTwo jokes ( and ) differ if they don't contain the same events.\nNote:\nThe given numbers are all represented with digits from 0-9, that's why for months like or , we can't use additional characters to represent 10 or 11.\nIt might happen, that a special event cannot be used for a joke because the base conversion is invalid. For example is not possible since base can only contain digits and .\nUnary base is invalid.\nTwo events can have the same date.\nInput Format\nOn the first line you will get . The following lines you will be given the dates , of the special events, each separated by a single space.\nOutput Format\nPrint the number of jokes Jim can make.\nConstraints\n(, ) will be a valid date in the Gregorian Calendar without leap day.\nSample Input #1\n2\n10 25\n8 31\nSample Output #1\n1\nSample Input #2\n2\n2 25\n2 25\nSample Output #2\n0\nSample Input #3\n2\n11 10\n10 11\nSample Output #3\n1\nExplanation\nThere are two special events happening on and . He can make one joke, namely the one described in the description.\nIn the second test case there are no valid dates we can use for our jokes since 25 is not defined for base 2.\nIn the third test case .",
        "30": "Consider two points, and . We consider the inversion or point reflection, , of point across point to be a rotation of point around .\nGiven sets of points and , find for each pair of points and print two space-separated integers denoting the respective values of and on a new line.\nFunction Description\nComplete the findPoint function in the editor below.\nfindPoint has the following parameters:\nint px, py, qx, qy: x and y coordinates for points and\nReturns\nint[2]: x and y coordinates of the reflected point\nInput Format\nThe first line contains an integer, , denoting the number of sets of points.\nEach of the subsequent lines contains four space-separated integers that describe the respective values of , , , and defining points and .\nConstraints\nSample Input\n2\n0 0 1 1\n1 1 2 2\nSample Output\n2 2\n3 3\nExplanation\nThe graphs below depict points , , and for the points given as Sample Input:",
        "31": "A person is getting ready to leave and needs a pair of matching socks. If there are colors of socks in the drawer, how many socks need to be removed to be certain of having a matching pair?\nExample\nThere are colors of socks in the drawer. If they remove socks, they may not match. The minimum number to insure success is .\nFunction Description\nComplete the maximumDraws function in the editor below.\nmaximumDraws has the following parameter:\nint n: the number of colors of socks\nReturns\nint: the minimum number of socks to remove to guarantee a matching pair.\nInput Format\nThe first line contains the number of test cases, .\nEach of the following lines contains an integer .\nConstraints\n\nSample Input\n2\n1\n2\nSample Output\n2\n3\nExplanation\nCase 1 : Only 1 color of sock is in the drawer. Any will match.\nCase 2 : 2 colors of socks are in the drawer. The first two removed may not match. At least socks need to be removed to guarantee success.",
        "32": "At the annual meeting of Board of Directors of Acme Inc. If everyone attending shakes hands exactly one time with every other attendee, how many handshakes are there?\nExample\nThere are attendees, , and . shakes hands with and , and shakes hands with . Now they have all shaken hands after handshakes.\nFunction Description\nComplete the handshakes function in the editor below.\nhandshakes has the following parameter:\nint n: the number of attendees\nReturns\nint: the number of handshakes\nInput Format\nThe first line contains the number of test cases .\nEach of the following lines contains an integer, .\nConstraints\n\nSample Input\n2\n1\n2\nSample Output\n0\n1\nExplanation\nCase 1 : The lonely board member shakes no hands, hence 0.\nCase 2 : There are 2 board members, so 1 handshake takes place.",
        "33": "Given integers and , find the smallest integer , such that there exists a triangle of height , base , having an area of at least .\nExample\n\nThe minimum height is . One example is a triangle formed at points (0, 0), (4, 0), (2, 3).\nFunction Description\nComplete the lowestTriangle function in the editor below.\nlowestTriangle has the following parameters:\nint b: the base of the triangle\nint a: the minimum area of the triangle\nReturns\nint: the minimum integer height to form a triangle with an area of at least\nInput Format\nThere are two space-separated integers and , on a single line.\nConstraints\nSample Input 0\n2 2\nSample Output 0\n2\nExplanation 0\nThe task is to find the smallest integer height of the triangle with base and area at least . It turns out, that there are triangles with height , base and area , for example a triangle with corners in the following points: :\nIt can be proved that there is no triangle with integer height smaller than , base and area at least .\nSample Input 1\n17 100\nSample Output 1\n12\nExplanation 1\nThe task is to find the smallest integer height of the triangle with base and area at least . It turns out, that there are triangles with height , base and area , for example a triangle with corners in the following points: .\nIt can be proved that there is no triangle with integer height smaller than , base and area at least .",
        "34": "Luke is daydreaming in Math class. He has a sheet of graph paper with rows and columns, and he imagines that there is an army base in each cell for a total of bases. He wants to drop supplies at strategic points on the sheet, marking each drop point with a red dot. If a base contains at least one package inside or on top of its border fence, then it's considered to be supplied. For example:\nGiven and , what's the minimum number of packages that Luke must drop to supply all of his bases?\nExample\n\nPackages can be dropped at the corner between cells (0, 0), (0, 1), (1, 0) and (1, 1) to supply bases. Another package can be dropped at a border between (0, 2) and (1, 2). This supplies all bases using packages.\nFunction Description\nComplete the gameWithCells function in the editor below.\ngameWithCells has the following parameters:\nint n: the number of rows in the game\nint m: the number of columns in the game\nReturns\nint: the minimum number of packages required\nInput Format\nTwo space-separated integers describing the respective values of and .\nConstraints\nSample Input 0\n2 2\nSample Output 0\n1\nExplanation 0\nLuke has four bases in a grid. If he drops a single package where the walls of all four bases intersect, then those four cells can access the package:\nBecause he managed to supply all four bases with a single supply drop, we print as our answer.",
        "35": "Leonardo loves primes and created queries where each query takes the form of an integer, . For each , count the maximum number of distinct prime factors of any number in the inclusive range .\nNote: Recall that a prime number is only divisible by and itself, and is not a prime number.\nExample\nThe maximum number of distinct prime factors for values less than or equal to is . One value with distinct prime factors is . Another is .\nFunction Description\nComplete the primeCount function in the editor below.\nprimeCount has the following parameters:\nint n: the inclusive limit of the range to check\nReturns\nint: the maximum number of distinct prime factors of any number in the inclusive range .\nInput Format\nThe first line contains an integer, , the number of queries.\nEach of the next lines contains a single integer, .\nConstraints\nSample Input\n6\n1\n2\n3\n500\n5000\n10000000000\nSample Output\n0\n1\n1\n4\n5\n10\nExplanation\nis not prime and its only factor is itself.\nhas prime factor, .\nThe number has prime factor, , has and has prime factors.\nThe product of the first four primes is . While higher value primes may be a factor of some numbers, there will never be more than distinct prime factors for a number in this range.",
        "36": "Cities on a map are connected by a number of roads. The number of roads between each city is in an array and city is the starting location. The number of roads from city to city is the first value in the array, from city to city is the second, and so on.\nHow many paths are there from city to the last city in the list, modulo ?\nExample\n\nThere are roads to city , roads to city and roads to city . The total number of roads is .\nNote\nPass all the towns Ti for i=1 to n-1 in numerical order to reach Tn.\nFunction Description\nComplete the connectingTowns function in the editor below.\nconnectingTowns has the following parameters:\nint n: the number of towns\nint routes[n-1]: the number of routes between towns\nReturns\nint: the total number of routes, modulo 1234567.\nInput Format\nThe first line contains an integer T, T test-cases follow.\nEach test-case has 2 lines.\nThe first line contains an integer N (the number of towns).\nThe second line contains N - 1 space separated integers where the ith integer denotes the number of routes, Ni, from the town Ti to Ti+1\nConstraints\n1 <= T<=1000\n2< N <=100\n1 <= routes[i] <=1000\nSample Input\n2\n3\n1 3\n4\n2 2 2\nSample Output\n3\n8\nExplanation\nCase 1: 1 route from T1 to T2, 3 routes from T2 to T3, hence only 3 routes.\nCase 2: There are 2 routes from each city to the next, hence 2 * 2 * 2 = 8.",
        "37": "Mary has an piece of paper that she wants to cut into pieces according to the following rules:\nShe can only cut one piece of paper at a time, meaning she cannot fold the paper or layer already-cut pieces on top of one another.\nEach cut is a straight line from one side of the paper to the other side of the paper. For example, the diagram below depicts the three possible ways to cut a piece of paper:\nGiven and , find and print the minimum number of cuts Mary must make to cut the paper into squares that are unit in size.\nInput Format\nA single line of two space-separated integers denoting the respective values of and .\nConstraints\nOutput Format\nPrint a long integer denoting the minimum number of cuts needed to cut the entire paper into squares.\nSample Input\n3 1\nSample Output\n2\nExplanation\nMary first cuts the piece of paper into a piece and a piece. She then cuts the piece into two pieces:\nBecause it took her two cuts to get pieces of size , we print as our answer.",
        "38": "There is a sequence whose term is\nEvaluate the series\n\nFind .\nExample\nThe series is .\nFunction Description\nComplete the summingSeries function in the editor below.\nsummingSeries has the following parameter(s):\nint n: the inclusive limit of the range to sum\nReturns\nint: the sum of the sequence, modulo\nInput Format\nThe first line of input contains , the number of test cases.\nEach test case consists of one line containing a single integer .\nConstraints\nSample Input 0\n2\n2\n1\nSample Output 0\n4\n1\nExplanation 0\nCase 1: We have\nCase 2: We have",
        "39": "Sherlock is given square tiles, initially both of whose sides have length placed in an plane. Initially, the bottom left corners of each square are at the origin and their sides are parallel to the axes.\nAt , both squares start moving along line (along the positive and ) with velocities and .\nFor each querydetermine the time at which the overlapping area of tiles is equal to the query value, .\nNote: Assume all distances are in meters, time in seconds and velocities in meters per second.\nFunction Description\nComplete the movingTiles function in the editor below.\nmovingTiles has the following parameter(s):\nint l: side length for the two squares\nint s1: velocity of square 1\nint s2: velocity of square 2\nint queries[q]: the array of queries\nReturns\nint[n]: an array of answers to the queries, in order. Each answer will be considered correct if it is at most away from the true answer.\nInput Format\nFirst line contains integers .\nThe next line contains , the number of queries.\nEach of the next lines consists of one integer in one line.\nConstraints\n\n\n\nSample Input\n10 1 2\n2\n50\n100\nSample Output\n4.1421\n0.0000\nExplanation\nFor the first case, note that the answer is around 4.1421356237..., so any of the following will be accepted:\n4.1421356237\n4.14214\n4.14215000\n4.1421\n4.1422",
        "40": "Kristen loves playing with and comparing numbers. She thinks that if she takes two different positive numbers, the one whose digits sum to a larger number is better than the other. If the sum of digits is equal for both numbers, then she thinks the smaller number is better. For example, Kristen thinks that is better than and that is better than .\nGiven an integer, , can you find the divisor of that Kristin will consider to be the best?\nInput Format\nA single integer denoting .\nConstraints\nOutput Format\nPrint an integer denoting the best divisor of .\nSample Input 0\n12\nSample Output 0\n6\nExplanation 0\nThe set of divisors of can be expressed as . The divisor whose digits sum to the largest number is (which, having only one digit, sums to itself). Thus, we print as our answer.",
        "41": "Martha is interviewing at Subway. One of the rounds of the interview requires her to cut a bread of size into smaller identical pieces such that each piece is a square having maximum possible side length with no left over piece of bread.\nInput Format\nThe first line contains an integer . lines follow. Each line contains two space separated integers and which denote length and breadth of the bread.\nConstraints\nOutput Format\nlines, each containing an integer that denotes the number of squares of maximum size, when the bread is cut as per the given condition.\nSample Input 0\n2\n2 2\n6 9\nSample Output 0\n1\n6\nExplanation 0\nThe 1st testcase has a bread whose original dimensions are , the bread is uncut and is a square. Hence the answer is 1.\nThe 2nd testcase has a bread of size . We can cut it into 54 squares of size , 6 of size . For other sizes we will have leftovers. Hence, the number of squares of maximum size that can be cut is 6.",
        "42": "Akash and Akhil are playing a game. They have balls numbered from to . Akhil asks Akash to reverse the position of the balls, i.e., to change the order from say, 0,1,2,3 to 3,2,1,0. He further asks Akash to reverse the position of the balls times, each time starting from one position further to the right, till he reaches the last ball. So, Akash has to reverse the positions of the ball starting from position, then from position, then from position and so on. At the end of the game, Akhil will ask Akash the final position of any ball numbered . Akash will win the game, if he can answer. Help Akash.\nInput Format\nThe first line contains an integer , i.e., the number of the test cases.\nThe next lines will contain two integers and .\nOutput Format\nPrint the final index of ball in the array.\nConstraints\n\n\nSample Input\n2\n3 1\n5 2\nSample Output\n2\n4\nExplanation\nFor first test case, The rotation will be like this:\n0 1 2 -> 2 1 0 -> 2 0 1 -> 2 0 1\nSo, Index of 1 will be 2.",
        "43": "A strange grid has been recovered from an old book. It has columns and infinite number of rows. The bottom row is considered as the first row. First few rows of the grid are like this:\n..............\n\n..............\n\n20 22 24 26 28\n\n11 13 15 17 19\n\n10 12 14 16 18\n\n 1  3  5  7  9\n\n 0  2  4  6  8\nThe grid grows upwards forever!\nYour task is to find the integer in th column in th row of the grid.\nInput Format\nThere will be two integers r and c separated by a single space.\nConstraints\nRows are indexed from bottom to top and columns are indexed from left to right.\nOutput Format\nOutput the answer in a single line.\nSample Input\n6 3\nSample Output\n25\nExplanation\nThe number in the 6th row and 3rd column is 25.",
        "44": "On the eve of Diwali, Hari is decorating his house with a serial light bulb set. The serial light bulb set has N bulbs placed sequentially on a string which is programmed to change patterns every second. If at least one bulb in the set is on at any given instant of time, how many different patterns of light can the serial light bulb set produce?\nNote: Lighting two bulbs *-* is different from **-\nInput Format\nThe first line contains the number of test cases T, T lines follow.\nEach line contains an integer N, the number of bulbs in the serial light bulb set.\nOutput Format\nPrint the total number of patterns modulo 105\nConstraints\n1 <= T <= 1000\n0< N < 104\nSample Input\n2\n1\n2\nSample Output\n1\n3\nExplanation\nCase 1: 1 bulb can be lit in only 1 way.\nCase 2: 2 bulbs can be lit in -*, *-, ** i.e. 3 ways.",
        "45": "Watson gives an integer to Sherlock and asks him: What is the number of divisors of that are divisible by 2?.\nInput Format\nFirst line contains , the number of testcases. This is followed by lines each containing an integer .\nOutput Format\nFor each testcase, print the required answer in one line.\nConstraints\n\nSample Input\n2\n9\n8\nSample Output\n0\n3\nExplanation\n9 has three divisors 1, 3 and 9 none of which is divisible by 2.\n8 has four divisors 1,2,4 and 8, out of which three are divisible by 2.",
        "46": "Watson asks Sherlock:\nGiven a string S of N 0's and M 1's, how many unique permutations of this string start with 1?\nHelp Sherlock by printing the answer modulo (109+7).\nInput Format\nFirst line contains T, the number of test cases.\nEach test case consists of N and M separated by a space.\nOutput Format\nFor each test case, print the answer modulo (109+7).\nConstraints\n1 \u2264 T \u2264 200\n1 \u2264 N,M \u2264 1000\nSample Input\n2\n1 1\n2 3\nSample Output\n1\n6\nExplanation\nTest1: Out of all unique permutations ie. 01 and 10, only second permutation satisfies. Hence, output is 1.\nTest2: Out of all unique permutations ie. 00111 01011 01101 01110 10011 10101 10110 11001 11010 11100, only 10011 10101 10110 11001 11010 11100 satisfy. Hence, output is 6.",
        "47": "You are given an array A of size N. You are also given an integer Q. Can you figure out the answer to each of the Q queries?\nEach query contains 2 integers x and y, and you need to find whether the value find(x,y) is Odd or Even:\nfind(int x,int y)\n{\n    if(x>y) return 1;\n    ans = pow(A[x],find(x+1,y))\n    return ans\n}\nNote : pow(a,b) = ab.\nInput Format\nThe first line of the input contains an integer N. The next line contains N space separated non-negative integers(whole numbers less than or equal to 9).\nThe line after that contains a positive integer, Q , the denotes the number of queries to follow. Q lines follow, each line contains two positive integer x and y separated by a single space.\nOutput Format\nFor each query, display 'Even' if the value returned is Even, otherwise display 'Odd'.\nConstraints\n2 \u2264 N \u2264 105\n2 \u2264 Q \u2264 105\n1 \u2264 x,y \u2264 N\nx \u2264 y\nArray is 1-indexed.\nNo 2 consecutive entries in the array will be zero.\nSample Input\n3\n3 2 7\n2\n1 2\n2 3\nSample Output\nOdd\nEven\nExplanation\nfind(1,2) = 9, which is Odd\nfind(2,3) = 128, which is even",
        "48": "You are given an integer N. Can you find the least positive integer X made up of only 9's and 0's, such that, X is a multiple of N?\nUpdate\nX is made up of one or more occurences of 9 and zero or more occurences of 0.\nInput Format\nThe first line contains an integer T which denotes the number of test cases. T lines follow.\nEach line contains the integer N for which the solution has to be found.\nOutput Format\nPrint the answer X to STDOUT corresponding to each test case. The output should not contain any leading zeroes.\nConstraints\n1 <= T <= 104\n1 <= N <= 500\nSample Input\n3\n5\n7\n1\nSample Output\n90\n9009\n9\nExplanation\n90 is the smallest number made up of 9's and 0's divisible by 5. Similarly, you can derive for other cases.\nTimelimits Timelimits for this challenge is given here",
        "49": "A word from the English dictionary is taken and arranged as a matrix. e.g. \"MATHEMATICS\"\nMATHE  \nATHEM  \nTHEMA  \nHEMAT  \nEMATI  \nMATIC  \nATICS  \nThere are many ways to trace this matrix in a way that helps you construct this word. You start tracing the matrix from the top-left position and at each iteration, you either move RIGHT or DOWN, and ultimately reach the bottom-right of the matrix. It is assured that any such tracing generates the same word. How many such tracings can be possible for a given word of length m+n-1 written as a matrix of size m * n?\nInput Format\nThe first line of input contains an integer T. T test cases follow.\nEach test case contains 2 space separated integers m & n (in a new line) indicating that the matrix has m rows and each row has n characters.\nConstraints\n1 <= T <= 103\n1 \u2264 m,n \u2264 106\nOutput Format\nPrint the number of ways (S) the word can be traced as explained in the problem statement. If the number is larger than 109+7,\nprint S mod (10^9 + 7) for each testcase (in a new line).\nSample Input\n1\n2 3\nSample Output\n3\nExplanation\nLet's consider a word AWAY written as the matrix\nAWA\nWAY\nHere, the word AWAY can be traced in 3 different ways, traversing either RIGHT or DOWN.\nAWA\n  Y\n\nAW\n AY\n\nA\nWAY\nHence the answer is 3.\nTimelimit Time limit for this challenge is given here",
        "50": "Simon: On the fountain, there should be 2 jugs - a 5 gallon and a 3 gallon. Do you see them? Fill one of the jugs with exactly 4 gallons of water and place it on the scale and the timer will stop. You must be precise; one ounce more or less will result in detonation. If you\u2019re still alive in 5 minutes, we\u2019ll speak.\nBruce: Wait, wait a second. I don\u2019t get it. Do you get it?\nSamuel: No.\nBruce: Get the jugs. Obviously, we can\u2019t \ufb01ll the 3 gallon jug with 4 gallons of water.\nSamuel: Obviously.\nBruce: All right. I know, here we go. We \ufb01ll the 3 gallon jug exactly to the top, right?\nSamuel: Uh huh.\nBruce: Okay, now we pour this 3 gallons into the 5 gallon jug, giving us exactly 3 gallons in the 5 gallon jug, right?\nSamuel: Right, then what?\nBruce: We take the 3 gallon jug and \ufb01ll it a third of the way...\nSamuel: No! He said, \u201cBe precise.\u201d Exactly 4 gallons.\nBruce: Damn! Every cop within 50 miles is running his ass off and I\u2019m out here playing a kids' games in the park.\nSamuel: Hey, you want to focus on the problem at hand?\nGiven 2 jugs of capacity a and b gallons, and an infinite supply of water, can you fill one of the jugs with exactly c gallons of water ?\nInput Format\nFirst line contains the number of testcases T. T lines follow.\nEach line contains 3 space separated integers a, b and c . a and b indicate the capacity of the two jugs respectively, and c denotes the exact capacity with which one of the jugs should be filled.\nOutput Format\nFor each test case, print \"YES\" (in a new line) if one of the jugs can be filled with exactly c gallons of water and \"NO\" (in a new line) if they cannot be filled. ( quotes are for clarity )\nConstraints\n1 \u2264 a, b, c \u2264 103\n1 \u2264 T \u2264 100\nSample Input\n2\n5 3 4\n3 6 4\nSample Output\nYES\nNO\nExplanation\nBruce can do the following, fill jug a with 5 gallons.\na = 5, b = 0\nNow, he can fill jug b with 3 gallons from jug a.\na = 2, b = 3\nHe can empty jug b and empty 2 gallons from jug a to jug b.\na = 0, b = 2\nNow, he can fill jug a with 5 gallons and fill jug b with 1 gallon from jug a. This results in jug a containing exactly 4 gallons of water.\na = 5, b = 2\na = 4, b = 3\nIn the second testcase, it is impossible to generate 4 gallons of water, hence NO.",
        "51": "Alex is attending a Halloween party with his girlfriend, Silvia. At the party, Silvia spots the corner of an infinite chocolate bar (two dimensional, infinitely long in width and length).\nIf the chocolate can be served only as 1 x 1 sized pieces and Alex can cut the chocolate bar exactly times, what is the maximum number of chocolate pieces Alex can cut and give Silvia?\nInput Format\nThe first line contains an integer , the number of test cases. lines follow.\nEach line contains an integer .\nOutput Format\nlines; each line should contain an integer that denotes the maximum number of pieces that can be obtained for each test case.\nConstraints\n\n\nNote: Chocolate must be served in 1 x 1 sized pieces. Alex can't relocate any of the pieces, nor can he place any piece on top of another.\nSample Input #00\n4\n5\n6\n7\n8\nSample Output #00\n6\n9\n12\n16\nExplanation\nThe explanation below is for the first two test cases. The rest of them follow a similar logic.\nFor the first test-case where , you need horizontal and vertical cuts.\nFor the second test case, where , you need horizontal and vertical cuts.",
        "52": "Animesh has empty candy jars, numbered from to , with infinite capacity. He performs operations. Each operation is described by integers, , , and . Here, and are indices of the jars, and is the number of candies to be added inside each jar whose index lies between and (both inclusive). Can you tell the average number of candies after operations?\nExample\n\nThe array has elements that all start at . In the first operation, add to the first elements. Now the array is . In the second operation, add to the last elements (3 - 5). Now the array is and the average is 10. Sincd 10 is already an integer value, it does not need to be rounded.\nFunction Description\nComplete the solve function in the editor below.\nsolve has the following parameters:\nint n: the number of candy jars\nint operations[m][3]: a 2-dimensional array of operations\nReturns\nint: the floor of the average number of canidies in all jars\nInput Format\nThe first line contains two integers, and , separated by a single space.\nlines follow. Each of them contains three integers, , , and , separated by spaces.\nConstraints\n\n\n\nSample Input\nSTDIN       Function\n-----       --------\n5 3         n = 5, operations[] size = 3\n1 2 100     operations = [[1, 2, 100], [2, 5, 100], [3, 4, 100]]\n2 5 100\n3 4 100\nSample Output\n160\nExplanation\nInitially each of the jars contains 0 candies\n0 0 0 0 0  \nFirst operation:\n100 100 0 0 0  \nSecond operation:\n100 200 100 100 100  \nThird operation:\n100 200 200 200 100  \nTotal = 800, Average = 800\/5 = 160",
        "53": "You are given an integer, . Write a program to determine if is an element of the Fibonacci sequence.\nThe first few elements of the Fibonacci sequence are . A Fibonacci sequence is one where every element is a sum of the previous two elements in the sequence. The first two elements are and .\nFormally:\nFunction Description\nComplete the isFibo function in the editor below.\nisFibo has the following parameters:\n- int n: the number to check\nReturns\n- string: either IsFibo or IsNotFibo\nInput Format\nThe first line contains , number of test cases.\nlines follow. Each line contains an integer .\nConstraints\n\nSample Input\nSTDIN   Function\n-----   --------\n3       t = 3\n5       n = 5\n7       n = 7\n8       n = 8\nSample Output\nIsFibo\nIsNotFibo\nIsFibo\nExplanation\nis a Fibonacci number given by\nis not a Fibonacci number\nis a Fibonacci number given by\nTime Limit\nThe time limit for this challenge is given here.",
        "54": "Jim enters a candy shop which has N different types of candies, each candy is of the same price. Jim has enough money to buy K candies. In how many different ways can he purchase K candies if there are infinite candies of each kind?\nInput Format\nThe first line contains an integer T, the number of tests.\nThis is followed by 2T lines which contain T tests:\nThe first line (of each testcase) is an integer N and the second line (of each testcase) is an integer K.\nOutput Format\nFor each testcase, print the number of ways Jim can buy candies from the shop in a newline. If the answer has more than 9 digits, print the last 9 digits.\nNote\nThis problem may expect you to have solved nCr Table\nConstraints\n1 <= T <= 200\n1 <= N < 1000\n1 <= K < 1000\nSample Input\n2\n4\n1\n2\n3\nSample Output\n4\n4\nExplanation\nThere are 2 testcases, for the first testcase we have N = 4 and K = 1, as Jim can buy only 1 candy, he can choose to buy any of the 4 types of candies available. Hence, his answer is 4. For the 2nd testcase, we have N = 2 and K = 3, If we name two chocolates as a and b, he can buy\naaa bbb aab abb \nchocolates, hence 4.",
        "55": "Famous wizard Sumar moonji kumaru is stuck in a huge room and has to save Hermione Granger from a monster. Kumaru is at location P1 given by integral coordinates (x1,y1) and Hermione is at location P2 given by integral coordinates (x2,y2). Sadly P1 and P2 are the only points at which floating rocks are present. Rest of the room is without floor and underneath is hot lava.\nKumaru has to go from P1 to P2 but there are no floating rocks to walk on. Kumaru knows a spell that can make the rocks appear but only on the integral coordinates on the straight line joining P1 and P2.\nHow many rocks can appear at locations (x,y) on the line segment between P1 and P2 (excluding P1 and P2) which satisfy the condition that both x and y are integers?\nInput Format\nThe first line contains a single integer T, the number of test cases. T lines follow.\nEach of the following T lines contains one test case each. Each test case contains 4 integers x1, y1, x2 and y2 separated by a single space.\nOutput Format\nA single line containing the number of rocks.\nConstraints\n1 <= T <= 105\n-109 <= x1, y1, x2, y2 <= 109\nSample input\n3\n0 2 4 0\n2 2 5 5\n1 9 8 16\nSample Output\n1\n2\n6\nExplanation\nCase 1: As shown in the figure, between (0,2) and (4,0) there's only 1 integral point (2,1) hence 1 rock.\nCase 2: Between (2,2) and (5,5) lies (3,3) and (4,4), hence 2 rocks.\nCase 3: Between (1,9) and (8,16) there lies 6 rocks at positions (2,10) (3,11) (4,12) (5,13) (6,14) (7,15).",
        "56": "We all know how to calculate using operations by multiplying by a total of times. The drawback to this method is that can be large, which makes exponentiation very slow.\nThere is a well known method called Russian Peasant Multiplication that you can read about here. Now let's use this to raise some complex numbers to powers!\nYou're given queries where each query consists of four integers: , , , and . For each query, calculate (where is an imaginary unit) and then print the respective values of and as two space-separated integers on a new line.\nInput Format\nThe first line contains a single integer, , denoting the number of queries.\nEach of the subsequent lines describes a query in the form of four space-separated integers: , , , and (respectively).\nConstraints\nOutput Format\nFor each query, print the two space-separated integers denoting the respective values of and on a new line.\nSample Input\n3\n2 0 9 1000\n0 1 5 10\n8 2 10 1000000000\nSample Output\n512 0\n0 1\n880332800 927506432\nExplanation\nIn the first query, we have , , , . We calculate the following:",
        "57": "There are groups of friends, and each group is numbered from 1 to . The th group contains people.\nThey live near a bus stop, and only a single bus operates on this route. An empty bus arrives at the bus stop and all the groups want to travel by the bus.\nHowever, group of friends do not want to get separated. So they enter the bus only if the bus can carry the entire group.\nMoreover, the groups do not want to change their relative positioning while travelling. In other words, group 3 cannot travel by bus, unless group 1 and group 2 have either (a) already traveled by the bus in the previous trip or (b) they are also sitting inside the bus at present.\nYou are given that a bus of size can carry people simultaneously.\n\nFind the size of the bus so that (1) the bus can transport all the groups and (2) every time when the bus starts from the bus station, there is no empty space in the bus (i.e. the total number of people present inside the bus is equal to )?\nInput Format\nThe first line contains an integer . The second line contains space-separated integers .\nOutput Format\nPrint all possible sizes of the bus in an increasing order.\nSample Input\n8\n1 2 1 1 1 2 1 3\nSample Output\n3 4 6 12\nSample Explanation\nIn the above example, = 1, = 2, = 1, = 1, = 1, = 2, = 1, = 3.\nIf x = 1 : In the first trip, go by the bus. There will be no second trip because the bus cannot accommodate group 2. Hence \"x = 1\" is not the required answer.\nIf x = 2 : No bus trip is possible. That's because cannot go alone, as one seat will be left vacant in the bus. And, & cannot go together, because the bus is cannot accommodate both the groups simultaneously.\nIf x = 3 : In the first trip, & go by the bus. In the second trip, , & go by the bus. In the third trip, & go by the bus. In the fourth trip, go by the bus.\nIf x = 4 : In the first trip, , & go by the bus. In the second trip, , & go by the bus. In the third trip, & go by the bus.\nSimilarly you can figure out the output for x= 5, 6 & 7.",
        "58": "Keko has dots in a 2-D coordinate plane. He wants to measure the gap between the most distant two dots. To make the problem easier, Keko decided to change each dot's or coordinate to zero.\nHelp Keko calculate the distance!\nInput Format\nThe first line contains an integer, , the number of dots.\nThe next lines each contain the integer coordinates of the dots in fashion.\nConstraints\n\nIt is guaranteed that all dots are distinct, and either their or coordinate is equal to .\nOutput Format\nPrint the distance between the most distant dots with an absolute error of, at most, .\nSample Input\n4\n-1 0\n1 0\n0 1\n0 -1\nSample Output\n2.000000\nExplanation\nIn the sample, the most distant dots are located at and .\nThe distance between them is .",
        "59": "Jim runs a big burger restaurant and, to entertain his customers, he always tell them jokes. He is running out of jokes and he needs you to help him find new ones.\nAn often heard programmer joke goes like this:\n\"Why do programmers always mix up Christmas and Halloween? Because Dec 25 is Oct 31\".\nGot it? :-) It is because (25 in Decimal) is equal to (31 in Octal).\nIf we are talking about dates, then let be the month and be the date and the corresponding value be ( in base ). Let's describe some slightly different jokes:\n\"Why do programmers always mix up event and event ? Because \".\nHere means the month of event and the day of event . Similar for and .\nJim knows that his customers love this kind of jokes. That's why he gives you a calendar with events in it and asks you to count the number of such jokes he can create using the given events.\nTwo jokes ( and ) differ if they don't contain the same events.\nNote:\nThe given numbers are all represented with digits from 0-9, that's why for months like or , we can't use additional characters to represent 10 or 11.\nIt might happen, that a special event cannot be used for a joke because the base conversion is invalid. For example is not possible since base can only contain digits and .\nUnary base is invalid.\nTwo events can have the same date.\nInput Format\nOn the first line you will get . The following lines you will be given the dates , of the special events, each separated by a single space.\nOutput Format\nPrint the number of jokes Jim can make.\nConstraints\n(, ) will be a valid date in the Gregorian Calendar without leap day.\nSample Input #1\n2\n10 25\n8 31\nSample Output #1\n1\nSample Input #2\n2\n2 25\n2 25\nSample Output #2\n0\nSample Input #3\n2\n11 10\n10 11\nSample Output #3\n1\nExplanation\nThere are two special events happening on and . He can make one joke, namely the one described in the description.\nIn the second test case there are no valid dates we can use for our jokes since 25 is not defined for base 2.\nIn the third test case .",
        "60": "Adam is standing at point in an infinite 2D grid. He wants to know if he can reach point or not. The only operation he can do is to move to point from some point . It is given that he can move to any point on this 2D grid, i.e., the points having positive or negative (or ) co-ordinates.\nTell Adam whether he can reach or not.\nInput Format\nThe first line contains an integer, , followed by lines, each containing space-separated integers i.e. , , and .\nConstraints\nOutput Format\nFor each test case, display YES or NO that indicates if Adam can reach or not.\nSample Input\n3\n1 1 2 3\n2 1 2 3\n3 3 1 1\nSample Output\nYES\nYES\nNO\nExplanation\n(1,1) -> (2,1) -> (2,3).",
        "61": "Since you know how to compute large Fibonacci numbers quickly using matrix exponentiation, let's take things to the next level.\nLet , , , , , , and be positive integers. We define two bi-infinite sequences\nand\nas follows:\nand\nGiven and the eight integers above, find and . Since these values can be very large, output them modulo .\nThis link may help you get started: http:\/\/fusharblog.com\/solving-linear-recurrence-for-programming-contest\/\nInput Format\nThe first line of input contains , the number of test cases.\nEach test case consists of a single line containing nine space separated integers: , , , , , , , and , respectively.\nConstraints\n\n\nOutput Format\nFor each test case, output a single line containing two space separated integers, and .\nSample Input\n3\n1 2 3 1 1 2 3 1 10\n1 2 3 2 2 1 1 4 10\n1 2 3 4 5 6 7 8 90\nSample Output\n1910 1910\n909323 11461521\n108676813 414467031\nExplanation\nIn the second test case, the following is a table of values and for :\nRemember that if .\nOne can verify this table by using the definition above. For example:",
        "62": "Manipulating numbers is at the core of a programmer's job. To test how well you know their properties, you are asked to solve the following problem.\nYou are given non-negative integers , , ..., . You want to know whether it's possible to construct a new integer using all the digits of these numbers such that it would be divisible by . You can reorder the digits as you want. The resulting number can contain leading zeros.\nFor example, consider the numbers from which you have to construct a new integer as described above. Numerous arrangements of digits are possible; but we have illustrated one below.\nComplete the function canConstruct which takes an integer array as input and return \"Yes\" or \"No\" based on whether or not the required integer can be formed.\nInput Format\nThe first line contains a single integer denoting the number of queries. The following lines describe the queries.\nEach query is described in two lines. The first of these lines contains a single integer . The second contains space-separated integers , , ..., .\nConstraints\nSubtasks\nFor 33.33% of the total score:\nOutput Format\nFor each query, print a single line containing \"Yes\" if it's possible to construct such integer and \"No\" otherwise.\nSample Input 0\n3\n1\n9\n3\n40 50 90\n2\n1 4\nSample Output 0\nYes\nYes\nNo\nExplanation 0\nIn the first example, is divisible by , so the answer is \"Yes\".\nIn the second example you can construct the number which is divisible by , so the answer is \"Yes\". Note that there may be other numbers you can construct, some of which are shown in the challenge statement.\nIn the third example, the only possible numbers are and , but both of them are not divisible by , so the answer is \"No\".",
        "63": "You are given 3 numbers a, b and x. You need to output the multiple of x which is closest to ab. If more than one answer exists , display the smallest one.\nInput Format\nThe first line contains T, the number of testcases.\nT lines follow, each line contains 3 space separated integers (a, b and x respectively)\nConstraints\n1 \u2264 T \u2264 105\n1 \u2264 x \u2264 109\n0 < ab \u2264 109\n1 \u2264 a \u2264 109\n-109 \u2264 b \u2264 109\nOutput Format\nFor each test case , output the multiple of x which is closest to ab\nSample Input 0\n3\n349 1 4\n395 1 7\n4 -2 2\nSample Output 0\n348\n392\n0\nExplanation 0\nThe closest multiple of 4 to 349 is 348.\nThe closest multiple of 7 to 395 is 392.\nThe closest multiple of 2 to 1\/16 is 0.",
        "64": "Sherlock is stuck while solving a problem: Given an array , he wants to know if there exists a subset of this array which follows these statements:\nis a non-empty subset.\nThere exists no integer which divides all elements of .\nThere are no elements of which are equal to another.\nInput Format\nThe first line of input contains an integer, , representing the number of test cases. Then test cases follow.\nEach test case consists of two lines. The first line contains an integer, , representing the size of array . In the second line there are space-separated integers, , representing the elements of array .\nConstraints\n\n\nOutput Format\nPrint YES if such a subset exists; otherwise, print NO.\nSample Input\n3\n3\n1 2 3\n2\n2 4\n3\n5 5 5\nSample Output\nYES\nNO\nNO\nExplanation\nIn the first test case, are all the possible non-empty subsets, of which the first and the last four satisfy the given condition.\nFor the second test case, all possible subsets are . For all of these subsets, divides each element. Therefore, no non-empty subset exists which satisfies the given condition.\nFor the third test case, the following subsets exist: 123. Because the single element in the first subset is divisible by and the other two subsets have elements that are equal to another, there is no subset that satisfies every condition.",
        "65": "We define a primitive root of prime number to be some integer satisfying the property that all values of where are different.\nFor example: if , we want to look at all values of in the inclusive range from to . For , the powers of (where is in the inclusive range from to ) are as follows:\nNote that each of these evaluates to one of the six distinct integers in the range .\nGiven prime , find and print the following values as two space-separated integers on a new line:\nThe smallest primitive root of prime .\nThe total number of primitive roots of prime .\nNeed Help? Check out a breakdown of this process at Math Stack Exchange.\nInput Format\nA single prime integer denoting .\nConstraints\nOutput Format\nPrint two space-separated integers on a new line, where the first value is the smallest primitive root of and the second value is the total number of primitive roots of .\nSample Input 0\n7\nSample Output 0\n3 2\nExplanation 0\nThe primitive roots of are and , and no other numbers in satisfy our definition of a primitive root. We then print the smallest primitive root () followed by the total number of primitive roots ().",
        "66": "A Smith number is a composite number, the sum of whose digits is the sum of the digits of its prime factors obtained as a result of prime factorization (excluding ). The first few such numbers are , , , , , , and .\nExample:\n\nSo, its prime factors are , , , , and .\nThe sum of its digits is .\nThe sum of the digits of its factors is .\nSimilarly, is a Smith number.\n, and the sum of its digits is the same as the sum of the digits of its prime factors: .\nTask:\nWrite a program to check whether a given integer is a Smith number.\nInput Format\nThere will be only one line of input: , the number which needs to be checked.\nConstraints:\n(max value of an integer of the size of bytes)\nOutput Format\nif the number is a Smith number.\nif the number is a not Smith number.\nSample Input\n378\nSample Output\n1\nExplanation\nIts prime factors are , , , , and .\nThe sum of its digits is .\nThe sum of the digits of its factors is .",
        "67": "Your friend gives you an equation and asks you to find an integer solution for .\nHowever, you know your friend's mischievous nature and suspect that there is no solution to such an equation. Thus, you first want to find out whether there is a solution to it.\nYou may find this link helpful: http:\/\/mathworld.wolfram.com\/EulersCriterion.html\nInput Format\nThe first line contains the number of cases, . lines follow, each containing two integers and separated by a single space.\nConstraints\n, is prime\nOutput Format\nOutput lines, each containing one word: YES, if a solution exists and NO otherwise.\nSample Input\n2  \n5 7  \n4 7\nSample Output\nNO  \nYES\nExplanation\nIn the second test case, we can take , as . Or we can take , as .\nHowever there is no integer which gives modulo when squared.",
        "68": "Lia is fascinated by anything she considers to be a twin. She calls a pairs of positive integers, and , twins if:\nThey are both prime. A prime number is an integer greater than that has no positive divisors other than and itself.\nTheir absolute difference is exactly equal to (i.e., ).\nGiven an inclusive interval of integers from to , can you help Lia find the number of pairs of twins there are in the interval (i.e., )? Note that pairs and are considered to be the same pair.\nInput Format\nTwo space-separated integers describing the respective values of and .\nConstraints\nOutput Format\nPrint a single integer denoting the number of pairs of twins.\nSample Input 0\n3 13\nSample Output 0\n3\nExplanation 0\nThere are three pairs of twins: , and .",
        "69": "You're given three numbers: , , and , and all you have to do is to find the number where\nAs the number can be very large, output it modulo .\nConsider the following link: http:\/\/en.wikipedia.org\/wiki\/Fibonacci_number#Matrix_form\nInput Format\nFirst line contains a single integer - the number of tests. lines follow, each containing three integers: , and .\nConstraints\n\nOutput Format\nFor each test case output a single integer .\nSample Input\n8  \n2 3 1  \n9 1 7  \n9 8 3  \n2 4 9  \n1 7 2  \n1 8 1  \n4 3 1  \n3 7 5  \nSample Output\n3  \n85  \n25  \n178  \n8  \n8  \n3  \n44\nExplanation\nFirst test case is obvious.\nLet's look through the second one:",
        "70": "Consider two points, and . We consider the inversion or point reflection, , of point across point to be a rotation of point around .\nGiven sets of points and , find for each pair of points and print two space-separated integers denoting the respective values of and on a new line.\nFunction Description\nComplete the findPoint function in the editor below.\nfindPoint has the following parameters:\nint px, py, qx, qy: x and y coordinates for points and\nReturns\nint[2]: x and y coordinates of the reflected point\nInput Format\nThe first line contains an integer, , denoting the number of sets of points.\nEach of the subsequent lines contains four space-separated integers that describe the respective values of , , , and defining points and .\nConstraints\nSample Input\n2\n0 0 1 1\n1 1 2 2\nSample Output\n2 2\n3 3\nExplanation\nThe graphs below depict points , , and for the points given as Sample Input:",
        "71": "A person is getting ready to leave and needs a pair of matching socks. If there are colors of socks in the drawer, how many socks need to be removed to be certain of having a matching pair?\nExample\nThere are colors of socks in the drawer. If they remove socks, they may not match. The minimum number to insure success is .\nFunction Description\nComplete the maximumDraws function in the editor below.\nmaximumDraws has the following parameter:\nint n: the number of colors of socks\nReturns\nint: the minimum number of socks to remove to guarantee a matching pair.\nInput Format\nThe first line contains the number of test cases, .\nEach of the following lines contains an integer .\nConstraints\n\nSample Input\n2\n1\n2\nSample Output\n2\n3\nExplanation\nCase 1 : Only 1 color of sock is in the drawer. Any will match.\nCase 2 : 2 colors of socks are in the drawer. The first two removed may not match. At least socks need to be removed to guarantee success.",
        "72": "At the annual meeting of Board of Directors of Acme Inc. If everyone attending shakes hands exactly one time with every other attendee, how many handshakes are there?\nExample\nThere are attendees, , and . shakes hands with and , and shakes hands with . Now they have all shaken hands after handshakes.\nFunction Description\nComplete the handshakes function in the editor below.\nhandshakes has the following parameter:\nint n: the number of attendees\nReturns\nint: the number of handshakes\nInput Format\nThe first line contains the number of test cases .\nEach of the following lines contains an integer, .\nConstraints\n\nSample Input\n2\n1\n2\nSample Output\n0\n1\nExplanation\nCase 1 : The lonely board member shakes no hands, hence 0.\nCase 2 : There are 2 board members, so 1 handshake takes place.",
        "73": "Given integers and , find the smallest integer , such that there exists a triangle of height , base , having an area of at least .\nExample\n\nThe minimum height is . One example is a triangle formed at points (0, 0), (4, 0), (2, 3).\nFunction Description\nComplete the lowestTriangle function in the editor below.\nlowestTriangle has the following parameters:\nint b: the base of the triangle\nint a: the minimum area of the triangle\nReturns\nint: the minimum integer height to form a triangle with an area of at least\nInput Format\nThere are two space-separated integers and , on a single line.\nConstraints\nSample Input 0\n2 2\nSample Output 0\n2\nExplanation 0\nThe task is to find the smallest integer height of the triangle with base and area at least . It turns out, that there are triangles with height , base and area , for example a triangle with corners in the following points: :\nIt can be proved that there is no triangle with integer height smaller than , base and area at least .\nSample Input 1\n17 100\nSample Output 1\n12\nExplanation 1\nThe task is to find the smallest integer height of the triangle with base and area at least . It turns out, that there are triangles with height , base and area , for example a triangle with corners in the following points: .\nIt can be proved that there is no triangle with integer height smaller than , base and area at least .",
        "74": "Luke is daydreaming in Math class. He has a sheet of graph paper with rows and columns, and he imagines that there is an army base in each cell for a total of bases. He wants to drop supplies at strategic points on the sheet, marking each drop point with a red dot. If a base contains at least one package inside or on top of its border fence, then it's considered to be supplied. For example:\nGiven and , what's the minimum number of packages that Luke must drop to supply all of his bases?\nExample\n\nPackages can be dropped at the corner between cells (0, 0), (0, 1), (1, 0) and (1, 1) to supply bases. Another package can be dropped at a border between (0, 2) and (1, 2). This supplies all bases using packages.\nFunction Description\nComplete the gameWithCells function in the editor below.\ngameWithCells has the following parameters:\nint n: the number of rows in the game\nint m: the number of columns in the game\nReturns\nint: the minimum number of packages required\nInput Format\nTwo space-separated integers describing the respective values of and .\nConstraints\nSample Input 0\n2 2\nSample Output 0\n1\nExplanation 0\nLuke has four bases in a grid. If he drops a single package where the walls of all four bases intersect, then those four cells can access the package:\nBecause he managed to supply all four bases with a single supply drop, we print as our answer.",
        "75": "Leonardo loves primes and created queries where each query takes the form of an integer, . For each , count the maximum number of distinct prime factors of any number in the inclusive range .\nNote: Recall that a prime number is only divisible by and itself, and is not a prime number.\nExample\nThe maximum number of distinct prime factors for values less than or equal to is . One value with distinct prime factors is . Another is .\nFunction Description\nComplete the primeCount function in the editor below.\nprimeCount has the following parameters:\nint n: the inclusive limit of the range to check\nReturns\nint: the maximum number of distinct prime factors of any number in the inclusive range .\nInput Format\nThe first line contains an integer, , the number of queries.\nEach of the next lines contains a single integer, .\nConstraints\nSample Input\n6\n1\n2\n3\n500\n5000\n10000000000\nSample Output\n0\n1\n1\n4\n5\n10\nExplanation\nis not prime and its only factor is itself.\nhas prime factor, .\nThe number has prime factor, , has and has prime factors.\nThe product of the first four primes is . While higher value primes may be a factor of some numbers, there will never be more than distinct prime factors for a number in this range.",
        "76": "Cities on a map are connected by a number of roads. The number of roads between each city is in an array and city is the starting location. The number of roads from city to city is the first value in the array, from city to city is the second, and so on.\nHow many paths are there from city to the last city in the list, modulo ?\nExample\n\nThere are roads to city , roads to city and roads to city . The total number of roads is .\nNote\nPass all the towns Ti for i=1 to n-1 in numerical order to reach Tn.\nFunction Description\nComplete the connectingTowns function in the editor below.\nconnectingTowns has the following parameters:\nint n: the number of towns\nint routes[n-1]: the number of routes between towns\nReturns\nint: the total number of routes, modulo 1234567.\nInput Format\nThe first line contains an integer T, T test-cases follow.\nEach test-case has 2 lines.\nThe first line contains an integer N (the number of towns).\nThe second line contains N - 1 space separated integers where the ith integer denotes the number of routes, Ni, from the town Ti to Ti+1\nConstraints\n1 <= T<=1000\n2< N <=100\n1 <= routes[i] <=1000\nSample Input\n2\n3\n1 3\n4\n2 2 2\nSample Output\n3\n8\nExplanation\nCase 1: 1 route from T1 to T2, 3 routes from T2 to T3, hence only 3 routes.\nCase 2: There are 2 routes from each city to the next, hence 2 * 2 * 2 = 8.",
        "77": "Mary has an piece of paper that she wants to cut into pieces according to the following rules:\nShe can only cut one piece of paper at a time, meaning she cannot fold the paper or layer already-cut pieces on top of one another.\nEach cut is a straight line from one side of the paper to the other side of the paper. For example, the diagram below depicts the three possible ways to cut a piece of paper:\nGiven and , find and print the minimum number of cuts Mary must make to cut the paper into squares that are unit in size.\nInput Format\nA single line of two space-separated integers denoting the respective values of and .\nConstraints\nOutput Format\nPrint a long integer denoting the minimum number of cuts needed to cut the entire paper into squares.\nSample Input\n3 1\nSample Output\n2\nExplanation\nMary first cuts the piece of paper into a piece and a piece. She then cuts the piece into two pieces:\nBecause it took her two cuts to get pieces of size , we print as our answer.",
        "78": "There is a sequence whose term is\nEvaluate the series\n\nFind .\nExample\nThe series is .\nFunction Description\nComplete the summingSeries function in the editor below.\nsummingSeries has the following parameter(s):\nint n: the inclusive limit of the range to sum\nReturns\nint: the sum of the sequence, modulo\nInput Format\nThe first line of input contains , the number of test cases.\nEach test case consists of one line containing a single integer .\nConstraints\nSample Input 0\n2\n2\n1\nSample Output 0\n4\n1\nExplanation 0\nCase 1: We have\nCase 2: We have",
        "79": "Sherlock is given square tiles, initially both of whose sides have length placed in an plane. Initially, the bottom left corners of each square are at the origin and their sides are parallel to the axes.\nAt , both squares start moving along line (along the positive and ) with velocities and .\nFor each querydetermine the time at which the overlapping area of tiles is equal to the query value, .\nNote: Assume all distances are in meters, time in seconds and velocities in meters per second.\nFunction Description\nComplete the movingTiles function in the editor below.\nmovingTiles has the following parameter(s):\nint l: side length for the two squares\nint s1: velocity of square 1\nint s2: velocity of square 2\nint queries[q]: the array of queries\nReturns\nint[n]: an array of answers to the queries, in order. Each answer will be considered correct if it is at most away from the true answer.\nInput Format\nFirst line contains integers .\nThe next line contains , the number of queries.\nEach of the next lines consists of one integer in one line.\nConstraints\n\n\n\nSample Input\n10 1 2\n2\n50\n100\nSample Output\n4.1421\n0.0000\nExplanation\nFor the first case, note that the answer is around 4.1421356237..., so any of the following will be accepted:\n4.1421356237\n4.14214\n4.14215000\n4.1421\n4.1422",
        "80": "Kristen loves playing with and comparing numbers. She thinks that if she takes two different positive numbers, the one whose digits sum to a larger number is better than the other. If the sum of digits is equal for both numbers, then she thinks the smaller number is better. For example, Kristen thinks that is better than and that is better than .\nGiven an integer, , can you find the divisor of that Kristin will consider to be the best?\nInput Format\nA single integer denoting .\nConstraints\nOutput Format\nPrint an integer denoting the best divisor of .\nSample Input 0\n12\nSample Output 0\n6\nExplanation 0\nThe set of divisors of can be expressed as . The divisor whose digits sum to the largest number is (which, having only one digit, sums to itself). Thus, we print as our answer.",
        "81": "Martha is interviewing at Subway. One of the rounds of the interview requires her to cut a bread of size into smaller identical pieces such that each piece is a square having maximum possible side length with no left over piece of bread.\nInput Format\nThe first line contains an integer . lines follow. Each line contains two space separated integers and which denote length and breadth of the bread.\nConstraints\nOutput Format\nlines, each containing an integer that denotes the number of squares of maximum size, when the bread is cut as per the given condition.\nSample Input 0\n2\n2 2\n6 9\nSample Output 0\n1\n6\nExplanation 0\nThe 1st testcase has a bread whose original dimensions are , the bread is uncut and is a square. Hence the answer is 1.\nThe 2nd testcase has a bread of size . We can cut it into 54 squares of size , 6 of size . For other sizes we will have leftovers. Hence, the number of squares of maximum size that can be cut is 6.",
        "82": "Akash and Akhil are playing a game. They have balls numbered from to . Akhil asks Akash to reverse the position of the balls, i.e., to change the order from say, 0,1,2,3 to 3,2,1,0. He further asks Akash to reverse the position of the balls times, each time starting from one position further to the right, till he reaches the last ball. So, Akash has to reverse the positions of the ball starting from position, then from position, then from position and so on. At the end of the game, Akhil will ask Akash the final position of any ball numbered . Akash will win the game, if he can answer. Help Akash.\nInput Format\nThe first line contains an integer , i.e., the number of the test cases.\nThe next lines will contain two integers and .\nOutput Format\nPrint the final index of ball in the array.\nConstraints\n\n\nSample Input\n2\n3 1\n5 2\nSample Output\n2\n4\nExplanation\nFor first test case, The rotation will be like this:\n0 1 2 -> 2 1 0 -> 2 0 1 -> 2 0 1\nSo, Index of 1 will be 2.",
        "83": "A strange grid has been recovered from an old book. It has columns and infinite number of rows. The bottom row is considered as the first row. First few rows of the grid are like this:\n..............\n\n..............\n\n20 22 24 26 28\n\n11 13 15 17 19\n\n10 12 14 16 18\n\n 1  3  5  7  9\n\n 0  2  4  6  8\nThe grid grows upwards forever!\nYour task is to find the integer in th column in th row of the grid.\nInput Format\nThere will be two integers r and c separated by a single space.\nConstraints\nRows are indexed from bottom to top and columns are indexed from left to right.\nOutput Format\nOutput the answer in a single line.\nSample Input\n6 3\nSample Output\n25\nExplanation\nThe number in the 6th row and 3rd column is 25.",
        "84": "On the eve of Diwali, Hari is decorating his house with a serial light bulb set. The serial light bulb set has N bulbs placed sequentially on a string which is programmed to change patterns every second. If at least one bulb in the set is on at any given instant of time, how many different patterns of light can the serial light bulb set produce?\nNote: Lighting two bulbs *-* is different from **-\nInput Format\nThe first line contains the number of test cases T, T lines follow.\nEach line contains an integer N, the number of bulbs in the serial light bulb set.\nOutput Format\nPrint the total number of patterns modulo 105\nConstraints\n1 <= T <= 1000\n0< N < 104\nSample Input\n2\n1\n2\nSample Output\n1\n3\nExplanation\nCase 1: 1 bulb can be lit in only 1 way.\nCase 2: 2 bulbs can be lit in -*, *-, ** i.e. 3 ways.",
        "85": "Watson gives an integer to Sherlock and asks him: What is the number of divisors of that are divisible by 2?.\nInput Format\nFirst line contains , the number of testcases. This is followed by lines each containing an integer .\nOutput Format\nFor each testcase, print the required answer in one line.\nConstraints\n\nSample Input\n2\n9\n8\nSample Output\n0\n3\nExplanation\n9 has three divisors 1, 3 and 9 none of which is divisible by 2.\n8 has four divisors 1,2,4 and 8, out of which three are divisible by 2.",
        "86": "Watson asks Sherlock:\nGiven a string S of N 0's and M 1's, how many unique permutations of this string start with 1?\nHelp Sherlock by printing the answer modulo (109+7).\nInput Format\nFirst line contains T, the number of test cases.\nEach test case consists of N and M separated by a space.\nOutput Format\nFor each test case, print the answer modulo (109+7).\nConstraints\n1 \u2264 T \u2264 200\n1 \u2264 N,M \u2264 1000\nSample Input\n2\n1 1\n2 3\nSample Output\n1\n6\nExplanation\nTest1: Out of all unique permutations ie. 01 and 10, only second permutation satisfies. Hence, output is 1.\nTest2: Out of all unique permutations ie. 00111 01011 01101 01110 10011 10101 10110 11001 11010 11100, only 10011 10101 10110 11001 11010 11100 satisfy. Hence, output is 6.",
        "87": "You are given an array A of size N. You are also given an integer Q. Can you figure out the answer to each of the Q queries?\nEach query contains 2 integers x and y, and you need to find whether the value find(x,y) is Odd or Even:\nfind(int x,int y)\n{\n    if(x>y) return 1;\n    ans = pow(A[x],find(x+1,y))\n    return ans\n}\nNote : pow(a,b) = ab.\nInput Format\nThe first line of the input contains an integer N. The next line contains N space separated non-negative integers(whole numbers less than or equal to 9).\nThe line after that contains a positive integer, Q , the denotes the number of queries to follow. Q lines follow, each line contains two positive integer x and y separated by a single space.\nOutput Format\nFor each query, display 'Even' if the value returned is Even, otherwise display 'Odd'.\nConstraints\n2 \u2264 N \u2264 105\n2 \u2264 Q \u2264 105\n1 \u2264 x,y \u2264 N\nx \u2264 y\nArray is 1-indexed.\nNo 2 consecutive entries in the array will be zero.\nSample Input\n3\n3 2 7\n2\n1 2\n2 3\nSample Output\nOdd\nEven\nExplanation\nfind(1,2) = 9, which is Odd\nfind(2,3) = 128, which is even",
        "88": "You are given an integer N. Can you find the least positive integer X made up of only 9's and 0's, such that, X is a multiple of N?\nUpdate\nX is made up of one or more occurences of 9 and zero or more occurences of 0.\nInput Format\nThe first line contains an integer T which denotes the number of test cases. T lines follow.\nEach line contains the integer N for which the solution has to be found.\nOutput Format\nPrint the answer X to STDOUT corresponding to each test case. The output should not contain any leading zeroes.\nConstraints\n1 <= T <= 104\n1 <= N <= 500\nSample Input\n3\n5\n7\n1\nSample Output\n90\n9009\n9\nExplanation\n90 is the smallest number made up of 9's and 0's divisible by 5. Similarly, you can derive for other cases.\nTimelimits Timelimits for this challenge is given here",
        "89": "A word from the English dictionary is taken and arranged as a matrix. e.g. \"MATHEMATICS\"\nMATHE  \nATHEM  \nTHEMA  \nHEMAT  \nEMATI  \nMATIC  \nATICS  \nThere are many ways to trace this matrix in a way that helps you construct this word. You start tracing the matrix from the top-left position and at each iteration, you either move RIGHT or DOWN, and ultimately reach the bottom-right of the matrix. It is assured that any such tracing generates the same word. How many such tracings can be possible for a given word of length m+n-1 written as a matrix of size m * n?\nInput Format\nThe first line of input contains an integer T. T test cases follow.\nEach test case contains 2 space separated integers m & n (in a new line) indicating that the matrix has m rows and each row has n characters.\nConstraints\n1 <= T <= 103\n1 \u2264 m,n \u2264 106\nOutput Format\nPrint the number of ways (S) the word can be traced as explained in the problem statement. If the number is larger than 109+7,\nprint S mod (10^9 + 7) for each testcase (in a new line).\nSample Input\n1\n2 3\nSample Output\n3\nExplanation\nLet's consider a word AWAY written as the matrix\nAWA\nWAY\nHere, the word AWAY can be traced in 3 different ways, traversing either RIGHT or DOWN.\nAWA\n  Y\n\nAW\n AY\n\nA\nWAY\nHence the answer is 3.\nTimelimit Time limit for this challenge is given here",
        "90": "Simon: On the fountain, there should be 2 jugs - a 5 gallon and a 3 gallon. Do you see them? Fill one of the jugs with exactly 4 gallons of water and place it on the scale and the timer will stop. You must be precise; one ounce more or less will result in detonation. If you\u2019re still alive in 5 minutes, we\u2019ll speak.\nBruce: Wait, wait a second. I don\u2019t get it. Do you get it?\nSamuel: No.\nBruce: Get the jugs. Obviously, we can\u2019t \ufb01ll the 3 gallon jug with 4 gallons of water.\nSamuel: Obviously.\nBruce: All right. I know, here we go. We \ufb01ll the 3 gallon jug exactly to the top, right?\nSamuel: Uh huh.\nBruce: Okay, now we pour this 3 gallons into the 5 gallon jug, giving us exactly 3 gallons in the 5 gallon jug, right?\nSamuel: Right, then what?\nBruce: We take the 3 gallon jug and \ufb01ll it a third of the way...\nSamuel: No! He said, \u201cBe precise.\u201d Exactly 4 gallons.\nBruce: Damn! Every cop within 50 miles is running his ass off and I\u2019m out here playing a kids' games in the park.\nSamuel: Hey, you want to focus on the problem at hand?\nGiven 2 jugs of capacity a and b gallons, and an infinite supply of water, can you fill one of the jugs with exactly c gallons of water ?\nInput Format\nFirst line contains the number of testcases T. T lines follow.\nEach line contains 3 space separated integers a, b and c . a and b indicate the capacity of the two jugs respectively, and c denotes the exact capacity with which one of the jugs should be filled.\nOutput Format\nFor each test case, print \"YES\" (in a new line) if one of the jugs can be filled with exactly c gallons of water and \"NO\" (in a new line) if they cannot be filled. ( quotes are for clarity )\nConstraints\n1 \u2264 a, b, c \u2264 103\n1 \u2264 T \u2264 100\nSample Input\n2\n5 3 4\n3 6 4\nSample Output\nYES\nNO\nExplanation\nBruce can do the following, fill jug a with 5 gallons.\na = 5, b = 0\nNow, he can fill jug b with 3 gallons from jug a.\na = 2, b = 3\nHe can empty jug b and empty 2 gallons from jug a to jug b.\na = 0, b = 2\nNow, he can fill jug a with 5 gallons and fill jug b with 1 gallon from jug a. This results in jug a containing exactly 4 gallons of water.\na = 5, b = 2\na = 4, b = 3\nIn the second testcase, it is impossible to generate 4 gallons of water, hence NO.",
        "91": "Alex is attending a Halloween party with his girlfriend, Silvia. At the party, Silvia spots the corner of an infinite chocolate bar (two dimensional, infinitely long in width and length).\nIf the chocolate can be served only as 1 x 1 sized pieces and Alex can cut the chocolate bar exactly times, what is the maximum number of chocolate pieces Alex can cut and give Silvia?\nInput Format\nThe first line contains an integer , the number of test cases. lines follow.\nEach line contains an integer .\nOutput Format\nlines; each line should contain an integer that denotes the maximum number of pieces that can be obtained for each test case.\nConstraints\n\n\nNote: Chocolate must be served in 1 x 1 sized pieces. Alex can't relocate any of the pieces, nor can he place any piece on top of another.\nSample Input #00\n4\n5\n6\n7\n8\nSample Output #00\n6\n9\n12\n16\nExplanation\nThe explanation below is for the first two test cases. The rest of them follow a similar logic.\nFor the first test-case where , you need horizontal and vertical cuts.\nFor the second test case, where , you need horizontal and vertical cuts.",
        "92": "Animesh has empty candy jars, numbered from to , with infinite capacity. He performs operations. Each operation is described by integers, , , and . Here, and are indices of the jars, and is the number of candies to be added inside each jar whose index lies between and (both inclusive). Can you tell the average number of candies after operations?\nExample\n\nThe array has elements that all start at . In the first operation, add to the first elements. Now the array is . In the second operation, add to the last elements (3 - 5). Now the array is and the average is 10. Sincd 10 is already an integer value, it does not need to be rounded.\nFunction Description\nComplete the solve function in the editor below.\nsolve has the following parameters:\nint n: the number of candy jars\nint operations[m][3]: a 2-dimensional array of operations\nReturns\nint: the floor of the average number of canidies in all jars\nInput Format\nThe first line contains two integers, and , separated by a single space.\nlines follow. Each of them contains three integers, , , and , separated by spaces.\nConstraints\n\n\n\nSample Input\nSTDIN       Function\n-----       --------\n5 3         n = 5, operations[] size = 3\n1 2 100     operations = [[1, 2, 100], [2, 5, 100], [3, 4, 100]]\n2 5 100\n3 4 100\nSample Output\n160\nExplanation\nInitially each of the jars contains 0 candies\n0 0 0 0 0  \nFirst operation:\n100 100 0 0 0  \nSecond operation:\n100 200 100 100 100  \nThird operation:\n100 200 200 200 100  \nTotal = 800, Average = 800\/5 = 160",
        "93": "You are given an integer, . Write a program to determine if is an element of the Fibonacci sequence.\nThe first few elements of the Fibonacci sequence are . A Fibonacci sequence is one where every element is a sum of the previous two elements in the sequence. The first two elements are and .\nFormally:\nFunction Description\nComplete the isFibo function in the editor below.\nisFibo has the following parameters:\n- int n: the number to check\nReturns\n- string: either IsFibo or IsNotFibo\nInput Format\nThe first line contains , number of test cases.\nlines follow. Each line contains an integer .\nConstraints\n\nSample Input\nSTDIN   Function\n-----   --------\n3       t = 3\n5       n = 5\n7       n = 7\n8       n = 8\nSample Output\nIsFibo\nIsNotFibo\nIsFibo\nExplanation\nis a Fibonacci number given by\nis not a Fibonacci number\nis a Fibonacci number given by\nTime Limit\nThe time limit for this challenge is given here.",
        "94": "Jim enters a candy shop which has N different types of candies, each candy is of the same price. Jim has enough money to buy K candies. In how many different ways can he purchase K candies if there are infinite candies of each kind?\nInput Format\nThe first line contains an integer T, the number of tests.\nThis is followed by 2T lines which contain T tests:\nThe first line (of each testcase) is an integer N and the second line (of each testcase) is an integer K.\nOutput Format\nFor each testcase, print the number of ways Jim can buy candies from the shop in a newline. If the answer has more than 9 digits, print the last 9 digits.\nNote\nThis problem may expect you to have solved nCr Table\nConstraints\n1 <= T <= 200\n1 <= N < 1000\n1 <= K < 1000\nSample Input\n2\n4\n1\n2\n3\nSample Output\n4\n4\nExplanation\nThere are 2 testcases, for the first testcase we have N = 4 and K = 1, as Jim can buy only 1 candy, he can choose to buy any of the 4 types of candies available. Hence, his answer is 4. For the 2nd testcase, we have N = 2 and K = 3, If we name two chocolates as a and b, he can buy\naaa bbb aab abb \nchocolates, hence 4.",
        "95": "Famous wizard Sumar moonji kumaru is stuck in a huge room and has to save Hermione Granger from a monster. Kumaru is at location P1 given by integral coordinates (x1,y1) and Hermione is at location P2 given by integral coordinates (x2,y2). Sadly P1 and P2 are the only points at which floating rocks are present. Rest of the room is without floor and underneath is hot lava.\nKumaru has to go from P1 to P2 but there are no floating rocks to walk on. Kumaru knows a spell that can make the rocks appear but only on the integral coordinates on the straight line joining P1 and P2.\nHow many rocks can appear at locations (x,y) on the line segment between P1 and P2 (excluding P1 and P2) which satisfy the condition that both x and y are integers?\nInput Format\nThe first line contains a single integer T, the number of test cases. T lines follow.\nEach of the following T lines contains one test case each. Each test case contains 4 integers x1, y1, x2 and y2 separated by a single space.\nOutput Format\nA single line containing the number of rocks.\nConstraints\n1 <= T <= 105\n-109 <= x1, y1, x2, y2 <= 109\nSample input\n3\n0 2 4 0\n2 2 5 5\n1 9 8 16\nSample Output\n1\n2\n6\nExplanation\nCase 1: As shown in the figure, between (0,2) and (4,0) there's only 1 integral point (2,1) hence 1 rock.\nCase 2: Between (2,2) and (5,5) lies (3,3) and (4,4), hence 2 rocks.\nCase 3: Between (1,9) and (8,16) there lies 6 rocks at positions (2,10) (3,11) (4,12) (5,13) (6,14) (7,15).",
        "96": "We all know how to calculate using operations by multiplying by a total of times. The drawback to this method is that can be large, which makes exponentiation very slow.\nThere is a well known method called Russian Peasant Multiplication that you can read about here. Now let's use this to raise some complex numbers to powers!\nYou're given queries where each query consists of four integers: , , , and . For each query, calculate (where is an imaginary unit) and then print the respective values of and as two space-separated integers on a new line.\nInput Format\nThe first line contains a single integer, , denoting the number of queries.\nEach of the subsequent lines describes a query in the form of four space-separated integers: , , , and (respectively).\nConstraints\nOutput Format\nFor each query, print the two space-separated integers denoting the respective values of and on a new line.\nSample Input\n3\n2 0 9 1000\n0 1 5 10\n8 2 10 1000000000\nSample Output\n512 0\n0 1\n880332800 927506432\nExplanation\nIn the first query, we have , , , . We calculate the following:",
        "97": "There are groups of friends, and each group is numbered from 1 to . The th group contains people.\nThey live near a bus stop, and only a single bus operates on this route. An empty bus arrives at the bus stop and all the groups want to travel by the bus.\nHowever, group of friends do not want to get separated. So they enter the bus only if the bus can carry the entire group.\nMoreover, the groups do not want to change their relative positioning while travelling. In other words, group 3 cannot travel by bus, unless group 1 and group 2 have either (a) already traveled by the bus in the previous trip or (b) they are also sitting inside the bus at present.\nYou are given that a bus of size can carry people simultaneously.\n\nFind the size of the bus so that (1) the bus can transport all the groups and (2) every time when the bus starts from the bus station, there is no empty space in the bus (i.e. the total number of people present inside the bus is equal to )?\nInput Format\nThe first line contains an integer . The second line contains space-separated integers .\nOutput Format\nPrint all possible sizes of the bus in an increasing order.\nSample Input\n8\n1 2 1 1 1 2 1 3\nSample Output\n3 4 6 12\nSample Explanation\nIn the above example, = 1, = 2, = 1, = 1, = 1, = 2, = 1, = 3.\nIf x = 1 : In the first trip, go by the bus. There will be no second trip because the bus cannot accommodate group 2. Hence \"x = 1\" is not the required answer.\nIf x = 2 : No bus trip is possible. That's because cannot go alone, as one seat will be left vacant in the bus. And, & cannot go together, because the bus is cannot accommodate both the groups simultaneously.\nIf x = 3 : In the first trip, & go by the bus. In the second trip, , & go by the bus. In the third trip, & go by the bus. In the fourth trip, go by the bus.\nIf x = 4 : In the first trip, , & go by the bus. In the second trip, , & go by the bus. In the third trip, & go by the bus.\nSimilarly you can figure out the output for x= 5, 6 & 7.",
        "98": "Keko has dots in a 2-D coordinate plane. He wants to measure the gap between the most distant two dots. To make the problem easier, Keko decided to change each dot's or coordinate to zero.\nHelp Keko calculate the distance!\nInput Format\nThe first line contains an integer, , the number of dots.\nThe next lines each contain the integer coordinates of the dots in fashion.\nConstraints\n\nIt is guaranteed that all dots are distinct, and either their or coordinate is equal to .\nOutput Format\nPrint the distance between the most distant dots with an absolute error of, at most, .\nSample Input\n4\n-1 0\n1 0\n0 1\n0 -1\nSample Output\n2.000000\nExplanation\nIn the sample, the most distant dots are located at and .\nThe distance between them is .",
        "99": "Jim runs a big burger restaurant and, to entertain his customers, he always tell them jokes. He is running out of jokes and he needs you to help him find new ones.\nAn often heard programmer joke goes like this:\n\"Why do programmers always mix up Christmas and Halloween? Because Dec 25 is Oct 31\".\nGot it? :-) It is because (25 in Decimal) is equal to (31 in Octal).\nIf we are talking about dates, then let be the month and be the date and the corresponding value be ( in base ). Let's describe some slightly different jokes:\n\"Why do programmers always mix up event and event ? Because \".\nHere means the month of event and the day of event . Similar for and .\nJim knows that his customers love this kind of jokes. That's why he gives you a calendar with events in it and asks you to count the number of such jokes he can create using the given events.\nTwo jokes ( and ) differ if they don't contain the same events.\nNote:\nThe given numbers are all represented with digits from 0-9, that's why for months like or , we can't use additional characters to represent 10 or 11.\nIt might happen, that a special event cannot be used for a joke because the base conversion is invalid. For example is not possible since base can only contain digits and .\nUnary base is invalid.\nTwo events can have the same date.\nInput Format\nOn the first line you will get . The following lines you will be given the dates , of the special events, each separated by a single space.\nOutput Format\nPrint the number of jokes Jim can make.\nConstraints\n(, ) will be a valid date in the Gregorian Calendar without leap day.\nSample Input #1\n2\n10 25\n8 31\nSample Output #1\n1\nSample Input #2\n2\n2 25\n2 25\nSample Output #2\n0\nSample Input #3\n2\n11 10\n10 11\nSample Output #3\n1\nExplanation\nThere are two special events happening on and . He can make one joke, namely the one described in the description.\nIn the second test case there are no valid dates we can use for our jokes since 25 is not defined for base 2.\nIn the third test case .",
        "100": "Adam is standing at point in an infinite 2D grid. He wants to know if he can reach point or not. The only operation he can do is to move to point from some point . It is given that he can move to any point on this 2D grid, i.e., the points having positive or negative (or ) co-ordinates.\nTell Adam whether he can reach or not.\nInput Format\nThe first line contains an integer, , followed by lines, each containing space-separated integers i.e. , , and .\nConstraints\nOutput Format\nFor each test case, display YES or NO that indicates if Adam can reach or not.\nSample Input\n3\n1 1 2 3\n2 1 2 3\n3 3 1 1\nSample Output\nYES\nYES\nNO\nExplanation\n(1,1) -> (2,1) -> (2,3).",
        "101": "Since you know how to compute large Fibonacci numbers quickly using matrix exponentiation, let's take things to the next level.\nLet , , , , , , and be positive integers. We define two bi-infinite sequences\nand\nas follows:\nand\nGiven and the eight integers above, find and . Since these values can be very large, output them modulo .\nThis link may help you get started: http:\/\/fusharblog.com\/solving-linear-recurrence-for-programming-contest\/\nInput Format\nThe first line of input contains , the number of test cases.\nEach test case consists of a single line containing nine space separated integers: , , , , , , , and , respectively.\nConstraints\n\n\nOutput Format\nFor each test case, output a single line containing two space separated integers, and .\nSample Input\n3\n1 2 3 1 1 2 3 1 10\n1 2 3 2 2 1 1 4 10\n1 2 3 4 5 6 7 8 90\nSample Output\n1910 1910\n909323 11461521\n108676813 414467031\nExplanation\nIn the second test case, the following is a table of values and for :\nRemember that if .\nOne can verify this table by using the definition above. For example:",
        "102": "Manipulating numbers is at the core of a programmer's job. To test how well you know their properties, you are asked to solve the following problem.\nYou are given non-negative integers , , ..., . You want to know whether it's possible to construct a new integer using all the digits of these numbers such that it would be divisible by . You can reorder the digits as you want. The resulting number can contain leading zeros.\nFor example, consider the numbers from which you have to construct a new integer as described above. Numerous arrangements of digits are possible; but we have illustrated one below.\nComplete the function canConstruct which takes an integer array as input and return \"Yes\" or \"No\" based on whether or not the required integer can be formed.\nInput Format\nThe first line contains a single integer denoting the number of queries. The following lines describe the queries.\nEach query is described in two lines. The first of these lines contains a single integer . The second contains space-separated integers , , ..., .\nConstraints\nSubtasks\nFor 33.33% of the total score:\nOutput Format\nFor each query, print a single line containing \"Yes\" if it's possible to construct such integer and \"No\" otherwise.\nSample Input 0\n3\n1\n9\n3\n40 50 90\n2\n1 4\nSample Output 0\nYes\nYes\nNo\nExplanation 0\nIn the first example, is divisible by , so the answer is \"Yes\".\nIn the second example you can construct the number which is divisible by , so the answer is \"Yes\". Note that there may be other numbers you can construct, some of which are shown in the challenge statement.\nIn the third example, the only possible numbers are and , but both of them are not divisible by , so the answer is \"No\".",
        "103": "You are given 3 numbers a, b and x. You need to output the multiple of x which is closest to ab. If more than one answer exists , display the smallest one.\nInput Format\nThe first line contains T, the number of testcases.\nT lines follow, each line contains 3 space separated integers (a, b and x respectively)\nConstraints\n1 \u2264 T \u2264 105\n1 \u2264 x \u2264 109\n0 < ab \u2264 109\n1 \u2264 a \u2264 109\n-109 \u2264 b \u2264 109\nOutput Format\nFor each test case , output the multiple of x which is closest to ab\nSample Input 0\n3\n349 1 4\n395 1 7\n4 -2 2\nSample Output 0\n348\n392\n0\nExplanation 0\nThe closest multiple of 4 to 349 is 348.\nThe closest multiple of 7 to 395 is 392.\nThe closest multiple of 2 to 1\/16 is 0.",
        "104": "Sherlock is stuck while solving a problem: Given an array , he wants to know if there exists a subset of this array which follows these statements:\nis a non-empty subset.\nThere exists no integer which divides all elements of .\nThere are no elements of which are equal to another.\nInput Format\nThe first line of input contains an integer, , representing the number of test cases. Then test cases follow.\nEach test case consists of two lines. The first line contains an integer, , representing the size of array . In the second line there are space-separated integers, , representing the elements of array .\nConstraints\n\n\nOutput Format\nPrint YES if such a subset exists; otherwise, print NO.\nSample Input\n3\n3\n1 2 3\n2\n2 4\n3\n5 5 5\nSample Output\nYES\nNO\nNO\nExplanation\nIn the first test case, are all the possible non-empty subsets, of which the first and the last four satisfy the given condition.\nFor the second test case, all possible subsets are . For all of these subsets, divides each element. Therefore, no non-empty subset exists which satisfies the given condition.\nFor the third test case, the following subsets exist: 123. Because the single element in the first subset is divisible by and the other two subsets have elements that are equal to another, there is no subset that satisfies every condition.",
        "105": "We define a primitive root of prime number to be some integer satisfying the property that all values of where are different.\nFor example: if , we want to look at all values of in the inclusive range from to . For , the powers of (where is in the inclusive range from to ) are as follows:\nNote that each of these evaluates to one of the six distinct integers in the range .\nGiven prime , find and print the following values as two space-separated integers on a new line:\nThe smallest primitive root of prime .\nThe total number of primitive roots of prime .\nNeed Help? Check out a breakdown of this process at Math Stack Exchange.\nInput Format\nA single prime integer denoting .\nConstraints\nOutput Format\nPrint two space-separated integers on a new line, where the first value is the smallest primitive root of and the second value is the total number of primitive roots of .\nSample Input 0\n7\nSample Output 0\n3 2\nExplanation 0\nThe primitive roots of are and , and no other numbers in satisfy our definition of a primitive root. We then print the smallest primitive root () followed by the total number of primitive roots ().",
        "106": "A Smith number is a composite number, the sum of whose digits is the sum of the digits of its prime factors obtained as a result of prime factorization (excluding ). The first few such numbers are , , , , , , and .\nExample:\n\nSo, its prime factors are , , , , and .\nThe sum of its digits is .\nThe sum of the digits of its factors is .\nSimilarly, is a Smith number.\n, and the sum of its digits is the same as the sum of the digits of its prime factors: .\nTask:\nWrite a program to check whether a given integer is a Smith number.\nInput Format\nThere will be only one line of input: , the number which needs to be checked.\nConstraints:\n(max value of an integer of the size of bytes)\nOutput Format\nif the number is a Smith number.\nif the number is a not Smith number.\nSample Input\n378\nSample Output\n1\nExplanation\nIts prime factors are , , , , and .\nThe sum of its digits is .\nThe sum of the digits of its factors is .",
        "107": "Your friend gives you an equation and asks you to find an integer solution for .\nHowever, you know your friend's mischievous nature and suspect that there is no solution to such an equation. Thus, you first want to find out whether there is a solution to it.\nYou may find this link helpful: http:\/\/mathworld.wolfram.com\/EulersCriterion.html\nInput Format\nThe first line contains the number of cases, . lines follow, each containing two integers and separated by a single space.\nConstraints\n, is prime\nOutput Format\nOutput lines, each containing one word: YES, if a solution exists and NO otherwise.\nSample Input\n2  \n5 7  \n4 7\nSample Output\nNO  \nYES\nExplanation\nIn the second test case, we can take , as . Or we can take , as .\nHowever there is no integer which gives modulo when squared.",
        "108": "Lia is fascinated by anything she considers to be a twin. She calls a pairs of positive integers, and , twins if:\nThey are both prime. A prime number is an integer greater than that has no positive divisors other than and itself.\nTheir absolute difference is exactly equal to (i.e., ).\nGiven an inclusive interval of integers from to , can you help Lia find the number of pairs of twins there are in the interval (i.e., )? Note that pairs and are considered to be the same pair.\nInput Format\nTwo space-separated integers describing the respective values of and .\nConstraints\nOutput Format\nPrint a single integer denoting the number of pairs of twins.\nSample Input 0\n3 13\nSample Output 0\n3\nExplanation 0\nThere are three pairs of twins: , and .",
        "109": "You're given three numbers: , , and , and all you have to do is to find the number where\nAs the number can be very large, output it modulo .\nConsider the following link: http:\/\/en.wikipedia.org\/wiki\/Fibonacci_number#Matrix_form\nInput Format\nFirst line contains a single integer - the number of tests. lines follow, each containing three integers: , and .\nConstraints\n\nOutput Format\nFor each test case output a single integer .\nSample Input\n8  \n2 3 1  \n9 1 7  \n9 8 3  \n2 4 9  \n1 7 2  \n1 8 1  \n4 3 1  \n3 7 5  \nSample Output\n3  \n85  \n25  \n178  \n8  \n8  \n3  \n44\nExplanation\nFirst test case is obvious.\nLet's look through the second one:",
        "110": "Little Panda has a thing for powers and modulus and he likes challenges. His friend Lucy, however, is impractical and challenges Panda to find both positive and negative powers of a number modulo a particular number. We all know that refers to the modular inverse of modulo (see Wikipedia).\nSince Lucy is impractical, she says that for .\nNow she wants Panda to compute .\nShe also thinks that this problem can be very difficult if the constraints aren't given properly. Little Panda is very confused and leaves the problem to the worthy programmers of the world. Help him in finding the solution.\nInput Format\nThe first line contains , the number of test cases.\nThen lines follow, each line containing , and .\nOutput Format\nOutput the value of .\nConstraints\n\n\n\n\nand are coprime to each other (see Wikipedia)\nSample Input\n3  \n1 2 3  \n3 4 2  \n4 -1 5\nSample Output\n1  \n1  \n4  \nExplanation\nCase 1:\nCase 2:\nCase 3:",
        "111": "Mehta is a very lazy boy. He always sleeps in Maths class. One day his teacher catches him sleeping and tells him that she would mark him absent for the whole semester. While she pretends to be strict, she is actually very kind-hearted. So she wants to give Mehta a chance to prove himself. She gives him a problem. If Mehta can answer it correctly, she will forgive him. Can you help Mehta find the answer to this problem?\nThe problem: The teacher gives Mehta a number and asks him to find out the probability that any proper divisor of would be an even perfect square.\nNote: Even perfect square means the number should be even and a perfect square.\nInput Format\nThe first line of input contains an integer , the number of test cases.\nlines follow, each line containing , the number that the teacher provides.\nOutput Format\nFor each test case, print in a newline the output in format where and are positive coprime integers.\nif is 0, you should simply output 0.\nConstraints\n\nSample Input\n4\n2\n8\n36\n900\nSample Output\n0\n1\/3\n1\/8\n3\/26\nExplaination\nFor the first case , the set of proper divisors is . Since is not an even perfect square, the probability is .\nFor the second case , the set of proper divisors is and only is an even perfect square among them, so probability = .\nFor the third case , the set of proper divisors is , and only is an even perfect square, so probability = .\nFor the fourth case , there will be total of proper divisors and of them are even perfect squares.",
        "112": "Given two long integers, and , find and print a common fraction, , such that and is minimal (recall that ). If there are several fractions having minimal distance to , choose the one with the smallest denominator.\nInput Format\nTwo space-separated long integers describing the respective values of and .\nConstraints\nOutput Format\nPrint your answer in the form n\/d, where is the numerator of the fraction closest to and is the denominator of that fraction.\nSample Input 0\n1 10\nSample Output 0\n22\/7\nExplanation 0\nWe must check all fractions with denominators from to :\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nOf these, the closest approximation is with a distance to of about , so we print 22\/7 as our answer.",
        "113": "Harvey Specter has agreed to take Mike Ross to a meeting filled with brilliant scientists at NSA Headquarters. But, as always, it's not going to be easy for Mike. He has to solve a puzzle given by Harvey.\nHarvey gives two numbers N and K and defines a set A.\nA = { x : x is a natural number \u2264 N }\n(i.e), A = {1,2,3,4,5,6,...., N}\nMike has to find the total number of pairs of elements A[i] and A[j] belonging to the given set, such that, i < j and their sum is divisible by K\nInput Format\nAn integer T followed by T lines, each containing a pair of space separated integers N and K.\nOutput Format\nT integers on separate lines. Each integer denotes the answer corresponding to that test case.\nConstraints\n1<=T<=100\nK<=N<=109\n1<=K<=10000\nSample Input\n2\n10 4\n7 3\nSample Output\n10\n7\nExplanation\nFor the 1st test case, there are 10 pairs whose sum is divisible by 4.\n(1,3), (1,7), (2,6), (2,10), (3,5), (3,9), (4,8), (5,7), (6,10) and (7,9)\nFor the 2nd test case, there are 7 pairs whose sum is divisible by 3.\n(1,2), (1,5), (2,4), (2,7), (3,6), (4,5) and (5,7)",
        "114": "Bob is a dance teacher and he started dance classes recently. He observes a strange attendance pattern among his students. Initially, there are no students. On day i, a new student starts attending the class. The student stops attending the class, if and only if he has attended the class for i consecutive days. Also, the student resumes attending the class, if and only if he has not attended the class for i consecutive days.\nWe denote the student who starts coming on day i as student i.\nTo mark attendance, o denotes present and x denotes absent.\nFor example, the schedule for student 1 from day 1 is as follows:\noxoxoxoxoxoxoxoxoxox...\nThe schedule for the student 3 from day 1 is as follows:\nxxoooxxxoooxxxoooxxx...\n(Student 3 starts attending the class from day 3, and stops attending from day 6, and then starts attending from day 9, and so on. )\nThe schedule for the student 5 from day 1 is as follows. xxxxoooooxxxxxoooooxxxxx...\nBob wants his students to dance in pairs. However, if the number of students coming on day i is odd, then there will be someone who can't find a partner. So Bob wants to know if the number of students coming on day i is even or odd. We denote the number of students coming on day i as N(i). Please find out whether N(i) is even or odd.\nInput format\nThe first line contains an integer, T, which denotes the number of test cases.\nFor each test case, there is an integer i\nOutput Format\nFor each test case, if N(i) is even, then print even.\nIf N(i) is odd, then print one line odd.\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 i \u2264 1018\nSample Input\n4\n1\n2\n3\n4\nSample Output\nodd\nodd\nodd\neven\nExplanation\nThe number of students coming on day 1 is 1: only student #1 attends the class. So N(1)=1 and it is odd.\nThe number of students coming on day 2 is 1: student #2, so n(2)=1 and it is odd.\nThe number of students coming on day 3 is 3: student #1, student #2, and student #3. So N(3)=3 and it is odd.\nThe number of students coming on day 4 is 2: student #3 and student #4. So N(4)=2 and it is even.",
        "115": "You are given a sequence of integers, . Find and print any integer such that is divisor of every except for exactly one element.\nInput Format\nThe first line contains an integer, , denoting the length of the sequence.\nThe second line contains positive space-separated integers describing .\nConstraints\nIt is guaranteed that a solution exists.\nOutput Format\nPrint any positive integer denoting such that is a divisor of exactly of the sequence's elements. must be between and\nSample Input 0\n4\n3 6 18 12\nSample Output 0\n6\nExplanation 0\nWe are given the array . There are two possible answers:\nis a divisor of , , and but not a divisor of .\nis a divisor of , , and but not a divisor of .\nThus, we can print either or as our answer.",
        "116": "The city of Hackerland has formed a new football club and wants to participate in the upcoming Football League of their country. The coach is worried that they will not be able to qualify because they don't have a famous footballer in their team. The assistant coach suggests that the team should buy Cristiano Ronaldo as he can single-handedly get their team qualified.\nOn day 1, today, the club has to pay 'A' HackerCoins in order to buy Ronaldo. After each passing day, the price of buying Ronaldo becomes A times the price on the previous day. Any normal person would buy him on the 1st day itself as the price will be the lowest but since the coach always failed in high school Mathematics, he wants 'B' days to think before making him an offer.\nAs the coach doesn't know how to calculate the price of Ronaldo on the Bth day, he has asked for your help.\nYour task is to tell the price of Ronaldo on the Bth day. Since, the price can be a very large number, please tell him the price modulo 109 + 7.\nInput Format\nThe first line contains an integer T, the number of testcases. It's followed by T lines.\nEach testcase will contain two integers A & B separated by a space.\nOutput Format\nOutput T lines, each corresponding to the answer of the testcase.\nConstraints\n1 <= T <= 10\n1 <= A,B <= 10100000\nA % (109 + 7) != 0\nNote\nBoth integers will have a maximum of 100000 digits.\nSample Input #00:\n5\n3 2\n4 5\n7 4\n34534985349875439875439875349875 93475349759384754395743975349573495\n34543987529435983745230948023948 3498573497543987543985743989120393097595572309482304\nSample Output #00:\n9\n1024\n2401\n735851262\n985546465\nExplanation #00:\nAs value of 32 = 9, So output for first case will be 9.\nSimilarly 45 modulo (109 + 7) = 1024\nSimilarly 74 modulo (109 + 7) = 2401\nSimilarly we can do for others.",
        "117": "Manager of HackerX company is having big trouble. Workers are very unhappy with the way salary is given to them. They want every worker to have the same salary, otherwise they will go on a strike.\nTheir current salaries are denoted by a sequence of N integers: A1, A2, A3 ... AN . Manager has decided to take action and make their salaries equal. He uses the following process until all salaries are equal. This method is called normalization:\na) Select any two different values from A.\nb) Replace larger value with the difference of the two. Difference of two positive integers B and C is defined as |B-C|.\nHe knows that the final value will always be unique.\nNow, Q queries are given. In each query you are given an integer K. K is the amount to be added to everyone's salary as bonus, before the normalization.\nInput Format\nFirst line contains, N and Q, the number of employees and the number of queries. Next line contains N space seperated positive integers denoting the array A. Next Q lines contain queries. Each query consists of one integer per line denoting K.\nOutput Format\nFor each query, print the normalized salary (which is same for everyone in the end) in one line.\nConstraints\n1 \u2264 N \u2264 105\n1 \u2264 Q \u2264 105\n1 \u2264 A[i] \u2264 1014\n0 \u2264 K \u2264 109\nSample Input\n4 2\n9 12 3 6\n0\n3\nSample Output\n3\n3\nExplanation\nfor sample input:\nIf 0 is added to every element of array A, it will remain same.\nOne way to normalise A is this:\n1. Picking 12 and 3 gives: 9 9 3 6\n2. Picking 3 and 6 gives: 9 9 3 3\n3. Picking 9 and 3 gives: 6 9 3 3\n4. Picking 9 and 3 gives: 6 6 3 3\n5. Picking 6 and 3 gives: 3 6 3 3\n6. Picking 6 and 3 gives: 3 3 3 3",
        "118": "After dating for a long time, Akhil is finally going to propose to his girlfriend. She is very strong in mathematics, and will accept his proposal, if and only if Akhil solves a problem given by her. The problem is given below. Help Akhil solve it.\nAkhil is given two numbers N and M, and he has to tell her the remainder when is divided by .\nInput Format\nThe first line contains an integer i.e. the number of test cases.\nEach of the next lines contain two space separated integers, and .\nOutput Format\nlines each containing ouptut for the corresponding test case.\nConstraints\n\n\nSample Input 00\n3\n3 3\n4 7\n5 18\nSample Output 00\n0\n5   \n5\nExplanation\n111 % 3 = 0\n1111 % 7 = 5\n11111%18 = 5",
        "119": "Little Ashish is doing internship at multiple places. Instead of giving parties to his friends he decided to donate candies to children. He likes solving puzzles and playing games. Hence he plays a small game. Suppose there are children. The rules of the game are:\nThe child gets candies ().\nThe child cannot get a candy until and unless all the children before him () gets candies according to rule number .\nOne of his jealous friends, Pipi, asks him \"Given (the number of candies) how many children will you be able to serve?\". Little Ashish fears calculations and cannot solve this problem so he leaves this problem to the worthy programmers of the world. Help little Ashish in finding the solution.\nInput Format\nThe first line contains i.e. number of test cases.\nlines follow, each line containing an integer .\nOutput Format\nFor each testcase, print the output that little Ashish wants in one line.\nConstraints\n\nNote: If the child doesn't get number of candies then it's not counted as a successful donation\nSample Input\n3\n1\n5\n13\nSample Output\n1  \n2  \n2  \nExplanation\nFor . Only the child can get the candy (i.e. candy) and no other child.\nFor . Both the ( candies) and the ( candies) children can get the candies.\nFor . Since the child will get only 8 candies following the rule it won't be counted as a successful donation. Only the and the children can get 1 and 4 candies respectively.",
        "120": "Consider two points, and . We consider the inversion or point reflection, , of point across point to be a rotation of point around .\nGiven sets of points and , find for each pair of points and print two space-separated integers denoting the respective values of and on a new line.\nFunction Description\nComplete the findPoint function in the editor below.\nfindPoint has the following parameters:\nint px, py, qx, qy: x and y coordinates for points and\nReturns\nint[2]: x and y coordinates of the reflected point\nInput Format\nThe first line contains an integer, , denoting the number of sets of points.\nEach of the subsequent lines contains four space-separated integers that describe the respective values of , , , and defining points and .\nConstraints\nSample Input\n2\n0 0 1 1\n1 1 2 2\nSample Output\n2 2\n3 3\nExplanation\nThe graphs below depict points , , and for the points given as Sample Input:",
        "121": "A person is getting ready to leave and needs a pair of matching socks. If there are colors of socks in the drawer, how many socks need to be removed to be certain of having a matching pair?\nExample\nThere are colors of socks in the drawer. If they remove socks, they may not match. The minimum number to insure success is .\nFunction Description\nComplete the maximumDraws function in the editor below.\nmaximumDraws has the following parameter:\nint n: the number of colors of socks\nReturns\nint: the minimum number of socks to remove to guarantee a matching pair.\nInput Format\nThe first line contains the number of test cases, .\nEach of the following lines contains an integer .\nConstraints\n\nSample Input\n2\n1\n2\nSample Output\n2\n3\nExplanation\nCase 1 : Only 1 color of sock is in the drawer. Any will match.\nCase 2 : 2 colors of socks are in the drawer. The first two removed may not match. At least socks need to be removed to guarantee success.",
        "122": "At the annual meeting of Board of Directors of Acme Inc. If everyone attending shakes hands exactly one time with every other attendee, how many handshakes are there?\nExample\nThere are attendees, , and . shakes hands with and , and shakes hands with . Now they have all shaken hands after handshakes.\nFunction Description\nComplete the handshakes function in the editor below.\nhandshakes has the following parameter:\nint n: the number of attendees\nReturns\nint: the number of handshakes\nInput Format\nThe first line contains the number of test cases .\nEach of the following lines contains an integer, .\nConstraints\n\nSample Input\n2\n1\n2\nSample Output\n0\n1\nExplanation\nCase 1 : The lonely board member shakes no hands, hence 0.\nCase 2 : There are 2 board members, so 1 handshake takes place.",
        "123": "Given integers and , find the smallest integer , such that there exists a triangle of height , base , having an area of at least .\nExample\n\nThe minimum height is . One example is a triangle formed at points (0, 0), (4, 0), (2, 3).\nFunction Description\nComplete the lowestTriangle function in the editor below.\nlowestTriangle has the following parameters:\nint b: the base of the triangle\nint a: the minimum area of the triangle\nReturns\nint: the minimum integer height to form a triangle with an area of at least\nInput Format\nThere are two space-separated integers and , on a single line.\nConstraints\nSample Input 0\n2 2\nSample Output 0\n2\nExplanation 0\nThe task is to find the smallest integer height of the triangle with base and area at least . It turns out, that there are triangles with height , base and area , for example a triangle with corners in the following points: :\nIt can be proved that there is no triangle with integer height smaller than , base and area at least .\nSample Input 1\n17 100\nSample Output 1\n12\nExplanation 1\nThe task is to find the smallest integer height of the triangle with base and area at least . It turns out, that there are triangles with height , base and area , for example a triangle with corners in the following points: .\nIt can be proved that there is no triangle with integer height smaller than , base and area at least .",
        "124": "Luke is daydreaming in Math class. He has a sheet of graph paper with rows and columns, and he imagines that there is an army base in each cell for a total of bases. He wants to drop supplies at strategic points on the sheet, marking each drop point with a red dot. If a base contains at least one package inside or on top of its border fence, then it's considered to be supplied. For example:\nGiven and , what's the minimum number of packages that Luke must drop to supply all of his bases?\nExample\n\nPackages can be dropped at the corner between cells (0, 0), (0, 1), (1, 0) and (1, 1) to supply bases. Another package can be dropped at a border between (0, 2) and (1, 2). This supplies all bases using packages.\nFunction Description\nComplete the gameWithCells function in the editor below.\ngameWithCells has the following parameters:\nint n: the number of rows in the game\nint m: the number of columns in the game\nReturns\nint: the minimum number of packages required\nInput Format\nTwo space-separated integers describing the respective values of and .\nConstraints\nSample Input 0\n2 2\nSample Output 0\n1\nExplanation 0\nLuke has four bases in a grid. If he drops a single package where the walls of all four bases intersect, then those four cells can access the package:\nBecause he managed to supply all four bases with a single supply drop, we print as our answer.",
        "125": "Leonardo loves primes and created queries where each query takes the form of an integer, . For each , count the maximum number of distinct prime factors of any number in the inclusive range .\nNote: Recall that a prime number is only divisible by and itself, and is not a prime number.\nExample\nThe maximum number of distinct prime factors for values less than or equal to is . One value with distinct prime factors is . Another is .\nFunction Description\nComplete the primeCount function in the editor below.\nprimeCount has the following parameters:\nint n: the inclusive limit of the range to check\nReturns\nint: the maximum number of distinct prime factors of any number in the inclusive range .\nInput Format\nThe first line contains an integer, , the number of queries.\nEach of the next lines contains a single integer, .\nConstraints\nSample Input\n6\n1\n2\n3\n500\n5000\n10000000000\nSample Output\n0\n1\n1\n4\n5\n10\nExplanation\nis not prime and its only factor is itself.\nhas prime factor, .\nThe number has prime factor, , has and has prime factors.\nThe product of the first four primes is . While higher value primes may be a factor of some numbers, there will never be more than distinct prime factors for a number in this range.",
        "126": "Cities on a map are connected by a number of roads. The number of roads between each city is in an array and city is the starting location. The number of roads from city to city is the first value in the array, from city to city is the second, and so on.\nHow many paths are there from city to the last city in the list, modulo ?\nExample\n\nThere are roads to city , roads to city and roads to city . The total number of roads is .\nNote\nPass all the towns Ti for i=1 to n-1 in numerical order to reach Tn.\nFunction Description\nComplete the connectingTowns function in the editor below.\nconnectingTowns has the following parameters:\nint n: the number of towns\nint routes[n-1]: the number of routes between towns\nReturns\nint: the total number of routes, modulo 1234567.\nInput Format\nThe first line contains an integer T, T test-cases follow.\nEach test-case has 2 lines.\nThe first line contains an integer N (the number of towns).\nThe second line contains N - 1 space separated integers where the ith integer denotes the number of routes, Ni, from the town Ti to Ti+1\nConstraints\n1 <= T<=1000\n2< N <=100\n1 <= routes[i] <=1000\nSample Input\n2\n3\n1 3\n4\n2 2 2\nSample Output\n3\n8\nExplanation\nCase 1: 1 route from T1 to T2, 3 routes from T2 to T3, hence only 3 routes.\nCase 2: There are 2 routes from each city to the next, hence 2 * 2 * 2 = 8.",
        "127": "Mary has an piece of paper that she wants to cut into pieces according to the following rules:\nShe can only cut one piece of paper at a time, meaning she cannot fold the paper or layer already-cut pieces on top of one another.\nEach cut is a straight line from one side of the paper to the other side of the paper. For example, the diagram below depicts the three possible ways to cut a piece of paper:\nGiven and , find and print the minimum number of cuts Mary must make to cut the paper into squares that are unit in size.\nInput Format\nA single line of two space-separated integers denoting the respective values of and .\nConstraints\nOutput Format\nPrint a long integer denoting the minimum number of cuts needed to cut the entire paper into squares.\nSample Input\n3 1\nSample Output\n2\nExplanation\nMary first cuts the piece of paper into a piece and a piece. She then cuts the piece into two pieces:\nBecause it took her two cuts to get pieces of size , we print as our answer.",
        "128": "There is a sequence whose term is\nEvaluate the series\n\nFind .\nExample\nThe series is .\nFunction Description\nComplete the summingSeries function in the editor below.\nsummingSeries has the following parameter(s):\nint n: the inclusive limit of the range to sum\nReturns\nint: the sum of the sequence, modulo\nInput Format\nThe first line of input contains , the number of test cases.\nEach test case consists of one line containing a single integer .\nConstraints\nSample Input 0\n2\n2\n1\nSample Output 0\n4\n1\nExplanation 0\nCase 1: We have\nCase 2: We have",
        "129": "Sherlock is given square tiles, initially both of whose sides have length placed in an plane. Initially, the bottom left corners of each square are at the origin and their sides are parallel to the axes.\nAt , both squares start moving along line (along the positive and ) with velocities and .\nFor each querydetermine the time at which the overlapping area of tiles is equal to the query value, .\nNote: Assume all distances are in meters, time in seconds and velocities in meters per second.\nFunction Description\nComplete the movingTiles function in the editor below.\nmovingTiles has the following parameter(s):\nint l: side length for the two squares\nint s1: velocity of square 1\nint s2: velocity of square 2\nint queries[q]: the array of queries\nReturns\nint[n]: an array of answers to the queries, in order. Each answer will be considered correct if it is at most away from the true answer.\nInput Format\nFirst line contains integers .\nThe next line contains , the number of queries.\nEach of the next lines consists of one integer in one line.\nConstraints\n\n\n\nSample Input\n10 1 2\n2\n50\n100\nSample Output\n4.1421\n0.0000\nExplanation\nFor the first case, note that the answer is around 4.1421356237..., so any of the following will be accepted:\n4.1421356237\n4.14214\n4.14215000\n4.1421\n4.1422",
        "130": "Kristen loves playing with and comparing numbers. She thinks that if she takes two different positive numbers, the one whose digits sum to a larger number is better than the other. If the sum of digits is equal for both numbers, then she thinks the smaller number is better. For example, Kristen thinks that is better than and that is better than .\nGiven an integer, , can you find the divisor of that Kristin will consider to be the best?\nInput Format\nA single integer denoting .\nConstraints\nOutput Format\nPrint an integer denoting the best divisor of .\nSample Input 0\n12\nSample Output 0\n6\nExplanation 0\nThe set of divisors of can be expressed as . The divisor whose digits sum to the largest number is (which, having only one digit, sums to itself). Thus, we print as our answer.",
        "131": "Martha is interviewing at Subway. One of the rounds of the interview requires her to cut a bread of size into smaller identical pieces such that each piece is a square having maximum possible side length with no left over piece of bread.\nInput Format\nThe first line contains an integer . lines follow. Each line contains two space separated integers and which denote length and breadth of the bread.\nConstraints\nOutput Format\nlines, each containing an integer that denotes the number of squares of maximum size, when the bread is cut as per the given condition.\nSample Input 0\n2\n2 2\n6 9\nSample Output 0\n1\n6\nExplanation 0\nThe 1st testcase has a bread whose original dimensions are , the bread is uncut and is a square. Hence the answer is 1.\nThe 2nd testcase has a bread of size . We can cut it into 54 squares of size , 6 of size . For other sizes we will have leftovers. Hence, the number of squares of maximum size that can be cut is 6.",
        "132": "Akash and Akhil are playing a game. They have balls numbered from to . Akhil asks Akash to reverse the position of the balls, i.e., to change the order from say, 0,1,2,3 to 3,2,1,0. He further asks Akash to reverse the position of the balls times, each time starting from one position further to the right, till he reaches the last ball. So, Akash has to reverse the positions of the ball starting from position, then from position, then from position and so on. At the end of the game, Akhil will ask Akash the final position of any ball numbered . Akash will win the game, if he can answer. Help Akash.\nInput Format\nThe first line contains an integer , i.e., the number of the test cases.\nThe next lines will contain two integers and .\nOutput Format\nPrint the final index of ball in the array.\nConstraints\n\n\nSample Input\n2\n3 1\n5 2\nSample Output\n2\n4\nExplanation\nFor first test case, The rotation will be like this:\n0 1 2 -> 2 1 0 -> 2 0 1 -> 2 0 1\nSo, Index of 1 will be 2.",
        "133": "A strange grid has been recovered from an old book. It has columns and infinite number of rows. The bottom row is considered as the first row. First few rows of the grid are like this:\n..............\n\n..............\n\n20 22 24 26 28\n\n11 13 15 17 19\n\n10 12 14 16 18\n\n 1  3  5  7  9\n\n 0  2  4  6  8\nThe grid grows upwards forever!\nYour task is to find the integer in th column in th row of the grid.\nInput Format\nThere will be two integers r and c separated by a single space.\nConstraints\nRows are indexed from bottom to top and columns are indexed from left to right.\nOutput Format\nOutput the answer in a single line.\nSample Input\n6 3\nSample Output\n25\nExplanation\nThe number in the 6th row and 3rd column is 25.",
        "134": "On the eve of Diwali, Hari is decorating his house with a serial light bulb set. The serial light bulb set has N bulbs placed sequentially on a string which is programmed to change patterns every second. If at least one bulb in the set is on at any given instant of time, how many different patterns of light can the serial light bulb set produce?\nNote: Lighting two bulbs *-* is different from **-\nInput Format\nThe first line contains the number of test cases T, T lines follow.\nEach line contains an integer N, the number of bulbs in the serial light bulb set.\nOutput Format\nPrint the total number of patterns modulo 105\nConstraints\n1 <= T <= 1000\n0< N < 104\nSample Input\n2\n1\n2\nSample Output\n1\n3\nExplanation\nCase 1: 1 bulb can be lit in only 1 way.\nCase 2: 2 bulbs can be lit in -*, *-, ** i.e. 3 ways.",
        "135": "Watson gives an integer to Sherlock and asks him: What is the number of divisors of that are divisible by 2?.\nInput Format\nFirst line contains , the number of testcases. This is followed by lines each containing an integer .\nOutput Format\nFor each testcase, print the required answer in one line.\nConstraints\n\nSample Input\n2\n9\n8\nSample Output\n0\n3\nExplanation\n9 has three divisors 1, 3 and 9 none of which is divisible by 2.\n8 has four divisors 1,2,4 and 8, out of which three are divisible by 2.",
        "136": "Watson asks Sherlock:\nGiven a string S of N 0's and M 1's, how many unique permutations of this string start with 1?\nHelp Sherlock by printing the answer modulo (109+7).\nInput Format\nFirst line contains T, the number of test cases.\nEach test case consists of N and M separated by a space.\nOutput Format\nFor each test case, print the answer modulo (109+7).\nConstraints\n1 \u2264 T \u2264 200\n1 \u2264 N,M \u2264 1000\nSample Input\n2\n1 1\n2 3\nSample Output\n1\n6\nExplanation\nTest1: Out of all unique permutations ie. 01 and 10, only second permutation satisfies. Hence, output is 1.\nTest2: Out of all unique permutations ie. 00111 01011 01101 01110 10011 10101 10110 11001 11010 11100, only 10011 10101 10110 11001 11010 11100 satisfy. Hence, output is 6.",
        "137": "You are given an array A of size N. You are also given an integer Q. Can you figure out the answer to each of the Q queries?\nEach query contains 2 integers x and y, and you need to find whether the value find(x,y) is Odd or Even:\nfind(int x,int y)\n{\n    if(x>y) return 1;\n    ans = pow(A[x],find(x+1,y))\n    return ans\n}\nNote : pow(a,b) = ab.\nInput Format\nThe first line of the input contains an integer N. The next line contains N space separated non-negative integers(whole numbers less than or equal to 9).\nThe line after that contains a positive integer, Q , the denotes the number of queries to follow. Q lines follow, each line contains two positive integer x and y separated by a single space.\nOutput Format\nFor each query, display 'Even' if the value returned is Even, otherwise display 'Odd'.\nConstraints\n2 \u2264 N \u2264 105\n2 \u2264 Q \u2264 105\n1 \u2264 x,y \u2264 N\nx \u2264 y\nArray is 1-indexed.\nNo 2 consecutive entries in the array will be zero.\nSample Input\n3\n3 2 7\n2\n1 2\n2 3\nSample Output\nOdd\nEven\nExplanation\nfind(1,2) = 9, which is Odd\nfind(2,3) = 128, which is even",
        "138": "You are given an integer N. Can you find the least positive integer X made up of only 9's and 0's, such that, X is a multiple of N?\nUpdate\nX is made up of one or more occurences of 9 and zero or more occurences of 0.\nInput Format\nThe first line contains an integer T which denotes the number of test cases. T lines follow.\nEach line contains the integer N for which the solution has to be found.\nOutput Format\nPrint the answer X to STDOUT corresponding to each test case. The output should not contain any leading zeroes.\nConstraints\n1 <= T <= 104\n1 <= N <= 500\nSample Input\n3\n5\n7\n1\nSample Output\n90\n9009\n9\nExplanation\n90 is the smallest number made up of 9's and 0's divisible by 5. Similarly, you can derive for other cases.\nTimelimits Timelimits for this challenge is given here",
        "139": "A word from the English dictionary is taken and arranged as a matrix. e.g. \"MATHEMATICS\"\nMATHE  \nATHEM  \nTHEMA  \nHEMAT  \nEMATI  \nMATIC  \nATICS  \nThere are many ways to trace this matrix in a way that helps you construct this word. You start tracing the matrix from the top-left position and at each iteration, you either move RIGHT or DOWN, and ultimately reach the bottom-right of the matrix. It is assured that any such tracing generates the same word. How many such tracings can be possible for a given word of length m+n-1 written as a matrix of size m * n?\nInput Format\nThe first line of input contains an integer T. T test cases follow.\nEach test case contains 2 space separated integers m & n (in a new line) indicating that the matrix has m rows and each row has n characters.\nConstraints\n1 <= T <= 103\n1 \u2264 m,n \u2264 106\nOutput Format\nPrint the number of ways (S) the word can be traced as explained in the problem statement. If the number is larger than 109+7,\nprint S mod (10^9 + 7) for each testcase (in a new line).\nSample Input\n1\n2 3\nSample Output\n3\nExplanation\nLet's consider a word AWAY written as the matrix\nAWA\nWAY\nHere, the word AWAY can be traced in 3 different ways, traversing either RIGHT or DOWN.\nAWA\n  Y\n\nAW\n AY\n\nA\nWAY\nHence the answer is 3.\nTimelimit Time limit for this challenge is given here",
        "140": "Simon: On the fountain, there should be 2 jugs - a 5 gallon and a 3 gallon. Do you see them? Fill one of the jugs with exactly 4 gallons of water and place it on the scale and the timer will stop. You must be precise; one ounce more or less will result in detonation. If you\u2019re still alive in 5 minutes, we\u2019ll speak.\nBruce: Wait, wait a second. I don\u2019t get it. Do you get it?\nSamuel: No.\nBruce: Get the jugs. Obviously, we can\u2019t \ufb01ll the 3 gallon jug with 4 gallons of water.\nSamuel: Obviously.\nBruce: All right. I know, here we go. We \ufb01ll the 3 gallon jug exactly to the top, right?\nSamuel: Uh huh.\nBruce: Okay, now we pour this 3 gallons into the 5 gallon jug, giving us exactly 3 gallons in the 5 gallon jug, right?\nSamuel: Right, then what?\nBruce: We take the 3 gallon jug and \ufb01ll it a third of the way...\nSamuel: No! He said, \u201cBe precise.\u201d Exactly 4 gallons.\nBruce: Damn! Every cop within 50 miles is running his ass off and I\u2019m out here playing a kids' games in the park.\nSamuel: Hey, you want to focus on the problem at hand?\nGiven 2 jugs of capacity a and b gallons, and an infinite supply of water, can you fill one of the jugs with exactly c gallons of water ?\nInput Format\nFirst line contains the number of testcases T. T lines follow.\nEach line contains 3 space separated integers a, b and c . a and b indicate the capacity of the two jugs respectively, and c denotes the exact capacity with which one of the jugs should be filled.\nOutput Format\nFor each test case, print \"YES\" (in a new line) if one of the jugs can be filled with exactly c gallons of water and \"NO\" (in a new line) if they cannot be filled. ( quotes are for clarity )\nConstraints\n1 \u2264 a, b, c \u2264 103\n1 \u2264 T \u2264 100\nSample Input\n2\n5 3 4\n3 6 4\nSample Output\nYES\nNO\nExplanation\nBruce can do the following, fill jug a with 5 gallons.\na = 5, b = 0\nNow, he can fill jug b with 3 gallons from jug a.\na = 2, b = 3\nHe can empty jug b and empty 2 gallons from jug a to jug b.\na = 0, b = 2\nNow, he can fill jug a with 5 gallons and fill jug b with 1 gallon from jug a. This results in jug a containing exactly 4 gallons of water.\na = 5, b = 2\na = 4, b = 3\nIn the second testcase, it is impossible to generate 4 gallons of water, hence NO.",
        "141": "Alex is attending a Halloween party with his girlfriend, Silvia. At the party, Silvia spots the corner of an infinite chocolate bar (two dimensional, infinitely long in width and length).\nIf the chocolate can be served only as 1 x 1 sized pieces and Alex can cut the chocolate bar exactly times, what is the maximum number of chocolate pieces Alex can cut and give Silvia?\nInput Format\nThe first line contains an integer , the number of test cases. lines follow.\nEach line contains an integer .\nOutput Format\nlines; each line should contain an integer that denotes the maximum number of pieces that can be obtained for each test case.\nConstraints\n\n\nNote: Chocolate must be served in 1 x 1 sized pieces. Alex can't relocate any of the pieces, nor can he place any piece on top of another.\nSample Input #00\n4\n5\n6\n7\n8\nSample Output #00\n6\n9\n12\n16\nExplanation\nThe explanation below is for the first two test cases. The rest of them follow a similar logic.\nFor the first test-case where , you need horizontal and vertical cuts.\nFor the second test case, where , you need horizontal and vertical cuts.",
        "142": "Animesh has empty candy jars, numbered from to , with infinite capacity. He performs operations. Each operation is described by integers, , , and . Here, and are indices of the jars, and is the number of candies to be added inside each jar whose index lies between and (both inclusive). Can you tell the average number of candies after operations?\nExample\n\nThe array has elements that all start at . In the first operation, add to the first elements. Now the array is . In the second operation, add to the last elements (3 - 5). Now the array is and the average is 10. Sincd 10 is already an integer value, it does not need to be rounded.\nFunction Description\nComplete the solve function in the editor below.\nsolve has the following parameters:\nint n: the number of candy jars\nint operations[m][3]: a 2-dimensional array of operations\nReturns\nint: the floor of the average number of canidies in all jars\nInput Format\nThe first line contains two integers, and , separated by a single space.\nlines follow. Each of them contains three integers, , , and , separated by spaces.\nConstraints\n\n\n\nSample Input\nSTDIN       Function\n-----       --------\n5 3         n = 5, operations[] size = 3\n1 2 100     operations = [[1, 2, 100], [2, 5, 100], [3, 4, 100]]\n2 5 100\n3 4 100\nSample Output\n160\nExplanation\nInitially each of the jars contains 0 candies\n0 0 0 0 0  \nFirst operation:\n100 100 0 0 0  \nSecond operation:\n100 200 100 100 100  \nThird operation:\n100 200 200 200 100  \nTotal = 800, Average = 800\/5 = 160",
        "143": "You are given an integer, . Write a program to determine if is an element of the Fibonacci sequence.\nThe first few elements of the Fibonacci sequence are . A Fibonacci sequence is one where every element is a sum of the previous two elements in the sequence. The first two elements are and .\nFormally:\nFunction Description\nComplete the isFibo function in the editor below.\nisFibo has the following parameters:\n- int n: the number to check\nReturns\n- string: either IsFibo or IsNotFibo\nInput Format\nThe first line contains , number of test cases.\nlines follow. Each line contains an integer .\nConstraints\n\nSample Input\nSTDIN   Function\n-----   --------\n3       t = 3\n5       n = 5\n7       n = 7\n8       n = 8\nSample Output\nIsFibo\nIsNotFibo\nIsFibo\nExplanation\nis a Fibonacci number given by\nis not a Fibonacci number\nis a Fibonacci number given by\nTime Limit\nThe time limit for this challenge is given here.",
        "144": "Jim enters a candy shop which has N different types of candies, each candy is of the same price. Jim has enough money to buy K candies. In how many different ways can he purchase K candies if there are infinite candies of each kind?\nInput Format\nThe first line contains an integer T, the number of tests.\nThis is followed by 2T lines which contain T tests:\nThe first line (of each testcase) is an integer N and the second line (of each testcase) is an integer K.\nOutput Format\nFor each testcase, print the number of ways Jim can buy candies from the shop in a newline. If the answer has more than 9 digits, print the last 9 digits.\nNote\nThis problem may expect you to have solved nCr Table\nConstraints\n1 <= T <= 200\n1 <= N < 1000\n1 <= K < 1000\nSample Input\n2\n4\n1\n2\n3\nSample Output\n4\n4\nExplanation\nThere are 2 testcases, for the first testcase we have N = 4 and K = 1, as Jim can buy only 1 candy, he can choose to buy any of the 4 types of candies available. Hence, his answer is 4. For the 2nd testcase, we have N = 2 and K = 3, If we name two chocolates as a and b, he can buy\naaa bbb aab abb \nchocolates, hence 4.",
        "145": "Famous wizard Sumar moonji kumaru is stuck in a huge room and has to save Hermione Granger from a monster. Kumaru is at location P1 given by integral coordinates (x1,y1) and Hermione is at location P2 given by integral coordinates (x2,y2). Sadly P1 and P2 are the only points at which floating rocks are present. Rest of the room is without floor and underneath is hot lava.\nKumaru has to go from P1 to P2 but there are no floating rocks to walk on. Kumaru knows a spell that can make the rocks appear but only on the integral coordinates on the straight line joining P1 and P2.\nHow many rocks can appear at locations (x,y) on the line segment between P1 and P2 (excluding P1 and P2) which satisfy the condition that both x and y are integers?\nInput Format\nThe first line contains a single integer T, the number of test cases. T lines follow.\nEach of the following T lines contains one test case each. Each test case contains 4 integers x1, y1, x2 and y2 separated by a single space.\nOutput Format\nA single line containing the number of rocks.\nConstraints\n1 <= T <= 105\n-109 <= x1, y1, x2, y2 <= 109\nSample input\n3\n0 2 4 0\n2 2 5 5\n1 9 8 16\nSample Output\n1\n2\n6\nExplanation\nCase 1: As shown in the figure, between (0,2) and (4,0) there's only 1 integral point (2,1) hence 1 rock.\nCase 2: Between (2,2) and (5,5) lies (3,3) and (4,4), hence 2 rocks.\nCase 3: Between (1,9) and (8,16) there lies 6 rocks at positions (2,10) (3,11) (4,12) (5,13) (6,14) (7,15).",
        "146": "We all know how to calculate using operations by multiplying by a total of times. The drawback to this method is that can be large, which makes exponentiation very slow.\nThere is a well known method called Russian Peasant Multiplication that you can read about here. Now let's use this to raise some complex numbers to powers!\nYou're given queries where each query consists of four integers: , , , and . For each query, calculate (where is an imaginary unit) and then print the respective values of and as two space-separated integers on a new line.\nInput Format\nThe first line contains a single integer, , denoting the number of queries.\nEach of the subsequent lines describes a query in the form of four space-separated integers: , , , and (respectively).\nConstraints\nOutput Format\nFor each query, print the two space-separated integers denoting the respective values of and on a new line.\nSample Input\n3\n2 0 9 1000\n0 1 5 10\n8 2 10 1000000000\nSample Output\n512 0\n0 1\n880332800 927506432\nExplanation\nIn the first query, we have , , , . We calculate the following:",
        "147": "There are groups of friends, and each group is numbered from 1 to . The th group contains people.\nThey live near a bus stop, and only a single bus operates on this route. An empty bus arrives at the bus stop and all the groups want to travel by the bus.\nHowever, group of friends do not want to get separated. So they enter the bus only if the bus can carry the entire group.\nMoreover, the groups do not want to change their relative positioning while travelling. In other words, group 3 cannot travel by bus, unless group 1 and group 2 have either (a) already traveled by the bus in the previous trip or (b) they are also sitting inside the bus at present.\nYou are given that a bus of size can carry people simultaneously.\n\nFind the size of the bus so that (1) the bus can transport all the groups and (2) every time when the bus starts from the bus station, there is no empty space in the bus (i.e. the total number of people present inside the bus is equal to )?\nInput Format\nThe first line contains an integer . The second line contains space-separated integers .\nOutput Format\nPrint all possible sizes of the bus in an increasing order.\nSample Input\n8\n1 2 1 1 1 2 1 3\nSample Output\n3 4 6 12\nSample Explanation\nIn the above example, = 1, = 2, = 1, = 1, = 1, = 2, = 1, = 3.\nIf x = 1 : In the first trip, go by the bus. There will be no second trip because the bus cannot accommodate group 2. Hence \"x = 1\" is not the required answer.\nIf x = 2 : No bus trip is possible. That's because cannot go alone, as one seat will be left vacant in the bus. And, & cannot go together, because the bus is cannot accommodate both the groups simultaneously.\nIf x = 3 : In the first trip, & go by the bus. In the second trip, , & go by the bus. In the third trip, & go by the bus. In the fourth trip, go by the bus.\nIf x = 4 : In the first trip, , & go by the bus. In the second trip, , & go by the bus. In the third trip, & go by the bus.\nSimilarly you can figure out the output for x= 5, 6 & 7.",
        "148": "Keko has dots in a 2-D coordinate plane. He wants to measure the gap between the most distant two dots. To make the problem easier, Keko decided to change each dot's or coordinate to zero.\nHelp Keko calculate the distance!\nInput Format\nThe first line contains an integer, , the number of dots.\nThe next lines each contain the integer coordinates of the dots in fashion.\nConstraints\n\nIt is guaranteed that all dots are distinct, and either their or coordinate is equal to .\nOutput Format\nPrint the distance between the most distant dots with an absolute error of, at most, .\nSample Input\n4\n-1 0\n1 0\n0 1\n0 -1\nSample Output\n2.000000\nExplanation\nIn the sample, the most distant dots are located at and .\nThe distance between them is .",
        "149": "Jim runs a big burger restaurant and, to entertain his customers, he always tell them jokes. He is running out of jokes and he needs you to help him find new ones.\nAn often heard programmer joke goes like this:\n\"Why do programmers always mix up Christmas and Halloween? Because Dec 25 is Oct 31\".\nGot it? :-) It is because (25 in Decimal) is equal to (31 in Octal).\nIf we are talking about dates, then let be the month and be the date and the corresponding value be ( in base ). Let's describe some slightly different jokes:\n\"Why do programmers always mix up event and event ? Because \".\nHere means the month of event and the day of event . Similar for and .\nJim knows that his customers love this kind of jokes. That's why he gives you a calendar with events in it and asks you to count the number of such jokes he can create using the given events.\nTwo jokes ( and ) differ if they don't contain the same events.\nNote:\nThe given numbers are all represented with digits from 0-9, that's why for months like or , we can't use additional characters to represent 10 or 11.\nIt might happen, that a special event cannot be used for a joke because the base conversion is invalid. For example is not possible since base can only contain digits and .\nUnary base is invalid.\nTwo events can have the same date.\nInput Format\nOn the first line you will get . The following lines you will be given the dates , of the special events, each separated by a single space.\nOutput Format\nPrint the number of jokes Jim can make.\nConstraints\n(, ) will be a valid date in the Gregorian Calendar without leap day.\nSample Input #1\n2\n10 25\n8 31\nSample Output #1\n1\nSample Input #2\n2\n2 25\n2 25\nSample Output #2\n0\nSample Input #3\n2\n11 10\n10 11\nSample Output #3\n1\nExplanation\nThere are two special events happening on and . He can make one joke, namely the one described in the description.\nIn the second test case there are no valid dates we can use for our jokes since 25 is not defined for base 2.\nIn the third test case .",
        "150": "Adam is standing at point in an infinite 2D grid. He wants to know if he can reach point or not. The only operation he can do is to move to point from some point . It is given that he can move to any point on this 2D grid, i.e., the points having positive or negative (or ) co-ordinates.\nTell Adam whether he can reach or not.\nInput Format\nThe first line contains an integer, , followed by lines, each containing space-separated integers i.e. , , and .\nConstraints\nOutput Format\nFor each test case, display YES or NO that indicates if Adam can reach or not.\nSample Input\n3\n1 1 2 3\n2 1 2 3\n3 3 1 1\nSample Output\nYES\nYES\nNO\nExplanation\n(1,1) -> (2,1) -> (2,3).",
        "151": "Since you know how to compute large Fibonacci numbers quickly using matrix exponentiation, let's take things to the next level.\nLet , , , , , , and be positive integers. We define two bi-infinite sequences\nand\nas follows:\nand\nGiven and the eight integers above, find and . Since these values can be very large, output them modulo .\nThis link may help you get started: http:\/\/fusharblog.com\/solving-linear-recurrence-for-programming-contest\/\nInput Format\nThe first line of input contains , the number of test cases.\nEach test case consists of a single line containing nine space separated integers: , , , , , , , and , respectively.\nConstraints\n\n\nOutput Format\nFor each test case, output a single line containing two space separated integers, and .\nSample Input\n3\n1 2 3 1 1 2 3 1 10\n1 2 3 2 2 1 1 4 10\n1 2 3 4 5 6 7 8 90\nSample Output\n1910 1910\n909323 11461521\n108676813 414467031\nExplanation\nIn the second test case, the following is a table of values and for :\nRemember that if .\nOne can verify this table by using the definition above. For example:",
        "152": "Manipulating numbers is at the core of a programmer's job. To test how well you know their properties, you are asked to solve the following problem.\nYou are given non-negative integers , , ..., . You want to know whether it's possible to construct a new integer using all the digits of these numbers such that it would be divisible by . You can reorder the digits as you want. The resulting number can contain leading zeros.\nFor example, consider the numbers from which you have to construct a new integer as described above. Numerous arrangements of digits are possible; but we have illustrated one below.\nComplete the function canConstruct which takes an integer array as input and return \"Yes\" or \"No\" based on whether or not the required integer can be formed.\nInput Format\nThe first line contains a single integer denoting the number of queries. The following lines describe the queries.\nEach query is described in two lines. The first of these lines contains a single integer . The second contains space-separated integers , , ..., .\nConstraints\nSubtasks\nFor 33.33% of the total score:\nOutput Format\nFor each query, print a single line containing \"Yes\" if it's possible to construct such integer and \"No\" otherwise.\nSample Input 0\n3\n1\n9\n3\n40 50 90\n2\n1 4\nSample Output 0\nYes\nYes\nNo\nExplanation 0\nIn the first example, is divisible by , so the answer is \"Yes\".\nIn the second example you can construct the number which is divisible by , so the answer is \"Yes\". Note that there may be other numbers you can construct, some of which are shown in the challenge statement.\nIn the third example, the only possible numbers are and , but both of them are not divisible by , so the answer is \"No\".",
        "153": "You are given 3 numbers a, b and x. You need to output the multiple of x which is closest to ab. If more than one answer exists , display the smallest one.\nInput Format\nThe first line contains T, the number of testcases.\nT lines follow, each line contains 3 space separated integers (a, b and x respectively)\nConstraints\n1 \u2264 T \u2264 105\n1 \u2264 x \u2264 109\n0 < ab \u2264 109\n1 \u2264 a \u2264 109\n-109 \u2264 b \u2264 109\nOutput Format\nFor each test case , output the multiple of x which is closest to ab\nSample Input 0\n3\n349 1 4\n395 1 7\n4 -2 2\nSample Output 0\n348\n392\n0\nExplanation 0\nThe closest multiple of 4 to 349 is 348.\nThe closest multiple of 7 to 395 is 392.\nThe closest multiple of 2 to 1\/16 is 0.",
        "154": "Sherlock is stuck while solving a problem: Given an array , he wants to know if there exists a subset of this array which follows these statements:\nis a non-empty subset.\nThere exists no integer which divides all elements of .\nThere are no elements of which are equal to another.\nInput Format\nThe first line of input contains an integer, , representing the number of test cases. Then test cases follow.\nEach test case consists of two lines. The first line contains an integer, , representing the size of array . In the second line there are space-separated integers, , representing the elements of array .\nConstraints\n\n\nOutput Format\nPrint YES if such a subset exists; otherwise, print NO.\nSample Input\n3\n3\n1 2 3\n2\n2 4\n3\n5 5 5\nSample Output\nYES\nNO\nNO\nExplanation\nIn the first test case, are all the possible non-empty subsets, of which the first and the last four satisfy the given condition.\nFor the second test case, all possible subsets are . For all of these subsets, divides each element. Therefore, no non-empty subset exists which satisfies the given condition.\nFor the third test case, the following subsets exist: 123. Because the single element in the first subset is divisible by and the other two subsets have elements that are equal to another, there is no subset that satisfies every condition.",
        "155": "We define a primitive root of prime number to be some integer satisfying the property that all values of where are different.\nFor example: if , we want to look at all values of in the inclusive range from to . For , the powers of (where is in the inclusive range from to ) are as follows:\nNote that each of these evaluates to one of the six distinct integers in the range .\nGiven prime , find and print the following values as two space-separated integers on a new line:\nThe smallest primitive root of prime .\nThe total number of primitive roots of prime .\nNeed Help? Check out a breakdown of this process at Math Stack Exchange.\nInput Format\nA single prime integer denoting .\nConstraints\nOutput Format\nPrint two space-separated integers on a new line, where the first value is the smallest primitive root of and the second value is the total number of primitive roots of .\nSample Input 0\n7\nSample Output 0\n3 2\nExplanation 0\nThe primitive roots of are and , and no other numbers in satisfy our definition of a primitive root. We then print the smallest primitive root () followed by the total number of primitive roots ().",
        "156": "A Smith number is a composite number, the sum of whose digits is the sum of the digits of its prime factors obtained as a result of prime factorization (excluding ). The first few such numbers are , , , , , , and .\nExample:\n\nSo, its prime factors are , , , , and .\nThe sum of its digits is .\nThe sum of the digits of its factors is .\nSimilarly, is a Smith number.\n, and the sum of its digits is the same as the sum of the digits of its prime factors: .\nTask:\nWrite a program to check whether a given integer is a Smith number.\nInput Format\nThere will be only one line of input: , the number which needs to be checked.\nConstraints:\n(max value of an integer of the size of bytes)\nOutput Format\nif the number is a Smith number.\nif the number is a not Smith number.\nSample Input\n378\nSample Output\n1\nExplanation\nIts prime factors are , , , , and .\nThe sum of its digits is .\nThe sum of the digits of its factors is .",
        "157": "Your friend gives you an equation and asks you to find an integer solution for .\nHowever, you know your friend's mischievous nature and suspect that there is no solution to such an equation. Thus, you first want to find out whether there is a solution to it.\nYou may find this link helpful: http:\/\/mathworld.wolfram.com\/EulersCriterion.html\nInput Format\nThe first line contains the number of cases, . lines follow, each containing two integers and separated by a single space.\nConstraints\n, is prime\nOutput Format\nOutput lines, each containing one word: YES, if a solution exists and NO otherwise.\nSample Input\n2  \n5 7  \n4 7\nSample Output\nNO  \nYES\nExplanation\nIn the second test case, we can take , as . Or we can take , as .\nHowever there is no integer which gives modulo when squared.",
        "158": "Lia is fascinated by anything she considers to be a twin. She calls a pairs of positive integers, and , twins if:\nThey are both prime. A prime number is an integer greater than that has no positive divisors other than and itself.\nTheir absolute difference is exactly equal to (i.e., ).\nGiven an inclusive interval of integers from to , can you help Lia find the number of pairs of twins there are in the interval (i.e., )? Note that pairs and are considered to be the same pair.\nInput Format\nTwo space-separated integers describing the respective values of and .\nConstraints\nOutput Format\nPrint a single integer denoting the number of pairs of twins.\nSample Input 0\n3 13\nSample Output 0\n3\nExplanation 0\nThere are three pairs of twins: , and .",
        "159": "You're given three numbers: , , and , and all you have to do is to find the number where\nAs the number can be very large, output it modulo .\nConsider the following link: http:\/\/en.wikipedia.org\/wiki\/Fibonacci_number#Matrix_form\nInput Format\nFirst line contains a single integer - the number of tests. lines follow, each containing three integers: , and .\nConstraints\n\nOutput Format\nFor each test case output a single integer .\nSample Input\n8  \n2 3 1  \n9 1 7  \n9 8 3  \n2 4 9  \n1 7 2  \n1 8 1  \n4 3 1  \n3 7 5  \nSample Output\n3  \n85  \n25  \n178  \n8  \n8  \n3  \n44\nExplanation\nFirst test case is obvious.\nLet's look through the second one:",
        "160": "Little Panda has a thing for powers and modulus and he likes challenges. His friend Lucy, however, is impractical and challenges Panda to find both positive and negative powers of a number modulo a particular number. We all know that refers to the modular inverse of modulo (see Wikipedia).\nSince Lucy is impractical, she says that for .\nNow she wants Panda to compute .\nShe also thinks that this problem can be very difficult if the constraints aren't given properly. Little Panda is very confused and leaves the problem to the worthy programmers of the world. Help him in finding the solution.\nInput Format\nThe first line contains , the number of test cases.\nThen lines follow, each line containing , and .\nOutput Format\nOutput the value of .\nConstraints\n\n\n\n\nand are coprime to each other (see Wikipedia)\nSample Input\n3  \n1 2 3  \n3 4 2  \n4 -1 5\nSample Output\n1  \n1  \n4  \nExplanation\nCase 1:\nCase 2:\nCase 3:",
        "161": "Mehta is a very lazy boy. He always sleeps in Maths class. One day his teacher catches him sleeping and tells him that she would mark him absent for the whole semester. While she pretends to be strict, she is actually very kind-hearted. So she wants to give Mehta a chance to prove himself. She gives him a problem. If Mehta can answer it correctly, she will forgive him. Can you help Mehta find the answer to this problem?\nThe problem: The teacher gives Mehta a number and asks him to find out the probability that any proper divisor of would be an even perfect square.\nNote: Even perfect square means the number should be even and a perfect square.\nInput Format\nThe first line of input contains an integer , the number of test cases.\nlines follow, each line containing , the number that the teacher provides.\nOutput Format\nFor each test case, print in a newline the output in format where and are positive coprime integers.\nif is 0, you should simply output 0.\nConstraints\n\nSample Input\n4\n2\n8\n36\n900\nSample Output\n0\n1\/3\n1\/8\n3\/26\nExplaination\nFor the first case , the set of proper divisors is . Since is not an even perfect square, the probability is .\nFor the second case , the set of proper divisors is and only is an even perfect square among them, so probability = .\nFor the third case , the set of proper divisors is , and only is an even perfect square, so probability = .\nFor the fourth case , there will be total of proper divisors and of them are even perfect squares.",
        "162": "Given two long integers, and , find and print a common fraction, , such that and is minimal (recall that ). If there are several fractions having minimal distance to , choose the one with the smallest denominator.\nInput Format\nTwo space-separated long integers describing the respective values of and .\nConstraints\nOutput Format\nPrint your answer in the form n\/d, where is the numerator of the fraction closest to and is the denominator of that fraction.\nSample Input 0\n1 10\nSample Output 0\n22\/7\nExplanation 0\nWe must check all fractions with denominators from to :\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nFor : , the closest fraction is and the distance is .\nOf these, the closest approximation is with a distance to of about , so we print 22\/7 as our answer.",
        "163": "Harvey Specter has agreed to take Mike Ross to a meeting filled with brilliant scientists at NSA Headquarters. But, as always, it's not going to be easy for Mike. He has to solve a puzzle given by Harvey.\nHarvey gives two numbers N and K and defines a set A.\nA = { x : x is a natural number \u2264 N }\n(i.e), A = {1,2,3,4,5,6,...., N}\nMike has to find the total number of pairs of elements A[i] and A[j] belonging to the given set, such that, i < j and their sum is divisible by K\nInput Format\nAn integer T followed by T lines, each containing a pair of space separated integers N and K.\nOutput Format\nT integers on separate lines. Each integer denotes the answer corresponding to that test case.\nConstraints\n1<=T<=100\nK<=N<=109\n1<=K<=10000\nSample Input\n2\n10 4\n7 3\nSample Output\n10\n7\nExplanation\nFor the 1st test case, there are 10 pairs whose sum is divisible by 4.\n(1,3), (1,7), (2,6), (2,10), (3,5), (3,9), (4,8), (5,7), (6,10) and (7,9)\nFor the 2nd test case, there are 7 pairs whose sum is divisible by 3.\n(1,2), (1,5), (2,4), (2,7), (3,6), (4,5) and (5,7)",
        "164": "Bob is a dance teacher and he started dance classes recently. He observes a strange attendance pattern among his students. Initially, there are no students. On day i, a new student starts attending the class. The student stops attending the class, if and only if he has attended the class for i consecutive days. Also, the student resumes attending the class, if and only if he has not attended the class for i consecutive days.\nWe denote the student who starts coming on day i as student i.\nTo mark attendance, o denotes present and x denotes absent.\nFor example, the schedule for student 1 from day 1 is as follows:\noxoxoxoxoxoxoxoxoxox...\nThe schedule for the student 3 from day 1 is as follows:\nxxoooxxxoooxxxoooxxx...\n(Student 3 starts attending the class from day 3, and stops attending from day 6, and then starts attending from day 9, and so on. )\nThe schedule for the student 5 from day 1 is as follows. xxxxoooooxxxxxoooooxxxxx...\nBob wants his students to dance in pairs. However, if the number of students coming on day i is odd, then there will be someone who can't find a partner. So Bob wants to know if the number of students coming on day i is even or odd. We denote the number of students coming on day i as N(i). Please find out whether N(i) is even or odd.\nInput format\nThe first line contains an integer, T, which denotes the number of test cases.\nFor each test case, there is an integer i\nOutput Format\nFor each test case, if N(i) is even, then print even.\nIf N(i) is odd, then print one line odd.\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 i \u2264 1018\nSample Input\n4\n1\n2\n3\n4\nSample Output\nodd\nodd\nodd\neven\nExplanation\nThe number of students coming on day 1 is 1: only student #1 attends the class. So N(1)=1 and it is odd.\nThe number of students coming on day 2 is 1: student #2, so n(2)=1 and it is odd.\nThe number of students coming on day 3 is 3: student #1, student #2, and student #3. So N(3)=3 and it is odd.\nThe number of students coming on day 4 is 2: student #3 and student #4. So N(4)=2 and it is even.",
        "165": "You are given a sequence of integers, . Find and print any integer such that is divisor of every except for exactly one element.\nInput Format\nThe first line contains an integer, , denoting the length of the sequence.\nThe second line contains positive space-separated integers describing .\nConstraints\nIt is guaranteed that a solution exists.\nOutput Format\nPrint any positive integer denoting such that is a divisor of exactly of the sequence's elements. must be between and\nSample Input 0\n4\n3 6 18 12\nSample Output 0\n6\nExplanation 0\nWe are given the array . There are two possible answers:\nis a divisor of , , and but not a divisor of .\nis a divisor of , , and but not a divisor of .\nThus, we can print either or as our answer.",
        "166": "The city of Hackerland has formed a new football club and wants to participate in the upcoming Football League of their country. The coach is worried that they will not be able to qualify because they don't have a famous footballer in their team. The assistant coach suggests that the team should buy Cristiano Ronaldo as he can single-handedly get their team qualified.\nOn day 1, today, the club has to pay 'A' HackerCoins in order to buy Ronaldo. After each passing day, the price of buying Ronaldo becomes A times the price on the previous day. Any normal person would buy him on the 1st day itself as the price will be the lowest but since the coach always failed in high school Mathematics, he wants 'B' days to think before making him an offer.\nAs the coach doesn't know how to calculate the price of Ronaldo on the Bth day, he has asked for your help.\nYour task is to tell the price of Ronaldo on the Bth day. Since, the price can be a very large number, please tell him the price modulo 109 + 7.\nInput Format\nThe first line contains an integer T, the number of testcases. It's followed by T lines.\nEach testcase will contain two integers A & B separated by a space.\nOutput Format\nOutput T lines, each corresponding to the answer of the testcase.\nConstraints\n1 <= T <= 10\n1 <= A,B <= 10100000\nA % (109 + 7) != 0\nNote\nBoth integers will have a maximum of 100000 digits.\nSample Input #00:\n5\n3 2\n4 5\n7 4\n34534985349875439875439875349875 93475349759384754395743975349573495\n34543987529435983745230948023948 3498573497543987543985743989120393097595572309482304\nSample Output #00:\n9\n1024\n2401\n735851262\n985546465\nExplanation #00:\nAs value of 32 = 9, So output for first case will be 9.\nSimilarly 45 modulo (109 + 7) = 1024\nSimilarly 74 modulo (109 + 7) = 2401\nSimilarly we can do for others.",
        "167": "Manager of HackerX company is having big trouble. Workers are very unhappy with the way salary is given to them. They want every worker to have the same salary, otherwise they will go on a strike.\nTheir current salaries are denoted by a sequence of N integers: A1, A2, A3 ... AN . Manager has decided to take action and make their salaries equal. He uses the following process until all salaries are equal. This method is called normalization:\na) Select any two different values from A.\nb) Replace larger value with the difference of the two. Difference of two positive integers B and C is defined as |B-C|.\nHe knows that the final value will always be unique.\nNow, Q queries are given. In each query you are given an integer K. K is the amount to be added to everyone's salary as bonus, before the normalization.\nInput Format\nFirst line contains, N and Q, the number of employees and the number of queries. Next line contains N space seperated positive integers denoting the array A. Next Q lines contain queries. Each query consists of one integer per line denoting K.\nOutput Format\nFor each query, print the normalized salary (which is same for everyone in the end) in one line.\nConstraints\n1 \u2264 N \u2264 105\n1 \u2264 Q \u2264 105\n1 \u2264 A[i] \u2264 1014\n0 \u2264 K \u2264 109\nSample Input\n4 2\n9 12 3 6\n0\n3\nSample Output\n3\n3\nExplanation\nfor sample input:\nIf 0 is added to every element of array A, it will remain same.\nOne way to normalise A is this:\n1. Picking 12 and 3 gives: 9 9 3 6\n2. Picking 3 and 6 gives: 9 9 3 3\n3. Picking 9 and 3 gives: 6 9 3 3\n4. Picking 9 and 3 gives: 6 6 3 3\n5. Picking 6 and 3 gives: 3 6 3 3\n6. Picking 6 and 3 gives: 3 3 3 3",
        "168": "After dating for a long time, Akhil is finally going to propose to his girlfriend. She is very strong in mathematics, and will accept his proposal, if and only if Akhil solves a problem given by her. The problem is given below. Help Akhil solve it.\nAkhil is given two numbers N and M, and he has to tell her the remainder when is divided by .\nInput Format\nThe first line contains an integer i.e. the number of test cases.\nEach of the next lines contain two space separated integers, and .\nOutput Format\nlines each containing ouptut for the corresponding test case.\nConstraints\n\n\nSample Input 00\n3\n3 3\n4 7\n5 18\nSample Output 00\n0\n5   \n5\nExplanation\n111 % 3 = 0\n1111 % 7 = 5\n11111%18 = 5",
        "169": "Little Ashish is doing internship at multiple places. Instead of giving parties to his friends he decided to donate candies to children. He likes solving puzzles and playing games. Hence he plays a small game. Suppose there are children. The rules of the game are:\nThe child gets candies ().\nThe child cannot get a candy until and unless all the children before him () gets candies according to rule number .\nOne of his jealous friends, Pipi, asks him \"Given (the number of candies) how many children will you be able to serve?\". Little Ashish fears calculations and cannot solve this problem so he leaves this problem to the worthy programmers of the world. Help little Ashish in finding the solution.\nInput Format\nThe first line contains i.e. number of test cases.\nlines follow, each line containing an integer .\nOutput Format\nFor each testcase, print the output that little Ashish wants in one line.\nConstraints\n\nNote: If the child doesn't get number of candies then it's not counted as a successful donation\nSample Input\n3\n1\n5\n13\nSample Output\n1  \n2  \n2  \nExplanation\nFor . Only the child can get the candy (i.e. candy) and no other child.\nFor . Both the ( candies) and the ( candies) children can get the candies.\nFor . Since the child will get only 8 candies following the rule it won't be counted as a successful donation. Only the and the children can get 1 and 4 candies respectively.",
        "170": "Manasa was sulking her way through a boring class when suddenly her teacher singled her out and asked her a question. He gave her a number n and Manasa has to come up with the smallest number m which contains atleast n number of zeros at the end of m!. Help Manasa come out of the sticky situation.\nInput Format\nThe first line contains an integer T i.e. the number of Test cases.\nNext T lines will contain an integer n.\nOutput Format\nPrint smallest such number m.\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 n \u2264 1016\nSample Input\n3\n1\n2\n3\nSample Output\n5\n10\n15\nExplanation\nAs 4! = 24 and 5! = 120, so minimum value of m will be 5.\nAs 9! = 362880 and 10! = 3628800, so minimum value of m will be 10.\nAs 14! = 87178291200 and 15! = 1307674368000, so minimum value of m will be 15.",
        "171": "You are given an integer . Consider set . How many subsets with ( denotes xor operation) are there?\nPrint your answer modulo .\nNote that the xorsum of an empty set is zero!\nInput Format\nThe first line contains one integer , the number of testcases.\nThe next lines contain one integer each.\nOutput Format\nOutput lines. Each line is one number, answer to the problem modulo .\nConstraints\n\nSample Input\n2\n1\n2\nSample Output\n2\n4\nExplanation\nFor there are sets - and .\nFor there are sets - , , , .",
        "172": "You recently received a bag of chocolate sticks for Halloween. To prevent you from compulsively eating all the chocolate sticks in one go, your dietician devises the following fun game.\nIn each move, you choose one of the sticks from your bag. Then, you either eat it, or break it into some number of equally-sized parts and save the pieces for later. The lengths of all sticks must always be integers, so breaking a stick into parts is possible only if is a divisor of the stick's length, and .\nNote that this means that a stick of length cannot be broken anymore, and can only be eaten.\nFor example, a chocolate stick of length will be dealt with as shown below.\nGiven the chocolate sticks you received, determine the length of the longest sequence of moves you can perform.\nComplete the function longestSequence which takes an integer array , denoting the lengths of the chocolate sticks, as input. Return the maximum number of moves you can perform to consume the chocolate sticks according the game.\nInput Format\nThe first line contains one integer which is the number of chocolate sticks.\nThe second line contains space-separated integers , the lengths of the chocolate sticks.\nConstraints\nSubtasks\nFor of the total score,\nOutput Format\nPrint a single integer which is the maximum number of moves you can perform.\nSample Input 0\n1\n6\nSample Output 0\n10\nExplanation 0\nYou break a chocolate stick into three equal parts (1 move), then break each of them in half (3 moves), and then eat all six sticks (6 moves). This gives you 10 moves.\nSample Input 1\n3\n1 7 24\nSample Output 1\n55\nExplanation 1\nYou make 1 move using the stick of length 1, then 8 moves using the stick of length 7, and in the end 46 moves using the stick of length 24. This gives 55 moves in total.",
        "173": "Waiter: Good day, sir! What would you like to order?\nLucas: One Cheese & Random Toppings (CRT) pizza for me, please.\nWaiter: Very good, sir. There are toppings to choose from, but you can choose only toppings.\nLucas: Hmm, let's see...\n...Then Lucas started writing down all the ways to choose R toppings from N toppings in a piece of napkin. Soon he realized that it's impossible to write them all, because there are a lot. So he asked himself: How many ways are there to choose exactly toppings from toppings?\nSince Lucas doesn't have all the time in the world, he only wished to calculate the answer modulo , where M is a squarefree number whose prime factors are each less than 50.\nFortunately, Lucas has a Wi-Fi-enabled laptop with him, so he checked the internet and discovered the following useful links:\nLucas' theorem\nChinese remainder theorem (CRT)\nInput Format\nThe first line of input contains , the number of test cases. The following lines describe the test cases.\nEach test case consists of one line containing three space-separated integers: , and .\nConstraints\n\n\n\nis squarefree and its prime factors are less than\nOutput Format\nFor each test case, output one line containing a single integer: the number of ways to choose toppings from toppings, modulo .\nSample Input\n6\n5 2 1001\n5 2 6\n10 5 15\n20 6 210\n13 11 21\n10 9 5    \nSample Output\n10\n4\n12\n120\n15\n0\nExplanation\nCase 1 and 2: Lucas wants to choose 2 toppings from 5 toppings. There are ten ways, namely (assuming the toppings are A, B, C, D and E):\nAB, AC, AD, AE, BC, BD, BE, CD, CE, DE\nThus,\nCase 1:\nCase 2:\nCase 6: We can choose 9 toppings from 10 by removing only one from our choice. Thus, we have ten ways and",
        "174": "We call a sequence of non-negative integers, , awesome if there exists some positive integer such that each element in (where ) is evenly divisible by . Recall that evenly divides if there exists some integer such that .\nGiven an awesome sequence, , and a positive integer, , find and print the maximum integer, , satisfying the following conditions:\nis also awesome.\nInput Format\nThe first line contains two space-separated positive integers, (the length of sequence ) and (the upper bound on answer ), respectively.\nThe second line contains space-separated positive integers describing the respective elements in sequence (i.e., ).\nConstraints\nOutput Format\nPrint a single, non-negative integer denoting the value of (i.e., the maximum integer such that is awesome). As is evenly divisible by any , the answer will always exist.\nSample Input 0\n3 5\n2 6 4\nSample Output 0\n4\nExplanation 0\nThe only common positive divisor of , , and that is is , and we need to find such that . We know because would not evenly divide . When we look at the next possible value, , we find that this is valid because it's evenly divisible by our value. Thus, we print .\nSample Input 1\n1 5\n7\nSample Output 1\n0\nExplanation 1\nBeing prime, is the only possible value of . The only possible such that is (recall that ), so we print as our answer.",
        "175": "Given a positive integer, , find and print the number of pairs of positive integers , where , that exist such that the equation (where and are positive integers) has at least one solution.\nInput Format\nA single positive integer denoting .\nConstraints\nOutput Format\nPrint a single integer denoting the number of such pairs.\nSample Input 0\n4\nSample Output 0\n2\nExplanation 0\nThere are two such pairs: and .",
        "176": "You are given an integer N. Is there a permutation of digits of integer that's divisible by 8? A permutation of digits of integer N is defined as an integer formed by rearranging the digits of N. For example, if the number N = 123, then {123, 132, 213, 231, 312, 321} are the possible permutations.\nInput Format\nThe first line contains an integer T i.e. number of test cases.\nT lines follow, each containing the integer N.\nOutput Format\nFor each test case print YES if there exists one such re-arrangement of N such that it is divisible by 8 or NO if there isn't.\nConstraints\n1 <= T <= 45\n0 <= N <= 10110\nNote\nRe-arrangements of 10 are {10, 01} which boils down to {10, 1}.\nSample Input\n2\n61\n75\nSample Output\nYES\nNO\nExplanation\nTest case #00: 16 is permutation of 61 which is divisible by 8.\nTest case #01: None of permutation of 75, {57, 75}, are divisible by 8.",
        "177": "Given a matrix you need to find the submatrix with the largest number of elements, where the GCD (Greatest Common Divisor) of its elements is greater than one. A submatrix of the matrix is a sub-section composed of contiguous rows and columns of the original matrix.\nInput Two numbers n,m in the first line. Followed by n lines with m numbers in each line.\nConstraints\n1<=N,M<=200\n1<=numbers<=10000\nOutput Just a largest area where GCD is greater than 1.\nSample Input\n3 3\n2 6 8\n4 8 3\n6 9 4\nSample Output\n4\nIf you observe the following submatrix:\n2 6  \n4 8  \nThe GCD is 2. There is no matrix larger than this with a GCD > 1.",
        "178": "John is new to Mathematics and does not know how to calculate GCD of numbers. So he wants you to help him in a few GCD calculations. John has a list A of numbers, indexed 1 to N. He wants to create another list B having N+1 numbers, indexed from 1 to N+1, and having the following property:\nGCD(B[i], B[i+1]) = A[i], \u2200 1 \u2264 i \u2264 N\nAs there can be many such lists, John wants to know the list B in which sum of all elements is minimum. It is guaranteed that such a list will always exist.\nInput Format\nThe first line contains an integer T, i.e., the number of the test cases. T testcases follow.\nThe first line of each test case contains an integer N, i.e., the number of elements in the array.\nThe second line of each test case contains N space separated integers that denote the elements of the list A.\nOutput Format\nFor each test case, print in a new line the list B such that each element is separated by a single space.\nConstraints\n1 \u2264 T \u2264 10\n2 \u2264 N \u2264 103\n1 \u2264 A[i] \u2264 104\n1 \u2264 B[i]\nSample Input\n2\n3\n1 2 3\n3\n5 10 5\nSample Output\n1 2 6 3\n5 10 10 5\nExplanation\nFor the first testcase,\n GCD(1,2) = 1\n GCD(2,6) = 2\n GCD(6,3) = 3\n sum = 1+2+6+3 = 12 which is minimum among all possible list B\nFor the second testcase,\nGCD(5, 10) = 5\nGCD(10, 10) = 10\nGCD(10, 5) = 5\nsum = 5 + 10 + 10 + 5 = 30 which is the minimum among all possible list B",
        "179": "You are given queries where each query is in the form of two integers, and , such that:\nFor each query, find the following value:\nwhere denotes that each is a divisor of and is the sum of the divisors of . Then print the value of on a new line.\nInput Format\nThe first line contains an integer, , denoting the number of queries.\nEach line of the subsequent lines contains two space-separated integers describing the respective values of and for query .\nConstraints\nOutput Format\nFor each query, print a single integer denoting the value of on a new line.\nSample Input 0\n3\n2 0\n3 0\n2 4\nSample Output 0\n72\n13968\n196320\nExplanation 0\nFor the first query, we are given and . Recall that the sequence of prime numbers is . We use and to calculate .\nThe divisors of are . We then use them to calculate the following:\nFinally, we print the value of on a new line. We then follow the same process to answer the second and third queries.",
        "180": "Consider two points, and . We consider the inversion or point reflection, , of point across point to be a rotation of point around .\nGiven sets of points and , find for each pair of points and print two space-separated integers denoting the respective values of and on a new line.\nFunction Description\nComplete the findPoint function in the editor below.\nfindPoint has the following parameters:\nint px, py, qx, qy: x and y coordinates for points and\nReturns\nint[2]: x and y coordinates of the reflected point\nInput Format\nThe first line contains an integer, , denoting the number of sets of points.\nEach of the subsequent lines contains four space-separated integers that describe the respective values of , , , and defining points and .\nConstraints\nSample Input\n2\n0 0 1 1\n1 1 2 2\nSample Output\n2 2\n3 3\nExplanation\nThe graphs below depict points , , and for the points given as Sample Input:",
        "181": "A person is getting ready to leave and needs a pair of matching socks. If there are colors of socks in the drawer, how many socks need to be removed to be certain of having a matching pair?\nExample\nThere are colors of socks in the drawer. If they remove socks, they may not match. The minimum number to insure success is .\nFunction Description\nComplete the maximumDraws function in the editor below.\nmaximumDraws has the following parameter:\nint n: the number of colors of socks\nReturns\nint: the minimum number of socks to remove to guarantee a matching pair.\nInput Format\nThe first line contains the number of test cases, .\nEach of the following lines contains an integer .\nConstraints\n\nSample Input\n2\n1\n2\nSample Output\n2\n3\nExplanation\nCase 1 : Only 1 color of sock is in the drawer. Any will match.\nCase 2 : 2 colors of socks are in the drawer. The first two removed may not match. At least socks need to be removed to guarantee success.",
        "182": "At the annual meeting of Board of Directors of Acme Inc. If everyone attending shakes hands exactly one time with every other attendee, how many handshakes are there?\nExample\nThere are attendees, , and . shakes hands with and , and shakes hands with . Now they have all shaken hands after handshakes.\nFunction Description\nComplete the handshakes function in the editor below.\nhandshakes has the following parameter:\nint n: the number of attendees\nReturns\nint: the number of handshakes\nInput Format\nThe first line contains the number of test cases .\nEach of the following lines contains an integer, .\nConstraints\n\nSample Input\n2\n1\n2\nSample Output\n0\n1\nExplanation\nCase 1 : The lonely board member shakes no hands, hence 0.\nCase 2 : There are 2 board members, so 1 handshake takes place.",
        "183": "Given integers and , find the smallest integer , such that there exists a triangle of height , base , having an area of at least .\nExample\n\nThe minimum height is . One example is a triangle formed at points (0, 0), (4, 0), (2, 3).\nFunction Description\nComplete the lowestTriangle function in the editor below.\nlowestTriangle has the following parameters:\nint b: the base of the triangle\nint a: the minimum area of the triangle\nReturns\nint: the minimum integer height to form a triangle with an area of at least\nInput Format\nThere are two space-separated integers and , on a single line.\nConstraints\nSample Input 0\n2 2\nSample Output 0\n2\nExplanation 0\nThe task is to find the smallest integer height of the triangle with base and area at least . It turns out, that there are triangles with height , base and area , for example a triangle with corners in the following points: :\nIt can be proved that there is no triangle with integer height smaller than , base and area at least .\nSample Input 1\n17 100\nSample Output 1\n12\nExplanation 1\nThe task is to find the smallest integer height of the triangle with base and area at least . It turns out, that there are triangles with height , base and area , for example a triangle with corners in the following points: .\nIt can be proved that there is no triangle with integer height smaller than , base and area at least .",
        "184": "Luke is daydreaming in Math class. He has a sheet of graph paper with rows and columns, and he imagines that there is an army base in each cell for a total of bases. He wants to drop supplies at strategic points on the sheet, marking each drop point with a red dot. If a base contains at least one package inside or on top of its border fence, then it's considered to be supplied. For example:\nGiven and , what's the minimum number of packages that Luke must drop to supply all of his bases?\nExample\n\nPackages can be dropped at the corner between cells (0, 0), (0, 1), (1, 0) and (1, 1) to supply bases. Another package can be dropped at a border between (0, 2) and (1, 2). This supplies all bases using packages.\nFunction Description\nComplete the gameWithCells function in the editor below.\ngameWithCells has the following parameters:\nint n: the number of rows in the game\nint m: the number of columns in the game\nReturns\nint: the minimum number of packages required\nInput Format\nTwo space-separated integers describing the respective values of and .\nConstraints\nSample Input 0\n2 2\nSample Output 0\n1\nExplanation 0\nLuke has four bases in a grid. If he drops a single package where the walls of all four bases intersect, then those four cells can access the package:\nBecause he managed to supply all four bases with a single supply drop, we print as our answer.",
        "185": "Leonardo loves primes and created queries where each query takes the form of an integer, . For each , count the maximum number of distinct prime factors of any number in the inclusive range .\nNote: Recall that a prime number is only divisible by and itself, and is not a prime number.\nExample\nThe maximum number of distinct prime factors for values less than or equal to is . One value with distinct prime factors is . Another is .\nFunction Description\nComplete the primeCount function in the editor below.\nprimeCount has the following parameters:\nint n: the inclusive limit of the range to check\nReturns\nint: the maximum number of distinct prime factors of any number in the inclusive range .\nInput Format\nThe first line contains an integer, , the number of queries.\nEach of the next lines contains a single integer, .\nConstraints\nSample Input\n6\n1\n2\n3\n500\n5000\n10000000000\nSample Output\n0\n1\n1\n4\n5\n10\nExplanation\nis not prime and its only factor is itself.\nhas prime factor, .\nThe number has prime factor, , has and has prime factors.\nThe product of the first four primes is . While higher value primes may be a factor of some numbers, there will never be more than distinct prime factors for a number in this range.",
        "186": "Cities on a map are connected by a number of roads. The number of roads between each city is in an array and city is the starting location. The number of roads from city to city is the first value in the array, from city to city is the second, and so on.\nHow many paths are there from city to the last city in the list, modulo ?\nExample\n\nThere are roads to city , roads to city and roads to city . The total number of roads is .\nNote\nPass all the towns Ti for i=1 to n-1 in numerical order to reach Tn.\nFunction Description\nComplete the connectingTowns function in the editor below.\nconnectingTowns has the following parameters:\nint n: the number of towns\nint routes[n-1]: the number of routes between towns\nReturns\nint: the total number of routes, modulo 1234567.\nInput Format\nThe first line contains an integer T, T test-cases follow.\nEach test-case has 2 lines.\nThe first line contains an integer N (the number of towns).\nThe second line contains N - 1 space separated integers where the ith integer denotes the number of routes, Ni, from the town Ti to Ti+1\nConstraints\n1 <= T<=1000\n2< N <=100\n1 <= routes[i] <=1000\nSample Input\n2\n3\n1 3\n4\n2 2 2\nSample Output\n3\n8\nExplanation\nCase 1: 1 route from T1 to T2, 3 routes from T2 to T3, hence only 3 routes.\nCase 2: There are 2 routes from each city to the next, hence 2 * 2 * 2 = 8.",
        "187": "Mary has an piece of paper that she wants to cut into pieces according to the following rules:\nShe can only cut one piece of paper at a time, meaning she cannot fold the paper or layer already-cut pieces on top of one another.\nEach cut is a straight line from one side of the paper to the other side of the paper. For example, the diagram below depicts the three possible ways to cut a piece of paper:\nGiven and , find and print the minimum number of cuts Mary must make to cut the paper into squares that are unit in size.\nInput Format\nA single line of two space-separated integers denoting the respective values of and .\nConstraints\nOutput Format\nPrint a long integer denoting the minimum number of cuts needed to cut the entire paper into squares.\nSample Input\n3 1\nSample Output\n2\nExplanation\nMary first cuts the piece of paper into a piece and a piece. She then cuts the piece into two pieces:\nBecause it took her two cuts to get pieces of size , we print as our answer.",
        "188": "There is a sequence whose term is\nEvaluate the series\n\nFind .\nExample\nThe series is .\nFunction Description\nComplete the summingSeries function in the editor below.\nsummingSeries has the following parameter(s):\nint n: the inclusive limit of the range to sum\nReturns\nint: the sum of the sequence, modulo\nInput Format\nThe first line of input contains , the number of test cases.\nEach test case consists of one line containing a single integer .\nConstraints\nSample Input 0\n2\n2\n1\nSample Output 0\n4\n1\nExplanation 0\nCase 1: We have\nCase 2: We have",
        "189": "Sherlock is given square tiles, initially both of whose sides have length placed in an plane. Initially, the bottom left corners of each square are at the origin and their sides are parallel to the axes.\nAt , both squares start moving along line (along the positive and ) with velocities and .\nFor each querydetermine the time at which the overlapping area of tiles is equal to the query value, .\nNote: Assume all distances are in meters, time in seconds and velocities in meters per second.\nFunction Description\nComplete the movingTiles function in the editor below.\nmovingTiles has the following parameter(s):\nint l: side length for the two squares\nint s1: velocity of square 1\nint s2: velocity of square 2\nint queries[q]: the array of queries\nReturns\nint[n]: an array of answers to the queries, in order. Each answer will be considered correct if it is at most away from the true answer.\nInput Format\nFirst line contains integers .\nThe next line contains , the number of queries.\nEach of the next lines consists of one integer in one line.\nConstraints\n\n\n\nSample Input\n10 1 2\n2\n50\n100\nSample Output\n4.1421\n0.0000\nExplanation\nFor the first case, note that the answer is around 4.1421356237..., so any of the following will be accepted:\n4.1421356237\n4.14214\n4.14215000\n4.1421\n4.1422",
        "190": "Kristen loves playing with and comparing numbers. She thinks that if she takes two different positive numbers, the one whose digits sum to a larger number is better than the other. If the sum of digits is equal for both numbers, then she thinks the smaller number is better. For example, Kristen thinks that is better than and that is better than .\nGiven an integer, , can you find the divisor of that Kristin will consider to be the best?\nInput Format\nA single integer denoting .\nConstraints\nOutput Format\nPrint an integer denoting the best divisor of .\nSample Input 0\n12\nSample Output 0\n6\nExplanation 0\nThe set of divisors of can be expressed as . The divisor whose digits sum to the largest number is (which, having only one digit, sums to itself). Thus, we print as our answer.",
        "191": "Martha is interviewing at Subway. One of the rounds of the interview requires her to cut a bread of size into smaller identical pieces such that each piece is a square having maximum possible side length with no left over piece of bread.\nInput Format\nThe first line contains an integer . lines follow. Each line contains two space separated integers and which denote length and breadth of the bread.\nConstraints\nOutput Format\nlines, each containing an integer that denotes the number of squares of maximum size, when the bread is cut as per the given condition.\nSample Input 0\n2\n2 2\n6 9\nSample Output 0\n1\n6\nExplanation 0\nThe 1st testcase has a bread whose original dimensions are , the bread is uncut and is a square. Hence the answer is 1.\nThe 2nd testcase has a bread of size . We can cut it into 54 squares of size , 6 of size . For other sizes we will have leftovers. Hence, the number of squares of maximum size that can be cut is 6.",
        "192": "Akash and Akhil are playing a game. They have balls numbered from to . Akhil asks Akash to reverse the position of the balls, i.e., to change the order from say, 0,1,2,3 to 3,2,1,0. He further asks Akash to reverse the position of the balls times, each time starting from one position further to the right, till he reaches the last ball. So, Akash has to reverse the positions of the ball starting from position, then from position, then from position and so on. At the end of the game, Akhil will ask Akash the final position of any ball numbered . Akash will win the game, if he can answer. Help Akash.\nInput Format\nThe first line contains an integer , i.e., the number of the test cases.\nThe next lines will contain two integers and .\nOutput Format\nPrint the final index of ball in the array.\nConstraints\n\n\nSample Input\n2\n3 1\n5 2\nSample Output\n2\n4\nExplanation\nFor first test case, The rotation will be like this:\n0 1 2 -> 2 1 0 -> 2 0 1 -> 2 0 1\nSo, Index of 1 will be 2.",
        "193": "A strange grid has been recovered from an old book. It has columns and infinite number of rows. The bottom row is considered as the first row. First few rows of the grid are like this:\n..............\n\n..............\n\n20 22 24 26 28\n\n11 13 15 17 19\n\n10 12 14 16 18\n\n 1  3  5  7  9\n\n 0  2  4  6  8\nThe grid grows upwards forever!\nYour task is to find the integer in th column in th row of the grid.\nInput Format\nThere will be two integers r and c separated by a single space.\nConstraints\nRows are indexed from bottom to top and columns are indexed from left to right.\nOutput Format\nOutput the answer in a single line.\nSample Input\n6 3\nSample Output\n25\nExplanation\nThe number in the 6th row and 3rd column is 25.",
        "194": "On the eve of Diwali, Hari is decorating his house with a serial light bulb set. The serial light bulb set has N bulbs placed sequentially on a string which is programmed to change patterns every second. If at least one bulb in the set is on at any given instant of time, how many different patterns of light can the serial light bulb set produce?\nNote: Lighting two bulbs *-* is different from **-\nInput Format\nThe first line contains the number of test cases T, T lines follow.\nEach line contains an integer N, the number of bulbs in the serial light bulb set.\nOutput Format\nPrint the total number of patterns modulo 105\nConstraints\n1 <= T <= 1000\n0< N < 104\nSample Input\n2\n1\n2\nSample Output\n1\n3\nExplanation\nCase 1: 1 bulb can be lit in only 1 way.\nCase 2: 2 bulbs can be lit in -*, *-, ** i.e. 3 ways.",
        "195": "Watson gives an integer to Sherlock and asks him: What is the number of divisors of that are divisible by 2?.\nInput Format\nFirst line contains , the number of testcases. This is followed by lines each containing an integer .\nOutput Format\nFor each testcase, print the required answer in one line.\nConstraints\n\nSample Input\n2\n9\n8\nSample Output\n0\n3\nExplanation\n9 has three divisors 1, 3 and 9 none of which is divisible by 2.\n8 has four divisors 1,2,4 and 8, out of which three are divisible by 2.",
        "196": "Watson asks Sherlock:\nGiven a string S of N 0's and M 1's, how many unique permutations of this string start with 1?\nHelp Sherlock by printing the answer modulo (109+7).\nInput Format\nFirst line contains T, the number of test cases.\nEach test case consists of N and M separated by a space.\nOutput Format\nFor each test case, print the answer modulo (109+7).\nConstraints\n1 \u2264 T \u2264 200\n1 \u2264 N,M \u2264 1000\nSample Input\n2\n1 1\n2 3\nSample Output\n1\n6\nExplanation\nTest1: Out of all unique permutations ie. 01 and 10, only second permutation satisfies. Hence, output is 1.\nTest2: Out of all unique permutations ie. 00111 01011 01101 01110 10011 10101 10110 11001 11010 11100, only 10011 10101 10110 11001 11010 11100 satisfy. Hence, output is 6.",
        "197": "You are given an array A of size N. You are also given an integer Q. Can you figure out the answer to each of the Q queries?\nEach query contains 2 integers x and y, and you need to find whether the value find(x,y) is Odd or Even:\nfind(int x,int y)\n{\n    if(x>y) return 1;\n    ans = pow(A[x],find(x+1,y))\n    return ans\n}\nNote : pow(a,b) = ab.\nInput Format\nThe first line of the input contains an integer N. The next line contains N space separated non-negative integers(whole numbers less than or equal to 9).\nThe line after that contains a positive integer, Q , the denotes the number of queries to follow. Q lines follow, each line contains two positive integer x and y separated by a single space.\nOutput Format\nFor each query, display 'Even' if the value returned is Even, otherwise display 'Odd'.\nConstraints\n2 \u2264 N \u2264 105\n2 \u2264 Q \u2264 105\n1 \u2264 x,y \u2264 N\nx \u2264 y\nArray is 1-indexed.\nNo 2 consecutive entries in the array will be zero.\nSample Input\n3\n3 2 7\n2\n1 2\n2 3\nSample Output\nOdd\nEven\nExplanation\nfind(1,2) = 9, which is Odd\nfind(2,3) = 128, which is even",
        "198": "You are given an integer N. Can you find the least positive integer X made up of only 9's and 0's, such that, X is a multiple of N?\nUpdate\nX is made up of one or more occurences of 9 and zero or more occurences of 0.\nInput Format\nThe first line contains an integer T which denotes the number of test cases. T lines follow.\nEach line contains the integer N for which the solution has to be found.\nOutput Format\nPrint the answer X to STDOUT corresponding to each test case. The output should not contain any leading zeroes.\nConstraints\n1 <= T <= 104\n1 <= N <= 500\nSample Input\n3\n5\n7\n1\nSample Output\n90\n9009\n9\nExplanation\n90 is the smallest number made up of 9's and 0's divisible by 5. Similarly, you can derive for other cases.\nTimelimits Timelimits for this challenge is given here",
        "199": "A word from the English dictionary is taken and arranged as a matrix. e.g. \"MATHEMATICS\"\nMATHE  \nATHEM  \nTHEMA  \nHEMAT  \nEMATI  \nMATIC  \nATICS  \nThere are many ways to trace this matrix in a way that helps you construct this word. You start tracing the matrix from the top-left position and at each iteration, you either move RIGHT or DOWN, and ultimately reach the bottom-right of the matrix. It is assured that any such tracing generates the same word. How many such tracings can be possible for a given word of length m+n-1 written as a matrix of size m * n?\nInput Format\nThe first line of input contains an integer T. T test cases follow.\nEach test case contains 2 space separated integers m & n (in a new line) indicating that the matrix has m rows and each row has n characters.\nConstraints\n1 <= T <= 103\n1 \u2264 m,n \u2264 106\nOutput Format\nPrint the number of ways (S) the word can be traced as explained in the problem statement. If the number is larger than 109+7,\nprint S mod (10^9 + 7) for each testcase (in a new line).\nSample Input\n1\n2 3\nSample Output\n3\nExplanation\nLet's consider a word AWAY written as the matrix\nAWA\nWAY\nHere, the word AWAY can be traced in 3 different ways, traversing either RIGHT or DOWN.\nAWA\n  Y\n\nAW\n AY\n\nA\nWAY\nHence the answer is 3.\nTimelimit Time limit for this challenge is given here"
    }
}