{
    "id": {
        "0": 2696,
        "1": 1,
        "2": 2,
        "3": 4,
        "4": 6,
        "5": 7,
        "6": 9,
        "7": 10,
        "8": 11,
        "9": 12,
        "10": 13,
        "11": 14,
        "12": 15,
        "13": 16,
        "14": 17,
        "15": 18,
        "16": 19,
        "17": 20,
        "18": 21,
        "19": 22,
        "20": 23,
        "21": 24,
        "22": 25,
        "23": 26,
        "24": 27,
        "25": 28,
        "26": 29,
        "27": 30,
        "28": 31,
        "29": 32,
        "30": 33,
        "31": 34,
        "32": 35,
        "33": 36,
        "34": 37,
        "35": 38,
        "36": 39,
        "37": 40,
        "38": 41,
        "39": 42,
        "40": 43,
        "41": 44,
        "42": 45,
        "43": 46,
        "44": 47,
        "45": 48,
        "46": 49,
        "47": 50,
        "48": 51,
        "49": 52,
        "50": 53,
        "51": 54,
        "52": 55,
        "53": 56,
        "54": 57,
        "55": 58,
        "56": 60,
        "57": 61,
        "58": 62,
        "59": 63,
        "60": 64,
        "61": 65,
        "62": 67,
        "63": 68,
        "64": 69,
        "65": 70,
        "66": 71,
        "67": 72,
        "68": 74,
        "69": 75,
        "70": 76,
        "71": 77,
        "72": 78,
        "73": 79,
        "74": 80,
        "75": 81,
        "76": 82,
        "77": 83,
        "78": 84,
        "79": 85,
        "80": 86,
        "81": 87,
        "82": 88,
        "83": 89,
        "84": 90,
        "85": 91,
        "86": 92,
        "87": 94,
        "88": 95,
        "89": 96,
        "90": 97,
        "91": 98,
        "92": 99,
        "93": 100,
        "94": 102,
        "95": 103,
        "96": 104,
        "97": 105,
        "98": 106,
        "99": 108,
        "100": 109,
        "101": 110,
        "102": 111,
        "103": 112,
        "104": 113,
        "105": 114,
        "106": 115,
        "107": 116,
        "108": 117,
        "109": 118,
        "110": 119,
        "111": 120,
        "112": 121,
        "113": 122,
        "114": 123,
        "115": 124,
        "116": 125,
        "117": 126,
        "118": 127,
        "119": 128,
        "120": 129,
        "121": 130,
        "122": 131,
        "123": 133,
        "124": 134,
        "125": 135,
        "126": 136,
        "127": 137,
        "128": 138,
        "129": 139,
        "130": 140,
        "131": 141,
        "132": 142,
        "133": 143,
        "134": 144,
        "135": 145,
        "136": 146,
        "137": 147,
        "138": 148,
        "139": 149,
        "140": 150,
        "141": 151,
        "142": 152,
        "143": 153,
        "144": 154,
        "145": 155,
        "146": 160,
        "147": 162,
        "148": 164,
        "149": 166,
        "150": 167,
        "151": 168,
        "152": 169,
        "153": 171,
        "154": 172,
        "155": 174,
        "156": 175,
        "157": 176,
        "158": 177,
        "159": 178,
        "160": 179,
        "161": 180,
        "162": 181,
        "163": 182,
        "164": 183,
        "165": 184,
        "166": 185,
        "167": 187,
        "168": 188,
        "169": 189,
        "170": 191,
        "171": 192,
        "172": 193,
        "173": 194,
        "174": 195,
        "175": 196,
        "176": 197,
        "177": 198,
        "178": 199,
        "179": 200,
        "180": 201,
        "181": 202,
        "182": 203,
        "183": 204,
        "184": 205,
        "185": 206,
        "186": 207,
        "187": 208,
        "188": 209,
        "189": 210,
        "190": 211,
        "191": 212,
        "192": 213,
        "193": 214,
        "194": 215,
        "195": 216,
        "196": 217,
        "197": 218,
        "198": 219,
        "199": 220,
        "200": 221,
        "201": 222,
        "202": 225,
        "203": 226,
        "204": 227,
        "205": 228,
        "206": 229,
        "207": 230,
        "208": 231,
        "209": 232,
        "210": 233,
        "211": 234,
        "212": 238,
        "213": 240,
        "214": 241,
        "215": 242,
        "216": 257,
        "217": 258,
        "218": 260,
        "219": 262,
        "220": 264,
        "221": 268,
        "222": 273,
        "223": 274,
        "224": 275,
        "225": 278,
        "226": 279,
        "227": 282,
        "228": 283,
        "229": 284,
        "230": 287,
        "231": 289,
        "232": 290,
        "233": 292,
        "234": 295,
        "235": 297,
        "236": 299,
        "237": 300,
        "238": 301,
        "239": 304,
        "240": 306,
        "241": 307,
        "242": 309,
        "243": 310,
        "244": 312,
        "245": 315,
        "246": 316,
        "247": 318,
        "248": 319,
        "249": 321,
        "250": 322,
        "251": 324,
        "252": 326,
        "253": 327,
        "254": 328,
        "255": 329,
        "256": 330,
        "257": 331,
        "258": 332,
        "259": 334,
        "260": 335,
        "261": 336,
        "262": 337,
        "263": 338,
        "264": 341,
        "265": 342,
        "266": 343,
        "267": 344,
        "268": 345,
        "269": 349,
        "270": 350,
        "271": 352,
        "272": 354,
        "273": 355,
        "274": 357,
        "275": 363,
        "276": 365,
        "277": 367,
        "278": 368,
        "279": 371,
        "280": 372,
        "281": 373,
        "282": 374,
        "283": 375,
        "284": 376,
        "285": 377,
        "286": 380,
        "287": 381,
        "288": 382,
        "289": 383,
        "290": 384,
        "291": 385,
        "292": 386,
        "293": 387,
        "294": 388,
        "295": 389,
        "296": 390,
        "297": 391,
        "298": 392,
        "299": 394,
        "300": 395,
        "301": 396,
        "302": 397,
        "303": 398,
        "304": 399,
        "305": 400,
        "306": 401,
        "307": 403,
        "308": 404,
        "309": 405,
        "310": 406,
        "311": 407,
        "312": 409,
        "313": 410,
        "314": 412,
        "315": 413,
        "316": 414,
        "317": 415,
        "318": 416,
        "319": 417,
        "320": 419,
        "321": 423,
        "322": 424,
        "323": 427,
        "324": 429,
        "325": 432,
        "326": 433,
        "327": 434,
        "328": 435,
        "329": 436,
        "330": 437,
        "331": 438,
        "332": 440,
        "333": 441,
        "334": 442,
        "335": 443,
        "336": 445,
        "337": 446,
        "338": 447,
        "339": 448,
        "340": 450,
        "341": 451,
        "342": 452,
        "343": 453,
        "344": 454,
        "345": 456,
        "346": 457,
        "347": 458,
        "348": 459,
        "349": 460,
        "350": 461,
        "351": 462,
        "352": 463,
        "353": 464,
        "354": 466,
        "355": 468,
        "356": 470,
        "357": 472,
        "358": 473,
        "359": 474,
        "360": 475,
        "361": 476,
        "362": 477,
        "363": 478,
        "364": 479,
        "365": 480,
        "366": 481,
        "367": 482,
        "368": 483,
        "369": 485,
        "370": 486,
        "371": 488,
        "372": 491,
        "373": 492,
        "374": 493,
        "375": 494,
        "376": 495,
        "377": 496,
        "378": 497,
        "379": 498,
        "380": 500,
        "381": 502,
        "382": 503,
        "383": 504,
        "384": 506,
        "385": 507,
        "386": 508,
        "387": 509,
        "388": 511,
        "389": 513,
        "390": 514,
        "391": 515,
        "392": 516,
        "393": 517,
        "394": 518,
        "395": 519,
        "396": 520,
        "397": 521,
        "398": 522,
        "399": 523,
        "400": 524,
        "401": 525,
        "402": 528,
        "403": 529,
        "404": 530,
        "405": 532,
        "406": 535,
        "407": 537,
        "408": 538,
        "409": 539,
        "410": 541,
        "411": 542,
        "412": 543,
        "413": 546,
        "414": 547,
        "415": 550,
        "416": 551,
        "417": 552,
        "418": 553,
        "419": 554,
        "420": 556,
        "421": 557,
        "422": 558,
        "423": 559,
        "424": 560,
        "425": 561,
        "426": 563,
        "427": 564,
        "428": 566,
        "429": 567,
        "430": 570,
        "431": 572,
        "432": 575,
        "433": 576,
        "434": 577,
        "435": 581,
        "436": 583,
        "437": 584,
        "438": 585,
        "439": 586,
        "440": 587,
        "441": 589,
        "442": 590,
        "443": 591,
        "444": 592,
        "445": 593,
        "446": 594,
        "447": 595,
        "448": 596,
        "449": 598,
        "450": 599,
        "451": 600,
        "452": 601,
        "453": 602,
        "454": 605,
        "455": 606,
        "456": 607,
        "457": 608,
        "458": 609,
        "459": 610,
        "460": 611,
        "461": 617,
        "462": 619,
        "463": 620,
        "464": 621,
        "465": 622,
        "466": 623,
        "467": 624,
        "468": 626,
        "469": 627,
        "470": 628,
        "471": 629,
        "472": 630,
        "473": 632,
        "474": 633,
        "475": 636,
        "476": 637,
        "477": 638,
        "478": 639,
        "479": 640,
        "480": 641,
        "481": 643,
        "482": 645,
        "483": 646,
        "484": 647,
        "485": 648,
        "486": 649,
        "487": 650,
        "488": 653,
        "489": 654,
        "490": 655,
        "491": 657,
        "492": 658,
        "493": 659,
        "494": 661,
        "495": 662,
        "496": 664,
        "497": 665,
        "498": 667,
        "499": 668,
        "500": 669,
        "501": 671,
        "502": 672,
        "503": 673,
        "504": 674,
        "505": 675,
        "506": 676,
        "507": 677,
        "508": 679,
        "509": 680,
        "510": 682,
        "511": 684,
        "512": 685,
        "513": 686,
        "514": 687,
        "515": 688,
        "516": 689,
        "517": 690,
        "518": 691,
        "519": 693,
        "520": 695,
        "521": 696,
        "522": 697,
        "523": 698,
        "524": 699,
        "525": 700,
        "526": 701,
        "527": 703,
        "528": 704,
        "529": 705,
        "530": 706,
        "531": 707,
        "532": 709,
        "533": 710,
        "534": 712,
        "535": 713,
        "536": 714,
        "537": 715,
        "538": 717,
        "539": 718,
        "540": 719,
        "541": 720,
        "542": 721,
        "543": 722,
        "544": 724,
        "545": 725,
        "546": 726,
        "547": 728,
        "548": 729,
        "549": 730,
        "550": 731,
        "551": 733,
        "552": 735,
        "553": 736,
        "554": 738,
        "555": 739,
        "556": 740,
        "557": 741,
        "558": 743,
        "559": 744,
        "560": 747,
        "561": 748,
        "562": 749,
        "563": 752,
        "564": 753,
        "565": 754,
        "566": 756,
        "567": 757,
        "568": 761,
        "569": 763,
        "570": 764,
        "571": 765,
        "572": 766,
        "573": 767,
        "574": 768,
        "575": 769,
        "576": 770,
        "577": 771,
        "578": 773,
        "579": 775,
        "580": 777,
        "581": 778,
        "582": 779,
        "583": 780,
        "584": 781,
        "585": 782,
        "586": 783,
        "587": 784,
        "588": 785,
        "589": 786,
        "590": 787,
        "591": 788,
        "592": 789,
        "593": 790,
        "594": 791,
        "595": 792,
        "596": 793,
        "597": 794,
        "598": 795,
        "599": 796,
        "600": 797,
        "601": 798,
        "602": 799,
        "603": 801,
        "604": 802,
        "605": 803,
        "606": 804,
        "607": 806,
        "608": 807,
        "609": 808,
        "610": 809,
        "611": 810,
        "612": 811,
        "613": 812,
        "614": 813,
        "615": 814,
        "616": 815,
        "617": 816,
        "618": 817,
        "619": 818,
        "620": 819,
        "621": 820,
        "622": 821,
        "623": 822,
        "624": 823,
        "625": 824,
        "626": 825,
        "627": 827,
        "628": 828,
        "629": 829,
        "630": 830,
        "631": 831,
        "632": 832,
        "633": 833,
        "634": 834,
        "635": 835,
        "636": 836,
        "637": 837,
        "638": 838,
        "639": 840,
        "640": 842,
        "641": 843,
        "642": 844,
        "643": 845,
        "644": 846,
        "645": 847,
        "646": 848,
        "647": 849,
        "648": 850,
        "649": 851,
        "650": 852,
        "651": 853,
        "652": 854,
        "653": 855,
        "654": 856,
        "655": 857,
        "656": 858,
        "657": 859,
        "658": 860,
        "659": 861,
        "660": 862,
        "661": 863,
        "662": 864,
        "663": 865,
        "664": 866,
        "665": 867,
        "666": 869,
        "667": 870,
        "668": 872,
        "669": 873,
        "670": 874,
        "671": 875,
        "672": 876,
        "673": 877,
        "674": 878,
        "675": 879,
        "676": 880,
        "677": 881,
        "678": 882,
        "679": 883,
        "680": 884,
        "681": 885,
        "682": 886,
        "683": 888,
        "684": 889,
        "685": 890,
        "686": 891,
        "687": 892,
        "688": 893,
        "689": 894,
        "690": 895,
        "691": 896,
        "692": 898,
        "693": 899,
        "694": 900,
        "695": 901,
        "696": 902,
        "697": 903,
        "698": 904,
        "699": 905,
        "700": 906,
        "701": 907,
        "702": 908,
        "703": 910,
        "704": 911,
        "705": 912,
        "706": 913,
        "707": 914,
        "708": 915,
        "709": 916,
        "710": 917,
        "711": 918,
        "712": 920,
        "713": 921,
        "714": 922,
        "715": 923,
        "716": 924,
        "717": 925,
        "718": 926,
        "719": 927,
        "720": 928,
        "721": 929,
        "722": 930,
        "723": 931,
        "724": 932,
        "725": 933,
        "726": 934,
        "727": 935,
        "728": 936,
        "729": 937,
        "730": 938,
        "731": 939,
        "732": 940,
        "733": 941,
        "734": 942,
        "735": 943,
        "736": 944,
        "737": 945,
        "738": 946,
        "739": 947,
        "740": 948,
        "741": 949,
        "742": 950,
        "743": 951,
        "744": 953,
        "745": 956,
        "746": 957,
        "747": 958,
        "748": 959,
        "749": 961,
        "750": 962,
        "751": 963,
        "752": 964,
        "753": 965,
        "754": 966,
        "755": 967,
        "756": 968,
        "757": 969,
        "758": 970,
        "759": 971,
        "760": 972,
        "761": 973,
        "762": 974,
        "763": 975,
        "764": 977,
        "765": 978,
        "766": 979,
        "767": 980,
        "768": 981,
        "769": 982,
        "770": 983,
        "771": 984,
        "772": 985,
        "773": 988,
        "774": 989,
        "775": 990,
        "776": 991,
        "777": 992,
        "778": 993,
        "779": 994,
        "780": 995,
        "781": 996,
        "782": 997,
        "783": 998,
        "784": 1000,
        "785": 1001,
        "786": 1002,
        "787": 1003,
        "788": 1004,
        "789": 1005,
        "790": 1006,
        "791": 1007,
        "792": 1008,
        "793": 1009,
        "794": 1010,
        "795": 1011,
        "796": 1012,
        "797": 1013,
        "798": 1014,
        "799": 1015,
        "800": 1016,
        "801": 1017,
        "802": 1018,
        "803": 1019,
        "804": 1020,
        "805": 1021,
        "806": 1022,
        "807": 1023,
        "808": 1024,
        "809": 1025,
        "810": 1026,
        "811": 1027,
        "812": 1028,
        "813": 1029,
        "814": 1030,
        "815": 1031,
        "816": 1032,
        "817": 1033,
        "818": 1034,
        "819": 1035,
        "820": 1036,
        "821": 1037,
        "822": 1038,
        "823": 1039,
        "824": 1040,
        "825": 1041,
        "826": 1042,
        "827": 1043,
        "828": 1044,
        "829": 1045,
        "830": 1046,
        "831": 1047,
        "832": 1048,
        "833": 1049,
        "834": 1050,
        "835": 1052,
        "836": 1053,
        "837": 1054,
        "838": 1061,
        "839": 1068,
        "840": 1070,
        "841": 1071,
        "842": 1072,
        "843": 1073,
        "844": 1074,
        "845": 1078,
        "846": 1079,
        "847": 1080,
        "848": 1081,
        "849": 1084,
        "850": 1089,
        "851": 1090,
        "852": 1091,
        "853": 1092,
        "854": 1093,
        "855": 1094,
        "856": 1095,
        "857": 1096,
        "858": 1103,
        "859": 1104,
        "860": 1105,
        "861": 1106,
        "862": 1108,
        "863": 1109,
        "864": 1110,
        "865": 1111,
        "866": 1114,
        "867": 1116,
        "868": 1117,
        "869": 1122,
        "870": 1123,
        "871": 1124,
        "872": 1125,
        "873": 1128,
        "874": 1129,
        "875": 1130,
        "876": 1131,
        "877": 1137,
        "878": 1138,
        "879": 1139,
        "880": 1140,
        "881": 1141,
        "882": 1143,
        "883": 1144,
        "884": 1145,
        "885": 1146,
        "886": 1147,
        "887": 1148,
        "888": 1154,
        "889": 1155,
        "890": 1157,
        "891": 1158,
        "892": 1160,
        "893": 1161,
        "894": 1163,
        "895": 1164,
        "896": 1169,
        "897": 1170,
        "898": 1171,
        "899": 1175,
        "900": 1177,
        "901": 1178,
        "902": 1179,
        "903": 1184,
        "904": 1185,
        "905": 1186,
        "906": 1187,
        "907": 1189,
        "908": 1191,
        "909": 1193,
        "910": 1195,
        "911": 1200,
        "912": 1201,
        "913": 1202,
        "914": 1203,
        "915": 1204,
        "916": 1206,
        "917": 1207,
        "918": 1208,
        "919": 1209,
        "920": 1210,
        "921": 1211,
        "922": 1217,
        "923": 1218,
        "924": 1219,
        "925": 1220,
        "926": 1221,
        "927": 1222,
        "928": 1223,
        "929": 1224,
        "930": 1226,
        "931": 1227,
        "932": 1232,
        "933": 1233,
        "934": 1234,
        "935": 1237,
        "936": 1238,
        "937": 1239,
        "938": 1240,
        "939": 1247,
        "940": 1248,
        "941": 1249,
        "942": 1250,
        "943": 1251,
        "944": 1252,
        "945": 1253,
        "946": 1254,
        "947": 1255,
        "948": 1260,
        "949": 1261,
        "950": 1262,
        "951": 1263,
        "952": 1266,
        "953": 1267,
        "954": 1268,
        "955": 1269,
        "956": 1275,
        "957": 1277,
        "958": 1278,
        "959": 1280,
        "960": 1281,
        "961": 1282,
        "962": 1284,
        "963": 1286,
        "964": 1287,
        "965": 1288,
        "966": 1289,
        "967": 1290,
        "968": 1291,
        "969": 1292,
        "970": 1293,
        "971": 1295,
        "972": 1296,
        "973": 1297,
        "974": 1298,
        "975": 1299,
        "976": 1300,
        "977": 1301,
        "978": 1302,
        "979": 1304,
        "980": 1305,
        "981": 1306,
        "982": 1307,
        "983": 1309,
        "984": 1310,
        "985": 1311,
        "986": 1312,
        "987": 1313,
        "988": 1314,
        "989": 1315,
        "990": 1316,
        "991": 1317,
        "992": 1318,
        "993": 1319,
        "994": 1321,
        "995": 1323,
        "996": 1324,
        "997": 1325,
        "998": 1326,
        "999": 1327,
        "1000": 1328,
        "1001": 1329,
        "1002": 1330,
        "1003": 1331,
        "1004": 1332,
        "1005": 1333,
        "1006": 1334,
        "1007": 1335,
        "1008": 1337,
        "1009": 1338,
        "1010": 1339,
        "1011": 1340,
        "1012": 1341,
        "1013": 1342,
        "1014": 1343,
        "1015": 1344,
        "1016": 1345,
        "1017": 1346,
        "1018": 1347,
        "1019": 1348,
        "1020": 1349,
        "1021": 1351,
        "1022": 1352,
        "1023": 1353,
        "1024": 1354,
        "1025": 1356,
        "1026": 1358,
        "1027": 1359,
        "1028": 1360,
        "1029": 1361,
        "1030": 1362,
        "1031": 1363,
        "1032": 1366,
        "1033": 1367,
        "1034": 1368,
        "1035": 1370,
        "1036": 1371,
        "1037": 1372,
        "1038": 1373,
        "1039": 1374,
        "1040": 1375,
        "1041": 1376,
        "1042": 1377,
        "1043": 1378,
        "1044": 1379,
        "1045": 1380,
        "1046": 1381,
        "1047": 1385,
        "1048": 1386,
        "1049": 1387,
        "1050": 1388,
        "1051": 1389,
        "1052": 1390,
        "1053": 1391,
        "1054": 1392,
        "1055": 1393,
        "1056": 1394,
        "1057": 1395,
        "1058": 1396,
        "1059": 1397,
        "1060": 1401,
        "1061": 1402,
        "1062": 1403,
        "1063": 1405,
        "1064": 1406,
        "1065": 1407,
        "1066": 1408,
        "1067": 1409,
        "1068": 1411,
        "1069": 1413,
        "1070": 1414,
        "1071": 1415,
        "1072": 1416,
        "1073": 1417,
        "1074": 1418,
        "1075": 1419,
        "1076": 1420,
        "1077": 1423,
        "1078": 1424,
        "1079": 1425,
        "1080": 1431,
        "1081": 1432,
        "1082": 1433,
        "1083": 1434,
        "1084": 1436,
        "1085": 1437,
        "1086": 1438,
        "1087": 1439,
        "1088": 1441,
        "1089": 1442,
        "1090": 1443,
        "1091": 1444,
        "1092": 1447,
        "1093": 1448,
        "1094": 1449,
        "1095": 1450,
        "1096": 1453,
        "1097": 1455,
        "1098": 1456,
        "1099": 1457,
        "1100": 1458,
        "1101": 1460,
        "1102": 1461,
        "1103": 1464,
        "1104": 1465,
        "1105": 1466,
        "1106": 1467,
        "1107": 1470,
        "1108": 1471,
        "1109": 1472,
        "1110": 1473,
        "1111": 1475,
        "1112": 1476,
        "1113": 1477,
        "1114": 1480,
        "1115": 1481,
        "1116": 1482,
        "1117": 1483,
        "1118": 1484,
        "1119": 1486,
        "1120": 1487,
        "1121": 1488,
        "1122": 1489,
        "1123": 1491,
        "1124": 1492,
        "1125": 1493,
        "1126": 1494,
        "1127": 1496,
        "1128": 1497,
        "1129": 1498,
        "1130": 1499,
        "1131": 1503,
        "1132": 1504,
        "1133": 1505,
        "1134": 1507,
        "1135": 1508,
        "1136": 1509,
        "1137": 1510,
        "1138": 1512,
        "1139": 1513,
        "1140": 1514,
        "1141": 1515,
        "1142": 1517,
        "1143": 1518,
        "1144": 1519,
        "1145": 1520,
        "1146": 1521,
        "1147": 1523,
        "1148": 1524,
        "1149": 1525,
        "1150": 1526,
        "1151": 1527,
        "1152": 1528,
        "1153": 1529,
        "1154": 1530,
        "1155": 1531,
        "1156": 1534,
        "1157": 1535,
        "1158": 1536,
        "1159": 1537,
        "1160": 1539,
        "1161": 1540,
        "1162": 1541,
        "1163": 1542,
        "1164": 1544,
        "1165": 1545,
        "1166": 1546,
        "1167": 1547,
        "1168": 1550,
        "1169": 1552,
        "1170": 1553,
        "1171": 1557,
        "1172": 1559,
        "1173": 1560,
        "1174": 1561,
        "1175": 1562,
        "1176": 1563,
        "1177": 1566,
        "1178": 1567,
        "1179": 1568,
        "1180": 1569,
        "1181": 1572,
        "1182": 1573,
        "1183": 1574,
        "1184": 1575,
        "1185": 1576,
        "1186": 1577,
        "1187": 1578,
        "1188": 1579,
        "1189": 1581,
        "1190": 1582,
        "1191": 1583,
        "1192": 1584,
        "1193": 1587,
        "1194": 1588,
        "1195": 1589,
        "1196": 1590,
        "1197": 1591,
        "1198": 1592,
        "1199": 1593,
        "1200": 1594,
        "1201": 1595,
        "1202": 1598,
        "1203": 1599,
        "1204": 1600,
        "1205": 1601,
        "1206": 1603,
        "1207": 1604,
        "1208": 1605,
        "1209": 1606,
        "1210": 1608,
        "1211": 1609,
        "1212": 1610,
        "1213": 1611,
        "1214": 1614,
        "1215": 1615,
        "1216": 1616,
        "1217": 1617,
        "1218": 1619,
        "1219": 1620,
        "1220": 1621,
        "1221": 1622,
        "1222": 1624,
        "1223": 1625,
        "1224": 1626,
        "1225": 1629,
        "1226": 1630,
        "1227": 1631,
        "1228": 1632,
        "1229": 1633,
        "1230": 1636,
        "1231": 1637,
        "1232": 1638,
        "1233": 1640,
        "1234": 1641,
        "1235": 1642,
        "1236": 1643,
        "1237": 1646,
        "1238": 1647,
        "1239": 1649,
        "1240": 1652,
        "1241": 1653,
        "1242": 1654,
        "1243": 1655,
        "1244": 1656,
        "1245": 1657,
        "1246": 1658,
        "1247": 1659,
        "1248": 1661,
        "1249": 1662,
        "1250": 1663,
        "1251": 1664,
        "1252": 1665,
        "1253": 1667,
        "1254": 1668,
        "1255": 1669,
        "1256": 1670,
        "1257": 1671,
        "1258": 1672,
        "1259": 1673,
        "1260": 1674,
        "1261": 1675,
        "1262": 1678,
        "1263": 1679,
        "1264": 1680,
        "1265": 1681,
        "1266": 1683,
        "1267": 1684,
        "1268": 1685,
        "1269": 1686,
        "1270": 1687,
        "1271": 1688,
        "1272": 1689,
        "1273": 1690,
        "1274": 1691,
        "1275": 1693,
        "1276": 1694,
        "1277": 1695,
        "1278": 1696,
        "1279": 1700,
        "1280": 1701,
        "1281": 1702,
        "1282": 1703,
        "1283": 1704,
        "1284": 1705,
        "1285": 1706,
        "1286": 1707,
        "1287": 1710,
        "1288": 1711,
        "1289": 1712,
        "1290": 1713,
        "1291": 1716,
        "1292": 1717,
        "1293": 1718,
        "1294": 1719,
        "1295": 1721,
        "1296": 1722,
        "1297": 1723,
        "1298": 1725,
        "1299": 1726,
        "1300": 1727,
        "1301": 1728,
        "1302": 1729,
        "1303": 1731,
        "1304": 1732,
        "1305": 1733,
        "1306": 1734,
        "1307": 1735,
        "1308": 1736,
        "1309": 1737,
        "1310": 1738,
        "1311": 1739,
        "1312": 1741,
        "1313": 1742,
        "1314": 1743,
        "1315": 1744,
        "1316": 1745,
        "1317": 1748,
        "1318": 1749,
        "1319": 1750,
        "1320": 1752,
        "1321": 1753,
        "1322": 1754,
        "1323": 1755,
        "1324": 1757,
        "1325": 1758,
        "1326": 1759,
        "1327": 1761,
        "1328": 1763,
        "1329": 1764,
        "1330": 1765,
        "1331": 1766,
        "1332": 1768,
        "1333": 1769,
        "1334": 1770,
        "1335": 1771,
        "1336": 1773,
        "1337": 1774,
        "1338": 1775,
        "1339": 1776,
        "1340": 1779,
        "1341": 1780,
        "1342": 1782,
        "1343": 1785,
        "1344": 1786,
        "1345": 1787,
        "1346": 1789,
        "1347": 1790,
        "1348": 1791,
        "1349": 1792,
        "1350": 1793,
        "1351": 1795,
        "1352": 1796,
        "1353": 1797,
        "1354": 1798,
        "1355": 1799,
        "1356": 1800,
        "1357": 1802,
        "1358": 1806,
        "1359": 1807,
        "1360": 1808,
        "1361": 1812,
        "1362": 1813,
        "1363": 1814,
        "1364": 1815,
        "1365": 1816,
        "1366": 1817,
        "1367": 1818,
        "1368": 1819,
        "1369": 1822,
        "1370": 1823,
        "1371": 1824,
        "1372": 1825,
        "1373": 1827,
        "1374": 1828,
        "1375": 1829,
        "1376": 1830,
        "1377": 1832,
        "1378": 1833,
        "1379": 1834,
        "1380": 1835,
        "1381": 1837,
        "1382": 1838,
        "1383": 1839,
        "1384": 1840,
        "1385": 1844,
        "1386": 1845,
        "1387": 1846,
        "1388": 1847,
        "1389": 1848,
        "1390": 1849,
        "1391": 1850,
        "1392": 1851,
        "1393": 1854,
        "1394": 1855,
        "1395": 1856,
        "1396": 1857,
        "1397": 1859,
        "1398": 1860,
        "1399": 1862,
        "1400": 1863,
        "1401": 1864,
        "1402": 1865,
        "1403": 1866,
        "1404": 1869,
        "1405": 1870,
        "1406": 1871,
        "1407": 1872,
        "1408": 1873,
        "1409": 1876,
        "1410": 1877,
        "1411": 1878,
        "1412": 1879,
        "1413": 1880,
        "1414": 1881,
        "1415": 1882,
        "1416": 1883,
        "1417": 1884,
        "1418": 1886,
        "1419": 1887,
        "1420": 1888,
        "1421": 1889,
        "1422": 1893,
        "1423": 1894,
        "1424": 1895,
        "1425": 1896,
        "1426": 1897,
        "1427": 1899,
        "1428": 1900,
        "1429": 1901,
        "1430": 1903,
        "1431": 1904,
        "1432": 1905,
        "1433": 1906,
        "1434": 1907,
        "1435": 1909,
        "1436": 1910,
        "1437": 1911,
        "1438": 1912,
        "1439": 1913,
        "1440": 1914,
        "1441": 1916,
        "1442": 1920,
        "1443": 1921,
        "1444": 1922,
        "1445": 1923,
        "1446": 1925,
        "1447": 1926,
        "1448": 1928,
        "1449": 1929,
        "1450": 1930,
        "1451": 1931,
        "1452": 1934,
        "1453": 1935,
        "1454": 1936,
        "1455": 1937,
        "1456": 1938,
        "1457": 1941,
        "1458": 1942,
        "1459": 1943,
        "1460": 1944,
        "1461": 1945,
        "1462": 1946,
        "1463": 1947,
        "1464": 1948,
        "1465": 1954,
        "1466": 1955,
        "1467": 1957,
        "1468": 1958,
        "1469": 1959,
        "1470": 1960,
        "1471": 1961,
        "1472": 1962,
        "1473": 1963,
        "1474": 1964,
        "1475": 1965,
        "1476": 1967,
        "1477": 1968,
        "1478": 1969,
        "1479": 1970,
        "1480": 1971,
        "1481": 1974,
        "1482": 1976,
        "1483": 1977,
        "1484": 1978,
        "1485": 1979,
        "1486": 1980,
        "1487": 1981,
        "1488": 1982,
        "1489": 1984,
        "1490": 1985,
        "1491": 1986,
        "1492": 1987,
        "1493": 1991,
        "1494": 1992,
        "1495": 1993,
        "1496": 1994,
        "1497": 1995,
        "1498": 1996,
        "1499": 1997,
        "1500": 1998,
        "1501": 2000,
        "1502": 2002,
        "1503": 2003,
        "1504": 2006,
        "1505": 2007,
        "1506": 2009,
        "1507": 2011,
        "1508": 2012,
        "1509": 2013,
        "1510": 2014,
        "1511": 2016,
        "1512": 2017,
        "1513": 2018,
        "1514": 2019,
        "1515": 2023,
        "1516": 2024,
        "1517": 2025,
        "1518": 2027,
        "1519": 2028,
        "1520": 2029,
        "1521": 2030,
        "1522": 2032,
        "1523": 2034,
        "1524": 2037,
        "1525": 2038,
        "1526": 2039,
        "1527": 2040,
        "1528": 2042,
        "1529": 2043,
        "1530": 2044,
        "1531": 2045,
        "1532": 2047,
        "1533": 2048,
        "1534": 2049,
        "1535": 2050,
        "1536": 2053,
        "1537": 2054,
        "1538": 2055,
        "1539": 2056,
        "1540": 2057,
        "1541": 2058,
        "1542": 2059,
        "1543": 2060,
        "1544": 2062,
        "1545": 2063,
        "1546": 2064,
        "1547": 2065,
        "1548": 2068,
        "1549": 2069,
        "1550": 2070,
        "1551": 2071,
        "1552": 2073,
        "1553": 2074,
        "1554": 2075,
        "1555": 2076,
        "1556": 2078,
        "1557": 2079,
        "1558": 2080,
        "1559": 2081,
        "1560": 2085,
        "1561": 2086,
        "1562": 2087,
        "1563": 2088,
        "1564": 2089,
        "1565": 2091,
        "1566": 2092,
        "1567": 2094,
        "1568": 2095,
        "1569": 2096,
        "1570": 2097,
        "1571": 2099,
        "1572": 2100,
        "1573": 2101,
        "1574": 2102,
        "1575": 2103,
        "1576": 2104,
        "1577": 2105,
        "1578": 2106,
        "1579": 2108,
        "1580": 2109,
        "1581": 2110,
        "1582": 2111,
        "1583": 2114,
        "1584": 2115,
        "1585": 2116,
        "1586": 2117,
        "1587": 2119,
        "1588": 2120,
        "1589": 2121,
        "1590": 2122,
        "1591": 2124,
        "1592": 2125,
        "1593": 2126,
        "1594": 2127,
        "1595": 2129,
        "1596": 2130,
        "1597": 2131,
        "1598": 2132,
        "1599": 2133,
        "1600": 2134,
        "1601": 2135,
        "1602": 2138,
        "1603": 2139,
        "1604": 2141,
        "1605": 2144,
        "1606": 2145,
        "1607": 2146,
        "1608": 2147,
        "1609": 2148,
        "1610": 2149,
        "1611": 2150,
        "1612": 2154,
        "1613": 2155,
        "1614": 2156,
        "1615": 2157,
        "1616": 2160,
        "1617": 2161,
        "1618": 2162,
        "1619": 2163,
        "1620": 2164,
        "1621": 2165,
        "1622": 2166,
        "1623": 2167,
        "1624": 2169,
        "1625": 2170,
        "1626": 2171,
        "1627": 2176,
        "1628": 2177,
        "1629": 2178,
        "1630": 2179,
        "1631": 2180,
        "1632": 2181,
        "1633": 2182,
        "1634": 2183,
        "1635": 2185,
        "1636": 2186,
        "1637": 2187,
        "1638": 2188,
        "1639": 2190,
        "1640": 2191,
        "1641": 2192,
        "1642": 2193,
        "1643": 2194,
        "1644": 2196,
        "1645": 2197,
        "1646": 2200,
        "1647": 2201,
        "1648": 2202,
        "1649": 2203,
        "1650": 2206,
        "1651": 2207,
        "1652": 2208,
        "1653": 2209,
        "1654": 2210,
        "1655": 2211,
        "1656": 2212,
        "1657": 2213,
        "1658": 2215,
        "1659": 2217,
        "1660": 2218,
        "1661": 2220,
        "1662": 2222,
        "1663": 2223,
        "1664": 2224,
        "1665": 2225,
        "1666": 2226,
        "1667": 2227,
        "1668": 2231,
        "1669": 2232,
        "1670": 2233,
        "1671": 2234,
        "1672": 2235,
        "1673": 2236,
        "1674": 2239,
        "1675": 2240,
        "1676": 2241,
        "1677": 2242,
        "1678": 2243,
        "1679": 2244,
        "1680": 2245,
        "1681": 2246,
        "1682": 2248,
        "1683": 2249,
        "1684": 2250,
        "1685": 2251,
        "1686": 2255,
        "1687": 2256,
        "1688": 2257,
        "1689": 2258,
        "1690": 2259,
        "1691": 2260,
        "1692": 2261,
        "1693": 2262,
        "1694": 2264,
        "1695": 2266,
        "1696": 2267,
        "1697": 2269,
        "1698": 2271,
        "1699": 2272,
        "1700": 2273,
        "1701": 2274,
        "1702": 2275,
        "1703": 2276,
        "1704": 2279,
        "1705": 2280,
        "1706": 2281,
        "1707": 2283,
        "1708": 2284,
        "1709": 2285,
        "1710": 2286,
        "1711": 2287,
        "1712": 2288,
        "1713": 2289,
        "1714": 2290,
        "1715": 2294,
        "1716": 2295,
        "1717": 2296,
        "1718": 2299,
        "1719": 2300,
        "1720": 2302,
        "1721": 2303,
        "1722": 2304,
        "1723": 2305,
        "1724": 2306,
        "1725": 2310,
        "1726": 2311,
        "1727": 2312,
        "1728": 2315,
        "1729": 2317,
        "1730": 2318,
        "1731": 2319,
        "1732": 2320,
        "1733": 2321,
        "1734": 2322,
        "1735": 2325,
        "1736": 2327,
        "1737": 2328,
        "1738": 2331,
        "1739": 2332,
        "1740": 2333,
        "1741": 2334,
        "1742": 2335,
        "1743": 2336,
        "1744": 2337,
        "1745": 2338,
        "1746": 2341,
        "1747": 2342,
        "1748": 2344,
        "1749": 2347,
        "1750": 2348,
        "1751": 2349,
        "1752": 2350,
        "1753": 2352,
        "1754": 2353,
        "1755": 2354,
        "1756": 2356,
        "1757": 2357,
        "1758": 2358,
        "1759": 2359,
        "1760": 2360,
        "1761": 2363,
        "1762": 2364,
        "1763": 2365,
        "1764": 2367,
        "1765": 2368,
        "1766": 2369,
        "1767": 2370,
        "1768": 2373,
        "1769": 2374,
        "1770": 2375,
        "1771": 2376,
        "1772": 2379,
        "1773": 2380,
        "1774": 2381,
        "1775": 2383,
        "1776": 2384,
        "1777": 2385,
        "1778": 2386,
        "1779": 2389,
        "1780": 2390,
        "1781": 2391,
        "1782": 2392,
        "1783": 2395,
        "1784": 2396,
        "1785": 2397,
        "1786": 2398,
        "1787": 2399,
        "1788": 2400,
        "1789": 2402,
        "1790": 2405,
        "1791": 2406,
        "1792": 2407,
        "1793": 2409,
        "1794": 2410,
        "1795": 2411,
        "1796": 2412,
        "1797": 2413,
        "1798": 2414,
        "1799": 2415,
        "1800": 2416,
        "1801": 2418,
        "1802": 2419,
        "1803": 2420,
        "1804": 2421,
        "1805": 2423,
        "1806": 2424,
        "1807": 2425,
        "1808": 2426,
        "1809": 2427,
        "1810": 2428,
        "1811": 2429,
        "1812": 2430,
        "1813": 2432,
        "1814": 2433,
        "1815": 2434,
        "1816": 2435,
        "1817": 2438,
        "1818": 2439,
        "1819": 2440,
        "1820": 2441,
        "1821": 2442,
        "1822": 2443,
        "1823": 2444,
        "1824": 2446,
        "1825": 2447,
        "1826": 2448,
        "1827": 2449,
        "1828": 2451,
        "1829": 2452,
        "1830": 2453,
        "1831": 2454,
        "1832": 2455,
        "1833": 2456,
        "1834": 2457,
        "1835": 2458,
        "1836": 2460,
        "1837": 2461,
        "1838": 2462,
        "1839": 2463,
        "1840": 2465,
        "1841": 2466,
        "1842": 2467,
        "1843": 2469,
        "1844": 2470,
        "1845": 2471,
        "1846": 2472,
        "1847": 2475,
        "1848": 2476,
        "1849": 2477,
        "1850": 2478,
        "1851": 2481,
        "1852": 2482,
        "1853": 2484,
        "1854": 2485,
        "1855": 2486,
        "1856": 2487,
        "1857": 2488,
        "1858": 2490,
        "1859": 2491,
        "1860": 2493,
        "1861": 2496,
        "1862": 2497,
        "1863": 2498,
        "1864": 2499,
        "1865": 2500,
        "1866": 2501,
        "1867": 2502,
        "1868": 2503,
        "1869": 2506,
        "1870": 2507,
        "1871": 2508,
        "1872": 2509,
        "1873": 2511,
        "1874": 2512,
        "1875": 2513,
        "1876": 2514,
        "1877": 2515,
        "1878": 2516,
        "1879": 2517,
        "1880": 2518,
        "1881": 2520,
        "1882": 2521,
        "1883": 2522,
        "1884": 2523,
        "1885": 2525,
        "1886": 2526,
        "1887": 2527,
        "1888": 2528,
        "1889": 2529,
        "1890": 2530,
        "1891": 2531,
        "1892": 2532,
        "1893": 2535,
        "1894": 2536,
        "1895": 2537,
        "1896": 2538,
        "1897": 2540,
        "1898": 2541,
        "1899": 2542,
        "1900": 2543,
        "1901": 2544,
        "1902": 2545,
        "1903": 2546,
        "1904": 2547,
        "1905": 2549,
        "1906": 2550,
        "1907": 2551,
        "1908": 2552,
        "1909": 2553,
        "1910": 2554,
        "1911": 2555,
        "1912": 2556,
        "1913": 2558,
        "1914": 2559,
        "1915": 2560,
        "1916": 2561,
        "1917": 2562,
        "1918": 2563,
        "1919": 2564,
        "1920": 2565,
        "1921": 2566,
        "1922": 2567,
        "1923": 2568,
        "1924": 2569,
        "1925": 2570,
        "1926": 2571,
        "1927": 2572,
        "1928": 2573,
        "1929": 2574,
        "1930": 2575,
        "1931": 2576,
        "1932": 2577,
        "1933": 2578,
        "1934": 2579,
        "1935": 2580,
        "1936": 2581,
        "1937": 2582,
        "1938": 2583,
        "1939": 2584,
        "1940": 2585,
        "1941": 2586,
        "1942": 2587,
        "1943": 2588,
        "1944": 2589,
        "1945": 2591,
        "1946": 2592,
        "1947": 2593,
        "1948": 2594,
        "1949": 2595,
        "1950": 2596,
        "1951": 2597,
        "1952": 2600,
        "1953": 2602,
        "1954": 2603,
        "1955": 2605,
        "1956": 2608,
        "1957": 2609,
        "1958": 2610,
        "1959": 2611,
        "1960": 2612,
        "1961": 2615,
        "1962": 2617,
        "1963": 2618,
        "1964": 2619,
        "1965": 2620,
        "1966": 2621,
        "1967": 2622,
        "1968": 2623,
        "1969": 2624,
        "1970": 2625,
        "1971": 2626,
        "1972": 2627,
        "1973": 2629,
        "1974": 2630,
        "1975": 2631,
        "1976": 2634,
        "1977": 2635,
        "1978": 2637,
        "1979": 2639,
        "1980": 2640,
        "1981": 2641,
        "1982": 2642,
        "1983": 2643,
        "1984": 2644,
        "1985": 2645,
        "1986": 2646,
        "1987": 2648,
        "1988": 2650,
        "1989": 2651,
        "1990": 2652,
        "1991": 2653,
        "1992": 2654,
        "1993": 2656,
        "1994": 2657,
        "1995": 2658,
        "1996": 2659,
        "1997": 2660,
        "1998": 2661,
        "1999": 2662,
        "2000": 2663,
        "2001": 2665,
        "2002": 2666,
        "2003": 2667,
        "2004": 2670,
        "2005": 2671,
        "2006": 2672,
        "2007": 2673,
        "2008": 2678,
        "2009": 2679,
        "2010": 2680,
        "2011": 2681,
        "2012": 2682,
        "2013": 2683,
        "2014": 2684,
        "2015": 2685,
        "2016": 2693,
        "2017": 2694,
        "2018": 2695,
        "2019": 2696,
        "2020": 2697,
        "2021": 2698,
        "2022": 2699,
        "2023": 2703,
        "2024": 2704,
        "2025": 2705,
        "2026": 2706,
        "2027": 2707,
        "2028": 2708,
        "2029": 2710,
        "2030": 2711,
        "2031": 2712,
        "2032": 2713,
        "2033": 2715,
        "2034": 2716,
        "2035": 2717,
        "2036": 2718,
        "2037": 2719,
        "2038": 2721,
        "2039": 2722,
        "2040": 2723,
        "2041": 2724,
        "2042": 2725,
        "2043": 2726,
        "2044": 2727,
        "2045": 2729,
        "2046": 2730,
        "2047": 2731,
        "2048": 2732,
        "2049": 2733,
        "2050": 2735,
        "2051": 2736,
        "2052": 2739,
        "2053": 2740,
        "2054": 2741,
        "2055": 2744,
        "2056": 2745,
        "2057": 2746,
        "2058": 2747,
        "2059": 2748,
        "2060": 2749,
        "2061": 2750,
        "2062": 2751,
        "2063": 2760,
        "2064": 2761,
        "2065": 2762,
        "2066": 2765,
        "2067": 2766,
        "2068": 2767,
        "2069": 2768,
        "2070": 2769,
        "2071": 2770,
        "2072": 2771,
        "2073": 2778,
        "2074": 2779,
        "2075": 2780,
        "2076": 2781,
        "2077": 2784,
        "2078": 2785,
        "2079": 2786,
        "2080": 2787,
        "2081": 2788,
        "2082": 2789,
        "2083": 2790,
        "2084": 2791,
        "2085": 2798,
        "2086": 2799,
        "2087": 2800,
        "2088": 2801,
        "2089": 2806,
        "2090": 2807,
        "2091": 2808,
        "2092": 2809,
        "2093": 2810,
        "2094": 2811,
        "2095": 2812,
        "2096": 2813,
        "2097": 2815,
        "2098": 2816,
        "2099": 2817,
        "2100": 2818,
        "2101": 2824,
        "2102": 2825,
        "2103": 2826,
        "2104": 2827,
        "2105": 2828,
        "2106": 2829,
        "2107": 2830,
        "2108": 2831,
        "2109": 2833,
        "2110": 2834,
        "2111": 2835,
        "2112": 2836,
        "2113": 2839,
        "2114": 2840,
        "2115": 2841,
        "2116": 2842,
        "2117": 2843,
        "2118": 2845,
        "2119": 2846,
        "2120": 2848,
        "2121": 2849,
        "2122": 2850,
        "2123": 2851,
        "2124": 2855,
        "2125": 2856,
        "2126": 2857,
        "2127": 2860,
        "2128": 2861,
        "2129": 2862,
        "2130": 2864,
        "2131": 2865,
        "2132": 2866,
        "2133": 2867,
        "2134": 2869,
        "2135": 2870,
        "2136": 2871,
        "2137": 2872,
        "2138": 2873,
        "2139": 2874,
        "2140": 2875,
        "2141": 2876,
        "2142": 2877,
        "2143": 2878,
        "2144": 2879,
        "2145": 2880,
        "2146": 2881,
        "2147": 2882,
        "2148": 2883,
        "2149": 2884,
        "2150": 2885,
        "2151": 2886,
        "2152": 2887,
        "2153": 2888,
        "2154": 2889,
        "2155": 2890,
        "2156": 2891,
        "2157": 2894,
        "2158": 2895,
        "2159": 2897,
        "2160": 2899,
        "2161": 2900,
        "2162": 2901,
        "2163": 2902,
        "2164": 2903,
        "2165": 2904,
        "2166": 2905,
        "2167": 2906,
        "2168": 2908,
        "2169": 2910,
        "2170": 2911,
        "2171": 2913,
        "2172": 2914,
        "2173": 2915,
        "2174": 2916,
        "2175": 2919,
        "2176": 2920,
        "2177": 2923,
        "2178": 2924,
        "2179": 2925,
        "2180": 2926,
        "2181": 2928,
        "2182": 2929,
        "2183": 2930,
        "2184": 2931,
        "2185": 2932,
        "2186": 2933,
        "2187": 2934,
        "2188": 2935,
        "2189": 2937,
        "2190": 2938,
        "2191": 2939,
        "2192": 2940,
        "2193": 2942,
        "2194": 2943,
        "2195": 2944,
        "2196": 2945,
        "2197": 2946,
        "2198": 2947,
        "2199": 2948,
        "2200": 2949,
        "2201": 2951,
        "2202": 2952,
        "2203": 2953,
        "2204": 2954,
        "2205": 2956,
        "2206": 2957,
        "2207": 2958,
        "2208": 2959,
        "2209": 2960,
        "2210": 2961,
        "2211": 2962,
        "2212": 2963,
        "2213": 2965,
        "2214": 2966,
        "2215": 2967,
        "2216": 2970,
        "2217": 2971,
        "2218": 2972,
        "2219": 2973,
        "2220": 2975,
        "2221": 2976,
        "2222": 2977,
        "2223": 2980,
        "2224": 2981,
        "2225": 2982,
        "2226": 2983,
        "2227": 2997,
        "2228": 2998,
        "2229": 2999,
        "2230": 3000,
        "2231": 3001,
        "2232": 3002,
        "2233": 3003,
        "2234": 3005,
        "2235": 3006,
        "2236": 3007,
        "2237": 3008,
        "2238": 3010,
        "2239": 3011,
        "2240": 3012,
        "2241": 3013,
        "2242": 3014,
        "2243": 3015,
        "2244": 3016,
        "2245": 3017,
        "2246": 3019,
        "2247": 3021,
        "2248": 3022,
        "2249": 3024,
        "2250": 3025,
        "2251": 3026,
        "2252": 3027,
        "2253": 3028,
        "2254": 3029,
        "2255": 3030,
        "2256": 3033,
        "2257": 3034,
        "2258": 3035,
        "2259": 3038,
        "2260": 3039,
        "2261": 3040,
        "2262": 3041,
        "2263": 3042,
        "2264": 3043,
        "2265": 3044,
        "2266": 3046,
        "2267": 3047,
        "2268": 3048,
        "2269": 3049,
        "2270": 3065,
        "2271": 3066,
        "2272": 3067,
        "2273": 3068,
        "2274": 3069,
        "2275": 3072,
        "2276": 3074,
        "2277": 3076,
        "2278": 3077,
        "2279": 3079,
        "2280": 3080,
        "2281": 3081,
        "2282": 3082,
        "2283": 3083,
        "2284": 3084,
        "2285": 3085,
        "2286": 3086,
        "2287": 3090,
        "2288": 3091,
        "2289": 3092,
        "2290": 3093,
        "2291": 3095,
        "2292": 3096,
        "2293": 3097,
        "2294": 3098,
        "2295": 3099,
        "2296": 3100,
        "2297": 3101,
        "2298": 3102,
        "2299": 3105,
        "2300": 3106,
        "2301": 3107,
        "2302": 3108,
        "2303": 3110,
        "2304": 3111,
        "2305": 3112,
        "2306": 3113,
        "2307": 3114,
        "2308": 3115,
        "2309": 3116,
        "2310": 3117,
        "2311": 3120,
        "2312": 3121,
        "2313": 3122,
        "2314": 3123,
        "2315": 3127,
        "2316": 3128,
        "2317": 3129,
        "2318": 3130,
        "2319": 3131,
        "2320": 3132,
        "2321": 3133,
        "2322": 3134,
        "2323": 3136,
        "2324": 3137,
        "2325": 3138,
        "2326": 3139,
        "2327": 3142,
        "2328": 3143,
        "2329": 3144,
        "2330": 3145,
        "2331": 3146,
        "2332": 3148,
        "2333": 3149,
        "2334": 3151,
        "2335": 3152,
        "2336": 3153,
        "2337": 3154,
        "2338": 3158,
        "2339": 3159,
        "2340": 3160,
        "2341": 3161,
        "2342": 3162,
        "2343": 3163,
        "2344": 3164,
        "2345": 3165,
        "2346": 3168,
        "2347": 3169,
        "2348": 3170,
        "2349": 3174,
        "2350": 3175,
        "2351": 3176,
        "2352": 3177,
        "2353": 3178,
        "2354": 3179,
        "2355": 3180,
        "2356": 3181,
        "2357": 3184,
        "2358": 3185,
        "2359": 3186,
        "2360": 3187,
        "2361": 3190,
        "2362": 3191,
        "2363": 3192,
        "2364": 3193,
        "2365": 3194,
        "2366": 3195,
        "2367": 3196,
        "2368": 3197,
        "2369": 3200,
        "2370": 3202,
        "2371": 3206,
        "2372": 3207,
        "2373": 3208,
        "2374": 3209,
        "2375": 3210,
        "2376": 3211,
        "2377": 3212,
        "2378": 3213,
        "2379": 3216,
        "2380": 3217,
        "2381": 3218,
        "2382": 3219,
        "2383": 3220,
        "2384": 3222,
        "2385": 3224,
        "2386": 3226,
        "2387": 3227,
        "2388": 3228,
        "2389": 3229,
        "2390": 3232,
        "2391": 3233,
        "2392": 3234,
        "2393": 3235,
        "2394": 3238,
        "2395": 3239,
        "2396": 3240,
        "2397": 3241,
        "2398": 3242,
        "2399": 3243,
        "2400": 3244,
        "2401": 3245,
        "2402": 3248,
        "2403": 3249,
        "2404": 3250,
        "2405": 3251,
        "2406": 3254,
        "2407": 3255,
        "2408": 3256,
        "2409": 3257,
        "2410": 3258,
        "2411": 3259,
        "2412": 3260,
        "2413": 3261,
        "2414": 3264,
        "2415": 3265,
        "2416": 3266,
        "2417": 3267,
        "2418": 3270,
        "2419": 3271,
        "2420": 3272,
        "2421": 3273,
        "2422": 3274,
        "2423": 3275,
        "2424": 3276,
        "2425": 3277,
        "2426": 3280
    },
    "name": {
        "0": "Minimum String Length After Removing Substrings",
        "1": "Two Sum",
        "2": "Add Two Numbers",
        "3": "Median of Two Sorted Arrays",
        "4": "Zigzag Conversion",
        "5": "Reverse Integer",
        "6": "Palindrome Number",
        "7": "Regular Expression Matching",
        "8": "Container With Most Water",
        "9": "Integer to Roman",
        "10": "Roman to Integer",
        "11": "Longest Common Prefix",
        "12": "3Sum",
        "13": "3Sum Closest",
        "14": "Letter Combinations of a Phone Number",
        "15": "4Sum",
        "16": "Remove Nth Node From End of List",
        "17": "Valid Parentheses",
        "18": "Merge Two Sorted Lists",
        "19": "Generate Parentheses",
        "20": "Merge k Sorted Lists",
        "21": "Swap Nodes in Pairs",
        "22": "Reverse Nodes in k-Group",
        "23": "Remove Duplicates from Sorted Array",
        "24": "Remove Element",
        "25": "Find the Index of the First Occurrence in a String",
        "26": "Divide Two Integers",
        "27": "Substring with Concatenation of All Words",
        "28": "Next Permutation",
        "29": "Longest Valid Parentheses",
        "30": "Search in Rotated Sorted Array",
        "31": "Find First and Last Position of Element in Sorted Array",
        "32": "Search Insert Position",
        "33": "Valid Sudoku",
        "34": "Sudoku Solver",
        "35": "Count and Say",
        "36": "Combination Sum",
        "37": "Combination Sum II",
        "38": "First Missing Positive",
        "39": "Trapping Rain Water",
        "40": "Multiply Strings",
        "41": "Wildcard Matching",
        "42": "Jump Game II",
        "43": "Permutations",
        "44": "Permutations II",
        "45": "Rotate Image",
        "46": "Group Anagrams",
        "47": "Pow(x, n)",
        "48": "N-Queens",
        "49": "N-Queens II",
        "50": "Maximum Subarray",
        "51": "Spiral Matrix",
        "52": "Jump Game",
        "53": "Merge Intervals",
        "54": "Insert Interval",
        "55": "Length of Last Word",
        "56": "Permutation Sequence",
        "57": "Rotate List",
        "58": "Unique Paths",
        "59": "Unique Paths II",
        "60": "Minimum Path Sum",
        "61": "Valid Number",
        "62": "Add Binary",
        "63": "Text Justification",
        "64": "Sqrt(x)",
        "65": "Climbing Stairs",
        "66": "Simplify Path",
        "67": "Edit Distance",
        "68": "Search a 2D Matrix",
        "69": "Sort Colors",
        "70": "Minimum Window Substring",
        "71": "Combinations",
        "72": "Subsets",
        "73": "Word Search",
        "74": "Remove Duplicates from Sorted Array II",
        "75": "Search in Rotated Sorted Array II",
        "76": "Remove Duplicates from Sorted List II",
        "77": "Remove Duplicates from Sorted List",
        "78": "Largest Rectangle in Histogram",
        "79": "Maximal Rectangle",
        "80": "Partition List",
        "81": "Scramble String",
        "82": "Merge Sorted Array",
        "83": "Gray Code",
        "84": "Subsets II",
        "85": "Decode Ways",
        "86": "Reverse Linked List II",
        "87": "Binary Tree Inorder Traversal",
        "88": "Unique Binary Search Trees II",
        "89": "Unique Binary Search Trees",
        "90": "Interleaving String",
        "91": "Validate Binary Search Tree",
        "92": "Recover Binary Search Tree",
        "93": "Same Tree",
        "94": "Binary Tree Level Order Traversal",
        "95": "Binary Tree Zigzag Level Order Traversal",
        "96": "Maximum Depth of Binary Tree",
        "97": "Construct Binary Tree from Preorder and Inorder Traversal",
        "98": "Construct Binary Tree from Inorder and Postorder Traversal",
        "99": "Convert Sorted Array to Binary Search Tree",
        "100": "Convert Sorted List to Binary Search Tree",
        "101": "Balanced Binary Tree",
        "102": "Minimum Depth of Binary Tree",
        "103": "Path Sum",
        "104": "Path Sum II",
        "105": "Flatten Binary Tree to Linked List",
        "106": "Distinct Subsequences",
        "107": "Populating Next Right Pointers in Each Node",
        "108": "Populating Next Right Pointers in Each Node II",
        "109": "Pascal's Triangle",
        "110": "Pascal's Triangle II",
        "111": "Triangle",
        "112": "Best Time to Buy and Sell Stock",
        "113": "Best Time to Buy and Sell Stock II",
        "114": "Best Time to Buy and Sell Stock III",
        "115": "Binary Tree Maximum Path Sum",
        "116": "Valid Palindrome",
        "117": "Word Ladder II",
        "118": "Word Ladder",
        "119": "Longest Consecutive Sequence",
        "120": "Sum Root to Leaf Numbers",
        "121": "Surrounded Regions",
        "122": "Palindrome Partitioning",
        "123": "Clone Graph",
        "124": "Gas Station",
        "125": "Candy",
        "126": "Single Number",
        "127": "Single Number II",
        "128": "Copy List with Random Pointer",
        "129": "Word Break",
        "130": "Word Break II",
        "131": "Linked List Cycle",
        "132": "Linked List Cycle II",
        "133": "Reorder List",
        "134": "Binary Tree Preorder Traversal",
        "135": "Binary Tree Postorder Traversal",
        "136": "LRU Cache",
        "137": "Insertion Sort List",
        "138": "Sort List",
        "139": "Max Points on a Line",
        "140": "Evaluate Reverse Polish Notation",
        "141": "Reverse Words in a String",
        "142": "Maximum Product Subarray",
        "143": "Find Minimum in Rotated Sorted Array",
        "144": "Find Minimum in Rotated Sorted Array II",
        "145": "Min Stack",
        "146": "Intersection of Two Linked Lists",
        "147": "Find Peak Element",
        "148": "Maximum Gap",
        "149": "Fraction to Recurring Decimal",
        "150": "Two Sum II - Input Array Is Sorted",
        "151": "Excel Sheet Column Title",
        "152": "Majority Element",
        "153": "Excel Sheet Column Number",
        "154": "Factorial Trailing Zeroes",
        "155": "Dungeon Game",
        "156": "Combine Two Tables",
        "157": "Second Highest Salary",
        "158": "Nth Highest Salary",
        "159": "Rank Scores",
        "160": "Largest Number",
        "161": "Consecutive Numbers",
        "162": "Employees Earning More Than Their Managers",
        "163": "Duplicate Emails",
        "164": "Customers Who Never Order",
        "165": "Department Highest Salary",
        "166": "Department Top Three Salaries",
        "167": "Repeated DNA Sequences",
        "168": "Best Time to Buy and Sell Stock IV",
        "169": "Rotate Array",
        "170": "Number of 1 Bits",
        "171": "Word Frequency",
        "172": "Valid Phone Numbers",
        "173": "Transpose File",
        "174": "Tenth Line",
        "175": "Delete Duplicate Emails",
        "176": "Rising Temperature",
        "177": "House Robber",
        "178": "Binary Tree Right Side View",
        "179": "Number of Islands",
        "180": "Bitwise AND of Numbers Range",
        "181": "Happy Number",
        "182": "Remove Linked List Elements",
        "183": "Count Primes",
        "184": "Isomorphic Strings",
        "185": "Reverse Linked List",
        "186": "Course Schedule",
        "187": "Implement Trie (Prefix Tree)",
        "188": "Minimum Size Subarray Sum",
        "189": "Course Schedule II",
        "190": "Design Add and Search Words Data Structure",
        "191": "Word Search II",
        "192": "House Robber II",
        "193": "Shortest Palindrome",
        "194": "Kth Largest Element in an Array",
        "195": "Combination Sum III",
        "196": "Contains Duplicate",
        "197": "The Skyline Problem",
        "198": "Contains Duplicate II",
        "199": "Contains Duplicate III",
        "200": "Maximal Square",
        "201": "Count Complete Tree Nodes",
        "202": "Implement Stack using Queues",
        "203": "Invert Binary Tree",
        "204": "Basic Calculator II",
        "205": "Summary Ranges",
        "206": "Majority Element II",
        "207": "Kth Smallest Element in a BST",
        "208": "Power of Two",
        "209": "Implement Queue using Stacks",
        "210": "Number of Digit One",
        "211": "Palindrome Linked List",
        "212": "Product of Array Except Self",
        "213": "Search a 2D Matrix II",
        "214": "Different Ways to Add Parentheses",
        "215": "Valid Anagram",
        "216": "Binary Tree Paths",
        "217": "Add Digits",
        "218": "Single Number III",
        "219": "Trips and Users",
        "220": "Ugly Number II",
        "221": "Missing Number",
        "222": "Integer to English Words",
        "223": "H-Index",
        "224": "H-Index II",
        "225": "First Bad Version",
        "226": "Perfect Squares",
        "227": "Expression Add Operators",
        "228": "Move Zeroes",
        "229": "Peeking Iterator",
        "230": "Find the Duplicate Number",
        "231": "Game of Life",
        "232": "Word Pattern",
        "233": "Nim Game",
        "234": "Find Median from Data Stream",
        "235": "Serialize and Deserialize Binary Tree",
        "236": "Bulls and Cows",
        "237": "Longest Increasing Subsequence",
        "238": "Remove Invalid Parentheses",
        "239": "Range Sum Query 2D - Immutable",
        "240": "Additive Number",
        "241": "Range Sum Query - Mutable",
        "242": "Best Time to Buy and Sell Stock with Cooldown",
        "243": "Minimum Height Trees",
        "244": "Burst Balloons",
        "245": "Count of Smaller Numbers After Self",
        "246": "Remove Duplicate Letters",
        "247": "Maximum Product of Word Lengths",
        "248": "Bulb Switcher",
        "249": "Create Maximum Number",
        "250": "Coin Change",
        "251": "Wiggle Sort II",
        "252": "Power of Three",
        "253": "Count of Range Sum",
        "254": "Odd Even Linked List",
        "255": "Longest Increasing Path in a Matrix",
        "256": "Patching Array",
        "257": "Verify Preorder Serialization of a Binary Tree",
        "258": "Reconstruct Itinerary",
        "259": "Increasing Triplet Subsequence",
        "260": "Self Crossing",
        "261": "Palindrome Pairs",
        "262": "House Robber III",
        "263": "Counting Bits",
        "264": "Flatten Nested List Iterator",
        "265": "Power of Four",
        "266": "Integer Break",
        "267": "Reverse String",
        "268": "Reverse Vowels of a String",
        "269": "Intersection of Two Arrays",
        "270": "Intersection of Two Arrays II",
        "271": "Data Stream as Disjoint Intervals",
        "272": "Russian Doll Envelopes",
        "273": "Design Twitter",
        "274": "Count Numbers with Unique Digits",
        "275": "Max Sum of Rectangle No Larger Than K",
        "276": "Water and Jug Problem",
        "277": "Valid Perfect Square",
        "278": "Largest Divisible Subset",
        "279": "Sum of Two Integers",
        "280": "Super Pow",
        "281": "Find K Pairs with Smallest Sums",
        "282": "Guess Number Higher or Lower",
        "283": "Guess Number Higher or Lower II",
        "284": "Wiggle Subsequence",
        "285": "Combination Sum IV",
        "286": "Insert Delete GetRandom O(1)",
        "287": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "288": "Linked List Random Node",
        "289": "Ransom Note",
        "290": "Shuffle an Array",
        "291": "Mini Parser",
        "292": "Lexicographical Numbers",
        "293": "First Unique Character in a String",
        "294": "Longest Absolute File Path",
        "295": "Find the Difference",
        "296": "Elimination Game",
        "297": "Perfect Rectangle",
        "298": "Is Subsequence",
        "299": "Decode String",
        "300": "Longest Substring with At Least K Repeating Characters",
        "301": "Rotate Function",
        "302": "Integer Replacement",
        "303": "Random Pick Index",
        "304": "Evaluate Division",
        "305": "Nth Digit",
        "306": "Binary Watch",
        "307": "Frog Jump",
        "308": "Sum of Left Leaves",
        "309": "Convert a Number to Hexadecimal",
        "310": "Queue Reconstruction by Height",
        "311": "Trapping Rain Water II",
        "312": "Longest Palindrome",
        "313": "Split Array Largest Sum",
        "314": "Fizz Buzz",
        "315": "Arithmetic Slices",
        "316": "Third Maximum Number",
        "317": "Add Strings",
        "318": "Partition Equal Subset Sum",
        "319": "Pacific Atlantic Water Flow",
        "320": "Battleships in a Board",
        "321": "Reconstruct Original Digits from English",
        "322": "Longest Repeating Character Replacement",
        "323": "Construct Quad Tree",
        "324": "N-ary Tree Level Order Traversal",
        "325": "All O`one Data Structure",
        "326": "Minimum Genetic Mutation",
        "327": "Number of Segments in a String",
        "328": "Non-overlapping Intervals",
        "329": "Find Right Interval",
        "330": "Path Sum III",
        "331": "Find All Anagrams in a String",
        "332": "K-th Smallest in Lexicographical Order",
        "333": "Arranging Coins",
        "334": "Find All Duplicates in an Array",
        "335": "String Compression",
        "336": "Add Two Numbers II",
        "337": "Arithmetic Slices II - Subsequence",
        "338": "Number of Boomerangs",
        "339": "Find All Numbers Disappeared in an Array",
        "340": "Delete Node in a BST",
        "341": "Sort Characters By Frequency",
        "342": "Minimum Number of Arrows to Burst Balloons",
        "343": "Minimum Moves to Equal Array Elements",
        "344": "4Sum II",
        "345": "132 Pattern",
        "346": "Circular Array Loop",
        "347": "Poor Pigs",
        "348": "Repeated Substring Pattern",
        "349": "LFU Cache",
        "350": "Hamming Distance",
        "351": "Minimum Moves to Equal Array Elements II",
        "352": "Island Perimeter",
        "353": "Can I Win",
        "354": "Count The Repetitions",
        "355": "Validate IP Address",
        "356": "Implement Rand10() Using Rand7()",
        "357": "Concatenated Words",
        "358": "Matchsticks to Square",
        "359": "Ones and Zeroes",
        "360": "Heaters",
        "361": "Number Complement",
        "362": "Total Hamming Distance",
        "363": "Generate Random Point in a Circle",
        "364": "Largest Palindrome Product",
        "365": "Sliding Window Median",
        "366": "Magical String",
        "367": "License Key Formatting",
        "368": "Smallest Good Base",
        "369": "Max Consecutive Ones",
        "370": "Predict the Winner",
        "371": "Zuma Game",
        "372": "Non-decreasing Subsequences",
        "373": "Construct the Rectangle",
        "374": "Reverse Pairs",
        "375": "Target Sum",
        "376": "Teemo Attacking",
        "377": "Next Greater Element I",
        "378": "Random Point in Non-overlapping Rectangles",
        "379": "Diagonal Traverse",
        "380": "Keyboard Row",
        "381": "IPO",
        "382": "Next Greater Element II",
        "383": "Base 7",
        "384": "Relative Ranks",
        "385": "Perfect Number",
        "386": "Most Frequent Subtree Sum",
        "387": "Fibonacci Number",
        "388": "Game Play Analysis I",
        "389": "Find Bottom Left Tree Value",
        "390": "Freedom Trail",
        "391": "Find Largest Value in Each Tree Row",
        "392": "Longest Palindromic Subsequence",
        "393": "Super Washing Machines",
        "394": "Coin Change II",
        "395": "Random Flip Matrix",
        "396": "Detect Capital",
        "397": "Longest Uncommon Subsequence I",
        "398": "Longest Uncommon Subsequence II",
        "399": "Continuous Subarray Sum",
        "400": "Longest Word in Dictionary through Deleting",
        "401": "Contiguous Array",
        "402": "Random Pick with Weight",
        "403": "Minesweeper",
        "404": "Minimum Absolute Difference in BST",
        "405": "K-diff Pairs in an Array",
        "406": "Encode and Decode TinyURL",
        "407": "Complex Number Multiplication",
        "408": "Convert BST to Greater Tree",
        "409": "Minimum Time Difference",
        "410": "Reverse String II",
        "411": "01 Matrix",
        "412": "Diameter of Binary Tree",
        "413": "Remove Boxes",
        "414": "Number of Provinces",
        "415": "Game Play Analysis IV",
        "416": "Student Attendance Record I",
        "417": "Student Attendance Record II",
        "418": "Optimal Division",
        "419": "Brick Wall",
        "420": "Next Greater Element III",
        "421": "Reverse Words in a String III",
        "422": "Logical OR of Two Binary Grids Represented as Quad-Trees",
        "423": "Maximum Depth of N-ary Tree",
        "424": "Subarray Sum Equals K",
        "425": "Array Partition",
        "426": "Binary Tree Tilt",
        "427": "Find the Closest Palindrome",
        "428": "Reshape the Matrix",
        "429": "Permutation in String",
        "430": "Managers with at Least 5 Direct Reports",
        "431": "Subtree of Another Tree",
        "432": "Distribute Candies",
        "433": "Out of Boundary Paths",
        "434": "Employee Bonus",
        "435": "Shortest Unsorted Continuous Subarray",
        "436": "Delete Operation for Two Strings",
        "437": "Find Customer Referee",
        "438": "Investments in 2016",
        "439": "Customer Placing the Largest Number of Orders",
        "440": "Erect the Fence",
        "441": "N-ary Tree Preorder Traversal",
        "442": "N-ary Tree Postorder Traversal",
        "443": "Tag Validator",
        "444": "Fraction Addition and Subtraction",
        "445": "Valid Square",
        "446": "Longest Harmonious Subsequence",
        "447": "Big Countries",
        "448": "Classes More Than 5 Students",
        "449": "Range Addition II",
        "450": "Minimum Index Sum of Two Lists",
        "451": "Non-negative Integers without Consecutive Ones",
        "452": "Human Traffic of Stadium",
        "453": "Friend Requests II: Who Has the Most Friends",
        "454": "Can Place Flowers",
        "455": "Construct String from Binary Tree",
        "456": "Sales Person",
        "457": "Tree Node",
        "458": "Find Duplicate File in System",
        "459": "Triangle Judgement",
        "460": "Valid Triangle Number",
        "461": "Merge Two Binary Trees",
        "462": "Biggest Single Number",
        "463": "Not Boring Movies",
        "464": "Task Scheduler",
        "465": "Design Circular Queue",
        "466": "Add One Row to Tree",
        "467": "Maximum Distance in Arrays",
        "468": "Exchange Seats",
        "469": "Swap Salary",
        "470": "Maximum Product of Three Numbers",
        "471": "K Inverse Pairs Array",
        "472": "Course Schedule III",
        "473": "Smallest Range Covering Elements from K Lists",
        "474": "Sum of Square Numbers",
        "475": "Exclusive Time of Functions",
        "476": "Average of Levels in Binary Tree",
        "477": "Shopping Offers",
        "478": "Decode Ways II",
        "479": "Solve the Equation",
        "480": "Design Circular Deque",
        "481": "Maximum Average Subarray I",
        "482": "Set Mismatch",
        "483": "Maximum Length of Pair Chain",
        "484": "Palindromic Substrings",
        "485": "Replace Words",
        "486": "Dota2 Senate",
        "487": "2 Keys Keyboard",
        "488": "Two Sum IV - Input is a BST",
        "489": "Maximum Binary Tree",
        "490": "Print Binary Tree",
        "491": "Robot Return to Origin",
        "492": "Find K Closest Elements",
        "493": "Split Array into Consecutive Subsequences",
        "494": "Image Smoother",
        "495": "Maximum Width of Binary Tree",
        "496": "Strange Printer",
        "497": "Non-decreasing Array",
        "498": "Beautiful Arrangement II",
        "499": "Kth Smallest Number in Multiplication Table",
        "500": "Trim a Binary Search Tree",
        "501": "Second Minimum Node In a Binary Tree",
        "502": "Bulb Switcher II",
        "503": "Number of Longest Increasing Subsequence",
        "504": "Longest Continuous Increasing Subsequence",
        "505": "Cut Off Trees for Golf Event",
        "506": "Implement Magic Dictionary",
        "507": "Map Sum Pairs",
        "508": "24 Game",
        "509": "Valid Palindrome II",
        "510": "Baseball Game",
        "511": "Redundant Connection",
        "512": "Redundant Connection II",
        "513": "Repeated String Match",
        "514": "Longest Univalue Path",
        "515": "Knight Probability in Chessboard",
        "516": "Maximum Sum of 3 Non-Overlapping Subarrays",
        "517": "Employee Importance",
        "518": "Stickers to Spell Word",
        "519": "Binary Number with Alternating Bits",
        "520": "Max Area of Island",
        "521": "Count Binary Substrings",
        "522": "Degree of an Array",
        "523": "Partition to K Equal Sum Subsets",
        "524": "Falling Squares",
        "525": "Search in a Binary Search Tree",
        "526": "Insert into a Binary Search Tree",
        "527": "Kth Largest Element in a Stream",
        "528": "Binary Search",
        "529": "Design HashSet",
        "530": "Design HashMap",
        "531": "Design Linked List",
        "532": "To Lower Case",
        "533": "Random Pick with Blacklist",
        "534": "Minimum ASCII Delete Sum for Two Strings",
        "535": "Subarray Product Less Than K",
        "536": "Best Time to Buy and Sell Stock with Transaction Fee",
        "537": "Range Module",
        "538": "1-bit and 2-bit Characters",
        "539": "Maximum Length of Repeated Subarray",
        "540": "Find K-th Smallest Pair Distance",
        "541": "Longest Word in Dictionary",
        "542": "Accounts Merge",
        "543": "Remove Comments",
        "544": "Find Pivot Index",
        "545": "Split Linked List in Parts",
        "546": "Number of Atoms",
        "547": "Self Dividing Numbers",
        "548": "My Calendar I",
        "549": "Count Different Palindromic Subsequences",
        "550": "My Calendar II",
        "551": "Flood Fill",
        "552": "Asteroid Collision",
        "553": "Parse Lisp Expression",
        "554": "Monotone Increasing Digits",
        "555": "Daily Temperatures",
        "556": "Delete and Earn",
        "557": "Cherry Pickup",
        "558": "Network Delay Time",
        "559": "Find Smallest Letter Greater Than Target",
        "560": "Largest Number At Least Twice of Others",
        "561": "Shortest Completing Word",
        "562": "Contain Virus",
        "563": "Open the Lock",
        "564": "Cracking the Safe",
        "565": "Reach a Number",
        "566": "Pyramid Transition Matrix",
        "567": "Set Intersection Size At Least Two",
        "568": "Special Binary String",
        "569": "Partition Labels",
        "570": "Largest Plus Sign",
        "571": "Couples Holding Hands",
        "572": "Toeplitz Matrix",
        "573": "Reorganize String",
        "574": "Max Chunks To Make Sorted II",
        "575": "Max Chunks To Make Sorted",
        "576": "Basic Calculator IV",
        "577": "Jewels and Stones",
        "578": "Sliding Puzzle",
        "579": "Global and Local Inversions",
        "580": "Swap Adjacent in LR String",
        "581": "Swim in Rising Water",
        "582": "K-th Symbol in Grammar",
        "583": "Reaching Points",
        "584": "Rabbits in Forest",
        "585": "Transform to Chessboard",
        "586": "Minimum Distance Between BST Nodes",
        "587": "Letter Case Permutation",
        "588": "Is Graph Bipartite?",
        "589": "K-th Smallest Prime Fraction",
        "590": "Cheapest Flights Within K Stops",
        "591": "Rotated Digits",
        "592": "Escape The Ghosts",
        "593": "Domino and Tromino Tiling",
        "594": "Custom Sort String",
        "595": "Number of Matching Subsequences",
        "596": "Preimage Size of Factorial Zeroes Function",
        "597": "Valid Tic-Tac-Toe State",
        "598": "Number of Subarrays with Bounded Maximum",
        "599": "Rotate String",
        "600": "All Paths From Source to Target",
        "601": "Smallest Rotation with Highest Score",
        "602": "Champagne Tower",
        "603": "Minimum Swaps To Make Sequences Increasing",
        "604": "Find Eventual Safe States",
        "605": "Bricks Falling When Hit",
        "606": "Unique Morse Code Words",
        "607": "Number of Lines To Write String",
        "608": "Max Increase to Keep City Skyline",
        "609": "Soup Servings",
        "610": "Expressive Words",
        "611": "Chalkboard XOR Game",
        "612": "Subdomain Visit Count",
        "613": "Largest Triangle Area",
        "614": "Largest Sum of Averages",
        "615": "Binary Tree Pruning",
        "616": "Bus Routes",
        "617": "Ambiguous Coordinates",
        "618": "Linked List Components",
        "619": "Race Car",
        "620": "Most Common Word",
        "621": "Short Encoding of Words",
        "622": "Shortest Distance to a Character",
        "623": "Card Flipping Game",
        "624": "Binary Trees With Factors",
        "625": "Goat Latin",
        "626": "Friends Of Appropriate Ages",
        "627": "Making A Large Island",
        "628": "Count Unique Characters of All Substrings of a Given String",
        "629": "Consecutive Numbers Sum",
        "630": "Positions of Large Groups",
        "631": "Masking Personal Information",
        "632": "Flipping an Image",
        "633": "Find And Replace in String",
        "634": "Sum of Distances in Tree",
        "635": "Image Overlap",
        "636": "Rectangle Overlap",
        "637": "New 21 Game",
        "638": "Push Dominoes",
        "639": "Magic Squares In Grid",
        "640": "Split Array into Fibonacci Sequence",
        "641": "Guess the Word",
        "642": "Backspace String Compare",
        "643": "Longest Mountain in Array",
        "644": "Hand of Straights",
        "645": "Shortest Path Visiting All Nodes",
        "646": "Shifting Letters",
        "647": "Maximize Distance to Closest Person",
        "648": "Rectangle Area II",
        "649": "Loud and Rich",
        "650": "Peak Index in a Mountain Array",
        "651": "Car Fleet",
        "652": "K-Similar Strings",
        "653": "Exam Room",
        "654": "Score of Parentheses",
        "655": "Minimum Cost to Hire K Workers",
        "656": "Mirror Reflection",
        "657": "Buddy Strings",
        "658": "Lemonade Change",
        "659": "Score After Flipping Matrix",
        "660": "Shortest Subarray with Sum at Least K",
        "661": "All Nodes Distance K in Binary Tree",
        "662": "Shortest Path to Get All Keys",
        "663": "Smallest Subtree with all the Deepest Nodes",
        "664": "Prime Palindrome",
        "665": "Transpose Matrix",
        "666": "Reordered Power of 2",
        "667": "Advantage Shuffle",
        "668": "Leaf-Similar Trees",
        "669": "Length of Longest Fibonacci Subsequence",
        "670": "Walking Robot Simulation",
        "671": "Koko Eating Bananas",
        "672": "Middle of the Linked List",
        "673": "Stone Game",
        "674": "Nth Magical Number",
        "675": "Profitable Schemes",
        "676": "Decoded String at Index",
        "677": "Boats to Save People",
        "678": "Reachable Nodes In Subdivided Graph",
        "679": "Projection Area of 3D Shapes",
        "680": "Uncommon Words from Two Sentences",
        "681": "Spiral Matrix III",
        "682": "Possible Bipartition",
        "683": "Fair Candy Swap",
        "684": "Construct Binary Tree from Preorder and Postorder Traversal",
        "685": "Find and Replace Pattern",
        "686": "Sum of Subsequence Widths",
        "687": "Surface Area of 3D Shapes",
        "688": "Groups of Special-Equivalent Strings",
        "689": "All Possible Full Binary Trees",
        "690": "Maximum Frequency Stack",
        "691": "Monotonic Array",
        "692": "Bitwise ORs of Subarrays",
        "693": "Orderly Queue",
        "694": "RLE Iterator",
        "695": "Online Stock Span",
        "696": "Numbers At Most N Given Digit Set",
        "697": "Valid Permutations for DI Sequence",
        "698": "Fruit Into Baskets",
        "699": "Sort Array By Parity",
        "700": "Super Palindromes",
        "701": "Sum of Subarray Minimums",
        "702": "Smallest Range I",
        "703": "Smallest Range II",
        "704": "Online Election",
        "705": "Sort an Array",
        "706": "Cat and Mouse",
        "707": "X of a Kind in a Deck of Cards",
        "708": "Partition Array into Disjoint Intervals",
        "709": "Word Subsets",
        "710": "Reverse Only Letters",
        "711": "Maximum Sum Circular Subarray",
        "712": "Number of Music Playlists",
        "713": "Minimum Add to Make Parentheses Valid",
        "714": "Sort Array By Parity II",
        "715": "3Sum With Multiplicity",
        "716": "Minimize Malware Spread",
        "717": "Long Pressed Name",
        "718": "Flip String to Monotone Increasing",
        "719": "Three Equal Parts",
        "720": "Minimize Malware Spread II",
        "721": "Unique Email Addresses",
        "722": "Binary Subarrays With Sum",
        "723": "Minimum Falling Path Sum",
        "724": "Beautiful Array",
        "725": "Number of Recent Calls",
        "726": "Shortest Bridge",
        "727": "Knight Dialer",
        "728": "Stamping The Sequence",
        "729": "Reorder Data in Log Files",
        "730": "Range Sum of BST",
        "731": "Minimum Area Rectangle",
        "732": "Distinct Subsequences II",
        "733": "Valid Mountain Array",
        "734": "DI String Match",
        "735": "Find the Shortest Superstring",
        "736": "Delete Columns to Make Sorted",
        "737": "Minimum Increment to Make Array Unique",
        "738": "Validate Stack Sequences",
        "739": "Most Stones Removed with Same Row or Column",
        "740": "Bag of Tokens",
        "741": "Largest Time for Given Digits",
        "742": "Reveal Cards In Increasing Order",
        "743": "Flip Equivalent Binary Trees",
        "744": "Verifying an Alien Dictionary",
        "745": "Tallest Billboard",
        "746": "Prison Cells After N Days",
        "747": "Check Completeness of a Binary Tree",
        "748": "Regions Cut By Slashes",
        "749": "N-Repeated Element in Size 2N Array",
        "750": "Maximum Width Ramp",
        "751": "Minimum Area Rectangle II",
        "752": "Least Operators to Express Number",
        "753": "Univalued Binary Tree",
        "754": "Vowel Spellchecker",
        "755": "Numbers With Same Consecutive Differences",
        "756": "Binary Tree Cameras",
        "757": "Pancake Sorting",
        "758": "Powerful Integers",
        "759": "Flip Binary Tree To Match Preorder Traversal",
        "760": "Equal Rational Numbers",
        "761": "K Closest Points to Origin",
        "762": "Subarray Sums Divisible by K",
        "763": "Odd Even Jump",
        "764": "Squares of a Sorted Array",
        "765": "Longest Turbulent Subarray",
        "766": "Distribute Coins in Binary Tree",
        "767": "Unique Paths III",
        "768": "Time Based Key-Value Store",
        "769": "Triples with Bitwise AND Equal To Zero",
        "770": "Minimum Cost For Tickets",
        "771": "String Without AAA or BBB",
        "772": "Sum of Even Numbers After Queries",
        "773": "Smallest String Starting From Leaf",
        "774": "Add to Array-Form of Integer",
        "775": "Satisfiability of Equality Equations",
        "776": "Broken Calculator",
        "777": "Subarrays with K Different Integers",
        "778": "Cousins in Binary Tree",
        "779": "Rotting Oranges",
        "780": "Minimum Number of K Consecutive Bit Flips",
        "781": "Number of Squareful Arrays",
        "782": "Find the Town Judge",
        "783": "Maximum Binary Tree II",
        "784": "Minimum Cost to Merge Stones",
        "785": "Grid Illumination",
        "786": "Find Common Characters",
        "787": "Check If Word Is Valid After Substitutions",
        "788": "Max Consecutive Ones III",
        "789": "Maximize Sum Of Array After K Negations",
        "790": "Clumsy Factorial",
        "791": "Minimum Domino Rotations For Equal Row",
        "792": "Construct Binary Search Tree from Preorder Traversal",
        "793": "Complement of Base 10 Integer",
        "794": "Pairs of Songs With Total Durations Divisible by 60",
        "795": "Capacity To Ship Packages Within D Days",
        "796": "Numbers With Repeated Digits",
        "797": "Partition Array Into Three Parts With Equal Sum",
        "798": "Best Sightseeing Pair",
        "799": "Smallest Integer Divisible by K",
        "800": "Binary String With Substrings Representing 1 To N",
        "801": "Convert to Base -2",
        "802": "Binary Prefix Divisible By 5",
        "803": "Next Greater Node In Linked List",
        "804": "Number of Enclaves",
        "805": "Remove Outermost Parentheses",
        "806": "Sum of Root To Leaf Binary Numbers",
        "807": "Camelcase Matching",
        "808": "Video Stitching",
        "809": "Divisor Game",
        "810": "Maximum Difference Between Node and Ancestor",
        "811": "Longest Arithmetic Subsequence",
        "812": "Recover a Tree From Preorder Traversal",
        "813": "Two City Scheduling",
        "814": "Matrix Cells in Distance Order",
        "815": "Maximum Sum of Two Non-Overlapping Subarrays",
        "816": "Stream of Characters",
        "817": "Moving Stones Until Consecutive",
        "818": "Coloring A Border",
        "819": "Uncrossed Lines",
        "820": "Escape a Large Maze",
        "821": "Valid Boomerang",
        "822": "Binary Search Tree to Greater Sum Tree",
        "823": "Minimum Score Triangulation of Polygon",
        "824": "Moving Stones Until Consecutive II",
        "825": "Robot Bounded In Circle",
        "826": "Flower Planting With No Adjacent",
        "827": "Partition Array for Maximum Sum",
        "828": "Longest Duplicate Substring",
        "829": "Customers Who Bought All Products",
        "830": "Last Stone Weight",
        "831": "Remove All Adjacent Duplicates In String",
        "832": "Longest String Chain",
        "833": "Last Stone Weight II",
        "834": "Actors and Directors Who Cooperated At Least Three Times",
        "835": "Grumpy Bookstore Owner",
        "836": "Previous Permutation With One Swap",
        "837": "Distant Barcodes",
        "838": "Lexicographically Smallest Equivalent String",
        "839": "Product Sales Analysis I",
        "840": "Product Sales Analysis III",
        "841": "Greatest Common Divisor of Strings",
        "842": "Flip Columns For Maximum Number of Equal Rows",
        "843": "Adding Two Negabinary Numbers",
        "844": "Number of Submatrices That Sum to Target",
        "845": "Occurrences After Bigram",
        "846": "Letter Tile Possibilities",
        "847": "Insufficient Nodes in Root to Leaf Paths",
        "848": "Smallest Subsequence of Distinct Characters",
        "849": "Sales Analysis III",
        "850": "Duplicate Zeros",
        "851": "Largest Values From Labels",
        "852": "Shortest Path in Binary Matrix",
        "853": "Shortest Common Supersequence",
        "854": "Statistics from a Large Sample",
        "855": "Car Pooling",
        "856": "Find in Mountain Array",
        "857": "Brace Expansion II",
        "858": "Distribute Candies to People",
        "859": "Path In Zigzag Labelled Binary Tree",
        "860": "Filling Bookcase Shelves",
        "861": "Parsing A Boolean Expression",
        "862": "Defanging an IP Address",
        "863": "Corporate Flight Bookings",
        "864": "Delete Nodes And Return Forest",
        "865": "Maximum Nesting Depth of Two Valid Parentheses Strings",
        "866": "Print in Order",
        "867": "Print Zero Even Odd",
        "868": "Building H2O",
        "869": "Relative Sort Array",
        "870": "Lowest Common Ancestor of Deepest Leaves",
        "871": "Longest Well-Performing Interval",
        "872": "Smallest Sufficient Team",
        "873": "Number of Equivalent Domino Pairs",
        "874": "Shortest Path with Alternating Colors",
        "875": "Minimum Cost Tree From Leaf Values",
        "876": "Maximum of Absolute Value Expression",
        "877": "N-th Tribonacci Number",
        "878": "Alphabet Board Path",
        "879": "Largest 1-Bordered Square",
        "880": "Stone Game II",
        "881": "User Activity for the Past 30 Days I",
        "882": "Longest Common Subsequence",
        "883": "Decrease Elements To Make Array Zigzag",
        "884": "Binary Tree Coloring Game",
        "885": "Snapshot Array",
        "886": "Longest Chunked Palindrome Decomposition",
        "887": "Article Views I",
        "888": "Day of the Year",
        "889": "Number of Dice Rolls With Target Sum",
        "890": "Online Majority Element In Subarray",
        "891": "Market Analysis I",
        "892": "Find Words That Can Be Formed by Characters",
        "893": "Maximum Level Sum of a Binary Tree",
        "894": "Last Substring in Lexicographical Order",
        "895": "Product Price at a Given Date",
        "896": "Invalid Transactions",
        "897": "Compare Strings by Frequency of the Smallest Character",
        "898": "Remove Zero Sum Consecutive Nodes from Linked List",
        "899": "Prime Arrangements",
        "900": "Can Make Palindrome from Substring",
        "901": "Number of Valid Words for Each Puzzle",
        "902": "Reformat Department Table",
        "903": "Distance Between Bus Stops",
        "904": "Day of the Week",
        "905": "Maximum Subarray Sum with One Deletion",
        "906": "Make Array Strictly Increasing",
        "907": "Maximum Number of Balloons",
        "908": "K-Concatenation Maximum Sum",
        "909": "Monthly Transactions I",
        "910": "Fizz Buzz Multithreaded",
        "911": "Minimum Absolute Difference",
        "912": "Ugly Number III",
        "913": "Smallest String With Swaps",
        "914": "Sort Items by Groups Respecting Dependencies",
        "915": "Last Person to Fit in the Bus",
        "916": "Design Skiplist",
        "917": "Unique Number of Occurrences",
        "918": "Get Equal Substrings Within Budget",
        "919": "Remove All Adjacent Duplicates in String II",
        "920": "Minimum Moves to Reach Target with Rotations",
        "921": "Queries Quality and Percentage",
        "922": "Minimum Cost to Move Chips to The Same Position",
        "923": "Longest Arithmetic Subsequence of Given Difference",
        "924": "Path with Maximum Gold",
        "925": "Count Vowels Permutation",
        "926": "Split a String in Balanced Strings",
        "927": "Queens That Can Attack the King",
        "928": "Dice Roll Simulation",
        "929": "Maximum Equal Frequency",
        "930": "The Dining Philosophers",
        "931": "Airplane Seat Assignment Probability",
        "932": "Check If It Is a Straight Line",
        "933": "Remove Sub-Folders from the Filesystem",
        "934": "Replace the Substring for Balanced String",
        "935": "Find Positive Integer Solution for a Given Equation",
        "936": "Circular Permutation in Binary Representation",
        "937": "Maximum Length of a Concatenated String with Unique Characters",
        "938": "Tiling a Rectangle with the Fewest Squares",
        "939": "Minimum Swaps to Make Strings Equal",
        "940": "Count Number of Nice Subarrays",
        "941": "Minimum Remove to Make Valid Parentheses",
        "942": "Check If It Is a Good Array",
        "943": "Average Selling Price",
        "944": "Cells with Odd Values in a Matrix",
        "945": "Reconstruct a 2-Row Binary Matrix",
        "946": "Number of Closed Islands",
        "947": "Maximum Score Words Formed by Letters",
        "948": "Shift 2D Grid",
        "949": "Find Elements in a Contaminated Binary Tree",
        "950": "Greatest Sum Divisible by Three",
        "951": "Minimum Moves to Move a Box to Their Target Location",
        "952": "Minimum Time Visiting All Points",
        "953": "Count Servers that Communicate",
        "954": "Search Suggestions System",
        "955": "Number of Ways to Stay in the Same Place After Some Steps",
        "956": "Find Winner on a Tic Tac Toe Game",
        "957": "Count Square Submatrices with All Ones",
        "958": "Palindrome Partitioning III",
        "959": "Students and Examinations",
        "960": "Subtract the Product and Sum of Digits of an Integer",
        "961": "Group the People Given the Group Size They Belong To",
        "962": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
        "963": "Iterator for Combination",
        "964": "Element Appearing More Than 25% In Sorted Array",
        "965": "Remove Covered Intervals",
        "966": "Minimum Falling Path Sum II",
        "967": "Convert Binary Number in a Linked List to Integer",
        "968": "Sequential Digits",
        "969": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
        "970": "Shortest Path in a Grid with Obstacles Elimination",
        "971": "Find Numbers with Even Number of Digits",
        "972": "Divide Array in Sets of K Consecutive Numbers",
        "973": "Maximum Number of Occurrences of a Substring",
        "974": "Maximum Candies You Can Get from Boxes",
        "975": "Replace Elements with Greatest Element on Right Side",
        "976": "Sum of Mutated Array Closest to Target",
        "977": "Number of Paths with Max Score",
        "978": "Deepest Leaves Sum",
        "979": "Find N Unique Integers Sum up to Zero",
        "980": "All Elements in Two Binary Search Trees",
        "981": "Jump Game III",
        "982": "Verbal Arithmetic Puzzle",
        "983": "Decrypt String from Alphabet to Integer Mapping",
        "984": "XOR Queries of a Subarray",
        "985": "Get Watched Videos by Your Friends",
        "986": "Minimum Insertion Steps to Make a String Palindrome",
        "987": "Decompress Run-Length Encoded List",
        "988": "Matrix Block Sum",
        "989": "Sum of Nodes with Even-Valued Grandparent",
        "990": "Distinct Echo Substrings",
        "991": "Convert Integer to the Sum of Two No-Zero Integers",
        "992": "Minimum Flips to Make a OR b Equal to c",
        "993": "Number of Operations to Make Network Connected",
        "994": "Restaurant Growth",
        "995": "Maximum 69 Number",
        "996": "Print Words Vertically",
        "997": "Delete Leaves With a Given Value",
        "998": "Minimum Number of Taps to Open to Water a Garden",
        "999": "List the Products Ordered in a Period",
        "1000": "Break a Palindrome",
        "1001": "Sort the Matrix Diagonally",
        "1002": "Reverse Subarray To Maximize Array Value",
        "1003": "Rank Transform of an Array",
        "1004": "Remove Palindromic Subsequences",
        "1005": "Filter Restaurants by Vegan-Friendly, Price and Distance",
        "1006": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
        "1007": "Minimum Difficulty of a Job Schedule",
        "1008": "The K Weakest Rows in a Matrix",
        "1009": "Reduce Array Size to The Half",
        "1010": "Maximum Product of Splitted Binary Tree",
        "1011": "Jump Game V",
        "1012": "Movie Rating",
        "1013": "Number of Steps to Reduce a Number to Zero",
        "1014": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
        "1015": "Angle Between Hands of a Clock",
        "1016": "Jump Game IV",
        "1017": "Check If N and Its Double Exist",
        "1018": "Minimum Number of Steps to Make Two Strings Anagram",
        "1019": "Tweet Counts Per Frequency",
        "1020": "Maximum Students Taking Exam",
        "1021": "Count Negative Numbers in a Sorted Matrix",
        "1022": "Product of the Last K Numbers",
        "1023": "Maximum Number of Events That Can Be Attended",
        "1024": "Construct Target Array With Multiple Sums",
        "1025": "Sort Integers by The Number of 1 Bits",
        "1026": "Number of Substrings Containing All Three Characters",
        "1027": "Count All Valid Pickup and Delivery Options",
        "1028": "Number of Days Between Two Dates",
        "1029": "Validate Binary Tree Nodes",
        "1030": "Closest Divisors",
        "1031": "Largest Multiple of Three",
        "1032": "Rank Teams by Votes",
        "1033": "Linked List in Binary Tree",
        "1034": "Minimum Cost to Make at Least One Valid Path in a Grid",
        "1035": "Increasing Decreasing String",
        "1036": "Find the Longest Substring Containing Vowels in Even Counts",
        "1037": "Longest ZigZag Path in a Binary Tree",
        "1038": "Maximum Sum BST in Binary Tree",
        "1039": "Generate a String With Characters That Have Odd Counts",
        "1040": "Number of Times Binary String Is Prefix-Aligned",
        "1041": "Time Needed to Inform All Employees",
        "1042": "Frog Position After T Seconds",
        "1043": "Replace Employee ID With The Unique Identifier",
        "1044": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
        "1045": "Lucky Numbers in a Matrix",
        "1046": "Design a Stack With Increment Operation",
        "1047": "Find the Distance Value Between Two Arrays",
        "1048": "Cinema Seat Allocation",
        "1049": "Sort Integers by The Power Value",
        "1050": "Pizza With 3n Slices",
        "1051": "Create Target Array in the Given Order",
        "1052": "Four Divisors",
        "1053": "Check if There is a Valid Path in a Grid",
        "1054": "Longest Happy Prefix",
        "1055": "Capital Gain/Loss",
        "1056": "Find Lucky Integer in an Array",
        "1057": "Count Number of Teams",
        "1058": "Design Underground System",
        "1059": "Find All Good Strings",
        "1060": "Circle and Rectangle Overlapping",
        "1061": "Reducing Dishes",
        "1062": "Minimum Subsequence in Non-Increasing Order",
        "1063": "Longest Happy String",
        "1064": "Stone Game III",
        "1065": "Top Travellers",
        "1066": "String Matching in an Array",
        "1067": "Queries on a Permutation With Key",
        "1068": "Number of Ways to Paint N × 3 Grid",
        "1069": "Minimum Value to Get Positive Step by Step Sum",
        "1070": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
        "1071": "The k-th Lexicographical String of All Happy Strings of Length n",
        "1072": "Restore The Array",
        "1073": "Reformat The String",
        "1074": "Display Table of Food Orders in a Restaurant",
        "1075": "Minimum Number of Frogs Croaking",
        "1076": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
        "1077": "Maximum Points You Can Obtain from Cards",
        "1078": "Diagonal Traverse II",
        "1079": "Constrained Subsequence Sum",
        "1080": "Kids With the Greatest Number of Candies",
        "1081": "Max Difference You Can Get From Changing an Integer",
        "1082": "Check If a String Can Break Another String",
        "1083": "Number of Ways to Wear Different Hats to Each Other",
        "1084": "Destination City",
        "1085": "Check If All 1's Are at Least Length K Places Away",
        "1086": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
        "1087": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
        "1088": "Build an Array With Stack Operations",
        "1089": "Count Triplets That Can Form Two Arrays of Equal XOR",
        "1090": "Minimum Time to Collect All Apples in a Tree",
        "1091": "Number of Ways of Cutting a Pizza",
        "1092": "Simplified Fractions",
        "1093": "Count Good Nodes in Binary Tree",
        "1094": "Form Largest Integer With Digits That Add up to Target",
        "1095": "Number of Students Doing Homework at a Given Time",
        "1096": "Maximum Number of Darts Inside of a Circular Dartboard",
        "1097": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
        "1098": "Maximum Number of Vowels in a Substring of Given Length",
        "1099": "Pseudo-Palindromic Paths in a Binary Tree",
        "1100": "Max Dot Product of Two Subsequences",
        "1101": "Make Two Arrays Equal by Reversing Subarrays",
        "1102": "Check If a String Contains All Binary Codes of Size K",
        "1103": "Maximum Product of Two Elements in an Array",
        "1104": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
        "1105": "Reorder Routes to Make All Paths Lead to the City Zero",
        "1106": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
        "1107": "Shuffle the Array",
        "1108": "The k Strongest Values in an Array",
        "1109": "Design Browser History",
        "1110": "Paint House III",
        "1111": "Final Prices With a Special Discount in a Shop",
        "1112": "Subrectangle Queries",
        "1113": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
        "1114": "Running Sum of 1d Array",
        "1115": "Least Number of Unique Integers after K Removals",
        "1116": "Minimum Number of Days to Make m Bouquets",
        "1117": "Kth Ancestor of a Tree Node",
        "1118": "Group Sold Products By The Date",
        "1119": "XOR Operation in an Array",
        "1120": "Making File Names Unique",
        "1121": "Avoid Flood in The City",
        "1122": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
        "1123": "Average Salary Excluding the Minimum and Maximum Salary",
        "1124": "The kth Factor of n",
        "1125": "Longest Subarray of 1's After Deleting One Element",
        "1126": "Parallel Courses II",
        "1127": "Path Crossing",
        "1128": "Check If Array Pairs Are Divisible by k",
        "1129": "Number of Subsequences That Satisfy the Given Sum Condition",
        "1130": "Max Value of Equation",
        "1131": "Last Moment Before All Ants Fall Out of a Plank",
        "1132": "Count Submatrices With All Ones",
        "1133": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
        "1134": "Reformat Date",
        "1135": "Range Sum of Sorted Subarray Sums",
        "1136": "Minimum Difference Between Largest and Smallest Value in Three Moves",
        "1137": "Stone Game IV",
        "1138": "Number of Good Pairs",
        "1139": "Number of Substrings With Only 1s",
        "1140": "Path with Maximum Probability",
        "1141": "Best Position for a Service Centre",
        "1142": "Find Users With Valid E-Mails",
        "1143": "Water Bottles",
        "1144": "Number of Nodes in the Sub-Tree With the Same Label",
        "1145": "Maximum Number of Non-Overlapping Substrings",
        "1146": "Find a Value of a Mysterious Function Closest to Target",
        "1147": "Count Odd Numbers in an Interval Range",
        "1148": "Number of Sub-arrays With Odd Sum",
        "1149": "Number of Good Ways to Split a String",
        "1150": "Minimum Number of Increments on Subarrays to Form a Target Array",
        "1151": "Patients With a Condition",
        "1152": "Shuffle String",
        "1153": "Minimum Suffix Flips",
        "1154": "Number of Good Leaf Nodes Pairs",
        "1155": "String Compression II",
        "1156": "Count Good Triplets",
        "1157": "Find the Winner of an Array Game",
        "1158": "Minimum Swaps to Arrange a Binary Grid",
        "1159": "Get the Maximum Score",
        "1160": "Kth Missing Positive Number",
        "1161": "Can Convert String in K Moves",
        "1162": "Minimum Insertions to Balance a Parentheses String",
        "1163": "Find Longest Awesome Substring",
        "1164": "Make The String Great",
        "1165": "Find Kth Bit in Nth Binary String",
        "1166": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
        "1167": "Minimum Cost to Cut a Stick",
        "1168": "Three Consecutive Odds",
        "1169": "Magnetic Force Between Two Balls",
        "1170": "Minimum Number of Days to Eat N Oranges",
        "1171": "Minimum Number of Vertices to Reach All Nodes",
        "1172": "Detect Cycles in 2D Grid",
        "1173": "Most Visited Sector in a Circular Track",
        "1174": "Maximum Number of Coins You Can Get",
        "1175": "Find Latest Group of Size M",
        "1176": "Stone Game V",
        "1177": "Detect Pattern of Length M Repeated K or More Times",
        "1178": "Maximum Length of Subarray With Positive Product",
        "1179": "Minimum Number of Days to Disconnect Island",
        "1180": "Number of Ways to Reorder Array to Get Same BST",
        "1181": "Matrix Diagonal Sum",
        "1182": "Number of Ways to Split a String",
        "1183": "Shortest Subarray to be Removed to Make Array Sorted",
        "1184": "Count All Possible Routes",
        "1185": "Replace All ?'s to Avoid Consecutive Repeating Characters",
        "1186": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
        "1187": "Minimum Time to Make Rope Colorful",
        "1188": "Remove Max Number of Edges to Keep Graph Fully Traversable",
        "1189": "Customer Who Visited but Did Not Make Any Transactions",
        "1190": "Special Positions in a Binary Matrix",
        "1191": "Count Unhappy Friends",
        "1192": "Min Cost to Connect All Points",
        "1193": "Bank Account Summary II",
        "1194": "Sum of All Odd Length Subarrays",
        "1195": "Maximum Sum Obtained of Any Permutation",
        "1196": "Make Sum Divisible by P",
        "1197": "Strange Printer II",
        "1198": "Rearrange Spaces Between Words",
        "1199": "Split a String Into the Max Number of Unique Substrings",
        "1200": "Maximum Non Negative Product in a Matrix",
        "1201": "Minimum Cost to Connect Two Groups of Points",
        "1202": "Crawler Log Folder",
        "1203": "Maximum Profit of Operating a Centennial Wheel",
        "1204": "Throne Inheritance",
        "1205": "Maximum Number of Achievable Transfer Requests",
        "1206": "Design Parking System",
        "1207": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
        "1208": "Find Valid Matrix Given Row and Column Sums",
        "1209": "Find Servers That Handled Most Number of Requests",
        "1210": "Special Array With X Elements Greater Than or Equal X",
        "1211": "Even Odd Tree",
        "1212": "Maximum Number of Visible Points",
        "1213": "Minimum One Bit Operations to Make Integers Zero",
        "1214": "Maximum Nesting Depth of the Parentheses",
        "1215": "Maximal Network Rank",
        "1216": "Split Two Strings to Make Palindrome",
        "1217": "Count Subtrees With Max Distance Between Cities",
        "1218": "Mean of Array After Removing Some Elements",
        "1219": "Coordinate With Maximum Network Quality",
        "1220": "Number of Sets of K Non-Overlapping Line Segments",
        "1221": "Fancy Sequence",
        "1222": "Largest Substring Between Two Equal Characters",
        "1223": "Lexicographically Smallest String After Applying Operations",
        "1224": "Best Team With No Conflicts",
        "1225": "Slowest Key",
        "1226": "Arithmetic Subarrays",
        "1227": "Path With Minimum Effort",
        "1228": "Rank Transform of a Matrix",
        "1229": "Percentage of Users Attended a Contest",
        "1230": "Sort Array by Increasing Frequency",
        "1231": "Widest Vertical Area Between Two Points Containing No Points",
        "1232": "Count Substrings That Differ by One Character",
        "1233": "Check Array Formation Through Concatenation",
        "1234": "Count Sorted Vowel Strings",
        "1235": "Furthest Building You Can Reach",
        "1236": "Kth Smallest Instructions",
        "1237": "Get Maximum in Generated Array",
        "1238": "Minimum Deletions to Make Character Frequencies Unique",
        "1239": "Create Sorted Array through Instructions",
        "1240": "Defuse the Bomb",
        "1241": "Minimum Deletions to Make String Balanced",
        "1242": "Minimum Jumps to Reach Home",
        "1243": "Distribute Repeating Integers",
        "1244": "Design an Ordered Stream",
        "1245": "Determine if Two Strings Are Close",
        "1246": "Minimum Operations to Reduce X to Zero",
        "1247": "Maximize Grid Happiness",
        "1248": "Average Time of Process per Machine",
        "1249": "Check If Two String Arrays are Equivalent",
        "1250": "Smallest String With A Given Numeric Value",
        "1251": "Ways to Make a Fair Array",
        "1252": "Minimum Initial Energy to Finish Tasks",
        "1253": "Fix Names in a Table",
        "1254": "Maximum Repeating Substring",
        "1255": "Merge In Between Linked Lists",
        "1256": "Design Front Middle Back Queue",
        "1257": "Minimum Number of Removals to Make Mountain Array",
        "1258": "Richest Customer Wealth",
        "1259": "Find the Most Competitive Subsequence",
        "1260": "Minimum Moves to Make Array Complementary",
        "1261": "Minimize Deviation in Array",
        "1262": "Goal Parser Interpretation",
        "1263": "Max Number of K-Sum Pairs",
        "1264": "Concatenation of Consecutive Binary Numbers",
        "1265": "Minimum Incompatibility",
        "1266": "Invalid Tweets",
        "1267": "Count the Number of Consistent Strings",
        "1268": "Sum of Absolute Differences in a Sorted Array",
        "1269": "Stone Game VI",
        "1270": "Delivering Boxes from Storage to Ports",
        "1271": "Count of Matches in Tournament",
        "1272": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
        "1273": "Stone Game VII",
        "1274": "Maximum Height by Stacking Cuboids",
        "1275": "Daily Leads and Partners",
        "1276": "Reformat Phone Number",
        "1277": "Maximum Erasure Value",
        "1278": "Jump Game VI",
        "1279": "Number of Students Unable to Eat Lunch",
        "1280": "Average Waiting Time",
        "1281": "Maximum Binary String After Change",
        "1282": "Minimum Adjacent Swaps for K Consecutive Ones",
        "1283": "Determine if String Halves Are Alike",
        "1284": "Maximum Number of Eaten Apples",
        "1285": "Where Will the Ball Fall",
        "1286": "Maximum XOR With an Element From Array",
        "1287": "Maximum Units on a Truck",
        "1288": "Count Good Meals",
        "1289": "Ways to Split Array Into Three Subarrays",
        "1290": "Minimum Operations to Make a Subsequence",
        "1291": "Calculate Money in Leetcode Bank",
        "1292": "Maximum Score From Removing Substrings",
        "1293": "Construct the Lexicographically Largest Valid Sequence",
        "1294": "Number Of Ways To Reconstruct A Tree",
        "1295": "Swapping Nodes in a Linked List",
        "1296": "Minimize Hamming Distance After Swap Operations",
        "1297": "Find Minimum Time to Finish All Jobs",
        "1298": "Number Of Rectangles That Can Form The Largest Square",
        "1299": "Tuple with Same Product",
        "1300": "Largest Submatrix With Rearrangements",
        "1301": "Cat and Mouse II",
        "1302": "Find Followers Count",
        "1303": "The Number of Employees Which Report to Each Employee",
        "1304": "Find the Highest Altitude",
        "1305": "Minimum Number of People to Teach",
        "1306": "Decode XORed Permutation",
        "1307": "Count Ways to Make Array With Product",
        "1308": "Latest Time by Replacing Hidden Digits",
        "1309": "Change Minimum Characters to Satisfy One of Three Conditions",
        "1310": "Find Kth Largest XOR Coordinate Value",
        "1311": "Building Boxes",
        "1312": "Find Total Time Spent by Each Employee",
        "1313": "Maximum Number of Balls in a Box",
        "1314": "Restore the Array From Adjacent Pairs",
        "1315": "Can You Eat Your Favorite Candy on Your Favorite Day?",
        "1316": "Palindrome Partitioning IV",
        "1317": "Sum of Unique Elements",
        "1318": "Maximum Absolute Sum of Any Subarray",
        "1319": "Minimum Length of String After Deleting Similar Ends",
        "1320": "Check if Array Is Sorted and Rotated",
        "1321": "Maximum Score From Removing Stones",
        "1322": "Largest Merge Of Two Strings",
        "1323": "Closest Subsequence Sum",
        "1324": "Recyclable and Low Fat Products",
        "1325": "Minimum Changes To Make Alternating Binary String",
        "1326": "Count Number of Homogenous Substrings",
        "1327": "Minimum Degree of a Connected Trio in a Graph",
        "1328": "Longest Nice Substring",
        "1329": "Form Array by Concatenating Subarrays of Another Array",
        "1330": "Map of Highest Peak",
        "1331": "Tree of Coprimes",
        "1332": "Merge Strings Alternately",
        "1333": "Minimum Number of Operations to Move All Balls to Each Box",
        "1334": "Maximum Score from Performing Multiplication Operations",
        "1335": "Maximize Palindrome Length From Subsequences",
        "1336": "Count Items Matching a Rule",
        "1337": "Closest Dessert Cost",
        "1338": "Equal Sum Arrays With Minimum Number of Operations",
        "1339": "Car Fleet II",
        "1340": "Find Nearest Point That Has the Same X or Y Coordinate",
        "1341": "Check if Number is a Sum of Powers of Three",
        "1342": "Count Pairs Of Nodes",
        "1343": "Minimum Elements to Add to Form a Given Sum",
        "1344": "Number of Restricted Paths From First to Last Node",
        "1345": "Make the XOR of All Segments Equal to Zero",
        "1346": "Primary Department for Each Employee",
        "1347": "Check if One String Swap Can Make Strings Equal",
        "1348": "Find Center of Star Graph",
        "1349": "Maximum Average Pass Ratio",
        "1350": "Maximum Score of a Good Subarray",
        "1351": "Rearrange Products Table",
        "1352": "Second Largest Digit in a String",
        "1353": "Design Authentication Manager",
        "1354": "Maximum Number of Consecutive Values You Can Make",
        "1355": "Maximize Score After N Operations",
        "1356": "Maximum Ascending Subarray Sum",
        "1357": "Maximum Value at a Given Index in a Bounded Array",
        "1358": "Minimum Number of Operations to Reinitialize a Permutation",
        "1359": "Evaluate the Bracket Pairs of a String",
        "1360": "Maximize Number of Nice Divisors",
        "1361": "Determine Color of a Chessboard Square",
        "1362": "Sentence Similarity III",
        "1363": "Count Nice Pairs in an Array",
        "1364": "Maximum Number of Groups Getting Fresh Donuts",
        "1365": "Truncate Sentence",
        "1366": "Finding the Users Active Minutes",
        "1367": "Minimum Absolute Sum Difference",
        "1368": "Number of Different Subsequences GCDs",
        "1369": "Sign of the Product of an Array",
        "1370": "Find the Winner of the Circular Game",
        "1371": "Minimum Sideway Jumps",
        "1372": "Finding MK Average",
        "1373": "Minimum Operations to Make the Array Increasing",
        "1374": "Queries on Number of Points Inside a Circle",
        "1375": "Maximum XOR for Each Query",
        "1376": "Minimum Number of Operations to Make String Sorted",
        "1377": "Check if the Sentence Is Pangram",
        "1378": "Maximum Ice Cream Bars",
        "1379": "Single-Threaded CPU",
        "1380": "Find XOR Sum of All Pairs Bitwise AND",
        "1381": "Sum of Digits in Base K",
        "1382": "Frequency of the Most Frequent Element",
        "1383": "Longest Substring Of All Vowels in Order",
        "1384": "Maximum Building Height",
        "1385": "Replace All Digits with Characters",
        "1386": "Seat Reservation Manager",
        "1387": "Maximum Element After Decreasing and Rearranging",
        "1388": "Closest Room",
        "1389": "Minimum Distance to the Target Element",
        "1390": "Splitting a String Into Descending Consecutive Values",
        "1391": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
        "1392": "Minimum Interval to Include Each Query",
        "1393": "Maximum Population Year",
        "1394": "Maximum Distance Between a Pair of Values",
        "1395": "Maximum Subarray Min-Product",
        "1396": "Largest Color Value in a Directed Graph",
        "1397": "Sorting the Sentence",
        "1398": "Incremental Memory Leak",
        "1399": "Sum of Floored Pairs",
        "1400": "Sum of All Subset XOR Totals",
        "1401": "Minimum Number of Swaps to Make the Binary String Alternating",
        "1402": "Finding Pairs With a Certain Sum",
        "1403": "Number of Ways to Rearrange Sticks With K Sticks Visible",
        "1404": "Longer Contiguous Segments of Ones than Zeros",
        "1405": "Minimum Speed to Arrive on Time",
        "1406": "Jump Game VII",
        "1407": "Stone Game VIII",
        "1408": "Calculate Special Bonus",
        "1409": "Substrings of Size Three with Distinct Characters",
        "1410": "Minimize Maximum Pair Sum in Array",
        "1411": "Get Biggest Three Rhombus Sums in a Grid",
        "1412": "Minimum XOR Sum of Two Arrays",
        "1413": "Check if Word Equals Summation of Two Words",
        "1414": "Maximum Value after Insertion",
        "1415": "Process Tasks Using Servers",
        "1416": "Minimum Skips to Arrive at Meeting On Time",
        "1417": "Egg Drop With 2 Eggs and N Floors",
        "1418": "Determine Whether Matrix Can Be Obtained By Rotation",
        "1419": "Reduction Operations to Make the Array Elements Equal",
        "1420": "Minimum Number of Flips to Make the Binary String Alternating",
        "1421": "Minimum Space Wasted From Packaging",
        "1422": "Check if All the Integers in a Range Are Covered",
        "1423": "Find the Student that Will Replace the Chalk",
        "1424": "Largest Magic Square",
        "1425": "Minimum Cost to Change the Final Value of Expression",
        "1426": "Redistribute Characters to Make All Strings Equal",
        "1427": "Merge Triplets to Form Target Triplet",
        "1428": "The Earliest and Latest Rounds Where Players Compete",
        "1429": "Find a Peak Element II",
        "1430": "Largest Odd Number in String",
        "1431": "The Number of Full Rounds You Have Played",
        "1432": "Count Sub Islands",
        "1433": "Minimum Absolute Difference Queries",
        "1434": "Count Salary Categories",
        "1435": "Remove One Element to Make the Array Strictly Increasing",
        "1436": "Remove All Occurrences of a Substring",
        "1437": "Maximum Alternating Subsequence Sum",
        "1438": "Design Movie Rental System",
        "1439": "Maximum Product Difference Between Two Pairs",
        "1440": "Cyclically Rotating a Grid",
        "1441": "Count Ways to Build Rooms in an Ant Colony",
        "1442": "Build Array from Permutation",
        "1443": "Eliminate Maximum Number of Monsters",
        "1444": "Count Good Numbers",
        "1445": "Longest Common Subpath",
        "1446": "Count Square Sum Triples",
        "1447": "Nearest Exit from Entrance in Maze",
        "1448": "Minimum Cost to Reach Destination in Time",
        "1449": "Concatenation of Array",
        "1450": "Unique Length-3 Palindromic Subsequences",
        "1451": "Painting a Grid With Three Different Colors",
        "1452": "Confirmation Rate",
        "1453": "Maximum Number of Words You Can Type",
        "1454": "Add Minimum Number of Rungs",
        "1455": "Maximum Number of Points with Cost",
        "1456": "Maximum Genetic Difference Query",
        "1457": "Check if All Characters Have Equal Number of Occurrences",
        "1458": "The Number of the Smallest Unoccupied Chair",
        "1459": "Describe the Painting",
        "1460": "Number of Visible People in a Queue",
        "1461": "Sum of Digits of String After Convert",
        "1462": "Largest Number After Mutating Substring",
        "1463": "Maximum Compatibility Score Sum",
        "1464": "Delete Duplicate Folders in System",
        "1465": "Minimum Garden Perimeter to Collect Enough Apples",
        "1466": "Count Number of Special Subsequences",
        "1467": "Delete Characters to Make Fancy String",
        "1468": "Check if Move is Legal",
        "1469": "Minimum Total Space Wasted With K Resizing Operations",
        "1470": "Maximum Product of the Length of Two Palindromic Substrings",
        "1471": "Check If String Is a Prefix of Array",
        "1472": "Remove Stones to Minimize the Total",
        "1473": "Minimum Number of Swaps to Make the String Balanced",
        "1474": "Find the Longest Valid Obstacle Course at Each Position",
        "1475": "Employees With Missing Information",
        "1476": "Number of Strings That Appear as Substrings in Word",
        "1477": "Array With Elements Not Equal to Average of Neighbors",
        "1478": "Minimum Non-Zero Product of the Array Elements",
        "1479": "Last Day Where You Can Still Cross",
        "1480": "Find if Path Exists in Graph",
        "1481": "Minimum Time to Type Word Using Special Typewriter",
        "1482": "Number of Ways to Arrive at Destination",
        "1483": "Number of Ways to Separate Numbers",
        "1484": "Employees Whose Manager Left the Company",
        "1485": "Find Greatest Common Divisor of Array",
        "1486": "Find Unique Binary String",
        "1487": "Minimize the Difference Between Target and Chosen Elements",
        "1488": "Find Array Given Subset Sums",
        "1489": "Minimum Difference Between Highest and Lowest of K Scores",
        "1490": "Find the Kth Largest Integer in the Array",
        "1491": "Minimum Number of Work Sessions to Finish the Tasks",
        "1492": "Number of Unique Good Subsequences",
        "1493": "Find the Middle Index in Array",
        "1494": "Find All Groups of Farmland",
        "1495": "Operations on Tree",
        "1496": "The Number of Good Subsets",
        "1497": "Count Special Quadruplets",
        "1498": "The Number of Weak Characters in the Game",
        "1499": "First Day Where You Have Been in All the Rooms",
        "1500": "GCD Sort of an Array",
        "1501": "Reverse Prefix of Word",
        "1502": "Maximum Product of the Length of Two Palindromic Subsequences",
        "1503": "Smallest Missing Genetic Value in Each Subtree",
        "1504": "Count Number of Pairs With Absolute Difference K",
        "1505": "Find Original Array From Doubled Array",
        "1506": "Minimum Number of Operations to Make Array Continuous",
        "1507": "Final Value of Variable After Performing Operations",
        "1508": "Sum of Beauty in the Array",
        "1509": "Detect Squares",
        "1510": "Longest Subsequence Repeated k Times",
        "1511": "Maximum Difference Between Increasing Elements",
        "1512": "Grid Game",
        "1513": "Check if Word Can Be Placed In Crossword",
        "1514": "The Score of Students Solving Math Expression",
        "1515": "Number of Pairs of Strings With Concatenation Equal to Target",
        "1516": "Maximize the Confusion of an Exam",
        "1517": "Maximum Number of Ways to Partition an Array",
        "1518": "Minimum Moves to Convert String",
        "1519": "Find Missing Observations",
        "1520": "Stone Game IX",
        "1521": "Smallest K-Length Subsequence With Occurrences of a Letter",
        "1522": "Two Out of Three",
        "1523": "Stock Price Fluctuation",
        "1524": "Minimum Number of Moves to Seat Everyone",
        "1525": "Remove Colored Pieces if Both Neighbors are the Same Color",
        "1526": "The Time When the Network Becomes Idle",
        "1527": "Kth Smallest Product of Two Sorted Arrays",
        "1528": "Check if Numbers Are Ascending in a Sentence",
        "1529": "Simple Bank System",
        "1530": "Count Number of Maximum Bitwise-OR Subsets",
        "1531": "Second Minimum Time to Reach Destination",
        "1532": "Number of Valid Words in a Sentence",
        "1533": "Next Greater Numerically Balanced Number",
        "1534": "Count Nodes With the Highest Score",
        "1535": "Parallel Courses III",
        "1536": "Kth Distinct String in an Array",
        "1537": "Two Best Non-Overlapping Events",
        "1538": "Plates Between Candles",
        "1539": "Number of Valid Move Combinations On Chessboard",
        "1540": "Smallest Index With Equal Value",
        "1541": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
        "1542": "Minimum Operations to Convert Number",
        "1543": "Check if an Original String Exists Given Two Encoded Strings",
        "1544": "Count Vowel Substrings of a String",
        "1545": "Vowels of All Substrings",
        "1546": "Minimized Maximum of Products Distributed to Any Store",
        "1547": "Maximum Path Quality of a Graph",
        "1548": "Check Whether Two Strings are Almost Equivalent",
        "1549": "Walking Robot Simulation II",
        "1550": "Most Beautiful Item for Each Query",
        "1551": "Maximum Number of Tasks You Can Assign",
        "1552": "Time Needed to Buy Tickets",
        "1553": "Reverse Nodes in Even Length Groups",
        "1554": "Decode the Slanted Ciphertext",
        "1555": "Process Restricted Friend Requests",
        "1556": "Two Furthest Houses With Different Colors",
        "1557": "Watering Plants",
        "1558": "Range Frequency Queries",
        "1559": "Sum of k-Mirror Numbers",
        "1560": "Count Common Words With One Occurrence",
        "1561": "Minimum Number of Food Buckets to Feed the Hamsters",
        "1562": "Minimum Cost Homecoming of a Robot in a Grid",
        "1563": "Count Fertile Pyramids in a Land",
        "1564": "Find Target Indices After Sorting Array",
        "1565": "Removing Minimum and Maximum From Array",
        "1566": "Find All People With Secret",
        "1567": "Finding 3-Digit Even Numbers",
        "1568": "Delete the Middle Node of a Linked List",
        "1569": "Step-By-Step Directions From a Binary Tree Node to Another",
        "1570": "Valid Arrangement of Pairs",
        "1571": "Find Subsequence of Length K With the Largest Sum",
        "1572": "Find Good Days to Rob the Bank",
        "1573": "Detonate the Maximum Bombs",
        "1574": "Sequentially Ordinal Rank Tracker",
        "1575": "Rings and Rods",
        "1576": "Sum of Subarray Ranges",
        "1577": "Watering Plants II",
        "1578": "Maximum Fruits Harvested After at Most K Steps",
        "1579": "Find First Palindromic String in the Array",
        "1580": "Adding Spaces to a String",
        "1581": "Number of Smooth Descent Periods of a Stock",
        "1582": "Minimum Operations to Make the Array K-Increasing",
        "1583": "Maximum Number of Words Found in Sentences",
        "1584": "Find All Possible Recipes from Given Supplies",
        "1585": "Check if a Parentheses String Can Be Valid",
        "1586": "Abbreviating the Product of a Range",
        "1587": "A Number After a Double Reversal",
        "1588": "Execution of All Suffix Instructions Staying in a Grid",
        "1589": "Intervals Between Identical Elements",
        "1590": "Recover the Original Array",
        "1591": "Check if All A's Appears Before All B's",
        "1592": "Number of Laser Beams in a Bank",
        "1593": "Destroying Asteroids",
        "1594": "Maximum Employees to Be Invited to a Meeting",
        "1595": "Capitalize the Title",
        "1596": "Maximum Twin Sum of a Linked List",
        "1597": "Longest Palindrome by Concatenating Two Letter Words",
        "1598": "Stamping the Grid",
        "1599": "Check if Every Row and Column Contains All Numbers",
        "1600": "Minimum Swaps to Group All 1's Together II",
        "1601": "Count Words Obtained After Adding a Letter",
        "1602": "Divide a String Into Groups of Size k",
        "1603": "Minimum Moves to Reach Target Score",
        "1604": "Maximum Running Time of N Computers",
        "1605": "Minimum Cost of Buying Candies With Discount",
        "1606": "Count the Hidden Sequences",
        "1607": "K Highest Ranked Items Within a Price Range",
        "1608": "Number of Ways to Divide a Long Corridor",
        "1609": "Count Elements With Strictly Smaller and Greater Elements",
        "1610": "Rearrange Array Elements by Sign",
        "1611": "Find All Lonely Numbers in the Array",
        "1612": "Keep Multiplying Found Values by Two",
        "1613": "All Divisions With the Highest Score of a Binary Array",
        "1614": "Find Substring With Given Hash Value",
        "1615": "Groups of Strings",
        "1616": "Minimum Sum of Four Digit Number After Splitting Digits",
        "1617": "Partition Array According to Given Pivot",
        "1618": "Minimum Cost to Set Cooking Time",
        "1619": "Minimum Difference in Sums After Removal of Elements",
        "1620": "Sort Even and Odd Indices Independently",
        "1621": "Smallest Value of the Rearranged Number",
        "1622": "Design Bitset",
        "1623": "Minimum Time to Remove All Cars Containing Illegal Goods",
        "1624": "Count Operations to Obtain Zero",
        "1625": "Minimum Operations to Make the Array Alternating",
        "1626": "Removing Minimum Number of Magic Beans",
        "1627": "Count Equal and Divisible Pairs in an Array",
        "1628": "Find Three Consecutive Integers That Sum to a Given Number",
        "1629": "Maximum Split of Positive Even Integers",
        "1630": "Count Good Triplets in an Array",
        "1631": "Count Integers With Even Digit Sum",
        "1632": "Merge Nodes in Between Zeros",
        "1633": "Construct String With Repeat Limit",
        "1634": "Count Array Pairs Divisible by K",
        "1635": "Counting Words With a Given Prefix",
        "1636": "Minimum Number of Steps to Make Two Strings Anagram II",
        "1637": "Minimum Time to Complete Trips",
        "1638": "Minimum Time to Finish the Race",
        "1639": "Most Frequent Number Following Key In an Array",
        "1640": "Sort the Jumbled Numbers",
        "1641": "All Ancestors of a Node in a Directed Acyclic Graph",
        "1642": "Minimum Number of Moves to Make Palindrome",
        "1643": "Cells in a Range on an Excel Sheet",
        "1644": "Create Binary Tree From Descriptions",
        "1645": "Replace Non-Coprime Numbers in Array",
        "1646": "Find All K-Distant Indices in an Array",
        "1647": "Count Artifacts That Can Be Extracted",
        "1648": "Maximize the Topmost Element After K Moves",
        "1649": "Minimum Weighted Subgraph With the Required Paths",
        "1650": "Divide Array Into Equal Pairs",
        "1651": "Maximize Number of Subsequences in a String",
        "1652": "Minimum Operations to Halve Array Sum",
        "1653": "Minimum White Tiles After Covering With Carpets",
        "1654": "Count Hills and Valleys in an Array",
        "1655": "Count Collisions on a Road",
        "1656": "Maximum Points in an Archery Competition",
        "1657": "Longest Substring of One Repeating Character",
        "1658": "Find the Difference of Two Arrays",
        "1659": "Find Palindrome With Fixed Length",
        "1660": "Maximum Value of K Coins From Piles",
        "1661": "Minimum Bit Flips to Convert Number",
        "1662": "Number of Ways to Select Buildings",
        "1663": "Sum of Scores of Built Strings",
        "1664": "Minimum Number of Operations to Convert Time",
        "1665": "Find Players With Zero or One Losses",
        "1666": "Maximum Candies Allocated to K Children",
        "1667": "Encrypt and Decrypt Strings",
        "1668": "Largest Number After Digit Swaps by Parity",
        "1669": "Minimize Result by Adding Parentheses to Expression",
        "1670": "Maximum Product After K Increments",
        "1671": "Maximum Total Beauty of the Gardens",
        "1672": "Add Two Integers",
        "1673": "Root Equals Sum of Children",
        "1674": "Find Closest Number to Zero",
        "1675": "Number of Ways to Buy Pens and Pencils",
        "1676": "Design an ATM Machine",
        "1677": "Maximum Score of a Node Sequence",
        "1678": "Calculate Digit Sum of a String",
        "1679": "Minimum Rounds to Complete All Tasks",
        "1680": "Maximum Trailing Zeros in a Cornered Path",
        "1681": "Longest Path With Different Adjacent Characters",
        "1682": "Intersection of Multiple Arrays",
        "1683": "Count Lattice Points Inside a Circle",
        "1684": "Count Number of Rectangles Containing Each Point",
        "1685": "Number of Flowers in Full Bloom",
        "1686": "Count Prefixes of a Given String",
        "1687": "Minimum Average Difference",
        "1688": "Count Unguarded Cells in the Grid",
        "1689": "Escape the Spreading Fire",
        "1690": "Remove Digit From Number to Maximize Result",
        "1691": "Minimum Consecutive Cards to Pick Up",
        "1692": "K Divisible Elements Subarrays",
        "1693": "Total Appeal of A String",
        "1694": "Largest 3-Same-Digit Number in String",
        "1695": "Count Number of Texts",
        "1696": "Check if There Is a Valid Parentheses String Path",
        "1697": "Find the K-Beauty of a Number",
        "1698": "Maximum White Tiles Covered by a Carpet",
        "1699": "Substring With Largest Variance",
        "1700": "Find Resultant Array After Removing Anagrams",
        "1701": "Maximum Consecutive Floors Without Special Floors",
        "1702": "Largest Combination With Bitwise AND Greater Than Zero",
        "1703": "Count Integers in Intervals",
        "1704": "Maximum Bags With Full Capacity of Rocks",
        "1705": "Minimum Lines to Represent a Line Chart",
        "1706": "Sum of Total Strength of Wizards",
        "1707": "Check if Number Has Equal Digit Count and Digit Value",
        "1708": "Sender With Largest Word Count",
        "1709": "Maximum Total Importance of Roads",
        "1710": "Booking Concert Tickets in Groups",
        "1711": "Rearrange Characters to Make Target String",
        "1712": "Apply Discount to Prices",
        "1713": "Steps to Make Array Non-decreasing",
        "1714": "Minimum Obstacle Removal to Reach Corner",
        "1715": "Partition Array Such That Maximum Difference Is K",
        "1716": "Replace Elements in an Array",
        "1717": "Design a Text Editor",
        "1718": "Strong Password Checker II",
        "1719": "Successful Pairs of Spells and Potions",
        "1720": "Count Subarrays With Score Less Than K",
        "1721": "Calculate Amount Paid in Taxes",
        "1722": "Minimum Path Cost in a Grid",
        "1723": "Fair Distribution of Cookies",
        "1724": "Naming a Company",
        "1725": "Sum of Numbers With Units Digit K",
        "1726": "Longest Binary Subsequence Less Than or Equal to K",
        "1727": "Selling Pieces of Wood",
        "1728": "Count Asterisks",
        "1729": "Maximum XOR After Operations",
        "1730": "Number of Distinct Roll Sequences",
        "1731": "Check if Matrix Is X-Matrix",
        "1732": "Count Number of Ways to Place Houses",
        "1733": "Maximum Score Of Spliced Array",
        "1734": "Minimum Score After Removals on a Tree",
        "1735": "Decode the Message",
        "1736": "Number of People Aware of a Secret",
        "1737": "Number of Increasing Paths in a Grid",
        "1738": "Evaluate Boolean Binary Tree",
        "1739": "The Latest Time to Catch a Bus",
        "1740": "Minimum Sum of Squared Difference",
        "1741": "Subarray With Elements Greater Than Varying Threshold",
        "1742": "Minimum Amount of Time to Fill Cups",
        "1743": "Smallest Number in Infinite Set",
        "1744": "Move Pieces to Obtain a String",
        "1745": "Count the Number of Ideal Arrays",
        "1746": "Maximum Number of Pairs in Array",
        "1747": "Max Sum of a Pair With Equal Sum of Digits",
        "1748": "Minimum Deletions to Make Array Divisible",
        "1749": "Best Poker Hand",
        "1750": "Number of Zero-Filled Subarrays",
        "1751": "Design a Number Container System",
        "1752": "Shortest Impossible Sequence of Rolls",
        "1753": "Equal Row and Column Pairs",
        "1754": "Design a Food Rating System",
        "1755": "Number of Excellent Pairs",
        "1756": "Number of Unique Subjects Taught by Each Teacher",
        "1757": "Make Array Zero by Subtracting Equal Amounts",
        "1758": "Maximum Number of Groups Entering a Competition",
        "1759": "Find Closest Node to Given Two Nodes",
        "1760": "Longest Cycle in a Graph",
        "1761": "Merge Similar Items",
        "1762": "Count Number of Bad Pairs",
        "1763": "Task Scheduler II",
        "1764": "Number of Arithmetic Triplets",
        "1765": "Reachable Nodes With Restrictions",
        "1766": "Check if There is a Valid Partition For The Array",
        "1767": "Longest Ideal Subsequence",
        "1768": "Largest Local Values in a Matrix",
        "1769": "Node With Highest Edge Score",
        "1770": "Construct Smallest Number From DI String",
        "1771": "Count Special Integers",
        "1772": "Minimum Recolors to Get K Consecutive Black Blocks",
        "1773": "Time Needed to Rearrange a Binary String",
        "1774": "Shifting Letters II",
        "1775": "Minimum Hours of Training to Win a Competition",
        "1776": "Largest Palindromic Number",
        "1777": "Amount of Time for Binary Tree to Be Infected",
        "1778": "Find the K-Sum of an Array",
        "1779": "Longest Subsequence With Limited Sum",
        "1780": "Removing Stars From a String",
        "1781": "Minimum Amount of Time to Collect Garbage",
        "1782": "Build a Matrix With Conditions",
        "1783": "Find Subarrays With Equal Sum",
        "1784": "Strictly Palindromic Number",
        "1785": "Maximum Rows Covered by Columns",
        "1786": "Maximum Number of Robots Within Budget",
        "1787": "Check Distances Between Same Letters",
        "1788": "Number of Ways to Reach a Position After Exactly k Steps",
        "1789": "Meeting Rooms III",
        "1790": "Optimal Partition of String",
        "1791": "Divide Intervals Into Minimum Number of Groups",
        "1792": "Longest Increasing Subsequence II",
        "1793": "Count Days Spent Together",
        "1794": "Maximum Matching of Players With Trainers",
        "1795": "Smallest Subarrays With Maximum Bitwise OR",
        "1796": "Minimum Money Required Before Transactions",
        "1797": "Smallest Even Multiple",
        "1798": "Length of the Longest Alphabetical Continuous Substring",
        "1799": "Reverse Odd Levels of Binary Tree",
        "1800": "Sum of Prefix Scores of Strings",
        "1801": "Sort the People",
        "1802": "Longest Subarray With Maximum Bitwise AND",
        "1803": "Find All Good Indices",
        "1804": "Number of Good Paths",
        "1805": "Remove Letter To Equalize Frequency",
        "1806": "Longest Uploaded Prefix",
        "1807": "Bitwise XOR of All Pairings",
        "1808": "Number of Pairs Satisfying Inequality",
        "1809": "Number of Common Factors",
        "1810": "Maximum Sum of an Hourglass",
        "1811": "Minimize XOR",
        "1812": "Maximum Deletions on a String",
        "1813": "The Employee That Worked on the Longest Task",
        "1814": "Find The Original Array of Prefix Xor",
        "1815": "Using a Robot to Print the Lexicographically Smallest String",
        "1816": "Paths in Matrix Whose Sum Is Divisible by K",
        "1817": "Range Product Queries of Powers",
        "1818": "Minimize Maximum of Array",
        "1819": "Create Components With Same Value",
        "1820": "Largest Positive Integer That Exists With Its Negative",
        "1821": "Count Number of Distinct Integers After Reverse Operations",
        "1822": "Sum of Number and Its Reverse",
        "1823": "Count Subarrays With Fixed Bounds",
        "1824": "Determine if Two Events Have Conflict",
        "1825": "Number of Subarrays With GCD Equal to K",
        "1826": "Minimum Cost to Make Array Equal",
        "1827": "Minimum Number of Operations to Make Arrays Similar",
        "1828": "Odd String Difference",
        "1829": "Words Within Two Edits of Dictionary",
        "1830": "Destroy Sequential Targets",
        "1831": "Next Greater Element IV",
        "1832": "Average Value of Even Numbers That Are Divisible by Three",
        "1833": "Most Popular Video Creator",
        "1834": "Minimum Addition to Make Integer Beautiful",
        "1835": "Height of Binary Tree After Subtree Removal Queries",
        "1836": "Apply Operations to an Array",
        "1837": "Maximum Sum of Distinct Subarrays With Length K",
        "1838": "Total Cost to Hire K Workers",
        "1839": "Minimum Total Distance Traveled",
        "1840": "Number of Distinct Averages",
        "1841": "Count Ways To Build Good Strings",
        "1842": "Most Profitable Path in a Tree",
        "1843": "Convert the Temperature",
        "1844": "Number of Subarrays With LCM Equal to K",
        "1845": "Minimum Number of Operations to Sort a Binary Tree by Level",
        "1846": "Maximum Number of Non-overlapping Palindrome Substrings",
        "1847": "Number of Unequal Triplets in Array",
        "1848": "Closest Nodes Queries in a Binary Search Tree",
        "1849": "Minimum Fuel Cost to Report to the Capital",
        "1850": "Number of Beautiful Partitions",
        "1851": "Minimum Cuts to Divide a Circle",
        "1852": "Difference Between Ones and Zeros in Row and Column",
        "1853": "Count Palindromic Subsequences",
        "1854": "Find the Pivot Integer",
        "1855": "Append Characters to String to Make Subsequence",
        "1856": "Remove Nodes From Linked List",
        "1857": "Count Subarrays With Median K",
        "1858": "Circular Sentence",
        "1859": "Divide Players Into Teams of Equal Skill",
        "1860": "Divide Nodes Into the Maximum Number of Groups",
        "1861": "Maximum Value of a String in an Array",
        "1862": "Maximum Star Sum of a Graph",
        "1863": "Frog Jump II",
        "1864": "Minimum Total Cost to Make Arrays Unequal",
        "1865": "Delete Greatest Value in Each Row",
        "1866": "Longest Square Streak in an Array",
        "1867": "Design Memory Allocator",
        "1868": "Maximum Number of Points From Grid Queries",
        "1869": "Count Pairs Of Similar Strings",
        "1870": "Smallest Value After Replacing With Sum of Prime Factors",
        "1871": "Add Edges to Make Degrees of All Nodes Even",
        "1872": "Cycle Length Queries in a Tree",
        "1873": "Maximum Enemy Forts That Can Be Captured",
        "1874": "Reward Top K Students",
        "1875": "Minimize the Maximum of Two Arrays",
        "1876": "Count Anagrams",
        "1877": "Shortest Distance to Target String in a Circular Array",
        "1878": "Take K of Each Character From Left and Right",
        "1879": "Maximum Tastiness of Candy Basket",
        "1880": "Number of Great Partitions",
        "1881": "Count the Digits That Divide a Number",
        "1882": "Distinct Prime Factors of Product of Array",
        "1883": "Partition String Into Substrings With Values at Most K",
        "1884": "Closest Prime Numbers in Range",
        "1885": "Categorize Box According to Criteria",
        "1886": "Find Consecutive Integers from a Data Stream",
        "1887": "Find Xor-Beauty of Array",
        "1888": "Maximize the Minimum Powered City",
        "1889": "Maximum Count of Positive Integer and Negative Integer",
        "1890": "Maximal Score After Applying K Operations",
        "1891": "Make Number of Distinct Characters Equal",
        "1892": "Time to Cross a Bridge",
        "1893": "Difference Between Element Sum and Digit Sum of an Array",
        "1894": "Increment Submatrices by One",
        "1895": "Count the Number of Good Subarrays",
        "1896": "Difference Between Maximum and Minimum Price Sum",
        "1897": "Minimum Common Value",
        "1898": "Minimum Operations to Make Array Equal II",
        "1899": "Maximum Subsequence Score",
        "1900": "Check if Point Is Reachable",
        "1901": "Alternating Digit Sum",
        "1902": "Sort the Students by Their Kth Score",
        "1903": "Apply Bitwise Operations to Make Strings Equal",
        "1904": "Minimum Cost to Split an Array",
        "1905": "Count Distinct Numbers on Board",
        "1906": "Count Collisions of Monkeys on a Polygon",
        "1907": "Put Marbles in Bags",
        "1908": "Count Increasing Quadruplets",
        "1909": "Separate the Digits in an Array",
        "1910": "Maximum Number of Integers to Choose From a Range I",
        "1911": "Maximize Win From Two Segments",
        "1912": "Disconnect Path in a Binary Matrix by at Most One Flip",
        "1913": "Take Gifts From the Richest Pile",
        "1914": "Count Vowel Strings in Ranges",
        "1915": "House Robber IV",
        "1916": "Rearranging Fruits",
        "1917": "Find the Array Concatenation Value",
        "1918": "Count the Number of Fair Pairs",
        "1919": "Substring XOR Queries",
        "1920": "Subsequence With the Minimum Score",
        "1921": "Maximum Difference by Remapping a Digit",
        "1922": "Minimum Score by Changing Two Elements",
        "1923": "Minimum Impossible OR",
        "1924": "Handling Sum Queries After Update",
        "1925": "Merge Two 2D Arrays by Summing Values",
        "1926": "Minimum Operations to Reduce an Integer to 0",
        "1927": "Count the Number of Square-Free Subsets",
        "1928": "Find the String with LCP",
        "1929": "Left and Right Sum Differences",
        "1930": "Find the Divisibility Array of a String",
        "1931": "Find the Maximum Number of Marked Indices",
        "1932": "Minimum Time to Visit a Cell In a Grid",
        "1933": "Split With Minimum Sum",
        "1934": "Count Total Number of Colored Cells",
        "1935": "Count Ways to Group Overlapping Ranges",
        "1936": "Count Number of Possible Root Nodes",
        "1937": "Pass the Pillow",
        "1938": "Kth Largest Sum in a Binary Tree",
        "1939": "Split the Array to Make Coprime Products",
        "1940": "Number of Ways to Earn Points",
        "1941": "Count the Number of Vowel Strings in Range",
        "1942": "Rearrange Array to Maximize Prefix Score",
        "1943": "Count the Number of Beautiful Subarrays",
        "1944": "Minimum Time to Complete All Tasks",
        "1945": "Distribute Money to Maximum Children",
        "1946": "Maximize Greatness of an Array",
        "1947": "Find Score of an Array After Marking All Elements",
        "1948": "Minimum Time to Repair Cars",
        "1949": "Number of Even and Odd Bits",
        "1950": "Check Knight Tour Configuration",
        "1951": "The Number of Beautiful Subsets",
        "1952": "K Items With the Maximum Sum",
        "1953": "Minimum Operations to Make All Array Elements Equal",
        "1954": "Collect Coins in a Tree",
        "1955": "Form Smallest Number From Two Digit Arrays",
        "1956": "Shortest Cycle in a Graph",
        "1957": "Find the Longest Balanced Substring of a Binary String",
        "1958": "Convert an Array Into a 2D Array With Conditions",
        "1959": "Mice and Cheese",
        "1960": "Minimum Reverse Operations",
        "1961": "Sum of Distances",
        "1962": "Minimum Number of Visited Cells in a Grid",
        "1963": "Check if Object Instance of Class",
        "1964": "Array Prototype Last",
        "1965": "Counter",
        "1966": "Sleep",
        "1967": "Cache With Time Limit",
        "1968": "Memoize",
        "1969": "Snail Traversal",
        "1970": "Flatten Deeply Nested Array",
        "1971": "Array Reduce Transformation",
        "1972": "Debounce",
        "1973": "Function Composition",
        "1974": "Memoize II",
        "1975": "Group By",
        "1976": "Filter Elements from Array",
        "1977": "Apply Transform Over Each Element in Array",
        "1978": "Promise Time Limit",
        "1979": "Find the Width of Columns of a Grid",
        "1980": "Find the Score of All Prefixes of an Array",
        "1981": "Cousins in Binary Tree II",
        "1982": "Design Graph With Shortest Path Calculator",
        "1983": "Row With Maximum Ones",
        "1984": "Find the Maximum Divisibility Score",
        "1985": "Minimum Additions to Make Valid String",
        "1986": "Minimize the Total Price of the Trips",
        "1987": "Generate Fibonacci Sequence",
        "1988": "Design Cancellable Function",
        "1989": "Calculate Delayed Arrival Time",
        "1990": "Sum Multiples",
        "1991": "Sliding Subarray Beauty",
        "1992": "Minimum Number of Operations to Make All Array Elements Equal to 1",
        "1993": "Maximum Sum With Exactly K Elements",
        "1994": "Find the Prefix Common Array of Two Arrays",
        "1995": "Maximum Number of Fish in a Grid",
        "1996": "Make Array Empty",
        "1997": "Determine the Winner of a Bowling Game",
        "1998": "First Completely Painted Row or Column",
        "1999": "Minimum Cost of a Path With Special Roads",
        "2000": "Lexicographically Smallest Beautiful String",
        "2001": "Counter II",
        "2002": "Allow One Function Call",
        "2003": "Create Hello World Function",
        "2004": "Find the Distinct Difference Array",
        "2005": "Frequency Tracker",
        "2006": "Number of Adjacent Elements With the Same Color",
        "2007": "Make Costs of Paths Equal in a Binary Tree",
        "2008": "Number of Senior Citizens",
        "2009": "Sum in a Matrix",
        "2010": "Maximum OR",
        "2011": "Power of Heroes",
        "2012": "Find the Losers of the Circular Game",
        "2013": "Neighboring Bitwise XOR",
        "2014": "Maximum Number of Moves in a Grid",
        "2015": "Count the Number of Complete Components",
        "2016": "Call Function with Custom Context",
        "2017": "Event Emitter",
        "2018": "Array Wrapper",
        "2019": "Minimum String Length After Removing Substrings",
        "2020": "Lexicographically Smallest Palindrome",
        "2021": "Find the Punishment Number of an Integer",
        "2022": "Modify Graph Edge Weights",
        "2023": "Return Length of Arguments Passed",
        "2024": "To Be Or Not To Be",
        "2025": "Compact Object",
        "2026": "Buy Two Chocolates",
        "2027": "Extra Characters in a String",
        "2028": "Maximum Strength of a Group",
        "2029": "Remove Trailing Zeros From a String",
        "2030": "Difference of Number of Distinct Values on Diagonals",
        "2031": "Minimum Cost to Make All Characters Equal",
        "2032": "Maximum Strictly Increasing Cells in a Matrix",
        "2033": "Timeout Cancellation",
        "2034": "Minimize String Length",
        "2035": "Semi-Ordered Permutation",
        "2036": "Sum of Matrix After Queries",
        "2037": "Count of Integers",
        "2038": "Execute Asynchronous Functions in Parallel",
        "2039": "Join Two Arrays by ID",
        "2040": "Add Two Promises",
        "2041": "Sort By",
        "2042": "Interval Cancellation",
        "2043": "Calculator with Method Chaining",
        "2044": "Is Object Empty",
        "2045": "Check if The Number is Fascinating",
        "2046": "Find the Longest Semi-Repetitive Substring",
        "2047": "Movement of Robots",
        "2048": "Find a Good Subset of the Matrix",
        "2049": "Neither Minimum nor Maximum",
        "2050": "Collecting Chocolates",
        "2051": "Maximum Sum Queries",
        "2052": "Total Distance Traveled",
        "2053": "Find the Value of the Partition",
        "2054": "Special Permutations",
        "2055": "Find Maximum Number of String Pairs",
        "2056": "Construct the Longest New String",
        "2057": "Decremental String Concatenation",
        "2058": "Count Zero Request Servers",
        "2059": "Number of Beautiful Pairs",
        "2060": "Minimum Operations to Make the Integer Zero",
        "2061": "Ways to Split Array Into Good Subarrays",
        "2062": "Robot Collisions",
        "2063": "Longest Even Odd Subarray With Threshold",
        "2064": "Prime Pairs With Target Sum",
        "2065": "Continuous Subarrays",
        "2066": "Longest Alternating Subarray",
        "2067": "Relocate Marbles",
        "2068": "Partition String Into Minimum Beautiful Substrings",
        "2069": "Number of Black Blocks",
        "2070": "Find the Maximum Achievable Number",
        "2071": "Maximum Number of Jumps to Reach the Last Index",
        "2072": "Longest Non-decreasing Subarray From Two Arrays",
        "2073": "Sum of Squares of Special Elements",
        "2074": "Maximum Beauty of an Array After Applying Operation",
        "2075": "Minimum Index of a Valid Split",
        "2076": "Length of the Longest Valid Substring",
        "2077": "Check if Array is Good",
        "2078": "Sort Vowels in a String",
        "2079": "Visit Array Positions to Maximize Score",
        "2080": "Ways to Express an Integer as Sum of Powers",
        "2081": "Split Strings by Separator",
        "2082": "Largest Element in an Array after Merge Operations",
        "2083": "Maximum Number of Groups With Increasing Length",
        "2084": "Count Paths That Can Form a Palindrome in a Tree",
        "2085": "Number of Employees Who Met the Target",
        "2086": "Count Complete Subarrays in an Array",
        "2087": "Shortest String That Contains Three Strings",
        "2088": "Count Stepping Numbers in Range",
        "2089": "Account Balance After Rounded Purchase",
        "2090": "Insert Greatest Common Divisors in Linked List",
        "2091": "Minimum Seconds to Equalize a Circular Array",
        "2092": "Minimum Time to Make Array Sum At Most x",
        "2093": "Faulty Keyboard",
        "2094": "Check if it is Possible to Split Array",
        "2095": "Find the Safest Path in a Grid",
        "2096": "Maximum Elegance of a K-Length Subsequence",
        "2097": "Max Pair Sum in an Array",
        "2098": "Double a Number Represented as a Linked List",
        "2099": "Minimum Absolute Difference Between Elements With Constraint",
        "2100": "Apply Operations to Maximize Score",
        "2101": "Count Pairs Whose Sum is Less than Target",
        "2102": "Make String a Subsequence Using Cyclic Increments",
        "2103": "Sorting Three Groups",
        "2104": "Number of Beautiful Integers in the Range",
        "2105": "Check if a String Is an Acronym of Words",
        "2106": "Determine the Minimum Sum of a k-avoiding Array",
        "2107": "Maximize the Profit as the Salesman",
        "2108": "Find the Longest Equal Subarray",
        "2109": "Furthest Point From Origin",
        "2110": "Find the Minimum Possible Sum of a Beautiful Array",
        "2111": "Minimum Operations to Form Subsequence With Target Sum",
        "2112": "Maximize Value of Function in a Ball Passing Game",
        "2113": "Check if Strings Can be Made Equal With Operations I",
        "2114": "Check if Strings Can be Made Equal With Operations II",
        "2115": "Maximum Sum of Almost Unique Subarray",
        "2116": "Count K-Subsequences of a String With Maximum Beauty",
        "2117": "Count Symmetric Integers",
        "2118": "Count of Interesting Subarrays",
        "2119": "Minimum Edge Weight Equilibrium Queries in a Tree",
        "2120": "Points That Intersect With Cars",
        "2121": "Determine if a Cell Is Reachable at a Given Time",
        "2122": "Minimum Moves to Spread Stones Over Grid",
        "2123": "String Transformation",
        "2124": "Minimum Right Shifts to Sort the Array",
        "2125": "Minimum Array Length After Pair Removals",
        "2126": "Count Pairs of Points With Distance k",
        "2127": "Happy Students",
        "2128": "Maximum Number of Alloys",
        "2129": "Maximum Element-Sum of a Complete Subset of Indices",
        "2130": "Maximum Odd Binary Number",
        "2131": "Beautiful Towers I",
        "2132": "Beautiful Towers II",
        "2133": "Count Valid Paths in a Tree",
        "2134": "Minimum Operations to Collect Elements",
        "2135": "Minimum Number of Operations to Make Array Empty",
        "2136": "Split Array Into Maximum Number of Subarrays",
        "2137": "Maximum Number of K-Divisible Components",
        "2138": "Maximum Value of an Ordered Triplet I",
        "2139": "Maximum Value of an Ordered Triplet II",
        "2140": "Minimum Size Subarray in Infinite Array",
        "2141": "Count Visited Nodes in a Directed Graph",
        "2142": "Create a DataFrame from List",
        "2143": "Get the Size of a DataFrame",
        "2144": "Display the First Three Rows",
        "2145": "Select Data",
        "2146": "Create a New Column",
        "2147": "Drop Duplicate Rows",
        "2148": "Drop Missing Data",
        "2149": "Modify Columns",
        "2150": "Rename Columns",
        "2151": "Change Data Type",
        "2152": "Fill Missing Data",
        "2153": "Reshape Data: Concatenate",
        "2154": "Reshape Data: Pivot",
        "2155": "Reshape Data: Melt",
        "2156": "Method Chaining",
        "2157": "Divisible and Non-divisible Sums Difference",
        "2158": "Minimum Processing Time",
        "2159": "Apply Operations on Array to Maximize Sum of Squares",
        "2160": "Last Visited Integers",
        "2161": "Longest Unequal Adjacent Groups Subsequence I",
        "2162": "Longest Unequal Adjacent Groups Subsequence II",
        "2163": "Count of Sub-Multisets With Bounded Sum",
        "2164": "Find Indices With Index and Value Difference I",
        "2165": "Shortest and Lexicographically Smallest Beautiful String",
        "2166": "Find Indices With Index and Value Difference II",
        "2167": "Construct Product Matrix",
        "2168": "Minimum Sum of Mountain Triplets I",
        "2169": "Minimum Number of Groups to Create a Valid Assignment",
        "2170": "Minimum Changes to Make K Semi-palindromes",
        "2171": "Subarrays Distinct Element Sum of Squares I",
        "2172": "Minimum Number of Changes to Make Binary String Beautiful",
        "2173": "Length of the Longest Subsequence That Sums to Target",
        "2174": "Subarrays Distinct Element Sum of Squares II",
        "2175": "Minimum Increment Operations to Make Array Beautiful",
        "2176": "Maximum Points After Collecting Coins From All Nodes",
        "2177": "Find Champion I",
        "2178": "Find Champion II",
        "2179": "Maximum Score After Applying Operations on a Tree",
        "2180": "Maximum Balanced Subsequence Sum",
        "2181": "Distribute Candies Among Children I",
        "2182": "Distribute Candies Among Children II",
        "2183": "Number of Strings Which Can Be Rearranged to Contain Substring",
        "2184": "Maximum Spending After Buying Items",
        "2185": "Maximum Strong Pair XOR I",
        "2186": "High-Access Employees",
        "2187": "Minimum Operations to Maximize Last Elements in Arrays",
        "2188": "Maximum Strong Pair XOR II",
        "2189": "Make Three Strings Equal",
        "2190": "Separate Black and White Balls",
        "2191": "Maximum Xor Product",
        "2192": "Find Building Where Alice and Bob Can Meet",
        "2193": "Find Words Containing Character",
        "2194": "Maximize Area of Square Hole in Grid",
        "2195": "Minimum Number of Coins for Fruits",
        "2196": "Find Maximum Non-decreasing Array Length",
        "2197": "Matrix Similarity After Cyclic Shifts",
        "2198": "Count Beautiful Substrings I",
        "2199": "Make Lexicographically Smallest Array by Swapping Elements",
        "2200": "Count Beautiful Substrings II",
        "2201": "Find the Peaks",
        "2202": "Minimum Number of Coins to be Added",
        "2203": "Count Complete Substrings",
        "2204": "Count the Number of Infection Sequences",
        "2205": "Find Common Elements Between Two Arrays",
        "2206": "Remove Adjacent Almost-Equal Characters",
        "2207": "Length of Longest Subarray With at Most K Frequency",
        "2208": "Number of Possible Sets of Closing Branches",
        "2209": "Count Tested Devices After Test Operations",
        "2210": "Double Modular Exponentiation",
        "2211": "Count Subarrays Where Max Element Appears at Least K Times",
        "2212": "Count the Number of Good Partitions",
        "2213": "Find Missing and Repeated Values",
        "2214": "Divide Array Into Arrays With Max Difference",
        "2215": "Minimum Cost to Make Array Equalindromic",
        "2216": "Count the Number of Incremovable Subarrays I",
        "2217": "Find Polygon With the Largest Perimeter",
        "2218": "Count the Number of Incremovable Subarrays II",
        "2219": "Find Number of Coins to Place in Tree Nodes",
        "2220": "Maximum Square Area by Removing Fences From a Field",
        "2221": "Minimum Cost to Convert String I",
        "2222": "Minimum Cost to Convert String II",
        "2223": "Check if Bitwise OR Has Trailing Zeros",
        "2224": "Find Longest Special Substring That Occurs Thrice I",
        "2225": "Find Longest Special Substring That Occurs Thrice II",
        "2226": "Palindrome Rearrangement Queries",
        "2227": "Minimum Number of Operations to Make Array XOR Equal to K",
        "2228": "Minimum Number of Operations to Make X and Y Equal",
        "2229": "Count the Number of Powerful Integers",
        "2230": "Maximum Area of Longest Diagonal Rectangle",
        "2231": "Minimum Moves to Capture The Queen",
        "2232": "Maximum Size of a Set After Removals",
        "2233": "Maximize the Number of Partitions After Operations",
        "2234": "Count Elements With Maximum Frequency",
        "2235": "Find Beautiful Indices in the Given Array I",
        "2236": "Maximum Number That Sum of the Prices Is Less Than or Equal to K",
        "2237": "Find Beautiful Indices in the Given Array II",
        "2238": "Divide an Array Into Subarrays With Minimum Cost I",
        "2239": "Find if Array Can Be Sorted",
        "2240": "Minimize Length of Array Using Operations",
        "2241": "Divide an Array Into Subarrays With Minimum Cost II",
        "2242": "Minimum Number of Pushes to Type Word I",
        "2243": "Count the Number of Houses at a Certain Distance I",
        "2244": "Minimum Number of Pushes to Type Word II",
        "2245": "Count the Number of Houses at a Certain Distance II",
        "2246": "Number of Changing Keys",
        "2247": "Alice and Bob Playing Flower Game",
        "2248": "Minimize OR of Remaining Elements Using Operations",
        "2249": "Type of Triangle",
        "2250": "Find the Number of Ways to Place People I",
        "2251": "Maximum Good Subarray Sum",
        "2252": "Find the Number of Ways to Place People II",
        "2253": "Ant on the Boundary",
        "2254": "Minimum Time to Revert Word to Initial State I",
        "2255": "Find the Grid of Region Average",
        "2256": "Modify the Matrix",
        "2257": "Number of Subarrays That Match a Pattern I",
        "2258": "Maximum Palindromes After Operations",
        "2259": "Maximum Number of Operations With the Same Score I",
        "2260": "Apply Operations to Make String Empty",
        "2261": "Maximum Number of Operations With the Same Score II",
        "2262": "Maximize Consecutive Elements in an Array After Modification",
        "2263": "Count Prefix and Suffix Pairs I",
        "2264": "Find the Length of the Longest Common Prefix",
        "2265": "Most Frequent Prime",
        "2266": "Split the Array",
        "2267": "Find the Largest Area of Square Inside Two Rectangles",
        "2268": "Earliest Second to Mark Indices I",
        "2269": "Earliest Second to Mark Indices II",
        "2270": "Minimum Operations to Exceed Threshold Value I",
        "2271": "Minimum Operations to Exceed Threshold Value II",
        "2272": "Count Pairs of Connectable Servers in a Weighted Tree Network",
        "2273": "Find the Maximum Sum of Node Values",
        "2274": "Distribute Elements Into Two Arrays I",
        "2275": "Distribute Elements Into Two Arrays II",
        "2276": "Apple Redistribution into Boxes",
        "2277": "Shortest Uncommon Substring in an Array",
        "2278": "Maximum Strength of K Disjoint Subarrays",
        "2279": "Find the Sum of Encrypted Integers",
        "2280": "Mark Elements on Array by Performing Queries",
        "2281": "Replace Question Marks in String to Minimize Its Value",
        "2282": "Find the Sum of the Power of All Subsequences",
        "2283": "Existence of a Substring in a String and Its Reverse",
        "2284": "Count Substrings Starting and Ending with Given Character",
        "2285": "Minimum Deletions to Make String K-Special",
        "2286": "Minimum Moves to Pick K Ones",
        "2287": "Maximum Length Substring With Two Occurrences",
        "2288": "Apply Operations to Make Sum of Array Greater Than or Equal to k",
        "2289": "Most Frequent IDs",
        "2290": "Longest Common Suffix Queries",
        "2291": "Shortest Subarray With OR at Least K I",
        "2292": "Minimum Levels to Gain More Points",
        "2293": "Shortest Subarray With OR at Least K II",
        "2294": "Find the Sum of Subsequence Powers",
        "2295": "Harshad Number",
        "2296": "Water Bottles II",
        "2297": "Count Alternating Subarrays",
        "2298": "Minimize Manhattan Distances",
        "2299": "Longest Strictly Increasing or Strictly Decreasing Subarray",
        "2300": "Lexicographically Smallest String After Operations With Constraint",
        "2301": "Minimum Operations to Make Median of Array Equal to K",
        "2302": "Minimum Cost Walk in Weighted Graph",
        "2303": "Score of a String",
        "2304": "Minimum Rectangles to Cover Points",
        "2305": "Minimum Time to Visit Disappearing Nodes",
        "2306": "Find the Number of Subarrays Where Boundary Elements Are Maximum",
        "2307": "Latest Time You Can Obtain After Replacing Characters",
        "2308": "Maximum Prime Difference",
        "2309": "Kth Smallest Amount With Single Denomination Combination",
        "2310": "Minimum Sum of Values by Dividing Array",
        "2311": "Count the Number of Special Characters I",
        "2312": "Count the Number of Special Characters II",
        "2313": "Minimum Number of Operations to Satisfy Conditions",
        "2314": "Find Edges in Shortest Paths",
        "2315": "Make a Square with the Same Color",
        "2316": "Right Triangles",
        "2317": "Find All Possible Stable Binary Arrays I",
        "2318": "Find All Possible Stable Binary Arrays II",
        "2319": "Find the Integer Added to Array I",
        "2320": "Find the Integer Added to Array II",
        "2321": "Minimum Array End",
        "2322": "Find the Median of the Uniqueness Array",
        "2323": "Valid Word",
        "2324": "Minimum Number of Operations to Make Word K-Periodic",
        "2325": "Minimum Length of Anagram Concatenation",
        "2326": "Minimum Cost to Equalize Array",
        "2327": "Check if Grid Satisfies Conditions",
        "2328": "Maximum Points Inside the Square",
        "2329": "Minimum Substring Partition of Equal Character Frequency",
        "2330": "Find Products of Elements of Big Array",
        "2331": "Permutation Difference between Two Strings",
        "2332": "Maximum Difference Score in a Grid",
        "2333": "Find the Minimum Cost Array Permutation",
        "2334": "Special Array I",
        "2335": "Special Array II",
        "2336": "Sum of Digit Differences of All Pairs",
        "2337": "Find Number of Ways to Reach the K-th Stair",
        "2338": "Find the XOR of Numbers Which Appear Twice",
        "2339": "Find Occurrences of an Element in an Array",
        "2340": "Find the Number of Distinct Colors Among the Balls",
        "2341": "Block Placement Queries",
        "2342": "Find the Number of Good Pairs I",
        "2343": "String Compression III",
        "2344": "Find the Number of Good Pairs II",
        "2345": "Maximum Sum of Subsequence With Non-adjacent Elements",
        "2346": "Minimum Number of Chairs in a Waiting Room",
        "2347": "Count Days Without Meetings",
        "2348": "Lexicographically Minimum String After Removing Stars",
        "2349": "Clear Digits",
        "2350": "Find The First Player to win K Games in a Row",
        "2351": "Find the Maximum Length of a Good Subsequence I",
        "2352": "Find the Maximum Length of a Good Subsequence II",
        "2353": "Find the Child Who Has the Ball After K Seconds",
        "2354": "Find the N-th Value After K Seconds",
        "2355": "Maximum Total Reward Using Operations I",
        "2356": "Maximum Total Reward Using Operations II",
        "2357": "Count Pairs That Form a Complete Day I",
        "2358": "Count Pairs That Form a Complete Day II",
        "2359": "Maximum Total Damage With Spell Casting",
        "2360": "Peaks in Array",
        "2361": "Find Minimum Operations to Make All Elements Divisible by Three",
        "2362": "Minimum Operations to Make Binary Array Elements Equal to One I",
        "2363": "Minimum Operations to Make Binary Array Elements Equal to One II",
        "2364": "Count the Number of Inversions",
        "2365": "Minimum Average of Smallest and Largest Elements",
        "2366": "Find the Minimum Area to Cover All Ones I",
        "2367": "Maximize Total Cost of Alternating Subarrays",
        "2368": "Find the Minimum Area to Cover All Ones II",
        "2369": "Maximum Height of a Triangle",
        "2370": "Find the Maximum Length of Valid Subsequence II",
        "2371": "Alternating Groups I",
        "2372": "Maximum Points After Enemy Battles",
        "2373": "Alternating Groups II",
        "2374": "Number of Subarrays With AND Value of K",
        "2375": "Find the Encrypted String",
        "2376": "Generate Binary Strings Without Adjacent Zeros",
        "2377": "Count Submatrices With Equal Frequency of X and Y",
        "2378": "Construct String with Minimum Cost",
        "2379": "Lexicographically Smallest String After a Swap",
        "2380": "Delete Nodes From Linked List Present in Array",
        "2381": "Minimum Cost for Cutting Cake I",
        "2382": "Minimum Cost for Cutting Cake II",
        "2383": "Odd and Even Transactions",
        "2384": "Find the Winning Player in Coin Game",
        "2385": "Minimum Array Changes to Make Differences Equal",
        "2386": "Number of Bit Changes to Make Two Integers Equal",
        "2387": "Vowels Game in a String",
        "2388": "Maximum Number of Operations to Move Ones to the End",
        "2389": "Minimum Operations to Make Array Equal to Target",
        "2390": "Find if Digit Game Can Be Won",
        "2391": "Find the Count of Numbers Which Are Not Special",
        "2392": "Count the Number of Substrings With Dominant Ones",
        "2393": "Check if the Rectangle Corner Is Reachable",
        "2394": "Find the Number of Winning Players",
        "2395": "Minimum Number of Flips to Make Binary Grid Palindromic I",
        "2396": "Minimum Number of Flips to Make Binary Grid Palindromic II",
        "2397": "Time Taken to Mark All Nodes",
        "2398": "Design Neighbor Sum Service",
        "2399": "Shortest Distance After Road Addition Queries I",
        "2400": "Shortest Distance After Road Addition Queries II",
        "2401": "Alternating Groups III",
        "2402": "Snake in Matrix",
        "2403": "Count the Number of Good Nodes",
        "2404": "Find the Count of Monotonic Pairs I",
        "2405": "Find the Count of Monotonic Pairs II",
        "2406": "Find the Power of K-Size Subarrays I",
        "2407": "Find the Power of K-Size Subarrays II",
        "2408": "Maximum Value Sum by Placing Three Rooks I",
        "2409": "Maximum Value Sum by Placing Three Rooks II",
        "2410": "Count Substrings That Satisfy K-Constraint I",
        "2411": "Maximum Energy Boost From Two Drinks",
        "2412": "Find the Largest Palindrome Divisible by K",
        "2413": "Count Substrings That Satisfy K-Constraint II",
        "2414": "Final Array State After K Multiplication Operations I",
        "2415": "Count Almost Equal Pairs I",
        "2416": "Final Array State After K Multiplication Operations II",
        "2417": "Count Almost Equal Pairs II",
        "2418": "Find the Key of the Numbers",
        "2419": "Hash Divided String",
        "2420": "Find the Count of Good Integers",
        "2421": "Minimum Amount of Damage Dealt to Bob",
        "2422": "Check if Two Chessboard Squares Have the Same Color",
        "2423": "K-th Nearest Obstacle Queries",
        "2424": "Select Cells in Grid With Maximum Score",
        "2425": "Maximum XOR Score Subarray Queries",
        "2426": "Convert Date to Binary"
    },
    "text": {
        "0": "You are given a string s consisting only of uppercase English letters. You can apply some operations to this string where, in one operation, you can remove any occurrence of one of the substrings \"AB\" or \"CD\" from s. Return the minimum possible length of the resulting string that you can obtain. Note that the string concatenates after removing the substring and could produce new \"AB\" or \"CD\" substrings.   Example 1: Input: s = \"ABFCACDB\" Output: 2 Explanation: We can do the following operations: - Remove the substring \"ABFCACDB\", so s = \"FCACDB\". - Remove the substring \"FCACDB\", so s = \"FCAB\". - Remove the substring \"FCAB\", so s = \"FC\". So the resulting length of the string is 2. It can be shown that it is the minimum length that we can obtain. Example 2: Input: s = \"ACBBD\" Output: 5 Explanation: We cannot do any operations on the string so the length remains the same.   Constraints: 1 <= s.length <= 100 s consists only of uppercase English letters.",
        "1": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.   Example 1: Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3,2,4], target = 6 Output: [1,2] Example 3: Input: nums = [3,3], target = 6 Output: [0,1]   Constraints: 2 <= nums.length <= 104 -109 <= nums[i] <= 109 -109 <= target <= 109 Only one valid answer exists.   Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?",
        "2": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself.   Example 1: Input: l1 = [2,4,3], l2 = [5,6,4] Output: [7,0,8] Explanation: 342 + 465 = 807. Example 2: Input: l1 = [0], l2 = [0] Output: [0] Example 3: Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] Output: [8,9,9,9,0,0,0,1]   Constraints: The number of nodes in each linked list is in the range [1, 100]. 0 <= Node.val <= 9 It is guaranteed that the list represents a number that does not have leading zeros.",
        "3": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).   Example 1: Input: nums1 = [1,3], nums2 = [2] Output: 2.00000 Explanation: merged array = [1,2,3] and median is 2. Example 2: Input: nums1 = [1,2], nums2 = [3,4] Output: 2.50000 Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.   Constraints: nums1.length == m nums2.length == n 0 <= m <= 1000 0 <= n <= 1000 1 <= m + n <= 2000 -106 <= nums1[i], nums2[i] <= 106",
        "4": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) P   A   H   N A P L S I I G Y   I   R And then read line by line: \"PAHNAPLSIIGYIR\" Write the code that will take a string and make this conversion given a number of rows: string convert(string s, int numRows);   Example 1: Input: s = \"PAYPALISHIRING\", numRows = 3 Output: \"PAHNAPLSIIGYIR\" Example 2: Input: s = \"PAYPALISHIRING\", numRows = 4 Output: \"PINALSIGYAHRPI\" Explanation: P     I    N A   L S  I G Y A   H R P     I Example 3: Input: s = \"A\", numRows = 1 Output: \"A\"   Constraints: 1 <= s.length <= 1000 s consists of English letters (lower-case and upper-case), ',' and '.'. 1 <= numRows <= 1000",
        "5": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0. Assume the environment does not allow you to store 64-bit integers (signed or unsigned).   Example 1: Input: x = 123 Output: 321 Example 2: Input: x = -123 Output: -321 Example 3: Input: x = 120 Output: 21   Constraints: -231 <= x <= 231 - 1",
        "6": "Given an integer x, return true if x is a palindrome , and false otherwise.   Example 1: Input: x = 121 Output: true Explanation: 121 reads as 121 from left to right and from right to left. Example 2: Input: x = -121 Output: false Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome. Example 3: Input: x = 10 Output: false Explanation: Reads 01 from right to left. Therefore it is not a palindrome.   Constraints: -231 <= x <= 231 - 1   Follow up: Could you solve it without converting the integer to a string?",
        "7": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where: '.' Matches any single character. '*' Matches zero or more of the preceding element. The matching should cover the entire input string (not partial).   Example 1: Input: s = \"aa\", p = \"a\" Output: false Explanation: \"a\" does not match the entire string \"aa\". Example 2: Input: s = \"aa\", p = \"a*\" Output: true Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\". Example 3: Input: s = \"ab\", p = \".*\" Output: true Explanation: \".*\" means \"zero or more (*) of any character (.)\".   Constraints: 1 <= s.length <= 20 1 <= p.length <= 20 s contains only lowercase English letters. p contains only lowercase English letters, '.', and '*'. It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.",
        "8": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]). Find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store. Notice that you may not slant the container.   Example 1: Input: height = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49. Example 2: Input: height = [1,1] Output: 1   Constraints: n == height.length 2 <= n <= 105 0 <= height[i] <= 104",
        "9": "Seven different symbols represent Roman numerals with the following values: Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 Roman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules: If the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral. If the value starts with 4 or 9 use the subtractive form representing one symbol subtracted from the following symbol, for example, 4 is 1 (I) less than 5 (V): IV and 9 is 1 (I) less than 10 (X): IX. Only the following subtractive forms are used: 4 (IV), 9 (IX), 40 (XL), 90 (XC), 400 (CD) and 900 (CM). Only powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5 (V), 50 (L), or 500 (D) multiple times. If you need to append a symbol 4 times use the subtractive form. Given an integer, convert it to a Roman numeral.   Example 1: Input: num = 3749 Output: \"MMMDCCXLIX\" Explanation: 3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)  700 = DCC as 500 (D) + 100 (C) + 100 (C)   40 = XL as 10 (X) less of 50 (L)    9 = IX as 1 (I) less of 10 (X) Note: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places Example 2: Input: num = 58 Output: \"LVIII\" Explanation: 50 = L  8 = VIII Example 3: Input: num = 1994 Output: \"MCMXCIV\" Explanation: 1000 = M  900 = CM   90 = XC    4 = IV   Constraints: 1 <= num <= 3999",
        "10": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. Symbol       Value I             1 V             5 X             10 L             50 C             100 D             500 M             1000 For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used: I can be placed before V (5) and X (10) to make 4 and 9.  X can be placed before L (50) and C (100) to make 40 and 90.  C can be placed before D (500) and M (1000) to make 400 and 900. Given a roman numeral, convert it to an integer.   Example 1: Input: s = \"III\" Output: 3 Explanation: III = 3. Example 2: Input: s = \"LVIII\" Output: 58 Explanation: L = 50, V= 5, III = 3. Example 3: Input: s = \"MCMXCIV\" Output: 1994 Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.   Constraints: 1 <= s.length <= 15 s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M'). It is guaranteed that s is a valid roman numeral in the range [1, 3999].",
        "11": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \"\".   Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Explanation: There is no common prefix among the input strings.   Constraints: 1 <= strs.length <= 200 0 <= strs[i].length <= 200 strs[i] consists of only lowercase English letters.",
        "12": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.   Example 1: Input: nums = [-1,0,1,2,-1,-4] Output: [[-1,-1,2],[-1,0,1]] Explanation:  nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0. nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0. The distinct triplets are [-1,0,1] and [-1,-1,2]. Notice that the order of the output and the order of the triplets does not matter. Example 2: Input: nums = [0,1,1] Output: [] Explanation: The only possible triplet does not sum up to 0. Example 3: Input: nums = [0,0,0] Output: [[0,0,0]] Explanation: The only possible triplet sums up to 0.   Constraints: 3 <= nums.length <= 3000 -105 <= nums[i] <= 105",
        "13": "Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.   Example 1: Input: nums = [-1,2,1,-4], target = 1 Output: 2 Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2). Example 2: Input: nums = [0,0,0], target = 1 Output: 0 Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).   Constraints: 3 <= nums.length <= 500 -1000 <= nums[i] <= 1000 -104 <= target <= 104",
        "14": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order. A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.   Example 1: Input: digits = \"23\" Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"] Example 2: Input: digits = \"\" Output: [] Example 3: Input: digits = \"2\" Output: [\"a\",\"b\",\"c\"]   Constraints: 0 <= digits.length <= 4 digits[i] is a digit in the range ['2', '9'].",
        "15": "Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that: 0 <= a, b, c, d < n a, b, c, and d are distinct. nums[a] + nums[b] + nums[c] + nums[d] == target You may return the answer in any order.   Example 1: Input: nums = [1,0,-1,0,-2,2], target = 0 Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]] Example 2: Input: nums = [2,2,2,2,2], target = 8 Output: [[2,2,2,2]]   Constraints: 1 <= nums.length <= 200 -109 <= nums[i] <= 109 -109 <= target <= 109",
        "16": "Given the head of a linked list, remove the nth node from the end of the list and return its head.   Example 1: Input: head = [1,2,3,4,5], n = 2 Output: [1,2,3,5] Example 2: Input: head = [1], n = 1 Output: [] Example 3: Input: head = [1,2], n = 1 Output: [1]   Constraints: The number of nodes in the list is sz. 1 <= sz <= 30 0 <= Node.val <= 100 1 <= n <= sz   Follow up: Could you do this in one pass?",
        "17": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type.   Example 1: Input: s = \"()\" Output: true Example 2: Input: s = \"()[]{}\" Output: true Example 3: Input: s = \"(]\" Output: false Example 4: Input: s = \"([])\" Output: true   Constraints: 1 <= s.length <= 104 s consists of parentheses only '()[]{}'.",
        "18": "You are given the heads of two sorted linked lists list1 and list2. Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.   Example 1: Input: list1 = [1,2,4], list2 = [1,3,4] Output: [1,1,2,3,4,4] Example 2: Input: list1 = [], list2 = [] Output: [] Example 3: Input: list1 = [], list2 = [0] Output: [0]   Constraints: The number of nodes in both lists is in the range [0, 50]. -100 <= Node.val <= 100 Both list1 and list2 are sorted in non-decreasing order.",
        "19": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.   Example 1: Input: n = 3 Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"] Example 2: Input: n = 1 Output: [\"()\"]   Constraints: 1 <= n <= 8",
        "20": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.   Example 1: Input: lists = [[1,4,5],[1,3,4],[2,6]] Output: [1,1,2,3,4,4,5,6] Explanation: The linked-lists are: [   1->4->5,   1->3->4,   2->6 ] merging them into one sorted list: 1->1->2->3->4->4->5->6 Example 2: Input: lists = [] Output: [] Example 3: Input: lists = [[]] Output: []   Constraints: k == lists.length 0 <= k <= 104 0 <= lists[i].length <= 500 -104 <= lists[i][j] <= 104 lists[i] is sorted in ascending order. The sum of lists[i].length will not exceed 104.",
        "21": "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)   Example 1: Input: head = [1,2,3,4] Output: [2,1,4,3] Explanation: Example 2: Input: head = [] Output: [] Example 3: Input: head = [1] Output: [1] Example 4: Input: head = [1,2,3] Output: [2,1,3]   Constraints: The number of nodes in the list is in the range [0, 100]. 0 <= Node.val <= 100",
        "22": "Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list. k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is. You may not alter the values in the list's nodes, only nodes themselves may be changed.   Example 1: Input: head = [1,2,3,4,5], k = 2 Output: [2,1,4,3,5] Example 2: Input: head = [1,2,3,4,5], k = 3 Output: [3,2,1,4,5]   Constraints: The number of nodes in the list is n. 1 <= k <= n <= 5000 0 <= Node.val <= 1000   Follow-up: Can you solve the problem in O(1) extra memory space?",
        "23": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums. Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things: Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums. Return k. Custom Judge: The judge will test your solution with the following code: int[] nums = [...]; // Input array int[] expectedNums = [...]; // The expected answer with correct length  int k = removeDuplicates(nums); // Calls your implementation  assert k == expectedNums.length; for (int i = 0; i < k; i++) {     assert nums[i] == expectedNums[i]; } If all assertions pass, then your solution will be accepted.   Example 1: Input: nums = [1,1,2] Output: 2, nums = [1,2,_] Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). Example 2: Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: 5, nums = [0,1,2,3,4,_,_,_,_,_] Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively. It does not matter what you leave beyond the returned k (hence they are underscores).   Constraints: 1 <= nums.length <= 3 * 104 -100 <= nums[i] <= 100 nums is sorted in non-decreasing order.",
        "24": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val. Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things: Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums. Return k. Custom Judge: The judge will test your solution with the following code: int[] nums = [...]; // Input array int val = ...; // Value to remove int[] expectedNums = [...]; // The expected answer with correct length.                             // It is sorted with no values equaling val.  int k = removeElement(nums, val); // Calls your implementation  assert k == expectedNums.length; sort(nums, 0, k); // Sort the first k elements of nums for (int i = 0; i < actualLength; i++) {     assert nums[i] == expectedNums[i]; } If all assertions pass, then your solution will be accepted.   Example 1: Input: nums = [3,2,2,3], val = 3 Output: 2, nums = [2,2,_,_] Explanation: Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores). Example 2: Input: nums = [0,1,2,2,3,0,4,2], val = 2 Output: 5, nums = [0,1,4,0,3,_,_,_] Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4. Note that the five elements can be returned in any order. It does not matter what you leave beyond the returned k (hence they are underscores).   Constraints: 0 <= nums.length <= 100 0 <= nums[i] <= 50 0 <= val <= 100",
        "25": "Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.   Example 1: Input: haystack = \"sadbutsad\", needle = \"sad\" Output: 0 Explanation: \"sad\" occurs at index 0 and 6. The first occurrence is at index 0, so we return 0. Example 2: Input: haystack = \"leetcode\", needle = \"leeto\" Output: -1 Explanation: \"leeto\" did not occur in \"leetcode\", so we return -1.   Constraints: 1 <= haystack.length, needle.length <= 104 haystack and needle consist of only lowercase English characters.",
        "26": "Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator. The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2. Return the quotient after dividing dividend by divisor. Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.   Example 1: Input: dividend = 10, divisor = 3 Output: 3 Explanation: 10/3 = 3.33333.. which is truncated to 3. Example 2: Input: dividend = 7, divisor = -3 Output: -2 Explanation: 7/-3 = -2.33333.. which is truncated to -2.   Constraints: -231 <= dividend, divisor <= 231 - 1 divisor != 0",
        "27": "You are given a string s and an array of strings words. All the strings of words are of the same length. A concatenated string is a string that exactly contains all the strings of any permutation of words concatenated. For example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated string because it is not the concatenation of any permutation of words. Return an array of the starting indices of all the concatenated substrings in s. You can return the answer in any order.   Example 1: Input: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"] Output: [0,9] Explanation: The substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words. The substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words. Example 2: Input: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"] Output: [] Explanation: There is no concatenated substring. Example 3: Input: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"] Output: [6,9,12] Explanation: The substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"]. The substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"]. The substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"].   Constraints: 1 <= s.length <= 104 1 <= words.length <= 5000 1 <= words[i].length <= 30 s and words[i] consist of lowercase English letters.",
        "28": "A permutation of an array of integers is an arrangement of its members into a sequence or linear order. For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]. The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order). For example, the next permutation of arr = [1,2,3] is [1,3,2]. Similarly, the next permutation of arr = [2,3,1] is [3,1,2]. While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement. Given an array of integers nums, find the next permutation of nums. The replacement must be in place and use only constant extra memory.   Example 1: Input: nums = [1,2,3] Output: [1,3,2] Example 2: Input: nums = [3,2,1] Output: [1,2,3] Example 3: Input: nums = [1,1,5] Output: [1,5,1]   Constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 100",
        "29": "Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring .   Example 1: Input: s = \"(()\" Output: 2 Explanation: The longest valid parentheses substring is \"()\". Example 2: Input: s = \")()())\" Output: 4 Explanation: The longest valid parentheses substring is \"()()\". Example 3: Input: s = \"\" Output: 0   Constraints: 0 <= s.length <= 3 * 104 s[i] is '(', or ')'.",
        "30": "There is an integer array nums sorted in ascending order (with distinct values). Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2]. Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums. You must write an algorithm with O(log n) runtime complexity.   Example 1: Input: nums = [4,5,6,7,0,1,2], target = 0 Output: 4 Example 2: Input: nums = [4,5,6,7,0,1,2], target = 3 Output: -1 Example 3: Input: nums = [1], target = 0 Output: -1   Constraints: 1 <= nums.length <= 5000 -104 <= nums[i] <= 104 All values of nums are unique. nums is an ascending array that is possibly rotated. -104 <= target <= 104",
        "31": "Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value. If target is not found in the array, return [-1, -1]. You must write an algorithm with O(log n) runtime complexity.   Example 1: Input: nums = [5,7,7,8,8,10], target = 8 Output: [3,4] Example 2: Input: nums = [5,7,7,8,8,10], target = 6 Output: [-1,-1] Example 3: Input: nums = [], target = 0 Output: [-1,-1]   Constraints: 0 <= nums.length <= 105 -109 <= nums[i] <= 109 nums is a non-decreasing array. -109 <= target <= 109",
        "32": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You must write an algorithm with O(log n) runtime complexity.   Example 1: Input: nums = [1,3,5,6], target = 5 Output: 2 Example 2: Input: nums = [1,3,5,6], target = 2 Output: 1 Example 3: Input: nums = [1,3,5,6], target = 7 Output: 4   Constraints: 1 <= nums.length <= 104 -104 <= nums[i] <= 104 nums contains distinct values sorted in ascending order. -104 <= target <= 104",
        "33": "Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: Each row must contain the digits 1-9 without repetition. Each column must contain the digits 1-9 without repetition. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition. Note: A Sudoku board (partially filled) could be valid but is not necessarily solvable. Only the filled cells need to be validated according to the mentioned rules.   Example 1: Input: board =  [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"] ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"] ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"] ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"] ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"] ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"] ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"] ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"] ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] Output: true Example 2: Input: board =  [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"] ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"] ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"] ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"] ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"] ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"] ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"] ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"] ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] Output: false Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.   Constraints: board.length == 9 board[i].length == 9 board[i][j] is a digit 1-9 or '.'.",
        "34": "Write a program to solve a Sudoku puzzle by filling the empty cells. A sudoku solution must satisfy all of the following rules: Each of the digits 1-9 must occur exactly once in each row. Each of the digits 1-9 must occur exactly once in each column. Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid. The '.' character indicates empty cells.   Example 1: Input: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] Output: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]] Explanation: The input board is shown above and the only valid solution is shown below:   Constraints: board.length == 9 board[i].length == 9 board[i][j] is a digit or '.'. It is guaranteed that the input board has only one solution.",
        "35": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula: countAndSay(1) = \"1\" countAndSay(n) is the run-length encoding of countAndSay(n - 1). Run-length encoding (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string \"3322251\" we replace \"33\" with \"23\", replace \"222\" with \"32\", replace \"5\" with \"15\" and replace \"1\" with \"11\". Thus the compressed string becomes \"23321511\". Given a positive integer n, return the nth element of the count-and-say sequence.   Example 1: Input: n = 4 Output: \"1211\" Explanation: countAndSay(1) = \"1\" countAndSay(2) = RLE of \"1\" = \"11\" countAndSay(3) = RLE of \"11\" = \"21\" countAndSay(4) = RLE of \"21\" = \"1211\" Example 2: Input: n = 1 Output: \"1\" Explanation: This is the base case.   Constraints: 1 <= n <= 30   Follow up: Could you solve it iteratively?",
        "36": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order. The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different. The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.   Example 1: Input: candidates = [2,3,6,7], target = 7 Output: [[2,2,3],[7]] Explanation: 2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times. 7 is a candidate, and 7 = 7. These are the only two combinations. Example 2: Input: candidates = [2,3,5], target = 8 Output: [[2,2,2,2],[2,3,3],[3,5]] Example 3: Input: candidates = [2], target = 1 Output: []   Constraints: 1 <= candidates.length <= 30 2 <= candidates[i] <= 40 All elements of candidates are distinct. 1 <= target <= 40",
        "37": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. Each number in candidates may only be used once in the combination. Note: The solution set must not contain duplicate combinations.   Example 1: Input: candidates = [10,1,2,7,6,1,5], target = 8 Output:  [ [1,1,6], [1,2,5], [1,7], [2,6] ] Example 2: Input: candidates = [2,5,2,1,2], target = 5 Output:  [ [1,2,2], [5] ]   Constraints: 1 <= candidates.length <= 100 1 <= candidates[i] <= 50 1 <= target <= 30",
        "38": "Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums. You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.   Example 1: Input: nums = [1,2,0] Output: 3 Explanation: The numbers in the range [1,2] are all in the array. Example 2: Input: nums = [3,4,-1,1] Output: 2 Explanation: 1 is in the array but 2 is missing. Example 3: Input: nums = [7,8,9,11,12] Output: 1 Explanation: The smallest positive integer 1 is missing.   Constraints: 1 <= nums.length <= 105 -231 <= nums[i] <= 231 - 1",
        "39": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.   Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Example 2: Input: height = [4,2,0,3,2,5] Output: 9   Constraints: n == height.length 1 <= n <= 2 * 104 0 <= height[i] <= 105",
        "40": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string. Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.   Example 1: Input: num1 = \"2\", num2 = \"3\" Output: \"6\" Example 2: Input: num1 = \"123\", num2 = \"456\" Output: \"56088\"   Constraints: 1 <= num1.length, num2.length <= 200 num1 and num2 consist of digits only. Both num1 and num2 do not contain any leading zero, except the number 0 itself.",
        "41": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where: '?' Matches any single character. '*' Matches any sequence of characters (including the empty sequence). The matching should cover the entire input string (not partial).   Example 1: Input: s = \"aa\", p = \"a\" Output: false Explanation: \"a\" does not match the entire string \"aa\". Example 2: Input: s = \"aa\", p = \"*\" Output: true Explanation: '*' matches any sequence. Example 3: Input: s = \"cb\", p = \"?a\" Output: false Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.   Constraints: 0 <= s.length, p.length <= 2000 s contains only lowercase English letters. p contains only lowercase English letters, '?' or '*'.",
        "42": "You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0]. Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where: 0 <= j <= nums[i] and i + j < n Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].   Example 1: Input: nums = [2,3,1,1,4] Output: 2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2: Input: nums = [2,3,0,1,4] Output: 2   Constraints: 1 <= nums.length <= 104 0 <= nums[i] <= 1000 It's guaranteed that you can reach nums[n - 1].",
        "43": "Given an array nums of distinct integers, return all the possible permutations . You can return the answer in any order.   Example 1: Input: nums = [1,2,3] Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] Example 2: Input: nums = [0,1] Output: [[0,1],[1,0]] Example 3: Input: nums = [1] Output: [[1]]   Constraints: 1 <= nums.length <= 6 -10 <= nums[i] <= 10 All the integers of nums are unique.",
        "44": "Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.   Example 1: Input: nums = [1,1,2] Output: [[1,1,2],  [1,2,1],  [2,1,1]] Example 2: Input: nums = [1,2,3] Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]   Constraints: 1 <= nums.length <= 8 -10 <= nums[i] <= 10",
        "45": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.   Example 1: Input: matrix = [[1,2,3],[4,5,6],[7,8,9]] Output: [[7,4,1],[8,5,2],[9,6,3]] Example 2: Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]] Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]   Constraints: n == matrix.length == matrix[i].length 1 <= n <= 20 -1000 <= matrix[i][j] <= 1000",
        "46": "Given an array of strings strs, group the anagrams together. You can return the answer in any order.   Example 1: Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"] Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]] Explanation: There is no string in strs that can be rearranged to form \"bat\". The strings \"nat\" and \"tan\" are anagrams as they can be rearranged to form each other. The strings \"ate\", \"eat\", and \"tea\" are anagrams as they can be rearranged to form each other. Example 2: Input: strs = [\"\"] Output: [[\"\"]] Example 3: Input: strs = [\"a\"] Output: [[\"a\"]]   Constraints: 1 <= strs.length <= 104 0 <= strs[i].length <= 100 strs[i] consists of lowercase English letters.",
        "47": "Implement pow(x, n), which calculates x raised to the power n (i.e., xn).   Example 1: Input: x = 2.00000, n = 10 Output: 1024.00000 Example 2: Input: x = 2.10000, n = 3 Output: 9.26100 Example 3: Input: x = 2.00000, n = -2 Output: 0.25000 Explanation: 2-2 = 1/22 = 1/4 = 0.25   Constraints: -100.0 < x < 100.0 -231 <= n <= 231-1 n is an integer. Either x is not zero or n > 0. -104 <= xn <= 104",
        "48": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order. Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.   Example 1: Input: n = 4 Output: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]] Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above Example 2: Input: n = 1 Output: [[\"Q\"]]   Constraints: 1 <= n <= 9",
        "49": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. Given an integer n, return the number of distinct solutions to the n-queens puzzle.   Example 1: Input: n = 4 Output: 2 Explanation: There are two distinct solutions to the 4-queens puzzle as shown. Example 2: Input: n = 1 Output: 1   Constraints: 1 <= n <= 9",
        "50": "Given an integer array nums, find the subarray with the largest sum, and return its sum.   Example 1: Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The subarray [4,-1,2,1] has the largest sum 6. Example 2: Input: nums = [1] Output: 1 Explanation: The subarray [1] has the largest sum 1. Example 3: Input: nums = [5,4,-1,7,8] Output: 23 Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.   Constraints: 1 <= nums.length <= 105 -104 <= nums[i] <= 104   Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.",
        "51": "Given an m x n matrix, return all elements of the matrix in spiral order.   Example 1: Input: matrix = [[1,2,3],[4,5,6],[7,8,9]] Output: [1,2,3,6,9,8,7,4,5] Example 2: Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]] Output: [1,2,3,4,8,12,11,10,9,5,6,7]   Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 10 -100 <= matrix[i][j] <= 100",
        "52": "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position. Return true if you can reach the last index, or false otherwise.   Example 1: Input: nums = [2,3,1,1,4] Output: true Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2: Input: nums = [3,2,1,0,4] Output: false Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.   Constraints: 1 <= nums.length <= 104 0 <= nums[i] <= 105",
        "53": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.   Example 1: Input: intervals = [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6]. Example 2: Input: intervals = [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] are considered overlapping.   Constraints: 1 <= intervals.length <= 104 intervals[i].length == 2 0 <= starti <= endi <= 104",
        "54": "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval. Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary). Return intervals after the insertion. Note that you don't need to modify intervals in-place. You can make a new array and return it.   Example 1: Input: intervals = [[1,3],[6,9]], newInterval = [2,5] Output: [[1,5],[6,9]] Example 2: Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] Output: [[1,2],[3,10],[12,16]] Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].   Constraints: 0 <= intervals.length <= 104 intervals[i].length == 2 0 <= starti <= endi <= 105 intervals is sorted by starti in ascending order. newInterval.length == 2 0 <= start <= end <= 105",
        "55": "Given a string s consisting of words and spaces, return the length of the last word in the string. A word is a maximal substring consisting of non-space characters only.   Example 1: Input: s = \"Hello World\" Output: 5 Explanation: The last word is \"World\" with length 5. Example 2: Input: s = \"   fly me   to   the moon  \" Output: 4 Explanation: The last word is \"moon\" with length 4. Example 3: Input: s = \"luffy is still joyboy\" Output: 6 Explanation: The last word is \"joyboy\" with length 6.   Constraints: 1 <= s.length <= 104 s consists of only English letters and spaces ' '. There will be at least one word in s.",
        "56": "The set [1, 2, 3, ..., n] contains a total of n! unique permutations. By listing and labeling all of the permutations in order, we get the following sequence for n = 3: \"123\" \"132\" \"213\" \"231\" \"312\" \"321\" Given n and k, return the kth permutation sequence.   Example 1: Input: n = 3, k = 3 Output: \"213\" Example 2: Input: n = 4, k = 9 Output: \"2314\" Example 3: Input: n = 3, k = 1 Output: \"123\"   Constraints: 1 <= n <= 9 1 <= k <= n!",
        "57": "Given the head of a linked list, rotate the list to the right by k places.   Example 1: Input: head = [1,2,3,4,5], k = 2 Output: [4,5,1,2,3] Example 2: Input: head = [0,1,2], k = 4 Output: [2,0,1]   Constraints: The number of nodes in the list is in the range [0, 500]. -100 <= Node.val <= 100 0 <= k <= 2 * 109",
        "58": "There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time. Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner. The test cases are generated so that the answer will be less than or equal to 2 * 109.   Example 1: Input: m = 3, n = 7 Output: 28 Example 2: Input: m = 3, n = 2 Output: 3 Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. Right -> Down -> Down 2. Down -> Down -> Right 3. Down -> Right -> Down   Constraints: 1 <= m, n <= 100",
        "59": "You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time. An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle. Return the number of possible unique paths that the robot can take to reach the bottom-right corner. The testcases are generated so that the answer will be less than or equal to 2 * 109.   Example 1: Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]] Output: 2 Explanation: There is one obstacle in the middle of the 3x3 grid above. There are two ways to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input: obstacleGrid = [[0,1],[0,0]] Output: 1   Constraints: m == obstacleGrid.length n == obstacleGrid[i].length 1 <= m, n <= 100 obstacleGrid[i][j] is 0 or 1.",
        "60": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path. Note: You can only move either down or right at any point in time.   Example 1: Input: grid = [[1,3,1],[1,5,1],[4,2,1]] Output: 7 Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum. Example 2: Input: grid = [[1,2,3],[4,5,6]] Output: 12   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 200 0 <= grid[i][j] <= 200",
        "61": "Given a string s, return whether s is a valid number.  For example, all the following are valid numbers: \"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\", while the following are not valid numbers: \"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\". Formally, a valid number is defined using one of the following definitions: An integer number followed by an optional exponent. A decimal number followed by an optional exponent. An integer number is defined with an optional sign '-' or '+' followed by digits. A decimal number is defined with an optional sign '-' or '+' followed by one of the following definitions: Digits followed by a dot '.'. Digits followed by a dot '.' followed by digits. A dot '.' followed by digits. An exponent is defined with an exponent notation 'e' or 'E' followed by an integer number. The digits are defined as one or more digits.   Example 1: Input: s = \"0\" Output: true Example 2: Input: s = \"e\" Output: false Example 3: Input: s = \".\" Output: false   Constraints: 1 <= s.length <= 20 s consists of only English letters (both uppercase and lowercase), digits (0-9), plus '+', minus '-', or dot '.'.",
        "62": "Given two binary strings a and b, return their sum as a binary string.   Example 1: Input: a = \"11\", b = \"1\" Output: \"100\" Example 2: Input: a = \"1010\", b = \"1011\" Output: \"10101\"   Constraints: 1 <= a.length, b.length <= 104 a and b consist only of '0' or '1' characters. Each string does not contain leading zeros except for the zero itself.",
        "63": "Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified. You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters. Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right. For the last line of text, it should be left-justified, and no extra space is inserted between words. Note: A word is defined as a character sequence consisting of non-space characters only. Each word's length is guaranteed to be greater than 0 and not exceed maxWidth. The input array words contains at least one word.   Example 1: Input: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16 Output: [    \"This    is    an\",    \"example  of text\",    \"justification.  \" ] Example 2: Input: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16 Output: [   \"What   must   be\",   \"acknowledgment  \",   \"shall be        \" ] Explanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified. Note that the second line is also left-justified because it contains only one word. Example 3: Input: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20 Output: [   \"Science  is  what we\",   \"understand      well\",   \"enough to explain to\",   \"a  computer.  Art is\",   \"everything  else  we\",   \"do                  \" ]   Constraints: 1 <= words.length <= 300 1 <= words[i].length <= 20 words[i] consists of only English letters and symbols. 1 <= maxWidth <= 100 words[i].length <= maxWidth",
        "64": "Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well. You must not use any built-in exponent function or operator. For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.   Example 1: Input: x = 4 Output: 2 Explanation: The square root of 4 is 2, so we return 2. Example 2: Input: x = 8 Output: 2 Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.   Constraints: 0 <= x <= 231 - 1",
        "65": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?   Example 1: Input: n = 2 Output: 2 Explanation: There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps Example 2: Input: n = 3 Output: 3 Explanation: There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step   Constraints: 1 <= n <= 45",
        "66": "You are given an absolute path for a Unix-style file system, which always begins with a slash '/'. Your task is to transform this absolute path into its simplified canonical path. The rules of a Unix-style file system are as follows: A single period '.' represents the current directory. A double period '..' represents the previous/parent directory. Multiple consecutive slashes such as '//' and '///' are treated as a single slash '/'. Any sequence of periods that does not match the rules above should be treated as a valid directory or file name. For example, '...' and '....' are valid directory or file names. The simplified canonical path should follow these rules: The path must start with a single slash '/'. Directories within the path must be separated by exactly one slash '/'. The path must not end with a slash '/', unless it is the root directory. The path must not have any single or double periods ('.' and '..') used to denote current or parent directories. Return the simplified canonical path.   Example 1: Input: path = \"/home/\" Output: \"/home\" Explanation: The trailing slash should be removed. Example 2: Input: path = \"/home//foo/\" Output: \"/home/foo\" Explanation: Multiple consecutive slashes are replaced by a single one. Example 3: Input: path = \"/home/user/Documents/../Pictures\" Output: \"/home/user/Pictures\" Explanation: A double period \"..\" refers to the directory up a level (the parent directory). Example 4: Input: path = \"/../\" Output: \"/\" Explanation: Going one level up from the root directory is not possible. Example 5: Input: path = \"/.../a/../b/c/../d/./\" Output: \"/.../b/d\" Explanation: \"...\" is a valid name for a directory in this problem.   Constraints: 1 <= path.length <= 3000 path consists of English letters, digits, period '.', slash '/' or '_'. path is a valid absolute Unix path.",
        "67": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. You have the following three operations permitted on a word: Insert a character Delete a character Replace a character   Example 1: Input: word1 = \"horse\", word2 = \"ros\" Output: 3 Explanation:  horse -> rorse (replace 'h' with 'r') rorse -> rose (remove 'r') rose -> ros (remove 'e') Example 2: Input: word1 = \"intention\", word2 = \"execution\" Output: 5 Explanation:  intention -> inention (remove 't') inention -> enention (replace 'i' with 'e') enention -> exention (replace 'n' with 'x') exention -> exection (replace 'n' with 'c') exection -> execution (insert 'u')   Constraints: 0 <= word1.length, word2.length <= 500 word1 and word2 consist of lowercase English letters.",
        "68": "You are given an m x n integer matrix matrix with the following two properties: Each row is sorted in non-decreasing order. The first integer of each row is greater than the last integer of the previous row. Given an integer target, return true if target is in matrix or false otherwise. You must write a solution in O(log(m * n)) time complexity.   Example 1: Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3 Output: true Example 2: Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13 Output: false   Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 100 -104 <= matrix[i][j], target <= 104",
        "69": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively. You must solve this problem without using the library's sort function.   Example 1: Input: nums = [2,0,2,1,1,0] Output: [0,0,1,1,2,2] Example 2: Input: nums = [2,0,1] Output: [0,1,2]   Constraints: n == nums.length 1 <= n <= 300 nums[i] is either 0, 1, or 2.   Follow up: Could you come up with a one-pass algorithm using only constant extra space?",
        "70": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\". The testcases will be generated such that the answer is unique.   Example 1: Input: s = \"ADOBECODEBANC\", t = \"ABC\" Output: \"BANC\" Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t. Example 2: Input: s = \"a\", t = \"a\" Output: \"a\" Explanation: The entire string s is the minimum window. Example 3: Input: s = \"a\", t = \"aa\" Output: \"\" Explanation: Both 'a's from t must be included in the window. Since the largest window of s only has one 'a', return empty string.   Constraints: m == s.length n == t.length 1 <= m, n <= 105 s and t consist of uppercase and lowercase English letters.   Follow up: Could you find an algorithm that runs in O(m + n) time?",
        "71": "Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n]. You may return the answer in any order.   Example 1: Input: n = 4, k = 2 Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]] Explanation: There are 4 choose 2 = 6 total combinations. Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination. Example 2: Input: n = 1, k = 1 Output: [[1]] Explanation: There is 1 choose 1 = 1 total combination.   Constraints: 1 <= n <= 20 1 <= k <= n",
        "72": "Given an integer array nums of unique elements, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.   Example 1: Input: nums = [1,2,3] Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]] Example 2: Input: nums = [0] Output: [[],[0]]   Constraints: 1 <= nums.length <= 10 -10 <= nums[i] <= 10 All the numbers of nums are unique.",
        "73": "Given an m x n grid of characters board and a string word, return true if word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.   Example 1: Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\" Output: true Example 2: Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\" Output: true Example 3: Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\" Output: false   Constraints: m == board.length n = board[i].length 1 <= m, n <= 6 1 <= word.length <= 15 board and word consists of only lowercase and uppercase English letters.   Follow up: Could you use search pruning to make your solution faster with a larger board?",
        "74": "Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same. Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements. Return k after placing the final result in the first k slots of nums. Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory. Custom Judge: The judge will test your solution with the following code: int[] nums = [...]; // Input array int[] expectedNums = [...]; // The expected answer with correct length  int k = removeDuplicates(nums); // Calls your implementation  assert k == expectedNums.length; for (int i = 0; i < k; i++) {     assert nums[i] == expectedNums[i]; } If all assertions pass, then your solution will be accepted.   Example 1: Input: nums = [1,1,1,2,2,3] Output: 5, nums = [1,1,2,2,3,_] Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). Example 2: Input: nums = [0,0,1,1,1,1,2,3,3] Output: 7, nums = [0,0,1,1,2,3,3,_,_] Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively. It does not matter what you leave beyond the returned k (hence they are underscores).   Constraints: 1 <= nums.length <= 3 * 104 -104 <= nums[i] <= 104 nums is sorted in non-decreasing order.",
        "75": "There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values). Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4]. Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums. You must decrease the overall operation steps as much as possible.   Example 1: Input: nums = [2,5,6,0,0,1,2], target = 0 Output: true Example 2: Input: nums = [2,5,6,0,0,1,2], target = 3 Output: false   Constraints: 1 <= nums.length <= 5000 -104 <= nums[i] <= 104 nums is guaranteed to be rotated at some pivot. -104 <= target <= 104   Follow up: This problem is similar to Search in Rotated Sorted Array, but nums may contain duplicates. Would this affect the runtime complexity? How and why?",
        "76": "Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.   Example 1: Input: head = [1,2,3,3,4,4,5] Output: [1,2,5] Example 2: Input: head = [1,1,1,2,3] Output: [2,3]   Constraints: The number of nodes in the list is in the range [0, 300]. -100 <= Node.val <= 100 The list is guaranteed to be sorted in ascending order.",
        "77": "Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.   Example 1: Input: head = [1,1,2] Output: [1,2] Example 2: Input: head = [1,1,2,3,3] Output: [1,2,3]   Constraints: The number of nodes in the list is in the range [0, 300]. -100 <= Node.val <= 100 The list is guaranteed to be sorted in ascending order.",
        "78": "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.   Example 1: Input: heights = [2,1,5,6,2,3] Output: 10 Explanation: The above is a histogram where width of each bar is 1. The largest rectangle is shown in the red area, which has an area = 10 units. Example 2: Input: heights = [2,4] Output: 4   Constraints: 1 <= heights.length <= 105 0 <= heights[i] <= 104",
        "79": "",
        "80": "Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x. You should preserve the original relative order of the nodes in each of the two partitions.   Example 1: Input: head = [1,4,3,2,5,2], x = 3 Output: [1,2,2,4,3,5] Example 2: Input: head = [2,1], x = 2 Output: [1,2]   Constraints: The number of nodes in the list is in the range [0, 200]. -100 <= Node.val <= 100 -200 <= x <= 200",
        "81": "We can scramble a string s to get a string t using the following algorithm: If the length of the string is 1, stop. If the length of the string is > 1, do the following: Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y. Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x. Apply step 1 recursively on each of the two substrings x and y. Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.   Example 1: Input: s1 = \"great\", s2 = \"rgeat\" Output: true Explanation: One possible scenario applied on s1 is: \"great\" --> \"gr/eat\" // divide at random index. \"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order. \"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them. \"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order. \"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\". \"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order. The algorithm stops now, and the result string is \"rgeat\" which is s2. As one possible scenario led s1 to be scrambled to s2, we return true. Example 2: Input: s1 = \"abcde\", s2 = \"caebd\" Output: false Example 3: Input: s1 = \"a\", s2 = \"a\" Output: true   Constraints: s1.length == s2.length 1 <= s1.length <= 30 s1 and s2 consist of lowercase English letters.",
        "82": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order. The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.   Example 1: Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Explanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1. Example 2: Input: nums1 = [1], m = 1, nums2 = [], n = 0 Output: [1] Explanation: The arrays we are merging are [1] and []. The result of the merge is [1]. Example 3: Input: nums1 = [0], m = 0, nums2 = [1], n = 1 Output: [1] Explanation: The arrays we are merging are [] and [1]. The result of the merge is [1]. Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.   Constraints: nums1.length == m + n nums2.length == n 0 <= m, n <= 200 1 <= m + n <= 200 -109 <= nums1[i], nums2[j] <= 109   Follow up: Can you come up with an algorithm that runs in O(m + n) time?",
        "83": "An n-bit gray code sequence is a sequence of 2n integers where: Every integer is in the inclusive range [0, 2n - 1], The first integer is 0, An integer appears no more than once in the sequence, The binary representation of every pair of adjacent integers differs by exactly one bit, and The binary representation of the first and last integers differs by exactly one bit. Given an integer n, return any valid n-bit gray code sequence.   Example 1: Input: n = 2 Output: [0,1,3,2] Explanation: The binary representation of [0,1,3,2] is [00,01,11,10]. - 00 and 01 differ by one bit - 01 and 11 differ by one bit - 11 and 10 differ by one bit - 10 and 00 differ by one bit [0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01]. - 00 and 10 differ by one bit - 10 and 11 differ by one bit - 11 and 01 differ by one bit - 01 and 00 differ by one bit Example 2: Input: n = 1 Output: [0,1]   Constraints: 1 <= n <= 16",
        "84": "Given an integer array nums that may contain duplicates, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.   Example 1: Input: nums = [1,2,2] Output: [[],[1],[1,2],[1,2,2],[2],[2,2]] Example 2: Input: nums = [0] Output: [[],[0]]   Constraints: 1 <= nums.length <= 10 -10 <= nums[i] <= 10",
        "85": "You have intercepted a secret message encoded as a string of numbers. The message is decoded via the following mapping: \"1\" -> 'A' \"2\" -> 'B' ... \"25\" -> 'Y' \"26\" -> 'Z' However, while decoding the message, you realize that there are many different ways you can decode the message because some codes are contained in other codes (\"2\" and \"5\" vs \"25\"). For example, \"11106\" can be decoded into: \"AAJF\" with the grouping (1, 1, 10, 6) \"KJF\" with the grouping (11, 10, 6) The grouping (1, 11, 06) is invalid because \"06\" is not a valid code (only \"6\" is valid). Note: there may be strings that are impossible to decode.  Given a string s containing only digits, return the number of ways to decode it. If the entire string cannot be decoded in any valid way, return 0. The test cases are generated so that the answer fits in a 32-bit integer.   Example 1: Input: s = \"12\" Output: 2 Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12). Example 2: Input: s = \"226\" Output: 3 Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6). Example 3: Input: s = \"06\" Output: 0 Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\"). In this case, the string is not a valid encoding, so return 0.   Constraints: 1 <= s.length <= 100 s contains only digits and may contain leading zero(s).",
        "86": "Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.   Example 1: Input: head = [1,2,3,4,5], left = 2, right = 4 Output: [1,4,3,2,5] Example 2: Input: head = [5], left = 1, right = 1 Output: [5]   Constraints: The number of nodes in the list is n. 1 <= n <= 500 -500 <= Node.val <= 500 1 <= left <= right <= n   Follow up: Could you do it in one pass?",
        "87": "Given the root of a binary tree, return the inorder traversal of its nodes' values.   Example 1: Input: root = [1,null,2,3] Output: [1,3,2] Explanation: Example 2: Input: root = [1,2,3,4,5,null,8,null,null,6,7,9] Output: [4,2,6,5,7,1,3,9,8] Explanation: Example 3: Input: root = [] Output: [] Example 4: Input: root = [1] Output: [1]   Constraints: The number of nodes in the tree is in the range [0, 100]. -100 <= Node.val <= 100   Follow up: Recursive solution is trivial, could you do it iteratively?",
        "88": "Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.   Example 1: Input: n = 3 Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]] Example 2: Input: n = 1 Output: [[1]]   Constraints: 1 <= n <= 8",
        "89": "Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.   Example 1: Input: n = 3 Output: 5 Example 2: Input: n = 1 Output: 1   Constraints: 1 <= n <= 19",
        "90": "Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2. An interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that: s = s1 + s2 + ... + sn t = t1 + t2 + ... + tm |n - m| <= 1 The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Note: a + b is the concatenation of strings a and b.   Example 1: Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\" Output: true Explanation: One way to obtain s3 is: Split s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\". Interleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\". Since s3 can be obtained by interleaving s1 and s2, we return true. Example 2: Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\" Output: false Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3. Example 3: Input: s1 = \"\", s2 = \"\", s3 = \"\" Output: true   Constraints: 0 <= s1.length, s2.length <= 100 0 <= s3.length <= 200 s1, s2, and s3 consist of lowercase English letters.   Follow up: Could you solve it using only O(s2.length) additional memory space?",
        "91": "Given the root of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees.   Example 1: Input: root = [2,1,3] Output: true Example 2: Input: root = [5,1,4,null,null,3,6] Output: false Explanation: The root node's value is 5 but its right child's value is 4.   Constraints: The number of nodes in the tree is in the range [1, 104]. -231 <= Node.val <= 231 - 1",
        "92": "You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.   Example 1: Input: root = [1,3,null,null,2] Output: [3,1,null,null,2] Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid. Example 2: Input: root = [3,1,4,null,null,2] Output: [2,1,4,null,null,3] Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.   Constraints: The number of nodes in the tree is in the range [2, 1000]. -231 <= Node.val <= 231 - 1   Follow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?",
        "93": "Given the roots of two binary trees p and q, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.   Example 1: Input: p = [1,2,3], q = [1,2,3] Output: true Example 2: Input: p = [1,2], q = [1,null,2] Output: false Example 3: Input: p = [1,2,1], q = [1,1,2] Output: false   Constraints: The number of nodes in both trees is in the range [0, 100]. -104 <= Node.val <= 104",
        "94": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).   Example 1: Input: root = [3,9,20,null,null,15,7] Output: [[3],[9,20],[15,7]] Example 2: Input: root = [1] Output: [[1]] Example 3: Input: root = [] Output: []   Constraints: The number of nodes in the tree is in the range [0, 2000]. -1000 <= Node.val <= 1000",
        "95": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).   Example 1: Input: root = [3,9,20,null,null,15,7] Output: [[3],[20,9],[15,7]] Example 2: Input: root = [1] Output: [[1]] Example 3: Input: root = [] Output: []   Constraints: The number of nodes in the tree is in the range [0, 2000]. -100 <= Node.val <= 100",
        "96": "Given the root of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.   Example 1: Input: root = [3,9,20,null,null,15,7] Output: 3 Example 2: Input: root = [1,null,2] Output: 2   Constraints: The number of nodes in the tree is in the range [0, 104]. -100 <= Node.val <= 100",
        "97": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.   Example 1: Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7] Output: [3,9,20,null,null,15,7] Example 2: Input: preorder = [-1], inorder = [-1] Output: [-1]   Constraints: 1 <= preorder.length <= 3000 inorder.length == preorder.length -3000 <= preorder[i], inorder[i] <= 3000 preorder and inorder consist of unique values. Each value of inorder also appears in preorder. preorder is guaranteed to be the preorder traversal of the tree. inorder is guaranteed to be the inorder traversal of the tree.",
        "98": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.   Example 1: Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3] Output: [3,9,20,null,null,15,7] Example 2: Input: inorder = [-1], postorder = [-1] Output: [-1]   Constraints: 1 <= inorder.length <= 3000 postorder.length == inorder.length -3000 <= inorder[i], postorder[i] <= 3000 inorder and postorder consist of unique values. Each value of postorder also appears in inorder. inorder is guaranteed to be the inorder traversal of the tree. postorder is guaranteed to be the postorder traversal of the tree.",
        "99": "Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.   Example 1: Input: nums = [-10,-3,0,5,9] Output: [0,-3,9,-10,null,5] Explanation: [0,-10,5,null,-3,null,9] is also accepted: Example 2: Input: nums = [1,3] Output: [3,1] Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.   Constraints: 1 <= nums.length <= 104 -104 <= nums[i] <= 104 nums is sorted in a strictly increasing order.",
        "100": "Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.   Example 1: Input: head = [-10,-3,0,5,9] Output: [0,-3,9,-10,null,5] Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST. Example 2: Input: head = [] Output: []   Constraints: The number of nodes in head is in the range [0, 2 * 104]. -105 <= Node.val <= 105",
        "101": "Given a binary tree, determine if it is height-balanced .   Example 1: Input: root = [3,9,20,null,null,15,7] Output: true Example 2: Input: root = [1,2,2,3,3,null,null,4,4] Output: false Example 3: Input: root = [] Output: true   Constraints: The number of nodes in the tree is in the range [0, 5000]. -104 <= Node.val <= 104",
        "102": "Given a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node. Note: A leaf is a node with no children.   Example 1: Input: root = [3,9,20,null,null,15,7] Output: 2 Example 2: Input: root = [2,null,3,null,4,null,5,null,6] Output: 5   Constraints: The number of nodes in the tree is in the range [0, 105]. -1000 <= Node.val <= 1000",
        "103": "Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum. A leaf is a node with no children.   Example 1: Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22 Output: true Explanation: The root-to-leaf path with the target sum is shown. Example 2: Input: root = [1,2,3], targetSum = 5 Output: false Explanation: There two root-to-leaf paths in the tree: (1 --> 2): The sum is 3. (1 --> 3): The sum is 4. There is no root-to-leaf path with sum = 5. Example 3: Input: root = [], targetSum = 0 Output: false Explanation: Since the tree is empty, there are no root-to-leaf paths.   Constraints: The number of nodes in the tree is in the range [0, 5000]. -1000 <= Node.val <= 1000 -1000 <= targetSum <= 1000",
        "104": "Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references. A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.   Example 1: Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22 Output: [[5,4,11,2],[5,8,4,5]] Explanation: There are two paths whose sum equals targetSum: 5 + 4 + 11 + 2 = 22 5 + 8 + 4 + 5 = 22 Example 2: Input: root = [1,2,3], targetSum = 5 Output: [] Example 3: Input: root = [1,2], targetSum = 0 Output: []   Constraints: The number of nodes in the tree is in the range [0, 5000]. -1000 <= Node.val <= 1000 -1000 <= targetSum <= 1000",
        "105": "Given the root of a binary tree, flatten the tree into a \"linked list\": The \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null. The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.   Example 1: Input: root = [1,2,5,3,4,null,6] Output: [1,null,2,null,3,null,4,null,5,null,6] Example 2: Input: root = [] Output: [] Example 3: Input: root = [0] Output: [0]   Constraints: The number of nodes in the tree is in the range [0, 2000]. -100 <= Node.val <= 100   Follow up: Can you flatten the tree in-place (with O(1) extra space)?",
        "106": "Given two strings s and t, return the number of distinct subsequences of s which equals t. The test cases are generated so that the answer fits on a 32-bit signed integer.   Example 1: Input: s = \"rabbbit\", t = \"rabbit\" Output: 3 Explanation: As shown below, there are 3 ways you can generate \"rabbit\" from s. rabbbit rabbbit rabbbit Example 2: Input: s = \"babgbag\", t = \"bag\" Output: 5 Explanation: As shown below, there are 5 ways you can generate \"bag\" from s. babgbag babgbag babgbag babgbag babgbag   Constraints: 1 <= s.length, t.length <= 1000 s and t consist of English letters.",
        "107": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition: struct Node {   int val;   Node *left;   Node *right;   Node *next; } Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL. Initially, all next pointers are set to NULL.   Example 1: Input: root = [1,2,3,4,5,6,7] Output: [1,#,2,3,#,4,5,6,7,#] Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level. Example 2: Input: root = [] Output: []   Constraints: The number of nodes in the tree is in the range [0, 212 - 1]. -1000 <= Node.val <= 1000   Follow-up: You may only use constant extra space. The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.",
        "108": "Given a binary tree struct Node {   int val;   Node *left;   Node *right;   Node *next; } Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL. Initially, all next pointers are set to NULL.   Example 1: Input: root = [1,2,3,4,5,null,7] Output: [1,#,2,3,#,4,5,7,#] Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level. Example 2: Input: root = [] Output: []   Constraints: The number of nodes in the tree is in the range [0, 6000]. -100 <= Node.val <= 100   Follow-up: You may only use constant extra space. The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.",
        "109": "Given an integer numRows, return the first numRows of Pascal's triangle. In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:   Example 1: Input: numRows = 5 Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]] Example 2: Input: numRows = 1 Output: [[1]]   Constraints: 1 <= numRows <= 30",
        "110": "Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle. In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:   Example 1: Input: rowIndex = 3 Output: [1,3,3,1] Example 2: Input: rowIndex = 0 Output: [1] Example 3: Input: rowIndex = 1 Output: [1,1]   Constraints: 0 <= rowIndex <= 33   Follow up: Could you optimize your algorithm to use only O(rowIndex) extra space?",
        "111": "Given a triangle array, return the minimum path sum from top to bottom. For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.   Example 1: Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]] Output: 11 Explanation: The triangle looks like:    2   3 4  6 5 7 4 1 8 3 The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above). Example 2: Input: triangle = [[-10]] Output: -10   Constraints: 1 <= triangle.length <= 200 triangle[0].length == 1 triangle[i].length == triangle[i - 1].length + 1 -104 <= triangle[i][j] <= 104   Follow up: Could you do this using only O(n) extra space, where n is the total number of rows in the triangle?",
        "112": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.   Example 1: Input: prices = [7,1,5,3,6,4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell. Example 2: Input: prices = [7,6,4,3,1] Output: 0 Explanation: In this case, no transactions are done and the max profit = 0.   Constraints: 1 <= prices.length <= 105 0 <= prices[i] <= 104",
        "113": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day. On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day. Find and return the maximum profit you can achieve.   Example 1: Input: prices = [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7. Example 2: Input: prices = [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit is 4. Example 3: Input: prices = [7,6,4,3,1] Output: 0 Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.   Constraints: 1 <= prices.length <= 3 * 104 0 <= prices[i] <= 104",
        "114": "You are given an array prices where prices[i] is the price of a given stock on the ith day. Find the maximum profit you can achieve. You may complete at most two transactions. Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).   Example 1: Input: prices = [3,3,5,0,0,3,1,4] Output: 6 Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3. Example 2: Input: prices = [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again. Example 3: Input: prices = [7,6,4,3,1] Output: 0 Explanation: In this case, no transaction is done, i.e. max profit = 0.   Constraints: 1 <= prices.length <= 105 0 <= prices[i] <= 105",
        "115": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root. The path sum of a path is the sum of the node's values in the path. Given the root of a binary tree, return the maximum path sum of any non-empty path.   Example 1: Input: root = [1,2,3] Output: 6 Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6. Example 2: Input: root = [-10,9,20,null,null,15,7] Output: 42 Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.   Constraints: The number of nodes in the tree is in the range [1, 3 * 104]. -1000 <= Node.val <= 1000",
        "116": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers. Given a string s, return true if it is a palindrome, or false otherwise.   Example 1: Input: s = \"A man, a plan, a canal: Panama\" Output: true Explanation: \"amanaplanacanalpanama\" is a palindrome. Example 2: Input: s = \"race a car\" Output: false Explanation: \"raceacar\" is not a palindrome. Example 3: Input: s = \" \" Output: true Explanation: s is an empty string \"\" after removing non-alphanumeric characters. Since an empty string reads the same forward and backward, it is a palindrome.   Constraints: 1 <= s.length <= 2 * 105 s consists only of printable ASCII characters.",
        "117": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that: Every adjacent pair of words differs by a single letter. Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList. sk == endWord Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].   Example 1: Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"] Output: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]] Explanation: There are 2 shortest transformation sequences: \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\" \"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\" Example 2: Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"] Output: [] Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.   Constraints: 1 <= beginWord.length <= 5 endWord.length == beginWord.length 1 <= wordList.length <= 500 wordList[i].length == beginWord.length beginWord, endWord, and wordList[i] consist of lowercase English letters. beginWord != endWord All the words in wordList are unique. The sum of all shortest transformation sequences does not exceed 105.",
        "118": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that: Every adjacent pair of words differs by a single letter. Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList. sk == endWord Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.   Example 1: Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"] Output: 5 Explanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long. Example 2: Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"] Output: 0 Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.   Constraints: 1 <= beginWord.length <= 10 endWord.length == beginWord.length 1 <= wordList.length <= 5000 wordList[i].length == beginWord.length beginWord, endWord, and wordList[i] consist of lowercase English letters. beginWord != endWord All the words in wordList are unique.",
        "119": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence. You must write an algorithm that runs in O(n) time.   Example 1: Input: nums = [100,4,200,1,3,2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. Example 2: Input: nums = [0,3,7,2,5,8,4,6,0,1] Output: 9   Constraints: 0 <= nums.length <= 105 -109 <= nums[i] <= 109",
        "120": "You are given the root of a binary tree containing digits from 0 to 9 only. Each root-to-leaf path in the tree represents a number. For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123. Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer. A leaf node is a node with no children.   Example 1: Input: root = [1,2,3] Output: 25 Explanation: The root-to-leaf path 1->2 represents the number 12. The root-to-leaf path 1->3 represents the number 13. Therefore, sum = 12 + 13 = 25. Example 2: Input: root = [4,9,0,5,1] Output: 1026 Explanation: The root-to-leaf path 4->9->5 represents the number 495. The root-to-leaf path 4->9->1 represents the number 491. The root-to-leaf path 4->0 represents the number 40. Therefore, sum = 495 + 491 + 40 = 1026.   Constraints: The number of nodes in the tree is in the range [1, 1000]. 0 <= Node.val <= 9 The depth of the tree will not exceed 10.",
        "121": "You are given an m x n matrix board containing letters 'X' and 'O', capture regions that are surrounded: Connect: A cell is connected to adjacent cells horizontally or vertically. Region: To form a region connect every 'O' cell. Surround: The region is surrounded with 'X' cells if you can connect the region with 'X' cells and none of the region cells are on the edge of the board. A surrounded region is captured by replacing all 'O's with 'X's in the input matrix board.   Example 1: Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]] Output: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]] Explanation: In the above diagram, the bottom region is not captured because it is on the edge of the board and cannot be surrounded. Example 2: Input: board = [[\"X\"]] Output: [[\"X\"]]   Constraints: m == board.length n == board[i].length 1 <= m, n <= 200 board[i][j] is 'X' or 'O'.",
        "122": "Given a string s, partition s such that every substring of the partition is a palindrome . Return all possible palindrome partitioning of s.   Example 1: Input: s = \"aab\" Output: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]] Example 2: Input: s = \"a\" Output: [[\"a\"]]   Constraints: 1 <= s.length <= 16 s contains only lowercase English letters.",
        "123": "Given a reference of a node in a connected undirected graph. Return a deep copy (clone) of the graph. Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors. class Node {     public int val;     public List<Node> neighbors; }   Test case format: For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list. An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph. The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.   Example 1: Input: adjList = [[2,4],[1,3],[2,4],[1,3]] Output: [[2,4],[1,3],[2,4],[1,3]] Explanation: There are 4 nodes in the graph. 1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4). 2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3). 3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4). 4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3). Example 2: Input: adjList = [[]] Output: [[]] Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors. Example 3: Input: adjList = [] Output: [] Explanation: This an empty graph, it does not have any nodes.   Constraints: The number of nodes in the graph is in the range [0, 100]. 1 <= Node.val <= 100 Node.val is unique for each node. There are no repeated edges and no self-loops in the graph. The Graph is connected and all nodes can be visited starting from the given node.",
        "124": "There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i]. You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations. Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique.   Example 1: Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2] Output: 3 Explanation: Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 4. Your tank = 4 - 1 + 5 = 8 Travel to station 0. Your tank = 8 - 2 + 1 = 7 Travel to station 1. Your tank = 7 - 3 + 2 = 6 Travel to station 2. Your tank = 6 - 4 + 3 = 5 Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3. Therefore, return 3 as the starting index. Example 2: Input: gas = [2,3,4], cost = [3,4,3] Output: -1 Explanation: You can't start at station 0 or 1, as there is not enough gas to travel to the next station. Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 0. Your tank = 4 - 3 + 2 = 3 Travel to station 1. Your tank = 3 - 3 + 3 = 3 You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3. Therefore, you can't travel around the circuit once no matter where you start.   Constraints: n == gas.length == cost.length 1 <= n <= 105 0 <= gas[i], cost[i] <= 104",
        "125": "There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings. You are giving candies to these children subjected to the following requirements: Each child must have at least one candy. Children with a higher rating get more candies than their neighbors. Return the minimum number of candies you need to have to distribute the candies to the children.   Example 1: Input: ratings = [1,0,2] Output: 5 Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively. Example 2: Input: ratings = [1,2,2] Output: 4 Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively. The third child gets 1 candy because it satisfies the above two conditions.   Constraints: n == ratings.length 1 <= n <= 2 * 104 0 <= ratings[i] <= 2 * 104",
        "126": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.   Example 1: Input: nums = [2,2,1] Output: 1 Example 2: Input: nums = [4,1,2,1,2] Output: 4 Example 3: Input: nums = [1] Output: 1   Constraints: 1 <= nums.length <= 3 * 104 -3 * 104 <= nums[i] <= 3 * 104 Each element in the array appears twice except for one element which appears only once.",
        "127": "Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it. You must implement a solution with a linear runtime complexity and use only constant extra space.   Example 1: Input: nums = [2,2,3,2] Output: 3 Example 2: Input: nums = [0,1,0,1,0,1,99] Output: 99   Constraints: 1 <= nums.length <= 3 * 104 -231 <= nums[i] <= 231 - 1 Each element in nums appears exactly three times except for one element which appears once.",
        "128": "A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null. Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list. For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y. Return the head of the copied linked list. The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where: val: an integer representing Node.val random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node. Your code will only be given the head of the original linked list.   Example 1: Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]] Output: [[7,null],[13,0],[11,4],[10,2],[1,0]] Example 2: Input: head = [[1,1],[2,1]] Output: [[1,1],[2,1]] Example 3: Input: head = [[3,null],[3,0],[3,null]] Output: [[3,null],[3,0],[3,null]]   Constraints: 0 <= n <= 1000 -104 <= Node.val <= 104 Node.random is null or is pointing to some node in the linked list.",
        "129": "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation.   Example 1: Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"] Output: true Explanation: Return true because \"leetcode\" can be segmented as \"leet code\". Example 2: Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"] Output: true Explanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\". Note that you are allowed to reuse a dictionary word. Example 3: Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"] Output: false   Constraints: 1 <= s.length <= 300 1 <= wordDict.length <= 1000 1 <= wordDict[i].length <= 20 s and wordDict[i] consist of only lowercase English letters. All the strings of wordDict are unique.",
        "130": "Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order. Note that the same word in the dictionary may be reused multiple times in the segmentation.   Example 1: Input: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"] Output: [\"cats and dog\",\"cat sand dog\"] Example 2: Input: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"] Output: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"] Explanation: Note that you are allowed to reuse a dictionary word. Example 3: Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"] Output: []   Constraints: 1 <= s.length <= 20 1 <= wordDict.length <= 1000 1 <= wordDict[i].length <= 10 s and wordDict[i] consist of only lowercase English letters. All the strings of wordDict are unique. Input is generated in a way that the length of the answer doesn't exceed 105.",
        "131": "Given head, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter. Return true if there is a cycle in the linked list. Otherwise, return false.   Example 1: Input: head = [3,2,0,-4], pos = 1 Output: true Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed). Example 2: Input: head = [1,2], pos = 0 Output: true Explanation: There is a cycle in the linked list, where the tail connects to the 0th node. Example 3: Input: head = [1], pos = -1 Output: false Explanation: There is no cycle in the linked list.   Constraints: The number of the nodes in the list is in the range [0, 104]. -105 <= Node.val <= 105 pos is -1 or a valid index in the linked-list.   Follow up: Can you solve it using O(1) (i.e. constant) memory?",
        "132": "Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter. Do not modify the linked list.   Example 1: Input: head = [3,2,0,-4], pos = 1 Output: tail connects to node index 1 Explanation: There is a cycle in the linked list, where tail connects to the second node. Example 2: Input: head = [1,2], pos = 0 Output: tail connects to node index 0 Explanation: There is a cycle in the linked list, where tail connects to the first node. Example 3: Input: head = [1], pos = -1 Output: no cycle Explanation: There is no cycle in the linked list.   Constraints: The number of the nodes in the list is in the range [0, 104]. -105 <= Node.val <= 105 pos is -1 or a valid index in the linked-list.   Follow up: Can you solve it using O(1) (i.e. constant) memory?",
        "133": "You are given the head of a singly linked-list. The list can be represented as: L0 → L1 → … → Ln - 1 → Ln Reorder the list to be on the following form: L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → … You may not modify the values in the list's nodes. Only nodes themselves may be changed.   Example 1: Input: head = [1,2,3,4] Output: [1,4,2,3] Example 2: Input: head = [1,2,3,4,5] Output: [1,5,2,4,3]   Constraints: The number of nodes in the list is in the range [1, 5 * 104]. 1 <= Node.val <= 1000",
        "134": "Given the root of a binary tree, return the preorder traversal of its nodes' values.   Example 1: Input: root = [1,null,2,3] Output: [1,2,3] Explanation: Example 2: Input: root = [1,2,3,4,5,null,8,null,null,6,7,9] Output: [1,2,4,5,6,7,3,8,9] Explanation: Example 3: Input: root = [] Output: [] Example 4: Input: root = [1] Output: [1]   Constraints: The number of nodes in the tree is in the range [0, 100]. -100 <= Node.val <= 100   Follow up: Recursive solution is trivial, could you do it iteratively?",
        "135": "Given the root of a binary tree, return the postorder traversal of its nodes' values.   Example 1: Input: root = [1,null,2,3] Output: [3,2,1] Explanation: Example 2: Input: root = [1,2,3,4,5,null,8,null,null,6,7,9] Output: [4,6,7,5,2,9,8,3,1] Explanation: Example 3: Input: root = [] Output: [] Example 4: Input: root = [1] Output: [1]   Constraints: The number of the nodes in the tree is in the range [0, 100]. -100 <= Node.val <= 100   Follow up: Recursive solution is trivial, could you do it iteratively?",
        "136": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. Implement the LRUCache class: LRUCache(int capacity) Initialize the LRU cache with positive size capacity. int get(int key) Return the value of the key if the key exists, otherwise return -1. void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key. The functions get and put must each run in O(1) average time complexity.   Example 1: Input [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"] [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]] Output [null, null, null, 1, null, -1, null, -1, 3, 4]  Explanation LRUCache lRUCache = new LRUCache(2); lRUCache.put(1, 1); // cache is {1=1} lRUCache.put(2, 2); // cache is {1=1, 2=2} lRUCache.get(1);    // return 1 lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3} lRUCache.get(2);    // returns -1 (not found) lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3} lRUCache.get(1);    // return -1 (not found) lRUCache.get(3);    // return 3 lRUCache.get(4);    // return 4   Constraints: 1 <= capacity <= 3000 0 <= key <= 104 0 <= value <= 105 At most 2 * 105 calls will be made to get and put.",
        "137": "Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head. The steps of the insertion sort algorithm: Insertion sort iterates, consuming one input element each repetition and growing a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there. It repeats until no input elements remain. The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.   Example 1: Input: head = [4,2,1,3] Output: [1,2,3,4] Example 2: Input: head = [-1,5,3,4,0] Output: [-1,0,3,4,5]   Constraints: The number of nodes in the list is in the range [1, 5000]. -5000 <= Node.val <= 5000",
        "138": "Given the head of a linked list, return the list after sorting it in ascending order.   Example 1: Input: head = [4,2,1,3] Output: [1,2,3,4] Example 2: Input: head = [-1,5,3,4,0] Output: [-1,0,3,4,5] Example 3: Input: head = [] Output: []   Constraints: The number of nodes in the list is in the range [0, 5 * 104]. -105 <= Node.val <= 105   Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?",
        "139": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.   Example 1: Input: points = [[1,1],[2,2],[3,3]] Output: 3 Example 2: Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]] Output: 4   Constraints: 1 <= points.length <= 300 points[i].length == 2 -104 <= xi, yi <= 104 All the points are unique.",
        "140": "You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation. Evaluate the expression. Return an integer that represents the value of the expression. Note that: The valid operators are '+', '-', '*', and '/'. Each operand may be an integer or another expression. The division between two integers always truncates toward zero. There will not be any division by zero. The input represents a valid arithmetic expression in a reverse polish notation. The answer and all the intermediate calculations can be represented in a 32-bit integer.   Example 1: Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"] Output: 9 Explanation: ((2 + 1) * 3) = 9 Example 2: Input: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"] Output: 6 Explanation: (4 + (13 / 5)) = 6 Example 3: Input: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"] Output: 22 Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = ((10 * (6 / (12 * -11))) + 17) + 5 = ((10 * (6 / -132)) + 17) + 5 = ((10 * 0) + 17) + 5 = (0 + 17) + 5 = 17 + 5 = 22   Constraints: 1 <= tokens.length <= 104 tokens[i] is either an operator: \"+\", \"-\", \"*\", or \"/\", or an integer in the range [-200, 200].",
        "141": "Given an input string s, reverse the order of the words. A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space. Return a string of the words in reverse order concatenated by a single space. Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.   Example 1: Input: s = \"the sky is blue\" Output: \"blue is sky the\" Example 2: Input: s = \"  hello world  \" Output: \"world hello\" Explanation: Your reversed string should not contain leading or trailing spaces. Example 3: Input: s = \"a good   example\" Output: \"example good a\" Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.   Constraints: 1 <= s.length <= 104 s contains English letters (upper-case and lower-case), digits, and spaces ' '. There is at least one word in s.   Follow-up: If the string data type is mutable in your language, can you solve it in-place with O(1) extra space?",
        "142": "Given an integer array nums, find a subarray that has the largest product, and return the product. The test cases are generated so that the answer will fit in a 32-bit integer.   Example 1: Input: nums = [2,3,-2,4] Output: 6 Explanation: [2,3] has the largest product 6. Example 2: Input: nums = [-2,0,-1] Output: 0 Explanation: The result cannot be 2, because [-2,-1] is not a subarray.   Constraints: 1 <= nums.length <= 2 * 104 -10 <= nums[i] <= 10 The product of any subarray of nums is guaranteed to fit in a 32-bit integer.",
        "143": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become: [4,5,6,7,0,1,2] if it was rotated 4 times. [0,1,2,4,5,6,7] if it was rotated 7 times. Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]]. Given the sorted rotated array nums of unique elements, return the minimum element of this array. You must write an algorithm that runs in O(log n) time.   Example 1: Input: nums = [3,4,5,1,2] Output: 1 Explanation: The original array was [1,2,3,4,5] rotated 3 times. Example 2: Input: nums = [4,5,6,7,0,1,2] Output: 0 Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times. Example 3: Input: nums = [11,13,15,17] Output: 11 Explanation: The original array was [11,13,15,17] and it was rotated 4 times.    Constraints: n == nums.length 1 <= n <= 5000 -5000 <= nums[i] <= 5000 All the integers of nums are unique. nums is sorted and rotated between 1 and n times.",
        "144": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become: [4,5,6,7,0,1,4] if it was rotated 4 times. [0,1,4,4,5,6,7] if it was rotated 7 times. Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]]. Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array. You must decrease the overall operation steps as much as possible.   Example 1: Input: nums = [1,3,5] Output: 1 Example 2: Input: nums = [2,2,2,0,1] Output: 0   Constraints: n == nums.length 1 <= n <= 5000 -5000 <= nums[i] <= 5000 nums is sorted and rotated between 1 and n times.   Follow up: This problem is similar to Find Minimum in Rotated Sorted Array, but nums may contain duplicates. Would this affect the runtime complexity? How and why?  ",
        "145": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. Implement the MinStack class: MinStack() initializes the stack object. void push(int val) pushes the element val onto the stack. void pop() removes the element on the top of the stack. int top() gets the top element of the stack. int getMin() retrieves the minimum element in the stack. You must implement a solution with O(1) time complexity for each function.   Example 1: Input [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"] [[],[-2],[0],[-3],[],[],[],[]]  Output [null,null,null,null,-3,null,0,-2]  Explanation MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); // return -3 minStack.pop(); minStack.top();    // return 0 minStack.getMin(); // return -2   Constraints: -231 <= val <= 231 - 1 Methods pop, top and getMin operations will always be called on non-empty stacks. At most 3 * 104 calls will be made to push, pop, top, and getMin.",
        "146": "Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null. For example, the following two linked lists begin to intersect at node c1: The test cases are generated such that there are no cycles anywhere in the entire linked structure. Note that the linked lists must retain their original structure after the function returns. Custom Judge: The inputs to the judge are given as follows (your program is not given these inputs): intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node. listA - The first linked list. listB - The second linked list. skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node. skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node. The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.   Example 1: Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3 Output: Intersected at '8' Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B. - Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory. Example 2: Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1 Output: Intersected at '2' Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B. Example 3: Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2 Output: No intersection Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values. Explanation: The two lists do not intersect, so return null.   Constraints: The number of nodes of listA is in the m. The number of nodes of listB is in the n. 1 <= m, n <= 3 * 104 1 <= Node.val <= 105 0 <= skipA < m 0 <= skipB < n intersectVal is 0 if listA and listB do not intersect. intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.   Follow up: Could you write a solution that runs in O(m + n) time and use only O(1) memory?",
        "147": "A peak element is an element that is strictly greater than its neighbors. Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks. You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array. You must write an algorithm that runs in O(log n) time.   Example 1: Input: nums = [1,2,3,1] Output: 2 Explanation: 3 is a peak element and your function should return the index number 2. Example 2: Input: nums = [1,2,1,3,5,6,4] Output: 5 Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.   Constraints: 1 <= nums.length <= 1000 -231 <= nums[i] <= 231 - 1 nums[i] != nums[i + 1] for all valid i.",
        "148": "Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0. You must write an algorithm that runs in linear time and uses linear extra space.   Example 1: Input: nums = [3,6,9,1] Output: 3 Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3. Example 2: Input: nums = [10] Output: 0 Explanation: The array contains less than 2 elements, therefore return 0.   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109",
        "149": "Given two integers representing the numerator and denominator of a fraction, return the fraction in string format. If the fractional part is repeating, enclose the repeating part in parentheses. If multiple answers are possible, return any of them. It is guaranteed that the length of the answer string is less than 104 for all the given inputs.   Example 1: Input: numerator = 1, denominator = 2 Output: \"0.5\" Example 2: Input: numerator = 2, denominator = 1 Output: \"2\" Example 3: Input: numerator = 4, denominator = 333 Output: \"0.(012)\"   Constraints: -231 <= numerator, denominator <= 231 - 1 denominator != 0",
        "150": "Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length. Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2. The tests are generated such that there is exactly one solution. You may not use the same element twice. Your solution must use only constant extra space.   Example 1: Input: numbers = [2,7,11,15], target = 9 Output: [1,2] Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2]. Example 2: Input: numbers = [2,3,4], target = 6 Output: [1,3] Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3]. Example 3: Input: numbers = [-1,0], target = -1 Output: [1,2] Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].   Constraints: 2 <= numbers.length <= 3 * 104 -1000 <= numbers[i] <= 1000 numbers is sorted in non-decreasing order. -1000 <= target <= 1000 The tests are generated such that there is exactly one solution.",
        "151": "Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet. For example: A -> 1 B -> 2 C -> 3 ... Z -> 26 AA -> 27 AB -> 28  ...   Example 1: Input: columnNumber = 1 Output: \"A\" Example 2: Input: columnNumber = 28 Output: \"AB\" Example 3: Input: columnNumber = 701 Output: \"ZY\"   Constraints: 1 <= columnNumber <= 231 - 1",
        "152": "Given an array nums of size n, return the majority element. The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.   Example 1: Input: nums = [3,2,3] Output: 3 Example 2: Input: nums = [2,2,1,1,1,2,2] Output: 2   Constraints: n == nums.length 1 <= n <= 5 * 104 -109 <= nums[i] <= 109   Follow-up: Could you solve the problem in linear time and in O(1) space?",
        "153": "Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number. For example: A -> 1 B -> 2 C -> 3 ... Z -> 26 AA -> 27 AB -> 28  ...   Example 1: Input: columnTitle = \"A\" Output: 1 Example 2: Input: columnTitle = \"AB\" Output: 28 Example 3: Input: columnTitle = \"ZY\" Output: 701   Constraints: 1 <= columnTitle.length <= 7 columnTitle consists only of uppercase English letters. columnTitle is in the range [\"A\", \"FXSHRXW\"].",
        "154": "Given an integer n, return the number of trailing zeroes in n!. Note that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.   Example 1: Input: n = 3 Output: 0 Explanation: 3! = 6, no trailing zero. Example 2: Input: n = 5 Output: 1 Explanation: 5! = 120, one trailing zero. Example 3: Input: n = 0 Output: 0   Constraints: 0 <= n <= 104   Follow up: Could you write a solution that works in logarithmic time complexity?",
        "155": "The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess. The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately. Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers). To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step. Return the knight's minimum initial health so that he can rescue the princess. Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.   Example 1: Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]] Output: 7 Explanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN. Example 2: Input: dungeon = [[0]] Output: 1   Constraints: m == dungeon.length n == dungeon[i].length 1 <= m, n <= 200 -1000 <= dungeon[i][j] <= 1000",
        "156": "SQL Schema Pandas Schema",
        "157": "SQL Schema Pandas Schema",
        "158": "SQL Schema Pandas Schema",
        "159": "SQL Schema Pandas Schema",
        "160": "Given a list of non-negative integers nums, arrange them such that they form the largest number and return it. Since the result may be very large, so you need to return a string instead of an integer.   Example 1: Input: nums = [10,2] Output: \"210\" Example 2: Input: nums = [3,30,34,5,9] Output: \"9534330\"   Constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 109",
        "161": "SQL Schema Pandas Schema",
        "162": "SQL Schema Pandas Schema",
        "163": "SQL Schema Pandas Schema",
        "164": "SQL Schema Pandas Schema",
        "165": "SQL Schema Pandas Schema",
        "166": "SQL Schema Pandas Schema",
        "167": "The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'. For example, \"ACGAATTCCG\" is a DNA sequence. When studying DNA, it is useful to identify repeated sequences within the DNA. Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.   Example 1: Input: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\" Output: [\"AAAAACCCCC\",\"CCCCCAAAAA\"] Example 2: Input: s = \"AAAAAAAAAAAAA\" Output: [\"AAAAAAAAAA\"]   Constraints: 1 <= s.length <= 105 s[i] is either 'A', 'C', 'G', or 'T'.",
        "168": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k. Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times. Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).   Example 1: Input: k = 2, prices = [2,4,1] Output: 2 Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2. Example 2: Input: k = 2, prices = [3,2,6,5,0,3] Output: 7 Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.   Constraints: 1 <= k <= 100 1 <= prices.length <= 1000 0 <= prices[i] <= 1000",
        "169": "Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.   Example 1: Input: nums = [1,2,3,4,5,6,7], k = 3 Output: [5,6,7,1,2,3,4] Explanation: rotate 1 steps to the right: [7,1,2,3,4,5,6] rotate 2 steps to the right: [6,7,1,2,3,4,5] rotate 3 steps to the right: [5,6,7,1,2,3,4] Example 2: Input: nums = [-1,-100,3,99], k = 2 Output: [3,99,-1,-100] Explanation:  rotate 1 steps to the right: [99,-1,-100,3] rotate 2 steps to the right: [3,99,-1,-100]   Constraints: 1 <= nums.length <= 105 -231 <= nums[i] <= 231 - 1 0 <= k <= 105   Follow up: Try to come up with as many solutions as you can. There are at least three different ways to solve this problem. Could you do it in-place with O(1) extra space?",
        "170": "Write a function that takes the binary representation of a positive integer and returns the number of set bits it has (also known as the Hamming weight).   Example 1: Input: n = 11 Output: 3 Explanation: The input binary string 1011 has a total of three set bits. Example 2: Input: n = 128 Output: 1 Explanation: The input binary string 10000000 has a total of one set bit. Example 3: Input: n = 2147483645 Output: 30 Explanation: The input binary string 1111111111111111111111111111101 has a total of thirty set bits.   Constraints: 1 <= n <= 231 - 1   Follow up: If this function is called many times, how would you optimize it?",
        "171": "Write a bash script to calculate the frequency of each word in a text file words.txt. For simplicity sake, you may assume: words.txt contains only lowercase characters and space ' ' characters. Each word must consist of lowercase characters only. Words are separated by one or more whitespace characters. Example: Assume that words.txt has the following content: the day is sunny the the the sunny is is Your script should output the following, sorted by descending frequency: the 4 is 3 sunny 2 day 1 Note: Don't worry about handling ties, it is guaranteed that each word's frequency count is unique. Could you write it in one-line using Unix pipes?",
        "172": "Given a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers. You may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit) You may also assume each line in the text file must not contain leading or trailing white spaces. Example: Assume that file.txt has the following content: 987-123-4567 123 456 7890 (123) 456-7890 Your script should output the following valid phone numbers: 987-123-4567 (123) 456-7890",
        "173": "Given a text file file.txt, transpose its content. You may assume that each row has the same number of columns, and each field is separated by the ' ' character. Example: If file.txt has the following content: name age alice 21 ryan 30 Output the following: name alice ryan age 21 30",
        "174": "Given a text file file.txt, print just the 10th line of the file. Example: Assume that file.txt has the following content: Line 1 Line 2 Line 3 Line 4 Line 5 Line 6 Line 7 Line 8 Line 9 Line 10 Your script should output the tenth line, which is: Line 10 Note: 1. If the file contains less than 10 lines, what should you output? 2. There's at least three different solutions. Try to explore all possibilities.",
        "175": "SQL Schema Pandas Schema",
        "176": "SQL Schema Pandas Schema",
        "177": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night. Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.   Example 1: Input: nums = [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. Example 2: Input: nums = [2,7,9,3,1] Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12.   Constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 400",
        "178": "Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.   Example 1: Input: root = [1,2,3,null,5,null,4] Output: [1,3,4] Example 2: Input: root = [1,null,3] Output: [1,3] Example 3: Input: root = [] Output: []   Constraints: The number of nodes in the tree is in the range [0, 100]. -100 <= Node.val <= 100",
        "179": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.   Example 1: Input: grid = [   [\"1\",\"1\",\"1\",\"1\",\"0\"],   [\"1\",\"1\",\"0\",\"1\",\"0\"],   [\"1\",\"1\",\"0\",\"0\",\"0\"],   [\"0\",\"0\",\"0\",\"0\",\"0\"] ] Output: 1 Example 2: Input: grid = [   [\"1\",\"1\",\"0\",\"0\",\"0\"],   [\"1\",\"1\",\"0\",\"0\",\"0\"],   [\"0\",\"0\",\"1\",\"0\",\"0\"],   [\"0\",\"0\",\"0\",\"1\",\"1\"] ] Output: 3   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 300 grid[i][j] is '0' or '1'.",
        "180": "Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.   Example 1: Input: left = 5, right = 7 Output: 4 Example 2: Input: left = 0, right = 0 Output: 0 Example 3: Input: left = 1, right = 2147483647 Output: 0   Constraints: 0 <= left <= right <= 231 - 1",
        "181": "Write an algorithm to determine if a number n is happy. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy. Return true if n is a happy number, and false if not.   Example 1: Input: n = 19 Output: true Explanation: 12 + 92 = 82 82 + 22 = 68 62 + 82 = 100 12 + 02 + 02 = 1 Example 2: Input: n = 2 Output: false   Constraints: 1 <= n <= 231 - 1",
        "182": "Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.   Example 1: Input: head = [1,2,6,3,4,5,6], val = 6 Output: [1,2,3,4,5] Example 2: Input: head = [], val = 1 Output: [] Example 3: Input: head = [7,7,7,7], val = 7 Output: []   Constraints: The number of nodes in the list is in the range [0, 104]. 1 <= Node.val <= 50 0 <= val <= 50",
        "183": "Given an integer n, return the number of prime numbers that are strictly less than n.   Example 1: Input: n = 10 Output: 4 Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7. Example 2: Input: n = 0 Output: 0 Example 3: Input: n = 1 Output: 0   Constraints: 0 <= n <= 5 * 106",
        "184": "Given two strings s and t, determine if they are isomorphic. Two strings s and t are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.   Example 1: Input: s = \"egg\", t = \"add\" Output: true Explanation: The strings s and t can be made identical by: Mapping 'e' to 'a'. Mapping 'g' to 'd'. Example 2: Input: s = \"foo\", t = \"bar\" Output: false Explanation: The strings s and t can not be made identical as 'o' needs to be mapped to both 'a' and 'r'. Example 3: Input: s = \"paper\", t = \"title\" Output: true   Constraints: 1 <= s.length <= 5 * 104 t.length == s.length s and t consist of any valid ascii character.",
        "185": "Given the head of a singly linked list, reverse the list, and return the reversed list.   Example 1: Input: head = [1,2,3,4,5] Output: [5,4,3,2,1] Example 2: Input: head = [1,2] Output: [2,1] Example 3: Input: head = [] Output: []   Constraints: The number of nodes in the list is the range [0, 5000]. -5000 <= Node.val <= 5000   Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?",
        "186": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1. Return true if you can finish all courses. Otherwise, return false.   Example 1: Input: numCourses = 2, prerequisites = [[1,0]] Output: true Explanation: There are a total of 2 courses to take.  To take course 1 you should have finished course 0. So it is possible. Example 2: Input: numCourses = 2, prerequisites = [[1,0],[0,1]] Output: false Explanation: There are a total of 2 courses to take.  To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.   Constraints: 1 <= numCourses <= 2000 0 <= prerequisites.length <= 5000 prerequisites[i].length == 2 0 <= ai, bi < numCourses All the pairs prerequisites[i] are unique.",
        "187": "A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker. Implement the Trie class: Trie() Initializes the trie object. void insert(String word) Inserts the string word into the trie. boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise. boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.   Example 1: Input [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"] [[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]] Output [null, null, true, false, true, null, true]  Explanation Trie trie = new Trie(); trie.insert(\"apple\"); trie.search(\"apple\");   // return True trie.search(\"app\");     // return False trie.startsWith(\"app\"); // return True trie.insert(\"app\"); trie.search(\"app\");     // return True   Constraints: 1 <= word.length, prefix.length <= 2000 word and prefix consist only of lowercase English letters. At most 3 * 104 calls in total will be made to insert, search, and startsWith.",
        "188": "Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.   Example 1: Input: target = 7, nums = [2,3,1,2,4,3] Output: 2 Explanation: The subarray [4,3] has the minimal length under the problem constraint. Example 2: Input: target = 4, nums = [1,4,4] Output: 1 Example 3: Input: target = 11, nums = [1,1,1,1,1,1,1,1] Output: 0   Constraints: 1 <= target <= 109 1 <= nums.length <= 105 1 <= nums[i] <= 104   Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).",
        "189": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1. Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.   Example 1: Input: numCourses = 2, prerequisites = [[1,0]] Output: [0,1] Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]. Example 2: Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]] Output: [0,2,1,3] Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3]. Example 3: Input: numCourses = 1, prerequisites = [] Output: [0]   Constraints: 1 <= numCourses <= 2000 0 <= prerequisites.length <= numCourses * (numCourses - 1) prerequisites[i].length == 2 0 <= ai, bi < numCourses ai != bi All the pairs [ai, bi] are distinct.",
        "190": "Design a data structure that supports adding new words and finding if a string matches any previously added string. Implement the WordDictionary class: WordDictionary() Initializes the object. void addWord(word) Adds word to the data structure, it can be matched later. bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.   Example: Input [\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"] [[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]] Output [null,null,null,null,false,true,true,true]  Explanation WordDictionary wordDictionary = new WordDictionary(); wordDictionary.addWord(\"bad\"); wordDictionary.addWord(\"dad\"); wordDictionary.addWord(\"mad\"); wordDictionary.search(\"pad\"); // return False wordDictionary.search(\"bad\"); // return True wordDictionary.search(\".ad\"); // return True wordDictionary.search(\"b..\"); // return True   Constraints: 1 <= word.length <= 25 word in addWord consists of lowercase English letters. word in search consist of '.' or lowercase English letters. There will be at most 2 dots in word for search queries. At most 104 calls will be made to addWord and search.",
        "191": "Given an m x n board of characters and a list of strings words, return all words on the board. Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.   Example 1: Input: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"] Output: [\"eat\",\"oath\"] Example 2: Input: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"] Output: []   Constraints: m == board.length n == board[i].length 1 <= m, n <= 12 board[i][j] is a lowercase English letter. 1 <= words.length <= 3 * 104 1 <= words[i].length <= 10 words[i] consists of lowercase English letters. All the strings of words are unique.",
        "192": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night. Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.   Example 1: Input: nums = [2,3,2] Output: 3 Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses. Example 2: Input: nums = [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. Example 3: Input: nums = [1,2,3] Output: 3   Constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 1000",
        "193": "You are given a string s. You can convert s to a palindrome by adding characters in front of it. Return the shortest palindrome you can find by performing this transformation.   Example 1: Input: s = \"aacecaaa\" Output: \"aaacecaaa\" Example 2: Input: s = \"abcd\" Output: \"dcbabcd\"   Constraints: 0 <= s.length <= 5 * 104 s consists of lowercase English letters only.",
        "194": "Given an integer array nums and an integer k, return the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element. Can you solve it without sorting?   Example 1: Input: nums = [3,2,1,5,6,4], k = 2 Output: 5 Example 2: Input: nums = [3,2,3,1,2,4,5,5,6], k = 4 Output: 4   Constraints: 1 <= k <= nums.length <= 105 -104 <= nums[i] <= 104",
        "195": "Find all valid combinations of k numbers that sum up to n such that the following conditions are true: Only numbers 1 through 9 are used. Each number is used at most once. Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.   Example 1: Input: k = 3, n = 7 Output: [[1,2,4]] Explanation: 1 + 2 + 4 = 7 There are no other valid combinations. Example 2: Input: k = 3, n = 9 Output: [[1,2,6],[1,3,5],[2,3,4]] Explanation: 1 + 2 + 6 = 9 1 + 3 + 5 = 9 2 + 3 + 4 = 9 There are no other valid combinations. Example 3: Input: k = 4, n = 1 Output: [] Explanation: There are no valid combinations. Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.   Constraints: 2 <= k <= 9 1 <= n <= 60",
        "196": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.   Example 1: Input: nums = [1,2,3,1] Output: true Explanation: The element 1 occurs at the indices 0 and 3. Example 2: Input: nums = [1,2,3,4] Output: false Explanation: All elements are distinct. Example 3: Input: nums = [1,1,1,3,3,4,3,2,4,2] Output: true   Constraints: 1 <= nums.length <= 105 -109 <= nums[i] <= 109",
        "197": "A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively. The geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]: lefti is the x coordinate of the left edge of the ith building. righti is the x coordinate of the right edge of the ith building. heighti is the height of the ith building. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0. The skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour. Note: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]   Example 1: Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]] Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]] Explanation: Figure A shows the buildings of the input. Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list. Example 2: Input: buildings = [[0,2,3],[2,5,3]] Output: [[0,3],[5,0]]   Constraints: 1 <= buildings.length <= 104 0 <= lefti < righti <= 231 - 1 1 <= heighti <= 231 - 1 buildings is sorted by lefti in non-decreasing order.",
        "198": "Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.   Example 1: Input: nums = [1,2,3,1], k = 3 Output: true Example 2: Input: nums = [1,0,1,1], k = 1 Output: true Example 3: Input: nums = [1,2,3,1,2,3], k = 2 Output: false   Constraints: 1 <= nums.length <= 105 -109 <= nums[i] <= 109 0 <= k <= 105",
        "199": "You are given an integer array nums and two integers indexDiff and valueDiff. Find a pair of indices (i, j) such that: i != j, abs(i - j) <= indexDiff. abs(nums[i] - nums[j]) <= valueDiff, and Return true if such pair exists or false otherwise.   Example 1: Input: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0 Output: true Explanation: We can choose (i, j) = (0, 3). We satisfy the three conditions: i != j --> 0 != 3 abs(i - j) <= indexDiff --> abs(0 - 3) <= 3 abs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0 Example 2: Input: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3 Output: false Explanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.   Constraints: 2 <= nums.length <= 105 -109 <= nums[i] <= 109 1 <= indexDiff <= nums.length 0 <= valueDiff <= 109",
        "200": "Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.   Example 1: Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]] Output: 4 Example 2: Input: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]] Output: 1 Example 3: Input: matrix = [[\"0\"]] Output: 0   Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 300 matrix[i][j] is '0' or '1'.",
        "201": "Given the root of a complete binary tree, return the number of the nodes in the tree. According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h. Design an algorithm that runs in less than O(n) time complexity.   Example 1: Input: root = [1,2,3,4,5,6] Output: 6 Example 2: Input: root = [] Output: 0 Example 3: Input: root = [1] Output: 1   Constraints: The number of nodes in the tree is in the range [0, 5 * 104]. 0 <= Node.val <= 5 * 104 The tree is guaranteed to be complete.",
        "202": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty). Implement the MyStack class: void push(int x) Pushes element x to the top of the stack. int pop() Removes the element on the top of the stack and returns it. int top() Returns the element on the top of the stack. boolean empty() Returns true if the stack is empty, false otherwise. Notes: You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid. Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.   Example 1: Input [\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"] [[], [1], [2], [], [], []] Output [null, null, null, 2, 2, false]  Explanation MyStack myStack = new MyStack(); myStack.push(1); myStack.push(2); myStack.top(); // return 2 myStack.pop(); // return 2 myStack.empty(); // return False   Constraints: 1 <= x <= 9 At most 100 calls will be made to push, pop, top, and empty. All the calls to pop and top are valid.   Follow-up: Can you implement the stack using only one queue?",
        "203": "Given the root of a binary tree, invert the tree, and return its root.   Example 1: Input: root = [4,2,7,1,3,6,9] Output: [4,7,2,9,6,3,1] Example 2: Input: root = [2,1,3] Output: [2,3,1] Example 3: Input: root = [] Output: []   Constraints: The number of nodes in the tree is in the range [0, 100]. -100 <= Node.val <= 100",
        "204": "Given a string s which represents an expression, evaluate this expression and return its value.  The integer division should truncate toward zero. You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1]. Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().   Example 1: Input: s = \"3+2*2\" Output: 7 Example 2: Input: s = \" 3/2 \" Output: 1 Example 3: Input: s = \" 3+5 / 2 \" Output: 5   Constraints: 1 <= s.length <= 3 * 105 s consists of integers and operators ('+', '-', '*', '/') separated by some number of spaces. s represents a valid expression. All the integers in the expression are non-negative integers in the range [0, 231 - 1]. The answer is guaranteed to fit in a 32-bit integer.",
        "205": "You are given a sorted unique integer array nums. A range [a,b] is the set of all integers from a to b (inclusive). Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums. Each range [a,b] in the list should be output as: \"a->b\" if a != b \"a\" if a == b   Example 1: Input: nums = [0,1,2,4,5,7] Output: [\"0->2\",\"4->5\",\"7\"] Explanation: The ranges are: [0,2] --> \"0->2\" [4,5] --> \"4->5\" [7,7] --> \"7\" Example 2: Input: nums = [0,2,3,4,6,8,9] Output: [\"0\",\"2->4\",\"6\",\"8->9\"] Explanation: The ranges are: [0,0] --> \"0\" [2,4] --> \"2->4\" [6,6] --> \"6\" [8,9] --> \"8->9\"   Constraints: 0 <= nums.length <= 20 -231 <= nums[i] <= 231 - 1 All the values of nums are unique. nums is sorted in ascending order.",
        "206": "Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.   Example 1: Input: nums = [3,2,3] Output: [3] Example 2: Input: nums = [1] Output: [1] Example 3: Input: nums = [1,2] Output: [1,2]   Constraints: 1 <= nums.length <= 5 * 104 -109 <= nums[i] <= 109   Follow up: Could you solve the problem in linear time and in O(1) space?",
        "207": "Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.   Example 1: Input: root = [3,1,4,null,2], k = 1 Output: 1 Example 2: Input: root = [5,3,6,2,4,null,null,1], k = 3 Output: 3   Constraints: The number of nodes in the tree is n. 1 <= k <= n <= 104 0 <= Node.val <= 104   Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?",
        "208": "Given an integer n, return true if it is a power of two. Otherwise, return false. An integer n is a power of two, if there exists an integer x such that n == 2x.   Example 1: Input: n = 1 Output: true Explanation: 20 = 1 Example 2: Input: n = 16 Output: true Explanation: 24 = 16 Example 3: Input: n = 3 Output: false   Constraints: -231 <= n <= 231 - 1   Follow up: Could you solve it without loops/recursion?",
        "209": "Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty). Implement the MyQueue class: void push(int x) Pushes element x to the back of the queue. int pop() Removes the element from the front of the queue and returns it. int peek() Returns the element at the front of the queue. boolean empty() Returns true if the queue is empty, false otherwise. Notes: You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid. Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.   Example 1: Input [\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"] [[], [1], [2], [], [], []] Output [null, null, null, 1, 1, false]  Explanation MyQueue myQueue = new MyQueue(); myQueue.push(1); // queue is: [1] myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue) myQueue.peek(); // return 1 myQueue.pop(); // return 1, queue is [2] myQueue.empty(); // return false   Constraints: 1 <= x <= 9 At most 100 calls will be made to push, pop, peek, and empty. All the calls to pop and peek are valid.   Follow-up: Can you implement the queue such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer.",
        "210": "Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.   Example 1: Input: n = 13 Output: 6 Example 2: Input: n = 0 Output: 0   Constraints: 0 <= n <= 109",
        "211": "Given the head of a singly linked list, return true if it is a palindrome or false otherwise.   Example 1: Input: head = [1,2,2,1] Output: true Example 2: Input: head = [1,2] Output: false   Constraints: The number of nodes in the list is in the range [1, 105]. 0 <= Node.val <= 9   Follow up: Could you do it in O(n) time and O(1) space?",
        "212": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer. You must write an algorithm that runs in O(n) time and without using the division operation.   Example 1: Input: nums = [1,2,3,4] Output: [24,12,8,6] Example 2: Input: nums = [-1,1,0,-3,3] Output: [0,0,9,0,0]   Constraints: 2 <= nums.length <= 105 -30 <= nums[i] <= 30 The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.   Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)",
        "213": "Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties: Integers in each row are sorted in ascending from left to right. Integers in each column are sorted in ascending from top to bottom.   Example 1: Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5 Output: true Example 2: Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20 Output: false   Constraints: m == matrix.length n == matrix[i].length 1 <= n, m <= 300 -109 <= matrix[i][j] <= 109 All the integers in each row are sorted in ascending order. All the integers in each column are sorted in ascending order. -109 <= target <= 109",
        "214": "Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order. The test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.   Example 1: Input: expression = \"2-1-1\" Output: [0,2] Explanation: ((2-1)-1) = 0  (2-(1-1)) = 2 Example 2: Input: expression = \"2*3-4*5\" Output: [-34,-14,-10,-10,10] Explanation: (2*(3-(4*5))) = -34  ((2*3)-(4*5)) = -14  ((2*(3-4))*5) = -10  (2*((3-4)*5)) = -10  (((2*3)-4)*5) = 10   Constraints: 1 <= expression.length <= 20 expression consists of digits and the operator '+', '-', and '*'. All the integer values in the input expression are in the range [0, 99]. The integer values in the input expression do not have a leading '-' or '+' denoting the sign.",
        "215": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.   Example 1: Input: s = \"anagram\", t = \"nagaram\" Output: true Example 2: Input: s = \"rat\", t = \"car\" Output: false   Constraints: 1 <= s.length, t.length <= 5 * 104 s and t consist of lowercase English letters.   Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?",
        "216": "Given the root of a binary tree, return all root-to-leaf paths in any order. A leaf is a node with no children.   Example 1: Input: root = [1,2,3,null,5] Output: [\"1->2->5\",\"1->3\"] Example 2: Input: root = [1] Output: [\"1\"]   Constraints: The number of nodes in the tree is in the range [1, 100]. -100 <= Node.val <= 100",
        "217": "Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.   Example 1: Input: num = 38 Output: 2 Explanation: The process is 38 --> 3 + 8 --> 11 11 --> 1 + 1 --> 2  Since 2 has only one digit, return it. Example 2: Input: num = 0 Output: 0   Constraints: 0 <= num <= 231 - 1   Follow up: Could you do it without any loop/recursion in O(1) runtime?",
        "218": "Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order. You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.   Example 1: Input: nums = [1,2,1,3,2,5] Output: [3,5] Explanation:  [5, 3] is also a valid answer. Example 2: Input: nums = [-1,0] Output: [-1,0] Example 3: Input: nums = [0,1] Output: [1,0]   Constraints: 2 <= nums.length <= 3 * 104 -231 <= nums[i] <= 231 - 1 Each integer in nums will appear twice, only two integers will appear once.",
        "219": "SQL Schema Pandas Schema",
        "220": "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5. Given an integer n, return the nth ugly number.   Example 1: Input: n = 10 Output: 12 Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers. Example 2: Input: n = 1 Output: 1 Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.   Constraints: 1 <= n <= 1690",
        "221": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.   Example 1: Input: nums = [3,0,1] Output: 2 Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums. Example 2: Input: nums = [0,1] Output: 2 Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums. Example 3: Input: nums = [9,6,4,2,3,5,7,0,1] Output: 8 Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.   Constraints: n == nums.length 1 <= n <= 104 0 <= nums[i] <= n All the numbers of nums are unique.   Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?",
        "222": "Convert a non-negative integer num to its English words representation.   Example 1: Input: num = 123 Output: \"One Hundred Twenty Three\" Example 2: Input: num = 12345 Output: \"Twelve Thousand Three Hundred Forty Five\" Example 3: Input: num = 1234567 Output: \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"   Constraints: 0 <= num <= 231 - 1",
        "223": "Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index. According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.   Example 1: Input: citations = [3,0,6,1,5] Output: 3 Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3. Example 2: Input: citations = [1,3,1] Output: 1   Constraints: n == citations.length 1 <= n <= 5000 0 <= citations[i] <= 1000",
        "224": "Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in ascending order, return the researcher's h-index. According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times. You must write an algorithm that runs in logarithmic time.   Example 1: Input: citations = [0,1,3,5,6] Output: 3 Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3. Example 2: Input: citations = [1,2,100] Output: 2   Constraints: n == citations.length 1 <= n <= 105 0 <= citations[i] <= 1000 citations is sorted in ascending order.",
        "225": "You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad. Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad. You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.   Example 1: Input: n = 5, bad = 4 Output: 4 Explanation: call isBadVersion(3) -> false call isBadVersion(5) -> true call isBadVersion(4) -> true Then 4 is the first bad version. Example 2: Input: n = 1, bad = 1 Output: 1   Constraints: 1 <= bad <= n <= 231 - 1",
        "226": "Given an integer n, return the least number of perfect square numbers that sum to n. A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.   Example 1: Input: n = 12 Output: 3 Explanation: 12 = 4 + 4 + 4. Example 2: Input: n = 13 Output: 2 Explanation: 13 = 4 + 9.   Constraints: 1 <= n <= 104",
        "227": "Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value. Note that operands in the returned expressions should not contain leading zeros.   Example 1: Input: num = \"123\", target = 6 Output: [\"1*2*3\",\"1+2+3\"] Explanation: Both \"1*2*3\" and \"1+2+3\" evaluate to 6. Example 2: Input: num = \"232\", target = 8 Output: [\"2*3+2\",\"2+3*2\"] Explanation: Both \"2*3+2\" and \"2+3*2\" evaluate to 8. Example 3: Input: num = \"3456237490\", target = 9191 Output: [] Explanation: There are no expressions that can be created from \"3456237490\" to evaluate to 9191.   Constraints: 1 <= num.length <= 10 num consists of only digits. -231 <= target <= 231 - 1",
        "228": "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements. Note that you must do this in-place without making a copy of the array.   Example 1: Input: nums = [0,1,0,3,12] Output: [1,3,12,0,0] Example 2: Input: nums = [0] Output: [0]   Constraints: 1 <= nums.length <= 104 -231 <= nums[i] <= 231 - 1   Follow up: Could you minimize the total number of operations done?",
        "229": "Design an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations. Implement the PeekingIterator class: PeekingIterator(Iterator<int> nums) Initializes the object with the given integer iterator iterator. int next() Returns the next element in the array and moves the pointer to the next element. boolean hasNext() Returns true if there are still elements in the array. int peek() Returns the next element in the array without moving the pointer. Note: Each language may have a different implementation of the constructor and Iterator, but they all support the int next() and boolean hasNext() functions.   Example 1: Input [\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"] [[[1, 2, 3]], [], [], [], [], []] Output [null, 1, 2, 2, 3, false]  Explanation PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3] peekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3]. peekingIterator.peek();    // return 2, the pointer does not move [1,2,3]. peekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3] peekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3] peekingIterator.hasNext(); // return False   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 1000 All the calls to next and peek are valid. At most 1000 calls will be made to next, hasNext, and peek.   Follow up: How would you extend your design to be generic and work with all types, not just integer?",
        "230": "Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive. There is only one repeated number in nums, return this repeated number. You must solve the problem without modifying the array nums and using only constant extra space.   Example 1: Input: nums = [1,3,4,2,2] Output: 2 Example 2: Input: nums = [3,1,3,4,2] Output: 3 Example 3: Input: nums = [3,3,3,3,3] Output: 3   Constraints: 1 <= n <= 105 nums.length == n + 1 1 <= nums[i] <= n All the integers in nums appear only once except for precisely one integer which appears two or more times.   Follow up: How can we prove that at least one duplicate number must exist in nums? Can you solve the problem in linear runtime complexity?",
        "231": "According to Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\" The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article): Any live cell with fewer than two live neighbors dies as if caused by under-population. Any live cell with two or three live neighbors lives on to the next generation. Any live cell with more than three live neighbors dies, as if by over-population. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state.   Example 1: Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]] Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]] Example 2: Input: board = [[1,1],[1,0]] Output: [[1,1],[1,1]]   Constraints: m == board.length n == board[i].length 1 <= m, n <= 25 board[i][j] is 0 or 1.   Follow up: Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells. In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?",
        "232": "Given a pattern and a string s, find if s follows the same pattern. Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s. Specifically: Each letter in pattern maps to exactly one unique word in s. Each unique word in s maps to exactly one letter in pattern. No two letters map to the same word, and no two words map to the same letter.   Example 1: Input: pattern = \"abba\", s = \"dog cat cat dog\" Output: true Explanation: The bijection can be established as: 'a' maps to \"dog\". 'b' maps to \"cat\". Example 2: Input: pattern = \"abba\", s = \"dog cat cat fish\" Output: false Example 3: Input: pattern = \"aaaa\", s = \"dog cat cat dog\" Output: false   Constraints: 1 <= pattern.length <= 300 pattern contains only lower-case English letters. 1 <= s.length <= 3000 s contains only lowercase English letters and spaces ' '. s does not contain any leading or trailing spaces. All the words in s are separated by a single space.",
        "233": "You are playing the following Nim Game with your friend: Initially, there is a heap of stones on the table. You and your friend will alternate taking turns, and you go first. On each turn, the person whose turn it is will remove 1 to 3 stones from the heap. The one who removes the last stone is the winner. Given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.   Example 1: Input: n = 4 Output: false Explanation: These are the possible outcomes: 1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins. 2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins. 3. You remove 3 stones. Your friend removes the last stone. Your friend wins. In all outcomes, your friend wins. Example 2: Input: n = 1 Output: true Example 3: Input: n = 2 Output: true   Constraints: 1 <= n <= 231 - 1",
        "234": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values. For example, for arr = [2,3,4], the median is 3. For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5. Implement the MedianFinder class: MedianFinder() initializes the MedianFinder object. void addNum(int num) adds the integer num from the data stream to the data structure. double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.   Example 1: Input [\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"] [[], [1], [2], [], [3], []] Output [null, null, null, 1.5, null, 2.0]  Explanation MedianFinder medianFinder = new MedianFinder(); medianFinder.addNum(1);    // arr = [1] medianFinder.addNum(2);    // arr = [1, 2] medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2) medianFinder.addNum(3);    // arr[1, 2, 3] medianFinder.findMedian(); // return 2.0   Constraints: -105 <= num <= 105 There will be at least one element in the data structure before calling findMedian. At most 5 * 104 calls will be made to addNum and findMedian.   Follow up: If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution? If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?",
        "235": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure. Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.   Example 1: Input: root = [1,2,3,null,null,4,5] Output: [1,2,3,null,null,4,5] Example 2: Input: root = [] Output: []   Constraints: The number of nodes in the tree is in the range [0, 104]. -1000 <= Node.val <= 1000",
        "236": "You are playing the Bulls and Cows game with your friend. You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info: The number of \"bulls\", which are digits in the guess that are in the correct position. The number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls. Given the secret number secret and your friend's guess guess, return the hint for your friend's guess. The hint should be formatted as \"xAyB\", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.   Example 1: Input: secret = \"1807\", guess = \"7810\" Output: \"1A3B\" Explanation: Bulls are connected with a '|' and cows are underlined: \"1807\"   | \"7810\" Example 2: Input: secret = \"1123\", guess = \"0111\" Output: \"1A1B\" Explanation: Bulls are connected with a '|' and cows are underlined: \"1123\"        \"1123\"   |      or     | \"0111\"        \"0111\" Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.   Constraints: 1 <= secret.length, guess.length <= 1000 secret.length == guess.length secret and guess consist of digits only.",
        "237": "Given an integer array nums, return the length of the longest strictly increasing subsequence .   Example 1: Input: nums = [10,9,2,5,3,7,101,18] Output: 4 Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. Example 2: Input: nums = [0,1,0,3,2,3] Output: 4 Example 3: Input: nums = [7,7,7,7,7,7,7] Output: 1   Constraints: 1 <= nums.length <= 2500 -104 <= nums[i] <= 104   Follow up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?",
        "238": "Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid. Return a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.   Example 1: Input: s = \"()())()\" Output: [\"(())()\",\"()()()\"] Example 2: Input: s = \"(a)())()\" Output: [\"(a())()\",\"(a)()()\"] Example 3: Input: s = \")(\" Output: [\"\"]   Constraints: 1 <= s.length <= 25 s consists of lowercase English letters and parentheses '(' and ')'. There will be at most 20 parentheses in s.",
        "239": "Given a 2D matrix matrix, handle multiple queries of the following type: Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). Implement the NumMatrix class: NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix. int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). You must design an algorithm where sumRegion works on O(1) time complexity.   Example 1: Input [\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"] [[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]] Output [null, 8, 11, 12]  Explanation NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]); numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle) numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle) numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)   Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 200 -104 <= matrix[i][j] <= 104 0 <= row1 <= row2 < m 0 <= col1 <= col2 < n At most 104 calls will be made to sumRegion.",
        "240": "An additive number is a string whose digits can form an additive sequence. A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two. Given a string containing only digits, return true if it is an additive number or false otherwise. Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.   Example 1: Input: \"112358\" Output: true Explanation:  The digits can form an additive sequence: 1, 1, 2, 3, 5, 8.  1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8 Example 2: Input: \"199100199\" Output: true Explanation:  The additive sequence is: 1, 99, 100, 199.  1 + 99 = 100, 99 + 100 = 199   Constraints: 1 <= num.length <= 35 num consists only of digits.   Follow up: How would you handle overflow for very large input integers?",
        "241": "Given an integer array nums, handle multiple queries of the following types: Update the value of an element in nums. Calculate the sum of the elements of nums between indices left and right inclusive where left <= right. Implement the NumArray class: NumArray(int[] nums) Initializes the object with the integer array nums. void update(int index, int val) Updates the value of nums[index] to be val. int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).   Example 1: Input [\"NumArray\", \"sumRange\", \"update\", \"sumRange\"] [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]] Output [null, 9, null, 8]  Explanation NumArray numArray = new NumArray([1, 3, 5]); numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9 numArray.update(1, 2);   // nums = [1, 2, 5] numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8   Constraints: 1 <= nums.length <= 3 * 104 -100 <= nums[i] <= 100 0 <= index < nums.length -100 <= val <= 100 0 <= left <= right < nums.length At most 3 * 104 calls will be made to update and sumRange.",
        "242": "You are given an array prices where prices[i] is the price of a given stock on the ith day. Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions: After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day). Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).   Example 1: Input: prices = [1,2,3,0,2] Output: 3 Explanation: transactions = [buy, sell, cooldown, buy, sell] Example 2: Input: prices = [1] Output: 0   Constraints: 1 <= prices.length <= 5000 0 <= prices[i] <= 1000",
        "243": "A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree. Given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs). Return a list of all MHTs' root labels. You can return the answer in any order. The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.   Example 1: Input: n = 4, edges = [[1,0],[1,2],[1,3]] Output: [1] Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT. Example 2: Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]] Output: [3,4]   Constraints: 1 <= n <= 2 * 104 edges.length == n - 1 0 <= ai, bi < n ai != bi All the pairs (ai, bi) are distinct. The given input is guaranteed to be a tree and there will be no repeated edges.",
        "244": "You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons. If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it. Return the maximum coins you can collect by bursting the balloons wisely.   Example 1: Input: nums = [3,1,5,8] Output: 167 Explanation: nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> [] coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167 Example 2: Input: nums = [1,5] Output: 10   Constraints: n == nums.length 1 <= n <= 300 0 <= nums[i] <= 100",
        "245": "Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].   Example 1: Input: nums = [5,2,6,1] Output: [2,1,1,0] Explanation: To the right of 5 there are 2 smaller elements (2 and 1). To the right of 2 there is only 1 smaller element (1). To the right of 6 there is 1 smaller element (1). To the right of 1 there is 0 smaller element. Example 2: Input: nums = [-1] Output: [0] Example 3: Input: nums = [-1,-1] Output: [0,0]   Constraints: 1 <= nums.length <= 105 -104 <= nums[i] <= 104",
        "246": "Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.   Example 1: Input: s = \"bcabc\" Output: \"abc\" Example 2: Input: s = \"cbacdcbc\" Output: \"acdb\"   Constraints: 1 <= s.length <= 104 s consists of lowercase English letters.   Note: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/",
        "247": "Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.   Example 1: Input: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"] Output: 16 Explanation: The two words can be \"abcw\", \"xtfn\". Example 2: Input: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"] Output: 4 Explanation: The two words can be \"ab\", \"cd\". Example 3: Input: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"] Output: 0 Explanation: No such pair of words.   Constraints: 2 <= words.length <= 1000 1 <= words[i].length <= 1000 words[i] consists only of lowercase English letters.",
        "248": "There are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb. Return the number of bulbs that are on after n rounds.   Example 1: Input: n = 3 Output: 1 Explanation: At first, the three bulbs are [off, off, off]. After the first round, the three bulbs are [on, on, on]. After the second round, the three bulbs are [on, off, on]. After the third round, the three bulbs are [on, off, off].  So you should return 1 because there is only one bulb is on. Example 2: Input: n = 0 Output: 0 Example 3: Input: n = 1 Output: 1   Constraints: 0 <= n <= 109",
        "249": "You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k. Create the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved. Return an array of the k digits representing the answer.   Example 1: Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5 Output: [9,8,6,5,3] Example 2: Input: nums1 = [6,7], nums2 = [6,0,4], k = 5 Output: [6,7,6,0,4] Example 3: Input: nums1 = [3,9], nums2 = [8,9], k = 3 Output: [9,8,9]   Constraints: m == nums1.length n == nums2.length 1 <= m, n <= 500 0 <= nums1[i], nums2[i] <= 9 1 <= k <= m + n",
        "250": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin.   Example 1: Input: coins = [1,2,5], amount = 11 Output: 3 Explanation: 11 = 5 + 5 + 1 Example 2: Input: coins = [2], amount = 3 Output: -1 Example 3: Input: coins = [1], amount = 0 Output: 0   Constraints: 1 <= coins.length <= 12 1 <= coins[i] <= 231 - 1 0 <= amount <= 104",
        "251": "Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3].... You may assume the input array always has a valid answer.   Example 1: Input: nums = [1,5,1,1,6,4] Output: [1,6,1,5,1,4] Explanation: [1,4,1,5,1,6] is also accepted. Example 2: Input: nums = [1,3,2,2,3,1] Output: [2,3,1,3,1,2]   Constraints: 1 <= nums.length <= 5 * 104 0 <= nums[i] <= 5000 It is guaranteed that there will be an answer for the given input nums.   Follow Up: Can you do it in O(n) time and/or in-place with O(1) extra space?",
        "252": "Given an integer n, return true if it is a power of three. Otherwise, return false. An integer n is a power of three, if there exists an integer x such that n == 3x.   Example 1: Input: n = 27 Output: true Explanation: 27 = 33 Example 2: Input: n = 0 Output: false Explanation: There is no x where 3x = 0. Example 3: Input: n = -1 Output: false Explanation: There is no x where 3x = (-1).   Constraints: -231 <= n <= 231 - 1   Follow up: Could you solve it without loops/recursion?",
        "253": "Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive. Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.   Example 1: Input: nums = [-2,5,-1], lower = -2, upper = 2 Output: 3 Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2. Example 2: Input: nums = [0], lower = 0, upper = 0 Output: 1   Constraints: 1 <= nums.length <= 105 -231 <= nums[i] <= 231 - 1 -105 <= lower <= upper <= 105 The answer is guaranteed to fit in a 32-bit integer.",
        "254": "Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list. The first node is considered odd, and the second node is even, and so on. Note that the relative order inside both the even and odd groups should remain as it was in the input. You must solve the problem in O(1) extra space complexity and O(n) time complexity.   Example 1: Input: head = [1,2,3,4,5] Output: [1,3,5,2,4] Example 2: Input: head = [2,1,3,5,6,4,7] Output: [2,3,6,7,1,5,4]   Constraints: The number of nodes in the linked list is in the range [0, 104]. -106 <= Node.val <= 106",
        "255": "Given an m x n integers matrix, return the length of the longest increasing path in matrix. From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).   Example 1: Input: matrix = [[9,9,4],[6,6,8],[2,1,1]] Output: 4 Explanation: The longest increasing path is [1, 2, 6, 9]. Example 2: Input: matrix = [[3,4,5],[3,2,6],[2,2,1]] Output: 4 Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed. Example 3: Input: matrix = [[1]] Output: 1   Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 200 0 <= matrix[i][j] <= 231 - 1",
        "256": "Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.   Example 1: Input: nums = [1,3], n = 6 Output: 1 Explanation: Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4. Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3]. Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6]. So we only need 1 patch. Example 2: Input: nums = [1,5,10], n = 20 Output: 2 Explanation: The two patches can be [2, 4]. Example 3: Input: nums = [1,2,2], n = 5 Output: 0   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 104 nums is sorted in ascending order. 1 <= n <= 231 - 1",
        "257": "One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'. For example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where '#' represents a null node. Given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree. It is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer. You may assume that the input format is always valid. For example, it could never contain two consecutive commas, such as \"1,,3\". Note: You are not allowed to reconstruct the tree.   Example 1: Input: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\" Output: true Example 2: Input: preorder = \"1,#\" Output: false Example 3: Input: preorder = \"9,#,#,1\" Output: false   Constraints: 1 <= preorder.length <= 104 preorder consist of integers in the range [0, 100] and '#' separated by commas ','.",
        "258": "You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it. All of the tickets belong to a man who departs from \"JFK\", thus, the itinerary must begin with \"JFK\". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary [\"JFK\", \"LGA\"] has a smaller lexical order than [\"JFK\", \"LGB\"]. You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.   Example 1: Input: tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]] Output: [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"] Example 2: Input: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]] Output: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"] Explanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.   Constraints: 1 <= tickets.length <= 300 tickets[i].length == 2 fromi.length == 3 toi.length == 3 fromi and toi consist of uppercase English letters. fromi != toi",
        "259": "Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.   Example 1: Input: nums = [1,2,3,4,5] Output: true Explanation: Any triplet where i < j < k is valid. Example 2: Input: nums = [5,4,3,2,1] Output: false Explanation: No triplet exists. Example 3: Input: nums = [2,1,5,0,4,6] Output: true Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.   Constraints: 1 <= nums.length <= 5 * 105 -231 <= nums[i] <= 231 - 1   Follow up: Could you implement a solution that runs in O(n) time complexity and O(1) space complexity?",
        "260": "You are given an array of integers distance. You start at the point (0, 0) on an X-Y plane, and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise. Return true if your path crosses itself or false if it does not.   Example 1: Input: distance = [2,1,1,2] Output: true Explanation: The path crosses itself at the point (0, 1). Example 2: Input: distance = [1,2,3,4] Output: false Explanation: The path does not cross itself at any point. Example 3: Input: distance = [1,1,1,2,1] Output: true Explanation: The path crosses itself at the point (0, 0).   Constraints: 1 <= distance.length <= 105 1 <= distance[i] <= 105",
        "261": "You are given a 0-indexed array of unique strings words. A palindrome pair is a pair of integers (i, j) such that: 0 <= i, j < words.length, i != j, and words[i] + words[j] (the concatenation of the two strings) is a palindrome . Return an array of all the palindrome pairs of words. You must write an algorithm with O(sum of words[i].length) runtime complexity.   Example 1: Input: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"] Output: [[0,1],[1,0],[3,2],[2,4]] Explanation: The palindromes are [\"abcddcba\",\"dcbaabcd\",\"slls\",\"llssssll\"] Example 2: Input: words = [\"bat\",\"tab\",\"cat\"] Output: [[0,1],[1,0]] Explanation: The palindromes are [\"battab\",\"tabbat\"] Example 3: Input: words = [\"a\",\"\"] Output: [[0,1],[1,0]] Explanation: The palindromes are [\"a\",\"a\"]   Constraints: 1 <= words.length <= 5000 0 <= words[i].length <= 300 words[i] consists of lowercase English letters.",
        "262": "The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root. Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night. Given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.   Example 1: Input: root = [3,2,3,null,3,null,1] Output: 7 Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7. Example 2: Input: root = [3,4,5,1,3,null,1] Output: 9 Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.   Constraints: The number of nodes in the tree is in the range [1, 104]. 0 <= Node.val <= 104",
        "263": "Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.   Example 1: Input: n = 2 Output: [0,1,1] Explanation: 0 --> 0 1 --> 1 2 --> 10 Example 2: Input: n = 5 Output: [0,1,1,2,1,2] Explanation: 0 --> 0 1 --> 1 2 --> 10 3 --> 11 4 --> 100 5 --> 101   Constraints: 0 <= n <= 105   Follow up: It is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass? Can you do it without using any built-in function (i.e., like __builtin_popcount in C++)?",
        "264": "You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it. Implement the NestedIterator class: NestedIterator(List<NestedInteger> nestedList) Initializes the iterator with the nested list nestedList. int next() Returns the next integer in the nested list. boolean hasNext() Returns true if there are still some integers in the nested list and false otherwise. Your code will be tested with the following pseudocode: initialize iterator with nestedList res = [] while iterator.hasNext()     append iterator.next() to the end of res return res If res matches the expected flattened list, then your code will be judged as correct.   Example 1: Input: nestedList = [[1,1],2,[1,1]] Output: [1,1,2,1,1] Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1]. Example 2: Input: nestedList = [1,[4,[6]]] Output: [1,4,6] Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].   Constraints: 1 <= nestedList.length <= 500 The values of the integers in the nested list is in the range [-106, 106].",
        "265": "Given an integer n, return true if it is a power of four. Otherwise, return false. An integer n is a power of four, if there exists an integer x such that n == 4x.   Example 1: Input: n = 16 Output: true Example 2: Input: n = 5 Output: false Example 3: Input: n = 1 Output: true   Constraints: -231 <= n <= 231 - 1   Follow up: Could you solve it without loops/recursion?",
        "266": "Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers. Return the maximum product you can get.   Example 1: Input: n = 2 Output: 1 Explanation: 2 = 1 + 1, 1 × 1 = 1. Example 2: Input: n = 10 Output: 36 Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.   Constraints: 2 <= n <= 58",
        "267": "Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory.   Example 1: Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"] Output: [\"o\",\"l\",\"l\",\"e\",\"h\"] Example 2: Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"] Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]   Constraints: 1 <= s.length <= 105 s[i] is a printable ascii character.",
        "268": "Given a string s, reverse only all the vowels in the string and return it. The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.   Example 1: Input: s = \"IceCreAm\" Output: \"AceCreIm\" Explanation: The vowels in s are ['I', 'e', 'e', 'A']. On reversing the vowels, s becomes \"AceCreIm\". Example 2: Input: s = \"leetcode\" Output: \"leotcede\"   Constraints: 1 <= s.length <= 3 * 105 s consist of printable ASCII characters.",
        "269": "Given two integer arrays nums1 and nums2, return an array of their intersection . Each element in the result must be unique and you may return the result in any order.   Example 1: Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2] Example 2: Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [9,4] Explanation: [4,9] is also accepted.   Constraints: 1 <= nums1.length, nums2.length <= 1000 0 <= nums1[i], nums2[i] <= 1000",
        "270": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.   Example 1: Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2,2] Example 2: Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [4,9] Explanation: [9,4] is also accepted.   Constraints: 1 <= nums1.length, nums2.length <= 1000 0 <= nums1[i], nums2[i] <= 1000   Follow up: What if the given array is already sorted? How would you optimize your algorithm? What if nums1's size is small compared to nums2's size? Which algorithm is better? What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?",
        "271": "Given a data stream input of non-negative integers a1, a2, ..., an, summarize the numbers seen so far as a list of disjoint intervals. Implement the SummaryRanges class: SummaryRanges() Initializes the object with an empty stream. void addNum(int value) Adds the integer value to the stream. int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.   Example 1: Input [\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"] [[], [1], [], [3], [], [7], [], [2], [], [6], []] Output [null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]  Explanation SummaryRanges summaryRanges = new SummaryRanges(); summaryRanges.addNum(1);      // arr = [1] summaryRanges.getIntervals(); // return [[1, 1]] summaryRanges.addNum(3);      // arr = [1, 3] summaryRanges.getIntervals(); // return [[1, 1], [3, 3]] summaryRanges.addNum(7);      // arr = [1, 3, 7] summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]] summaryRanges.addNum(2);      // arr = [1, 2, 3, 7] summaryRanges.getIntervals(); // return [[1, 3], [7, 7]] summaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7] summaryRanges.getIntervals(); // return [[1, 3], [6, 7]]   Constraints: 0 <= value <= 104 At most 3 * 104 calls will be made to addNum and getIntervals. At most 102 calls will be made to getIntervals.   Follow up: What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?",
        "272": "You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope. One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height. Return the maximum number of envelopes you can Russian doll (i.e., put one inside the other). Note: You cannot rotate an envelope.   Example 1: Input: envelopes = [[5,4],[6,4],[6,7],[2,3]] Output: 3 Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]). Example 2: Input: envelopes = [[1,1],[1,1],[1,1]] Output: 1   Constraints: 1 <= envelopes.length <= 105 envelopes[i].length == 2 1 <= wi, hi <= 105",
        "273": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed. Implement the Twitter class: Twitter() Initializes your twitter object. void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId. List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent. void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId. void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.   Example 1: Input [\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"] [[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]] Output [null, null, [5], null, null, [6, 5], null, [5]]  Explanation Twitter twitter = new Twitter(); twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5). twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5] twitter.follow(1, 2);    // User 1 follows user 2. twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6). twitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5. twitter.unfollow(1, 2);  // User 1 unfollows user 2. twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.   Constraints: 1 <= userId, followerId, followeeId <= 500 0 <= tweetId <= 104 All the tweets have unique IDs. At most 3 * 104 calls will be made to postTweet, getNewsFeed, follow, and unfollow.",
        "274": "Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.   Example 1: Input: n = 2 Output: 91 Explanation: The answer should be the total numbers in the range of 0 ≤ x < 100, excluding 11,22,33,44,55,66,77,88,99 Example 2: Input: n = 0 Output: 1   Constraints: 0 <= n <= 8",
        "275": "Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k. It is guaranteed that there will be a rectangle with a sum no larger than k.   Example 1: Input: matrix = [[1,0,1],[0,-2,3]], k = 2 Output: 2 Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2). Example 2: Input: matrix = [[2,2,-1]], k = 3 Output: 3   Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 100 -100 <= matrix[i][j] <= 100 -105 <= k <= 105   Follow up: What if the number of rows is much larger than the number of columns?",
        "276": "You are given two jugs with capacities x liters and y liters. You have an infinite water supply. Return whether the total amount of water in both jugs may reach target using the following operations: Fill either jug completely with water. Completely empty either jug. Pour water from one jug into another until the receiving jug is full, or the transferring jug is empty.   Example 1: Input: x = 3, y = 5, target = 4 Output: true Explanation: Follow these steps to reach a total of 4 liters: Fill the 5-liter jug (0, 5). Pour from the 5-liter jug into the 3-liter jug, leaving 2 liters (3, 2). Empty the 3-liter jug (0, 2). Transfer the 2 liters from the 5-liter jug to the 3-liter jug (2, 0). Fill the 5-liter jug again (2, 5). Pour from the 5-liter jug into the 3-liter jug until the 3-liter jug is full. This leaves 4 liters in the 5-liter jug (3, 4). Empty the 3-liter jug. Now, you have exactly 4 liters in the 5-liter jug (0, 4). Reference: The Die Hard example. Example 2: Input: x = 2, y = 6, target = 5 Output: false Example 3: Input: x = 1, y = 2, target = 3 Output: true Explanation: Fill both jugs. The total amount of water in both jugs is equal to 3 now.   Constraints: 1 <= x, y, target <= 103",
        "277": "Given a positive integer num, return true if num is a perfect square or false otherwise. A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself. You must not use any built-in library function, such as sqrt.   Example 1: Input: num = 16 Output: true Explanation: We return true because 4 * 4 = 16 and 4 is an integer. Example 2: Input: num = 14 Output: false Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.   Constraints: 1 <= num <= 231 - 1",
        "278": "Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies: answer[i] % answer[j] == 0, or answer[j] % answer[i] == 0 If there are multiple solutions, return any of them.   Example 1: Input: nums = [1,2,3] Output: [1,2] Explanation: [1,3] is also accepted. Example 2: Input: nums = [1,2,4,8] Output: [1,2,4,8]   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 2 * 109 All the integers in nums are unique.",
        "279": "Given two integers a and b, return the sum of the two integers without using the operators + and -.   Example 1: Input: a = 1, b = 2 Output: 3 Example 2: Input: a = 2, b = 3 Output: 5   Constraints: -1000 <= a, b <= 1000",
        "280": "Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.   Example 1: Input: a = 2, b = [3] Output: 8 Example 2: Input: a = 2, b = [1,0] Output: 1024 Example 3: Input: a = 1, b = [4,3,3,8,5,2] Output: 1   Constraints: 1 <= a <= 231 - 1 1 <= b.length <= 2000 0 <= b[i] <= 9 b does not contain leading zeros.",
        "281": "You are given two integer arrays nums1 and nums2 sorted in non-decreasing order and an integer k. Define a pair (u, v) which consists of one element from the first array and one element from the second array. Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.   Example 1: Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3 Output: [[1,2],[1,4],[1,6]] Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6] Example 2: Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2 Output: [[1,1],[1,1]] Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]   Constraints: 1 <= nums1.length, nums2.length <= 105 -109 <= nums1[i], nums2[i] <= 109 nums1 and nums2 both are sorted in non-decreasing order. 1 <= k <= 104 k <= nums1.length * nums2.length",
        "282": "We are playing the Guess Game. The game is as follows: I pick a number from 1 to n. You have to guess which number I picked. Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess. You call a pre-defined API int guess(int num), which returns three possible results: -1: Your guess is higher than the number I picked (i.e. num > pick). 1: Your guess is lower than the number I picked (i.e. num < pick). 0: your guess is equal to the number I picked (i.e. num == pick). Return the number that I picked.   Example 1: Input: n = 10, pick = 6 Output: 6 Example 2: Input: n = 1, pick = 1 Output: 1 Example 3: Input: n = 2, pick = 1 Output: 1   Constraints: 1 <= n <= 231 - 1 1 <= pick <= n",
        "283": "We are playing the Guessing Game. The game will work as follows: I pick a number between 1 and n. You guess a number. If you guess the right number, you win the game. If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing. Every time you guess a wrong number x, you will pay x dollars. If you run out of money, you lose the game. Given a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.   Example 1: Input: n = 10 Output: 16 Explanation: The winning strategy is as follows: - The range is [1,10]. Guess 7.     - If this is my number, your total is $0. Otherwise, you pay $7.     - If my number is higher, the range is [8,10]. Guess 9.         - If this is my number, your total is $7. Otherwise, you pay $9.         - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.         - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.     - If my number is lower, the range is [1,6]. Guess 3.         - If this is my number, your total is $7. Otherwise, you pay $3.         - If my number is higher, the range is [4,6]. Guess 5.             - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.             - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.             - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.         - If my number is lower, the range is [1,2]. Guess 1.             - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.             - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11. The worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win. Example 2: Input: n = 1 Output: 0 Explanation: There is only one possible number, so you can guess 1 and not have to pay anything. Example 3: Input: n = 2 Output: 1 Explanation: There are two possible numbers, 1 and 2. - Guess 1.     - If this is my number, your total is $0. Otherwise, you pay $1.     - If my number is higher, it must be 2. Guess 2. Your total is $1. The worst case is that you pay $1.   Constraints: 1 <= n <= 200",
        "284": "A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences. For example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative. In contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero. A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order. Given an integer array nums, return the length of the longest wiggle subsequence of nums.   Example 1: Input: nums = [1,7,4,9,2,5] Output: 6 Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3). Example 2: Input: nums = [1,17,5,10,13,15,10,5,16,8] Output: 7 Explanation: There are several subsequences that achieve this length. One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8). Example 3: Input: nums = [1,2,3,4,5,6,7,8,9] Output: 2   Constraints: 1 <= nums.length <= 1000 0 <= nums[i] <= 1000   Follow up: Could you solve this in O(n) time?",
        "285": "Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target. The test cases are generated so that the answer can fit in a 32-bit integer.   Example 1: Input: nums = [1,2,3], target = 4 Output: 7 Explanation: The possible combination ways are: (1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (1, 3) (2, 1, 1) (2, 2) (3, 1) Note that different sequences are counted as different combinations. Example 2: Input: nums = [9], target = 3 Output: 0   Constraints: 1 <= nums.length <= 200 1 <= nums[i] <= 1000 All the elements of nums are unique. 1 <= target <= 1000   Follow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?",
        "286": "Implement the RandomizedSet class: RandomizedSet() Initializes the RandomizedSet object. bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise. bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise. int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned. You must implement the functions of the class such that each function works in average O(1) time complexity.   Example 1: Input [\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"] [[], [1], [2], [2], [], [1], [2], []] Output [null, true, false, true, 2, true, false, 2]  Explanation RandomizedSet randomizedSet = new RandomizedSet(); randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully. randomizedSet.remove(2); // Returns false as 2 does not exist in the set. randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2]. randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly. randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2]. randomizedSet.insert(2); // 2 was already in the set, so return false. randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.   Constraints: -231 <= val <= 231 - 1 At most 2 * 105 calls will be made to insert, remove, and getRandom. There will be at least one element in the data structure when getRandom is called.",
        "287": "RandomizedCollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element. Implement the RandomizedCollection class: RandomizedCollection() Initializes the empty RandomizedCollection object. bool insert(int val) Inserts an item val into the multiset, even if the item is already present. Returns true if the item is not present, false otherwise. bool remove(int val) Removes an item val from the multiset if present. Returns true if the item is present, false otherwise. Note that if val has multiple occurrences in the multiset, we only remove one of them. int getRandom() Returns a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of the same values the multiset contains. You must implement the functions of the class such that each function works on average O(1) time complexity. Note: The test cases are generated such that getRandom will only be called if there is at least one item in the RandomizedCollection.   Example 1: Input [\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"] [[], [1], [1], [2], [], [1], []] Output [null, true, false, true, 2, true, 1]  Explanation RandomizedCollection randomizedCollection = new RandomizedCollection(); randomizedCollection.insert(1);   // return true since the collection does not contain 1.                                   // Inserts 1 into the collection. randomizedCollection.insert(1);   // return false since the collection contains 1.                                   // Inserts another 1 into the collection. Collection now contains [1,1]. randomizedCollection.insert(2);   // return true since the collection does not contain 2.                                   // Inserts 2 into the collection. Collection now contains [1,1,2]. randomizedCollection.getRandom(); // getRandom should:                                   // - return 1 with probability 2/3, or                                   // - return 2 with probability 1/3. randomizedCollection.remove(1);   // return true since the collection contains 1.                                   // Removes 1 from the collection. Collection now contains [1,2]. randomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.   Constraints: -231 <= val <= 231 - 1 At most 2 * 105 calls in total will be made to insert, remove, and getRandom. There will be at least one element in the data structure when getRandom is called.",
        "288": "Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen. Implement the Solution class: Solution(ListNode head) Initializes the object with the head of the singly-linked list head. int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.   Example 1: Input [\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"] [[[1, 2, 3]], [], [], [], [], []] Output [null, 1, 3, 2, 2, 3]  Explanation Solution solution = new Solution([1, 2, 3]); solution.getRandom(); // return 1 solution.getRandom(); // return 3 solution.getRandom(); // return 2 solution.getRandom(); // return 2 solution.getRandom(); // return 3 // getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.   Constraints: The number of nodes in the linked list will be in the range [1, 104]. -104 <= Node.val <= 104 At most 104 calls will be made to getRandom.   Follow up: What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?",
        "289": "Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise. Each letter in magazine can only be used once in ransomNote.   Example 1: Input: ransomNote = \"a\", magazine = \"b\" Output: false Example 2: Input: ransomNote = \"aa\", magazine = \"ab\" Output: false Example 3: Input: ransomNote = \"aa\", magazine = \"aab\" Output: true   Constraints: 1 <= ransomNote.length, magazine.length <= 105 ransomNote and magazine consist of lowercase English letters.",
        "290": "Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling. Implement the Solution class: Solution(int[] nums) Initializes the object with the integer array nums. int[] reset() Resets the array to its original configuration and returns it. int[] shuffle() Returns a random shuffling of the array.   Example 1: Input [\"Solution\", \"shuffle\", \"reset\", \"shuffle\"] [[[1, 2, 3]], [], [], []] Output [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]  Explanation Solution solution = new Solution([1, 2, 3]); solution.shuffle();    // Shuffle the array [1,2,3] and return its result.                        // Any permutation of [1,2,3] must be equally likely to be returned.                        // Example: return [3, 1, 2] solution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3] solution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]   Constraints: 1 <= nums.length <= 50 -106 <= nums[i] <= 106 All the elements of nums are unique. At most 104 calls in total will be made to reset and shuffle.",
        "291": "Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized NestedInteger. Each element is either an integer or a list whose elements may also be integers or other lists.   Example 1: Input: s = \"324\" Output: 324 Explanation: You should return a NestedInteger object which contains a single integer 324. Example 2: Input: s = \"[123,[456,[789]]]\" Output: [123,[456,[789]]] Explanation: Return a NestedInteger object containing a nested list with 2 elements: 1. An integer containing value 123. 2. A nested list containing two elements:     i.  An integer containing value 456.     ii. A nested list with one element:          a. An integer containing value 789   Constraints: 1 <= s.length <= 5 * 104 s consists of digits, square brackets \"[]\", negative sign '-', and commas ','. s is the serialization of valid NestedInteger. All the values in the input are in the range [-106, 106].",
        "292": "Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order. You must write an algorithm that runs in O(n) time and uses O(1) extra space.    Example 1: Input: n = 13 Output: [1,10,11,12,13,2,3,4,5,6,7,8,9] Example 2: Input: n = 2 Output: [1,2]   Constraints: 1 <= n <= 5 * 104",
        "293": "Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.   Example 1: Input: s = \"leetcode\" Output: 0 Explanation: The character 'l' at index 0 is the first character that does not occur at any other index. Example 2: Input: s = \"loveleetcode\" Output: 2 Example 3: Input: s = \"aabb\" Output: -1   Constraints: 1 <= s.length <= 105 s consists of only lowercase English letters.",
        "294": "Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture: Here, we have dir as the only directory in the root. dir contains two subdirectories, subdir1 and subdir2. subdir1 contains a file file1.ext and subdirectory subsubdir1. subdir2 contains a subdirectory subsubdir2, which contains a file file2.ext. In text form, it looks like this (with ⟶ representing the tab character): dir ⟶ subdir1 ⟶ ⟶ file1.ext ⟶ ⟶ subsubdir1 ⟶ subdir2 ⟶ ⟶ subsubdir2 ⟶ ⟶ ⟶ file2.ext If we were to write this representation in code, it will look like this: \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\". Note that the '\\n' and '\\t' are the new-line and tab characters. Every file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by '/'s. Using the above example, the absolute path to file2.ext is \"dir/subdir2/subsubdir2/file2.ext\". Each directory name consists of letters, digits, and/or spaces. Each file name is of the form name.extension, where name and extension consist of letters, digits, and/or spaces. Given a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return 0. Note that the testcases are generated such that the file system is valid and no file or directory name has length 0.   Example 1: Input: input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\" Output: 20 Explanation: We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20. Example 2: Input: input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\" Output: 32 Explanation: We have two files: \"dir/subdir1/file1.ext\" of length 21 \"dir/subdir2/subsubdir2/file2.ext\" of length 32. We return 32 since it is the longest absolute path to a file. Example 3: Input: input = \"a\" Output: 0 Explanation: We do not have any files, just a single directory named \"a\".   Constraints: 1 <= input.length <= 104 input may contain lowercase or uppercase English letters, a new line character '\\n', a tab character '\\t', a dot '.', a space ' ', and digits. All file and directory names have positive length.",
        "295": "You are given two strings s and t. String t is generated by random shuffling string s and then add one more letter at a random position. Return the letter that was added to t.   Example 1: Input: s = \"abcd\", t = \"abcde\" Output: \"e\" Explanation: 'e' is the letter that was added. Example 2: Input: s = \"\", t = \"y\" Output: \"y\"   Constraints: 0 <= s.length <= 1000 t.length == s.length + 1 s and t consist of lowercase English letters.",
        "296": "You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr: Starting from left to right, remove the first number and every other number afterward until you reach the end of the list. Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers. Keep repeating the steps again, alternating left to right and right to left, until a single number remains. Given the integer n, return the last number that remains in arr.   Example 1: Input: n = 9 Output: 6 Explanation: arr = [1, 2, 3, 4, 5, 6, 7, 8, 9] arr = [2, 4, 6, 8] arr = [2, 6] arr = [6] Example 2: Input: n = 1 Output: 1   Constraints: 1 <= n <= 109",
        "297": "Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi). Return true if all the rectangles together form an exact cover of a rectangular region.   Example 1: Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]] Output: true Explanation: All 5 rectangles together form an exact cover of a rectangular region. Example 2: Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]] Output: false Explanation: Because there is a gap between the two rectangular regions. Example 3: Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]] Output: false Explanation: Because two of the rectangles overlap with each other.   Constraints: 1 <= rectangles.length <= 2 * 104 rectangles[i].length == 4 -105 <= xi < ai <= 105 -105 <= yi < bi <= 105",
        "298": "Given two strings s and t, return true if s is a subsequence of t, or false otherwise. A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).   Example 1: Input: s = \"abc\", t = \"ahbgdc\" Output: true Example 2: Input: s = \"axc\", t = \"ahbgdc\" Output: false   Constraints: 0 <= s.length <= 100 0 <= t.length <= 104 s and t consist only of lowercase English letters.   Follow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where k >= 109, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?",
        "299": "Given an encoded string, return its decoded string. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer. You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4]. The test cases are generated so that the length of the output will never exceed 105.   Example 1: Input: s = \"3[a]2[bc]\" Output: \"aaabcbc\" Example 2: Input: s = \"3[a2[c]]\" Output: \"accaccacc\" Example 3: Input: s = \"2[abc]3[cd]ef\" Output: \"abcabccdcdcdef\"   Constraints: 1 <= s.length <= 30 s consists of lowercase English letters, digits, and square brackets '[]'. s is guaranteed to be a valid input. All the integers in s are in the range [1, 300].",
        "300": "Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k. if no such substring exists, return 0.   Example 1: Input: s = \"aaabb\", k = 3 Output: 3 Explanation: The longest substring is \"aaa\", as 'a' is repeated 3 times. Example 2: Input: s = \"ababbc\", k = 2 Output: 5 Explanation: The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.   Constraints: 1 <= s.length <= 104 s consists of only lowercase English letters. 1 <= k <= 105",
        "301": "You are given an integer array nums of length n. Assume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow: F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1]. Return the maximum value of F(0), F(1), ..., F(n-1). The test cases are generated so that the answer fits in a 32-bit integer.   Example 1: Input: nums = [4,3,2,6] Output: 26 Explanation: F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25 F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16 F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23 F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26 So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26. Example 2: Input: nums = [100] Output: 0   Constraints: n == nums.length 1 <= n <= 105 -100 <= nums[i] <= 100",
        "302": "Given a positive integer n, you can apply one of the following operations: If n is even, replace n with n / 2. If n is odd, replace n with either n + 1 or n - 1. Return the minimum number of operations needed for n to become 1.   Example 1: Input: n = 8 Output: 3 Explanation: 8 -> 4 -> 2 -> 1 Example 2: Input: n = 7 Output: 4 Explanation: 7 -> 8 -> 4 -> 2 -> 1 or 7 -> 6 -> 3 -> 2 -> 1 Example 3: Input: n = 4 Output: 2   Constraints: 1 <= n <= 231 - 1",
        "303": "Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array. Implement the Solution class: Solution(int[] nums) Initializes the object with the array nums. int pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i's, then each index should have an equal probability of returning.   Example 1: Input [\"Solution\", \"pick\", \"pick\", \"pick\"] [[[1, 2, 3, 3, 3]], [3], [1], [3]] Output [null, 4, 0, 2]  Explanation Solution solution = new Solution([1, 2, 3, 3, 3]); solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning. solution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1. solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.   Constraints: 1 <= nums.length <= 2 * 104 -231 <= nums[i] <= 231 - 1 target is an integer from nums. At most 104 calls will be made to pick.",
        "304": "You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable. You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?. Return the answers to all queries. If a single answer cannot be determined, return -1.0. Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction. Note: The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.   Example 1: Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]] Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000] Explanation:  Given: a / b = 2.0, b / c = 3.0 queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?  return: [6.0, 0.5, -1.0, 1.0, -1.0 ] note: x is undefined => -1.0 Example 2: Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]] Output: [3.75000,0.40000,5.00000,0.20000] Example 3: Input: equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]] Output: [0.50000,2.00000,-1.00000,-1.00000]   Constraints: 1 <= equations.length <= 20 equations[i].length == 2 1 <= Ai.length, Bi.length <= 5 values.length == equations.length 0.0 < values[i] <= 20.0 1 <= queries.length <= 20 queries[i].length == 2 1 <= Cj.length, Dj.length <= 5 Ai, Bi, Cj, Dj consist of lower case English letters and digits.",
        "305": "Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].   Example 1: Input: n = 3 Output: 3 Example 2: Input: n = 11 Output: 0 Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.   Constraints: 1 <= n <= 231 - 1",
        "306": "A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right. For example, the below binary watch reads \"4:51\". Given an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order. The hour must not contain a leading zero. For example, \"01:00\" is not valid. It should be \"1:00\". The minute must consist of two digits and may contain a leading zero. For example, \"10:2\" is not valid. It should be \"10:02\".   Example 1: Input: turnedOn = 1 Output: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"] Example 2: Input: turnedOn = 9 Output: []   Constraints: 0 <= turnedOn <= 10",
        "307": "A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water. Given a list of stones positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit. If the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.   Example 1: Input: stones = [0,1,3,5,6,8,12,17] Output: true Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone. Example 2: Input: stones = [0,1,2,3,4,8,9,11] Output: false Explanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.   Constraints: 2 <= stones.length <= 2000 0 <= stones[i] <= 231 - 1 stones[0] == 0 stones is sorted in a strictly increasing order.",
        "308": "Given the root of a binary tree, return the sum of all left leaves. A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.   Example 1: Input: root = [3,9,20,null,null,15,7] Output: 24 Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively. Example 2: Input: root = [1] Output: 0   Constraints: The number of nodes in the tree is in the range [1, 1000]. -1000 <= Node.val <= 1000",
        "309": "Given a 32-bit integer num, return a string representing its hexadecimal representation. For negative integers, two’s complement method is used. All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself. Note: You are not allowed to use any built-in library method to directly solve this problem.   Example 1: Input: num = 26 Output: \"1a\" Example 2: Input: num = -1 Output: \"ffffffff\"   Constraints: -231 <= num <= 231 - 1",
        "310": "You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi. Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).   Example 1: Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]] Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] Explanation: Person 0 has height 5 with no other people taller or the same height in front. Person 1 has height 7 with no other people taller or the same height in front. Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1. Person 3 has height 6 with one person taller or the same height in front, which is person 1. Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3. Person 5 has height 7 with one person taller or the same height in front, which is person 1. Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue. Example 2: Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]] Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]   Constraints: 1 <= people.length <= 2000 0 <= hi <= 106 0 <= ki < people.length It is guaranteed that the queue can be reconstructed.",
        "311": "Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.   Example 1: Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]] Output: 4 Explanation: After the rain, water is trapped between the blocks. We have two small ponds 1 and 3 units trapped. The total volume of water trapped is 4. Example 2: Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]] Output: 10   Constraints: m == heightMap.length n == heightMap[i].length 1 <= m, n <= 200 0 <= heightMap[i][j] <= 2 * 104",
        "312": "Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome  that can be built with those letters. Letters are case sensitive, for example, \"Aa\" is not considered a palindrome.   Example 1: Input: s = \"abccccdd\" Output: 7 Explanation: One longest palindrome that can be built is \"dccaccd\", whose length is 7. Example 2: Input: s = \"a\" Output: 1 Explanation: The longest palindrome that can be built is \"a\", whose length is 1.   Constraints: 1 <= s.length <= 2000 s consists of lowercase and/or uppercase English letters only.",
        "313": "Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized. Return the minimized largest sum of the split. A subarray is a contiguous part of the array.   Example 1: Input: nums = [7,2,5,10,8], k = 2 Output: 18 Explanation: There are four ways to split nums into two subarrays. The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18. Example 2: Input: nums = [1,2,3,4,5], k = 2 Output: 9 Explanation: There are four ways to split nums into two subarrays. The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.   Constraints: 1 <= nums.length <= 1000 0 <= nums[i] <= 106 1 <= k <= min(50, nums.length)",
        "314": "Given an integer n, return a string array answer (1-indexed) where: answer[i] == \"FizzBuzz\" if i is divisible by 3 and 5. answer[i] == \"Fizz\" if i is divisible by 3. answer[i] == \"Buzz\" if i is divisible by 5. answer[i] == i (as a string) if none of the above conditions are true.   Example 1: Input: n = 3 Output: [\"1\",\"2\",\"Fizz\"] Example 2: Input: n = 5 Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"] Example 3: Input: n = 15 Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]   Constraints: 1 <= n <= 104",
        "315": "An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same. For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences. Given an integer array nums, return the number of arithmetic subarrays of nums. A subarray is a contiguous subsequence of the array.   Example 1: Input: nums = [1,2,3,4] Output: 3 Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself. Example 2: Input: nums = [1] Output: 0   Constraints: 1 <= nums.length <= 5000 -1000 <= nums[i] <= 1000",
        "316": "Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.   Example 1: Input: nums = [3,2,1] Output: 1 Explanation: The first distinct maximum is 3. The second distinct maximum is 2. The third distinct maximum is 1. Example 2: Input: nums = [1,2] Output: 2 Explanation: The first distinct maximum is 2. The second distinct maximum is 1. The third distinct maximum does not exist, so the maximum (2) is returned instead. Example 3: Input: nums = [2,2,3,1] Output: 1 Explanation: The first distinct maximum is 3. The second distinct maximum is 2 (both 2's are counted together since they have the same value). The third distinct maximum is 1.   Constraints: 1 <= nums.length <= 104 -231 <= nums[i] <= 231 - 1   Follow up: Can you find an O(n) solution?",
        "317": "Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string. You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.   Example 1: Input: num1 = \"11\", num2 = \"123\" Output: \"134\" Example 2: Input: num1 = \"456\", num2 = \"77\" Output: \"533\" Example 3: Input: num1 = \"0\", num2 = \"0\" Output: \"0\"   Constraints: 1 <= num1.length, num2.length <= 104 num1 and num2 consist of only digits. num1 and num2 don't have any leading zeros except for the zero itself.",
        "318": "Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.   Example 1: Input: nums = [1,5,11,5] Output: true Explanation: The array can be partitioned as [1, 5, 5] and [11]. Example 2: Input: nums = [1,2,3,5] Output: false Explanation: The array cannot be partitioned into equal sum subsets.   Constraints: 1 <= nums.length <= 200 1 <= nums[i] <= 100",
        "319": "There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges. The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c). The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean. Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.   Example 1: Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]] Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]] Explanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below: [0,4]: [0,4] -> Pacific Ocean         [0,4] -> Atlantic Ocean [1,3]: [1,3] -> [0,3] -> Pacific Ocean         [1,3] -> [1,4] -> Atlantic Ocean [1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean         [1,4] -> Atlantic Ocean [2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean         [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean [3,0]: [3,0] -> Pacific Ocean         [3,0] -> [4,0] -> Atlantic Ocean [3,1]: [3,1] -> [3,0] -> Pacific Ocean         [3,1] -> [4,1] -> Atlantic Ocean [4,0]: [4,0] -> Pacific Ocean         [4,0] -> Atlantic Ocean Note that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans. Example 2: Input: heights = [[1]] Output: [[0,0]] Explanation: The water can flow from the only cell to the Pacific and Atlantic oceans.   Constraints: m == heights.length n == heights[r].length 1 <= m, n <= 200 0 <= heights[r][c] <= 105",
        "320": "Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board. Battleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).   Example 1: Input: board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]] Output: 2 Example 2: Input: board = [[\".\"]] Output: 0   Constraints: m == board.length n == board[i].length 1 <= m, n <= 200 board[i][j] is either '.' or 'X'.   Follow up: Could you do it in one-pass, using only O(1) extra memory and without modifying the values board?",
        "321": "Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.   Example 1: Input: s = \"owoztneoer\" Output: \"012\" Example 2: Input: s = \"fviefuro\" Output: \"45\"   Constraints: 1 <= s.length <= 105 s[i] is one of the characters [\"e\",\"g\",\"f\",\"i\",\"h\",\"o\",\"n\",\"s\",\"r\",\"u\",\"t\",\"w\",\"v\",\"x\",\"z\"]. s is guaranteed to be valid.",
        "322": "You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times. Return the length of the longest substring containing the same letter you can get after performing the above operations.   Example 1: Input: s = \"ABAB\", k = 2 Output: 4 Explanation: Replace the two 'A's with two 'B's or vice versa. Example 2: Input: s = \"AABABBA\", k = 1 Output: 4 Explanation: Replace the one 'A' in the middle with 'B' and form \"AABBBBA\". The substring \"BBBB\" has the longest repeating letters, which is 4. There may exists other ways to achieve this answer too.   Constraints: 1 <= s.length <= 105 s consists of only uppercase English letters. 0 <= k <= s.length",
        "323": "Given a n * n matrix grid of 0's and 1's only. We want to represent grid with a Quad-Tree. Return the root of the Quad-Tree representing grid. A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes: val: True if the node represents a grid of 1's or False if the node represents a grid of 0's. Notice that you can assign the val to True or False when isLeaf is False, and both are accepted in the answer. isLeaf: True if the node is a leaf node on the tree or False if the node has four children. class Node {     public boolean val;     public boolean isLeaf;     public Node topLeft;     public Node topRight;     public Node bottomLeft;     public Node bottomRight; } We can construct a Quad-Tree from a two-dimensional area using the following steps: If the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop. If the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo. Recurse for each of the children with the proper sub-grid. If you want to know more about the Quad-Tree, you can refer to the wiki. Quad-Tree format: You don't need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below. It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val]. If the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.   Example 1: Input: grid = [[0,1],[1,0]] Output: [[0,1],[1,0],[1,1],[1,1],[1,0]] Explanation: The explanation of this example is shown below: Notice that 0 represents False and 1 represents True in the photo representing the Quad-Tree. Example 2: Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]] Output: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]] Explanation: All values in the grid are not the same. We divide the grid into four sub-grids. The topLeft, bottomLeft and bottomRight each has the same value. The topRight have different values so we divide it into 4 sub-grids where each has the same value. Explanation is shown in the photo below:   Constraints: n == grid.length == grid[i].length n == 2x where 0 <= x <= 6",
        "324": "Given an n-ary tree, return the level order traversal of its nodes' values. Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).   Example 1: Input: root = [1,null,3,2,4,null,5,6] Output: [[1],[3,2,4],[5,6]] Example 2: Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]   Constraints: The height of the n-ary tree is less than or equal to 1000 The total number of nodes is between [0, 104]",
        "325": "Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts. Implement the AllOne class: AllOne() Initializes the object of the data structure. inc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1. dec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement. getMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string \"\". getMinKey() Returns one of the keys with the minimum count. If no element exists, return an empty string \"\". Note that each function must run in O(1) average time complexity.   Example 1: Input [\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"] [[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []] Output [null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]  Explanation AllOne allOne = new AllOne(); allOne.inc(\"hello\"); allOne.inc(\"hello\"); allOne.getMaxKey(); // return \"hello\" allOne.getMinKey(); // return \"hello\" allOne.inc(\"leet\"); allOne.getMaxKey(); // return \"hello\" allOne.getMinKey(); // return \"leet\"   Constraints: 1 <= key.length <= 10 key consists of lowercase English letters. It is guaranteed that for each call to dec, key is existing in the data structure. At most 5 * 104 calls will be made to inc, dec, getMaxKey, and getMinKey.",
        "326": "A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'. Suppose we need to investigate a mutation from a gene string startGene to a gene string endGene where one mutation is defined as one single character changed in the gene string. For example, \"AACCGGTT\" --> \"AACCGGTA\" is one mutation. There is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string. Given the two gene strings startGene and endGene and the gene bank bank, return the minimum number of mutations needed to mutate from startGene to endGene. If there is no such a mutation, return -1. Note that the starting point is assumed to be valid, so it might not be included in the bank.   Example 1: Input: startGene = \"AACCGGTT\", endGene = \"AACCGGTA\", bank = [\"AACCGGTA\"] Output: 1 Example 2: Input: startGene = \"AACCGGTT\", endGene = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"] Output: 2   Constraints: 0 <= bank.length <= 10 startGene.length == endGene.length == bank[i].length == 8 startGene, endGene, and bank[i] consist of only the characters ['A', 'C', 'G', 'T'].",
        "327": "Given a string s, return the number of segments in the string. A segment is defined to be a contiguous sequence of non-space characters.   Example 1: Input: s = \"Hello, my name is John\" Output: 5 Explanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"] Example 2: Input: s = \"Hello\" Output: 1   Constraints: 0 <= s.length <= 300 s consists of lowercase and uppercase English letters, digits, or one of the following characters \"!@#$%^&*()_+-=',.:\". The only space character in s is ' '.",
        "328": "Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping. Note that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping.   Example 1: Input: intervals = [[1,2],[2,3],[3,4],[1,3]] Output: 1 Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping. Example 2: Input: intervals = [[1,2],[1,2],[1,2]] Output: 2 Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping. Example 3: Input: intervals = [[1,2],[2,3]] Output: 0 Explanation: You don't need to remove any of the intervals since they're already non-overlapping.   Constraints: 1 <= intervals.length <= 105 intervals[i].length == 2 -5 * 104 <= starti < endi <= 5 * 104",
        "329": "You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique. The right interval for an interval i is an interval j such that startj >= endi and startj is minimized. Note that i may equal j. Return an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.   Example 1: Input: intervals = [[1,2]] Output: [-1] Explanation: There is only one interval in the collection, so it outputs -1. Example 2: Input: intervals = [[3,4],[2,3],[1,2]] Output: [-1,0,1] Explanation: There is no right interval for [3,4]. The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3. The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2. Example 3: Input: intervals = [[1,4],[2,3],[3,4]] Output: [-1,2,-1] Explanation: There is no right interval for [1,4] and [3,4]. The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.   Constraints: 1 <= intervals.length <= 2 * 104 intervals[i].length == 2 -106 <= starti <= endi <= 106 The start point of each interval is unique.",
        "330": "Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum. The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).   Example 1: Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8 Output: 3 Explanation: The paths that sum to 8 are shown. Example 2: Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22 Output: 3   Constraints: The number of nodes in the tree is in the range [0, 1000]. -109 <= Node.val <= 109 -1000 <= targetSum <= 1000",
        "331": "Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.   Example 1: Input: s = \"cbaebabacd\", p = \"abc\" Output: [0,6] Explanation: The substring with start index = 0 is \"cba\", which is an anagram of \"abc\". The substring with start index = 6 is \"bac\", which is an anagram of \"abc\". Example 2: Input: s = \"abab\", p = \"ab\" Output: [0,1,2] Explanation: The substring with start index = 0 is \"ab\", which is an anagram of \"ab\". The substring with start index = 1 is \"ba\", which is an anagram of \"ab\". The substring with start index = 2 is \"ab\", which is an anagram of \"ab\".   Constraints: 1 <= s.length, p.length <= 3 * 104 s and p consist of lowercase English letters.",
        "332": "Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].   Example 1: Input: n = 13, k = 2 Output: 10 Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10. Example 2: Input: n = 1, k = 1 Output: 1   Constraints: 1 <= k <= n <= 109",
        "333": "You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete. Given the integer n, return the number of complete rows of the staircase you will build.   Example 1: Input: n = 5 Output: 2 Explanation: Because the 3rd row is incomplete, we return 2. Example 2: Input: n = 8 Output: 3 Explanation: Because the 4th row is incomplete, we return 3.   Constraints: 1 <= n <= 231 - 1",
        "334": "Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice. You must write an algorithm that runs in O(n) time and uses only constant auxiliary space, excluding the space needed to store the output   Example 1: Input: nums = [4,3,2,7,8,2,3,1] Output: [2,3] Example 2: Input: nums = [1,1,2] Output: [1] Example 3: Input: nums = [1] Output: []   Constraints: n == nums.length 1 <= n <= 105 1 <= nums[i] <= n Each element in nums appears once or twice.",
        "335": "Given an array of characters chars, compress it using the following algorithm: Begin with an empty string s. For each group of consecutive repeating characters in chars: If the group's length is 1, append the character to s. Otherwise, append the character followed by the group's length. The compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars. After you are done modifying the input array, return the new length of the array. You must write an algorithm that uses only constant extra space.   Example 1: Input: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] Output: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] Explanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\". Example 2: Input: chars = [\"a\"] Output: Return 1, and the first character of the input array should be: [\"a\"] Explanation: The only group is \"a\", which remains uncompressed since it's a single character. Example 3: Input: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"] Output: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"]. Explanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".   Constraints: 1 <= chars.length <= 2000 chars[i] is a lowercase English letter, uppercase English letter, digit, or symbol.",
        "336": "You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself.   Example 1: Input: l1 = [7,2,4,3], l2 = [5,6,4] Output: [7,8,0,7] Example 2: Input: l1 = [2,4,3], l2 = [5,6,4] Output: [8,0,7] Example 3: Input: l1 = [0], l2 = [0] Output: [0]   Constraints: The number of nodes in each linked list is in the range [1, 100]. 0 <= Node.val <= 9 It is guaranteed that the list represents a number that does not have leading zeros.   Follow up: Could you solve it without reversing the input lists?",
        "337": "Given an integer array nums, return the number of all the arithmetic subsequences of nums. A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same. For example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences. For example, [1, 1, 2, 5, 7] is not an arithmetic sequence. A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array. For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10]. The test cases are generated so that the answer fits in 32-bit integer.   Example 1: Input: nums = [2,4,6,8,10] Output: 7 Explanation: All arithmetic subsequence slices are: [2,4,6] [4,6,8] [6,8,10] [2,4,6,8] [4,6,8,10] [2,4,6,8,10] [2,6,10] Example 2: Input: nums = [7,7,7,7,7] Output: 16 Explanation: Any subsequence of this array is arithmetic.   Constraints: 1  <= nums.length <= 1000 -231 <= nums[i] <= 231 - 1",
        "338": "You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters). Return the number of boomerangs.   Example 1: Input: points = [[0,0],[1,0],[2,0]] Output: 2 Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]. Example 2: Input: points = [[1,1],[2,2],[3,3]] Output: 2 Example 3: Input: points = [[1,1]] Output: 0   Constraints: n == points.length 1 <= n <= 500 points[i].length == 2 -104 <= xi, yi <= 104 All the points are unique.",
        "339": "Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.   Example 1: Input: nums = [4,3,2,7,8,2,3,1] Output: [5,6] Example 2: Input: nums = [1,1] Output: [2]   Constraints: n == nums.length 1 <= n <= 105 1 <= nums[i] <= n   Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.",
        "340": "Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST. Basically, the deletion can be divided into two stages: Search for a node to remove. If the node is found, delete the node.   Example 1: Input: root = [5,3,6,2,4,null,7], key = 3 Output: [5,4,6,2,null,null,7] Explanation: Given key to delete is 3. So we find the node with value 3 and delete it. One valid answer is [5,4,6,2,null,null,7], shown in the above BST. Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted. Example 2: Input: root = [5,3,6,2,4,null,7], key = 0 Output: [5,3,6,2,4,null,7] Explanation: The tree does not contain a node with value = 0. Example 3: Input: root = [], key = 0 Output: []   Constraints: The number of nodes in the tree is in the range [0, 104]. -105 <= Node.val <= 105 Each node has a unique value. root is a valid binary search tree. -105 <= key <= 105   Follow up: Could you solve it with time complexity O(height of tree)?",
        "341": "Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string. Return the sorted string. If there are multiple answers, return any of them.   Example 1: Input: s = \"tree\" Output: \"eert\" Explanation: 'e' appears twice while 'r' and 't' both appear once. So 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer. Example 2: Input: s = \"cccaaa\" Output: \"aaaccc\" Explanation: Both 'c' and 'a' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers. Note that \"cacaca\" is incorrect, as the same characters must be together. Example 3: Input: s = \"Aabb\" Output: \"bbAa\" Explanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect. Note that 'A' and 'a' are treated as two different characters.   Constraints: 1 <= s.length <= 5 * 105 s consists of uppercase and lowercase English letters and digits.",
        "342": "There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons. Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path. Given the array points, return the minimum number of arrows that must be shot to burst all balloons.   Example 1: Input: points = [[10,16],[2,8],[1,6],[7,12]] Output: 2 Explanation: The balloons can be burst by 2 arrows: - Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6]. - Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12]. Example 2: Input: points = [[1,2],[3,4],[5,6],[7,8]] Output: 4 Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows. Example 3: Input: points = [[1,2],[2,3],[3,4],[4,5]] Output: 2 Explanation: The balloons can be burst by 2 arrows: - Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3]. - Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].   Constraints: 1 <= points.length <= 105 points[i].length == 2 -231 <= xstart < xend <= 231 - 1",
        "343": "Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal. In one move, you can increment n - 1 elements of the array by 1.   Example 1: Input: nums = [1,2,3] Output: 3 Explanation: Only three moves are needed (remember each move increments two elements): [1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4] Example 2: Input: nums = [1,1,1] Output: 0   Constraints: n == nums.length 1 <= nums.length <= 105 -109 <= nums[i] <= 109 The answer is guaranteed to fit in a 32-bit integer.",
        "344": "Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that: 0 <= i, j, k, l < n nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0   Example 1: Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2] Output: 2 Explanation: The two tuples are: 1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0 2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0 Example 2: Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0] Output: 1   Constraints: n == nums1.length n == nums2.length n == nums3.length n == nums4.length 1 <= n <= 200 -228 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 228",
        "345": "Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j]. Return true if there is a 132 pattern in nums, otherwise, return false.   Example 1: Input: nums = [1,2,3,4] Output: false Explanation: There is no 132 pattern in the sequence. Example 2: Input: nums = [3,1,4,2] Output: true Explanation: There is a 132 pattern in the sequence: [1, 4, 2]. Example 3: Input: nums = [-1,3,2,0] Output: true Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].   Constraints: n == nums.length 1 <= n <= 2 * 105 -109 <= nums[i] <= 109",
        "346": "You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i: If nums[i] is positive, move nums[i] steps forward, and If nums[i] is negative, move nums[i] steps backward. Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element. A cycle in the array consists of a sequence of indices seq of length k where: Following the movement rules above results in the repeating index sequence seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ... Every nums[seq[j]] is either all positive or all negative. k > 1 Return true if there is a cycle in nums, or false otherwise.   Example 1: Input: nums = [2,-1,1,2,2] Output: true Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward. We can see the cycle 0 --> 2 --> 3 --> 0 --> ..., and all of its nodes are white (jumping in the same direction). Example 2: Input: nums = [-1,-2,-3,-4,-5,6] Output: false Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward. The only cycle is of size 1, so we return false. Example 3: Input: nums = [1,-1,5,1,4] Output: true Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward. We can see the cycle 0 --> 1 --> 0 --> ..., and while it is of size > 1, it has a node jumping forward and a node jumping backward, so it is not a cycle. We can see the cycle 3 --> 4 --> 3 --> ..., and all of its nodes are white (jumping in the same direction).   Constraints: 1 <= nums.length <= 5000 -1000 <= nums[i] <= 1000 nums[i] != 0   Follow up: Could you solve it in O(n) time complexity and O(1) extra space complexity?",
        "347": "There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous. You can feed the pigs according to these steps: Choose some live pigs to feed. For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs. Wait for minutesToDie minutes. You may not feed any other pigs during this time. After minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive. Repeat this process until you run out of time. Given buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.   Example 1: Input: buckets = 4, minutesToDie = 15, minutesToTest = 15 Output: 2 Explanation: We can determine the poisonous bucket as follows: At time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3. At time 15, there are 4 possible outcomes: - If only the first pig dies, then bucket 1 must be poisonous. - If only the second pig dies, then bucket 3 must be poisonous. - If both pigs die, then bucket 2 must be poisonous. - If neither pig dies, then bucket 4 must be poisonous. Example 2: Input: buckets = 4, minutesToDie = 15, minutesToTest = 30 Output: 2 Explanation: We can determine the poisonous bucket as follows: At time 0, feed the first pig bucket 1, and feed the second pig bucket 2. At time 15, there are 2 possible outcomes: - If either pig dies, then the poisonous bucket is the one it was fed. - If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4. At time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed.   Constraints: 1 <= buckets <= 1000 1 <= minutesToDie <= minutesToTest <= 100",
        "348": "Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.   Example 1: Input: s = \"abab\" Output: true Explanation: It is the substring \"ab\" twice. Example 2: Input: s = \"aba\" Output: false Example 3: Input: s = \"abcabcabcabc\" Output: true Explanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice.   Constraints: 1 <= s.length <= 104 s consists of lowercase English letters.",
        "349": "Design and implement a data structure for a Least Frequently Used (LFU) cache. Implement the LFUCache class: LFUCache(int capacity) Initializes the object with the capacity of the data structure. int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1. void put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated. To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key. When a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it. The functions get and put must each run in O(1) average time complexity.   Example 1: Input [\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"] [[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]] Output [null, null, null, 1, null, -1, 3, null, -1, 3, 4]  Explanation // cnt(x) = the use counter for key x // cache=[] will show the last used order for tiebreakers (leftmost element is  most recent) LFUCache lfu = new LFUCache(2); lfu.put(1, 1);   // cache=[1,_], cnt(1)=1 lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1 lfu.get(1);      // return 1                  // cache=[1,2], cnt(2)=1, cnt(1)=2 lfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.                  // cache=[3,1], cnt(3)=1, cnt(1)=2 lfu.get(2);      // return -1 (not found) lfu.get(3);      // return 3                  // cache=[3,1], cnt(3)=2, cnt(1)=2 lfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.                  // cache=[4,3], cnt(4)=1, cnt(3)=2 lfu.get(1);      // return -1 (not found) lfu.get(3);      // return 3                  // cache=[3,4], cnt(4)=1, cnt(3)=3 lfu.get(4);      // return 4                  // cache=[4,3], cnt(4)=2, cnt(3)=3   Constraints: 1 <= capacity <= 104 0 <= key <= 105 0 <= value <= 109 At most 2 * 105 calls will be made to get and put.  ",
        "350": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different. Given two integers x and y, return the Hamming distance between them.   Example 1: Input: x = 1, y = 4 Output: 2 Explanation: 1   (0 0 0 1) 4   (0 1 0 0)        ↑   ↑ The above arrows point to positions where the corresponding bits are different. Example 2: Input: x = 3, y = 1 Output: 1   Constraints: 0 <= x, y <= 231 - 1   Note: This question is the same as 2220: Minimum Bit Flips to Convert Number.",
        "351": "Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal. In one move, you can increment or decrement an element of the array by 1. Test cases are designed so that the answer will fit in a 32-bit integer.   Example 1: Input: nums = [1,2,3] Output: 2 Explanation: Only two moves are needed (remember each move increments or decrements one element): [1,2,3]  =>  [2,2,3]  =>  [2,2,2] Example 2: Input: nums = [1,10,2,9] Output: 16   Constraints: n == nums.length 1 <= nums.length <= 105 -109 <= nums[i] <= 109",
        "352": "You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.   Example 1: Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]] Output: 16 Explanation: The perimeter is the 16 yellow stripes in the image above. Example 2: Input: grid = [[1]] Output: 4 Example 3: Input: grid = [[1,0]] Output: 4   Constraints: row == grid.length col == grid[i].length 1 <= row, col <= 100 grid[i][j] is 0 or 1. There is exactly one island in grid.",
        "353": "In the \"100 game\" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins. What if we change the game so that players cannot re-use integers? For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100. Given two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.   Example 1: Input: maxChoosableInteger = 10, desiredTotal = 11 Output: false Explanation: No matter which integer the first player choose, the first player will lose. The first player can choose an integer from 1 up to 10. If the first player choose 1, the second player can only choose integers from 2 up to 10. The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal. Same with other integers chosen by the first player, the second player will always win. Example 2: Input: maxChoosableInteger = 10, desiredTotal = 0 Output: true Example 3: Input: maxChoosableInteger = 10, desiredTotal = 1 Output: true   Constraints: 1 <= maxChoosableInteger <= 20 0 <= desiredTotal <= 300",
        "354": "We define str = [s, n] as the string str which consists of the string s concatenated n times. For example, str == [\"abc\", 3] ==\"abcabcabc\". We define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. For example, s1 = \"abc\" can be obtained from s2 = \"abdbec\" based on our definition by removing the bolded underlined characters. You are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2]. Return the maximum integer m such that str = [str2, m] can be obtained from str1.   Example 1: Input: s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2 Output: 2 Example 2: Input: s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1 Output: 1   Constraints: 1 <= s1.length, s2.length <= 100 s1 and s2 consist of lowercase English letters. 1 <= n1, n2 <= 106",
        "355": "Given a string queryIP, return \"IPv4\" if IP is a valid IPv4 address, \"IPv6\" if IP is a valid IPv6 address or \"Neither\" if IP is not a correct IP of any type. A valid IPv4 address is an IP in the form \"x1.x2.x3.x4\" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, \"192.168.1.1\" and \"192.168.1.0\" are valid IPv4 addresses while \"192.168.01.1\", \"192.168.1.00\", and \"192.168@1.1\" are invalid IPv4 addresses. A valid IPv6 address is an IP in the form \"x1:x2:x3:x4:x5:x6:x7:x8\" where: 1 <= xi.length <= 4 xi is a hexadecimal string which may contain digits, lowercase English letter ('a' to 'f') and upper-case English letters ('A' to 'F'). Leading zeros are allowed in xi. For example, \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\" and \"2001:db8:85a3:0:0:8A2E:0370:7334\" are valid IPv6 addresses, while \"2001:0db8:85a3::8A2E:037j:7334\" and \"02001:0db8:85a3:0000:0000:8a2e:0370:7334\" are invalid IPv6 addresses.   Example 1: Input: queryIP = \"172.16.254.1\" Output: \"IPv4\" Explanation: This is a valid IPv4 address, return \"IPv4\". Example 2: Input: queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\" Output: \"IPv6\" Explanation: This is a valid IPv6 address, return \"IPv6\". Example 3: Input: queryIP = \"256.256.256.256\" Output: \"Neither\" Explanation: This is neither a IPv4 address nor a IPv6 address.   Constraints: queryIP consists only of English letters, digits and the characters '.' and ':'.",
        "356": "Given the API rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. You can only call the API rand7(), and you shouldn't call any other API. Please do not use a language's built-in random API. Each test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. Note that this is not an argument passed to rand10().   Example 1: Input: n = 1 Output: [2] Example 2: Input: n = 2 Output: [2,8] Example 3: Input: n = 3 Output: [3,8,10]   Constraints: 1 <= n <= 105   Follow up: What is the expected value for the number of calls to rand7() function? Could you minimize the number of calls to rand7()?",
        "357": "Given an array of strings words (without duplicates), return all the concatenated words in the given list of words. A concatenated word is defined as a string that is comprised entirely of at least two shorter words (not necessarily distinct) in the given array.   Example 1: Input: words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"] Output: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"] Explanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\";  \"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\";  \"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\". Example 2: Input: words = [\"cat\",\"dog\",\"catdog\"] Output: [\"catdog\"]   Constraints: 1 <= words.length <= 104 1 <= words[i].length <= 30 words[i] consists of only lowercase English letters. All the strings of words are unique. 1 <= sum(words[i].length) <= 105",
        "358": "You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time. Return true if you can make this square and false otherwise.   Example 1: Input: matchsticks = [1,1,2,2,2] Output: true Explanation: You can form a square with length 2, one side of the square came two sticks with length 1. Example 2: Input: matchsticks = [3,3,3,3,4] Output: false Explanation: You cannot find a way to form a square with all the matchsticks.   Constraints: 1 <= matchsticks.length <= 15 1 <= matchsticks[i] <= 108",
        "359": "You are given an array of binary strings strs and two integers m and n. Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset. A set x is a subset of a set y if all elements of x are also elements of y.   Example 1: Input: strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3 Output: 4 Explanation: The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4. Other valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}. {\"111001\"} is an invalid subset because it contains 4 1's, greater than the maximum of 3. Example 2: Input: strs = [\"10\",\"0\",\"1\"], m = 1, n = 1 Output: 2 Explanation: The largest subset is {\"0\", \"1\"}, so the answer is 2.   Constraints: 1 <= strs.length <= 600 1 <= strs[i].length <= 100 strs[i] consists only of digits '0' and '1'. 1 <= m, n <= 100",
        "360": "Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses. Every house can be warmed, as long as the house is within the heater's warm radius range.  Given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses. Notice that all the heaters follow your radius standard, and the warm radius will the same.   Example 1: Input: houses = [1,2,3], heaters = [2] Output: 1 Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed. Example 2: Input: houses = [1,2,3,4], heaters = [1,4] Output: 1 Explanation: The two heaters were placed at positions 1 and 4. We need to use a radius 1 standard, then all the houses can be warmed. Example 3: Input: houses = [1,5], heaters = [2] Output: 3   Constraints: 1 <= houses.length, heaters.length <= 3 * 104 1 <= houses[i], heaters[i] <= 109",
        "361": "The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation. For example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2. Given an integer num, return its complement.   Example 1: Input: num = 5 Output: 2 Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2. Example 2: Input: num = 1 Output: 0 Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.   Constraints: 1 <= num < 231   Note: This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/",
        "362": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different. Given an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.   Example 1: Input: nums = [4,14,2] Output: 6 Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just showing the four bits relevant in this case). The answer will be: HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6. Example 2: Input: nums = [4,14,4] Output: 4   Constraints: 1 <= nums.length <= 104 0 <= nums[i] <= 109 The answer for the given input will fit in a 32-bit integer.",
        "363": "Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle. Implement the Solution class: Solution(double radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center). randPoint() returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array [x, y].   Example 1: Input [\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"] [[1.0, 0.0, 0.0], [], [], []] Output [null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]  Explanation Solution solution = new Solution(1.0, 0.0, 0.0); solution.randPoint(); // return [-0.02493, -0.38077] solution.randPoint(); // return [0.82314, 0.38945] solution.randPoint(); // return [0.36572, 0.17248]   Constraints: 0 < radius <= 108 -107 <= x_center, y_center <= 107 At most 3 * 104 calls will be made to randPoint.",
        "364": "Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.   Example 1: Input: n = 2 Output: 987 Explanation: 99 x 91 = 9009, 9009 % 1337 = 987 Example 2: Input: n = 1 Output: 9   Constraints: 1 <= n <= 8",
        "365": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values. For examples, if arr = [2,3,4], the median is 3. For examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5. You are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the median array for each window in the original array. Answers within 10-5 of the actual value will be accepted.   Example 1: Input: nums = [1,3,-1,-3,5,3,6,7], k = 3 Output: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000] Explanation:  Window position                Median ---------------                ----- [1  3  -1] -3  5  3  6  7        1  1 [3  -1  -3] 5  3  6  7       -1  1  3 [-1  -3  5] 3  6  7       -1  1  3  -1 [-3  5  3] 6  7        3  1  3  -1  -3 [5  3  6] 7        5  1  3  -1  -3  5 [3  6  7]       6 Example 2: Input: nums = [1,2,3,4,2,3,1,4,2], k = 3 Output: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]   Constraints: 1 <= k <= nums.length <= 105 -231 <= nums[i] <= 231 - 1",
        "366": "A magical string s consists of only '1' and '2' and obeys the following rules: The string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself. The first few elements of s is s = \"1221121221221121122……\". If we group the consecutive 1's and 2's in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22 ......\" and the occurrences of 1's or 2's in each group are \"1 2 2 1 1 2 1 2 2 1 2 2 ......\". You can see that the occurrence sequence is s itself. Given an integer n, return the number of 1's in the first n number in the magical string s.   Example 1: Input: n = 6 Output: 3 Explanation: The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3. Example 2: Input: n = 1 Output: 1   Constraints: 1 <= n <= 105",
        "367": "You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k. We want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase. Return the reformatted license key.   Example 1: Input: s = \"5F3Z-2e-9-w\", k = 4 Output: \"5F3Z-2E9W\" Explanation: The string s has been split into two parts, each part has 4 characters. Note that the two extra dashes are not needed and can be removed. Example 2: Input: s = \"2-5g-3-J\", k = 2 Output: \"2-5G-3J\" Explanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.   Constraints: 1 <= s.length <= 105 s consists of English letters, digits, and dashes '-'. 1 <= k <= 104",
        "368": "Given an integer n represented as a string, return the smallest good base of n. We call k >= 2 a good base of n, if all digits of n base k are 1's.   Example 1: Input: n = \"13\" Output: \"3\" Explanation: 13 base 3 is 111. Example 2: Input: n = \"4681\" Output: \"8\" Explanation: 4681 base 8 is 11111. Example 3: Input: n = \"1000000000000000000\" Output: \"999999999999999999\" Explanation: 1000000000000000000 base 999999999999999999 is 11.   Constraints: n is an integer in the range [3, 1018]. n does not contain any leading zeros.",
        "369": "Given a binary array nums, return the maximum number of consecutive 1's in the array.   Example 1: Input: nums = [1,1,0,1,1,1] Output: 3 Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3. Example 2: Input: nums = [1,0,1,1,0,1] Output: 2   Constraints: 1 <= nums.length <= 105 nums[i] is either 0 or 1.",
        "370": "You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2. Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array. Return true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally.   Example 1: Input: nums = [1,5,2] Output: false Explanation: Initially, player 1 can choose between 1 and 2.  If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2).  So, final score of player 1 is 1 + 2 = 3, and player 2 is 5.  Hence, player 1 will never be the winner and you need to return false. Example 2: Input: nums = [1,5,233,7] Output: true Explanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233. Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.   Constraints: 1 <= nums.length <= 20 0 <= nums[i] <= 107",
        "371": "You are playing a variation of the game Zuma. In this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red 'R', yellow 'Y', blue 'B', green 'G', or white 'W'. You also have several colored balls in your hand. Your goal is to clear all of the balls from the board. On each turn: Pick any ball from your hand and insert it in between two balls in the row or on either end of the row. If there is a group of three or more consecutive balls of the same color, remove the group of balls from the board. If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left. If there are no more balls on the board, then you win the game. Repeat this process until you either win or do not have any more balls in your hand. Given a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return -1.   Example 1: Input: board = \"WRRBBW\", hand = \"RB\" Output: -1 Explanation: It is impossible to clear all the balls. The best you can do is: - Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW. - Insert 'B' so the board becomes WBBBW. WBBBW -> WW. There are still balls remaining on the board, and you are out of balls to insert. Example 2: Input: board = \"WWRRBBWW\", hand = \"WRBRW\" Output: 2 Explanation: To make the board empty: - Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW. - Insert 'B' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty. 2 balls from your hand were needed to clear the board. Example 3: Input: board = \"G\", hand = \"GGGGG\" Output: 2 Explanation: To make the board empty: - Insert 'G' so the board becomes GG. - Insert 'G' so the board becomes GGG. GGG -> empty. 2 balls from your hand were needed to clear the board.   Constraints: 1 <= board.length <= 16 1 <= hand.length <= 5 board and hand consist of the characters 'R', 'Y', 'B', 'G', and 'W'. The initial row of balls on the board will not have any groups of three or more consecutive balls of the same color.",
        "372": "Given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order.   Example 1: Input: nums = [4,6,7,7] Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]] Example 2: Input: nums = [4,4,3,2,1] Output: [[4,4]]   Constraints: 1 <= nums.length <= 15 -100 <= nums[i] <= 100",
        "373": "A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements: The area of the rectangular web page you designed must equal to the given target area. The width W should not be larger than the length L, which means L >= W. The difference between length L and width W should be as small as possible. Return an array [L, W] where L and W are the length and width of the web page you designed in sequence.   Example 1: Input: area = 4 Output: [2,2] Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1].  But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2. Example 2: Input: area = 37 Output: [37,1] Example 3: Input: area = 122122 Output: [427,286]   Constraints: 1 <= area <= 107",
        "374": "Given an integer array nums, return the number of reverse pairs in the array. A reverse pair is a pair (i, j) where: 0 <= i < j < nums.length and nums[i] > 2 * nums[j].   Example 1: Input: nums = [1,3,2,3,1] Output: 2 Explanation: The reverse pairs are: (1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1 (3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1 Example 2: Input: nums = [2,4,3,5,1] Output: 3 Explanation: The reverse pairs are: (1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1 (2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1 (3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1   Constraints: 1 <= nums.length <= 5 * 104 -231 <= nums[i] <= 231 - 1",
        "375": "You are given an integer array nums and an integer target. You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers. For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression \"+2-1\". Return the number of different expressions that you can build, which evaluates to target.   Example 1: Input: nums = [1,1,1,1,1], target = 3 Output: 5 Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3. -1 + 1 + 1 + 1 + 1 = 3 +1 - 1 + 1 + 1 + 1 = 3 +1 + 1 - 1 + 1 + 1 = 3 +1 + 1 + 1 - 1 + 1 = 3 +1 + 1 + 1 + 1 - 1 = 3 Example 2: Input: nums = [1], target = 1 Output: 1   Constraints: 1 <= nums.length <= 20 0 <= nums[i] <= 1000 0 <= sum(nums[i]) <= 1000 -1000 <= target <= 1000",
        "376": "Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack. You are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration. Return the total number of seconds that Ashe is poisoned.   Example 1: Input: timeSeries = [1,4], duration = 2 Output: 4 Explanation: Teemo's attacks on Ashe go as follows: - At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2. - At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5. Ashe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total. Example 2: Input: timeSeries = [1,2], duration = 2 Output: 3 Explanation: Teemo's attacks on Ashe go as follows: - At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2. - At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3. Ashe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.   Constraints: 1 <= timeSeries.length <= 104 0 <= timeSeries[i], duration <= 107 timeSeries is sorted in non-decreasing order.",
        "377": "The next greater element of some element x in an array is the first greater element that is to the right of x in the same array. You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2. For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1. Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.   Example 1: Input: nums1 = [4,1,2], nums2 = [1,3,4,2] Output: [-1,3,-1] Explanation: The next greater element for each value of nums1 is as follows: - 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1. - 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3. - 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1. Example 2: Input: nums1 = [2,4], nums2 = [1,2,3,4] Output: [3,-1] Explanation: The next greater element for each value of nums1 is as follows: - 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3. - 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.   Constraints: 1 <= nums1.length <= nums2.length <= 1000 0 <= nums1[i], nums2[i] <= 104 All integers in nums1 and nums2 are unique. All the integers of nums1 also appear in nums2.   Follow up: Could you find an O(nums1.length + nums2.length) solution?",
        "378": "You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle. Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned. Note that an integer point is a point that has integer coordinates. Implement the Solution class: Solution(int[][] rects) Initializes the object with the given rectangles rects. int[] pick() Returns a random integer point [u, v] inside the space covered by one of the given rectangles.   Example 1: Input [\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"] [[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []] Output [null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]  Explanation Solution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]); solution.pick(); // return [1, -2] solution.pick(); // return [1, -1] solution.pick(); // return [-1, -2] solution.pick(); // return [-2, -2] solution.pick(); // return [0, 0]   Constraints: 1 <= rects.length <= 100 rects[i].length == 4 -109 <= ai < xi <= 109 -109 <= bi < yi <= 109 xi - ai <= 2000 yi - bi <= 2000 All the rectangles do not overlap. At most 104 calls will be made to pick.",
        "379": "Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.   Example 1: Input: mat = [[1,2,3],[4,5,6],[7,8,9]] Output: [1,2,4,7,5,3,6,8,9] Example 2: Input: mat = [[1,2],[3,4]] Output: [1,2,3,4]   Constraints: m == mat.length n == mat[i].length 1 <= m, n <= 104 1 <= m * n <= 104 -105 <= mat[i][j] <= 105",
        "380": "Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below. In the American keyboard: the first row consists of the characters \"qwertyuiop\", the second row consists of the characters \"asdfghjkl\", and the third row consists of the characters \"zxcvbnm\".   Example 1: Input: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"] Output: [\"Alaska\",\"Dad\"] Example 2: Input: words = [\"omk\"] Output: [] Example 3: Input: words = [\"adsdf\",\"sfd\"] Output: [\"adsdf\",\"sfd\"]   Constraints: 1 <= words.length <= 20 1 <= words[i].length <= 100 words[i] consists of English letters (both lowercase and uppercase). ",
        "381": "Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects. You are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it. Initially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital. Pick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital. The answer is guaranteed to fit in a 32-bit signed integer.   Example 1: Input: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1] Output: 4 Explanation: Since your initial capital is 0, you can only start the project indexed 0. After finishing it you will obtain profit 1 and your capital becomes 1. With capital 1, you can either start the project indexed 1 or the project indexed 2. Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital. Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4. Example 2: Input: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2] Output: 6   Constraints: 1 <= k <= 105 0 <= w <= 109 n == profits.length n == capital.length 1 <= n <= 105 0 <= profits[i] <= 104 0 <= capital[i] <= 109",
        "382": "Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums. The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.   Example 1: Input: nums = [1,2,1] Output: [2,-1,2] Explanation: The first 1's next greater number is 2;  The number 2 can't find next greater number.  The second 1's next greater number needs to search circularly, which is also 2. Example 2: Input: nums = [1,2,3,4,3] Output: [2,3,4,-1,4]   Constraints: 1 <= nums.length <= 104 -109 <= nums[i] <= 109",
        "383": "Given an integer num, return a string of its base 7 representation.   Example 1: Input: num = 100 Output: \"202\" Example 2: Input: num = -7 Output: \"-10\"   Constraints: -107 <= num <= 107",
        "384": "You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique. The athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank: The 1st place athlete's rank is \"Gold Medal\". The 2nd place athlete's rank is \"Silver Medal\". The 3rd place athlete's rank is \"Bronze Medal\". For the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is \"x\"). Return an array answer of size n where answer[i] is the rank of the ith athlete.   Example 1: Input: score = [5,4,3,2,1] Output: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"] Explanation: The placements are [1st, 2nd, 3rd, 4th, 5th]. Example 2: Input: score = [10,3,8,9,4] Output: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"] Explanation: The placements are [1st, 5th, 3rd, 2nd, 4th].   Constraints: n == score.length 1 <= n <= 104 0 <= score[i] <= 106 All the values in score are unique.",
        "385": "A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly. Given an integer n, return true if n is a perfect number, otherwise return false.   Example 1: Input: num = 28 Output: true Explanation: 28 = 1 + 2 + 4 + 7 + 14 1, 2, 4, 7, and 14 are all divisors of 28. Example 2: Input: num = 7 Output: false   Constraints: 1 <= num <= 108",
        "386": "Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).   Example 1: Input: root = [5,2,-3] Output: [2,-3,4] Example 2: Input: root = [5,2,-5] Output: [2]   Constraints: The number of nodes in the tree is in the range [1, 104]. -105 <= Node.val <= 105",
        "387": "The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is, F(0) = 0, F(1) = 1 F(n) = F(n - 1) + F(n - 2), for n > 1. Given n, calculate F(n).   Example 1: Input: n = 2 Output: 1 Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1. Example 2: Input: n = 3 Output: 2 Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2. Example 3: Input: n = 4 Output: 3 Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.   Constraints: 0 <= n <= 30",
        "388": "SQL Schema Pandas Schema",
        "389": "Given the root of a binary tree, return the leftmost value in the last row of the tree.   Example 1: Input: root = [2,1,3] Output: 1 Example 2: Input: root = [1,2,3,4,null,5,6,null,null,7] Output: 7   Constraints: The number of nodes in the tree is in the range [1, 104]. -231 <= Node.val <= 231 - 1",
        "390": "In the video game Fallout 4, the quest \"Road to Freedom\" requires players to reach a metal dial called the \"Freedom Trail Ring\" and use the dial to spell a specific keyword to open the door. Given a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword. Initially, the first character of the ring is aligned at the \"12:00\" direction. You should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the \"12:00\" direction and then by pressing the center button. At the stage of rotating the ring to spell the key character key[i]: You can rotate the ring clockwise or anticlockwise by one place, which counts as one step. The final purpose of the rotation is to align one of ring's characters at the \"12:00\" direction, where this character must equal key[i]. If the character key[i] has been aligned at the \"12:00\" direction, press the center button to spell, which also counts as one step. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.   Example 1: Input: ring = \"godding\", key = \"gd\" Output: 4 Explanation: For the first key character 'g', since it is already in place, we just need 1 step to spell this character.  For the second key character 'd', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\". Also, we need 1 more step for spelling. So the final output is 4. Example 2: Input: ring = \"godding\", key = \"godding\" Output: 13   Constraints: 1 <= ring.length, key.length <= 100 ring and key consist of only lower case English letters. It is guaranteed that key could always be spelled by rotating ring.",
        "391": "Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).   Example 1: Input: root = [1,3,2,5,3,null,9] Output: [1,3,9] Example 2: Input: root = [1,2,3] Output: [1,3]   Constraints: The number of nodes in the tree will be in the range [0, 104]. -231 <= Node.val <= 231 - 1",
        "392": "Given a string s, find the longest palindromic subsequence's length in s. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.   Example 1: Input: s = \"bbbab\" Output: 4 Explanation: One possible longest palindromic subsequence is \"bbbb\". Example 2: Input: s = \"cbbd\" Output: 2 Explanation: One possible longest palindromic subsequence is \"bb\".   Constraints: 1 <= s.length <= 1000 s consists only of lowercase English letters.",
        "393": "You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty. For each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time. Given an integer array machines representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.   Example 1: Input: machines = [1,0,5] Output: 3 Explanation: 1st move:    1     0 <-- 5    =>    1     1     4 2nd move:    1 <-- 1 <-- 4    =>    2     1     3 3rd move:    2     1 <-- 3    =>    2     2     2 Example 2: Input: machines = [0,3,0] Output: 2 Explanation: 1st move:    0 <-- 3     0    =>    1     2     0 2nd move:    1     2 --> 0    =>    1     1     1 Example 3: Input: machines = [0,2,0] Output: -1 Explanation: It's impossible to make all three washing machines have the same number of dresses.   Constraints: n == machines.length 1 <= n <= 104 0 <= machines[i] <= 105",
        "394": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0. You may assume that you have an infinite number of each kind of coin. The answer is guaranteed to fit into a signed 32-bit integer.   Example 1: Input: amount = 5, coins = [1,2,5] Output: 4 Explanation: there are four ways to make up the amount: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1 Example 2: Input: amount = 3, coins = [2] Output: 0 Explanation: the amount of 3 cannot be made up just with coins of 2. Example 3: Input: amount = 10, coins = [10] Output: 1   Constraints: 1 <= coins.length <= 300 1 <= coins[i] <= 5000 All the values of coins are unique. 0 <= amount <= 5000",
        "395": "There is an m x n binary grid matrix with all the values set 0 initially. Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned. Optimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity. Implement the Solution class: Solution(int m, int n) Initializes the object with the size of the binary matrix m and n. int[] flip() Returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1. void reset() Resets all the values of the matrix to be 0.   Example 1: Input [\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"] [[3, 1], [], [], [], [], []] Output [null, [1, 0], [2, 0], [0, 0], null, [2, 0]]  Explanation Solution solution = new Solution(3, 1); solution.flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned. solution.flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0] solution.flip();  // return [0, 0], Based on the previously returned indices, only [0,0] can be returned. solution.reset(); // All the values are reset to 0 and can be returned. solution.flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.   Constraints: 1 <= m, n <= 104 There will be at least one free cell for each call to flip. At most 1000 calls will be made to flip and reset.",
        "396": "We define the usage of capitals in a word to be right when one of the following cases holds: All letters in this word are capitals, like \"USA\". All letters in this word are not capitals, like \"leetcode\". Only the first letter in this word is capital, like \"Google\". Given a string word, return true if the usage of capitals in it is right.   Example 1: Input: word = \"USA\" Output: true Example 2: Input: word = \"FlaG\" Output: false   Constraints: 1 <= word.length <= 100 word consists of lowercase and uppercase English letters.",
        "397": "Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If no such uncommon subsequence exists, return -1. An uncommon subsequence between two strings is a string that is a subsequence of exactly one of them.   Example 1: Input: a = \"aba\", b = \"cdc\" Output: 3 Explanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\". Note that \"cdc\" is also a longest uncommon subsequence. Example 2: Input: a = \"aaa\", b = \"bbb\" Output: 3 Explanation: The longest uncommon subsequences are \"aaa\" and \"bbb\". Example 3: Input: a = \"aaa\", b = \"aaa\" Output: -1 Explanation: Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a. So the answer would be -1.   Constraints: 1 <= a.length, b.length <= 100 a and b consist of lower-case English letters.",
        "398": "Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1. An uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others. A subsequence of a string s is a string that can be obtained after deleting any number of characters from s. For example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string).   Example 1: Input: strs = [\"aba\",\"cdc\",\"eae\"] Output: 3 Example 2: Input: strs = [\"aaa\",\"aaa\",\"aa\"] Output: -1   Constraints: 2 <= strs.length <= 50 1 <= strs[i].length <= 10 strs[i] consists of lowercase English letters.",
        "399": "Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise. A good subarray is a subarray where: its length is at least two, and the sum of the elements of the subarray is a multiple of k. Note that: A subarray is a contiguous part of the array. An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.   Example 1: Input: nums = [23,2,4,6,7], k = 6 Output: true Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6. Example 2: Input: nums = [23,2,6,4,7], k = 6 Output: true Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42. 42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer. Example 3: Input: nums = [23,2,6,4,7], k = 13 Output: false   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109 0 <= sum(nums[i]) <= 231 - 1 1 <= k <= 231 - 1",
        "400": "Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.   Example 1: Input: s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"] Output: \"apple\" Example 2: Input: s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"] Output: \"a\"   Constraints: 1 <= s.length <= 1000 1 <= dictionary.length <= 1000 1 <= dictionary[i].length <= 1000 s and dictionary[i] consist of lowercase English letters.",
        "401": "Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.   Example 1: Input: nums = [0,1] Output: 2 Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1. Example 2: Input: nums = [0,1,0] Output: 2 Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.   Constraints: 1 <= nums.length <= 105 nums[i] is either 0 or 1.",
        "402": "You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index. You need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w). For example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).   Example 1: Input [\"Solution\",\"pickIndex\"] [[[1]],[]] Output [null,0]  Explanation Solution solution = new Solution([1]); solution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w. Example 2: Input [\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"] [[[1,3]],[],[],[],[],[]] Output [null,1,1,1,1,0]  Explanation Solution solution = new Solution([1, 3]); solution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4. solution.pickIndex(); // return 1 solution.pickIndex(); // return 1 solution.pickIndex(); // return 1 solution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.  Since this is a randomization problem, multiple answers are allowed. All of the following outputs can be considered correct: [null,1,1,1,1,0] [null,1,1,1,1,1] [null,1,1,1,0,0] [null,1,1,1,0,1] [null,1,0,1,0,0] ...... and so on.   Constraints: 1 <= w.length <= 104 1 <= w[i] <= 105 pickIndex will be called at most 104 times.",
        "403": "Let's play the minesweeper game (Wikipedia, online game)! You are given an m x n char matrix board representing the game board where: 'M' represents an unrevealed mine, 'E' represents an unrevealed empty square, 'B' represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals), digit ('1' to '8') represents how many mines are adjacent to this revealed square, and 'X' represents a revealed mine. You are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares ('M' or 'E'). Return the board after revealing this position according to the following rules: If a mine 'M' is revealed, then the game is over. You should change it to 'X'. If an empty square 'E' with no adjacent mines is revealed, then change it to a revealed blank 'B' and all of its adjacent unrevealed squares should be revealed recursively. If an empty square 'E' with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines. Return the board when no more squares will be revealed.   Example 1: Input: board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0] Output: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]] Example 2: Input: board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2] Output: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]   Constraints: m == board.length n == board[i].length 1 <= m, n <= 50 board[i][j] is either 'M', 'E', 'B', or a digit from '1' to '8'. click.length == 2 0 <= clickr < m 0 <= clickc < n board[clickr][clickc] is either 'M' or 'E'.",
        "404": "Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.   Example 1: Input: root = [4,2,6,1,3] Output: 1 Example 2: Input: root = [1,0,48,null,null,12,49] Output: 1   Constraints: The number of nodes in the tree is in the range [2, 104]. 0 <= Node.val <= 105   Note: This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/",
        "405": "Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array. A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true: 0 <= i, j < nums.length i != j |nums[i] - nums[j]| == k Notice that |val| denotes the absolute value of val.   Example 1: Input: nums = [3,1,4,1,5], k = 2 Output: 2 Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5). Although we have two 1s in the input, we should only return the number of unique pairs. Example 2: Input: nums = [1,2,3,4,5], k = 1 Output: 4 Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5). Example 3: Input: nums = [1,3,1,5,4], k = 0 Output: 1 Explanation: There is one 0-diff pair in the array, (1, 1).   Constraints: 1 <= nums.length <= 104 -107 <= nums[i] <= 107 0 <= k <= 107",
        "406": "Note: This is a companion problem to the System Design problem: Design TinyURL. TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL. Implement the Solution class: Solution() Initializes the object of the system. String encode(String longUrl) Returns a tiny URL for the given longUrl. String decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object.   Example 1: Input: url = \"https://leetcode.com/problems/design-tinyurl\" Output: \"https://leetcode.com/problems/design-tinyurl\"  Explanation: Solution obj = new Solution(); string tiny = obj.encode(url); // returns the encoded tiny url. string ans = obj.decode(tiny); // returns the original url after decoding it.   Constraints: 1 <= url.length <= 104 url is guranteed to be a valid URL.",
        "407": "A complex number can be represented as a string on the form \"real+imaginaryi\" where: real is the real part and is an integer in the range [-100, 100]. imaginary is the imaginary part and is an integer in the range [-100, 100]. i2 == -1. Given two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.   Example 1: Input: num1 = \"1+1i\", num2 = \"1+1i\" Output: \"0+2i\" Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i. Example 2: Input: num1 = \"1+-1i\", num2 = \"1+-1i\" Output: \"0+-2i\" Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.   Constraints: num1 and num2 are valid complex numbers.",
        "408": "Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST. As a reminder, a binary search tree is a tree that satisfies these constraints: The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees.   Example 1: Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8] Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8] Example 2: Input: root = [0,null,1] Output: [1,null,1]   Constraints: The number of nodes in the tree is in the range [0, 104]. -104 <= Node.val <= 104 All the values in the tree are unique. root is guaranteed to be a valid binary search tree.   Note: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/",
        "409": "Given a list of 24-hour clock time points in \"HH:MM\" format, return the minimum minutes difference between any two time-points in the list.   Example 1: Input: timePoints = [\"23:59\",\"00:00\"] Output: 1 Example 2: Input: timePoints = [\"00:00\",\"23:59\",\"00:00\"] Output: 0   Constraints: 2 <= timePoints.length <= 2 * 104 timePoints[i] is in the format \"HH:MM\".",
        "410": "Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string. If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.   Example 1: Input: s = \"abcdefg\", k = 2 Output: \"bacdfeg\" Example 2: Input: s = \"abcd\", k = 2 Output: \"bacd\"   Constraints: 1 <= s.length <= 104 s consists of only lowercase English letters. 1 <= k <= 104",
        "411": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell. The distance between two adjacent cells is 1.   Example 1: Input: mat = [[0,0,0],[0,1,0],[0,0,0]] Output: [[0,0,0],[0,1,0],[0,0,0]] Example 2: Input: mat = [[0,0,0],[0,1,0],[1,1,1]] Output: [[0,0,0],[0,1,0],[1,2,1]]   Constraints: m == mat.length n == mat[i].length 1 <= m, n <= 104 1 <= m * n <= 104 mat[i][j] is either 0 or 1. There is at least one 0 in mat.",
        "412": "Given the root of a binary tree, return the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. The length of a path between two nodes is represented by the number of edges between them.   Example 1: Input: root = [1,2,3,4,5] Output: 3 Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3]. Example 2: Input: root = [1,2] Output: 1   Constraints: The number of nodes in the tree is in the range [1, 104]. -100 <= Node.val <= 100",
        "413": "You are given several boxes with different colors represented by different positive numbers. You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of k boxes, k >= 1), remove them and get k * k points. Return the maximum points you can get.   Example 1: Input: boxes = [1,3,2,2,2,3,4,3,1] Output: 23 Explanation: [1, 3, 2, 2, 2, 3, 4, 3, 1]  ----> [1, 3, 3, 4, 3, 1] (3*3=9 points)  ----> [1, 3, 3, 3, 1] (1*1=1 points)  ----> [1, 1] (3*3=9 points)  ----> [] (2*2=4 points) Example 2: Input: boxes = [1,1,1] Output: 9 Example 3: Input: boxes = [1] Output: 1   Constraints: 1 <= boxes.length <= 100 1 <= boxes[i] <= 100",
        "414": "There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c. A province is a group of directly or indirectly connected cities and no other cities outside of the group. You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise. Return the total number of provinces.   Example 1: Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]] Output: 2 Example 2: Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]] Output: 3   Constraints: 1 <= n <= 200 n == isConnected.length n == isConnected[i].length isConnected[i][j] is 1 or 0. isConnected[i][i] == 1 isConnected[i][j] == isConnected[j][i]",
        "415": "SQL Schema Pandas Schema",
        "416": "You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters: 'A': Absent. 'L': Late. 'P': Present. The student is eligible for an attendance award if they meet both of the following criteria: The student was absent ('A') for strictly fewer than 2 days total. The student was never late ('L') for 3 or more consecutive days. Return true if the student is eligible for an attendance award, or false otherwise.   Example 1: Input: s = \"PPALLP\" Output: true Explanation: The student has fewer than 2 absences and was never late 3 or more consecutive days. Example 2: Input: s = \"PPALLL\" Output: false Explanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.   Constraints: 1 <= s.length <= 1000 s[i] is either 'A', 'L', or 'P'.",
        "417": "An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters: 'A': Absent. 'L': Late. 'P': Present. Any student is eligible for an attendance award if they meet both of the following criteria: The student was absent ('A') for strictly fewer than 2 days total. The student was never late ('L') for 3 or more consecutive days. Given an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. The answer may be very large, so return it modulo 109 + 7.   Example 1: Input: n = 2 Output: 8 Explanation: There are 8 records with length 2 that are eligible for an award: \"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\" Only \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2). Example 2: Input: n = 1 Output: 3 Example 3: Input: n = 10101 Output: 183236316   Constraints: 1 <= n <= 105",
        "418": "You are given an integer array nums. The adjacent integers in nums will perform the float division. For example, for nums = [2,3,4], we will evaluate the expression \"2/3/4\". However, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum. Return the corresponding expression that has the maximum value in string format. Note: your expression should not contain redundant parenthesis.   Example 1: Input: nums = [1000,100,10,2] Output: \"1000/(100/10/2)\" Explanation: 1000/(100/10/2) = 1000/((100/10)/2) = 200 However, the bold parenthesis in \"1000/((100/10)/2)\" are redundant since they do not influence the operation priority. So you should return \"1000/(100/10/2)\". Other cases: 1000/(100/10)/2 = 50 1000/(100/(10/2)) = 50 1000/100/10/2 = 0.5 1000/100/(10/2) = 2 Example 2: Input: nums = [2,3,4] Output: \"2/(3/4)\" Explanation: (2/(3/4)) = 8/3 = 2.667 It can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667   Constraints: 1 <= nums.length <= 10 2 <= nums[i] <= 1000 There is only one optimal division for the given input.",
        "419": "There is a rectangular brick wall in front of you with n rows of bricks. The ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same. Draw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks. Given the 2D array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.   Example 1: Input: wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]] Output: 2 Example 2: Input: wall = [[1],[1],[1]] Output: 3   Constraints: n == wall.length 1 <= n <= 104 1 <= wall[i].length <= 104 1 <= sum(wall[i].length) <= 2 * 104 sum(wall[i]) is the same for each row i. 1 <= wall[i][j] <= 231 - 1",
        "420": "Given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive integer exists, return -1. Note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.   Example 1: Input: n = 12 Output: 21 Example 2: Input: n = 21 Output: -1   Constraints: 1 <= n <= 231 - 1",
        "421": "Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.   Example 1: Input: s = \"Let's take LeetCode contest\" Output: \"s'teL ekat edoCteeL tsetnoc\" Example 2: Input: s = \"Mr Ding\" Output: \"rM gniD\"   Constraints: 1 <= s.length <= 5 * 104 s contains printable ASCII characters. s does not contain any leading or trailing spaces. There is at least one word in s. All the words in s are separated by a single space.",
        "422": "A Binary Matrix is a matrix in which all the elements are either 0 or 1. Given quadTree1 and quadTree2. quadTree1 represents a n * n binary matrix and quadTree2 represents another n * n binary matrix. Return a Quad-Tree representing the n * n binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by quadTree1 and quadTree2. Notice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer. A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes: val: True if the node represents a grid of 1's or False if the node represents a grid of 0's. isLeaf: True if the node is leaf node on the tree or False if the node has the four children. class Node {     public boolean val;     public boolean isLeaf;     public Node topLeft;     public Node topRight;     public Node bottomLeft;     public Node bottomRight; } We can construct a Quad-Tree from a two-dimensional area using the following steps: If the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop. If the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo. Recurse for each of the children with the proper sub-grid. If you want to know more about the Quad-Tree, you can refer to the wiki. Quad-Tree format: The input/output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below. It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val]. If the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.   Example 1: Input: quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]] , quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]] Output: [[0,0],[1,1],[1,1],[1,1],[1,0]] Explanation: quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree. If we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree. Notice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree. Example 2: Input: quadTree1 = [[1,0]], quadTree2 = [[1,0]] Output: [[1,0]] Explanation: Each tree represents a binary matrix of size 1*1. Each matrix contains only zero. The resulting matrix is of size 1*1 with also zero.   Constraints: quadTree1 and quadTree2 are both valid Quad-Trees each representing a n * n grid. n == 2x where 0 <= x <= 9.",
        "423": "Given a n-ary tree, find its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).   Example 1: Input: root = [1,null,3,2,4,null,5,6] Output: 3 Example 2: Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] Output: 5   Constraints: The total number of nodes is in the range [0, 104]. The depth of the n-ary tree is less than or equal to 1000.",
        "424": "Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [1,1,1], k = 2 Output: 2 Example 2: Input: nums = [1,2,3], k = 3 Output: 2   Constraints: 1 <= nums.length <= 2 * 104 -1000 <= nums[i] <= 1000 -107 <= k <= 107",
        "425": "Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.   Example 1: Input: nums = [1,4,3,2] Output: 4 Explanation: All possible pairings (ignoring the ordering of elements) are: 1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3 2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3 3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4 So the maximum possible sum is 4. Example 2: Input: nums = [6,2,6,5,1,2] Output: 9 Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.   Constraints: 1 <= n <= 104 nums.length == 2 * n -104 <= nums[i] <= 104",
        "426": "Given the root of a binary tree, return the sum of every tree node's tilt. The tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if the node does not have a right child.   Example 1: Input: root = [1,2,3] Output: 1 Explanation:  Tilt of node 2 : |0-0| = 0 (no children) Tilt of node 3 : |0-0| = 0 (no children) Tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3) Sum of every tilt : 0 + 0 + 1 = 1 Example 2: Input: root = [4,2,9,3,5,null,7] Output: 15 Explanation:  Tilt of node 3 : |0-0| = 0 (no children) Tilt of node 5 : |0-0| = 0 (no children) Tilt of node 7 : |0-0| = 0 (no children) Tilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5) Tilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7) Tilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16) Sum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15 Example 3: Input: root = [21,7,14,1,1,2,2,3,3] Output: 9   Constraints: The number of nodes in the tree is in the range [0, 104]. -1000 <= Node.val <= 1000",
        "427": "Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one. The closest is defined as the absolute difference minimized between two integers.   Example 1: Input: n = \"123\" Output: \"121\" Example 2: Input: n = \"1\" Output: \"0\" Explanation: 0 and 2 are the closest palindromes but we return the smallest which is 0.   Constraints: 1 <= n.length <= 18 n consists of only digits. n does not have leading zeros. n is representing an integer in the range [1, 1018 - 1].",
        "428": "In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data. You are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix. The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were. If the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.   Example 1: Input: mat = [[1,2],[3,4]], r = 1, c = 4 Output: [[1,2,3,4]] Example 2: Input: mat = [[1,2],[3,4]], r = 2, c = 4 Output: [[1,2],[3,4]]   Constraints: m == mat.length n == mat[i].length 1 <= m, n <= 100 -1000 <= mat[i][j] <= 1000 1 <= r, c <= 300",
        "429": "Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise. In other words, return true if one of s1's permutations is the substring of s2.   Example 1: Input: s1 = \"ab\", s2 = \"eidbaooo\" Output: true Explanation: s2 contains one permutation of s1 (\"ba\"). Example 2: Input: s1 = \"ab\", s2 = \"eidboaoo\" Output: false   Constraints: 1 <= s1.length, s2.length <= 104 s1 and s2 consist of lowercase English letters.",
        "430": "SQL Schema Pandas Schema",
        "431": "Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise. A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.   Example 1: Input: root = [3,4,5,1,2], subRoot = [4,1,2] Output: true Example 2: Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2] Output: false   Constraints: The number of nodes in the root tree is in the range [1, 2000]. The number of nodes in the subRoot tree is in the range [1, 1000]. -104 <= root.val <= 104 -104 <= subRoot.val <= 104",
        "432": "Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor. The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice. Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.   Example 1: Input: candyType = [1,1,2,2,3,3] Output: 3 Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type. Example 2: Input: candyType = [1,1,2,3] Output: 2 Explanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types. Example 3: Input: candyType = [6,6,6,6] Output: 1 Explanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.   Constraints: n == candyType.length 2 <= n <= 104 n is even. -105 <= candyType[i] <= 105",
        "433": "There is an m x n grid with a ball. The ball is initially at the position [startRow, startColumn]. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most maxMove moves to the ball. Given the five integers m, n, maxMove, startRow, startColumn, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it modulo 109 + 7.   Example 1: Input: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0 Output: 6 Example 2: Input: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1 Output: 12   Constraints: 1 <= m, n <= 50 0 <= maxMove <= 50 0 <= startRow < m 0 <= startColumn < n",
        "434": "SQL Schema Pandas Schema",
        "435": "Given an integer array nums, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order. Return the shortest such subarray and output its length.   Example 1: Input: nums = [2,6,4,8,10,9,15] Output: 5 Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order. Example 2: Input: nums = [1,2,3,4] Output: 0 Example 3: Input: nums = [1] Output: 0   Constraints: 1 <= nums.length <= 104 -105 <= nums[i] <= 105   Follow up: Can you solve it in O(n) time complexity?",
        "436": "Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same. In one step, you can delete exactly one character in either string.   Example 1: Input: word1 = \"sea\", word2 = \"eat\" Output: 2 Explanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\". Example 2: Input: word1 = \"leetcode\", word2 = \"etco\" Output: 4   Constraints: 1 <= word1.length, word2.length <= 500 word1 and word2 consist of only lowercase English letters.",
        "437": "SQL Schema Pandas Schema",
        "438": "SQL Schema Pandas Schema",
        "439": "SQL Schema Pandas Schema",
        "440": "You are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden. Fence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if all the trees are enclosed. Return the coordinates of trees that are exactly located on the fence perimeter. You may return the answer in any order.   Example 1: Input: trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]] Output: [[1,1],[2,0],[4,2],[3,3],[2,4]] Explanation: All the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence. Example 2: Input: trees = [[1,2],[2,2],[4,2]] Output: [[4,2],[2,2],[1,2]] Explanation: The fence forms a line that passes through all the trees.   Constraints: 1 <= trees.length <= 3000 trees[i].length == 2 0 <= xi, yi <= 100 All the given positions are unique.",
        "441": "Given the root of an n-ary tree, return the preorder traversal of its nodes' values. Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)   Example 1: Input: root = [1,null,3,2,4,null,5,6] Output: [1,3,5,6,2,4] Example 2: Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] Output: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]   Constraints: The number of nodes in the tree is in the range [0, 104]. 0 <= Node.val <= 104 The height of the n-ary tree is less than or equal to 1000.   Follow up: Recursive solution is trivial, could you do it iteratively?",
        "442": "Given the root of an n-ary tree, return the postorder traversal of its nodes' values. Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)   Example 1: Input: root = [1,null,3,2,4,null,5,6] Output: [5,6,3,2,4,1] Example 2: Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] Output: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]   Constraints: The number of nodes in the tree is in the range [0, 104]. 0 <= Node.val <= 104 The height of the n-ary tree is less than or equal to 1000.   Follow up: Recursive solution is trivial, could you do it iteratively?",
        "443": "Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid. A code snippet is valid if all the following rules hold: The code must be wrapped in a valid closed tag. Otherwise, the code is invalid. A closed tag (not necessarily valid) has exactly the following format : <TAG_NAME>TAG_CONTENT</TAG_NAME>. Among them, <TAG_NAME> is the start tag, and </TAG_NAME> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid. A valid TAG_NAME only contain upper-case letters, and has length in range [1,9]. Otherwise, the TAG_NAME is invalid. A valid TAG_CONTENT may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the TAG_CONTENT is invalid. A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested. A < is unmatched if you cannot find a subsequent >. And when you find a < or </, all the subsequent characters until the next > should be parsed as TAG_NAME (not necessarily valid). The cdata has the following format : <![CDATA[CDATA_CONTENT]]>. The range of CDATA_CONTENT is defined as the characters between <![CDATA[ and the first subsequent ]]>. CDATA_CONTENT may contain any characters. The function of cdata is to forbid the validator to parse CDATA_CONTENT, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.   Example 1: Input: code = \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\" Output: true Explanation:  The code is wrapped in a closed tag : <DIV> and </DIV>.  The TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata.  Although CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag. So TAG_CONTENT is valid, and then the code is valid. Thus return true. Example 2: Input: code = \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\" Output: true Explanation: We first separate the code into : start_tag|tag_content|end_tag. start_tag -> \"<DIV>\" end_tag -> \"</DIV>\" tag_content could also be separated into : text1|cdata|text2. text1 -> \">>  ![cdata[]] \" cdata -> \"<![CDATA[<div>]>]]>\", where the CDATA_CONTENT is \"<div>]>\" text2 -> \"]]>>]\" The reason why start_tag is NOT \"<DIV>>>\" is because of the rule 6. The reason why cdata is NOT \"<![CDATA[<div>]>]]>]]>\" is because of the rule 7. Example 3: Input: code = \"<A>  <B> </A>   </B>\" Output: false Explanation: Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa.   Constraints: 1 <= code.length <= 500 code consists of English letters, digits, '<', '>', '/', '!', '[', ']', '.', and ' '.",
        "444": "Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format. The final result should be an irreducible fraction. If your final result is an integer, change it to the format of a fraction that has a denominator 1. So in this case, 2 should be converted to 2/1.   Example 1: Input: expression = \"-1/2+1/2\" Output: \"0/1\" Example 2: Input: expression = \"-1/2+1/2+1/3\" Output: \"1/3\" Example 3: Input: expression = \"1/3-1/2\" Output: \"-1/6\"   Constraints: The input string only contains '0' to '9', '/', '+' and '-'. So does the output. Each fraction (input and output) has the format ±numerator/denominator. If the first input fraction or the output is positive, then '+' will be omitted. The input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1, 10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above. The number of given fractions will be in the range [1, 10]. The numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.",
        "445": "Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square. The coordinate of a point pi is represented as [xi, yi]. The input is not given in any order. A valid square has four equal sides with positive length and four equal angles (90-degree angles).   Example 1: Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1] Output: true Example 2: Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12] Output: false Example 3: Input: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1] Output: true   Constraints: p1.length == p2.length == p3.length == p4.length == 2 -104 <= xi, yi <= 104",
        "446": "We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1. Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.   Example 1: Input: nums = [1,3,2,2,5,2,3,7] Output: 5 Explanation: The longest harmonious subsequence is [3,2,2,2,3]. Example 2: Input: nums = [1,2,3,4] Output: 2 Explanation: The longest harmonious subsequences are [1,2], [2,3], and [3,4], all of which have a length of 2. Example 3: Input: nums = [1,1,1,1] Output: 0 Explanation: No harmonic subsequence exists.   Constraints: 1 <= nums.length <= 2 * 104 -109 <= nums[i] <= 109",
        "447": "SQL Schema Pandas Schema",
        "448": "SQL Schema Pandas Schema",
        "449": "You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi. Count and return the number of maximum integers in the matrix after performing all the operations.   Example 1: Input: m = 3, n = 3, ops = [[2,2],[3,3]] Output: 4 Explanation: The maximum integer in M is 2, and there are four of it in M. So return 4. Example 2: Input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]] Output: 4 Example 3: Input: m = 3, n = 3, ops = [] Output: 9   Constraints: 1 <= m, n <= 4 * 104 0 <= ops.length <= 104 ops[i].length == 2 1 <= ai <= m 1 <= bi <= n",
        "450": "Given two arrays of strings list1 and list2, find the common strings with the least index sum. A common string is a string that appeared in both list1 and list2. A common string with the least index sum is a common string such that if it appeared at list1[i] and list2[j] then i + j should be the minimum value among all the other common strings. Return all the common strings with the least index sum. Return the answer in any order.   Example 1: Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"] Output: [\"Shogun\"] Explanation: The only common string is \"Shogun\". Example 2: Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"] Output: [\"Shogun\"] Explanation: The common string with the least index sum is \"Shogun\" with index sum = (0 + 1) = 1. Example 3: Input: list1 = [\"happy\",\"sad\",\"good\"], list2 = [\"sad\",\"happy\",\"good\"] Output: [\"sad\",\"happy\"] Explanation: There are three common strings: \"happy\" with index sum = (0 + 1) = 1. \"sad\" with index sum = (1 + 0) = 1. \"good\" with index sum = (2 + 2) = 4. The strings with the least index sum are \"sad\" and \"happy\".   Constraints: 1 <= list1.length, list2.length <= 1000 1 <= list1[i].length, list2[i].length <= 30 list1[i] and list2[i] consist of spaces ' ' and English letters. All the strings of list1 are unique. All the strings of list2 are unique. There is at least a common string between list1 and list2.",
        "451": "Given a positive integer n, return the number of the integers in the range [0, n] whose binary representations do not contain consecutive ones.   Example 1: Input: n = 5 Output: 5 Explanation: Here are the non-negative integers <= 5 with their corresponding binary representations: 0 : 0 1 : 1 2 : 10 3 : 11 4 : 100 5 : 101 Among them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule.  Example 2: Input: n = 1 Output: 2 Example 3: Input: n = 2 Output: 3   Constraints: 1 <= n <= 109",
        "452": "SQL Schema Pandas Schema",
        "453": "SQL Schema Pandas Schema",
        "454": "You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots. Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.   Example 1: Input: flowerbed = [1,0,0,0,1], n = 1 Output: true Example 2: Input: flowerbed = [1,0,0,0,1], n = 2 Output: false   Constraints: 1 <= flowerbed.length <= 2 * 104 flowerbed[i] is 0 or 1. There are no two adjacent flowers in flowerbed. 0 <= n <= flowerbed.length",
        "455": "Given the root node of a binary tree, your task is to create a string representation of the tree following a specific set of formatting rules. The representation should be based on a preorder traversal of the binary tree and must adhere to the following guidelines: Node Representation: Each node in the tree should be represented by its integer value. Parentheses for Children: If a node has at least one child (either left or right), its children should be represented inside parentheses. Specifically: If a node has a left child, the value of the left child should be enclosed in parentheses immediately following the node's value. If a node has a right child, the value of the right child should also be enclosed in parentheses. The parentheses for the right child should follow those of the left child. Omitting Empty Parentheses: Any empty parentheses pairs (i.e., ()) should be omitted from the final string representation of the tree, with one specific exception: when a node has a right child but no left child. In such cases, you must include an empty pair of parentheses to indicate the absence of the left child. This ensures that the one-to-one mapping between the string representation and the original binary tree structure is maintained. In summary, empty parentheses pairs should be omitted when a node has only a left child or no children. However, when a node has a right child but no left child, an empty pair of parentheses must precede the representation of the right child to reflect the tree's structure accurately.   Example 1: Input: root = [1,2,3,4] Output: \"1(2(4))(3)\" Explanation: Originally, it needs to be \"1(2(4)())(3()())\", but you need to omit all the empty parenthesis pairs. And it will be \"1(2(4))(3)\". Example 2: Input: root = [1,2,3,null,4] Output: \"1(2()(4))(3)\" Explanation: Almost the same as the first example, except the () after 2 is necessary to indicate the absence of a left child for 2 and the presence of a right child.   Constraints: The number of nodes in the tree is in the range [1, 104]. -1000 <= Node.val <= 1000",
        "456": "SQL Schema Pandas Schema",
        "457": "SQL Schema Pandas Schema",
        "458": "Given a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. You may return the answer in any order. A group of duplicate files consists of at least two files that have the same content. A single directory info string in the input list has the following format: \"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\" It means there are n files (f1.txt, f2.txt ... fn.txt) with content (f1_content, f2_content ... fn_content) respectively in the directory \"root/d1/d2/.../dm\". Note that n >= 1 and m >= 0. If m = 0, it means the directory is just the root directory. The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format: \"directory_path/file_name.txt\"   Example 1: Input: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"] Output: [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]] Example 2: Input: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"] Output: [[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]   Constraints: 1 <= paths.length <= 2 * 104 1 <= paths[i].length <= 3000 1 <= sum(paths[i].length) <= 5 * 105 paths[i] consist of English letters, digits, '/', '.', '(', ')', and ' '. You may assume no files or directories share the same name in the same directory. You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.   Follow up: Imagine you are given a real file system, how will you search files? DFS or BFS? If the file content is very large (GB level), how will you modify your solution? If you can only read the file by 1kb each time, how will you modify your solution? What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize? How to make sure the duplicated files you find are not false positive?",
        "459": "SQL Schema Pandas Schema",
        "460": "Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.   Example 1: Input: nums = [2,2,3,4] Output: 3 Explanation: Valid combinations are:  2,3,4 (using the first 2) 2,3,4 (using the second 2) 2,2,3 Example 2: Input: nums = [4,2,3,4] Output: 4   Constraints: 1 <= nums.length <= 1000 0 <= nums[i] <= 1000",
        "461": "You are given two binary trees root1 and root2. Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree. Return the merged tree. Note: The merging process must start from the root nodes of both trees.   Example 1: Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7] Output: [3,4,5,5,4,null,7] Example 2: Input: root1 = [1], root2 = [1,2] Output: [2,2]   Constraints: The number of nodes in both trees is in the range [0, 2000]. -104 <= Node.val <= 104",
        "462": "SQL Schema Pandas Schema",
        "463": "SQL Schema Pandas Schema",
        "464": "You are given an array of CPU tasks, each labeled with a letter from A to Z, and a number n. Each CPU interval can be idle or allow the completion of one task. Tasks can be completed in any order, but there's a constraint: there has to be a gap of at least n intervals between two tasks with the same label. Return the minimum number of CPU intervals required to complete all tasks.   Example 1: Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2 Output: 8 Explanation: A possible sequence is: A -> B -> idle -> A -> B -> idle -> A -> B. After completing task A, you must wait two intervals before doing A again. The same applies to task B. In the 3rd interval, neither A nor B can be done, so you idle. By the 4th interval, you can do A again as 2 intervals have passed. Example 2: Input: tasks = [\"A\",\"C\",\"A\",\"B\",\"D\",\"B\"], n = 1 Output: 6 Explanation: A possible sequence is: A -> B -> C -> D -> A -> B. With a cooling interval of 1, you can repeat a task after just one other task. Example 3: Input: tasks = [\"A\",\"A\",\"A\", \"B\",\"B\",\"B\"], n = 3 Output: 10 Explanation: A possible sequence is: A -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B. There are only two types of tasks, A and B, which need to be separated by 3 intervals. This leads to idling twice between repetitions of these tasks.   Constraints: 1 <= tasks.length <= 104 tasks[i] is an uppercase English letter. 0 <= n <= 100",
        "465": "Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\". One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values. Implement the MyCircularQueue class: MyCircularQueue(k) Initializes the object with the size of the queue to be k. int Front() Gets the front item from the queue. If the queue is empty, return -1. int Rear() Gets the last item from the queue. If the queue is empty, return -1. boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful. boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful. boolean isEmpty() Checks whether the circular queue is empty or not. boolean isFull() Checks whether the circular queue is full or not. You must solve the problem without using the built-in queue data structure in your programming language.    Example 1: Input [\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"] [[3], [1], [2], [3], [4], [], [], [], [4], []] Output [null, true, true, true, false, 3, true, true, true, 4]  Explanation MyCircularQueue myCircularQueue = new MyCircularQueue(3); myCircularQueue.enQueue(1); // return True myCircularQueue.enQueue(2); // return True myCircularQueue.enQueue(3); // return True myCircularQueue.enQueue(4); // return False myCircularQueue.Rear();     // return 3 myCircularQueue.isFull();   // return True myCircularQueue.deQueue();  // return True myCircularQueue.enQueue(4); // return True myCircularQueue.Rear();     // return 4   Constraints: 1 <= k <= 1000 0 <= value <= 1000 At most 3000 calls will be made to enQueue, deQueue, Front, Rear, isEmpty, and isFull.",
        "466": "Given the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth. Note that the root node is at depth 1. The adding rule is: Given the integer depth, for each not null tree node cur at the depth depth - 1, create two tree nodes with value val as cur's left subtree root and right subtree root. cur's original left subtree should be the left subtree of the new left subtree root. cur's original right subtree should be the right subtree of the new right subtree root. If depth == 1 that means there is no depth depth - 1 at all, then create a tree node with value val as the new root of the whole original tree, and the original tree is the new root's left subtree.   Example 1: Input: root = [4,2,6,3,1,5], val = 1, depth = 2 Output: [4,1,1,2,null,null,6,3,1,5] Example 2: Input: root = [4,2,null,3,1], val = 1, depth = 3 Output: [4,2,null,1,1,3,null,null,1]   Constraints: The number of nodes in the tree is in the range [1, 104]. The depth of the tree is in the range [1, 104]. -100 <= Node.val <= 100 -105 <= val <= 105 1 <= depth <= the depth of tree + 1",
        "467": "You are given m arrays, where each array is sorted in ascending order. You can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers a and b to be their absolute difference |a - b|. Return the maximum distance.   Example 1: Input: arrays = [[1,2,3],[4,5],[1,2,3]] Output: 4 Explanation: One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array. Example 2: Input: arrays = [[1],[1]] Output: 0   Constraints: m == arrays.length 2 <= m <= 105 1 <= arrays[i].length <= 500 -104 <= arrays[i][j] <= 104 arrays[i] is sorted in ascending order. There will be at most 105 integers in all the arrays.",
        "468": "SQL Schema Pandas Schema",
        "469": "SQL Schema Pandas Schema",
        "470": "Given an integer array nums, find three numbers whose product is maximum and return the maximum product.   Example 1: Input: nums = [1,2,3] Output: 6 Example 2: Input: nums = [1,2,3,4] Output: 24 Example 3: Input: nums = [-1,-2,-3] Output: -6   Constraints: 3 <= nums.length <= 104 -1000 <= nums[i] <= 1000",
        "471": "For an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j]. Given two integers n and k, return the number of different arrays consisting of numbers from 1 to n such that there are exactly k inverse pairs. Since the answer can be huge, return it modulo 109 + 7.   Example 1: Input: n = 3, k = 0 Output: 1 Explanation: Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs. Example 2: Input: n = 3, k = 1 Output: 2 Explanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.   Constraints: 1 <= n <= 1000 0 <= k <= 1000",
        "472": "There are n different online courses numbered from 1 to n. You are given an array courses where courses[i] = [durationi, lastDayi] indicate that the ith course should be taken continuously for durationi days and must be finished before or on lastDayi. You will start on the 1st day and you cannot take two or more courses simultaneously. Return the maximum number of courses that you can take.   Example 1: Input: courses = [[100,200],[200,1300],[1000,1250],[2000,3200]] Output: 3 Explanation:  There are totally 4 courses, but you can take 3 courses at most: First, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day. Second, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day.  Third, take the 2nd course, it costs 200 days so you will finish it on the 1300th day.  The 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date. Example 2: Input: courses = [[1,2]] Output: 1 Example 3: Input: courses = [[3,2],[4,3]] Output: 0   Constraints: 1 <= courses.length <= 104 1 <= durationi, lastDayi <= 104",
        "473": "You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists. We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.   Example 1: Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]] Output: [20,24] Explanation:  List 1: [4, 10, 15, 24,26], 24 is in range [20,24]. List 2: [0, 9, 12, 20], 20 is in range [20,24]. List 3: [5, 18, 22, 30], 22 is in range [20,24]. Example 2: Input: nums = [[1,2,3],[1,2,3],[1,2,3]] Output: [1,1]   Constraints: nums.length == k 1 <= k <= 3500 1 <= nums[i].length <= 50 -105 <= nums[i][j] <= 105 nums[i] is sorted in non-decreasing order.",
        "474": "Given a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.   Example 1: Input: c = 5 Output: true Explanation: 1 * 1 + 2 * 2 = 5 Example 2: Input: c = 3 Output: false   Constraints: 0 <= c <= 231 - 1",
        "475": "On a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1. Function calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp. You are given a list logs, where logs[i] represents the ith log message formatted as a string \"{function_id}:{\"start\" | \"end\"}:{timestamp}\". For example, \"0:start:3\" means a function call with function ID 0 started at the beginning of timestamp 3, and \"1:end:2\" means a function call with function ID 1 ended at the end of timestamp 2. Note that a function can be called multiple times, possibly recursively. A function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3. Return the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with ID i.   Example 1: Input: n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"] Output: [3,4] Explanation: Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1. Function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5. Function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time. So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing. Example 2: Input: n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"] Output: [8] Explanation: Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself. Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time. Function 0 (initial call) resumes execution then immediately calls itself again. Function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time. Function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time. So function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing. Example 3: Input: n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"] Output: [7,1] Explanation: Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself. Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time. Function 0 (initial call) resumes execution then immediately calls function 1. Function 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6. Function 0 resumes execution at the beginning of time 6 and executes for 2 units of time. So function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.   Constraints: 1 <= n <= 100 1 <= logs.length <= 500 0 <= function_id < n 0 <= timestamp <= 109 No two start events will happen at the same timestamp. No two end events will happen at the same timestamp. Each function has an \"end\" log for each \"start\" log.",
        "476": "Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10-5 of the actual answer will be accepted.   Example 1: Input: root = [3,9,20,null,null,15,7] Output: [3.00000,14.50000,11.00000] Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11]. Example 2: Input: root = [3,9,20,15,7] Output: [3.00000,14.50000,11.00000]   Constraints: The number of nodes in the tree is in the range [1, 104]. -231 <= Node.val <= 231 - 1",
        "477": "In LeetCode Store, there are n items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price. You are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy. You are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.e., the last integer in the array) is the price of the ith offer. Return the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.   Example 1: Input: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2] Output: 14 Explanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively.  In special offer 1, you can pay $5 for 3A and 0B In special offer 2, you can pay $10 for 1A and 2B.  You need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A. Example 2: Input: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1] Output: 11 Explanation: The price of A is $2, and $3 for B, $4 for C.  You may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C.  You need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C.  You cannot add more items, though only $9 for 2A ,2B and 1C.   Constraints: n == price.length == needs.length 1 <= n <= 6 0 <= price[i], needs[i] <= 10 1 <= special.length <= 100 special[i].length == n + 1 0 <= special[i][j] <= 50 The input is generated that at least one of special[i][j] is non-zero for 0 <= j <= n - 1.",
        "478": "A message containing letters from A-Z can be encoded into numbers using the following mapping: 'A' -> \"1\" 'B' -> \"2\" ... 'Z' -> \"26\" To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into: \"AAJF\" with the grouping (1 1 10 6) \"KJF\" with the grouping (11 10 6) Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\". In addition to the mapping above, an encoded message may contain the '*' character, which can represent any digit from '1' to '9' ('0' is excluded). For example, the encoded message \"1*\" may represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\". Decoding \"1*\" is equivalent to decoding any of the encoded messages it can represent. Given a string s consisting of digits and '*' characters, return the number of ways to decode it. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: s = \"*\" Output: 9 Explanation: The encoded message can represent any of the encoded messages \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", or \"9\". Each of these can be decoded to the strings \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", and \"I\" respectively. Hence, there are a total of 9 ways to decode \"*\". Example 2: Input: s = \"1*\" Output: 18 Explanation: The encoded message can represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\". Each of these encoded messages have 2 ways to be decoded (e.g. \"11\" can be decoded to \"AA\" or \"K\"). Hence, there are a total of 9 * 2 = 18 ways to decode \"1*\". Example 3: Input: s = \"2*\" Output: 15 Explanation: The encoded message can represent any of the encoded messages \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", or \"29\". \"21\", \"22\", \"23\", \"24\", \"25\", and \"26\" have 2 ways of being decoded, but \"27\", \"28\", and \"29\" only have 1 way. Hence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode \"2*\".   Constraints: 1 <= s.length <= 105 s[i] is a digit or '*'.",
        "479": "Solve a given equation and return the value of 'x' in the form of a string \"x=#value\". The equation contains only '+', '-' operation, the variable 'x' and its coefficient. You should return \"No solution\" if there is no solution for the equation, or \"Infinite solutions\" if there are infinite solutions for the equation. If there is exactly one solution for the equation, we ensure that the value of 'x' is an integer.   Example 1: Input: equation = \"x+5-3+x=6+x-2\" Output: \"x=2\" Example 2: Input: equation = \"x=x\" Output: \"Infinite solutions\" Example 3: Input: equation = \"2x=x\" Output: \"x=0\"   Constraints: 3 <= equation.length <= 1000 equation has exactly one '='. equation consists of integers with an absolute value in the range [0, 100] without any leading zeros, and the variable 'x'. The input is generated that if there is a single solution, it will be an integer.",
        "480": "Design your implementation of the circular double-ended queue (deque). Implement the MyCircularDeque class: MyCircularDeque(int k) Initializes the deque with a maximum size of k. boolean insertFront() Adds an item at the front of Deque. Returns true if the operation is successful, or false otherwise. boolean insertLast() Adds an item at the rear of Deque. Returns true if the operation is successful, or false otherwise. boolean deleteFront() Deletes an item from the front of Deque. Returns true if the operation is successful, or false otherwise. boolean deleteLast() Deletes an item from the rear of Deque. Returns true if the operation is successful, or false otherwise. int getFront() Returns the front item from the Deque. Returns -1 if the deque is empty. int getRear() Returns the last item from Deque. Returns -1 if the deque is empty. boolean isEmpty() Returns true if the deque is empty, or false otherwise. boolean isFull() Returns true if the deque is full, or false otherwise.   Example 1: Input [\"MyCircularDeque\", \"insertLast\", \"insertLast\", \"insertFront\", \"insertFront\", \"getRear\", \"isFull\", \"deleteLast\", \"insertFront\", \"getFront\"] [[3], [1], [2], [3], [4], [], [], [], [4], []] Output [null, true, true, true, false, 2, true, true, true, 4]  Explanation MyCircularDeque myCircularDeque = new MyCircularDeque(3); myCircularDeque.insertLast(1);  // return True myCircularDeque.insertLast(2);  // return True myCircularDeque.insertFront(3); // return True myCircularDeque.insertFront(4); // return False, the queue is full. myCircularDeque.getRear();      // return 2 myCircularDeque.isFull();       // return True myCircularDeque.deleteLast();   // return True myCircularDeque.insertFront(4); // return True myCircularDeque.getFront();     // return 4   Constraints: 1 <= k <= 1000 0 <= value <= 1000 At most 2000 calls will be made to insertFront, insertLast, deleteFront, deleteLast, getFront, getRear, isEmpty, isFull.",
        "481": "",
        "482": "You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number. You are given an integer array nums representing the data status of this set after the error. Find the number that occurs twice and the number that is missing and return them in the form of an array.   Example 1: Input: nums = [1,2,2,4] Output: [2,3] Example 2: Input: nums = [1,1] Output: [1,2]   Constraints: 2 <= nums.length <= 104 1 <= nums[i] <= 104",
        "483": "You are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti. A pair p2 = [c, d] follows a pair p1 = [a, b] if b < c. A chain of pairs can be formed in this fashion. Return the length longest chain which can be formed. You do not need to use up all the given intervals. You can select pairs in any order.   Example 1: Input: pairs = [[1,2],[2,3],[3,4]] Output: 2 Explanation: The longest chain is [1,2] -> [3,4]. Example 2: Input: pairs = [[1,2],[7,8],[4,5]] Output: 3 Explanation: The longest chain is [1,2] -> [4,5] -> [7,8].   Constraints: n == pairs.length 1 <= n <= 1000 -1000 <= lefti < righti <= 1000",
        "484": "Given a string s, return the number of palindromic substrings in it. A string is a palindrome when it reads the same backward as forward. A substring is a contiguous sequence of characters within the string.   Example 1: Input: s = \"abc\" Output: 3 Explanation: Three palindromic strings: \"a\", \"b\", \"c\". Example 2: Input: s = \"aaa\" Output: 6 Explanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".   Constraints: 1 <= s.length <= 1000 s consists of lowercase English letters.",
        "485": "In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word derivative. For example, when the root \"help\" is followed by the word \"ful\", we can form a derivative \"helpful\". Given a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the derivatives in the sentence with the root forming it. If a derivative can be replaced by more than one root, replace it with the root that has the shortest length. Return the sentence after the replacement.   Example 1: Input: dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\" Output: \"the cat was rat by the bat\" Example 2: Input: dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\" Output: \"a a b c\"   Constraints: 1 <= dictionary.length <= 1000 1 <= dictionary[i].length <= 100 dictionary[i] consists of only lower-case letters. 1 <= sentence.length <= 106 sentence consists of only lower-case letters and spaces. The number of words in sentence is in the range [1, 1000] The length of each word in sentence is in the range [1, 1000] Every two consecutive words in sentence will be separated by exactly one space. sentence does not have leading or trailing spaces.",
        "486": "In the world of Dota2, there are two parties: the Radiant and the Dire. The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights: Ban one senator's right: A senator can make another senator lose all his rights in this and all the following rounds. Announce the victory: If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game. Given a string senate representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party. Then if there are n senators, the size of the given string will be n. The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure. Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be \"Radiant\" or \"Dire\".   Example 1: Input: senate = \"RD\" Output: \"Radiant\" Explanation:  The first senator comes from Radiant and he can just ban the next senator's right in round 1.  And the second senator can't exercise any rights anymore since his right has been banned.  And in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote. Example 2: Input: senate = \"RDD\" Output: \"Dire\" Explanation:  The first senator comes from Radiant and he can just ban the next senator's right in round 1.  And the second senator can't exercise any rights anymore since his right has been banned.  And the third senator comes from Dire and he can ban the first senator's right in round 1.  And in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.   Constraints: n == senate.length 1 <= n <= 104 senate[i] is either 'R' or 'D'.",
        "487": "There is only one character 'A' on the screen of a notepad. You can perform one of two operations on this notepad for each step: Copy All: You can copy all the characters present on the screen (a partial copy is not allowed). Paste: You can paste the characters which are copied last time. Given an integer n, return the minimum number of operations to get the character 'A' exactly n times on the screen.   Example 1: Input: n = 3 Output: 3 Explanation: Initially, we have one character 'A'. In step 1, we use Copy All operation. In step 2, we use Paste operation to get 'AA'. In step 3, we use Paste operation to get 'AAA'. Example 2: Input: n = 1 Output: 0   Constraints: 1 <= n <= 1000",
        "488": "Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.   Example 1: Input: root = [5,3,6,2,4,null,7], k = 9 Output: true Example 2: Input: root = [5,3,6,2,4,null,7], k = 28 Output: false   Constraints: The number of nodes in the tree is in the range [1, 104]. -104 <= Node.val <= 104 root is guaranteed to be a valid binary search tree. -105 <= k <= 105",
        "489": "You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm: Create a root node whose value is the maximum value in nums. Recursively build the left subtree on the subarray prefix to the left of the maximum value. Recursively build the right subtree on the subarray suffix to the right of the maximum value. Return the maximum binary tree built from nums.   Example 1: Input: nums = [3,2,1,6,0,5] Output: [6,3,5,null,2,0,null,null,1] Explanation: The recursive calls are as follow: - The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].     - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].         - Empty array, so no child.         - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].             - Empty array, so no child.             - Only one element, so child is a node with value 1.     - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].         - Only one element, so child is a node with value 0.         - Empty array, so no child. Example 2: Input: nums = [3,2,1] Output: [3,null,2,null,1]   Constraints: 1 <= nums.length <= 1000 0 <= nums[i] <= 1000 All integers in nums are unique.",
        "490": "Given the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. The formatted layout matrix should be constructed using the following rules: The height of the tree is height and the number of rows m should be equal to height + 1. The number of columns n should be equal to 2height+1 - 1. Place the root node in the middle of the top row (more formally, at location res[0][(n-1)/2]). For each node that has been placed in the matrix at position res[r][c], place its left child at res[r+1][c-2height-r-1] and its right child at res[r+1][c+2height-r-1]. Continue this process until all the nodes in the tree have been placed. Any empty cells should contain the empty string \"\". Return the constructed matrix res.   Example 1: Input: root = [1,2] Output:  [[\"\",\"1\",\"\"],  [\"2\",\"\",\"\"]] Example 2: Input: root = [1,2,3,null,4] Output:  [[\"\",\"\",\"\",\"1\",\"\",\"\",\"\"],  [\"\",\"2\",\"\",\"\",\"\",\"3\",\"\"],  [\"\",\"\",\"4\",\"\",\"\",\"\",\"\"]]   Constraints: The number of nodes in the tree is in the range [1, 210]. -99 <= Node.val <= 99 The depth of the tree will be in the range [1, 10].",
        "491": "There is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves. You are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. Valid moves are 'R' (right), 'L' (left), 'U' (up), and 'D' (down). Return true if the robot returns to the origin after it finishes all of its moves, or false otherwise. Note: The way that the robot is \"facing\" is irrelevant. 'R' will always make the robot move to the right once, 'L' will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.   Example 1: Input: moves = \"UD\" Output: true Explanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true. Example 2: Input: moves = \"LL\" Output: false Explanation: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves.   Constraints: 1 <= moves.length <= 2 * 104 moves only contains the characters 'U', 'D', 'L' and 'R'.",
        "492": "Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order. An integer a is closer to x than an integer b if: |a - x| < |b - x|, or |a - x| == |b - x| and a < b   Example 1: Input: arr = [1,2,3,4,5], k = 4, x = 3 Output: [1,2,3,4] Example 2: Input: arr = [1,1,2,3,4,5], k = 4, x = -1 Output: [1,1,2,3]   Constraints: 1 <= k <= arr.length 1 <= arr.length <= 104 arr is sorted in ascending order. -104 <= arr[i], x <= 104",
        "493": "You are given an integer array nums that is sorted in non-decreasing order. Determine if it is possible to split nums into one or more subsequences such that both of the following conditions are true: Each subsequence is a consecutive increasing sequence (i.e. each integer is exactly one more than the previous integer). All subsequences have a length of 3 or more. Return true if you can split nums according to the above conditions, or false otherwise. A subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).   Example 1: Input: nums = [1,2,3,3,4,5] Output: true Explanation: nums can be split into the following subsequences: [1,2,3,3,4,5] --> 1, 2, 3 [1,2,3,3,4,5] --> 3, 4, 5 Example 2: Input: nums = [1,2,3,3,4,4,5,5] Output: true Explanation: nums can be split into the following subsequences: [1,2,3,3,4,4,5,5] --> 1, 2, 3, 4, 5 [1,2,3,3,4,4,5,5] --> 3, 4, 5 Example 3: Input: nums = [1,2,3,4,4,5] Output: false Explanation: It is impossible to split nums into consecutive increasing subsequences of length 3 or more.   Constraints: 1 <= nums.length <= 104 -1000 <= nums[i] <= 1000 nums is sorted in non-decreasing order.",
        "494": "An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother). Given an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.   Example 1: Input: img = [[1,1,1],[1,0,1],[1,1,1]] Output: [[0,0,0],[0,0,0],[0,0,0]] Explanation: For the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0 For the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0 For the point (1,1): floor(8/9) = floor(0.88888889) = 0 Example 2: Input: img = [[100,200,100],[200,50,200],[100,200,100]] Output: [[137,141,137],[141,138,141],[137,141,137]] Explanation: For the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137 For the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141 For the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138   Constraints: m == img.length n == img[i].length 1 <= m, n <= 200 0 <= img[i][j] <= 255",
        "495": "Given the root of a binary tree, return the maximum width of the given tree. The maximum width of a tree is the maximum width among all levels. The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation. It is guaranteed that the answer will in the range of a 32-bit signed integer.   Example 1: Input: root = [1,3,2,5,3,null,9] Output: 4 Explanation: The maximum width exists in the third level with length 4 (5,3,null,9). Example 2: Input: root = [1,3,2,5,null,null,9,6,null,7] Output: 7 Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7). Example 3: Input: root = [1,3,2,5] Output: 2 Explanation: The maximum width exists in the second level with length 2 (3,2).   Constraints: The number of nodes in the tree is in the range [1, 3000]. -100 <= Node.val <= 100",
        "496": "There is a strange printer with the following two special properties: The printer can only print a sequence of the same character each time. At each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters. Given a string s, return the minimum number of turns the printer needed to print it.   Example 1: Input: s = \"aaabbb\" Output: 2 Explanation: Print \"aaa\" first and then print \"bbb\". Example 2: Input: s = \"aba\" Output: 2 Explanation: Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character 'a'.   Constraints: 1 <= s.length <= 100 s consists of lowercase English letters.",
        "497": "Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element. We define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).   Example 1: Input: nums = [4,2,3] Output: true Explanation: You could modify the first 4 to 1 to get a non-decreasing array. Example 2: Input: nums = [4,2,1] Output: false Explanation: You cannot get a non-decreasing array by modifying at most one element.   Constraints: n == nums.length 1 <= n <= 104 -105 <= nums[i] <= 105",
        "498": "Given two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement: Suppose this list is answer = [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers. Return the list answer. If there multiple valid answers, return any of them.   Example 1: Input: n = 3, k = 1 Output: [1,2,3] Explanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1 Example 2: Input: n = 3, k = 2 Output: [1,3,2] Explanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2.   Constraints: 1 <= k < n <= 104",
        "499": "Nearly everyone has used the Multiplication Table. The multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed). Given three integers m, n, and k, return the kth smallest element in the m x n multiplication table.   Example 1: Input: m = 3, n = 3, k = 5 Output: 3 Explanation: The 5th smallest number is 3. Example 2: Input: m = 2, n = 3, k = 6 Output: 6 Explanation: The 6th smallest number is 6.   Constraints: 1 <= m, n <= 3 * 104 1 <= k <= m * n",
        "500": "Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer. Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.   Example 1: Input: root = [1,0,2], low = 1, high = 2 Output: [1,null,2] Example 2: Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3 Output: [3,2,null,1]   Constraints: The number of nodes in the tree is in the range [1, 104]. 0 <= Node.val <= 104 The value of each node in the tree is unique. root is guaranteed to be a valid binary search tree. 0 <= low <= high <= 104",
        "501": "Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds. Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree. If no such second minimum value exists, output -1 instead.     Example 1: Input: root = [2,2,5,null,null,5,7] Output: 5 Explanation: The smallest value is 2, the second smallest value is 5. Example 2: Input: root = [2,2,2] Output: -1 Explanation: The smallest value is 2, but there isn't any second smallest value.   Constraints: The number of nodes in the tree is in the range [1, 25]. 1 <= Node.val <= 231 - 1 root.val == min(root.left.val, root.right.val) for each internal node of the tree.",
        "502": "There is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall. Each of the four buttons has a different functionality where: Button 1: Flips the status of all the bulbs. Button 2: Flips the status of all the bulbs with even labels (i.e., 2, 4, ...). Button 3: Flips the status of all the bulbs with odd labels (i.e., 1, 3, ...). Button 4: Flips the status of all the bulbs with a label j = 3k + 1 where k = 0, 1, 2, ... (i.e., 1, 4, 7, 10, ...). You must make exactly presses button presses in total. For each press, you may pick any of the four buttons to press. Given the two integers n and presses, return the number of different possible statuses after performing all presses button presses.   Example 1: Input: n = 1, presses = 1 Output: 2 Explanation: Status can be: - [off] by pressing button 1 - [on] by pressing button 2 Example 2: Input: n = 2, presses = 1 Output: 3 Explanation: Status can be: - [off, off] by pressing button 1 - [on, off] by pressing button 2 - [off, on] by pressing button 3 Example 3: Input: n = 3, presses = 1 Output: 4 Explanation: Status can be: - [off, off, off] by pressing button 1 - [off, on, off] by pressing button 2 - [on, off, on] by pressing button 3 - [off, on, on] by pressing button 4   Constraints: 1 <= n <= 1000 0 <= presses <= 1000",
        "503": "Given an integer array nums, return the number of longest increasing subsequences. Notice that the sequence has to be strictly increasing.   Example 1: Input: nums = [1,3,5,4,7] Output: 2 Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7]. Example 2: Input: nums = [2,2,2,2,2] Output: 5 Explanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.   Constraints: 1 <= nums.length <= 2000 -106 <= nums[i] <= 106 The answer is guaranteed to fit inside a 32-bit integer.",
        "504": "Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing. A continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].   Example 1: Input: nums = [1,3,5,4,7] Output: 3 Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3. Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element 4. Example 2: Input: nums = [2,2,2,2,2] Output: 1 Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly increasing.   Constraints: 1 <= nums.length <= 104 -109 <= nums[i] <= 109",
        "505": "You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an m x n matrix. In this matrix: 0 means the cell cannot be walked through. 1 represents an empty cell that can be walked through. A number greater than 1 represents a tree in a cell that can be walked through, and this number is the tree's height. In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off. You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes 1 (an empty cell). Starting from the point (0, 0), return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, return -1. Note: The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.   Example 1: Input: forest = [[1,2,3],[0,0,4],[7,6,5]] Output: 6 Explanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps. Example 2: Input: forest = [[1,2,3],[0,0,0],[7,6,5]] Output: -1 Explanation: The trees in the bottom row cannot be accessed as the middle row is blocked. Example 3: Input: forest = [[2,3,4],[0,0,5],[8,7,6]] Output: 6 Explanation: You can follow the same path as Example 1 to cut off all the trees. Note that you can cut off the first tree at (0, 0) before making any steps.   Constraints: m == forest.length n == forest[i].length 1 <= m, n <= 50 0 <= forest[i][j] <= 109 Heights of all trees are distinct.",
        "506": "Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure. Implement the MagicDictionary class: MagicDictionary() Initializes the object. void buildDict(String[] dictionary) Sets the data structure with an array of distinct strings dictionary. bool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure, otherwise returns false.   Example 1: Input [\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"] [[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]] Output [null, null, false, true, false, false]  Explanation MagicDictionary magicDictionary = new MagicDictionary(); magicDictionary.buildDict([\"hello\", \"leetcode\"]); magicDictionary.search(\"hello\"); // return False magicDictionary.search(\"hhllo\"); // We can change the second 'h' to 'e' to match \"hello\" so we return True magicDictionary.search(\"hell\"); // return False magicDictionary.search(\"leetcoded\"); // return False   Constraints: 1 <= dictionary.length <= 100 1 <= dictionary[i].length <= 100 dictionary[i] consists of only lower-case English letters. All the strings in dictionary are distinct. 1 <= searchWord.length <= 100 searchWord consists of only lower-case English letters. buildDict will be called only once before search. At most 100 calls will be made to search.",
        "507": "Design a map that allows you to do the following: Maps a string key to a given value. Returns the sum of the values that have a key with a prefix equal to a given string. Implement the MapSum class: MapSum() Initializes the MapSum object. void insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one. int sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix.   Example 1: Input [\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"] [[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]] Output [null, null, 3, null, 5]  Explanation MapSum mapSum = new MapSum(); mapSum.insert(\"apple\", 3);   mapSum.sum(\"ap\");           // return 3 (apple = 3) mapSum.insert(\"app\", 2);     mapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)   Constraints: 1 <= key.length, prefix.length <= 50 key and prefix consist of only lowercase English letters. 1 <= val <= 1000 At most 50 calls will be made to insert and sum.",
        "508": "You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24. You are restricted with the following rules: The division operator '/' represents real division, not integer division. For example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12. Every operation done is between two numbers. In particular, we cannot use '-' as a unary operator. For example, if cards = [1, 1, 1, 1], the expression \"-1 - 1 - 1 - 1\" is not allowed. You cannot concatenate numbers together For example, if cards = [1, 2, 1, 2], the expression \"12 + 12\" is not valid. Return true if you can get such expression that evaluates to 24, and false otherwise.   Example 1: Input: cards = [4,1,8,7] Output: true Explanation: (8-4) * (7-1) = 24 Example 2: Input: cards = [1,2,1,2] Output: false   Constraints: cards.length == 4 1 <= cards[i] <= 9",
        "509": "Given a string s, return true if the s can be palindrome after deleting at most one character from it.   Example 1: Input: s = \"aba\" Output: true Example 2: Input: s = \"abca\" Output: true Explanation: You could delete the character 'c'. Example 3: Input: s = \"abc\" Output: false   Constraints: 1 <= s.length <= 105 s consists of lowercase English letters.",
        "510": "You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record. You are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following: An integer x. Record a new score of x. '+'. Record a new score that is the sum of the previous two scores. 'D'. Record a new score that is the double of the previous score. 'C'. Invalidate the previous score, removing it from the record. Return the sum of all the scores on the record after applying all the operations. The test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.   Example 1: Input: ops = [\"5\",\"2\",\"C\",\"D\",\"+\"] Output: 30 Explanation: \"5\" - Add 5 to the record, record is now [5]. \"2\" - Add 2 to the record, record is now [5, 2]. \"C\" - Invalidate and remove the previous score, record is now [5]. \"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10]. \"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15]. The total sum is 5 + 10 + 15 = 30. Example 2: Input: ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"] Output: 27 Explanation: \"5\" - Add 5 to the record, record is now [5]. \"-2\" - Add -2 to the record, record is now [5, -2]. \"4\" - Add 4 to the record, record is now [5, -2, 4]. \"C\" - Invalidate and remove the previous score, record is now [5, -2]. \"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4]. \"9\" - Add 9 to the record, record is now [5, -2, -4, 9]. \"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5]. \"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14]. The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27. Example 3: Input: ops = [\"1\",\"C\"] Output: 0 Explanation: \"1\" - Add 1 to the record, record is now [1]. \"C\" - Invalidate and remove the previous score, record is now []. Since the record is empty, the total sum is 0.   Constraints: 1 <= operations.length <= 1000 operations[i] is \"C\", \"D\", \"+\", or a string representing an integer in the range [-3 * 104, 3 * 104]. For operation \"+\", there will always be at least two previous scores on the record. For operations \"C\" and \"D\", there will always be at least one previous score on the record.",
        "511": "In this problem, a tree is an undirected graph that is connected and has no cycles. You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph. Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.   Example 1: Input: edges = [[1,2],[1,3],[2,3]] Output: [2,3] Example 2: Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]] Output: [1,4]   Constraints: n == edges.length 3 <= n <= 1000 edges[i].length == 2 1 <= ai < bi <= edges.length ai != bi There are no repeated edges. The given graph is connected.",
        "512": "In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents. The given input is a directed graph that started as a rooted tree with n nodes (with distinct values from 1 to n), with one additional directed edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [ui, vi] that represents a directed edge connecting nodes ui and vi, where ui is a parent of child vi. Return an edge that can be removed so that the resulting graph is a rooted tree of n nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.   Example 1: Input: edges = [[1,2],[1,3],[2,3]] Output: [2,3] Example 2: Input: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]] Output: [4,1]   Constraints: n == edges.length 3 <= n <= 1000 edges[i].length == 2 1 <= ui, vi <= n ui != vi",
        "513": "Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b to be a substring of a after repeating it, return -1. Notice: string \"abc\" repeated 0 times is \"\", repeated 1 time is \"abc\" and repeated 2 times is \"abcabc\".   Example 1: Input: a = \"abcd\", b = \"cdabcdab\" Output: 3 Explanation: We return 3 because by repeating a three times \"abcdabcdabcd\", b is a substring of it. Example 2: Input: a = \"a\", b = \"aa\" Output: 2   Constraints: 1 <= a.length, b.length <= 104 a and b consist of lowercase English letters.",
        "514": "Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root. The length of the path between two nodes is represented by the number of edges between them.   Example 1: Input: root = [5,4,5,1,1,null,5] Output: 2 Explanation: The shown image shows that the longest path of the same value (i.e. 5). Example 2: Input: root = [1,4,5,4,4,null,5] Output: 2 Explanation: The shown image shows that the longest path of the same value (i.e. 4).   Constraints: The number of nodes in the tree is in the range [0, 104]. -1000 <= Node.val <= 1000 The depth of the tree will not exceed 1000.",
        "515": "On an n x n chessboard, a knight starts at the cell (row, column) and attempts to make exactly k moves. The rows and columns are 0-indexed, so the top-left cell is (0, 0), and the bottom-right cell is (n - 1, n - 1). A chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction. Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there. The knight continues moving until it has made exactly k moves or has moved off the chessboard. Return the probability that the knight remains on the board after it has stopped moving.   Example 1: Input: n = 3, k = 2, row = 0, column = 0 Output: 0.06250 Explanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board. From each of those positions, there are also two moves that will keep the knight on the board. The total probability the knight stays on the board is 0.0625. Example 2: Input: n = 1, k = 0, row = 0, column = 0 Output: 1.00000   Constraints: 1 <= n <= 25 0 <= k <= 100 0 <= row, column <= n - 1",
        "516": "Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them. Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.   Example 1: Input: nums = [1,2,1,2,6,7,5,1], k = 2 Output: [0,3,5] Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5]. We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger. Example 2: Input: nums = [1,2,1,2,1,2,1,2,1], k = 2 Output: [0,2,4]   Constraints: 1 <= nums.length <= 2 * 104 1 <= nums[i] < 216 1 <= k <= floor(nums.length / 3)",
        "517": "You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs. You are given an array of employees employees where: employees[i].id is the ID of the ith employee. employees[i].importance is the importance value of the ith employee. employees[i].subordinates is a list of the IDs of the direct subordinates of the ith employee. Given an integer id that represents an employee's ID, return the total importance value of this employee and all their direct and indirect subordinates.   Example 1: Input: employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1 Output: 11 Explanation: Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3. They both have an importance value of 3. Thus, the total importance value of employee 1 is 5 + 3 + 3 = 11. Example 2: Input: employees = [[1,2,[5]],[5,-3,[]]], id = 5 Output: -3 Explanation: Employee 5 has an importance value of -3 and has no direct subordinates. Thus, the total importance value of employee 5 is -3.   Constraints: 1 <= employees.length <= 2000 1 <= employees[i].id <= 2000 All employees[i].id are unique. -100 <= employees[i].importance <= 100 One employee has at most one direct leader and may have several subordinates. The IDs in employees[i].subordinates are valid IDs.",
        "518": "We are given n different types of stickers. Each sticker has a lowercase English word on it. You would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker. Return the minimum number of stickers that you need to spell out target. If the task is impossible, return -1. Note: In all test cases, all words were chosen randomly from the 1000 most common US English words, and target was chosen as a concatenation of two random words.   Example 1: Input: stickers = [\"with\",\"example\",\"science\"], target = \"thehat\" Output: 3 Explanation: We can use 2 \"with\" stickers, and 1 \"example\" sticker. After cutting and rearrange the letters of those stickers, we can form the target \"thehat\". Also, this is the minimum number of stickers necessary to form the target string. Example 2: Input: stickers = [\"notice\",\"possible\"], target = \"basicbasic\" Output: -1 Explanation: We cannot form the target \"basicbasic\" from cutting letters from the given stickers.   Constraints: n == stickers.length 1 <= n <= 50 1 <= stickers[i].length <= 10 1 <= target.length <= 15 stickers[i] and target consist of lowercase English letters.",
        "519": "Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.   Example 1: Input: n = 5 Output: true Explanation: The binary representation of 5 is: 101 Example 2: Input: n = 7 Output: false Explanation: The binary representation of 7 is: 111. Example 3: Input: n = 11 Output: false Explanation: The binary representation of 11 is: 1011.   Constraints: 1 <= n <= 231 - 1",
        "520": "You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water. The area of an island is the number of cells with a value 1 in the island. Return the maximum area of an island in grid. If there is no island, return 0.   Example 1: Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]] Output: 6 Explanation: The answer is not 11, because the island must be connected 4-directionally. Example 2: Input: grid = [[0,0,0,0,0,0,0,0]] Output: 0   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 50 grid[i][j] is either 0 or 1.",
        "521": "Given a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively. Substrings that occur multiple times are counted the number of times they occur.   Example 1: Input: s = \"00110011\" Output: 6 Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\". Notice that some of these substrings repeat and are counted the number of times they occur. Also, \"00110011\" is not a valid substring because all the 0's (and 1's) are not grouped together. Example 2: Input: s = \"10101\" Output: 4 Explanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's.   Constraints: 1 <= s.length <= 105 s[i] is either '0' or '1'.",
        "522": "Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements. Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.   Example 1: Input: nums = [1,2,2,3,1] Output: 2 Explanation:  The input array has a degree of 2 because both elements 1 and 2 appear twice. Of the subarrays that have the same degree: [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2] The shortest length is 2. So return 2. Example 2: Input: nums = [1,2,2,3,1,4,2] Output: 6 Explanation:  The degree is 3 because the element 2 is repeated 3 times. So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.   Constraints: nums.length will be between 1 and 50,000. nums[i] will be an integer between 0 and 49,999.",
        "523": "Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.   Example 1: Input: nums = [4,3,2,3,5,2,1], k = 4 Output: true Explanation: It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums. Example 2: Input: nums = [1,2,3,4], k = 3 Output: false   Constraints: 1 <= k <= nums.length <= 16 1 <= nums[i] <= 104 The frequency of each element is in the range [1, 4].",
        "524": "There are several squares being dropped onto the X-axis of a 2D plane. You are given a 2D integer array positions where positions[i] = [lefti, sideLengthi] represents the ith square with a side length of sideLengthi that is dropped with its left edge aligned with X-coordinate lefti. Each square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands on the top side of another square or on the X-axis. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved. After each square is dropped, you must record the height of the current tallest stack of squares. Return an integer array ans where ans[i] represents the height described above after dropping the ith square.   Example 1: Input: positions = [[1,2],[2,3],[6,1]] Output: [2,5,5] Explanation: After the first drop, the tallest stack is square 1 with a height of 2. After the second drop, the tallest stack is squares 1 and 2 with a height of 5. After the third drop, the tallest stack is still squares 1 and 2 with a height of 5. Thus, we return an answer of [2, 5, 5]. Example 2: Input: positions = [[100,100],[200,100]] Output: [100,100] Explanation: After the first drop, the tallest stack is square 1 with a height of 100. After the second drop, the tallest stack is either square 1 or square 2, both with heights of 100. Thus, we return an answer of [100, 100]. Note that square 2 only brushes the right side of square 1, which does not count as landing on it.   Constraints: 1 <= positions.length <= 1000 1 <= lefti <= 108 1 <= sideLengthi <= 106",
        "525": "You are given the root of a binary search tree (BST) and an integer val. Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.   Example 1: Input: root = [4,2,7,1,3], val = 2 Output: [2,1,3] Example 2: Input: root = [4,2,7,1,3], val = 5 Output: []   Constraints: The number of nodes in the tree is in the range [1, 5000]. 1 <= Node.val <= 107 root is a binary search tree. 1 <= val <= 107",
        "526": "You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST. Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.   Example 1: Input: root = [4,2,7,1,3], val = 5 Output: [4,2,7,1,3,5] Explanation: Another accepted tree is: Example 2: Input: root = [40,20,60,10,30,50,70], val = 25 Output: [40,20,60,10,30,50,70,null,null,25] Example 3: Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5 Output: [4,2,7,1,3,5]   Constraints: The number of nodes in the tree will be in the range [0, 104]. -108 <= Node.val <= 108 All the values Node.val are unique. -108 <= val <= 108 It's guaranteed that val does not exist in the original BST.",
        "527": "You are part of a university admissions office and need to keep track of the kth highest test score from applicants in real-time. This helps to determine cut-off marks for interviews and admissions dynamically as new applicants submit their scores. You are tasked to implement a class which, for a given integer k, maintains a stream of test scores and continuously returns the kth highest test score after a new score has been submitted. More specifically, we are looking for the kth highest score in the sorted list of all scores. Implement the KthLargest class: KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of test scores nums. int add(int val) Adds a new test score val to the stream and returns the element representing the kth largest element in the pool of test scores so far.   Example 1: Input: [\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"] [[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]] Output: [null, 4, 5, 5, 8, 8] Explanation: KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]); kthLargest.add(3); // return 4 kthLargest.add(5); // return 5 kthLargest.add(10); // return 5 kthLargest.add(9); // return 8 kthLargest.add(4); // return 8 Example 2: Input: [\"KthLargest\", \"add\", \"add\", \"add\", \"add\"] [[4, [7, 7, 7, 7, 8, 3]], [2], [10], [9], [9]] Output: [null, 7, 7, 7, 8] Explanation: KthLargest kthLargest = new KthLargest(4, [7, 7, 7, 7, 8, 3]); kthLargest.add(2); // return 7 kthLargest.add(10); // return 7 kthLargest.add(9); // return 7 kthLargest.add(9); // return 8   Constraints: 0 <= nums.length <= 104 1 <= k <= nums.length + 1 -104 <= nums[i] <= 104 -104 <= val <= 104 At most 104 calls will be made to add.",
        "528": "Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1. You must write an algorithm with O(log n) runtime complexity.   Example 1: Input: nums = [-1,0,3,5,9,12], target = 9 Output: 4 Explanation: 9 exists in nums and its index is 4 Example 2: Input: nums = [-1,0,3,5,9,12], target = 2 Output: -1 Explanation: 2 does not exist in nums so return -1   Constraints: 1 <= nums.length <= 104 -104 < nums[i], target < 104 All the integers in nums are unique. nums is sorted in ascending order.",
        "529": "Design a HashSet without using any built-in hash table libraries. Implement MyHashSet class: void add(key) Inserts the value key into the HashSet. bool contains(key) Returns whether the value key exists in the HashSet or not. void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.   Example 1: Input [\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"] [[], [1], [2], [1], [3], [2], [2], [2], [2]] Output [null, null, null, true, false, null, true, null, false]  Explanation MyHashSet myHashSet = new MyHashSet(); myHashSet.add(1);      // set = [1] myHashSet.add(2);      // set = [1, 2] myHashSet.contains(1); // return True myHashSet.contains(3); // return False, (not found) myHashSet.add(2);      // set = [1, 2] myHashSet.contains(2); // return True myHashSet.remove(2);   // set = [1] myHashSet.contains(2); // return False, (already removed)   Constraints: 0 <= key <= 106 At most 104 calls will be made to add, remove, and contains.",
        "530": "Design a HashMap without using any built-in hash table libraries. Implement the MyHashMap class: MyHashMap() initializes the object with an empty map. void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value. int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key. void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.   Example 1: Input [\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"] [[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]] Output [null, null, null, 1, -1, null, 1, null, -1]  Explanation MyHashMap myHashMap = new MyHashMap(); myHashMap.put(1, 1); // The map is now [[1,1]] myHashMap.put(2, 2); // The map is now [[1,1], [2,2]] myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]] myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]] myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value) myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]] myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]] myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]   Constraints: 0 <= key, value <= 106 At most 104 calls will be made to put, get, and remove.",
        "531": "Design your implementation of the linked list. You can choose to use a singly or doubly linked list. A node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node. If you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed. Implement the MyLinkedList class: MyLinkedList() Initializes the MyLinkedList object. int get(int index) Get the value of the indexth node in the linked list. If the index is invalid, return -1. void addAtHead(int val) Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. void addAtTail(int val) Append a node of value val as the last element of the linked list. void addAtIndex(int index, int val) Add a node of value val before the indexth node in the linked list. If index equals the length of the linked list, the node will be appended to the end of the linked list. If index is greater than the length, the node will not be inserted. void deleteAtIndex(int index) Delete the indexth node in the linked list, if the index is valid.   Example 1: Input [\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"] [[], [1], [3], [1, 2], [1], [1], [1]] Output [null, null, null, null, 2, null, 3]  Explanation MyLinkedList myLinkedList = new MyLinkedList(); myLinkedList.addAtHead(1); myLinkedList.addAtTail(3); myLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3 myLinkedList.get(1);              // return 2 myLinkedList.deleteAtIndex(1);    // now the linked list is 1->3 myLinkedList.get(1);              // return 3   Constraints: 0 <= index, val <= 1000 Please do not use the built-in LinkedList library. At most 2000 calls will be made to get, addAtHead, addAtTail, addAtIndex and deleteAtIndex.",
        "532": "Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.   Example 1: Input: s = \"Hello\" Output: \"hello\" Example 2: Input: s = \"here\" Output: \"here\" Example 3: Input: s = \"LOVELY\" Output: \"lovely\"   Constraints: 1 <= s.length <= 100 s consists of printable ASCII characters.",
        "533": "You are given an integer n and an array of unique integers blacklist. Design an algorithm to pick a random integer in the range [0, n - 1] that is not in blacklist. Any integer that is in the mentioned range and not in blacklist should be equally likely to be returned. Optimize your algorithm such that it minimizes the number of calls to the built-in random function of your language. Implement the Solution class: Solution(int n, int[] blacklist) Initializes the object with the integer n and the blacklisted integers blacklist. int pick() Returns a random integer in the range [0, n - 1] and not in blacklist.   Example 1: Input [\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"] [[7, [2, 3, 5]], [], [], [], [], [], [], []] Output [null, 0, 4, 1, 6, 1, 0, 4]  Explanation Solution solution = new Solution(7, [2, 3, 5]); solution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,                  // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4). solution.pick(); // return 4 solution.pick(); // return 1 solution.pick(); // return 6 solution.pick(); // return 1 solution.pick(); // return 0 solution.pick(); // return 4   Constraints: 1 <= n <= 109 0 <= blacklist.length <= min(105, n - 1) 0 <= blacklist[i] < n All the values of blacklist are unique. At most 2 * 104 calls will be made to pick.",
        "534": "Given two strings s1 and s2, return the lowest ASCII sum of deleted characters to make two strings equal.   Example 1: Input: s1 = \"sea\", s2 = \"eat\" Output: 231 Explanation: Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum. Deleting \"t\" from \"eat\" adds 116 to the sum. At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this. Example 2: Input: s1 = \"delete\", s2 = \"leet\" Output: 403 Explanation: Deleting \"dee\" from \"delete\" to turn the string into \"let\", adds 100[d] + 101[e] + 101[e] to the sum. Deleting \"e\" from \"leet\" adds 101[e] to the sum. At the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403. If instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.   Constraints: 1 <= s1.length, s2.length <= 1000 s1 and s2 consist of lowercase English letters.",
        "535": "Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.   Example 1: Input: nums = [10,5,2,6], k = 100 Output: 8 Explanation: The 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6] Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k. Example 2: Input: nums = [1,2,3], k = 0 Output: 0   Constraints: 1 <= nums.length <= 3 * 104 1 <= nums[i] <= 1000 0 <= k <= 106",
        "536": "You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee. Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). The transaction fee is only charged once for each stock purchase and sale.   Example 1: Input: prices = [1,3,2,8,4,9], fee = 2 Output: 8 Explanation: The maximum profit can be achieved by: - Buying at prices[0] = 1 - Selling at prices[3] = 8 - Buying at prices[4] = 4 - Selling at prices[5] = 9 The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8. Example 2: Input: prices = [1,3,7,5,10,3], fee = 3 Output: 6   Constraints: 1 <= prices.length <= 5 * 104 1 <= prices[i] < 5 * 104 0 <= fee < 5 * 104",
        "537": "A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as half-open intervals and query about them. A half-open interval [left, right) denotes all the real numbers x where left <= x < right. Implement the RangeModule class: RangeModule() Initializes the object of the data structure. void addRange(int left, int right) Adds the half-open interval [left, right), tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked. boolean queryRange(int left, int right) Returns true if every real number in the interval [left, right) is currently being tracked, and false otherwise. void removeRange(int left, int right) Stops tracking every real number currently being tracked in the half-open interval [left, right).   Example 1: Input [\"RangeModule\", \"addRange\", \"removeRange\", \"queryRange\", \"queryRange\", \"queryRange\"] [[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]] Output [null, null, null, true, false, true]  Explanation RangeModule rangeModule = new RangeModule(); rangeModule.addRange(10, 20); rangeModule.removeRange(14, 16); rangeModule.queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked) rangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked) rangeModule.queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation)   Constraints: 1 <= left < right <= 109 At most 104 calls will be made to addRange, queryRange, and removeRange.",
        "538": "We have two special characters: The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11). Given a binary array bits that ends with 0, return true if the last character must be a one-bit character.   Example 1: Input: bits = [1,0,0] Output: true Explanation: The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character. Example 2: Input: bits = [1,1,1,0] Output: false Explanation: The only way to decode it is two-bit character and two-bit character. So the last character is not one-bit character.   Constraints: 1 <= bits.length <= 1000 bits[i] is either 0 or 1.",
        "539": "Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.   Example 1: Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7] Output: 3 Explanation: The repeated subarray with maximum length is [3,2,1]. Example 2: Input: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0] Output: 5 Explanation: The repeated subarray with maximum length is [0,0,0,0,0].   Constraints: 1 <= nums1.length, nums2.length <= 1000 0 <= nums1[i], nums2[i] <= 100",
        "540": "The distance of a pair of integers a and b is defined as the absolute difference between a and b. Given an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.   Example 1: Input: nums = [1,3,1], k = 1 Output: 0 Explanation: Here are all the pairs: (1,3) -> 2 (1,1) -> 0 (3,1) -> 2 Then the 1st smallest distance pair is (1,1), and its distance is 0. Example 2: Input: nums = [1,1,1], k = 2 Output: 0 Example 3: Input: nums = [1,6,1], k = 3 Output: 5   Constraints: n == nums.length 2 <= n <= 104 0 <= nums[i] <= 106 1 <= k <= n * (n - 1) / 2",
        "541": "Given an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words. If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string. Note that the word should be built from left to right with each additional character being added to the end of a previous word.    Example 1: Input: words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"] Output: \"world\" Explanation: The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\". Example 2: Input: words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"] Output: \"apple\" Explanation: Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".   Constraints: 1 <= words.length <= 1000 1 <= words[i].length <= 30 words[i] consists of lowercase English letters.",
        "542": "Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account. Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name. After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.   Example 1: Input: accounts = [[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]] Output: [[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]] Explanation: The first and second John's are the same person as they have the common email \"johnsmith@mail.com\". The third John and Mary are different people as none of their email addresses are used by other accounts. We could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'],  ['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted. Example 2: Input: accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]] Output: [[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]   Constraints: 1 <= accounts.length <= 1000 2 <= accounts[i].length <= 10 1 <= accounts[i][j].length <= 30 accounts[i][0] consists of English letters. accounts[i][j] (for j > 0) is a valid email.",
        "543": "Given a C++ program, remove comments from it. The program source is an array of strings source where source[i] is the ith line of the source code. This represents the result of splitting the original source code string by the newline character '\\n'. In C++, there are two types of comments, line comments, and block comments. The string \"//\" denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored. The string \"/*\" denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of \"*/\" should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string \"/*/\" does not yet end the block comment, as the ending would be overlapping the beginning. The first effective comment takes precedence over others. For example, if the string \"//\" occurs in a block comment, it is ignored. Similarly, if the string \"/*\" occurs in a line or block comment, it is also ignored. If a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty. There will be no control characters, single quote, or double quote characters. For example, source = \"string s = \"/* Not a comment. */\";\" will not be a test case. Also, nothing else such as defines or macros will interfere with the comments. It is guaranteed that every open block comment will eventually be closed, so \"/*\" outside of a line or block comment always starts a new comment. Finally, implicit newline characters can be deleted by block comments. Please see the examples below for details. After removing the comments from the source code, return the source code in the same format.   Example 1: Input: source = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"] Output: [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"] Explanation: The line by line code is visualized as below: /*Test program */ int main() {    // variable declaration  int a, b, c; /* This is a test    multiline      comment for     testing */ a = b + c; } The string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments. The line by line output code is visualized as below: int main() {     int a, b, c; a = b + c; } Example 2: Input: source = [\"a/*comment\", \"line\", \"more_comment*/b\"] Output: [\"ab\"] Explanation: The original source string is \"a/*comment\\nline\\nmore_comment*/b\", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].   Constraints: 1 <= source.length <= 100 0 <= source[i].length <= 80 source[i] consists of printable ASCII characters. Every open block comment is eventually closed. There are no single-quote or double-quote in the input.",
        "544": "Given an array of integers nums, calculate the pivot index of this array. The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right. If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array. Return the leftmost pivot index. If no such index exists, return -1.   Example 1: Input: nums = [1,7,3,6,5,6] Output: 3 Explanation: The pivot index is 3. Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 Right sum = nums[4] + nums[5] = 5 + 6 = 11 Example 2: Input: nums = [1,2,3] Output: -1 Explanation: There is no index that satisfies the conditions in the problem statement. Example 3: Input: nums = [2,1,-1] Output: 0 Explanation: The pivot index is 0. Left sum = 0 (no elements to the left of index 0) Right sum = nums[1] + nums[2] = 1 + -1 = 0   Constraints: 1 <= nums.length <= 104 -1000 <= nums[i] <= 1000   Note: This question is the same as 1991: https://leetcode.com/problems/find-the-middle-index-in-array/",
        "545": "Given the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts. The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null. The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later. Return an array of the k parts.   Example 1: Input: head = [1,2,3], k = 5 Output: [[1],[2],[3],[],[]] Explanation: The first element output[0] has output[0].val = 1, output[0].next = null. The last element output[4] is null, but its string representation as a ListNode is []. Example 2: Input: head = [1,2,3,4,5,6,7,8,9,10], k = 3 Output: [[1,2,3,4],[5,6,7],[8,9,10]] Explanation: The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.   Constraints: The number of nodes in the list is in the range [0, 1000]. 0 <= Node.val <= 1000 1 <= k <= 50",
        "546": "Given a string formula representing a chemical formula, return the count of each atom. The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name. One or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow. For example, \"H2O\" and \"H2O2\" are possible, but \"H1O2\" is impossible. Two formulas are concatenated together to produce another formula. For example, \"H2O2He3Mg4\" is also a formula. A formula placed in parentheses, and a count (optionally added) is also a formula. For example, \"(H2O2)\" and \"(H2O2)3\" are formulas. Return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on. The test cases are generated so that all the values in the output fit in a 32-bit integer.   Example 1: Input: formula = \"H2O\" Output: \"H2O\" Explanation: The count of elements are {'H': 2, 'O': 1}. Example 2: Input: formula = \"Mg(OH)2\" Output: \"H2MgO2\" Explanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}. Example 3: Input: formula = \"K4(ON(SO3)2)2\" Output: \"K4N2O14S4\" Explanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.   Constraints: 1 <= formula.length <= 1000 formula consists of English letters, digits, '(', and ')'. formula is always valid.",
        "547": "A self-dividing number is a number that is divisible by every digit it contains. For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0. A self-dividing number is not allowed to contain the digit zero. Given two integers left and right, return a list of all the self-dividing numbers in the range [left, right] (both inclusive).   Example 1: Input: left = 1, right = 22 Output: [1,2,3,4,5,6,7,8,9,11,12,15,22] Example 2: Input: left = 47, right = 85 Output: [48,55,66,77]   Constraints: 1 <= left <= right <= 104",
        "548": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking. A double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.). The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end. Implement the MyCalendar class: MyCalendar() Initializes the calendar object. boolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.   Example 1: Input [\"MyCalendar\", \"book\", \"book\", \"book\"] [[], [10, 20], [15, 25], [20, 30]] Output [null, true, false, true]  Explanation MyCalendar myCalendar = new MyCalendar(); myCalendar.book(10, 20); // return True myCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event. myCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.   Constraints: 0 <= start < end <= 109 At most 1000 calls will be made to book.",
        "549": "Given a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be very large, return it modulo 109 + 7. A subsequence of a string is obtained by deleting zero or more characters from the string. A sequence is palindromic if it is equal to the sequence reversed. Two sequences a1, a2, ... and b1, b2, ... are different if there is some i for which ai != bi.   Example 1: Input: s = \"bccb\" Output: 6 Explanation: The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'. Note that 'bcb' is counted only once, even though it occurs twice. Example 2: Input: s = \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\" Output: 104860361 Explanation: There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7.   Constraints: 1 <= s.length <= 1000 s[i] is either 'a', 'b', 'c', or 'd'.",
        "550": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a triple booking. A triple booking happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.). The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end. Implement the MyCalendarTwo class: MyCalendarTwo() Initializes the calendar object. boolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return false and do not add the event to the calendar.   Example 1: Input [\"MyCalendarTwo\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"] [[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]] Output [null, true, true, true, false, true, true]  Explanation MyCalendarTwo myCalendarTwo = new MyCalendarTwo(); myCalendarTwo.book(10, 20); // return True, The event can be booked.  myCalendarTwo.book(50, 60); // return True, The event can be booked.  myCalendarTwo.book(10, 40); // return True, The event can be double booked.  myCalendarTwo.book(5, 15);  // return False, The event cannot be booked, because it would result in a triple booking. myCalendarTwo.book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked. myCalendarTwo.book(25, 55); // return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.   Constraints: 0 <= start < end <= 109 At most 1000 calls will be made to book.",
        "551": "You are given an image represented by an m x n grid of integers image, where image[i][j] represents the pixel value of the image. You are also given three integers sr, sc, and color. Your task is to perform a flood fill on the image starting from the pixel image[sr][sc]. To perform a flood fill: Begin with the starting pixel and change its color to color. Perform the same process for each pixel that is directly adjacent (pixels that share a side with the original pixel, either horizontally or vertically) and shares the same color as the starting pixel. Keep repeating this process by checking neighboring pixels of the updated pixels and modifying their color if it matches the original color of the starting pixel. The process stops when there are no more adjacent pixels of the original color to update. Return the modified image after performing the flood fill.   Example 1: Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2 Output: [[2,2,2],[2,2,0],[2,0,1]] Explanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color. Note the bottom corner is not colored 2, because it is not horizontally or vertically connected to the starting pixel. Example 2: Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0 Output: [[0,0,0],[0,0,0]] Explanation: The starting pixel is already colored with 0, which is the same as the target color. Therefore, no changes are made to the image.   Constraints: m == image.length n == image[i].length 1 <= m, n <= 50 0 <= image[i][j], color < 216 0 <= sr < m 0 <= sc < n",
        "552": "We are given an array asteroids of integers representing asteroids in a row. For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed. Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.   Example 1: Input: asteroids = [5,10,-5] Output: [5,10] Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide. Example 2: Input: asteroids = [8,-8] Output: [] Explanation: The 8 and -8 collide exploding each other. Example 3: Input: asteroids = [10,2,-5] Output: [10] Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.   Constraints: 2 <= asteroids.length <= 104 -1000 <= asteroids[i] <= 1000 asteroids[i] != 0",
        "553": "You are given a string expression representing a Lisp-like expression to return the integer value of. The syntax for these expressions is given as follows. An expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer. (An integer could be positive or negative.) A let expression takes the form \"(let v1 e1 v2 e2 ... vn en expr)\", where let is always the string \"let\", then there are one or more pairs of alternating variables and expressions, meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; and then the value of this let expression is the value of the expression expr. An add expression takes the form \"(add e1 e2)\" where add is always the string \"add\", there are always two expressions e1, e2 and the result is the addition of the evaluation of e1 and the evaluation of e2. A mult expression takes the form \"(mult e1 e2)\" where mult is always the string \"mult\", there are always two expressions e1, e2 and the result is the multiplication of the evaluation of e1 and the evaluation of e2. For this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names \"add\", \"let\", and \"mult\" are protected and will never be used as variable names. Finally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.   Example 1: Input: expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\" Output: 14 Explanation: In the expression (add x y), when checking for the value of the variable x, we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate. Since x = 3 is found first, the value of x is 3. Example 2: Input: expression = \"(let x 3 x 2 x)\" Output: 2 Explanation: Assignment in let statements is processed sequentially. Example 3: Input: expression = \"(let x 1 y 2 x (add x y) (add x y))\" Output: 5 Explanation: The first (add x y) evaluates as 3, and is assigned to x. The second (add x y) evaluates as 3+2 = 5.   Constraints: 1 <= expression.length <= 2000 There are no leading or trailing spaces in expression. All tokens are separated by a single space in expression. The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer. The expression is guaranteed to be legal and evaluate to an integer.",
        "554": "An integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y. Given an integer n, return the largest number that is less than or equal to n with monotone increasing digits.   Example 1: Input: n = 10 Output: 9 Example 2: Input: n = 1234 Output: 1234 Example 3: Input: n = 332 Output: 299   Constraints: 0 <= n <= 109",
        "555": "Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.   Example 1: Input: temperatures = [73,74,75,71,69,72,76,73] Output: [1,1,4,2,1,1,0,0] Example 2: Input: temperatures = [30,40,50,60] Output: [1,1,1,0] Example 3: Input: temperatures = [30,60,90] Output: [1,1,0]   Constraints: 1 <= temperatures.length <= 105 30 <= temperatures[i] <= 100",
        "556": "You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times: Pick any nums[i] and delete it to earn nums[i] points. Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1. Return the maximum number of points you can earn by applying the above operation some number of times.   Example 1: Input: nums = [3,4,2] Output: 6 Explanation: You can perform the following operations: - Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2]. - Delete 2 to earn 2 points. nums = []. You earn a total of 6 points. Example 2: Input: nums = [2,2,3,3,3,4] Output: 9 Explanation: You can perform the following operations: - Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3]. - Delete a 3 again to earn 3 points. nums = [3]. - Delete a 3 once more to earn 3 points. nums = []. You earn a total of 9 points.   Constraints: 1 <= nums.length <= 2 * 104 1 <= nums[i] <= 104",
        "557": "You are given an n x n grid representing a field of cherries, each cell is one of three possible integers. 0 means the cell is empty, so you can pass through, 1 means the cell contains a cherry that you can pick up and pass through, or -1 means the cell contains a thorn that blocks your way. Return the maximum number of cherries you can collect by following the rules below: Starting at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1). After reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells. When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0. If there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected.   Example 1: Input: grid = [[0,1,-1],[1,0,-1],[1,1,1]] Output: 5 Explanation: The player started at (0, 0) and went down, down, right right to reach (2, 2). 4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]]. Then, the player went left, up, up, left to return home, picking up one more cherry. The total number of cherries picked up is 5, and this is the maximum possible. Example 2: Input: grid = [[1,1,-1],[1,-1,1],[-1,1,1]] Output: 0   Constraints: n == grid.length n == grid[i].length 1 <= n <= 50 grid[i][j] is -1, 0, or 1. grid[0][0] != -1 grid[n - 1][n - 1] != -1",
        "558": "You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target. We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.   Example 1: Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2 Output: 2 Example 2: Input: times = [[1,2,1]], n = 2, k = 1 Output: 1 Example 3: Input: times = [[1,2,1]], n = 2, k = 2 Output: -1   Constraints: 1 <= k <= n <= 100 1 <= times.length <= 6000 times[i].length == 3 1 <= ui, vi <= n ui != vi 0 <= wi <= 100 All the pairs (ui, vi) are unique. (i.e., no multiple edges.)",
        "559": "You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters. Return the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.   Example 1: Input: letters = [\"c\",\"f\",\"j\"], target = \"a\" Output: \"c\" Explanation: The smallest character that is lexicographically greater than 'a' in letters is 'c'. Example 2: Input: letters = [\"c\",\"f\",\"j\"], target = \"c\" Output: \"f\" Explanation: The smallest character that is lexicographically greater than 'c' in letters is 'f'. Example 3: Input: letters = [\"x\",\"x\",\"y\",\"y\"], target = \"z\" Output: \"x\" Explanation: There are no characters in letters that is lexicographically greater than 'z' so we return letters[0].   Constraints: 2 <= letters.length <= 104 letters[i] is a lowercase English letter. letters is sorted in non-decreasing order. letters contains at least two different characters. target is a lowercase English letter.",
        "560": "You are given an integer array nums where the largest integer is unique. Determine whether the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, or return -1 otherwise.   Example 1: Input: nums = [3,6,1,0] Output: 1 Explanation: 6 is the largest integer. For every other number in the array x, 6 is at least twice as big as x. The index of value 6 is 1, so we return 1. Example 2: Input: nums = [1,2,3,4] Output: -1 Explanation: 4 is less than twice the value of 3, so we return -1.   Constraints: 2 <= nums.length <= 50 0 <= nums[i] <= 100 The largest element in nums is unique.",
        "561": "Given a string licensePlate and an array of strings words, find the shortest completing word in words. A completing word is a word that contains all the letters in licensePlate. Ignore numbers and spaces in licensePlate, and treat letters as case insensitive. If a letter appears more than once in licensePlate, then it must appear in the word the same number of times or more. For example, if licensePlate = \"aBc 12c\", then it contains letters 'a', 'b' (ignoring case), and 'c' twice. Possible completing words are \"abccdef\", \"caaacab\", and \"cbca\". Return the shortest completing word in words. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in words.   Example 1: Input: licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"] Output: \"steps\" Explanation: licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'. \"step\" contains 't' and 'p', but only contains 1 's'. \"steps\" contains 't', 'p', and both 's' characters. \"stripe\" is missing an 's'. \"stepple\" is missing an 's'. Since \"steps\" is the only word containing all the letters, that is the answer. Example 2: Input: licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"] Output: \"pest\" Explanation: licensePlate only contains the letter 's'. All the words contain 's', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3.   Constraints: 1 <= licensePlate.length <= 7 licensePlate contains digits, letters (uppercase or lowercase), or space ' '. 1 <= words.length <= 1000 1 <= words[i].length <= 15 words[i] consists of lower case English letters.",
        "562": "A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls. The world is modeled as an m x n binary grid isInfected, where isInfected[i][j] == 0 represents uninfected cells, and isInfected[i][j] == 1 represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary. Every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There will never be a tie. Return the number of walls used to quarantine all the infected regions. If the world will become fully infected, return the number of walls used.   Example 1: Input: isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]] Output: 10 Explanation: There are 2 contaminated regions. On the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is: On the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained. Example 2: Input: isInfected = [[1,1,1],[1,0,1],[1,1,1]] Output: 4 Explanation: Even though there is only one cell saved, there are 4 walls built. Notice that walls are only built on the shared boundary of two different cells. Example 3: Input: isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]] Output: 13 Explanation: The region on the left only builds two new walls.   Constraints: m == isInfected.length n == isInfected[i].length 1 <= m, n <= 50 isInfected[i][j] is either 0 or 1. There is always a contiguous viral region throughout the described process that will infect strictly more uncontaminated squares in the next round.",
        "563": "You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. Each move consists of turning one wheel one slot. The lock initially starts at '0000', a string representing the state of the 4 wheels. You are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it. Given a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.   Example 1: Input: deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\" Output: 6 Explanation:  A sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\". Note that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid, because the wheels of the lock become stuck after the display becomes the dead end \"0102\". Example 2: Input: deadends = [\"8888\"], target = \"0009\" Output: 1 Explanation: We can turn the last wheel in reverse to move from \"0000\" -> \"0009\". Example 3: Input: deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\" Output: -1 Explanation: We cannot reach the target without getting stuck.   Constraints: 1 <= deadends.length <= 500 deadends[i].length == 4 target.length == 4 target will not be in the list deadends. target and deadends[i] consist of digits only.",
        "564": "There is a safe protected by a password. The password is a sequence of n digits where each digit can be in the range [0, k - 1]. The safe has a peculiar way of checking the password. When you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit. For example, the correct password is \"345\" and you enter in \"012345\": After typing 0, the most recent 3 digits is \"0\", which is incorrect. After typing 1, the most recent 3 digits is \"01\", which is incorrect. After typing 2, the most recent 3 digits is \"012\", which is incorrect. After typing 3, the most recent 3 digits is \"123\", which is incorrect. After typing 4, the most recent 3 digits is \"234\", which is incorrect. After typing 5, the most recent 3 digits is \"345\", which is correct and the safe unlocks. Return any string of minimum length that will unlock the safe at some point of entering it.   Example 1: Input: n = 1, k = 2 Output: \"10\" Explanation: The password is a single digit, so enter each digit. \"01\" would also unlock the safe. Example 2: Input: n = 2, k = 2 Output: \"01100\" Explanation: For each possible password: - \"00\" is typed in starting from the 4th digit. - \"01\" is typed in starting from the 1st digit. - \"10\" is typed in starting from the 3rd digit. - \"11\" is typed in starting from the 2nd digit. Thus \"01100\" will unlock the safe. \"10011\", and \"11001\" would also unlock the safe.   Constraints: 1 <= n <= 4 1 <= k <= 10 1 <= kn <= 4096",
        "565": "You are standing at position 0 on an infinite number line. There is a destination at position target. You can make some number of moves numMoves so that: On each move, you can either go left or right. During the ith move (starting from i == 1 to i == numMoves), you take i steps in the chosen direction. Given the integer target, return the minimum number of moves required (i.e., the minimum numMoves) to reach the destination.   Example 1: Input: target = 2 Output: 3 Explanation: On the 1st move, we step from 0 to 1 (1 step). On the 2nd move, we step from 1 to -1 (2 steps). On the 3rd move, we step from -1 to 2 (3 steps). Example 2: Input: target = 3 Output: 2 Explanation: On the 1st move, we step from 0 to 1 (1 step). On the 2nd move, we step from 1 to 3 (2 steps).   Constraints: -109 <= target <= 109 target != 0",
        "566": "You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains one less block than the row beneath it and is centered on top. To make the pyramid aesthetically pleasing, there are only specific triangular patterns that are allowed. A triangular pattern consists of a single block stacked on top of two blocks. The patterns are given as a list of three-letter strings allowed, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block. For example, \"ABC\" represents a triangular pattern with a 'C' block stacked on top of an 'A' (left) and 'B' (right) block. Note that this is different from \"BAC\" where 'B' is on the left bottom and 'A' is on the right bottom. You start with a bottom row of blocks bottom, given as a single string, that you must use as the base of the pyramid. Given bottom and allowed, return true if you can build the pyramid all the way to the top such that every triangular pattern in the pyramid is in allowed, or false otherwise.   Example 1: Input: bottom = \"BCD\", allowed = [\"BCC\",\"CDE\",\"CEA\",\"FFF\"] Output: true Explanation: The allowed triangular patterns are shown on the right. Starting from the bottom (level 3), we can build \"CE\" on level 2 and then build \"A\" on level 1. There are three triangular patterns in the pyramid, which are \"BCC\", \"CDE\", and \"CEA\". All are allowed. Example 2: Input: bottom = \"AAAA\", allowed = [\"AAB\",\"AAC\",\"BCD\",\"BBE\",\"DEF\"] Output: false Explanation: The allowed triangular patterns are shown on the right. Starting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1.   Constraints: 2 <= bottom.length <= 6 0 <= allowed.length <= 216 allowed[i].length == 3 The letters in all input strings are from the set {'A', 'B', 'C', 'D', 'E', 'F'}. All the values of allowed are unique.",
        "567": "You are given a 2D integer array intervals where intervals[i] = [starti, endi] represents all the integers from starti to endi inclusively. A containing set is an array nums where each interval from intervals has at least two integers in nums. For example, if intervals = [[1,3], [3,7], [8,9]], then [1,2,4,7,8,9] and [2,3,4,8,9] are containing sets. Return the minimum possible size of a containing set.   Example 1: Input: intervals = [[1,3],[3,7],[8,9]] Output: 5 Explanation: let nums = [2, 3, 4, 8, 9]. It can be shown that there cannot be any containing array of size 4. Example 2: Input: intervals = [[1,3],[1,4],[2,5],[3,5]] Output: 3 Explanation: let nums = [2, 3, 4]. It can be shown that there cannot be any containing array of size 2. Example 3: Input: intervals = [[1,2],[2,3],[2,4],[4,5]] Output: 5 Explanation: let nums = [1, 2, 3, 4, 5]. It can be shown that there cannot be any containing array of size 4.   Constraints: 1 <= intervals.length <= 3000 intervals[i].length == 2 0 <= starti < endi <= 108",
        "568": "Special binary strings are binary strings with the following two properties: The number of 0's is equal to the number of 1's. Every prefix of the binary string has at least as many 1's as 0's. You are given a special binary string s. A move consists of choosing two consecutive, non-empty, special substrings of s, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string. Return the lexicographically largest resulting string possible after applying the mentioned operations on the string.   Example 1: Input: s = \"11011000\" Output: \"11100100\" Explanation: The strings \"10\" [occuring at s[1]] and \"1100\" [at s[3]] are swapped. This is the lexicographically largest string possible after some number of swaps. Example 2: Input: s = \"10\" Output: \"10\"   Constraints: 1 <= s.length <= 50 s[i] is either '0' or '1'. s is a special binary string.",
        "569": "You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part. Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s. Return a list of integers representing the size of these parts.   Example 1: Input: s = \"ababcbacadefegdehijhklij\" Output: [9,7,8] Explanation: The partition is \"ababcbaca\", \"defegde\", \"hijhklij\". This is a partition so that each letter appears in at most one part. A partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits s into less parts. Example 2: Input: s = \"eccbbbbdec\" Output: [10]   Constraints: 1 <= s.length <= 500 s consists of lowercase English letters.",
        "570": "You are given an integer n. You have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines. The ith element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0. Return the order of the largest axis-aligned plus sign of 1's contained in grid. If there is none, return 0. An axis-aligned plus sign of 1's of order k has some center grid[r][c] == 1 along with four arms of length k - 1 going up, down, left, and right, and made of 1's. Note that there could be 0's or 1's beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1's.   Example 1: Input: n = 5, mines = [[4,2]] Output: 2 Explanation: In the above grid, the largest plus sign can only be of order 2. One of them is shown. Example 2: Input: n = 1, mines = [[0,0]] Output: 0 Explanation: There is no plus sign, so return 0.   Constraints: 1 <= n <= 500 1 <= mines.length <= 5000 0 <= xi, yi < n All the pairs (xi, yi) are unique.",
        "571": "There are n couples sitting in 2n seats arranged in a row and want to hold hands. The people and seats are represented by an integer array row where row[i] is the ID of the person sitting in the ith seat. The couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1). Return the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.   Example 1: Input: row = [0,2,1,3] Output: 1 Explanation: We only need to swap the second (row[1]) and third (row[2]) person. Example 2: Input: row = [3,2,0,1] Output: 0 Explanation: All couples are already seated side by side.   Constraints: 2n == row.length 2 <= n <= 30 n is even. 0 <= row[i] < 2n All the elements of row are unique.",
        "572": "Given an m x n matrix, return true if the matrix is Toeplitz. Otherwise, return false. A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.   Example 1: Input: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]] Output: true Explanation: In the above grid, the diagonals are: \"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\". In each diagonal all elements are the same, so the answer is True. Example 2: Input: matrix = [[1,2],[2,2]] Output: false Explanation: The diagonal \"[1, 2]\" has different elements.   Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 20 0 <= matrix[i][j] <= 99   Follow up: What if the matrix is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once? What if the matrix is so large that you can only load up a partial row into the memory at once?",
        "573": "Given a string s, rearrange the characters of s so that any two adjacent characters are not the same. Return any possible rearrangement of s or return \"\" if not possible.   Example 1: Input: s = \"aab\" Output: \"aba\" Example 2: Input: s = \"aaab\" Output: \"\"   Constraints: 1 <= s.length <= 500 s consists of lowercase English letters.",
        "574": "You are given an integer array arr. We split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array. Return the largest number of chunks we can make to sort the array.   Example 1: Input: arr = [5,4,3,2,1] Output: 1 Explanation: Splitting into two or more chunks will not return the required result. For example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted. Example 2: Input: arr = [2,1,3,4,4] Output: 4 Explanation: We can split into two chunks, such as [2, 1], [3, 4, 4]. However, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.   Constraints: 1 <= arr.length <= 2000 0 <= arr[i] <= 108",
        "575": "You are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1]. We split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array. Return the largest number of chunks we can make to sort the array.   Example 1: Input: arr = [4,3,2,1,0] Output: 1 Explanation: Splitting into two or more chunks will not return the required result. For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted. Example 2: Input: arr = [1,0,2,3,4] Output: 4 Explanation: We can split into two chunks, such as [1, 0], [2, 3, 4]. However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.   Constraints: n == arr.length 1 <= n <= 10 0 <= arr[i] < n All the elements of arr are unique.",
        "576": "Given an expression such as expression = \"e + 8 - a + 5\" and an evaluation map such as {\"e\": 1} (given in terms of evalvars = [\"e\"] and evalints = [1]), return a list of tokens representing the simplified expression, such as [\"-1*a\",\"14\"] An expression alternates chunks and symbols, with a space separating each chunk and symbol. A chunk is either an expression in parentheses, a variable, or a non-negative integer. A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like \"2x\" or \"-x\". Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. For example, expression = \"1 + 2 * 3\" has an answer of [\"7\"]. The format of the output is as follows: For each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically. For example, we would never write a term like \"b*a*c\", only \"a*b*c\". Terms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term. For example, \"a*a*b*c\" has degree 4. The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed. An example of a well-formatted answer is [\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"]. Terms (including constant terms) with coefficient 0 are not included. For example, an expression of \"0\" has an output of []. Note: You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].   Example 1: Input: expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1] Output: [\"-1*a\",\"14\"] Example 2: Input: expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12] Output: [\"-1*pressure\",\"5\"] Example 3: Input: expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = [] Output: [\"1*e*e\",\"-64\"]   Constraints: 1 <= expression.length <= 250 expression consists of lowercase English letters, digits, '+', '-', '*', '(', ')', ' '. expression does not contain any leading or trailing spaces. All the tokens in expression are separated by a single space. 0 <= evalvars.length <= 100 1 <= evalvars[i].length <= 20 evalvars[i] consists of lowercase English letters. evalints.length == evalvars.length -100 <= evalints[i] <= 100",
        "577": "You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels. Letters are case sensitive, so \"a\" is considered a different type of stone from \"A\".   Example 1: Input: jewels = \"aA\", stones = \"aAAbbbb\" Output: 3 Example 2: Input: jewels = \"z\", stones = \"ZZ\" Output: 0   Constraints: 1 <= jewels.length, stones.length <= 50 jewels and stones consist of only English letters. All the characters of jewels are unique.",
        "578": "On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it. The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]]. Given the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.   Example 1: Input: board = [[1,2,3],[4,0,5]] Output: 1 Explanation: Swap the 0 and the 5 in one move. Example 2: Input: board = [[1,2,3],[5,4,0]] Output: -1 Explanation: No number of moves will make the board solved. Example 3: Input: board = [[4,1,2],[5,0,3]] Output: 5 Explanation: 5 is the smallest number of moves that solves the board. An example path: After move 0: [[4,1,2],[5,0,3]] After move 1: [[4,1,2],[0,5,3]] After move 2: [[0,1,2],[4,5,3]] After move 3: [[1,0,2],[4,5,3]] After move 4: [[1,2,0],[4,5,3]] After move 5: [[1,2,3],[4,5,0]]   Constraints: board.length == 2 board[i].length == 3 0 <= board[i][j] <= 5 Each value board[i][j] is unique.",
        "579": "You are given an integer array nums of length n which represents a permutation of all the integers in the range [0, n - 1]. The number of global inversions is the number of the different pairs (i, j) where: 0 <= i < j < n nums[i] > nums[j] The number of local inversions is the number of indices i where: 0 <= i < n - 1 nums[i] > nums[i + 1] Return true if the number of global inversions is equal to the number of local inversions.   Example 1: Input: nums = [1,0,2] Output: true Explanation: There is 1 global inversion and 1 local inversion. Example 2: Input: nums = [1,2,0] Output: false Explanation: There are 2 global inversions and 1 local inversion.   Constraints: n == nums.length 1 <= n <= 105 0 <= nums[i] < n All the integers of nums are unique. nums is a permutation of all the numbers in the range [0, n - 1].",
        "580": "In a string composed of 'L', 'R', and 'X' characters, like \"RXXLRXRXL\", a move consists of either replacing one occurrence of \"XL\" with \"LX\", or replacing one occurrence of \"RX\" with \"XR\". Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform start to end.   Example 1: Input: start = \"RXXLRXRXL\", end = \"XRLXXRRLX\" Output: true Explanation: We can transform start to end following these steps: RXXLRXRXL -> XRXLRXRXL -> XRLXRXRXL -> XRLXXRRXL -> XRLXXRRLX Example 2: Input: start = \"X\", end = \"L\" Output: false   Constraints: 1 <= start.length <= 104 start.length == end.length Both start and end will only consist of characters in 'L', 'R', and 'X'.",
        "581": "You are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j). The rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim. Return the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).   Example 1: Input: grid = [[0,2],[1,3]] Output: 3 Explanation: At time 0, you are in grid location (0, 0). You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0. You cannot reach point (1, 1) until time 3. When the depth of water is 3, we can swim anywhere inside the grid. Example 2: Input: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]] Output: 16 Explanation: The final route is shown. We need to wait until time 16 so that (0, 0) and (4, 4) are connected.   Constraints: n == grid.length n == grid[i].length 1 <= n <= 50 0 <= grid[i][j] < n2 Each value grid[i][j] is unique.",
        "582": "We build a table of n rows (1-indexed). We start by writing 0 in the 1st row. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10. For example, for n = 3, the 1st row is 0, the 2nd row is 01, and the 3rd row is 0110. Given two integer n and k, return the kth (1-indexed) symbol in the nth row of a table of n rows.   Example 1: Input: n = 1, k = 1 Output: 0 Explanation: row 1: 0 Example 2: Input: n = 2, k = 1 Output: 0 Explanation:  row 1: 0 row 2: 01 Example 3: Input: n = 2, k = 2 Output: 1 Explanation:  row 1: 0 row 2: 01   Constraints: 1 <= n <= 30 1 <= k <= 2n - 1",
        "583": "Given four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise. The allowed operation on some point (x, y) is to convert it to either (x, x + y) or (x + y, y).   Example 1: Input: sx = 1, sy = 1, tx = 3, ty = 5 Output: true Explanation: One series of moves that transforms the starting point to the target is: (1, 1) -> (1, 2) (1, 2) -> (3, 2) (3, 2) -> (3, 5) Example 2: Input: sx = 1, sy = 1, tx = 2, ty = 2 Output: false Example 3: Input: sx = 1, sy = 1, tx = 1, ty = 1 Output: true   Constraints: 1 <= sx, sy, tx, ty <= 109",
        "584": "There is a forest with an unknown number of rabbits. We asked n rabbits \"How many rabbits have the same color as you?\" and collected the answers in an integer array answers where answers[i] is the answer of the ith rabbit. Given the array answers, return the minimum number of rabbits that could be in the forest.   Example 1: Input: answers = [1,1,2] Output: 5 Explanation: The two rabbits that answered \"1\" could both be the same color, say red. The rabbit that answered \"2\" can't be red or the answers would be inconsistent. Say the rabbit that answered \"2\" was blue. Then there should be 2 other blue rabbits in the forest that didn't answer into the array. The smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't. Example 2: Input: answers = [10,10,10] Output: 11   Constraints: 1 <= answers.length <= 1000 0 <= answers[i] < 1000",
        "585": "You are given an n x n binary grid board. In each move, you can swap any two rows with each other, or any two columns with each other. Return the minimum number of moves to transform the board into a chessboard board. If the task is impossible, return -1. A chessboard board is a board where no 0's and no 1's are 4-directionally adjacent.   Example 1: Input: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]] Output: 2 Explanation: One potential sequence of moves is shown. The first move swaps the first and second column. The second move swaps the second and third row. Example 2: Input: board = [[0,1],[1,0]] Output: 0 Explanation: Also note that the board with 0 in the top left corner, is also a valid chessboard. Example 3: Input: board = [[1,0],[1,0]] Output: -1 Explanation: No matter what sequence of moves you make, you cannot end with a valid chessboard.   Constraints: n == board.length n == board[i].length 2 <= n <= 30 board[i][j] is either 0 or 1.",
        "586": "Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.   Example 1: Input: root = [4,2,6,1,3] Output: 1 Example 2: Input: root = [1,0,48,null,null,12,49] Output: 1   Constraints: The number of nodes in the tree is in the range [2, 100]. 0 <= Node.val <= 105   Note: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/",
        "587": "Given a string s, you can transform every letter individually to be lowercase or uppercase to create another string. Return a list of all possible strings we could create. Return the output in any order.   Example 1: Input: s = \"a1b2\" Output: [\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"] Example 2: Input: s = \"3z4\" Output: [\"3z4\",\"3Z4\"]   Constraints: 1 <= s.length <= 12 s consists of lowercase English letters, uppercase English letters, and digits.",
        "588": "There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties: There are no self-edges (graph[u] does not contain u). There are no parallel edges (graph[u] does not contain duplicate values). If v is in graph[u], then u is in graph[v] (the graph is undirected). The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them. A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B. Return true if and only if it is bipartite.   Example 1: Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]] Output: false Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other. Example 2: Input: graph = [[1,3],[0,2],[1,3],[0,2]] Output: true Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.   Constraints: graph.length == n 1 <= n <= 100 0 <= graph[u].length < n 0 <= graph[u][i] <= n - 1 graph[u] does not contain u. All the values of graph[u] are unique. If graph[u] contains v, then graph[v] contains u.",
        "589": "You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k. For every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j]. Return the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].   Example 1: Input: arr = [1,2,3,5], k = 3 Output: [2,5] Explanation: The fractions to be considered in sorted order are: 1/5, 1/3, 2/5, 1/2, 3/5, and 2/3. The third fraction is 2/5. Example 2: Input: arr = [1,7], k = 1 Output: [1,7]   Constraints: 2 <= arr.length <= 1000 1 <= arr[i] <= 3 * 104 arr[0] == 1 arr[i] is a prime number for i > 0. All the numbers of arr are unique and sorted in strictly increasing order. 1 <= k <= arr.length * (arr.length - 1) / 2   Follow up: Can you solve the problem with better than O(n2) complexity?",
        "590": "There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei. You are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.   Example 1: Input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1 Output: 700 Explanation: The graph is shown above. The optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700. Note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops. Example 2: Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1 Output: 200 Explanation: The graph is shown above. The optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200. Example 3: Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0 Output: 500 Explanation: The graph is shown above. The optimal path with no stops from city 0 to 2 is marked in red and has cost 500.   Constraints: 1 <= n <= 100 0 <= flights.length <= (n * (n - 1) / 2) flights[i].length == 3 0 <= fromi, toi < n fromi != toi 1 <= pricei <= 104 There will not be any multiple flights between two cities. 0 <= src, dst, k < n src != dst",
        "591": "An integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. Each digit must be rotated - we cannot choose to leave it alone. A number is valid if each digit remains a digit after rotation. For example: 0, 1, and 8 rotate to themselves, 2 and 5 rotate to each other (in this case they are rotated in a different direction, in other words, 2 or 5 gets mirrored), 6 and 9 rotate to each other, and the rest of the numbers do not rotate to any other number and become invalid. Given an integer n, return the number of good integers in the range [1, n].   Example 1: Input: n = 10 Output: 4 Explanation: There are four good numbers in the range [1, 10] : 2, 5, 6, 9. Note that 1 and 10 are not good numbers, since they remain unchanged after rotating. Example 2: Input: n = 1 Output: 0 Example 3: Input: n = 2 Output: 1   Constraints: 1 <= n <= 104",
        "592": "You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget] that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost. All inputs are integral coordinates. Each turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west, or stay still. All actions happen simultaneously. You escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape. Return true if it is possible to escape regardless of how the ghosts move, otherwise return false.   Example 1: Input: ghosts = [[1,0],[0,3]], target = [0,1] Output: true Explanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you. Example 2: Input: ghosts = [[1,0]], target = [2,0] Output: false Explanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination. Example 3: Input: ghosts = [[2,0]], target = [1,0] Output: false Explanation: The ghost can reach the target at the same time as you.   Constraints: 1 <= ghosts.length <= 100 ghosts[i].length == 2 -104 <= xi, yi <= 104 There can be multiple ghosts in the same location. target.length == 2 -104 <= xtarget, ytarget <= 104",
        "593": "You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes. Given an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7. In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.   Example 1: Input: n = 3 Output: 5 Explanation: The five different ways are show above. Example 2: Input: n = 1 Output: 1   Constraints: 1 <= n <= 1000",
        "594": "You are given two strings order and s. All the characters of order are unique and were sorted in some custom order previously. Permute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string. Return any permutation of s that satisfies this property.   Example 1: Input: order = \"cba\", s = \"abcd\" Output: \"cbad\" Explanation: \"a\", \"b\", \"c\" appear in order, so the order of \"a\", \"b\", \"c\" should be \"c\", \"b\", and \"a\". Since \"d\" does not appear in order, it can be at any position in the returned string. \"dcba\", \"cdba\", \"cbda\" are also valid outputs. Example 2: Input: order = \"bcafg\", s = \"abcd\" Output: \"bcad\" Explanation: The characters \"b\", \"c\", and \"a\" from order dictate the order for the characters in s. The character \"d\" in s does not appear in order, so its position is flexible. Following the order of appearance in order, \"b\", \"c\", and \"a\" from s should be arranged as \"b\", \"c\", \"a\". \"d\" can be placed at any position since it's not in order. The output \"bcad\" correctly follows this rule. Other arrangements like \"dbca\" or \"bcda\" would also be valid, as long as \"b\", \"c\", \"a\" maintain their order.   Constraints: 1 <= order.length <= 26 1 <= s.length <= 200 order and s consist of lowercase English letters. All the characters of order are unique.",
        "595": "Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. For example, \"ace\" is a subsequence of \"abcde\".   Example 1: Input: s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"] Output: 3 Explanation: There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\". Example 2: Input: s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"] Output: 2   Constraints: 1 <= s.length <= 5 * 104 1 <= words.length <= 5000 1 <= words[i].length <= 50 s and words[i] consist of only lowercase English letters.",
        "596": "Let f(x) be the number of zeroes at the end of x!. Recall that x! = 1 * 2 * 3 * ... * x and by convention, 0! = 1. For example, f(3) = 0 because 3! = 6 has no zeroes at the end, while f(11) = 2 because 11! = 39916800 has two zeroes at the end. Given an integer k, return the number of non-negative integers x have the property that f(x) = k.   Example 1: Input: k = 0 Output: 5 Explanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes. Example 2: Input: k = 5 Output: 0 Explanation: There is no x such that x! ends in k = 5 zeroes. Example 3: Input: k = 3 Output: 5   Constraints: 0 <= k <= 109",
        "597": "Given a Tic-Tac-Toe board as a string array board, return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game. The board is a 3 x 3 array that consists of characters ' ', 'X', and 'O'. The ' ' character represents an empty square. Here are the rules of Tic-Tac-Toe: Players take turns placing characters into empty squares ' '. The first player always places 'X' characters, while the second player always places 'O' characters. 'X' and 'O' characters are always placed into empty squares, never filled ones. The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal. The game also ends if all squares are non-empty. No more moves can be played if the game is over.   Example 1: Input: board = [\"O  \",\"   \",\"   \"] Output: false Explanation: The first player always plays \"X\". Example 2: Input: board = [\"XOX\",\" X \",\"   \"] Output: false Explanation: Players take turns making moves. Example 3: Input: board = [\"XOX\",\"O O\",\"XOX\"] Output: true   Constraints: board.length == 3 board[i].length == 3 board[i][j] is either 'X', 'O', or ' '.",
        "598": "Given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right]. The test cases are generated so that the answer will fit in a 32-bit integer.   Example 1: Input: nums = [2,1,4,3], left = 2, right = 3 Output: 3 Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3]. Example 2: Input: nums = [2,9,2,5,6], left = 2, right = 8 Output: 7   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109 0 <= left <= right <= 109",
        "599": "Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s. A shift on s consists of moving the leftmost character of s to the rightmost position. For example, if s = \"abcde\", then it will be \"bcdea\" after one shift.   Example 1: Input: s = \"abcde\", goal = \"cdeab\" Output: true Example 2: Input: s = \"abcde\", goal = \"abced\" Output: false   Constraints: 1 <= s.length, goal.length <= 100 s and goal consist of lowercase English letters.",
        "600": "Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order. The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).   Example 1: Input: graph = [[1,2],[3],[3],[]] Output: [[0,1,3],[0,2,3]] Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3. Example 2: Input: graph = [[4,3,1],[3,2,4],[3],[4],[]] Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]   Constraints: n == graph.length 2 <= n <= 15 0 <= graph[i][j] < n graph[i][j] != i (i.e., there will be no self-loops). All the elements of graph[i] are unique. The input graph is guaranteed to be a DAG.",
        "601": "You are given an array nums. You can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]. Afterward, any entries that are less than or equal to their index are worth one point. For example, if we have nums = [2,4,1,3,0], and we rotate by k = 2, it becomes [1,3,0,2,4]. This is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point]. Return the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it. If there are multiple answers, return the smallest such index k.   Example 1: Input: nums = [2,3,1,4,0] Output: 3 Explanation: Scores for each k are listed below:  k = 0,  nums = [2,3,1,4,0],    score 2 k = 1,  nums = [3,1,4,0,2],    score 3 k = 2,  nums = [1,4,0,2,3],    score 3 k = 3,  nums = [4,0,2,3,1],    score 4 k = 4,  nums = [0,2,3,1,4],    score 3 So we should choose k = 3, which has the highest score. Example 2: Input: nums = [1,3,0,2,4] Output: 0 Explanation: nums will always have 3 points no matter how it shifts. So we will choose the smallest k, which is 0.   Constraints: 1 <= nums.length <= 105 0 <= nums[i] < nums.length",
        "602": "We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.  Each glass holds one cup of champagne. Then, some champagne is poured into the first glass at the top.  When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.  When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.  (A glass at the bottom row has its excess champagne fall on the floor.) For example, after one cup of champagne is poured, the top most glass is full.  After two cups of champagne are poured, the two glasses on the second row are half full.  After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.  After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below. Now after pouring some non-negative integer cups of champagne, return how full the jth glass in the ith row is (both i and j are 0-indexed.)   Example 1: Input: poured = 1, query_row = 1, query_glass = 1 Output: 0.00000 Explanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty. Example 2: Input: poured = 2, query_row = 1, query_glass = 1 Output: 0.50000 Explanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange. Example 3: Input: poured = 100000009, query_row = 33, query_glass = 17 Output: 1.00000   Constraints: 0 <= poured <= 109 0 <= query_glass <= query_row < 100",
        "603": "You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i]. For example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8]. Return the minimum number of needed operations to make nums1 and nums2 strictly increasing. The test cases are generated so that the given input always makes it possible. An array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].   Example 1: Input: nums1 = [1,3,5,4], nums2 = [1,2,3,7] Output: 1 Explanation:  Swap nums1[3] and nums2[3]. Then the sequences are: nums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4] which are both strictly increasing. Example 2: Input: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9] Output: 1   Constraints: 2 <= nums1.length <= 105 nums2.length == nums1.length 0 <= nums1[i], nums2[i] <= 2 * 105",
        "604": "There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i]. A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node). Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.   Example 1: Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]] Output: [2,4,5,6] Explanation: The given graph is shown above. Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them. Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6. Example 2: Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]] Output: [4] Explanation: Only node 4 is a terminal node, and every path starting at node 4 leads to node 4.   Constraints: n == graph.length 1 <= n <= 104 0 <= graph[i].length <= n 0 <= graph[i][j] <= n - 1 graph[i] is sorted in a strictly increasing order. The graph may contain self-loops. The number of edges in the graph will be in the range [1, 4 * 104].",
        "605": "You are given an m x n binary grid, where each 1 represents a brick and 0 represents an empty space. A brick is stable if: It is directly connected to the top of the grid, or At least one other brick in its four adjacent cells is stable. You are also given an array hits, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location hits[i] = (rowi, coli). The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will fall. Once a brick falls, it is immediately erased from the grid (i.e., it does not land on other stable bricks). Return an array result, where each result[i] is the number of bricks that will fall after the ith erasure is applied. Note that an erasure may refer to a location with no brick, and if it does, no bricks drop.   Example 1: Input: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]] Output: [2] Explanation: Starting with the grid: [[1,0,0,0],  [1,1,1,0]] We erase the underlined brick at (1,0), resulting in the grid: [[1,0,0,0],  [0,1,1,0]] The two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is: [[1,0,0,0],  [0,0,0,0]] Hence the result is [2]. Example 2: Input: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]] Output: [0,0] Explanation: Starting with the grid: [[1,0,0,0],  [1,1,0,0]] We erase the underlined brick at (1,1), resulting in the grid: [[1,0,0,0],  [1,0,0,0]] All remaining bricks are still stable, so no bricks fall. The grid remains the same: [[1,0,0,0],  [1,0,0,0]] Next, we erase the underlined brick at (1,0), resulting in the grid: [[1,0,0,0],  [0,0,0,0]] Once again, all remaining bricks are still stable, so no bricks fall. Hence the result is [0,0].   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 200 grid[i][j] is 0 or 1. 1 <= hits.length <= 4 * 104 hits[i].length == 2 0 <= xi <= m - 1 0 <= yi <= n - 1 All (xi, yi) are unique.",
        "606": "International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: 'a' maps to \".-\", 'b' maps to \"-...\", 'c' maps to \"-.-.\", and so on. For convenience, the full table for the 26 letters of the English alphabet is given below: [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"] Given an array of strings words where each word can be written as a concatenation of the Morse code of each letter. For example, \"cab\" can be written as \"-.-..--...\", which is the concatenation of \"-.-.\", \".-\", and \"-...\". We will call such a concatenation the transformation of a word. Return the number of different transformations among all words we have.   Example 1: Input: words = [\"gin\",\"zen\",\"gig\",\"msg\"] Output: 2 Explanation: The transformation of each word is: \"gin\" -> \"--...-.\" \"zen\" -> \"--...-.\" \"gig\" -> \"--...--.\" \"msg\" -> \"--...--.\" There are 2 different transformations: \"--...-.\" and \"--...--.\". Example 2: Input: words = [\"a\"] Output: 1   Constraints: 1 <= words.length <= 100 1 <= words[i].length <= 12 words[i] consists of lowercase English letters.",
        "607": "You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on. You are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. Continue this process until you have written all of s. Return an array result of length 2 where: result[0] is the total number of lines. result[1] is the width of the last line in pixels.   Example 1: Input: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\" Output: [3,60] Explanation: You can write s as follows: abcdefghij  // 100 pixels wide klmnopqrst  // 100 pixels wide uvwxyz      // 60 pixels wide There are a total of 3 lines, and the last line is 60 pixels wide. Example 2: Input: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\" Output: [2,4] Explanation: You can write s as follows: bbbcccdddaa  // 98 pixels wide a            // 4 pixels wide There are a total of 2 lines, and the last line is 4 pixels wide.   Constraints: widths.length == 26 2 <= widths[i] <= 10 1 <= s.length <= 1000 s contains only lowercase English letters.",
        "608": "There is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. You are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c. A city's skyline is the outer contour formed by all the building when viewing the side of the city from a distance. The skyline from each cardinal direction north, east, south, and west may be different. We are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). The height of a 0-height building can also be increased. However, increasing the height of a building should not affect the city's skyline from any cardinal direction. Return the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.   Example 1: Input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]] Output: 35 Explanation: The building heights are shown in the center of the above image. The skylines when viewed from each cardinal direction are drawn in red. The grid after increasing the height of buildings without affecting skylines is: gridNew = [ [8, 4, 8, 7],             [7, 4, 7, 7],             [9, 4, 8, 7],             [3, 3, 3, 3] ] Example 2: Input: grid = [[0,0,0],[0,0,0],[0,0,0]] Output: 0 Explanation: Increasing the height of any building will result in the skyline changing.   Constraints: n == grid.length n == grid[r].length 2 <= n <= 50 0 <= grid[r][c] <= 100",
        "609": "There are two types of soup: type A and type B. Initially, we have n ml of each type of soup. There are four kinds of operations: Serve 100 ml of soup A and 0 ml of soup B, Serve 75 ml of soup A and 25 ml of soup B, Serve 50 ml of soup A and 50 ml of soup B, and Serve 25 ml of soup A and 75 ml of soup B. When we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup. Note that we do not have an operation where all 100 ml's of soup B are used first. Return the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time. Answers within 10-5 of the actual answer will be accepted.   Example 1: Input: n = 50 Output: 0.62500 Explanation: If we choose the first two operations, A will become empty first. For the third operation, A and B will become empty at the same time. For the fourth operation, B will become empty first. So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625. Example 2: Input: n = 100 Output: 0.71875   Constraints: 0 <= n <= 109",
        "610": "Sometimes people repeat letters to represent extra feeling. For example: \"hello\" -> \"heeellooo\" \"hi\" -> \"hiiii\" In these strings like \"heeellooo\", we have groups of adjacent letters that are all the same: \"h\", \"eee\", \"ll\", \"ooo\". You are given a string s and an array of query strings words. A query word is stretchy if it can be made to be equal to s by any number of applications of the following extension operation: choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is three or more. For example, starting with \"hello\", we could do an extension on the group \"o\" to get \"hellooo\", but we cannot get \"helloo\" since the group \"oo\" has a size less than three. Also, we could do another extension like \"ll\" -> \"lllll\" to get \"helllllooo\". If s = \"helllllooo\", then the query word \"hello\" would be stretchy because of these two extension operations: query = \"hello\" -> \"hellooo\" -> \"helllllooo\" = s. Return the number of query strings that are stretchy.   Example 1: Input: s = \"heeellooo\", words = [\"hello\", \"hi\", \"helo\"] Output: 1 Explanation:  We can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\". We can't extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not size 3 or more. Example 2: Input: s = \"zzzzzyyyyy\", words = [\"zzyy\",\"zy\",\"zyy\"] Output: 3   Constraints: 1 <= s.length, words.length <= 100 1 <= words[i].length <= 100 s and words[i] consist of lowercase letters.",
        "611": "You are given an array of integers nums represents the numbers written on a chalkboard. Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0. Also, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins. Return true if and only if Alice wins the game, assuming both players play optimally.   Example 1: Input: nums = [1,1,2] Output: false Explanation:  Alice has two choices: erase 1 or erase 2.  If she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose.  If Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose. Example 2: Input: nums = [0,1] Output: true Example 3: Input: nums = [1,2,3] Output: true   Constraints: 1 <= nums.length <= 1000 0 <= nums[i] < 216",
        "612": "A website domain \"discuss.leetcode.com\" consists of various subdomains. At the top level, we have \"com\", at the next level, we have \"leetcode.com\" and at the lowest level, \"discuss.leetcode.com\". When we visit a domain like \"discuss.leetcode.com\", we will also visit the parent domains \"leetcode.com\" and \"com\" implicitly. A count-paired domain is a domain that has one of the two formats \"rep d1.d2.d3\" or \"rep d1.d2\" where rep is the number of visits to the domain and d1.d2.d3 is the domain itself. For example, \"9001 discuss.leetcode.com\" is a count-paired domain that indicates that discuss.leetcode.com was visited 9001 times. Given an array of count-paired domains cpdomains, return an array of the count-paired domains of each subdomain in the input. You may return the answer in any order.   Example 1: Input: cpdomains = [\"9001 discuss.leetcode.com\"] Output: [\"9001 leetcode.com\",\"9001 discuss.leetcode.com\",\"9001 com\"] Explanation: We only have one website domain: \"discuss.leetcode.com\". As discussed above, the subdomain \"leetcode.com\" and \"com\" will also be visited. So they will all be visited 9001 times. Example 2: Input: cpdomains = [\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"] Output: [\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"] Explanation: We will visit \"google.mail.com\" 900 times, \"yahoo.com\" 50 times, \"intel.mail.com\" once and \"wiki.org\" 5 times. For the subdomains, we will visit \"mail.com\" 900 + 1 = 901 times, \"com\" 900 + 50 + 1 = 951 times, and \"org\" 5 times.   Constraints: 1 <= cpdomain.length <= 100 1 <= cpdomain[i].length <= 100 cpdomain[i] follows either the \"repi d1i.d2i.d3i\" format or the \"repi d1i.d2i\" format. repi is an integer in the range [1, 104]. d1i, d2i, and d3i consist of lowercase English letters.",
        "613": "Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10-5 of the actual answer will be accepted.   Example 1: Input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]] Output: 2.00000 Explanation: The five points are shown in the above figure. The red triangle is the largest. Example 2: Input: points = [[1,0],[0,0],[0,1]] Output: 0.50000   Constraints: 3 <= points.length <= 50 -50 <= xi, yi <= 50 All the given points are unique.",
        "614": "You are given an integer array nums and an integer k. You can partition the array into at most k non-empty adjacent subarrays. The score of a partition is the sum of the averages of each subarray. Note that the partition must use every integer in nums, and that the score is not necessarily an integer. Return the maximum score you can achieve of all the possible partitions. Answers within 10-6 of the actual answer will be accepted.   Example 1: Input: nums = [9,1,2,3,9], k = 3 Output: 20.00000 Explanation:  The best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20. We could have also partitioned nums into [9, 1], [2], [3, 9], for example. That partition would lead to a score of 5 + 2 + 6 = 13, which is worse. Example 2: Input: nums = [1,2,3,4,5,6,7], k = 4 Output: 20.50000   Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 104 1 <= k <= nums.length",
        "615": "Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed. A subtree of a node node is node plus every node that is a descendant of node.   Example 1: Input: root = [1,null,0,0,1] Output: [1,null,0,null,1] Explanation:  Only the red nodes satisfy the property \"every subtree not containing a 1\". The diagram on the right represents the answer. Example 2: Input: root = [1,0,1,0,0,0,1] Output: [1,null,1,null,1] Example 3: Input: root = [1,1,0,1,1,0,1,0] Output: [1,1,0,1,1,null,1]   Constraints: The number of nodes in the tree is in the range [1, 200]. Node.val is either 0 or 1.",
        "616": "You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever. For example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever. You will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only. Return the least number of buses you must take to travel from source to target. Return -1 if it is not possible.   Example 1: Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6 Output: 2 Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6. Example 2: Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12 Output: -1     Constraints: 1 <= routes.length <= 500. 1 <= routes[i].length <= 105 All the values of routes[i] are unique. sum(routes[i].length) <= 105 0 <= routes[i][j] < 106 0 <= source, target < 106",
        "617": "We had some 2-dimensional coordinates, like \"(1, 3)\" or \"(2, 0.5)\". Then, we removed all commas, decimal points, and spaces and ended up with the string s. For example, \"(1, 3)\" becomes s = \"(13)\" and \"(2, 0.5)\" becomes s = \"(205)\". Return a list of strings representing all possibilities for what our original coordinates could have been. Our original representation never had extraneous zeroes, so we never started with numbers like \"00\", \"0.0\", \"0.00\", \"1.0\", \"001\", \"00.01\", or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like \".1\". The final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)   Example 1: Input: s = \"(123)\" Output: [\"(1, 2.3)\",\"(1, 23)\",\"(1.2, 3)\",\"(12, 3)\"] Example 2: Input: s = \"(0123)\" Output: [\"(0, 1.23)\",\"(0, 12.3)\",\"(0, 123)\",\"(0.1, 2.3)\",\"(0.1, 23)\",\"(0.12, 3)\"] Explanation: 0.0, 00, 0001 or 00.01 are not allowed. Example 3: Input: s = \"(00011)\" Output: [\"(0, 0.011)\",\"(0.001, 1)\"]   Constraints: 4 <= s.length <= 12 s[0] == '(' and s[s.length - 1] == ')'. The rest of s are digits.",
        "618": "You are given the head of a linked list containing unique integer values and an integer array nums that is a subset of the linked list values. Return the number of connected components in nums where two values are connected if they appear consecutively in the linked list.   Example 1: Input: head = [0,1,2,3], nums = [0,1,3] Output: 2 Explanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected components. Example 2: Input: head = [0,1,2,3,4], nums = [0,3,1,4] Output: 2 Explanation: 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.   Constraints: The number of nodes in the linked list is n. 1 <= n <= 104 0 <= Node.val < n All the values Node.val are unique. 1 <= nums.length <= n 0 <= nums[i] < n All the values of nums are unique.",
        "619": "Your car starts at position 0 and speed +1 on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions 'A' (accelerate) and 'R' (reverse): When you get an instruction 'A', your car does the following: position += speed speed *= 2 When you get an instruction 'R', your car does the following: If your speed is positive then speed = -1 otherwise speed = 1 Your position stays the same. For example, after commands \"AAR\", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1. Given a target position target, return the length of the shortest sequence of instructions to get there.   Example 1: Input: target = 3 Output: 2 Explanation:  The shortest instruction sequence is \"AA\". Your position goes from 0 --> 1 --> 3. Example 2: Input: target = 6 Output: 5 Explanation:  The shortest instruction sequence is \"AAARA\". Your position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6.   Constraints: 1 <= target <= 104",
        "620": "Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique. The words in paragraph are case-insensitive and the answer should be returned in lowercase.   Example 1: Input: paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"] Output: \"ball\" Explanation:  \"hit\" occurs 3 times, but it is a banned word. \"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph.  Note that words in the paragraph are not case sensitive, that punctuation is ignored (even if adjacent to words, such as \"ball,\"),  and that \"hit\" isn't the answer even though it occurs more because it is banned. Example 2: Input: paragraph = \"a.\", banned = [] Output: \"a\"   Constraints: 1 <= paragraph.length <= 1000 paragraph consists of English letters, space ' ', or one of the symbols: \"!?',;.\". 0 <= banned.length <= 100 1 <= banned[i].length <= 10 banned[i] consists of only lowercase English letters.",
        "621": "A valid encoding of an array of words is any reference string s and array of indices indices such that: words.length == indices.length The reference string s ends with the '#' character. For each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i]. Given an array of words, return the length of the shortest reference string s possible of any valid encoding of words.   Example 1: Input: words = [\"time\", \"me\", \"bell\"] Output: 10 Explanation: A valid encoding would be s = \"time#bell#\" and indices = [0, 2, 5]. words[0] = \"time\", the substring of s starting from indices[0] = 0 to the next '#' is underlined in \"time#bell#\" words[1] = \"me\", the substring of s starting from indices[1] = 2 to the next '#' is underlined in \"time#bell#\" words[2] = \"bell\", the substring of s starting from indices[2] = 5 to the next '#' is underlined in \"time#bell#\" Example 2: Input: words = [\"t\"] Output: 2 Explanation: A valid encoding would be s = \"t#\" and indices = [0].   Constraints: 1 <= words.length <= 2000 1 <= words[i].length <= 7 words[i] consists of only lowercase letters.",
        "622": "Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s. The distance between two indices i and j is abs(i - j), where abs is the absolute value function.   Example 1: Input: s = \"loveleetcode\", c = \"e\" Output: [3,2,1,0,1,0,0,1,2,2,1,0] Explanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed). The closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3. The closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2. For index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1. The closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2. Example 2: Input: s = \"aaab\", c = \"b\" Output: [3,2,1,0]   Constraints: 1 <= s.length <= 104 s[i] and c are lowercase English letters. It is guaranteed that c occurs at least once in s.",
        "623": "You are given two 0-indexed integer arrays fronts and backs of length n, where the ith card has the positive integer fronts[i] printed on the front and backs[i] printed on the back. Initially, each card is placed on a table such that the front number is facing up and the other is facing down. You may flip over any number of cards (possibly zero). After flipping the cards, an integer is considered good if it is facing down on some card and not facing up on any card. Return the minimum possible good integer after flipping the cards. If there are no good integers, return 0.   Example 1: Input: fronts = [1,2,4,4,7], backs = [1,3,4,1,3] Output: 2 Explanation: If we flip the second card, the face up numbers are [1,3,4,4,7] and the face down are [1,2,4,1,3]. 2 is the minimum good integer as it appears facing down but not facing up. It can be shown that 2 is the minimum possible good integer obtainable after flipping some cards. Example 2: Input: fronts = [1], backs = [1] Output: 0 Explanation: There are no good integers no matter how we flip the cards, so we return 0.   Constraints: n == fronts.length == backs.length 1 <= n <= 1000 1 <= fronts[i], backs[i] <= 2000",
        "624": "Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1. We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children. Return the number of binary trees we can make. The answer may be too large so return the answer modulo 109 + 7.   Example 1: Input: arr = [2,4] Output: 3 Explanation: We can make these trees: [2], [4], [4, 2, 2] Example 2: Input: arr = [2,4,5,10] Output: 7 Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].   Constraints: 1 <= arr.length <= 1000 2 <= arr[i] <= 109 All the values of arr are unique.",
        "625": "You are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only. We would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows: If a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append \"ma\" to the end of the word. For example, the word \"apple\" becomes \"applema\". If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add \"ma\". For example, the word \"goat\" becomes \"oatgma\". Add one letter 'a' to the end of each word per its word index in the sentence, starting with 1. For example, the first word gets \"a\" added to the end, the second word gets \"aa\" added to the end, and so on. Return the final sentence representing the conversion from sentence to Goat Latin.   Example 1: Input: sentence = \"I speak Goat Latin\" Output: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\" Example 2: Input: sentence = \"The quick brown fox jumped over the lazy dog\" Output: \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"   Constraints: 1 <= sentence.length <= 150 sentence consists of English letters and spaces. sentence has no leading or trailing spaces. All the words in sentence are separated by a single space.",
        "626": "There are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the ith person. A Person x will not send a friend request to a person y (x != y) if any of the following conditions is true: age[y] <= 0.5 * age[x] + 7 age[y] > age[x] age[y] > 100 && age[x] < 100 Otherwise, x will send a friend request to y. Note that if x sends a request to y, y will not necessarily send a request to x. Also, a person will not send a friend request to themself. Return the total number of friend requests made.   Example 1: Input: ages = [16,16] Output: 2 Explanation: 2 people friend request each other. Example 2: Input: ages = [16,17,18] Output: 2 Explanation: Friend requests are made 17 -> 16, 18 -> 17. Example 3: Input: ages = [20,30,100,110,120] Output: 3 Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.   Constraints: n == ages.length 1 <= n <= 2 * 104 1 <= ages[i] <= 120",
        "627": "You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1. Return the size of the largest island in grid after applying this operation. An island is a 4-directionally connected group of 1s.   Example 1: Input: grid = [[1,0],[0,1]] Output: 3 Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3. Example 2: Input: grid = [[1,1],[1,0]] Output: 4 Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4. Example 3: Input: grid = [[1,1],[1,1]] Output: 4 Explanation: Can't change any 0 to 1, only one island with area = 4.   Constraints: n == grid.length n == grid[i].length 1 <= n <= 500 grid[i][j] is either 0 or 1.",
        "628": "Let's define a function countUniqueChars(s) that returns the number of unique characters in s. For example, calling countUniqueChars(s) if s = \"LEETCODE\" then \"L\", \"T\", \"C\", \"O\", \"D\" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5. Given a string s, return the sum of countUniqueChars(t) where t is a substring of s. The test cases are generated such that the answer fits in a 32-bit integer. Notice that some substrings can be repeated so in this case you have to count the repeated ones too.   Example 1: Input: s = \"ABC\" Output: 10 Explanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\". Every substring is composed with only unique letters. Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10 Example 2: Input: s = \"ABA\" Output: 8 Explanation: The same as example 1, except countUniqueChars(\"ABA\") = 1. Example 3: Input: s = \"LEETCODE\" Output: 92   Constraints: 1 <= s.length <= 105 s consists of uppercase English letters only.",
        "629": "Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.   Example 1: Input: n = 5 Output: 2 Explanation: 5 = 2 + 3 Example 2: Input: n = 9 Output: 3 Explanation: 9 = 4 + 5 = 2 + 3 + 4 Example 3: Input: n = 15 Output: 4 Explanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5   Constraints: 1 <= n <= 109",
        "630": "In a string s of lowercase letters, these letters form consecutive groups of the same character. For example, a string like s = \"abbxxxxzyy\" has the groups \"a\", \"bb\", \"xxxx\", \"z\", and \"yy\". A group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group. In the above example, \"xxxx\" has the interval [3,6]. A group is considered large if it has 3 or more characters. Return the intervals of every large group sorted in increasing order by start index.   Example 1: Input: s = \"abbxxxxzzy\" Output: [[3,6]] Explanation: \"xxxx\" is the only large group with start index 3 and end index 6. Example 2: Input: s = \"abc\" Output: [] Explanation: We have groups \"a\", \"b\", and \"c\", none of which are large groups. Example 3: Input: s = \"abcdddeeeeaabbbcd\" Output: [[3,5],[6,9],[12,14]] Explanation: The large groups are \"ddd\", \"eeee\", and \"bbb\".   Constraints: 1 <= s.length <= 1000 s contains lowercase English letters only.",
        "631": "You are given a personal information string s, representing either an email address or a phone number. Return the masked personal information using the below rules. Email address: An email address is: A name consisting of uppercase and lowercase English letters, followed by The '@' symbol, followed by The domain consisting of uppercase and lowercase English letters with a dot '.' somewhere in the middle (not the first or last character). To mask an email: The uppercase letters in the name and domain must be converted to lowercase letters. The middle letters of the name (i.e., all but the first and last letters) must be replaced by 5 asterisks \"*****\". Phone number: A phone number is formatted as follows: The phone number contains 10-13 digits. The last 10 digits make up the local number. The remaining 0-3 digits, in the beginning, make up the country code. Separation characters from the set {'+', '-', '(', ')', ' '} separate the above digits in some way. To mask a phone number: Remove all separation characters. The masked phone number should have the form: \"***-***-XXXX\" if the country code has 0 digits. \"+*-***-***-XXXX\" if the country code has 1 digit. \"+**-***-***-XXXX\" if the country code has 2 digits. \"+***-***-***-XXXX\" if the country code has 3 digits. \"XXXX\" is the last 4 digits of the local number.   Example 1: Input: s = \"LeetCode@LeetCode.com\" Output: \"l*****e@leetcode.com\" Explanation: s is an email address. The name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks. Example 2: Input: s = \"AB@qq.com\" Output: \"a*****b@qq.com\" Explanation: s is an email address. The name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks. Note that even though \"ab\" is 2 characters, it still must have 5 asterisks in the middle. Example 3: Input: s = \"1(234)567-890\" Output: \"***-***-7890\" Explanation: s is a phone number. There are 10 digits, so the local number is 10 digits and the country code is 0 digits. Thus, the resulting masked number is \"***-***-7890\".   Constraints: s is either a valid email or a phone number. If s is an email: 8 <= s.length <= 40 s consists of uppercase and lowercase English letters and exactly one '@' symbol and '.' symbol. If s is a phone number: 10 <= s.length <= 20 s consists of digits, spaces, and the symbols '(', ')', '-', and '+'.",
        "632": "Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image. To flip an image horizontally means that each row of the image is reversed. For example, flipping [1,1,0] horizontally results in [0,1,1]. To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. For example, inverting [0,1,1] results in [1,0,0].   Example 1: Input: image = [[1,1,0],[1,0,1],[0,0,0]] Output: [[1,0,0],[0,1,0],[1,1,1]] Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]]. Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]] Example 2: Input: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]] Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]. Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]   Constraints: n == image.length n == image[i].length 1 <= n <= 20 images[i][j] is either 0 or 1.",
        "633": "You are given a 0-indexed string s that you must perform k replacement operations on. The replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k. To complete the ith replacement operation: Check if the substring sources[i] occurs at index indices[i] in the original string s. If it does not occur, do nothing. Otherwise if it does occur, replace that substring with targets[i]. For example, if s = \"abcd\", indices[i] = 0, sources[i] = \"ab\", and targets[i] = \"eee\", then the result of this replacement will be \"eeecd\". All replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will not overlap. For example, a testcase with s = \"abc\", indices = [0, 1], and sources = [\"ab\",\"bc\"] will not be generated because the \"ab\" and \"bc\" replacements overlap. Return the resulting string after performing all replacement operations on s. A substring is a contiguous sequence of characters in a string.   Example 1: Input: s = \"abcd\", indices = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"] Output: \"eeebffff\" Explanation: \"a\" occurs at index 0 in s, so we replace it with \"eee\". \"cd\" occurs at index 2 in s, so we replace it with \"ffff\". Example 2: Input: s = \"abcd\", indices = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"] Output: \"eeecd\" Explanation: \"ab\" occurs at index 0 in s, so we replace it with \"eee\". \"ec\" does not occur at index 2 in s, so we do nothing.   Constraints: 1 <= s.length <= 1000 k == indices.length == sources.length == targets.length 1 <= k <= 100 0 <= indexes[i] < s.length 1 <= sources[i].length, targets[i].length <= 50 s consists of only lowercase English letters. sources[i] and targets[i] consist of only lowercase English letters.",
        "634": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges. You are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. Return an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.   Example 1: Input: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]] Output: [8,12,6,10,10,10] Explanation: The tree is shown above. We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5) equals 1 + 1 + 2 + 2 + 2 = 8. Hence, answer[0] = 8, and so on. Example 2: Input: n = 1, edges = [] Output: [0] Example 3: Input: n = 2, edges = [[1,0]] Output: [1,1]   Constraints: 1 <= n <= 3 * 104 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n ai != bi The given input represents a valid tree.",
        "635": "You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values. We translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a 1 in both images. Note also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix borders are erased. Return the largest possible overlap.   Example 1: Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]] Output: 3 Explanation: We translate img1 to right by 1 unit and down by 1 unit. The number of positions that have a 1 in both images is 3 (shown in red). Example 2: Input: img1 = [[1]], img2 = [[1]] Output: 1 Example 3: Input: img1 = [[0]], img2 = [[0]] Output: 0   Constraints: n == img1.length == img1[i].length n == img2.length == img2[i].length 1 <= n <= 30 img1[i][j] is either 0 or 1. img2[i][j] is either 0 or 1.",
        "636": "An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis. Two rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap. Given two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.   Example 1: Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3] Output: true Example 2: Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1] Output: false Example 3: Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3] Output: false   Constraints: rec1.length == 4 rec2.length == 4 -109 <= rec1[i], rec2[i] <= 109 rec1 and rec2 represent a valid rectangle with a non-zero area.",
        "637": "Alice plays the following game, loosely based on the card game \"21\". Alice starts with 0 points and draws numbers while she has less than k points. During each draw, she gains an integer number of points randomly from the range [1, maxPts], where maxPts is an integer. Each draw is independent and the outcomes have equal probabilities. Alice stops drawing numbers when she gets k or more points. Return the probability that Alice has n or fewer points. Answers within 10-5 of the actual answer are considered accepted.   Example 1: Input: n = 10, k = 1, maxPts = 10 Output: 1.00000 Explanation: Alice gets a single card, then stops. Example 2: Input: n = 6, k = 1, maxPts = 10 Output: 0.60000 Explanation: Alice gets a single card, then stops. In 6 out of 10 possibilities, she is at or below 6 points. Example 3: Input: n = 21, k = 17, maxPts = 10 Output: 0.73278   Constraints: 0 <= k <= n <= 104 1 <= maxPts <= 104",
        "638": "There are n dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right. After each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right. When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces. For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino. You are given a string dominoes representing the initial state where: dominoes[i] = 'L', if the ith domino has been pushed to the left, dominoes[i] = 'R', if the ith domino has been pushed to the right, and dominoes[i] = '.', if the ith domino has not been pushed. Return a string representing the final state.   Example 1: Input: dominoes = \"RR.L\" Output: \"RR.L\" Explanation: The first domino expends no additional force on the second domino. Example 2: Input: dominoes = \".L.R...LR..L..\" Output: \"LL.RR.LLRRLL..\"   Constraints: n == dominoes.length 1 <= n <= 105 dominoes[i] is either 'L', 'R', or '.'.",
        "639": "A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum. Given a row x col grid of integers, how many 3 x 3 magic square subgrids are there? Note: while a magic square can only contain numbers from 1 to 9, grid may contain numbers up to 15.   Example 1: Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]] Output: 1 Explanation:  The following subgrid is a 3 x 3 magic square: while this one is not: In total, there is only one magic square inside the given grid. Example 2: Input: grid = [[8]] Output: 0   Constraints: row == grid.length col == grid[i].length 1 <= row, col <= 10 0 <= grid[i][j] <= 15",
        "640": "You are given a string of digits num, such as \"123456579\". We can split it into a Fibonacci-like sequence [123, 456, 579]. Formally, a Fibonacci-like sequence is a list f of non-negative integers such that: 0 <= f[i] < 231, (that is, each integer fits in a 32-bit signed integer type), f.length >= 3, and f[i] + f[i + 1] == f[i + 2] for all 0 <= i < f.length - 2. Note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself. Return any Fibonacci-like sequence split from num, or return [] if it cannot be done.   Example 1: Input: num = \"1101111\" Output: [11,0,11,11] Explanation: The output [110, 1, 111] would also be accepted. Example 2: Input: num = \"112358130\" Output: [] Explanation: The task is impossible. Example 3: Input: num = \"0123\" Output: [] Explanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.   Constraints: 1 <= num.length <= 200 num contains only digits.",
        "641": "You are given an array of unique strings words where words[i] is six letters long. One word of words was chosen as a secret word. You are also given the helper object Master. You may call Master.guess(word) where word is a six-letter-long string, and it must be from words. Master.guess(word) returns: -1 if word is not from words, or an integer representing the number of exact matches (value and position) of your guess to the secret word. There is a parameter allowedGuesses for each test case where allowedGuesses is the maximum number of times you can call Master.guess(word). For each test case, you should call Master.guess with the secret word without exceeding the maximum number of allowed guesses. You will get: \"Either you took too many guesses, or you did not find the secret word.\" if you called Master.guess more than allowedGuesses times or if you did not call Master.guess with the secret word, or \"You guessed the secret word correctly.\" if you called Master.guess with the secret word with the number of calls to Master.guess less than or equal to allowedGuesses. The test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method).   Example 1: Input: secret = \"acckzz\", words = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"], allowedGuesses = 10 Output: You guessed the secret word correctly. Explanation: master.guess(\"aaaaaa\") returns -1, because \"aaaaaa\" is not in wordlist. master.guess(\"acckzz\") returns 6, because \"acckzz\" is secret and has all 6 matches. master.guess(\"ccbazz\") returns 3, because \"ccbazz\" has 3 matches. master.guess(\"eiowzz\") returns 2, because \"eiowzz\" has 2 matches. master.guess(\"abcczz\") returns 4, because \"abcczz\" has 4 matches. We made 5 calls to master.guess, and one of them was the secret, so we pass the test case. Example 2: Input: secret = \"hamada\", words = [\"hamada\",\"khaled\"], allowedGuesses = 10 Output: You guessed the secret word correctly. Explanation: Since there are two words, you can guess both.   Constraints: 1 <= words.length <= 100 words[i].length == 6 words[i] consist of lowercase English letters. All the strings of wordlist are unique. secret exists in words. 10 <= allowedGuesses <= 30",
        "642": "Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character. Note that after backspacing an empty text, the text will continue empty.   Example 1: Input: s = \"ab#c\", t = \"ad#c\" Output: true Explanation: Both s and t become \"ac\". Example 2: Input: s = \"ab##\", t = \"c#d#\" Output: true Explanation: Both s and t become \"\". Example 3: Input: s = \"a#c\", t = \"b\" Output: false Explanation: s becomes \"c\" while t becomes \"b\".   Constraints: 1 <= s.length, t.length <= 200 s and t only contain lowercase letters and '#' characters.   Follow up: Can you solve it in O(n) time and O(1) space?",
        "643": "You may recall that an array arr is a mountain array if and only if: arr.length >= 3 There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that: arr[0] < arr[1] < ... < arr[i - 1] < arr[i] arr[i] > arr[i + 1] > ... > arr[arr.length - 1] Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.   Example 1: Input: arr = [2,1,4,7,3,2,5] Output: 5 Explanation: The largest mountain is [1,4,7,3,2] which has length 5. Example 2: Input: arr = [2,2,2] Output: 0 Explanation: There is no mountain.   Constraints: 1 <= arr.length <= 104 0 <= arr[i] <= 104   Follow up: Can you solve it using only one pass? Can you solve it in O(1) space?",
        "644": "Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards. Given an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.   Example 1: Input: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3 Output: true Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8] Example 2: Input: hand = [1,2,3,4,5], groupSize = 4 Output: false Explanation: Alice's hand can not be rearranged into groups of 4.   Constraints: 1 <= hand.length <= 104 0 <= hand[i] <= 109 1 <= groupSize <= hand.length   Note: This question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/",
        "645": "You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge. Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.   Example 1: Input: graph = [[1,2,3],[0],[0],[0]] Output: 4 Explanation: One possible path is [1,0,2,0,3] Example 2: Input: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]] Output: 4 Explanation: One possible path is [0,1,4,2,3]   Constraints: n == graph.length 1 <= n <= 12 0 <= graph[i].length < n graph[i] does not contain i. If graph[a] contains b, then graph[b] contains a. The input graph is always connected.",
        "646": "You are given a string s of lowercase English letters and an integer array shifts of the same length. Call the shift() of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a'). For example, shift('a') = 'b', shift('t') = 'u', and shift('z') = 'a'. Now for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times. Return the final string after all such shifts to s are applied.   Example 1: Input: s = \"abc\", shifts = [3,5,9] Output: \"rpl\" Explanation: We start with \"abc\". After shifting the first 1 letters of s by 3, we have \"dbc\". After shifting the first 2 letters of s by 5, we have \"igc\". After shifting the first 3 letters of s by 9, we have \"rpl\", the answer. Example 2: Input: s = \"aaa\", shifts = [1,2,3] Output: \"gfd\"   Constraints: 1 <= s.length <= 105 s consists of lowercase English letters. shifts.length == s.length 0 <= shifts[i] <= 109",
        "647": "You are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed). There is at least one empty seat, and at least one person sitting. Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized.  Return that maximum distance to the closest person.   Example 1: Input: seats = [1,0,0,0,1,0,1] Output: 2 Explanation:  If Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2. If Alex sits in any other open seat, the closest person has distance 1. Thus, the maximum distance to the closest person is 2. Example 2: Input: seats = [1,0,0,0] Output: 3 Explanation:  If Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away. This is the maximum distance possible, so the answer is 3. Example 3: Input: seats = [0,1] Output: 1   Constraints: 2 <= seats.length <= 2 * 104 seats[i] is 0 or 1. At least one seat is empty. At least one seat is occupied.",
        "648": "You are given a 2D array of axis-aligned rectangles. Each rectangle[i] = [xi1, yi1, xi2, yi2] denotes the ith rectangle where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner. Calculate the total area covered by all rectangles in the plane. Any area covered by two or more rectangles should only be counted once. Return the total area. Since the answer may be too large, return it modulo 109 + 7.   Example 1: Input: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]] Output: 6 Explanation: A total area of 6 is covered by all three rectangles, as illustrated in the picture. From (1,1) to (2,2), the green and red rectangles overlap. From (1,0) to (2,3), all three rectangles overlap. Example 2: Input: rectangles = [[0,0,1000000000,1000000000]] Output: 49 Explanation: The answer is 1018 modulo (109 + 7), which is 49.   Constraints: 1 <= rectangles.length <= 200 rectanges[i].length == 4 0 <= xi1, yi1, xi2, yi2 <= 109 xi1 <= xi2 yi1 <= yi2",
        "649": "There is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness. You are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. All the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time). Return an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x.   Example 1: Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0] Output: [5,5,2,5,4,5,6,7] Explanation:  answer[0] = 5. Person 5 has more money than 3, which has more money than 1, which has more money than 0. The only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0. answer[7] = 7. Among all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7. The other answers can be filled out with similar reasoning. Example 2: Input: richer = [], quiet = [0] Output: [0]   Constraints: n == quiet.length 1 <= n <= 500 0 <= quiet[i] < n All the values of quiet are unique. 0 <= richer.length <= n * (n - 1) / 2 0 <= ai, bi < n ai != bi All the pairs of richer are unique. The observations in richer are all logically consistent.",
        "650": "You are given an integer mountain array arr of length n where the values increase to a peak element and then decrease. Return the index of the peak element. Your task is to solve it in O(log(n)) time complexity.   Example 1: Input: arr = [0,1,0] Output: 1 Example 2: Input: arr = [0,2,1,0] Output: 1 Example 3: Input: arr = [0,10,5,2] Output: 1   Constraints: 3 <= arr.length <= 105 0 <= arr[i] <= 106 arr is guaranteed to be a mountain array.",
        "651": "There are n cars at given miles away from the starting mile 0, traveling to reach the mile target. You are given two integer array position and speed, both of length n, where position[i] is the starting mile of the ith car and speed[i] is the speed of the ith car in miles per hour. A car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car. A car fleet is a car or cars driving next to each other. The speed of the car fleet is the minimum speed of any car in the fleet. If a car catches up to a car fleet at the mile target, it will still be considered as part of the car fleet. Return the number of car fleets that will arrive at the destination.   Example 1: Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3] Output: 3 Explanation: The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12. The fleet forms at target. The car starting at 0 (speed 1) does not catch up to any other car, so it is a fleet by itself. The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target. Example 2: Input: target = 10, position = [3], speed = [3] Output: 1 Explanation: There is only one car, hence there is only one fleet. Example 3: Input: target = 100, position = [0,2,4], speed = [4,2,1] Output: 1 Explanation: The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The car starting at 4 (speed 1) travels to 5. Then, the fleet at 4 (speed 2) and the car at position 5 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.   Constraints: n == position.length == speed.length 1 <= n <= 105 0 < target <= 106 0 <= position[i] < target All the values of position are unique. 0 < speed[i] <= 106",
        "652": "Strings s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2. Given two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar.   Example 1: Input: s1 = \"ab\", s2 = \"ba\" Output: 1 Explanation: The two string are 1-similar because we can use one swap to change s1 to s2: \"ab\" --> \"ba\". Example 2: Input: s1 = \"abc\", s2 = \"bca\" Output: 2 Explanation: The two strings are 2-similar because we can use two swaps to change s1 to s2: \"abc\" --> \"bac\" --> \"bca\".   Constraints: 1 <= s1.length <= 20 s2.length == s1.length s1 and s2 contain only lowercase letters from the set {'a', 'b', 'c', 'd', 'e', 'f'}. s2 is an anagram of s1.",
        "653": "There is an exam room with n seats in a single row labeled from 0 to n - 1. When a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number 0. Design a class that simulates the mentioned exam room. Implement the ExamRoom class: ExamRoom(int n) Initializes the object of the exam room with the number of the seats n. int seat() Returns the label of the seat at which the next student will set. void leave(int p) Indicates that the student sitting at seat p will leave the room. It is guaranteed that there will be a student sitting at seat p.   Example 1: Input [\"ExamRoom\", \"seat\", \"seat\", \"seat\", \"seat\", \"leave\", \"seat\"] [[10], [], [], [], [], [4], []] Output [null, 0, 9, 4, 2, null, 5]  Explanation ExamRoom examRoom = new ExamRoom(10); examRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0. examRoom.seat(); // return 9, the student sits at the last seat number 9. examRoom.seat(); // return 4, the student sits at the last seat number 4. examRoom.seat(); // return 2, the student sits at the last seat number 2. examRoom.leave(4); examRoom.seat(); // return 5, the student sits at the last seat number 5.   Constraints: 1 <= n <= 109 It is guaranteed that there is a student sitting at seat p. At most 104 calls will be made to seat and leave.",
        "654": "Given a balanced parentheses string s, return the score of the string. The score of a balanced parentheses string is based on the following rule: \"()\" has score 1. AB has score A + B, where A and B are balanced parentheses strings. (A) has score 2 * A, where A is a balanced parentheses string.   Example 1: Input: s = \"()\" Output: 1 Example 2: Input: s = \"(())\" Output: 2 Example 3: Input: s = \"()()\" Output: 2   Constraints: 2 <= s.length <= 50 s consists of only '(' and ')'. s is a balanced parentheses string.",
        "655": "There are n workers. You are given two integer arrays quality and wage where quality[i] is the quality of the ith worker and wage[i] is the minimum wage expectation for the ith worker. We want to hire exactly k workers to form a paid group. To hire a group of k workers, we must pay them according to the following rules: Every worker in the paid group must be paid at least their minimum wage expectation. In the group, each worker's pay must be directly proportional to their quality. This means if a worker’s quality is double that of another worker in the group, then they must be paid twice as much as the other worker. Given the integer k, return the least amount of money needed to form a paid group satisfying the above conditions. Answers within 10-5 of the actual answer will be accepted.   Example 1: Input: quality = [10,20,5], wage = [70,50,30], k = 2 Output: 105.00000 Explanation: We pay 70 to 0th worker and 35 to 2nd worker. Example 2: Input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3 Output: 30.66667 Explanation: We pay 4 to 0th worker, 13.33333 to 2nd and 3rd workers separately.   Constraints: n == quality.length == wage.length 1 <= k <= n <= 104 1 <= quality[i], wage[i] <= 104",
        "656": "There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2. The square room has walls of length p and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor. Given the two integers p and q, return the number of the receptor that the ray meets first. The test cases are guaranteed so that the ray will meet a receptor eventually.   Example 1: Input: p = 2, q = 1 Output: 2 Explanation: The ray meets receptor 2 the first time it gets reflected back to the left wall. Example 2: Input: p = 3, q = 1 Output: 1   Constraints: 1 <= q <= p <= 1000",
        "657": "Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false. Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j]. For example, swapping at indices 0 and 2 in \"abcd\" results in \"cbad\".   Example 1: Input: s = \"ab\", goal = \"ba\" Output: true Explanation: You can swap s[0] = 'a' and s[1] = 'b' to get \"ba\", which is equal to goal. Example 2: Input: s = \"ab\", goal = \"ab\" Output: false Explanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in \"ba\" != goal. Example 3: Input: s = \"aa\", goal = \"aa\" Output: true Explanation: You can swap s[0] = 'a' and s[1] = 'a' to get \"aa\", which is equal to goal.   Constraints: 1 <= s.length, goal.length <= 2 * 104 s and goal consist of lowercase letters.",
        "658": "At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5. Note that you do not have any change in hand at first. Given an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.   Example 1: Input: bills = [5,5,5,10,20] Output: true Explanation:  From the first 3 customers, we collect three $5 bills in order. From the fourth customer, we collect a $10 bill and give back a $5. From the fifth customer, we give a $10 bill and a $5 bill. Since all customers got correct change, we output true. Example 2: Input: bills = [5,5,10,10,20] Output: false Explanation:  From the first two customers in order, we collect two $5 bills. For the next two customers in order, we collect a $10 bill and give back a $5 bill. For the last customer, we can not give the change of $15 back because we only have two $10 bills. Since not every customer received the correct change, the answer is false.   Constraints: 1 <= bills.length <= 105 bills[i] is either 5, 10, or 20.",
        "659": "You are given an m x n binary matrix grid. A move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's). Every row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers. Return the highest possible score after making any number of moves (including zero moves).   Example 1: Input: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]] Output: 39 Explanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39 Example 2: Input: grid = [[0]] Output: 1   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 20 grid[i][j] is either 0 or 1.",
        "660": "Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1. A subarray is a contiguous part of an array.   Example 1: Input: nums = [1], k = 1 Output: 1 Example 2: Input: nums = [1,2], k = 4 Output: -1 Example 3: Input: nums = [2,-1,2], k = 3 Output: 3   Constraints: 1 <= nums.length <= 105 -105 <= nums[i] <= 105 1 <= k <= 109",
        "661": "Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node. You can return the answer in any order.   Example 1: Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2 Output: [7,4,1] Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1. Example 2: Input: root = [1], target = 1, k = 3 Output: []   Constraints: The number of nodes in the tree is in the range [1, 500]. 0 <= Node.val <= 500 All the values Node.val are unique. target is the value of one of the nodes in the tree. 0 <= k <= 1000",
        "662": "You are given an m x n grid grid where: '.' is an empty cell. '#' is a wall. '@' is the starting point. Lowercase letters represent keys. Uppercase letters represent locks. You start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall. If you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key. For some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet. Return the lowest number of moves to acquire all keys. If it is impossible, return -1.   Example 1: Input: grid = [\"@.a..\",\"###.#\",\"b.A.B\"] Output: 8 Explanation: Note that the goal is to obtain all the keys not to open all the locks. Example 2: Input: grid = [\"@..aA\",\"..B#.\",\"....b\"] Output: 6 Example 3: Input: grid = [\"@Aa\"] Output: -1   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 30 grid[i][j] is either an English letter, '.', '#', or '@'.  There is exactly one '@' in the grid. The number of keys in the grid is in the range [1, 6]. Each key in the grid is unique. Each key in the grid has a matching lock.",
        "663": "Given the root of a binary tree, the depth of each node is the shortest distance to the root. Return the smallest subtree such that it contains all the deepest nodes in the original tree. A node is called the deepest if it has the largest depth possible among any node in the entire tree. The subtree of a node is a tree consisting of that node, plus the set of all descendants of that node.   Example 1: Input: root = [3,5,1,6,2,0,8,null,null,7,4] Output: [2,7,4] Explanation: We return the node with value 2, colored in yellow in the diagram. The nodes coloured in blue are the deepest nodes of the tree. Notice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it. Example 2: Input: root = [1] Output: [1] Explanation: The root is the deepest node in the tree. Example 3: Input: root = [0,1,3,null,2] Output: [2] Explanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.   Constraints: The number of nodes in the tree will be in the range [1, 500]. 0 <= Node.val <= 500 The values of the nodes in the tree are unique.   Note: This question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/",
        "664": "Given an integer n, return the smallest prime palindrome greater than or equal to n. An integer is prime if it has exactly two divisors: 1 and itself. Note that 1 is not a prime number. For example, 2, 3, 5, 7, 11, and 13 are all primes. An integer is a palindrome if it reads the same from left to right as it does from right to left. For example, 101 and 12321 are palindromes. The test cases are generated so that the answer always exists and is in the range [2, 2 * 108].   Example 1: Input: n = 6 Output: 7 Example 2: Input: n = 8 Output: 11 Example 3: Input: n = 13 Output: 101   Constraints: 1 <= n <= 108",
        "665": "Given a 2D integer array matrix, return the transpose of matrix. The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.   Example 1: Input: matrix = [[1,2,3],[4,5,6],[7,8,9]] Output: [[1,4,7],[2,5,8],[3,6,9]] Example 2: Input: matrix = [[1,2,3],[4,5,6]] Output: [[1,4],[2,5],[3,6]]   Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 1000 1 <= m * n <= 105 -109 <= matrix[i][j] <= 109",
        "666": "You are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero. Return true if and only if we can do this so that the resulting number is a power of two.   Example 1: Input: n = 1 Output: true Example 2: Input: n = 10 Output: false   Constraints: 1 <= n <= 109",
        "667": "You are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i]. Return any permutation of nums1 that maximizes its advantage with respect to nums2.   Example 1: Input: nums1 = [2,7,11,15], nums2 = [1,10,4,11] Output: [2,11,7,15] Example 2: Input: nums1 = [12,24,8,32], nums2 = [13,25,32,11] Output: [24,32,8,12]   Constraints: 1 <= nums1.length <= 105 nums2.length == nums1.length 0 <= nums1[i], nums2[i] <= 109",
        "668": "Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence. For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8). Two binary trees are considered leaf-similar if their leaf value sequence is the same. Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.   Example 1: Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8] Output: true Example 2: Input: root1 = [1,2,3], root2 = [1,3,2] Output: false   Constraints: The number of nodes in each tree will be in the range [1, 200]. Both of the given trees will have values in the range [0, 200].",
        "669": "A sequence x1, x2, ..., xn is Fibonacci-like if: n >= 3 xi + xi+1 == xi+2 for all i + 2 <= n Given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0. A subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].   Example 1: Input: arr = [1,2,3,4,5,6,7,8] Output: 5 Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8]. Example 2: Input: arr = [1,3,7,11,12,14,18] Output: 3 Explanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].   Constraints: 3 <= arr.length <= 1000 1 <= arr[i] < arr[i + 1] <= 109",
        "670": "A robot on an infinite XY-plane starts at point (0, 0) facing north. The robot receives an array of integers commands, which represents a sequence of moves that it needs to execute. There are only three possible types of instructions the robot can receive: -2: Turn left 90 degrees. -1: Turn right 90 degrees. 1 <= k <= 9: Move forward k units, one unit at a time. Some of the grid squares are obstacles. The ith obstacle is at grid point obstacles[i] = (xi, yi). If the robot runs into an obstacle, it will stay in its current location (on the block adjacent to the obstacle) and move onto the next command. Return the maximum squared Euclidean distance that the robot reaches at any point in its path (i.e. if the distance is 5, return 25). Note: There can be an obstacle at (0, 0). If this happens, the robot will ignore the obstacle until it has moved off the origin. However, it will be unable to return to (0, 0) due to the obstacle. North means +Y direction. East means +X direction. South means -Y direction. West means -X direction.   Example 1: Input: commands = [4,-1,3], obstacles = [] Output: 25 Explanation: The robot starts at (0, 0): Move north 4 units to (0, 4). Turn right. Move east 3 units to (3, 4). The furthest point the robot ever gets from the origin is (3, 4), which squared is 32 + 42 = 25 units away. Example 2: Input: commands = [4,-1,4,-2,4], obstacles = [[2,4]] Output: 65 Explanation: The robot starts at (0, 0): Move north 4 units to (0, 4). Turn right. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4). Turn left. Move north 4 units to (1, 8). The furthest point the robot ever gets from the origin is (1, 8), which squared is 12 + 82 = 65 units away. Example 3: Input: commands = [6,-1,-1,6], obstacles = [[0,0]] Output: 36 Explanation: The robot starts at (0, 0): Move north 6 units to (0, 6). Turn right. Turn right. Move south 5 units and get blocked by the obstacle at (0,0), robot is at (0, 1). The furthest point the robot ever gets from the origin is (0, 6), which squared is 62 = 36 units away.   Constraints: 1 <= commands.length <= 104 commands[i] is either -2, -1, or an integer in the range [1, 9]. 0 <= obstacles.length <= 104 -3 * 104 <= xi, yi <= 3 * 104 The answer is guaranteed to be less than 231.",
        "671": "Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours. Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour. Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return. Return the minimum integer k such that she can eat all the bananas within h hours.   Example 1: Input: piles = [3,6,7,11], h = 8 Output: 4 Example 2: Input: piles = [30,11,23,4,20], h = 5 Output: 30 Example 3: Input: piles = [30,11,23,4,20], h = 6 Output: 23   Constraints: 1 <= piles.length <= 104 piles.length <= h <= 109 1 <= piles[i] <= 109",
        "672": "Given the head of a singly linked list, return the middle node of the linked list. If there are two middle nodes, return the second middle node.   Example 1: Input: head = [1,2,3,4,5] Output: [3,4,5] Explanation: The middle node of the list is node 3. Example 2: Input: head = [1,2,3,4,5,6] Output: [4,5,6] Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.   Constraints: The number of nodes in the list is in the range [1, 100]. 1 <= Node.val <= 100",
        "673": "Alice and Bob play a game with piles of stones. There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i]. The objective of the game is to end with the most stones. The total number of stones across all the piles is odd, so there are no ties. Alice and Bob take turns, with Alice starting first. Each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. This continues until there are no more piles left, at which point the person with the most stones wins. Assuming Alice and Bob play optimally, return true if Alice wins the game, or false if Bob wins.   Example 1: Input: piles = [5,3,4,5] Output: true Explanation:  Alice starts first, and can only take the first 5 or the last 5. Say she takes the first 5, so that the row becomes [3, 4, 5]. If Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points. If Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points. This demonstrated that taking the first 5 was a winning move for Alice, so we return true. Example 2: Input: piles = [3,7,2,3] Output: true   Constraints: 2 <= piles.length <= 500 piles.length is even. 1 <= piles[i] <= 500 sum(piles[i]) is odd.",
        "674": "A positive integer is magical if it is divisible by either a or b. Given the three integers n, a, and b, return the nth magical number. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: n = 1, a = 2, b = 3 Output: 2 Example 2: Input: n = 4, a = 2, b = 3 Output: 6   Constraints: 1 <= n <= 109 2 <= a, b <= 4 * 104",
        "675": "There is a group of n members, and a list of various crimes they could commit. The ith crime generates a profit[i] and requires group[i] members to participate in it. If a member participates in one crime, that member can't participate in another crime. Let's call a profitable scheme any subset of these crimes that generates at least minProfit profit, and the total number of members participating in that subset of crimes is at most n. Return the number of schemes that can be chosen. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: n = 5, minProfit = 3, group = [2,2], profit = [2,3] Output: 2 Explanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1. In total, there are 2 schemes. Example 2: Input: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8] Output: 7 Explanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one. There are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).   Constraints: 1 <= n <= 100 0 <= minProfit <= 100 1 <= group.length <= 100 1 <= group[i] <= 100 profit.length == group.length 0 <= profit[i] <= 100",
        "676": "You are given an encoded string s. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken: If the character read is a letter, that letter is written onto the tape. If the character read is a digit d, the entire current tape is repeatedly written d - 1 more times in total. Given an integer k, return the kth letter (1-indexed) in the decoded string.   Example 1: Input: s = \"leet2code3\", k = 10 Output: \"o\" Explanation: The decoded string is \"leetleetcodeleetleetcodeleetleetcode\". The 10th letter in the string is \"o\". Example 2: Input: s = \"ha22\", k = 5 Output: \"h\" Explanation: The decoded string is \"hahahaha\". The 5th letter is \"h\". Example 3: Input: s = \"a2345678999999999999999\", k = 1 Output: \"a\" Explanation: The decoded string is \"a\" repeated 8301530446056247680 times. The 1st letter is \"a\".   Constraints: 2 <= s.length <= 100 s consists of lowercase English letters and digits 2 through 9. s starts with a letter. 1 <= k <= 109 It is guaranteed that k is less than or equal to the length of the decoded string. The decoded string is guaranteed to have less than 263 letters.",
        "677": "You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit. Return the minimum number of boats to carry every given person.   Example 1: Input: people = [1,2], limit = 3 Output: 1 Explanation: 1 boat (1, 2) Example 2: Input: people = [3,2,2,1], limit = 3 Output: 3 Explanation: 3 boats (1, 2), (2) and (3) Example 3: Input: people = [3,5,3,4], limit = 5 Output: 4 Explanation: 4 boats (3), (3), (4), (5)   Constraints: 1 <= people.length <= 5 * 104 1 <= people[i] <= limit <= 3 * 104",
        "678": "You are given an undirected graph (the \"original graph\") with n nodes labeled from 0 to n - 1. You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge. The graph is given as a 2D array of edges where edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui and vi in the original graph, and cnti is the total number of new nodes that you will subdivide the edge into. Note that cnti == 0 means you will not subdivide the edge. To subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and cnti new nodes. The new nodes are x1, x2, ..., xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3], ..., [xcnti-1, xcnti], [xcnti, vi]. In this new graph, you want to know how many nodes are reachable from the node 0, where a node is reachable if the distance is maxMoves or less. Given the original graph and maxMoves, return the number of nodes that are reachable from node 0 in the new graph.   Example 1: Input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3 Output: 13 Explanation: The edge subdivisions are shown in the image above. The nodes that are reachable are highlighted in yellow. Example 2: Input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4 Output: 23 Example 3: Input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5 Output: 1 Explanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.   Constraints: 0 <= edges.length <= min(n * (n - 1) / 2, 104) edges[i].length == 3 0 <= ui < vi < n There are no multiple edges in the graph. 0 <= cnti <= 104 0 <= maxMoves <= 109 1 <= n <= 3000",
        "679": "You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes. Each value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j). We view the projection of these cubes onto the xy, yz, and zx planes. A projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side. Return the total area of all three projections.   Example 1: Input: grid = [[1,2],[3,4]] Output: 17 Explanation: Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane. Example 2: Input: grid = [[2]] Output: 5 Example 3: Input: grid = [[1,0],[0,2]] Output: 8   Constraints: n == grid.length == grid[i].length 1 <= n <= 50 0 <= grid[i][j] <= 50",
        "680": "A sentence is a string of single-space separated words where each word consists only of lowercase letters. A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence. Given two sentences s1 and s2, return a list of all the uncommon words. You may return the answer in any order.   Example 1: Input: s1 = \"this apple is sweet\", s2 = \"this apple is sour\" Output: [\"sweet\",\"sour\"] Explanation: The word \"sweet\" appears only in s1, while the word \"sour\" appears only in s2. Example 2: Input: s1 = \"apple apple\", s2 = \"banana\" Output: [\"banana\"]   Constraints: 1 <= s1.length, s2.length <= 200 s1 and s2 consist of lowercase English letters and spaces. s1 and s2 do not have leading or trailing spaces. All the words in s1 and s2 are separated by a single space.",
        "681": "You start at the cell (rStart, cStart) of an rows x cols grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column. You will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all rows * cols spaces of the grid. Return an array of coordinates representing the positions of the grid in the order you visited them.   Example 1: Input: rows = 1, cols = 4, rStart = 0, cStart = 0 Output: [[0,0],[0,1],[0,2],[0,3]] Example 2: Input: rows = 5, cols = 6, rStart = 1, cStart = 4 Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]   Constraints: 1 <= rows, cols <= 100 0 <= rStart < rows 0 <= cStart < cols",
        "682": "We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group. Given the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.   Example 1: Input: n = 4, dislikes = [[1,2],[1,3],[2,4]] Output: true Explanation: The first group has [1,4], and the second group has [2,3]. Example 2: Input: n = 3, dislikes = [[1,2],[1,3],[2,3]] Output: false Explanation: We need at least 3 groups to divide them. We cannot put them in two groups.   Constraints: 1 <= n <= 2000 0 <= dislikes.length <= 104 dislikes[i].length == 2 1 <= ai < bi <= n All the pairs of dislikes are unique.",
        "683": "Alice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has. Since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have. Return an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange. If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists.   Example 1: Input: aliceSizes = [1,1], bobSizes = [2,2] Output: [1,2] Example 2: Input: aliceSizes = [1,2], bobSizes = [2,3] Output: [1,2] Example 3: Input: aliceSizes = [2], bobSizes = [1,3] Output: [2,3]   Constraints: 1 <= aliceSizes.length, bobSizes.length <= 104 1 <= aliceSizes[i], bobSizes[j] <= 105 Alice and Bob have a different total number of candies. There will be at least one valid answer for the given input.",
        "684": "Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree. If there exist multiple answers, you can return any of them.   Example 1: Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1] Output: [1,2,3,4,5,6,7] Example 2: Input: preorder = [1], postorder = [1] Output: [1]   Constraints: 1 <= preorder.length <= 30 1 <= preorder[i] <= preorder.length All the values of preorder are unique. postorder.length == preorder.length 1 <= postorder[i] <= postorder.length All the values of postorder are unique. It is guaranteed that preorder and postorder are the preorder traversal and postorder traversal of the same binary tree.",
        "685": "Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order. A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word. Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.   Example 1: Input: words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\" Output: [\"mee\",\"aqq\"] Explanation: \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}.  \"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter. Example 2: Input: words = [\"a\",\"b\",\"c\"], pattern = \"a\" Output: [\"a\",\"b\",\"c\"]   Constraints: 1 <= pattern.length <= 20 1 <= words.length <= 50 words[i].length == pattern.length pattern and words[i] are lowercase English letters.",
        "686": "The width of a sequence is the difference between the maximum and minimum elements in the sequence. Given an array of integers nums, return the sum of the widths of all the non-empty subsequences of nums. Since the answer may be very large, return it modulo 109 + 7. A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].   Example 1: Input: nums = [2,1,3] Output: 6 Explanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3]. The corresponding widths are 0, 0, 0, 1, 1, 2, 2. The sum of these widths is 6. Example 2: Input: nums = [2] Output: 0   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105",
        "687": "You are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j). After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes. Return the total surface area of the resulting shapes. Note: The bottom face of each shape counts toward its surface area.   Example 1: Input: grid = [[1,2],[3,4]] Output: 34 Example 2: Input: grid = [[1,1,1],[1,0,1],[1,1,1]] Output: 32 Example 3: Input: grid = [[2,2,2],[2,1,2],[2,2,2]] Output: 46   Constraints: n == grid.length == grid[i].length 1 <= n <= 50 0 <= grid[i][j] <= 50",
        "688": "You are given an array of strings of the same length words. In one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i]. Two strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j]. For example, words[i] = \"zzxy\" and words[j] = \"xyzz\" are special-equivalent because we may make the moves \"zzxy\" -> \"xzzy\" -> \"xyzz\". A group of special-equivalent strings from words is a non-empty subset of words such that: Every pair of strings in the group are special equivalent, and The group is the largest size possible (i.e., there is not a string words[i] not in the group such that words[i] is special-equivalent to every string in the group). Return the number of groups of special-equivalent strings from words.   Example 1: Input: words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"] Output: 3 Explanation:  One group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these. The other two groups are [\"xyzz\", \"zzxy\"] and [\"zzyx\"]. Note that in particular, \"zzxy\" is not special equivalent to \"zzyx\". Example 2: Input: words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"] Output: 3   Constraints: 1 <= words.length <= 1000 1 <= words[i].length <= 20 words[i] consist of lowercase English letters. All the strings are of the same length.",
        "689": "Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0. Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order. A full binary tree is a binary tree where each node has exactly 0 or 2 children.   Example 1: Input: n = 7 Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]] Example 2: Input: n = 3 Output: [[0,0,0]]   Constraints: 1 <= n <= 20",
        "690": "Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack. Implement the FreqStack class: FreqStack() constructs an empty frequency stack. void push(int val) pushes an integer val onto the top of the stack. int pop() removes and returns the most frequent element in the stack. If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.   Example 1: Input [\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"] [[], [5], [7], [5], [7], [4], [5], [], [], [], []] Output [null, null, null, null, null, null, null, 5, 7, 5, 4]  Explanation FreqStack freqStack = new FreqStack(); freqStack.push(5); // The stack is [5] freqStack.push(7); // The stack is [5,7] freqStack.push(5); // The stack is [5,7,5] freqStack.push(7); // The stack is [5,7,5,7] freqStack.push(4); // The stack is [5,7,5,7,4] freqStack.push(5); // The stack is [5,7,5,7,4,5] freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4]. freqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4]. freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4]. freqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].   Constraints: 0 <= val <= 109 At most 2 * 104 calls will be made to push and pop. It is guaranteed that there will be at least one element in the stack before calling pop.",
        "691": "An array is monotonic if it is either monotone increasing or monotone decreasing. An array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j]. Given an integer array nums, return true if the given array is monotonic, or false otherwise.   Example 1: Input: nums = [1,2,2,3] Output: true Example 2: Input: nums = [6,5,4,4] Output: true Example 3: Input: nums = [1,3,2] Output: false   Constraints: 1 <= nums.length <= 105 -105 <= nums[i] <= 105",
        "692": "Given an integer array arr, return the number of distinct bitwise ORs of all the non-empty subarrays of arr. The bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: arr = [0] Output: 1 Explanation: There is only one possible result: 0. Example 2: Input: arr = [1,1,2] Output: 3 Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2]. These yield the results 1, 1, 2, 1, 3, 3. There are 3 unique values, so the answer is 3. Example 3: Input: arr = [1,2,4] Output: 6 Explanation: The possible results are 1, 2, 3, 4, 6, and 7.   Constraints: 1 <= arr.length <= 5 * 104 0 <= arr[i] <= 109",
        "693": "You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string. Return the lexicographically smallest string you could have after applying the mentioned step any number of moves.   Example 1: Input: s = \"cba\", k = 1 Output: \"acb\" Explanation:  In the first move, we move the 1st character 'c' to the end, obtaining the string \"bac\". In the second move, we move the 1st character 'b' to the end, obtaining the final result \"acb\". Example 2: Input: s = \"baaca\", k = 3 Output: \"aaabc\" Explanation:  In the first move, we move the 1st character 'b' to the end, obtaining the string \"aacab\". In the second move, we move the 3rd character 'c' to the end, obtaining the final result \"aaabc\".   Constraints: 1 <= k <= s.length <= 1000 s consist of lowercase English letters.",
        "694": "We can use run-length encoding (i.e., RLE) to encode a sequence of integers. In a run-length encoded array of even length encoding (0-indexed), for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence. For example, the sequence arr = [8,8,8,5,5] can be encoded to be encoding = [3,8,2,5]. encoding = [3,8,0,9,2,5] and encoding = [2,8,1,8,2,5] are also valid RLE of arr. Given a run-length encoded array, design an iterator that iterates through it. Implement the RLEIterator class: RLEIterator(int[] encoded) Initializes the object with the encoded array encoded. int next(int n) Exhausts the next n elements and returns the last element exhausted in this way. If there is no element left to exhaust, return -1 instead.   Example 1: Input [\"RLEIterator\", \"next\", \"next\", \"next\", \"next\"] [[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]] Output [null, 8, 8, 5, -1]  Explanation RLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5]. rLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5]. rLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5]. rLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5]. rLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5, but the second term did not exist. Since the last term exhausted does not exist, we return -1.   Constraints: 2 <= encoding.length <= 1000 encoding.length is even. 0 <= encoding[i] <= 109 1 <= n <= 109 At most 1000 calls will be made to next.",
        "695": "Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day. The span of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day. For example, if the prices of the stock in the last four days is [7,2,1,2] and the price of the stock today is 2, then the span of today is 4 because starting from today, the price of the stock was less than or equal 2 for 4 consecutive days. Also, if the prices of the stock in the last four days is [7,34,1,2] and the price of the stock today is 8, then the span of today is 3 because starting from today, the price of the stock was less than or equal 8 for 3 consecutive days. Implement the StockSpanner class: StockSpanner() Initializes the object of the class. int next(int price) Returns the span of the stock's price given that today's price is price.   Example 1: Input [\"StockSpanner\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\"] [[], [100], [80], [60], [70], [60], [75], [85]] Output [null, 1, 1, 1, 2, 1, 4, 6]  Explanation StockSpanner stockSpanner = new StockSpanner(); stockSpanner.next(100); // return 1 stockSpanner.next(80);  // return 1 stockSpanner.next(60);  // return 1 stockSpanner.next(70);  // return 2 stockSpanner.next(60);  // return 1 stockSpanner.next(75);  // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price. stockSpanner.next(85);  // return 6   Constraints: 1 <= price <= 105 At most 104 calls will be made to next.",
        "696": "Given an array of digits which is sorted in non-decreasing order. You can write numbers using each digits[i] as many times as we want. For example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'. Return the number of positive integers that can be generated that are less than or equal to a given integer n.   Example 1: Input: digits = [\"1\",\"3\",\"5\",\"7\"], n = 100 Output: 20 Explanation:  The 20 numbers that can be written are: 1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77. Example 2: Input: digits = [\"1\",\"4\",\"9\"], n = 1000000000 Output: 29523 Explanation:  We can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers, 81 four digit numbers, 243 five digit numbers, 729 six digit numbers, 2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers. In total, this is 29523 integers that can be written using the digits array. Example 3: Input: digits = [\"7\"], n = 8 Output: 1   Constraints: 1 <= digits.length <= 9 digits[i].length == 1 digits[i] is a digit from '1' to '9'. All the values in digits are unique. digits is sorted in non-decreasing order. 1 <= n <= 109",
        "697": "You are given a string s of length n where s[i] is either: 'D' means decreasing, or 'I' means increasing. A permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i: If s[i] == 'D', then perm[i] > perm[i + 1], and If s[i] == 'I', then perm[i] < perm[i + 1]. Return the number of valid permutations perm. Since the answer may be large, return it modulo 109 + 7.   Example 1: Input: s = \"DID\" Output: 5 Explanation: The 5 valid permutations of (0, 1, 2, 3) are: (1, 0, 3, 2) (2, 0, 3, 1) (2, 1, 3, 0) (3, 0, 2, 1) (3, 1, 2, 0) Example 2: Input: s = \"D\" Output: 1   Constraints: n == s.length 1 <= n <= 200 s[i] is either 'I' or 'D'.",
        "698": "You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces. You want to collect as much fruit as possible. However, the owner has some strict rules that you must follow: You only have two baskets, and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold. Starting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets. Once you reach a tree with fruit that cannot fit in your baskets, you must stop. Given the integer array fruits, return the maximum number of fruits you can pick.   Example 1: Input: fruits = [1,2,1] Output: 3 Explanation: We can pick from all 3 trees. Example 2: Input: fruits = [0,1,2,2] Output: 3 Explanation: We can pick from trees [1,2,2]. If we had started at the first tree, we would only pick from trees [0,1]. Example 3: Input: fruits = [1,2,3,2,2] Output: 4 Explanation: We can pick from trees [2,3,2,2]. If we had started at the first tree, we would only pick from trees [1,2].   Constraints: 1 <= fruits.length <= 105 0 <= fruits[i] < fruits.length",
        "699": "Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers. Return any array that satisfies this condition.   Example 1: Input: nums = [3,1,2,4] Output: [2,4,3,1] Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted. Example 2: Input: nums = [0] Output: [0]   Constraints: 1 <= nums.length <= 5000 0 <= nums[i] <= 5000",
        "700": "Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome. Given two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].   Example 1: Input: left = \"4\", right = \"1000\" Output: 4 Explanation: 4, 9, 121, and 484 are superpalindromes. Note that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome. Example 2: Input: left = \"1\", right = \"2\" Output: 1   Constraints: 1 <= left.length, right.length <= 18 left and right consist of only digits. left and right cannot have leading zeros. left and right represent integers in the range [1, 1018 - 1]. left is less than or equal to right.",
        "701": "Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.   Example 1: Input: arr = [3,1,2,4] Output: 17 Explanation:  Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4].  Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1. Sum is 17. Example 2: Input: arr = [11,81,94,43,3] Output: 444   Constraints: 1 <= arr.length <= 3 * 104 1 <= arr[i] <= 3 * 104",
        "702": "You are given an integer array nums and an integer k. In one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. You can apply this operation at most once for each index i. The score of nums is the difference between the maximum and minimum elements in nums. Return the minimum score of nums after applying the mentioned operation at most once for each index in it.   Example 1: Input: nums = [1], k = 0 Output: 0 Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0. Example 2: Input: nums = [0,10], k = 2 Output: 6 Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6. Example 3: Input: nums = [1,3,6], k = 3 Output: 0 Explanation: Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0.   Constraints: 1 <= nums.length <= 104 0 <= nums[i] <= 104 0 <= k <= 104",
        "703": "You are given an integer array nums and an integer k. For each index i where 0 <= i < nums.length, change nums[i] to be either nums[i] + k or nums[i] - k. The score of nums is the difference between the maximum and minimum elements in nums. Return the minimum score of nums after changing the values at each index.   Example 1: Input: nums = [1], k = 0 Output: 0 Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0. Example 2: Input: nums = [0,10], k = 2 Output: 6 Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6. Example 3: Input: nums = [1,3,6], k = 3 Output: 3 Explanation: Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3.   Constraints: 1 <= nums.length <= 104 0 <= nums[i] <= 104 0 <= k <= 104",
        "704": "You are given two integer arrays persons and times. In an election, the ith vote was cast for persons[i] at time times[i]. For each query at a time t, find the person that was leading the election at time t. Votes cast at time t will count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins. Implement the TopVotedCandidate class: TopVotedCandidate(int[] persons, int[] times) Initializes the object with the persons and times arrays. int q(int t) Returns the number of the person that was leading the election at time t according to the mentioned rules.   Example 1: Input [\"TopVotedCandidate\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\"] [[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]] Output [null, 0, 1, 1, 0, 0, 1]  Explanation TopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]); topVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading. topVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading. topVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.) topVotedCandidate.q(15); // return 0 topVotedCandidate.q(24); // return 0 topVotedCandidate.q(8); // return 1   Constraints: 1 <= persons.length <= 5000 times.length == persons.length 0 <= persons[i] < persons.length 0 <= times[i] <= 109 times is sorted in a strictly increasing order. times[0] <= t <= 109 At most 104 calls will be made to q.",
        "705": "Given an array of integers nums, sort the array in ascending order and return it. You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.   Example 1: Input: nums = [5,2,3,1] Output: [1,2,3,5] Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5). Example 2: Input: nums = [5,1,1,2,0,0] Output: [0,0,1,1,2,5] Explanation: Note that the values of nums are not necessairly unique.   Constraints: 1 <= nums.length <= 5 * 104 -5 * 104 <= nums[i] <= 5 * 104",
        "706": "A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns. The graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph. The mouse starts at node 1 and goes first, the cat starts at node 2 and goes second, and there is a hole at node 0. During each player's turn, they must travel along one edge of the graph that meets where they are.  For example, if the Mouse is at node 1, it must travel to any node in graph[1]. Additionally, it is not allowed for the Cat to travel to the Hole (node 0). Then, the game can end in three ways: If ever the Cat occupies the same node as the Mouse, the Cat wins. If ever the Mouse reaches the Hole, the Mouse wins. If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw. Given a graph, and assuming both players play optimally, return 1 if the mouse wins the game, 2 if the cat wins the game, or 0 if the game is a draw.   Example 1: Input: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]] Output: 0 Example 2: Input: graph = [[1,3],[0],[3],[0,2]] Output: 1   Constraints: 3 <= graph.length <= 50 1 <= graph[i].length < graph.length 0 <= graph[i][j] < graph.length graph[i][j] != i graph[i] is unique. The mouse and the cat can always move. ",
        "707": "You are given an integer array deck where deck[i] represents the number written on the ith card. Partition the cards into one or more groups such that: Each group has exactly x cards where x > 1, and All the cards in one group have the same integer written on them. Return true if such partition is possible, or false otherwise.   Example 1: Input: deck = [1,2,3,4,4,3,2,1] Output: true Explanation: Possible partition [1,1],[2,2],[3,3],[4,4]. Example 2: Input: deck = [1,1,1,2,2,2,3,3] Output: false Explanation: No possible partition.   Constraints: 1 <= deck.length <= 104 0 <= deck[i] < 104",
        "708": "Given an integer array nums, partition it into two (contiguous) subarrays left and right so that: Every element in left is less than or equal to every element in right. left and right are non-empty. left has the smallest possible size. Return the length of left after such a partitioning. Test cases are generated such that partitioning exists.   Example 1: Input: nums = [5,0,3,8,6] Output: 3 Explanation: left = [5,0,3], right = [8,6] Example 2: Input: nums = [1,1,1,0,6,12] Output: 4 Explanation: left = [1,1,1,0], right = [6,12]   Constraints: 2 <= nums.length <= 105 0 <= nums[i] <= 106 There is at least one valid answer for the given input.",
        "709": "You are given two string arrays words1 and words2. A string b is a subset of string a if every letter in b occurs in a including multiplicity. For example, \"wrr\" is a subset of \"warrior\" but is not a subset of \"world\". A string a from words1 is universal if for every string b in words2, b is a subset of a. Return an array of all the universal strings in words1. You may return the answer in any order.   Example 1: Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"] Output: [\"facebook\",\"google\",\"leetcode\"] Example 2: Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"] Output: [\"apple\",\"google\",\"leetcode\"]   Constraints: 1 <= words1.length, words2.length <= 104 1 <= words1[i].length, words2[i].length <= 10 words1[i] and words2[i] consist only of lowercase English letters. All the strings of words1 are unique.",
        "710": "Given a string s, reverse the string according to the following rules: All the characters that are not English letters remain in the same position. All the English letters (lowercase or uppercase) should be reversed. Return s after reversing it.   Example 1: Input: s = \"ab-cd\" Output: \"dc-ba\" Example 2: Input: s = \"a-bC-dEf-ghIj\" Output: \"j-Ih-gfE-dCba\" Example 3: Input: s = \"Test1ng-Leet=code-Q!\" Output: \"Qedo1ct-eeLg=ntse-T!\"   Constraints: 1 <= s.length <= 100 s consists of characters with ASCII values in the range [33, 122]. s does not contain '\\\"' or '\\\\'.",
        "711": "Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums. A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n]. A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.   Example 1: Input: nums = [1,-2,3,-2] Output: 3 Explanation: Subarray [3] has maximum sum 3. Example 2: Input: nums = [5,-3,5] Output: 10 Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10. Example 3: Input: nums = [-3,-2,-3] Output: -2 Explanation: Subarray [-2] has maximum sum -2.   Constraints: n == nums.length 1 <= n <= 3 * 104 -3 * 104 <= nums[i] <= 3 * 104",
        "712": "Your music player contains n different songs. You want to listen to goal songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that: Every song is played at least once. A song can only be played again only if k other songs have been played. Given n, goal, and k, return the number of possible playlists that you can create. Since the answer can be very large, return it modulo 109 + 7.   Example 1: Input: n = 3, goal = 3, k = 1 Output: 6 Explanation: There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1]. Example 2: Input: n = 2, goal = 3, k = 0 Output: 6 Explanation: There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2]. Example 3: Input: n = 2, goal = 3, k = 1 Output: 2 Explanation: There are 2 possible playlists: [1, 2, 1] and [2, 1, 2].   Constraints: 0 <= k < n <= goal <= 100",
        "713": "A parentheses string is valid if and only if: It is the empty string, It can be written as AB (A concatenated with B), where A and B are valid strings, or It can be written as (A), where A is a valid string. You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string. For example, if s = \"()))\", you can insert an opening parenthesis to be \"(()))\" or a closing parenthesis to be \"())))\". Return the minimum number of moves required to make s valid.   Example 1: Input: s = \"())\" Output: 1 Example 2: Input: s = \"(((\" Output: 3   Constraints: 1 <= s.length <= 1000 s[i] is either '(' or ')'.",
        "714": "Given an array of integers nums, half of the integers in nums are odd, and the other half are even. Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even. Return any answer array that satisfies this condition.   Example 1: Input: nums = [4,2,5,7] Output: [4,5,2,7] Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted. Example 2: Input: nums = [2,3] Output: [2,3]   Constraints: 2 <= nums.length <= 2 * 104 nums.length is even. Half of the integers in nums are even. 0 <= nums[i] <= 1000   Follow Up: Could you solve it in-place?",
        "715": "Given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target. As the answer can be very large, return it modulo 109 + 7.   Example 1: Input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8 Output: 20 Explanation:  Enumerating by the values (arr[i], arr[j], arr[k]): (1, 2, 5) occurs 8 times; (1, 3, 4) occurs 8 times; (2, 2, 4) occurs 2 times; (2, 3, 3) occurs 2 times. Example 2: Input: arr = [1,1,2,2,2,2], target = 5 Output: 12 Explanation:  arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times: We choose one 1 from [1,1] in 2 ways, and two 2s from [2,2,2,2] in 6 ways. Example 3: Input: arr = [2,1,3], target = 6 Output: 1 Explanation: (1, 2, 3) occured one time in the array so we return 1.   Constraints: 3 <= arr.length <= 3000 0 <= arr[i] <= 100 0 <= target <= 300",
        "716": "You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1. Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner. Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial. Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index. Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.   Example 1: Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1] Output: 0 Example 2: Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2] Output: 0 Example 3: Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2] Output: 1   Constraints: n == graph.length n == graph[i].length 2 <= n <= 300 graph[i][j] is 0 or 1. graph[i][j] == graph[j][i] graph[i][i] == 1 1 <= initial.length <= n 0 <= initial[i] <= n - 1 All the integers in initial are unique.",
        "717": "Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times. You examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.   Example 1: Input: name = \"alex\", typed = \"aaleex\" Output: true Explanation: 'a' and 'e' in 'alex' were long pressed. Example 2: Input: name = \"saeed\", typed = \"ssaaedd\" Output: false Explanation: 'e' must have been pressed twice, but it was not in the typed output.   Constraints: 1 <= name.length, typed.length <= 1000 name and typed consist of only lowercase English letters.",
        "718": "A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none). You are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0. Return the minimum number of flips to make s monotone increasing.   Example 1: Input: s = \"00110\" Output: 1 Explanation: We flip the last digit to get 00111. Example 2: Input: s = \"010110\" Output: 2 Explanation: We flip to get 011111, or alternatively 000111. Example 3: Input: s = \"00011000\" Output: 2 Explanation: We flip to get 00000000.   Constraints: 1 <= s.length <= 105 s[i] is either '0' or '1'.",
        "719": "You are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value. If it is possible, return any [i, j] with i + 1 < j, such that: arr[0], arr[1], ..., arr[i] is the first part, arr[i + 1], arr[i + 2], ..., arr[j - 1] is the second part, and arr[j], arr[j + 1], ..., arr[arr.length - 1] is the third part. All three parts have equal binary values. If it is not possible, return [-1, -1]. Note that the entire part is used when considering what binary value it represents. For example, [1,1,0] represents 6 in decimal, not 3. Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.   Example 1: Input: arr = [1,0,1,0,1] Output: [0,3] Example 2: Input: arr = [1,1,0,1,1] Output: [-1,-1] Example 3: Input: arr = [1,1,0,0,1] Output: [0,2]   Constraints: 3 <= arr.length <= 3 * 104 arr[i] is 0 or 1",
        "720": "You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1. Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner. Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial, completely removing it and any connections from this node to any other node. Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.   Example 1: Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1] Output: 0 Example 2: Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1] Output: 1 Example 3: Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1] Output: 1   Constraints: n == graph.length n == graph[i].length 2 <= n <= 300 graph[i][j] is 0 or 1. graph[i][j] == graph[j][i] graph[i][i] == 1 1 <= initial.length < n 0 <= initial[i] <= n - 1 All the integers in initial are unique.",
        "721": "Every valid email consists of a local name and a domain name, separated by the '@' sign. Besides lowercase letters, the email may contain one or more '.' or '+'. For example, in \"alice@leetcode.com\", \"alice\" is the local name, and \"leetcode.com\" is the domain name. If you add periods '.' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names. For example, \"alice.z@leetcode.com\" and \"alicez@leetcode.com\" forward to the same email address. If you add a plus '+' in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names. For example, \"m.y+name@email.com\" will be forwarded to \"my@email.com\". It is possible to use both of these rules at the same time. Given an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.   Example 1: Input: emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"] Output: 2 Explanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails. Example 2: Input: emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"] Output: 3   Constraints: 1 <= emails.length <= 100 1 <= emails[i].length <= 100 emails[i] consist of lowercase English letters, '+', '.' and '@'. Each emails[i] contains exactly one '@' character. All local and domain names are non-empty. Local names do not start with a '+' character. Domain names end with the \".com\" suffix. Domain names must contain at least one character before \".com\" suffix.",
        "722": "Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal. A subarray is a contiguous part of the array.   Example 1: Input: nums = [1,0,1,0,1], goal = 2 Output: 4 Explanation: The 4 subarrays are bolded and underlined below: [1,0,1,0,1] [1,0,1,0,1] [1,0,1,0,1] [1,0,1,0,1] Example 2: Input: nums = [0,0,0,0,0], goal = 0 Output: 15   Constraints: 1 <= nums.length <= 3 * 104 nums[i] is either 0 or 1. 0 <= goal <= nums.length",
        "723": "Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix. A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).   Example 1: Input: matrix = [[2,1,3],[6,5,4],[7,8,9]] Output: 13 Explanation: There are two falling paths with a minimum sum as shown. Example 2: Input: matrix = [[-19,57],[-40,-5]] Output: -59 Explanation: The falling path with a minimum sum is shown.   Constraints: n == matrix.length == matrix[i].length 1 <= n <= 100 -100 <= matrix[i][j] <= 100",
        "724": "An array nums of length n is beautiful if: nums is a permutation of the integers in the range [1, n]. For every 0 <= i < j < n, there is no index k with i < k < j where 2 * nums[k] == nums[i] + nums[j]. Given the integer n, return any beautiful array nums of length n. There will be at least one valid answer for the given n.   Example 1: Input: n = 4 Output: [2,1,4,3] Example 2: Input: n = 5 Output: [3,1,2,5,4]   Constraints: 1 <= n <= 1000",
        "725": "You have a RecentCounter class which counts the number of recent requests within a certain time frame. Implement the RecentCounter class: RecentCounter() Initializes the counter with zero recent requests. int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t]. It is guaranteed that every call to ping uses a strictly larger value of t than the previous call.   Example 1: Input [\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"] [[], [1], [100], [3001], [3002]] Output [null, 1, 2, 3, 3]  Explanation RecentCounter recentCounter = new RecentCounter(); recentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1 recentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2 recentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3 recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3   Constraints: 1 <= t <= 109 Each test case will call ping with strictly increasing values of t. At most 104 calls will be made to ping.",
        "726": "You are given an n x n binary matrix grid where 1 represents land and 0 represents water. An island is a 4-directionally connected group of 1's not connected to any other 1's. There are exactly two islands in grid. You may change 0's to 1's to connect the two islands to form one island. Return the smallest number of 0's you must flip to connect the two islands.   Example 1: Input: grid = [[0,1],[1,0]] Output: 1 Example 2: Input: grid = [[0,1,0],[0,0,0],[0,0,1]] Output: 2 Example 3: Input: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]] Output: 1   Constraints: n == grid.length == grid[i].length 2 <= n <= 100 grid[i][j] is either 0 or 1. There are exactly two islands in grid.",
        "727": "The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagram: A chess knight can move as indicated in the chess diagram below: We have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell). Given an integer n, return how many distinct phone numbers of length n we can dial. You are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps. As the answer may be very large, return the answer modulo 109 + 7.   Example 1: Input: n = 1 Output: 10 Explanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient. Example 2: Input: n = 2 Output: 20 Explanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94] Example 3: Input: n = 3131 Output: 136006598 Explanation: Please take care of the mod.   Constraints: 1 <= n <= 5000",
        "728": "You are given two strings stamp and target. Initially, there is a string s of length target.length with all s[i] == '?'. In one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp. For example, if stamp = \"abc\" and target = \"abcba\", then s is \"?????\" initially. In one turn you can: place stamp at index 0 of s to obtain \"abc??\", place stamp at index 1 of s to obtain \"?abc?\", or place stamp at index 2 of s to obtain \"??abc\". Note that stamp must be fully contained in the boundaries of s in order to stamp (i.e., you cannot place stamp at index 3 of s). We want to convert s to target using at most 10 * target.length turns. Return an array of the index of the left-most letter being stamped at each turn. If we cannot obtain target from s within 10 * target.length turns, return an empty array.   Example 1: Input: stamp = \"abc\", target = \"ababc\" Output: [0,2] Explanation: Initially s = \"?????\". - Place stamp at index 0 to get \"abc??\". - Place stamp at index 2 to get \"ababc\". [1,0,2] would also be accepted as an answer, as well as some other answers. Example 2: Input: stamp = \"abca\", target = \"aabcaca\" Output: [3,0,1] Explanation: Initially s = \"???????\". - Place stamp at index 3 to get \"???abca\". - Place stamp at index 0 to get \"abcabca\". - Place stamp at index 1 to get \"aabcaca\".   Constraints: 1 <= stamp.length <= target.length <= 1000 stamp and target consist of lowercase English letters.",
        "729": "You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier. There are two types of logs: Letter-logs: All words (except the identifier) consist of lowercase English letters. Digit-logs: All words (except the identifier) consist of digits. Reorder these logs so that: The letter-logs come before all digit-logs. The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers. The digit-logs maintain their relative ordering. Return the final order of the logs.   Example 1: Input: logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"] Output: [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"] Explanation: The letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\". The digit-logs have a relative order of \"dig1 8 1 5 1\", \"dig2 3 6\". Example 2: Input: logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"] Output: [\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]   Constraints: 1 <= logs.length <= 100 3 <= logs[i].length <= 100 All the tokens of logs[i] are separated by a single space. logs[i] is guaranteed to have an identifier and at least one word after the identifier.",
        "730": "Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].   Example 1: Input: root = [10,5,15,3,7,null,18], low = 7, high = 15 Output: 32 Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32. Example 2: Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10 Output: 23 Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.   Constraints: The number of nodes in the tree is in the range [1, 2 * 104]. 1 <= Node.val <= 105 1 <= low <= high <= 105 All Node.val are unique.",
        "731": "You are given an array of points in the X-Y plane points where points[i] = [xi, yi]. Return the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.   Example 1: Input: points = [[1,1],[1,3],[3,1],[3,3],[2,2]] Output: 4 Example 2: Input: points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]] Output: 2   Constraints: 1 <= points.length <= 500 points[i].length == 2 0 <= xi, yi <= 4 * 104 All the given points are unique.",
        "732": "Given a string s, return the number of distinct non-empty subsequences of s. Since the answer may be very large, return it modulo 109 + 7. A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not.   Example 1: Input: s = \"abc\" Output: 7 Explanation: The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\". Example 2: Input: s = \"aba\" Output: 6 Explanation: The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"aa\", \"ba\", and \"aba\". Example 3: Input: s = \"aaa\" Output: 3 Explanation: The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\".   Constraints: 1 <= s.length <= 2000 s consists of lowercase English letters.",
        "733": "Given an array of integers arr, return true if and only if it is a valid mountain array. Recall that arr is a mountain array if and only if: arr.length >= 3 There exists some i with 0 < i < arr.length - 1 such that: arr[0] < arr[1] < ... < arr[i - 1] < arr[i]  arr[i] > arr[i + 1] > ... > arr[arr.length - 1]   Example 1: Input: arr = [2,1] Output: false Example 2: Input: arr = [3,5,5] Output: false Example 3: Input: arr = [0,3,2,1] Output: true   Constraints: 1 <= arr.length <= 104 0 <= arr[i] <= 104",
        "734": "A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where: s[i] == 'I' if perm[i] < perm[i + 1], and s[i] == 'D' if perm[i] > perm[i + 1]. Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.   Example 1: Input: s = \"IDID\" Output: [0,4,1,3,2] Example 2: Input: s = \"III\" Output: [0,1,2,3] Example 3: Input: s = \"DDI\" Output: [3,2,0,1]   Constraints: 1 <= s.length <= 105 s[i] is either 'I' or 'D'.",
        "735": "Given an array of strings words, return the smallest string that contains each string in words as a substring. If there are multiple valid strings of the smallest length, return any of them. You may assume that no string in words is a substring of another string in words.   Example 1: Input: words = [\"alex\",\"loves\",\"leetcode\"] Output: \"alexlovesleetcode\" Explanation: All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted. Example 2: Input: words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"] Output: \"gctaagttcatgcatc\"   Constraints: 1 <= words.length <= 12 1 <= words[i].length <= 20 words[i] consists of lowercase English letters. All the strings of words are unique.",
        "736": "You are given an array of n strings strs, all of the same length. The strings can be arranged such that there is one on each line, making a grid. For example, strs = [\"abc\", \"bce\", \"cae\"] can be arranged as follows: abc bce cae You want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted, while column 1 ('b', 'c', 'a') is not, so you would delete column 1. Return the number of columns that you will delete.   Example 1: Input: strs = [\"cba\",\"daf\",\"ghi\"] Output: 1 Explanation: The grid looks as follows:   cba   daf   ghi Columns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column. Example 2: Input: strs = [\"a\",\"b\"] Output: 0 Explanation: The grid looks as follows:   a   b Column 0 is the only column and is sorted, so you will not delete any columns. Example 3: Input: strs = [\"zyx\",\"wvu\",\"tsr\"] Output: 3 Explanation: The grid looks as follows:   zyx   wvu   tsr All 3 columns are not sorted, so you will delete all 3.   Constraints: n == strs.length 1 <= n <= 100 1 <= strs[i].length <= 1000 strs[i] consists of lowercase English letters.",
        "737": "You are given an integer array nums. In one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1. Return the minimum number of moves to make every value in nums unique. The test cases are generated so that the answer fits in a 32-bit integer.   Example 1: Input: nums = [1,2,2] Output: 1 Explanation: After 1 move, the array could be [1, 2, 3]. Example 2: Input: nums = [3,2,1,2,1,7] Output: 6 Explanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7]. It can be shown that it is impossible for the array to have all unique values with 5 or less moves.   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 105",
        "738": "Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.   Example 1: Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1] Output: true Explanation: We might do the following sequence: push(1), push(2), push(3), push(4), pop() -> 4, push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1 Example 2: Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2] Output: false Explanation: 1 cannot be popped before 2.   Constraints: 1 <= pushed.length <= 1000 0 <= pushed[i] <= 1000 All the elements of pushed are unique. popped.length == pushed.length popped is a permutation of pushed.",
        "739": "On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone. A stone can be removed if it shares either the same row or the same column as another stone that has not been removed. Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.   Example 1: Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]] Output: 5 Explanation: One way to remove 5 stones is as follows: 1. Remove stone [2,2] because it shares the same row as [2,1]. 2. Remove stone [2,1] because it shares the same column as [0,1]. 3. Remove stone [1,2] because it shares the same row as [1,0]. 4. Remove stone [1,0] because it shares the same column as [0,0]. 5. Remove stone [0,1] because it shares the same row as [0,0]. Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane. Example 2: Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]] Output: 3 Explanation: One way to make 3 moves is as follows: 1. Remove stone [2,2] because it shares the same row as [2,0]. 2. Remove stone [2,0] because it shares the same column as [0,0]. 3. Remove stone [0,2] because it shares the same row as [0,0]. Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane. Example 3: Input: stones = [[0,0]] Output: 0 Explanation: [0,0] is the only stone on the plane, so you cannot remove it.   Constraints: 1 <= stones.length <= 1000 0 <= xi, yi <= 104 No two stones are at the same coordinate point.",
        "740": "You start with an initial power of power, an initial score of 0, and a bag of tokens given as an integer array tokens, where each tokens[i] denotes the value of tokeni. Your goal is to maximize the total score by strategically playing these tokens. In one move, you can play an unplayed token in one of the two ways (but not both for the same token): Face-up: If your current power is at least tokens[i], you may play tokeni, losing tokens[i] power and gaining 1 score. Face-down: If your current score is at least 1, you may play tokeni, gaining tokens[i] power and losing 1 score. Return the maximum possible score you can achieve after playing any number of tokens.   Example 1: Input: tokens = [100], power = 50 Output: 0 Explanation: Since your score is 0 initially, you cannot play the token face-down. You also cannot play it face-up since your power (50) is less than tokens[0] (100). Example 2: Input: tokens = [200,100], power = 150 Output: 1 Explanation: Play token1 (100) face-up, reducing your power to 50 and increasing your score to 1. There is no need to play token0, since you cannot play it face-up to add to your score. The maximum score achievable is 1. Example 3: Input: tokens = [100,200,300,400], power = 200 Output: 2 Explanation: Play the tokens in this order to get a score of 2: Play token0 (100) face-up, reducing power to 100 and increasing score to 1. Play token3 (400) face-down, increasing power to 500 and reducing score to 0. Play token1 (200) face-up, reducing power to 300 and increasing score to 1. Play token2 (300) face-up, reducing power to 0 and increasing score to 2. The maximum score achievable is 2.   Constraints: 0 <= tokens.length <= 1000 0 <= tokens[i], power < 104",
        "741": "Given an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once. 24-hour times are formatted as \"HH:MM\", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59. Return the latest 24-hour time in \"HH:MM\" format. If no valid time can be made, return an empty string.   Example 1: Input: arr = [1,2,3,4] Output: \"23:41\" Explanation: The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest. Example 2: Input: arr = [5,5,5,5] Output: \"\" Explanation: There are no valid 24-hour times as \"55:55\" is not valid.   Constraints: arr.length == 4 0 <= arr[i] <= 9",
        "742": "You are given an integer array deck. There is a deck of cards where every card has a unique integer. The integer on the ith card is deck[i]. You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck. You will do the following steps repeatedly until all cards are revealed: Take the top card of the deck, reveal it, and take it out of the deck. If there are still cards in the deck then put the next top card of the deck at the bottom of the deck. If there are still unrevealed cards, go back to step 1. Otherwise, stop. Return an ordering of the deck that would reveal the cards in increasing order. Note that the first entry in the answer is considered to be the top of the deck.   Example 1: Input: deck = [17,13,11,2,3,5,7] Output: [2,13,3,11,5,17,7] Explanation:  We get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it. After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck. We reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13]. We reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11]. We reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17]. We reveal 7, and move 13 to the bottom.  The deck is now [11,17,13]. We reveal 11, and move 17 to the bottom.  The deck is now [13,17]. We reveal 13, and move 17 to the bottom.  The deck is now [17]. We reveal 17. Since all the cards revealed are in increasing order, the answer is correct. Example 2: Input: deck = [1,1000] Output: [1,1000]   Constraints: 1 <= deck.length <= 1000 1 <= deck[i] <= 106 All the values of deck are unique.",
        "743": "For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees. A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations. Given the roots of two binary trees root1 and root2, return true if the two trees are flip equivalent or false otherwise.   Example 1: Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7] Output: true Explanation: We flipped at nodes with values 1, 3, and 5. Example 2: Input: root1 = [], root2 = [] Output: true Example 3: Input: root1 = [], root2 = [1] Output: false   Constraints: The number of nodes in each tree is in the range [0, 100]. Each tree will have unique node values in the range [0, 99].",
        "744": "In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters. Given a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographically in this alien language.   Example 1: Input: words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\" Output: true Explanation: As 'h' comes before 'l' in this language, then the sequence is sorted. Example 2: Input: words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\" Output: false Explanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted. Example 3: Input: words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\" Output: false Explanation: The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" > \"app\", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (More info).   Constraints: 1 <= words.length <= 100 1 <= words[i].length <= 20 order.length == 26 All characters in words[i] and order are English lowercase letters.",
        "745": "You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height. You are given a collection of rods that can be welded together. For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6. Return the largest possible height of your billboard installation. If you cannot support the billboard, return 0.   Example 1: Input: rods = [1,2,3,6] Output: 6 Explanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6. Example 2: Input: rods = [1,2,3,4,5,6] Output: 10 Explanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10. Example 3: Input: rods = [1,2] Output: 0 Explanation: The billboard cannot be supported, so we return 0.   Constraints: 1 <= rods.length <= 20 1 <= rods[i] <= 1000 sum(rods[i]) <= 5000",
        "746": "There are 8 prison cells in a row and each cell is either occupied or vacant. Each day, whether the cell is occupied or vacant changes according to the following rules: If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied. Otherwise, it becomes vacant. Note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors. You are given an integer array cells where cells[i] == 1 if the ith cell is occupied and cells[i] == 0 if the ith cell is vacant, and you are given an integer n. Return the state of the prison after n days (i.e., n such changes described above).   Example 1: Input: cells = [0,1,0,1,1,0,0,1], n = 7 Output: [0,0,1,1,0,0,0,0] Explanation: The following table summarizes the state of the prison on each day: Day 0: [0, 1, 0, 1, 1, 0, 0, 1] Day 1: [0, 1, 1, 0, 0, 0, 0, 0] Day 2: [0, 0, 0, 0, 1, 1, 1, 0] Day 3: [0, 1, 1, 0, 0, 1, 0, 0] Day 4: [0, 0, 0, 0, 0, 1, 0, 0] Day 5: [0, 1, 1, 1, 0, 1, 0, 0] Day 6: [0, 0, 1, 0, 1, 1, 0, 0] Day 7: [0, 0, 1, 1, 0, 0, 0, 0] Example 2: Input: cells = [1,0,0,1,0,0,1,0], n = 1000000000 Output: [0,0,1,1,1,1,1,0]   Constraints: cells.length == 8 cells[i] is either 0 or 1. 1 <= n <= 109",
        "747": "Given the root of a binary tree, determine if it is a complete binary tree. In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.   Example 1: Input: root = [1,2,3,4,5,6] Output: true Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible. Example 2: Input: root = [1,2,3,4,5,null,7] Output: false Explanation: The node with value 7 isn't as far left as possible.   Constraints: The number of nodes in the tree is in the range [1, 100]. 1 <= Node.val <= 1000",
        "748": "An n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\\', or blank space ' '. These characters divide the square into contiguous regions. Given the grid grid represented as a string array, return the number of regions. Note that backslash characters are escaped, so a '\\' is represented as '\\\\'.   Example 1: Input: grid = [\" /\",\"/ \"] Output: 2 Example 2: Input: grid = [\" /\",\"  \"] Output: 1 Example 3: Input: grid = [\"/\\\\\",\"\\\\/\"] Output: 5 Explanation: Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\.   Constraints: n == grid.length == grid[i].length 1 <= n <= 30 grid[i][j] is either '/', '\\', or ' '.",
        "749": "You are given an integer array nums with the following properties: nums.length == 2 * n. nums contains n + 1 unique elements. Exactly one element of nums is repeated n times. Return the element that is repeated n times.   Example 1: Input: nums = [1,2,3,3] Output: 3 Example 2: Input: nums = [2,1,2,5,3,2] Output: 2 Example 3: Input: nums = [5,1,5,2,5,3,5,4] Output: 5   Constraints: 2 <= n <= 5000 nums.length == 2 * n 0 <= nums[i] <= 104 nums contains n + 1 unique elements and one of them is repeated exactly n times.",
        "750": "A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is j - i. Given an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.   Example 1: Input: nums = [6,0,8,2,1,5] Output: 4 Explanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5. Example 2: Input: nums = [9,8,1,0,1,9,4,0,4,1] Output: 7 Explanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.   Constraints: 2 <= nums.length <= 5 * 104 0 <= nums[i] <= 5 * 104",
        "751": "You are given an array of points in the X-Y plane points where points[i] = [xi, yi]. Return the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the X and Y axes. If there is not any such rectangle, return 0. Answers within 10-5 of the actual answer will be accepted.   Example 1: Input: points = [[1,2],[2,1],[1,0],[0,1]] Output: 2.00000 Explanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2. Example 2: Input: points = [[0,1],[2,1],[1,1],[1,0],[2,0]] Output: 1.00000 Explanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1. Example 3: Input: points = [[0,3],[1,2],[3,1],[1,3],[2,1]] Output: 0 Explanation: There is no possible rectangle to form from these points.   Constraints: 1 <= points.length <= 50 points[i].length == 2 0 <= xi, yi <= 4 * 104 All the given points are unique.",
        "752": "Given a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /). For example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3. When writing such an expression, we adhere to the following conventions: The division operator (/) returns rational numbers. There are no parentheses placed anywhere. We use the usual order of operations: multiplication and division happen before addition and subtraction. It is not allowed to use the unary negation operator (-). For example, \"x - x\" is a valid expression as it only uses subtraction, but \"-x + x\" is not because it uses negation. We would like to write an expression with the least number of operators such that the expression equals the given target. Return the least number of operators used.   Example 1: Input: x = 3, target = 19 Output: 5 Explanation: 3 * 3 + 3 * 3 + 3 / 3. The expression contains 5 operations. Example 2: Input: x = 5, target = 501 Output: 8 Explanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5. The expression contains 8 operations. Example 3: Input: x = 100, target = 100000000 Output: 3 Explanation: 100 * 100 * 100 * 100. The expression contains 3 operations.   Constraints: 2 <= x <= 100 1 <= target <= 2 * 108",
        "753": "A binary tree is uni-valued if every node in the tree has the same value. Given the root of a binary tree, return true if the given tree is uni-valued, or false otherwise.   Example 1: Input: root = [1,1,1,1,1,null,1] Output: true Example 2: Input: root = [2,2,2,5,2] Output: false   Constraints: The number of nodes in the tree is in the range [1, 100]. 0 <= Node.val < 100",
        "754": "Given a wordlist, we want to implement a spellchecker that converts a query word into a correct word. For a given query word, the spell checker handles two categories of spelling mistakes: Capitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist. Example: wordlist = [\"yellow\"], query = \"YellOw\": correct = \"yellow\" Example: wordlist = [\"Yellow\"], query = \"yellow\": correct = \"Yellow\" Example: wordlist = [\"yellow\"], query = \"yellow\": correct = \"yellow\" Vowel Errors: If after replacing the vowels ('a', 'e', 'i', 'o', 'u') of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist. Example: wordlist = [\"YellOw\"], query = \"yollow\": correct = \"YellOw\" Example: wordlist = [\"YellOw\"], query = \"yeellow\": correct = \"\" (no match) Example: wordlist = [\"YellOw\"], query = \"yllw\": correct = \"\" (no match) In addition, the spell checker operates under the following precedence rules: When the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back. When the query matches a word up to capitlization, you should return the first such match in the wordlist. When the query matches a word up to vowel errors, you should return the first such match in the wordlist. If the query has no matches in the wordlist, you should return the empty string. Given some queries, return a list of words answer, where answer[i] is the correct word for query = queries[i].   Example 1: Input: wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"] Output: [\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"] Example 2: Input: wordlist = [\"yellow\"], queries = [\"YellOw\"] Output: [\"yellow\"]   Constraints: 1 <= wordlist.length, queries.length <= 5000 1 <= wordlist[i].length, queries[i].length <= 7 wordlist[i] and queries[i] consist only of only English letters.",
        "755": "Given two integers n and k, return an array of all the integers of length n where the difference between every two consecutive digits is k. You may return the answer in any order. Note that the integers should not have leading zeros. Integers as 02 and 043 are not allowed.   Example 1: Input: n = 3, k = 7 Output: [181,292,707,818,929] Explanation: Note that 070 is not a valid number, because it has leading zeroes. Example 2: Input: n = 2, k = 1 Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]   Constraints: 2 <= n <= 9 0 <= k <= 9",
        "756": "You are given the root of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children. Return the minimum number of cameras needed to monitor all nodes of the tree.   Example 1: Input: root = [0,0,null,0,0] Output: 1 Explanation: One camera is enough to monitor all nodes if placed as shown. Example 2: Input: root = [0,0,null,0,null,0,null,null,0] Output: 2 Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.   Constraints: The number of nodes in the tree is in the range [1, 1000]. Node.val == 0",
        "757": "Given an array of integers arr, sort the array by performing a series of pancake flips. In one pancake flip we do the following steps: Choose an integer k where 1 <= k <= arr.length. Reverse the sub-array arr[0...k-1] (0-indexed). For example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3. Return an array of the k-values corresponding to a sequence of pancake flips that sort arr. Any valid answer that sorts the array within 10 * arr.length flips will be judged as correct.   Example 1: Input: arr = [3,2,4,1] Output: [4,2,4,3] Explanation:  We perform 4 pancake flips, with k values 4, 2, 4, and 3. Starting state: arr = [3, 2, 4, 1] After 1st flip (k = 4): arr = [1, 4, 2, 3] After 2nd flip (k = 2): arr = [4, 1, 2, 3] After 3rd flip (k = 4): arr = [3, 2, 1, 4] After 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted. Example 2: Input: arr = [1,2,3] Output: [] Explanation: The input is already sorted, so there is no need to flip anything. Note that other answers, such as [3, 3], would also be accepted.   Constraints: 1 <= arr.length <= 100 1 <= arr[i] <= arr.length All integers in arr are unique (i.e. arr is a permutation of the integers from 1 to arr.length).",
        "758": "Given three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound. An integer is powerful if it can be represented as xi + yj for some integers i >= 0 and j >= 0. You may return the answer in any order. In your answer, each value should occur at most once.   Example 1: Input: x = 2, y = 3, bound = 10 Output: [2,3,4,5,7,9,10] Explanation: 2 = 20 + 30 3 = 21 + 30 4 = 20 + 31 5 = 21 + 31 7 = 22 + 31 9 = 23 + 30 10 = 20 + 32 Example 2: Input: x = 3, y = 5, bound = 15 Output: [2,4,6,8,10,14]   Constraints: 1 <= x, y <= 100 0 <= bound <= 106",
        "759": "You are given the root of a binary tree with n nodes, where each node is uniquely assigned a value from 1 to n. You are also given a sequence of n values voyage, which is the desired pre-order traversal of the binary tree. Any node in the binary tree can be flipped by swapping its left and right subtrees. For example, flipping node 1 will have the following effect: Flip the smallest number of nodes so that the pre-order traversal of the tree matches voyage. Return a list of the values of all flipped nodes. You may return the answer in any order. If it is impossible to flip the nodes in the tree to make the pre-order traversal match voyage, return the list [-1].   Example 1: Input: root = [1,2], voyage = [2,1] Output: [-1] Explanation: It is impossible to flip the nodes such that the pre-order traversal matches voyage. Example 2: Input: root = [1,2,3], voyage = [1,3,2] Output: [1] Explanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage. Example 3: Input: root = [1,2,3], voyage = [1,2,3] Output: [] Explanation: The tree's pre-order traversal already matches voyage, so no nodes need to be flipped.   Constraints: The number of nodes in the tree is n. n == voyage.length 1 <= n <= 100 1 <= Node.val, voyage[i] <= n All the values in the tree are unique. All the values in voyage are unique.",
        "760": "Given two strings s and t, each of which represents a non-negative rational number, return true if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number. A rational number can be represented using up to three parts: <IntegerPart>, <NonRepeatingPart>, and a <RepeatingPart>. The number will be represented in one of the following three ways: <IntegerPart> For example, 12, 0, and 123. <IntegerPart><.><NonRepeatingPart> For example, 0.5, 1., 2.12, and 123.0001. <IntegerPart><.><NonRepeatingPart><(><RepeatingPart><)> For example, 0.1(6), 1.(9), 123.00(1212). The repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example: 1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66).   Example 1: Input: s = \"0.(52)\", t = \"0.5(25)\" Output: true Explanation: Because \"0.(52)\" represents 0.52525252..., and \"0.5(25)\" represents 0.52525252525..... , the strings represent the same number. Example 2: Input: s = \"0.1666(6)\", t = \"0.166(66)\" Output: true Example 3: Input: s = \"0.9(9)\", t = \"1.\" Output: true Explanation: \"0.9(9)\" represents 0.999999999... repeated forever, which equals 1.  [See this link for an explanation.] \"1.\" represents the number 1, which is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\".   Constraints: Each part consists only of digits. The <IntegerPart> does not have leading zeros (except for the zero itself). 1 <= <IntegerPart>.length <= 4 0 <= <NonRepeatingPart>.length <= 4 1 <= <RepeatingPart>.length <= 4",
        "761": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0). The distance between two points on the X-Y plane is the Euclidean distance (i.e., √(x1 - x2)2 + (y1 - y2)2). You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).   Example 1: Input: points = [[1,3],[-2,2]], k = 1 Output: [[-2,2]] Explanation: The distance between (1, 3) and the origin is sqrt(10). The distance between (-2, 2) and the origin is sqrt(8). Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin. We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]]. Example 2: Input: points = [[3,3],[5,-1],[-2,4]], k = 2 Output: [[3,3],[-2,4]] Explanation: The answer [[-2,4],[3,3]] would also be accepted.   Constraints: 1 <= k <= points.length <= 104 -104 <= xi, yi <= 104",
        "762": "Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k. A subarray is a contiguous part of an array.   Example 1: Input: nums = [4,5,0,-2,-3,1], k = 5 Output: 7 Explanation: There are 7 subarrays with a sum divisible by k = 5: [4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3] Example 2: Input: nums = [5], k = 9 Output: 0   Constraints: 1 <= nums.length <= 3 * 104 -104 <= nums[i] <= 104 2 <= k <= 104",
        "763": "You are given an integer array arr. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called odd-numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even-numbered jumps. Note that the jumps are numbered, not the indices. You may jump forward from index i to index j (with i < j) in the following way: During odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the index j such that arr[i] <= arr[j] and arr[j] is the smallest possible value. If there are multiple such indices j, you can only jump to the smallest such index j. During even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the index j such that arr[i] >= arr[j] and arr[j] is the largest possible value. If there are multiple such indices j, you can only jump to the smallest such index j. It may be the case that for some index i, there are no legal jumps. A starting index is good if, starting from that index, you can reach the end of the array (index arr.length - 1) by jumping some number of times (possibly 0 or more than once). Return the number of good starting indices.   Example 1: Input: arr = [10,13,12,14,15] Output: 2 Explanation:  From starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more. From starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more. From starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end. From starting index i = 4, we have reached the end already. In total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of jumps. Example 2: Input: arr = [2,3,1,1,4] Output: 3 Explanation:  From starting index i = 0, we make jumps to i = 1, i = 2, i = 3: During our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0]. During our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3 During our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2]. We can't jump from i = 3 to i = 4, so the starting index i = 0 is not good. In a similar manner, we can deduce that: From starting index i = 1, we jump to i = 4, so we reach the end. From starting index i = 2, we jump to i = 3, and then we can't jump anymore. From starting index i = 3, we jump to i = 4, so we reach the end. From starting index i = 4, we are already at the end. In total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some number of jumps. Example 3: Input: arr = [5,1,3,4,2] Output: 3 Explanation: We can reach the end from starting indices 1, 2, and 4.   Constraints: 1 <= arr.length <= 2 * 104 0 <= arr[i] < 105",
        "764": "Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.   Example 1: Input: nums = [-4,-1,0,3,10] Output: [0,1,9,16,100] Explanation: After squaring, the array becomes [16,1,0,9,100]. After sorting, it becomes [0,1,9,16,100]. Example 2: Input: nums = [-7,-3,2,3,11] Output: [4,9,9,49,121]   Constraints: 1 <= nums.length <= 104 -104 <= nums[i] <= 104 nums is sorted in non-decreasing order.   Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?",
        "765": "Given an integer array arr, return the length of a maximum size turbulent subarray of arr. A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray. More formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if: For i <= k < j: arr[k] > arr[k + 1] when k is odd, and arr[k] < arr[k + 1] when k is even. Or, for i <= k < j: arr[k] > arr[k + 1] when k is even, and arr[k] < arr[k + 1] when k is odd.   Example 1: Input: arr = [9,4,2,10,7,8,8,1,9] Output: 5 Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5] Example 2: Input: arr = [4,8,12,16] Output: 2 Example 3: Input: arr = [100] Output: 1   Constraints: 1 <= arr.length <= 4 * 104 0 <= arr[i] <= 109",
        "766": "You are given the root of a binary tree with n nodes where each node in the tree has node.val coins. There are n coins in total throughout the whole tree. In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent. Return the minimum number of moves required to make every node have exactly one coin.   Example 1: Input: root = [3,0,0] Output: 2 Explanation: From the root of the tree, we move one coin to its left child, and one coin to its right child. Example 2: Input: root = [0,3,0] Output: 3 Explanation: From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child.   Constraints: The number of nodes in the tree is n. 1 <= n <= 100 0 <= Node.val <= n The sum of all Node.val is n.",
        "767": "You are given an m x n integer array grid where grid[i][j] could be: 1 representing the starting square. There is exactly one starting square. 2 representing the ending square. There is exactly one ending square. 0 representing empty squares we can walk over. -1 representing obstacles that we cannot walk over. Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.   Example 1: Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]] Output: 2 Explanation: We have the following two paths:  1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2) 2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2) Example 2: Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]] Output: 4 Explanation: We have the following four paths:  1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3) 2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3) 3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3) 4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3) Example 3: Input: grid = [[0,1],[2,0]] Output: 0 Explanation: There is no path that walks over every empty square exactly once. Note that the starting and ending square can be anywhere in the grid.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 20 1 <= m * n <= 20 -1 <= grid[i][j] <= 2 There is exactly one starting cell and one ending cell.",
        "768": "Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp. Implement the TimeMap class: TimeMap() Initializes the object of the data structure. void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp. String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns \"\".   Example 1: Input [\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"] [[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]] Output [null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]  Explanation TimeMap timeMap = new TimeMap(); timeMap.set(\"foo\", \"bar\", 1);  // store the key \"foo\" and value \"bar\" along with timestamp = 1. timeMap.get(\"foo\", 1);         // return \"bar\" timeMap.get(\"foo\", 3);         // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\". timeMap.set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"bar2\" along with timestamp = 4. timeMap.get(\"foo\", 4);         // return \"bar2\" timeMap.get(\"foo\", 5);         // return \"bar2\"   Constraints: 1 <= key.length, value.length <= 100 key and value consist of lowercase English letters and digits. 1 <= timestamp <= 107 All the timestamps timestamp of set are strictly increasing. At most 2 * 105 calls will be made to set and get.",
        "769": "Given an integer array nums, return the number of AND triples. An AND triple is a triple of indices (i, j, k) such that: 0 <= i < nums.length 0 <= j < nums.length 0 <= k < nums.length nums[i] & nums[j] & nums[k] == 0, where & represents the bitwise-AND operator.   Example 1: Input: nums = [2,1,3] Output: 12 Explanation: We could choose the following i, j, k triples: (i=0, j=0, k=1) : 2 & 2 & 1 (i=0, j=1, k=0) : 2 & 1 & 2 (i=0, j=1, k=1) : 2 & 1 & 1 (i=0, j=1, k=2) : 2 & 1 & 3 (i=0, j=2, k=1) : 2 & 3 & 1 (i=1, j=0, k=0) : 1 & 2 & 2 (i=1, j=0, k=1) : 1 & 2 & 1 (i=1, j=0, k=2) : 1 & 2 & 3 (i=1, j=1, k=0) : 1 & 1 & 2 (i=1, j=2, k=0) : 1 & 3 & 2 (i=2, j=0, k=1) : 3 & 2 & 1 (i=2, j=1, k=0) : 3 & 1 & 2 Example 2: Input: nums = [0,0,0] Output: 27   Constraints: 1 <= nums.length <= 1000 0 <= nums[i] < 216",
        "770": "You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array days. Each day is an integer from 1 to 365. Train tickets are sold in three different ways: a 1-day pass is sold for costs[0] dollars, a 7-day pass is sold for costs[1] dollars, and a 30-day pass is sold for costs[2] dollars. The passes allow that many days of consecutive travel. For example, if we get a 7-day pass on day 2, then we can travel for 7 days: 2, 3, 4, 5, 6, 7, and 8. Return the minimum number of dollars you need to travel every day in the given list of days.   Example 1: Input: days = [1,4,6,7,8,20], costs = [2,7,15] Output: 11 Explanation: For example, here is one way to buy passes that lets you travel your travel plan: On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1. On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9. On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20. In total, you spent $11 and covered all the days of your travel. Example 2: Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15] Output: 17 Explanation: For example, here is one way to buy passes that lets you travel your travel plan: On day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30. On day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31. In total, you spent $17 and covered all the days of your travel.   Constraints: 1 <= days.length <= 365 1 <= days[i] <= 365 days is in strictly increasing order. costs.length == 3 1 <= costs[i] <= 1000",
        "771": "Given two integers a and b, return any string s such that: s has length a + b and contains exactly a 'a' letters, and exactly b 'b' letters, The substring 'aaa' does not occur in s, and The substring 'bbb' does not occur in s.   Example 1: Input: a = 1, b = 2 Output: \"abb\" Explanation: \"abb\", \"bab\" and \"bba\" are all correct answers. Example 2: Input: a = 4, b = 1 Output: \"aabaa\"   Constraints: 0 <= a, b <= 100 It is guaranteed such an s exists for the given a and b.",
        "772": "You are given an integer array nums and an array queries where queries[i] = [vali, indexi]. For each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums. Return an integer array answer where answer[i] is the answer to the ith query.   Example 1: Input: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]] Output: [8,6,2,4] Explanation: At the beginning, the array is [1,2,3,4]. After adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8. After adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6. After adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2. After adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4. Example 2: Input: nums = [1], queries = [[4,0]] Output: [0]   Constraints: 1 <= nums.length <= 104 -104 <= nums[i] <= 104 1 <= queries.length <= 104 -104 <= vali <= 104 0 <= indexi < nums.length",
        "773": "You are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters 'a' to 'z'. Return the lexicographically smallest string that starts at a leaf of this tree and ends at the root. As a reminder, any shorter prefix of a string is lexicographically smaller. For example, \"ab\" is lexicographically smaller than \"aba\". A leaf of a node is a node that has no children.   Example 1: Input: root = [0,1,2,3,4,3,4] Output: \"dba\" Example 2: Input: root = [25,1,3,1,3,0,2] Output: \"adz\" Example 3: Input: root = [2,2,1,null,1,0,null,0] Output: \"abc\"   Constraints: The number of nodes in the tree is in the range [1, 8500]. 0 <= Node.val <= 25",
        "774": "The array-form of an integer num is an array representing its digits in left to right order. For example, for num = 1321, the array form is [1,3,2,1]. Given num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.   Example 1: Input: num = [1,2,0,0], k = 34 Output: [1,2,3,4] Explanation: 1200 + 34 = 1234 Example 2: Input: num = [2,7,4], k = 181 Output: [4,5,5] Explanation: 274 + 181 = 455 Example 3: Input: num = [2,1,5], k = 806 Output: [1,0,2,1] Explanation: 215 + 806 = 1021   Constraints: 1 <= num.length <= 104 0 <= num[i] <= 9 num does not contain any leading zeros except for the zero itself. 1 <= k <= 104",
        "775": "You are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: \"xi==yi\" or \"xi!=yi\".Here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names. Return true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.   Example 1: Input: equations = [\"a==b\",\"b!=a\"] Output: false Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second. There is no way to assign the variables to satisfy both equations. Example 2: Input: equations = [\"b==a\",\"a==b\"] Output: true Explanation: We could assign a = 1 and b = 1 to satisfy both equations.   Constraints: 1 <= equations.length <= 500 equations[i].length == 4 equations[i][0] is a lowercase letter. equations[i][1] is either '=' or '!'. equations[i][2] is '='. equations[i][3] is a lowercase letter.",
        "776": "There is a broken calculator that has the integer startValue on its display initially. In one operation, you can: multiply the number on display by 2, or subtract 1 from the number on display. Given two integers startValue and target, return the minimum number of operations needed to display target on the calculator.   Example 1: Input: startValue = 2, target = 3 Output: 2 Explanation: Use double operation and then decrement operation {2 -> 4 -> 3}. Example 2: Input: startValue = 5, target = 8 Output: 2 Explanation: Use decrement and then double {5 -> 4 -> 8}. Example 3: Input: startValue = 3, target = 10 Output: 3 Explanation: Use double, decrement and double {3 -> 6 -> 5 -> 10}.   Constraints: 1 <= startValue, target <= 109",
        "777": "Given an integer array nums and an integer k, return the number of good subarrays of nums. A good array is an array where the number of different integers in that array is exactly k. For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3. A subarray is a contiguous part of an array.   Example 1: Input: nums = [1,2,1,2,3], k = 2 Output: 7 Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2] Example 2: Input: nums = [1,2,1,3,4], k = 3 Output: 3 Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].   Constraints: 1 <= nums.length <= 2 * 104 1 <= nums[i], k <= nums.length",
        "778": "Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise. Two nodes of a binary tree are cousins if they have the same depth with different parents. Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.   Example 1: Input: root = [1,2,3,4], x = 4, y = 3 Output: false Example 2: Input: root = [1,2,3,null,4,null,5], x = 5, y = 4 Output: true Example 3: Input: root = [1,2,3,null,4], x = 2, y = 3 Output: false   Constraints: The number of nodes in the tree is in the range [2, 100]. 1 <= Node.val <= 100 Each node has a unique value. x != y x and y are exist in the tree.",
        "779": "You are given an m x n grid where each cell can have one of three values: 0 representing an empty cell, 1 representing a fresh orange, or 2 representing a rotten orange. Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.   Example 1: Input: grid = [[2,1,1],[1,1,0],[0,1,1]] Output: 4 Example 2: Input: grid = [[2,1,1],[0,1,1],[1,0,1]] Output: -1 Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally. Example 3: Input: grid = [[0,2]] Output: 0 Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 10 grid[i][j] is 0, 1, or 2.",
        "780": "You are given a binary array nums and an integer k. A k-bit flip is choosing a subarray of length k from nums and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0. Return the minimum number of k-bit flips required so that there is no 0 in the array. If it is not possible, return -1. A subarray is a contiguous part of an array.   Example 1: Input: nums = [0,1,0], k = 1 Output: 2 Explanation: Flip nums[0], then flip nums[2]. Example 2: Input: nums = [1,1,0], k = 2 Output: -1 Explanation: No matter how we flip subarrays of size 2, we cannot make the array become [1,1,1]. Example 3: Input: nums = [0,0,0,1,0,1,1,0], k = 3 Output: 3 Explanation:  Flip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0] Flip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0] Flip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]   Constraints: 1 <= nums.length <= 105 1 <= k <= nums.length",
        "781": "An array is squareful if the sum of every pair of adjacent elements is a perfect square. Given an integer array nums, return the number of permutations of nums that are squareful. Two permutations perm1 and perm2 are different if there is some index i such that perm1[i] != perm2[i].   Example 1: Input: nums = [1,17,8] Output: 2 Explanation: [1,8,17] and [17,8,1] are the valid permutations. Example 2: Input: nums = [2,2,2] Output: 1   Constraints: 1 <= nums.length <= 12 0 <= nums[i] <= 109",
        "782": "In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge. If the town judge exists, then: The town judge trusts nobody. Everybody (except for the town judge) trusts the town judge. There is exactly one person that satisfies properties 1 and 2. You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi. If a trust relationship does not exist in trust array, then such a trust relationship does not exist. Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.   Example 1: Input: n = 2, trust = [[1,2]] Output: 2 Example 2: Input: n = 3, trust = [[1,3],[2,3]] Output: 3 Example 3: Input: n = 3, trust = [[1,3],[2,3],[3,1]] Output: -1   Constraints: 1 <= n <= 1000 0 <= trust.length <= 104 trust[i].length == 2 All the pairs of trust are unique. ai != bi 1 <= ai, bi <= n",
        "783": "A maximum tree is a tree where every node has a value greater than any other value in its subtree. You are given the root of a maximum binary tree and an integer val. Just as in the previous problem, the given tree was constructed from a list a (root = Construct(a)) recursively with the following Construct(a) routine: If a is empty, return null. Otherwise, let a[i] be the largest element of a. Create a root node with the value a[i]. The left child of root will be Construct([a[0], a[1], ..., a[i - 1]]). The right child of root will be Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]]). Return root. Note that we were not given a directly, only a root node root = Construct(a). Suppose b is a copy of a with the value val appended to it. It is guaranteed that b has unique values. Return Construct(b).   Example 1: Input: root = [4,1,3,null,null,2], val = 5 Output: [5,4,null,1,3,null,null,2] Explanation: a = [1,4,2,3], b = [1,4,2,3,5] Example 2: Input: root = [5,2,4,null,1], val = 3 Output: [5,2,4,null,1,null,3] Explanation: a = [2,1,5,4], b = [2,1,5,4,3] Example 3: Input: root = [5,2,3,null,1], val = 4 Output: [5,2,4,null,1,3] Explanation: a = [2,1,5,3], b = [2,1,5,3,4]   Constraints: The number of nodes in the tree is in the range [1, 100]. 1 <= Node.val <= 100 All the values of the tree are unique. 1 <= val <= 100",
        "784": "There are n piles of stones arranged in a row. The ith pile has stones[i] stones. A move consists of merging exactly k consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these k piles. Return the minimum cost to merge all piles of stones into one pile. If it is impossible, return -1.   Example 1: Input: stones = [3,2,4,1], k = 2 Output: 20 Explanation: We start with [3, 2, 4, 1]. We merge [3, 2] for a cost of 5, and we are left with [5, 4, 1]. We merge [4, 1] for a cost of 5, and we are left with [5, 5]. We merge [5, 5] for a cost of 10, and we are left with [10]. The total cost was 20, and this is the minimum possible. Example 2: Input: stones = [3,2,4,1], k = 3 Output: -1 Explanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible. Example 3: Input: stones = [3,5,1,2,6], k = 3 Output: 25 Explanation: We start with [3, 5, 1, 2, 6]. We merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6]. We merge [3, 8, 6] for a cost of 17, and we are left with [17]. The total cost was 25, and this is the minimum possible.   Constraints: n == stones.length 1 <= n <= 30 1 <= stones[i] <= 100 2 <= k <= 30",
        "785": "There is a 2D grid of size n x n where each cell of this grid has a lamp that is initially turned off. You are given a 2D array of lamp positions lamps, where lamps[i] = [rowi, coli] indicates that the lamp at grid[rowi][coli] is turned on. Even if the same lamp is listed more than once, it is turned on. When a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal. You are also given another 2D array queries, where queries[j] = [rowj, colj]. For the jth query, determine whether grid[rowj][colj] is illuminated or not. After answering the jth query, turn off the lamp at grid[rowj][colj] and its 8 adjacent lamps if they exist. A lamp is adjacent if its cell shares either a side or corner with grid[rowj][colj]. Return an array of integers ans, where ans[j] should be 1 if the cell in the jth query was illuminated, or 0 if the lamp was not.   Example 1: Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]] Output: [1,0] Explanation: We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4]. The 0th query asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square. The 1st query asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle. Example 2: Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]] Output: [1,1] Example 3: Input: n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]] Output: [1,1,0]   Constraints: 1 <= n <= 109 0 <= lamps.length <= 20000 0 <= queries.length <= 20000 lamps[i].length == 2 0 <= rowi, coli < n queries[j].length == 2 0 <= rowj, colj < n",
        "786": "Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.   Example 1: Input: words = [\"bella\",\"label\",\"roller\"] Output: [\"e\",\"l\",\"l\"] Example 2: Input: words = [\"cool\",\"lock\",\"cook\"] Output: [\"c\",\"o\"]   Constraints: 1 <= words.length <= 100 1 <= words[i].length <= 100 words[i] consists of lowercase English letters.",
        "787": "Given a string s, determine if it is valid. A string s is valid if, starting with an empty string t = \"\", you can transform t into s after performing the following operation any number of times: Insert string \"abc\" into any position in t. More formally, t becomes tleft + \"abc\" + tright, where t == tleft + tright. Note that tleft and tright may be empty. Return true if s is a valid string, otherwise, return false.   Example 1: Input: s = \"aabcbc\" Output: true Explanation: \"\" -> \"abc\" -> \"aabcbc\" Thus, \"aabcbc\" is valid. Example 2: Input: s = \"abcabcababcc\" Output: true Explanation: \"\" -> \"abc\" -> \"abcabc\" -> \"abcabcabc\" -> \"abcabcababcc\" Thus, \"abcabcababcc\" is valid. Example 3: Input: s = \"abccba\" Output: false Explanation: It is impossible to get \"abccba\" using the operation.   Constraints: 1 <= s.length <= 2 * 104 s consists of letters 'a', 'b', and 'c'",
        "788": "Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.   Example 1: Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2 Output: 6 Explanation: [1,1,1,0,0,1,1,1,1,1,1] Bolded numbers were flipped from 0 to 1. The longest subarray is underlined. Example 2: Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3 Output: 10 Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1] Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.   Constraints: 1 <= nums.length <= 105 nums[i] is either 0 or 1. 0 <= k <= nums.length",
        "789": "Given an integer array nums and an integer k, modify the array in the following way: choose an index i and replace nums[i] with -nums[i]. You should apply this process exactly k times. You may choose the same index i multiple times. Return the largest possible sum of the array after modifying it in this way.   Example 1: Input: nums = [4,2,3], k = 1 Output: 5 Explanation: Choose index 1 and nums becomes [4,-2,3]. Example 2: Input: nums = [3,-1,0,2], k = 3 Output: 6 Explanation: Choose indices (1, 2, 2) and nums becomes [3,1,0,2]. Example 3: Input: nums = [2,-3,-1,5,-4], k = 2 Output: 13 Explanation: Choose indices (1, 4) and nums becomes [2,3,-1,5,4].   Constraints: 1 <= nums.length <= 104 -100 <= nums[i] <= 100 1 <= k <= 104",
        "790": "The factorial of a positive integer n is the product of all positive integers less than or equal to n. For example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1. We make a clumsy factorial using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply '*', divide '/', add '+', and subtract '-' in this order. For example, clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1. However, these operations are still applied using the usual order of operations of arithmetic. We do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right. Additionally, the division that we use is floor division such that 10 * 9 / 8 = 90 / 8 = 11. Given an integer n, return the clumsy factorial of n.   Example 1: Input: n = 4 Output: 7 Explanation: 7 = 4 * 3 / 2 + 1 Example 2: Input: n = 10 Output: 12 Explanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1   Constraints: 1 <= n <= 104",
        "791": "In a row of dominoes, tops[i] and bottoms[i] represent the top and bottom halves of the ith domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.) We may rotate the ith domino, so that tops[i] and bottoms[i] swap values. Return the minimum number of rotations so that all the values in tops are the same, or all the values in bottoms are the same. If it cannot be done, return -1.   Example 1: Input: tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2] Output: 2 Explanation:  The first figure represents the dominoes as given by tops and bottoms: before we do any rotations. If we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure. Example 2: Input: tops = [3,5,1,2,3], bottoms = [3,6,3,3,4] Output: -1 Explanation:  In this case, it is not possible to rotate the dominoes to make one row of values equal.   Constraints: 2 <= tops.length <= 2 * 104 bottoms.length == tops.length 1 <= tops[i], bottoms[i] <= 6",
        "792": "Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root. It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases. A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val. A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.   Example 1: Input: preorder = [8,5,1,7,10,12] Output: [8,5,10,1,7,null,12] Example 2: Input: preorder = [1,3] Output: [1,null,3]   Constraints: 1 <= preorder.length <= 100 1 <= preorder[i] <= 1000 All the values of preorder are unique.",
        "793": "The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation. For example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2. Given an integer n, return its complement.   Example 1: Input: n = 5 Output: 2 Explanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10. Example 2: Input: n = 7 Output: 0 Explanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10. Example 3: Input: n = 10 Output: 5 Explanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.   Constraints: 0 <= n < 109   Note: This question is the same as 476: https://leetcode.com/problems/number-complement/",
        "794": "You are given a list of songs where the ith song has a duration of time[i] seconds. Return the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.   Example 1: Input: time = [30,20,150,100,40] Output: 3 Explanation: Three pairs have a total duration divisible by 60: (time[0] = 30, time[2] = 150): total duration 180 (time[1] = 20, time[3] = 100): total duration 120 (time[1] = 20, time[4] = 40): total duration 60 Example 2: Input: time = [60,60,60] Output: 3 Explanation: All three pairs have a total duration of 120, which is divisible by 60.   Constraints: 1 <= time.length <= 6 * 104 1 <= time[i] <= 500",
        "795": "A conveyor belt has packages that must be shipped from one port to another within days days. The ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship. Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.   Example 1: Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5 Output: 15 Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this: 1st day: 1, 2, 3, 4, 5 2nd day: 6, 7 3rd day: 8 4th day: 9 5th day: 10  Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. Example 2: Input: weights = [3,2,2,4,1,4], days = 3 Output: 6 Explanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this: 1st day: 3, 2 2nd day: 2, 4 3rd day: 1, 4 Example 3: Input: weights = [1,2,3,1,1], days = 4 Output: 3 Explanation: 1st day: 1 2nd day: 2 3rd day: 3 4th day: 1, 1   Constraints: 1 <= days <= weights.length <= 5 * 104 1 <= weights[i] <= 500",
        "796": "Given an integer n, return the number of positive integers in the range [1, n] that have at least one repeated digit.   Example 1: Input: n = 20 Output: 1 Explanation: The only positive number (<= 20) with at least 1 repeated digit is 11. Example 2: Input: n = 100 Output: 10 Explanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100. Example 3: Input: n = 1000 Output: 262   Constraints: 1 <= n <= 109",
        "797": "Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums. Formally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])   Example 1: Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1] Output: true Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1 Example 2: Input: arr = [0,2,1,-6,6,7,9,-1,2,0,1] Output: false Example 3: Input: arr = [3,3,6,5,-2,2,5,1,-9,4] Output: true Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4   Constraints: 3 <= arr.length <= 5 * 104 -104 <= arr[i] <= 104",
        "798": "You are given an integer array values where values[i] represents the value of the ith sightseeing spot. Two sightseeing spots i and j have a distance j - i between them. The score of a pair (i < j) of sightseeing spots is values[i] + values[j] + i - j: the sum of the values of the sightseeing spots, minus the distance between them. Return the maximum score of a pair of sightseeing spots.   Example 1: Input: values = [8,1,5,2,6] Output: 11 Explanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11 Example 2: Input: values = [1,2] Output: 2   Constraints: 2 <= values.length <= 5 * 104 1 <= values[i] <= 1000",
        "799": "Given a positive integer k, you need to find the length of the smallest positive integer n such that n is divisible by k, and n only contains the digit 1. Return the length of n. If there is no such n, return -1. Note: n may not fit in a 64-bit signed integer.   Example 1: Input: k = 1 Output: 1 Explanation: The smallest answer is n = 1, which has length 1. Example 2: Input: k = 2 Output: -1 Explanation: There is no such positive integer n divisible by 2. Example 3: Input: k = 3 Output: 3 Explanation: The smallest answer is n = 111, which has length 3.   Constraints: 1 <= k <= 105",
        "800": "Given a binary string s and a positive integer n, return true if the binary representation of all the integers in the range [1, n] are substrings of s, or false otherwise. A substring is a contiguous sequence of characters within a string.   Example 1: Input: s = \"0110\", n = 3 Output: true Example 2: Input: s = \"0110\", n = 4 Output: false   Constraints: 1 <= s.length <= 1000 s[i] is either '0' or '1'. 1 <= n <= 109",
        "801": "Given an integer n, return a binary string representing its representation in base -2. Note that the returned string should not have leading zeros unless the string is \"0\".   Example 1: Input: n = 2 Output: \"110\" Explantion: (-2)2 + (-2)1 = 2 Example 2: Input: n = 3 Output: \"111\" Explantion: (-2)2 + (-2)1 + (-2)0 = 3 Example 3: Input: n = 4 Output: \"100\" Explantion: (-2)2 = 4   Constraints: 0 <= n <= 109",
        "802": "You are given a binary array nums (0-indexed). We define xi as the number whose binary representation is the subarray nums[0..i] (from most-significant-bit to least-significant-bit). For example, if nums = [1,0,1], then x0 = 1, x1 = 2, and x2 = 5. Return an array of booleans answer where answer[i] is true if xi is divisible by 5.   Example 1: Input: nums = [0,1,1] Output: [true,false,false] Explanation: The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10. Only the first number is divisible by 5, so answer[0] is true. Example 2: Input: nums = [1,1,1] Output: [false,false,false]   Constraints: 1 <= nums.length <= 105 nums[i] is either 0 or 1.",
        "803": "You are given the head of a linked list with n nodes. For each node in the list, find the value of the next greater node. That is, for each node, find the value of the first node that is next to it and has a strictly larger value than it. Return an integer array answer where answer[i] is the value of the next greater node of the ith node (1-indexed). If the ith node does not have a next greater node, set answer[i] = 0.   Example 1: Input: head = [2,1,5] Output: [5,5,0] Example 2: Input: head = [2,7,4,3,5] Output: [7,0,5,5,0]   Constraints: The number of nodes in the list is n. 1 <= n <= 104 1 <= Node.val <= 109",
        "804": "You are given an m x n binary matrix grid, where 0 represents a sea cell and 1 represents a land cell. A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid. Return the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.   Example 1: Input: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]] Output: 3 Explanation: There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary. Example 2: Input: grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]] Output: 0 Explanation: All 1s are either on the boundary or can reach the boundary.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 500 grid[i][j] is either 0 or 1.",
        "805": "A valid parentheses string is either empty \"\", \"(\" + A + \")\", or A + B, where A and B are valid parentheses strings, and + represents string concatenation. For example, \"\", \"()\", \"(())()\", and \"(()(()))\" are all valid parentheses strings. A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings. Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings. Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.   Example 1: Input: s = \"(()())(())\" Output: \"()()()\" Explanation:  The input string is \"(()())(())\", with primitive decomposition \"(()())\" + \"(())\". After removing outer parentheses of each part, this is \"()()\" + \"()\" = \"()()()\". Example 2: Input: s = \"(()())(())(()(()))\" Output: \"()()()()(())\" Explanation:  The input string is \"(()())(())(()(()))\", with primitive decomposition \"(()())\" + \"(())\" + \"(()(()))\". After removing outer parentheses of each part, this is \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\". Example 3: Input: s = \"()()\" Output: \"\" Explanation:  The input string is \"()()\", with primitive decomposition \"()\" + \"()\". After removing outer parentheses of each part, this is \"\" + \"\" = \"\".   Constraints: 1 <= s.length <= 105 s[i] is either '(' or ')'. s is a valid parentheses string.",
        "806": "You are given the root of a binary tree where each node has a value 0 or 1. Each root-to-leaf path represents a binary number starting with the most significant bit. For example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13. For all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return the sum of these numbers. The test cases are generated so that the answer fits in a 32-bits integer.   Example 1: Input: root = [1,0,1,0,1,0,1] Output: 22 Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22 Example 2: Input: root = [0] Output: 0   Constraints: The number of nodes in the tree is in the range [1, 1000]. Node.val is 0 or 1.",
        "807": "Given an array of strings queries and a string pattern, return a boolean array answer where answer[i] is true if queries[i] matches pattern, and false otherwise. A query word queries[i] matches pattern if you can insert lowercase English letters pattern so that it equals the query. You may insert each character at any position and you may not insert any characters.   Example 1: Input: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\" Output: [true,false,true,true,false] Explanation: \"FooBar\" can be generated like this \"F\" + \"oo\" + \"B\" + \"ar\". \"FootBall\" can be generated like this \"F\" + \"oot\" + \"B\" + \"all\". \"FrameBuffer\" can be generated like this \"F\" + \"rame\" + \"B\" + \"uffer\". Example 2: Input: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\" Output: [true,false,true,false,false] Explanation: \"FooBar\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\". \"FootBall\" can be generated like this \"Fo\" + \"ot\" + \"Ba\" + \"ll\". Example 3: Input: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\" Output: [false,true,false,false,false] Explanation: \"FooBarTest\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\".   Constraints: 1 <= pattern.length, queries.length <= 100 1 <= queries[i].length <= 100 queries[i] and pattern consist of English letters.",
        "808": "You are given a series of video clips from a sporting event that lasted time seconds. These video clips can be overlapping with each other and have varying lengths. Each video clip is described by an array clips where clips[i] = [starti, endi] indicates that the ith clip started at starti and ended at endi. We can cut these clips into segments freely. For example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7]. Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time]. If the task is impossible, return -1.   Example 1: Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10 Output: 3 Explanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips. Then, we can reconstruct the sporting event as follows: We cut [1,9] into segments [1,2] + [2,8] + [8,9]. Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10]. Example 2: Input: clips = [[0,1],[1,2]], time = 5 Output: -1 Explanation: We cannot cover [0,5] with only [0,1] and [1,2]. Example 3: Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9 Output: 3 Explanation: We can take clips [0,4], [4,7], and [6,9].   Constraints: 1 <= clips.length <= 100 0 <= starti <= endi <= 100 1 <= time <= 100",
        "809": "Alice and Bob take turns playing a game, with Alice starting first. Initially, there is a number n on the chalkboard. On each player's turn, that player makes a move consisting of: Choosing any x with 0 < x < n and n % x == 0. Replacing the number n on the chalkboard with n - x. Also, if a player cannot make a move, they lose the game. Return true if and only if Alice wins the game, assuming both players play optimally.   Example 1: Input: n = 2 Output: true Explanation: Alice chooses 1, and Bob has no more moves. Example 2: Input: n = 3 Output: false Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.   Constraints: 1 <= n <= 1000",
        "810": "Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b. A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.   Example 1: Input: root = [8,3,10,1,6,null,14,null,null,4,7,13] Output: 7 Explanation: We have various ancestor-node differences, some of which are given below : |8 - 3| = 5 |3 - 7| = 4 |8 - 1| = 7 |10 - 13| = 3 Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7. Example 2: Input: root = [1,null,2,null,0,3] Output: 3   Constraints: The number of nodes in the tree is in the range [2, 5000]. 0 <= Node.val <= 105",
        "811": "Given an array nums of integers, return the length of the longest arithmetic subsequence in nums. Note that: A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements. A sequence seq is arithmetic if seq[i + 1] - seq[i] are all the same value (for 0 <= i < seq.length - 1).   Example 1: Input: nums = [3,6,9,12] Output: 4 Explanation:  The whole array is an arithmetic sequence with steps of length = 3. Example 2: Input: nums = [9,4,7,2,10] Output: 3 Explanation:  The longest arithmetic subsequence is [4,7,10]. Example 3: Input: nums = [20,1,15,3,10,5,8] Output: 4 Explanation:  The longest arithmetic subsequence is [20,15,10,5].   Constraints: 2 <= nums.length <= 1000 0 <= nums[i] <= 500",
        "812": "We run a preorder depth-first search (DFS) on the root of a binary tree. At each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.  If the depth of a node is D, the depth of its immediate child is D + 1.  The depth of the root node is 0. If a node has only one child, that child is guaranteed to be the left child. Given the output traversal of this traversal, recover the tree and return its root.   Example 1: Input: traversal = \"1-2--3--4-5--6--7\" Output: [1,2,5,3,4,6,7] Example 2: Input: traversal = \"1-2--3---4-5--6---7\" Output: [1,2,5,3,null,6,null,4,null,7] Example 3: Input: traversal = \"1-401--349---90--88\" Output: [1,401,null,349,88,90]   Constraints: The number of nodes in the original tree is in the range [1, 1000]. 1 <= Node.val <= 109",
        "813": "A company is planning to interview 2n people. Given the array costs where costs[i] = [aCosti, bCosti], the cost of flying the ith person to city a is aCosti, and the cost of flying the ith person to city b is bCosti. Return the minimum cost to fly every person to a city such that exactly n people arrive in each city.   Example 1: Input: costs = [[10,20],[30,200],[400,50],[30,20]] Output: 110 Explanation:  The first person goes to city A for a cost of 10. The second person goes to city A for a cost of 30. The third person goes to city B for a cost of 50. The fourth person goes to city B for a cost of 20.  The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city. Example 2: Input: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]] Output: 1859 Example 3: Input: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]] Output: 3086   Constraints: 2 * n == costs.length 2 <= costs.length <= 100 costs.length is even. 1 <= aCosti, bCosti <= 1000",
        "814": "You are given four integers row, cols, rCenter, and cCenter. There is a rows x cols matrix and you are on the cell with the coordinates (rCenter, cCenter). Return the coordinates of all cells in the matrix, sorted by their distance from (rCenter, cCenter) from the smallest distance to the largest distance. You may return the answer in any order that satisfies this condition. The distance between two cells (r1, c1) and (r2, c2) is |r1 - r2| + |c1 - c2|.   Example 1: Input: rows = 1, cols = 2, rCenter = 0, cCenter = 0 Output: [[0,0],[0,1]] Explanation: The distances from (0, 0) to other cells are: [0,1] Example 2: Input: rows = 2, cols = 2, rCenter = 0, cCenter = 1 Output: [[0,1],[0,0],[1,1],[1,0]] Explanation: The distances from (0, 1) to other cells are: [0,1,1,2] The answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct. Example 3: Input: rows = 2, cols = 3, rCenter = 1, cCenter = 2 Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]] Explanation: The distances from (1, 2) to other cells are: [0,1,1,2,2,3] There are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].   Constraints: 1 <= rows, cols <= 100 0 <= rCenter < rows 0 <= cCenter < cols",
        "815": "Given an integer array nums and two integers firstLen and secondLen, return the maximum sum of elements in two non-overlapping subarrays with lengths firstLen and secondLen. The array with length firstLen could occur before or after the array with length secondLen, but they have to be non-overlapping. A subarray is a contiguous part of an array.   Example 1: Input: nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2 Output: 20 Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2. Example 2: Input: nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2 Output: 29 Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2. Example 3: Input: nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3 Output: 31 Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3.   Constraints: 1 <= firstLen, secondLen <= 1000 2 <= firstLen + secondLen <= 1000 firstLen + secondLen <= nums.length <= 1000 0 <= nums[i] <= 1000",
        "816": "Design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings words. For example, if words = [\"abc\", \"xyz\"] and the stream added the four characters (one by one) 'a', 'x', 'y', and 'z', your algorithm should detect that the suffix \"xyz\" of the characters \"axyz\" matches \"xyz\" from words. Implement the StreamChecker class: StreamChecker(String[] words) Initializes the object with the strings array words. boolean query(char letter) Accepts a new character from the stream and returns true if any non-empty suffix from the stream forms a word that is in words.   Example 1: Input [\"StreamChecker\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\"] [[[\"cd\", \"f\", \"kl\"]], [\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"e\"], [\"f\"], [\"g\"], [\"h\"], [\"i\"], [\"j\"], [\"k\"], [\"l\"]] Output [null, false, false, false, true, false, true, false, false, false, false, false, true]  Explanation StreamChecker streamChecker = new StreamChecker([\"cd\", \"f\", \"kl\"]); streamChecker.query(\"a\"); // return False streamChecker.query(\"b\"); // return False streamChecker.query(\"c\"); // return False streamChecker.query(\"d\"); // return True, because 'cd' is in the wordlist streamChecker.query(\"e\"); // return False streamChecker.query(\"f\"); // return True, because 'f' is in the wordlist streamChecker.query(\"g\"); // return False streamChecker.query(\"h\"); // return False streamChecker.query(\"i\"); // return False streamChecker.query(\"j\"); // return False streamChecker.query(\"k\"); // return False streamChecker.query(\"l\"); // return True, because 'kl' is in the wordlist   Constraints: 1 <= words.length <= 2000 1 <= words[i].length <= 200 words[i] consists of lowercase English letters. letter is a lowercase English letter. At most 4 * 104 calls will be made to query.",
        "817": "There are three stones in different positions on the X-axis. You are given three integers a, b, and c, the positions of the stones. In one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. Formally, let's say the stones are currently at positions x, y, and z with x < y < z. You pick up the stone at either position x or position z, and move that stone to an integer position k, with x < k < z and k != y. The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions). Return an integer array answer of length 2 where: answer[0] is the minimum number of moves you can play, and answer[1] is the maximum number of moves you can play.   Example 1: Input: a = 1, b = 2, c = 5 Output: [1,2] Explanation: Move the stone from 5 to 3, or move the stone from 5 to 4 to 3. Example 2: Input: a = 4, b = 3, c = 2 Output: [0,0] Explanation: We cannot make any moves. Example 3: Input: a = 3, b = 5, c = 1 Output: [1,2] Explanation: Move the stone from 1 to 4; or move the stone from 1 to 2 to 4.   Constraints: 1 <= a, b, c <= 100 a, b, and c have different values.",
        "818": "You are given an m x n integer matrix grid, and three integers row, col, and color. Each value in the grid represents the color of the grid square at that location. Two squares are called adjacent if they are next to each other in any of the 4 directions. Two squares belong to the same connected component if they have the same color and they are adjacent. The border of a connected component is all the squares in the connected component that are either adjacent to (at least) a square not in the component, or on the boundary of the grid (the first or last row or column). You should color the border of the connected component that contains the square grid[row][col] with color. Return the final grid.   Example 1: Input: grid = [[1,1],[1,2]], row = 0, col = 0, color = 3 Output: [[3,3],[3,2]] Example 2: Input: grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3 Output: [[1,3,3],[2,3,3]] Example 3: Input: grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2 Output: [[2,2,2],[2,1,2],[2,2,2]]   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 50 1 <= grid[i][j], color <= 1000 0 <= row < m 0 <= col < n",
        "819": "You are given two integer arrays nums1 and nums2. We write the integers of nums1 and nums2 (in the order they are given) on two separate horizontal lines. We may draw connecting lines: a straight line connecting two numbers nums1[i] and nums2[j] such that: nums1[i] == nums2[j], and the line we draw does not intersect any other connecting (non-horizontal) line. Note that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line). Return the maximum number of connecting lines we can draw in this way.   Example 1: Input: nums1 = [1,4,2], nums2 = [1,2,4] Output: 2 Explanation: We can draw 2 uncrossed lines as in the diagram. We cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2. Example 2: Input: nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2] Output: 3 Example 3: Input: nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1] Output: 2   Constraints: 1 <= nums1.length, nums2.length <= 500 1 <= nums1[i], nums2[j] <= 2000",
        "820": "There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are (x, y). We start at the source = [sx, sy] square and want to reach the target = [tx, ty] square. There is also an array of blocked squares, where each blocked[i] = [xi, yi] represents a blocked square with coordinates (xi, yi). Each move, we can walk one square north, east, south, or west if the square is not in the array of blocked squares. We are also not allowed to walk outside of the grid. Return true if and only if it is possible to reach the target square from the source square through a sequence of valid moves.   Example 1: Input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2] Output: false Explanation: The target square is inaccessible starting from the source square because we cannot move. We cannot move north or east because those squares are blocked. We cannot move south or west because we cannot go outside of the grid. Example 2: Input: blocked = [], source = [0,0], target = [999999,999999] Output: true Explanation: Because there are no blocked cells, it is possible to reach the target square.   Constraints: 0 <= blocked.length <= 200 blocked[i].length == 2 0 <= xi, yi < 106 source.length == target.length == 2 0 <= sx, sy, tx, ty < 106 source != target It is guaranteed that source and target are not blocked.",
        "821": "Given an array points where points[i] = [xi, yi] represents a point on the X-Y plane, return true if these points are a boomerang. A boomerang is a set of three points that are all distinct and not in a straight line.   Example 1: Input: points = [[1,1],[2,3],[3,2]] Output: true Example 2: Input: points = [[1,1],[2,2],[3,3]] Output: false   Constraints: points.length == 3 points[i].length == 2 0 <= xi, yi <= 100",
        "822": "Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST. As a reminder, a binary search tree is a tree that satisfies these constraints: The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees.   Example 1: Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8] Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8] Example 2: Input: root = [0,null,1] Output: [1,null,1]   Constraints: The number of nodes in the tree is in the range [1, 100]. 0 <= Node.val <= 100 All the values in the tree are unique.   Note: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/",
        "823": "You have a convex n-sided polygon where each vertex has an integer value. You are given an integer array values where values[i] is the value of the ith vertex in clockwise order. Polygon triangulation is a process where you divide a polygon into a set of triangles and the vertices of each triangle must also be vertices of the original polygon. Note that no other shapes other than triangles are allowed in the division. This process will result in n - 2 triangles. You will triangulate the polygon. For each triangle, the weight of that triangle is the product of the values at its vertices. The total score of the triangulation is the sum of these weights over all n - 2 triangles. Return the minimum possible score that you can achieve with some triangulation of the polygon.   Example 1: Input: values = [1,2,3] Output: 6 Explanation: The polygon is already triangulated, and the score of the only triangle is 6. Example 2: Input: values = [3,7,4,5] Output: 144 Explanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144. The minimum score is 144. Example 3: Input: values = [1,3,1,4,1,5] Output: 13 Explanation: The minimum score triangulation is 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.   Constraints: n == values.length 3 <= n <= 50 1 <= values[i] <= 100",
        "824": "There are some stones in different positions on the X-axis. You are given an integer array stones, the positions of the stones. Call a stone an endpoint stone if it has the smallest or largest position. In one move, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone. In particular, if the stones are at say, stones = [1,2,5], you cannot move the endpoint stone at position 5, since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone. The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions). Return an integer array answer of length 2 where: answer[0] is the minimum number of moves you can play, and answer[1] is the maximum number of moves you can play.   Example 1: Input: stones = [7,4,9] Output: [1,2] Explanation: We can move 4 -> 8 for one move to finish the game. Or, we can move 9 -> 5, 4 -> 6 for two moves to finish the game. Example 2: Input: stones = [6,5,4,3,10] Output: [2,3] Explanation: We can move 3 -> 8 then 10 -> 7 to finish the game. Or, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game. Notice we cannot move 10 -> 2 to finish the game, because that would be an illegal move.   Constraints: 3 <= stones.length <= 104 1 <= stones[i] <= 109 All the values of stones are unique.",
        "825": "On an infinite plane, a robot initially stands at (0, 0) and faces north. Note that: The north direction is the positive direction of the y-axis. The south direction is the negative direction of the y-axis. The east direction is the positive direction of the x-axis. The west direction is the negative direction of the x-axis. The robot can receive one of three instructions: \"G\": go straight 1 unit. \"L\": turn 90 degrees to the left (i.e., anti-clockwise direction). \"R\": turn 90 degrees to the right (i.e., clockwise direction). The robot performs the instructions given in order, and repeats them forever. Return true if and only if there exists a circle in the plane such that the robot never leaves the circle.   Example 1: Input: instructions = \"GGLLGG\" Output: true Explanation: The robot is initially at (0, 0) facing the north direction. \"G\": move one step. Position: (0, 1). Direction: North. \"G\": move one step. Position: (0, 2). Direction: North. \"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: West. \"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: South. \"G\": move one step. Position: (0, 1). Direction: South. \"G\": move one step. Position: (0, 0). Direction: South. Repeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (0, 2) --> (0, 1) --> (0, 0). Based on that, we return true. Example 2: Input: instructions = \"GG\" Output: false Explanation: The robot is initially at (0, 0) facing the north direction. \"G\": move one step. Position: (0, 1). Direction: North. \"G\": move one step. Position: (0, 2). Direction: North. Repeating the instructions, keeps advancing in the north direction and does not go into cycles. Based on that, we return false. Example 3: Input: instructions = \"GL\" Output: true Explanation: The robot is initially at (0, 0) facing the north direction. \"G\": move one step. Position: (0, 1). Direction: North. \"L\": turn 90 degrees anti-clockwise. Position: (0, 1). Direction: West. \"G\": move one step. Position: (-1, 1). Direction: West. \"L\": turn 90 degrees anti-clockwise. Position: (-1, 1). Direction: South. \"G\": move one step. Position: (-1, 0). Direction: South. \"L\": turn 90 degrees anti-clockwise. Position: (-1, 0). Direction: East. \"G\": move one step. Position: (0, 0). Direction: East. \"L\": turn 90 degrees anti-clockwise. Position: (0, 0). Direction: North. Repeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (-1, 1) --> (-1, 0) --> (0, 0). Based on that, we return true.   Constraints: 1 <= instructions.length <= 100 instructions[i] is 'G', 'L' or, 'R'.",
        "826": "You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. In each garden, you want to plant one of 4 types of flowers. All gardens have at most 3 paths coming into or leaving it. Your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers. Return any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden. The flower types are denoted 1, 2, 3, or 4. It is guaranteed an answer exists.   Example 1: Input: n = 3, paths = [[1,2],[2,3],[3,1]] Output: [1,2,3] Explanation: Gardens 1 and 2 have different types. Gardens 2 and 3 have different types. Gardens 3 and 1 have different types. Hence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1]. Example 2: Input: n = 4, paths = [[1,2],[3,4]] Output: [1,2,1,2] Example 3: Input: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]] Output: [1,2,3,4]   Constraints: 1 <= n <= 104 0 <= paths.length <= 2 * 104 paths[i].length == 2 1 <= xi, yi <= n xi != yi Every garden has at most 3 paths coming into or leaving it.",
        "827": "Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray. Return the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.   Example 1: Input: arr = [1,15,7,9,2,5,10], k = 3 Output: 84 Explanation: arr becomes [15,15,15,9,10,10,10] Example 2: Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4 Output: 83 Example 3: Input: arr = [1], k = 1 Output: 1   Constraints: 1 <= arr.length <= 500 0 <= arr[i] <= 109 1 <= k <= arr.length",
        "828": "Given a string s, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times. The occurrences may overlap. Return any duplicated substring that has the longest possible length. If s does not have a duplicated substring, the answer is \"\".   Example 1: Input: s = \"banana\" Output: \"ana\" Example 2: Input: s = \"abcd\" Output: \"\"   Constraints: 2 <= s.length <= 3 * 104 s consists of lowercase English letters.",
        "829": "SQL Schema Pandas Schema",
        "830": "You are given an array of integers stones where stones[i] is the weight of the ith stone. We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is: If x == y, both stones are destroyed, and If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x. At the end of the game, there is at most one stone left. Return the weight of the last remaining stone. If there are no stones left, return 0.   Example 1: Input: stones = [2,7,4,1,8,1] Output: 1 Explanation:  We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then, we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then, we combine 2 and 1 to get 1 so the array converts to [1,1,1] then, we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone. Example 2: Input: stones = [1] Output: 1   Constraints: 1 <= stones.length <= 30 1 <= stones[i] <= 1000",
        "831": "You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them. We repeatedly make duplicate removals on s until we no longer can. Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.   Example 1: Input: s = \"abbaca\" Output: \"ca\" Explanation:  For example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\". Example 2: Input: s = \"azxxzy\" Output: \"ay\"   Constraints: 1 <= s.length <= 105 s consists of lowercase English letters.",
        "832": "You are given an array of words where each word consists of lowercase English letters. wordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB. For example, \"abc\" is a predecessor of \"abac\", while \"cba\" is not a predecessor of \"bcad\". A word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. A single word is trivially a word chain with k == 1. Return the length of the longest possible word chain with words chosen from the given list of words.   Example 1: Input: words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"] Output: 4 Explanation: One of the longest word chains is [\"a\",\"ba\",\"bda\",\"bdca\"]. Example 2: Input: words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"] Output: 5 Explanation: All the words can be put in a word chain [\"xb\", \"xbc\", \"cxbc\", \"pcxbc\", \"pcxbcf\"]. Example 3: Input: words = [\"abcd\",\"dbqca\"] Output: 1 Explanation: The trivial word chain [\"abcd\"] is one of the longest word chains. [\"abcd\",\"dbqca\"] is not a valid word chain because the ordering of the letters is changed.   Constraints: 1 <= words.length <= 1000 1 <= words[i].length <= 16 words[i] only consists of lowercase English letters.",
        "833": "You are given an array of integers stones where stones[i] is the weight of the ith stone. We are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights x and y with x <= y. The result of this smash is: If x == y, both stones are destroyed, and If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x. At the end of the game, there is at most one stone left. Return the smallest possible weight of the left stone. If there are no stones left, return 0.   Example 1: Input: stones = [2,7,4,1,8,1] Output: 1 Explanation: We can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then, we can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then, we can combine 2 and 1 to get 1, so the array converts to [1,1,1] then, we can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value. Example 2: Input: stones = [31,26,33,21,40] Output: 5   Constraints: 1 <= stones.length <= 30 1 <= stones[i] <= 100",
        "834": "SQL Schema Pandas Schema",
        "835": "There is a bookstore owner that has a store open for n minutes. You are given an integer array customers of length n where customers[i] is the number of the customers that enter the store at the start of the ith minute and all those customers leave after the end of that minute. During certain minutes, the bookstore owner is grumpy. You are given a binary array grumpy where grumpy[i] is 1 if the bookstore owner is grumpy during the ith minute, and is 0 otherwise. When the bookstore owner is grumpy, the customers entering during that minute are not satisfied. Otherwise, they are satisfied. The bookstore owner knows a secret technique to remain not grumpy for minutes consecutive minutes, but this technique can only be used once. Return the maximum number of customers that can be satisfied throughout the day.   Example 1: Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3 Output: 16 Explanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16. Example 2: Input: customers = [1], grumpy = [0], minutes = 1 Output: 1   Constraints: n == customers.length == grumpy.length 1 <= minutes <= n <= 2 * 104 0 <= customers[i] <= 1000 grumpy[i] is either 0 or 1.",
        "836": "Given an array of positive integers arr (not necessarily distinct), return the lexicographically largest permutation that is smaller than arr, that can be made with exactly one swap. If it cannot be done, then return the same array. Note that a swap exchanges the positions of two numbers arr[i] and arr[j]   Example 1: Input: arr = [3,2,1] Output: [3,1,2] Explanation: Swapping 2 and 1. Example 2: Input: arr = [1,1,5] Output: [1,1,5] Explanation: This is already the smallest permutation. Example 3: Input: arr = [1,9,4,6,7] Output: [1,7,4,6,9] Explanation: Swapping 9 and 7.   Constraints: 1 <= arr.length <= 104 1 <= arr[i] <= 104",
        "837": "In a warehouse, there is a row of barcodes, where the ith barcode is barcodes[i]. Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.   Example 1: Input: barcodes = [1,1,1,2,2,2] Output: [2,1,2,1,2,1] Example 2: Input: barcodes = [1,1,1,1,2,2,3,3] Output: [1,3,1,3,1,2,1,2]   Constraints: 1 <= barcodes.length <= 10000 1 <= barcodes[i] <= 10000",
        "838": "You are given two strings of the same length s1 and s2 and a string baseStr. We say s1[i] and s2[i] are equivalent characters. For example, if s1 = \"abc\" and s2 = \"cde\", then we have 'a' == 'c', 'b' == 'd', and 'c' == 'e'. Equivalent characters follow the usual rules of any equivalence relation: Reflexivity: 'a' == 'a'. Symmetry: 'a' == 'b' implies 'b' == 'a'. Transitivity: 'a' == 'b' and 'b' == 'c' implies 'a' == 'c'. For example, given the equivalency information from s1 = \"abc\" and s2 = \"cde\", \"acd\" and \"aab\" are equivalent strings of baseStr = \"eed\", and \"aab\" is the lexicographically smallest equivalent string of baseStr. Return the lexicographically smallest equivalent string of baseStr by using the equivalency information from s1 and s2.   Example 1: Input: s1 = \"parker\", s2 = \"morris\", baseStr = \"parser\" Output: \"makkek\" Explanation: Based on the equivalency information in s1 and s2, we can group their characters as [m,p], [a,o], [k,r,s], [e,i]. The characters in each group are equivalent and sorted in lexicographical order. So the answer is \"makkek\". Example 2: Input: s1 = \"hello\", s2 = \"world\", baseStr = \"hold\" Output: \"hdld\" Explanation: Based on the equivalency information in s1 and s2, we can group their characters as [h,w], [d,e,o], [l,r]. So only the second letter 'o' in baseStr is changed to 'd', the answer is \"hdld\". Example 3: Input: s1 = \"leetcode\", s2 = \"programs\", baseStr = \"sourcecode\" Output: \"aauaaaaada\" Explanation: We group the equivalent characters in s1 and s2 as [a,o,e,r,s,c], [l,p], [g,t] and [d,m], thus all letters in baseStr except 'u' and 'd' are transformed to 'a', the answer is \"aauaaaaada\".   Constraints: 1 <= s1.length, s2.length, baseStr <= 1000 s1.length == s2.length s1, s2, and baseStr consist of lowercase English letters.",
        "839": "SQL Schema Pandas Schema",
        "840": "SQL Schema Pandas Schema",
        "841": "For two strings s and t, we say \"t divides s\" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times). Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.   Example 1: Input: str1 = \"ABCABC\", str2 = \"ABC\" Output: \"ABC\" Example 2: Input: str1 = \"ABABAB\", str2 = \"ABAB\" Output: \"AB\" Example 3: Input: str1 = \"LEET\", str2 = \"CODE\" Output: \"\"   Constraints: 1 <= str1.length, str2.length <= 1000 str1 and str2 consist of English uppercase letters.",
        "842": "You are given an m x n binary matrix matrix. You can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from 0 to 1 or vice versa). Return the maximum number of rows that have all values equal after some number of flips.   Example 1: Input: matrix = [[0,1],[1,1]] Output: 1 Explanation: After flipping no values, 1 row has all values equal. Example 2: Input: matrix = [[0,1],[1,0]] Output: 2 Explanation: After flipping values in the first column, both rows have equal values. Example 3: Input: matrix = [[0,0,0],[0,0,1],[1,1,0]] Output: 2 Explanation: After flipping values in the first two columns, the last two rows have equal values.   Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 300 matrix[i][j] is either 0 or 1.",
        "843": "Given two numbers arr1 and arr2 in base -2, return the result of adding them together. Each number is given in array format:  as an array of 0s and 1s, from most significant bit to least significant bit.  For example, arr = [1,1,0,1] represents the number (-2)^3 + (-2)^2 + (-2)^0 = -3.  A number arr in array, format is also guaranteed to have no leading zeros: either arr == [0] or arr[0] == 1. Return the result of adding arr1 and arr2 in the same format: as an array of 0s and 1s with no leading zeros.   Example 1: Input: arr1 = [1,1,1,1,1], arr2 = [1,0,1] Output: [1,0,0,0,0] Explanation: arr1 represents 11, arr2 represents 5, the output represents 16. Example 2: Input: arr1 = [0], arr2 = [0] Output: [0] Example 3: Input: arr1 = [0], arr2 = [1] Output: [1]   Constraints: 1 <= arr1.length, arr2.length <= 1000 arr1[i] and arr2[i] are 0 or 1 arr1 and arr2 have no leading zeros",
        "844": "Given a matrix and a target, return the number of non-empty submatrices that sum to target. A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2. Two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.   Example 1: Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0 Output: 4 Explanation: The four 1x1 submatrices that only contain 0. Example 2: Input: matrix = [[1,-1],[-1,1]], target = 0 Output: 5 Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix. Example 3: Input: matrix = [[904]], target = 0 Output: 0   Constraints: 1 <= matrix.length <= 100 1 <= matrix[0].length <= 100 -1000 <= matrix[i][j] <= 1000 -10^8 <= target <= 10^8",
        "845": "Given two strings first and second, consider occurrences in some text of the form \"first second third\", where second comes immediately after first, and third comes immediately after second. Return an array of all the words third for each occurrence of \"first second third\".   Example 1: Input: text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\" Output: [\"girl\",\"student\"] Example 2: Input: text = \"we will we will rock you\", first = \"we\", second = \"will\" Output: [\"we\",\"rock\"]   Constraints: 1 <= text.length <= 1000 text consists of lowercase English letters and spaces. All the words in text are separated by a single space. 1 <= first.length, second.length <= 10 first and second consist of lowercase English letters. text will not have any leading or trailing spaces.",
        "846": "You have n  tiles, where each tile has one letter tiles[i] printed on it. Return the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.   Example 1: Input: tiles = \"AAB\" Output: 8 Explanation: The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\". Example 2: Input: tiles = \"AAABBC\" Output: 188 Example 3: Input: tiles = \"V\" Output: 1   Constraints: 1 <= tiles.length <= 7 tiles consists of uppercase English letters.",
        "847": "Given the root of a binary tree and an integer limit, delete all insufficient nodes in the tree simultaneously, and return the root of the resulting binary tree. A node is insufficient if every root to leaf path intersecting this node has a sum strictly less than limit. A leaf is a node with no children.   Example 1: Input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1 Output: [1,2,3,4,null,null,7,8,9,null,14] Example 2: Input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22 Output: [5,4,8,11,null,17,4,7,null,null,null,5] Example 3: Input: root = [1,2,-3,-5,null,4,null], limit = -1 Output: [1,null,-3,4]   Constraints: The number of nodes in the tree is in the range [1, 5000]. -105 <= Node.val <= 105 -109 <= limit <= 109",
        "848": "Given a string s, return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once.   Example 1: Input: s = \"bcabc\" Output: \"abc\" Example 2: Input: s = \"cbacdcbc\" Output: \"acdb\"   Constraints: 1 <= s.length <= 1000 s consists of lowercase English letters.   Note: This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/",
        "849": "SQL Schema Pandas Schema",
        "850": "Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right. Note that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.   Example 1: Input: arr = [1,0,2,3,0,4,5,0] Output: [1,0,0,2,3,0,0,4] Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4] Example 2: Input: arr = [1,2,3] Output: [1,2,3] Explanation: After calling your function, the input array is modified to: [1,2,3]   Constraints: 1 <= arr.length <= 104 0 <= arr[i] <= 9",
        "851": "You are given n item's value and label as two integer arrays values and labels. You are also given two integers numWanted and useLimit. Your task is to find a subset of items with the maximum sum of their values such that: The number of items is at most numWanted. The number of items with the same label is at most useLimit. Return the maximum sum.   Example 1: Input: values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1 Output: 9 Explanation: The subset chosen is the first, third, and fifth items with the sum of values 5 + 3 + 1. Example 2: Input: values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2 Output: 12 Explanation: The subset chosen is the first, second, and third items with the sum of values 5 + 4 + 3. Example 3: Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1 Output: 16 Explanation: The subset chosen is the first and fourth items with the sum of values 9 + 7.   Constraints: n == values.length == labels.length 1 <= n <= 2 * 104 0 <= values[i], labels[i] <= 2 * 104 1 <= numWanted, useLimit <= n",
        "852": "Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1. A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that: All the visited cells of the path are 0. All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner). The length of a clear path is the number of visited cells of this path.   Example 1: Input: grid = [[0,1],[1,0]] Output: 2 Example 2: Input: grid = [[0,0,0],[1,1,0],[1,1,0]] Output: 4 Example 3: Input: grid = [[1,0,0],[1,1,0],[1,1,0]] Output: -1   Constraints: n == grid.length n == grid[i].length 1 <= n <= 100 grid[i][j] is 0 or 1",
        "853": "Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them. A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.   Example 1: Input: str1 = \"abac\", str2 = \"cab\" Output: \"cabac\" Explanation:  str1 = \"abac\" is a subsequence of \"cabac\" because we can delete the first \"c\". str2 = \"cab\" is a subsequence of \"cabac\" because we can delete the last \"ac\". The answer provided is the shortest such string that satisfies these properties. Example 2: Input: str1 = \"aaaaaaaa\", str2 = \"aaaaaaaa\" Output: \"aaaaaaaa\"   Constraints: 1 <= str1.length, str2.length <= 1000 str1 and str2 consist of lowercase English letters.",
        "854": "You are given a large sample of integers in the range [0, 255]. Since the sample is so large, it is represented by an array count where count[k] is the number of times that k appears in the sample. Calculate the following statistics: minimum: The minimum element in the sample. maximum: The maximum element in the sample. mean: The average of the sample, calculated as the total sum of all elements divided by the total number of elements. median: If the sample has an odd number of elements, then the median is the middle element once the sample is sorted. If the sample has an even number of elements, then the median is the average of the two middle elements once the sample is sorted. mode: The number that appears the most in the sample. It is guaranteed to be unique. Return the statistics of the sample as an array of floating-point numbers [minimum, maximum, mean, median, mode]. Answers within 10-5 of the actual answer will be accepted.   Example 1: Input: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] Output: [1.00000,3.00000,2.37500,2.50000,3.00000] Explanation: The sample represented by count is [1,2,2,2,3,3,3,3]. The minimum and maximum are 1 and 3 respectively. The mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375. Since the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5. The mode is 3 as it appears the most in the sample. Example 2: Input: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] Output: [1.00000,4.00000,2.18182,2.00000,1.00000] Explanation: The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4]. The minimum and maximum are 1 and 4 respectively. The mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182). Since the size of the sample is odd, the median is the middle element 2. The mode is 1 as it appears the most in the sample.   Constraints: count.length == 256 0 <= count[i] <= 109 1 <= sum(count) <= 109 The mode of the sample that count represents is unique.",
        "855": "There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west). You are given the integer capacity and an array trips where trips[i] = [numPassengersi, fromi, toi] indicates that the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. The locations are given as the number of kilometers due east from the car's initial location. Return true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.   Example 1: Input: trips = [[2,1,5],[3,3,7]], capacity = 4 Output: false Example 2: Input: trips = [[2,1,5],[3,3,7]], capacity = 5 Output: true   Constraints: 1 <= trips.length <= 1000 trips[i].length == 3 1 <= numPassengersi <= 100 0 <= fromi < toi <= 1000 1 <= capacity <= 105",
        "856": "(This problem is an interactive problem.) You may recall that an array arr is a mountain array if and only if: arr.length >= 3 There exists some i with 0 < i < arr.length - 1 such that: arr[0] < arr[1] < ... < arr[i - 1] < arr[i] arr[i] > arr[i + 1] > ... > arr[arr.length - 1] Given a mountain array mountainArr, return the minimum index such that mountainArr.get(index) == target. If such an index does not exist, return -1. You cannot access the mountain array directly. You may only access the array using a MountainArray interface: MountainArray.get(k) returns the element of the array at index k (0-indexed). MountainArray.length() returns the length of the array. Submissions making more than 100 calls to MountainArray.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.   Example 1: Input: array = [1,2,3,4,5,3,1], target = 3 Output: 2 Explanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2. Example 2: Input: array = [0,1,2,4,2,1], target = 3 Output: -1 Explanation: 3 does not exist in the array, so we return -1.   Constraints: 3 <= mountain_arr.length() <= 104 0 <= target <= 109 0 <= mountain_arr.get(index) <= 109",
        "857": "Under the grammar given below, strings can represent a set of lowercase words. Let R(expr) denote the set of words the expression represents. The grammar can best be understood through simple examples: Single letters represent a singleton set containing that word. R(\"a\") = {\"a\"} R(\"w\") = {\"w\"} When we take a comma-delimited list of two or more expressions, we take the union of possibilities. R(\"{a,b,c}\") = {\"a\",\"b\",\"c\"} R(\"{{a,b},{b,c}}\") = {\"a\",\"b\",\"c\"} (notice the final set only contains each word at most once) When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression. R(\"{a,b}{c,d}\") = {\"ac\",\"ad\",\"bc\",\"bd\"} R(\"a{b,c}{d,e}f{g,h}\") = {\"abdfg\", \"abdfh\", \"abefg\", \"abefh\", \"acdfg\", \"acdfh\", \"acefg\", \"acefh\"} Formally, the three rules for our grammar: For every lowercase letter x, we have R(x) = {x}. For expressions e1, e2, ... , ek with k >= 2, we have R({e1, e2, ...}) = R(e1) ∪ R(e2) ∪ ... For expressions e1 and e2, we have R(e1 + e2) = {a + b for (a, b) in R(e1) × R(e2)}, where + denotes concatenation, and × denotes the cartesian product. Given an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents.   Example 1: Input: expression = \"{a,b}{c,{d,e}}\" Output: [\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"] Example 2: Input: expression = \"{{a,z},a{b,c},{ab,z}}\" Output: [\"a\",\"ab\",\"ac\",\"z\"] Explanation: Each distinct word is written only once in the final answer.   Constraints: 1 <= expression.length <= 60 expression[i] consists of '{', '}', ','or lowercase English letters. The given expression represents a set of words based on the grammar given in the description.",
        "858": "We distribute some number of candies, to a row of n = num_people people in the following way: We then give 1 candy to the first person, 2 candies to the second person, and so on until we give n candies to the last person. Then, we go back to the start of the row, giving n + 1 candies to the first person, n + 2 candies to the second person, and so on until we give 2 * n candies to the last person. This process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.  The last person will receive all of our remaining candies (not necessarily one more than the previous gift). Return an array (of length num_people and sum candies) that represents the final distribution of candies.   Example 1: Input: candies = 7, num_people = 4 Output: [1,2,3,1] Explanation: On the first turn, ans[0] += 1, and the array is [1,0,0,0]. On the second turn, ans[1] += 2, and the array is [1,2,0,0]. On the third turn, ans[2] += 3, and the array is [1,2,3,0]. On the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1]. Example 2: Input: candies = 10, num_people = 3 Output: [5,2,3] Explanation:  On the first turn, ans[0] += 1, and the array is [1,0,0]. On the second turn, ans[1] += 2, and the array is [1,2,0]. On the third turn, ans[2] += 3, and the array is [1,2,3]. On the fourth turn, ans[0] += 4, and the final array is [5,2,3].   Constraints: 1 <= candies <= 10^9 1 <= num_people <= 1000",
        "859": "In an infinite binary tree where every node has two children, the nodes are labelled in row order. In the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left. Given the label of a node in this tree, return the labels in the path from the root of the tree to the node with that label.   Example 1: Input: label = 14 Output: [1,3,4,14] Example 2: Input: label = 26 Output: [1,2,6,10,26]   Constraints: 1 <= label <= 10^6",
        "860": "You are given an array books where books[i] = [thicknessi, heighti] indicates the thickness and height of the ith book. You are also given an integer shelfWidth. We want to place these books in order onto bookcase shelves that have a total width shelfWidth. We choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to shelfWidth, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. We repeat this process until there are no more books to place. Note that at each step of the above process, the order of the books we place is the same order as the given sequence of books. For example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf. Return the minimum possible height that the total bookshelf can be after placing shelves in this manner.   Example 1: Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfWidth = 4 Output: 6 Explanation: The sum of the heights of the 3 shelves is 1 + 3 + 2 = 6. Notice that book number 2 does not have to be on the first shelf. Example 2: Input: books = [[1,3],[2,4],[3,2]], shelfWidth = 6 Output: 4   Constraints: 1 <= books.length <= 1000 1 <= thicknessi <= shelfWidth <= 1000 1 <= heighti <= 1000",
        "861": "A boolean expression is an expression that evaluates to either true or false. It can be in one of the following shapes: 't' that evaluates to true. 'f' that evaluates to false. '!(subExpr)' that evaluates to the logical NOT of the inner expression subExpr. '&(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical AND of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1. '|(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical OR of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1. Given a string expression that represents a boolean expression, return the evaluation of that expression. It is guaranteed that the given expression is valid and follows the given rules.   Example 1: Input: expression = \"&(|(f))\" Output: false Explanation:  First, evaluate |(f) --> f. The expression is now \"&(f)\". Then, evaluate &(f) --> f. The expression is now \"f\". Finally, return false. Example 2: Input: expression = \"|(f,f,f,t)\" Output: true Explanation: The evaluation of (false OR false OR false OR true) is true. Example 3: Input: expression = \"!(&(f,t))\" Output: true Explanation:  First, evaluate &(f,t) --> (false AND true) --> false --> f. The expression is now \"!(f)\". Then, evaluate !(f) --> NOT false --> true. We return true.   Constraints: 1 <= expression.length <= 2 * 104 expression[i] is one following characters: '(', ')', '&', '|', '!', 't', 'f', and ','.",
        "862": "Given a valid (IPv4) IP address, return a defanged version of that IP address. A defanged IP address replaces every period \".\" with \"[.]\".   Example 1: Input: address = \"1.1.1.1\" Output: \"1[.]1[.]1[.]1\" Example 2: Input: address = \"255.100.50.0\" Output: \"255[.]100[.]50[.]0\"   Constraints: The given address is a valid IPv4 address.",
        "863": "There are n flights that are labeled from 1 to n. You are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range. Return an array answer of length n, where answer[i] is the total number of seats reserved for flight i.   Example 1: Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5 Output: [10,55,45,25,25] Explanation: Flight labels:        1   2   3   4   5 Booking 1 reserved:  10  10 Booking 2 reserved:      20  20 Booking 3 reserved:      25  25  25  25 Total seats:         10  55  45  25  25 Hence, answer = [10,55,45,25,25] Example 2: Input: bookings = [[1,2,10],[2,2,15]], n = 2 Output: [10,25] Explanation: Flight labels:        1   2 Booking 1 reserved:  10  10 Booking 2 reserved:      15 Total seats:         10  25 Hence, answer = [10,25]   Constraints: 1 <= n <= 2 * 104 1 <= bookings.length <= 2 * 104 bookings[i].length == 3 1 <= firsti <= lasti <= n 1 <= seatsi <= 104",
        "864": "Given the root of a binary tree, each node in the tree has a distinct value. After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees). Return the roots of the trees in the remaining forest. You may return the result in any order.   Example 1: Input: root = [1,2,3,4,5,6,7], to_delete = [3,5] Output: [[1,2,null,4],[6],[7]] Example 2: Input: root = [1,2,4,null,3], to_delete = [3] Output: [[1,2,4]]   Constraints: The number of nodes in the given tree is at most 1000. Each node has a distinct value between 1 and 1000. to_delete.length <= 1000 to_delete contains distinct values between 1 and 1000.",
        "865": "A string is a valid parentheses string (denoted VPS) if and only if it consists of \"(\" and \")\" characters only, and: It is the empty string, or It can be written as AB (A concatenated with B), where A and B are VPS's, or It can be written as (A), where A is a VPS. We can similarly define the nesting depth depth(S) of any VPS S as follows: depth(\"\") = 0 depth(A + B) = max(depth(A), depth(B)), where A and B are VPS's depth(\"(\" + A + \")\") = 1 + depth(A), where A is a VPS. For example,  \"\", \"()()\", and \"()(()())\" are VPS's (with nesting depths 0, 1, and 2), and \")(\" and \"(()\" are not VPS's.   Given a VPS seq, split it into two disjoint subsequences A and B, such that A and B are VPS's (and A.length + B.length = seq.length). Now choose any such A and B such that max(depth(A), depth(B)) is the minimum possible value. Return an answer array (of length seq.length) that encodes such a choice of A and B:  answer[i] = 0 if seq[i] is part of A, else answer[i] = 1.  Note that even though multiple answers may exist, you may return any of them.   Example 1: Input: seq = \"(()())\" Output: [0,1,1,1,1,0] Example 2: Input: seq = \"()(())()\" Output: [0,0,0,1,1,0,1,1]   Constraints: 1 <= seq.size <= 10000",
        "866": "Suppose we have a class: public class Foo {   public void first() { print(\"first\"); }   public void second() { print(\"second\"); }   public void third() { print(\"third\"); } } The same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second(). Note: We do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. The input format you see is mainly to ensure our tests' comprehensiveness.   Example 1: Input: nums = [1,2,3] Output: \"firstsecondthird\" Explanation: There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). \"firstsecondthird\" is the correct output. Example 2: Input: nums = [1,3,2] Output: \"firstsecondthird\" Explanation: The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). \"firstsecondthird\" is the correct output.   Constraints: nums is a permutation of [1, 2, 3].",
        "867": "You have a function printNumber that can be called with an integer parameter and prints it to the console. For example, calling printNumber(7) prints 7 to the console. You are given an instance of the class ZeroEvenOdd that has three functions: zero, even, and odd. The same instance of ZeroEvenOdd will be passed to three different threads: Thread A: calls zero() that should only output 0's. Thread B: calls even() that should only output even numbers. Thread C: calls odd() that should only output odd numbers. Modify the given class to output the series \"010203040506...\" where the length of the series must be 2n. Implement the ZeroEvenOdd class: ZeroEvenOdd(int n) Initializes the object with the number n that represents the numbers that should be printed. void zero(printNumber) Calls printNumber to output one zero. void even(printNumber) Calls printNumber to output one even number. void odd(printNumber) Calls printNumber to output one odd number.   Example 1: Input: n = 2 Output: \"0102\" Explanation: There are three threads being fired asynchronously. One of them calls zero(), the other calls even(), and the last one calls odd(). \"0102\" is the correct output. Example 2: Input: n = 5 Output: \"0102030405\"   Constraints: 1 <= n <= 1000",
        "868": "There are two kinds of threads: oxygen and hydrogen. Your goal is to group these threads to form water molecules. There is a barrier where each thread has to wait until a complete molecule can be formed. Hydrogen and oxygen threads will be given releaseHydrogen and releaseOxygen methods respectively, which will allow them to pass the barrier. These threads should pass the barrier in groups of three, and they must immediately bond with each other to form a water molecule. You must guarantee that all the threads from one molecule bond before any other threads from the next molecule do. In other words: If an oxygen thread arrives at the barrier when no hydrogen threads are present, it must wait for two hydrogen threads. If a hydrogen thread arrives at the barrier when no other threads are present, it must wait for an oxygen thread and another hydrogen thread. We do not have to worry about matching the threads up explicitly; the threads do not necessarily know which other threads they are paired up with. The key is that threads pass the barriers in complete sets; thus, if we examine the sequence of threads that bind and divide them into groups of three, each group should contain one oxygen and two hydrogen threads. Write synchronization code for oxygen and hydrogen molecules that enforces these constraints.   Example 1: Input: water = \"HOH\" Output: \"HHO\" Explanation: \"HOH\" and \"OHH\" are also valid answers. Example 2: Input: water = \"OOHHHH\" Output: \"HHOHHO\" Explanation: \"HOHHHO\", \"OHHHHO\", \"HHOHOH\", \"HOHHOH\", \"OHHHOH\", \"HHOOHH\", \"HOHOHH\" and \"OHHOHH\" are also valid answers.   Constraints: 3 * n == water.length 1 <= n <= 20 water[i] is either 'H' or 'O'. There will be exactly 2 * n 'H' in water. There will be exactly n 'O' in water.",
        "869": "Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1. Sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2. Elements that do not appear in arr2 should be placed at the end of arr1 in ascending order.   Example 1: Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6] Output: [2,2,2,1,4,3,3,9,6,7,19] Example 2: Input: arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6] Output: [22,28,8,6,17,44]   Constraints: 1 <= arr1.length, arr2.length <= 1000 0 <= arr1[i], arr2[i] <= 1000 All the elements of arr2 are distinct. Each arr2[i] is in arr1.",
        "870": "Given the root of a binary tree, return the lowest common ancestor of its deepest leaves. Recall that: The node of a binary tree is a leaf if and only if it has no children The depth of the root of the tree is 0. if the depth of a node is d, the depth of each of its children is d + 1. The lowest common ancestor of a set S of nodes, is the node A with the largest depth such that every node in S is in the subtree with root A.   Example 1: Input: root = [3,5,1,6,2,0,8,null,null,7,4] Output: [2,7,4] Explanation: We return the node with value 2, colored in yellow in the diagram. The nodes coloured in blue are the deepest leaf-nodes of the tree. Note that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3. Example 2: Input: root = [1] Output: [1] Explanation: The root is the deepest node in the tree, and it's the lca of itself. Example 3: Input: root = [0,1,3,null,2] Output: [2] Explanation: The deepest leaf node in the tree is 2, the lca of one node is itself.   Constraints: The number of nodes in the tree will be in the range [1, 1000]. 0 <= Node.val <= 1000 The values of the nodes in the tree are unique.   Note: This question is the same as 865: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/",
        "871": "We are given hours, a list of the number of hours worked per day for a given employee. A day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than 8. A well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days. Return the length of the longest well-performing interval.   Example 1: Input: hours = [9,9,6,0,6,6,9] Output: 3 Explanation: The longest well-performing interval is [9,9,6]. Example 2: Input: hours = [6,6,6] Output: 0   Constraints: 1 <= hours.length <= 104 0 <= hours[i] <= 16",
        "872": "In a project, you have a list of required skills req_skills, and a list of people. The ith person people[i] contains a list of skills that the person has. Consider a sufficient team: a set of people such that for every required skill in req_skills, there is at least one person in the team who has that skill. We can represent these teams by the index of each person. For example, team = [0, 1, 3] represents the people with skills people[0], people[1], and people[3]. Return any sufficient team of the smallest possible size, represented by the index of each person. You may return the answer in any order. It is guaranteed an answer exists.   Example 1: Input: req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]] Output: [0,2] Example 2: Input: req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]] Output: [1,2]   Constraints: 1 <= req_skills.length <= 16 1 <= req_skills[i].length <= 16 req_skills[i] consists of lowercase English letters. All the strings of req_skills are unique. 1 <= people.length <= 60 0 <= people[i].length <= 16 1 <= people[i][j].length <= 16 people[i][j] consists of lowercase English letters. All the strings of people[i] are unique. Every skill in people[i] is a skill in req_skills. It is guaranteed a sufficient team exists.",
        "873": "Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino. Return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].   Example 1: Input: dominoes = [[1,2],[2,1],[3,4],[5,6]] Output: 1 Example 2: Input: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]] Output: 3   Constraints: 1 <= dominoes.length <= 4 * 104 dominoes[i].length == 2 1 <= dominoes[i][j] <= 9",
        "874": "You are given an integer n, the number of nodes in a directed graph where the nodes are labeled from 0 to n - 1. Each edge is red or blue in this graph, and there could be self-edges and parallel edges. You are given two arrays redEdges and blueEdges where: redEdges[i] = [ai, bi] indicates that there is a directed red edge from node ai to node bi in the graph, and blueEdges[j] = [uj, vj] indicates that there is a directed blue edge from node uj to node vj in the graph. Return an array answer of length n, where each answer[x] is the length of the shortest path from node 0 to node x such that the edge colors alternate along the path, or -1 if such a path does not exist.   Example 1: Input: n = 3, redEdges = [[0,1],[1,2]], blueEdges = [] Output: [0,1,-1] Example 2: Input: n = 3, redEdges = [[0,1]], blueEdges = [[2,1]] Output: [0,1,-1]   Constraints: 1 <= n <= 100 0 <= redEdges.length, blueEdges.length <= 400 redEdges[i].length == blueEdges[j].length == 2 0 <= ai, bi, uj, vj < n",
        "875": "Given an array arr of positive integers, consider all binary trees such that: Each node has either 0 or 2 children; The values of arr correspond to the values of each leaf in an in-order traversal of the tree. The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively. Among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node. It is guaranteed this sum fits into a 32-bit integer. A node is a leaf if and only if it has zero children.   Example 1: Input: arr = [6,2,4] Output: 32 Explanation: There are two possible trees shown. The first has a non-leaf node sum 36, and the second has non-leaf node sum 32. Example 2: Input: arr = [4,11] Output: 44   Constraints: 2 <= arr.length <= 40 1 <= arr[i] <= 15 It is guaranteed that the answer fits into a 32-bit signed integer (i.e., it is less than 231).",
        "876": "Given two arrays of integers with equal lengths, return the maximum value of: |arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j| where the maximum is taken over all 0 <= i, j < arr1.length.   Example 1: Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6] Output: 13 Example 2: Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4] Output: 20   Constraints: 2 <= arr1.length == arr2.length <= 40000 -10^6 <= arr1[i], arr2[i] <= 10^6",
        "877": "The Tribonacci sequence Tn is defined as follows:  T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0. Given n, return the value of Tn.   Example 1: Input: n = 4 Output: 4 Explanation: T_3 = 0 + 1 + 1 = 2 T_4 = 1 + 1 + 2 = 4 Example 2: Input: n = 25 Output: 1389537   Constraints: 0 <= n <= 37 The answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1.",
        "878": "On an alphabet board, we start at position (0, 0), corresponding to character board[0][0]. Here, board = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"], as shown in the diagram below. We may make the following moves: 'U' moves our position up one row, if the position exists on the board; 'D' moves our position down one row, if the position exists on the board; 'L' moves our position left one column, if the position exists on the board; 'R' moves our position right one column, if the position exists on the board; '!' adds the character board[r][c] at our current position (r, c) to the answer. (Here, the only positions that exist on the board are positions with letters on them.) Return a sequence of moves that makes our answer equal to target in the minimum number of moves.  You may return any path that does so.   Example 1: Input: target = \"leet\" Output: \"DDR!UURRR!!DDD!\" Example 2: Input: target = \"code\" Output: \"RR!DDRR!UUL!R!\"   Constraints: 1 <= target.length <= 100 target consists only of English lowercase letters.",
        "879": "Given a 2D grid of 0s and 1s, return the number of elements in the largest square subgrid that has all 1s on its border, or 0 if such a subgrid doesn't exist in the grid.   Example 1: Input: grid = [[1,1,1],[1,0,1],[1,1,1]] Output: 9 Example 2: Input: grid = [[1,1,0,0]] Output: 1   Constraints: 1 <= grid.length <= 100 1 <= grid[0].length <= 100 grid[i][j] is 0 or 1",
        "880": "Alice and Bob continue their games with piles of stones. There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i]. The objective of the game is to end with the most stones. Alice and Bob take turns, with Alice starting first. On each player's turn, that player can take all the stones in the first X remaining piles, where 1 <= X <= 2M. Then, we set M = max(M, X). Initially, M = 1. The game continues until all the stones have been taken. Assuming Alice and Bob play optimally, return the maximum number of stones Alice can get.   Example 1: Input: piles = [2,7,9,4,4] Output: 10 Explanation: If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 stones in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 stones in total. So we return 10 since it's larger. Example 2: Input: piles = [1,2,3,4,5,100] Output: 104   Constraints: 1 <= piles.length <= 100 1 <= piles[i] <= 104",
        "881": "SQL Schema Pandas Schema",
        "882": "Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. For example, \"ace\" is a subsequence of \"abcde\". A common subsequence of two strings is a subsequence that is common to both strings.   Example 1: Input: text1 = \"abcde\", text2 = \"ace\"  Output: 3   Explanation: The longest common subsequence is \"ace\" and its length is 3. Example 2: Input: text1 = \"abc\", text2 = \"abc\" Output: 3 Explanation: The longest common subsequence is \"abc\" and its length is 3. Example 3: Input: text1 = \"abc\", text2 = \"def\" Output: 0 Explanation: There is no such common subsequence, so the result is 0.   Constraints: 1 <= text1.length, text2.length <= 1000 text1 and text2 consist of only lowercase English characters.",
        "883": "Given an array nums of integers, a move consists of choosing any element and decreasing it by 1. An array A is a zigzag array if either: Every even-indexed element is greater than adjacent elements, ie. A[0] > A[1] < A[2] > A[3] < A[4] > ... OR, every odd-indexed element is greater than adjacent elements, ie. A[0] < A[1] > A[2] < A[3] > A[4] < ... Return the minimum number of moves to transform the given array nums into a zigzag array.   Example 1: Input: nums = [1,2,3] Output: 2 Explanation: We can decrease 2 to 0 or 3 to 1. Example 2: Input: nums = [9,6,1,6,2] Output: 4   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 1000",
        "884": "Two players play a turn based game on a binary tree. We are given the root of this binary tree, and the number of nodes n in the tree. n is odd, and each node has a distinct value from 1 to n. Initially, the first player names a value x with 1 <= x <= n, and the second player names a value y with 1 <= y <= n and y != x. The first player colors the node with value x red, and the second player colors the node with value y blue. Then, the players take turns starting with the first player. In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.) If (and only if) a player cannot choose such a node in this way, they must pass their turn. If both players pass their turn, the game ends, and the winner is the player that colored more nodes. You are the second player. If it is possible to choose such a y to ensure you win the game, return true. If it is not possible, return false.   Example 1: Input: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3 Output: true Explanation: The second player can choose the node with value 2. Example 2: Input: root = [1,2,3], n = 3, x = 1 Output: false   Constraints: The number of nodes in the tree is n. 1 <= x <= n <= 100 n is odd. 1 <= Node.val <= n All the values of the tree are unique.",
        "885": "Implement a SnapshotArray that supports the following interface: SnapshotArray(int length) initializes an array-like data structure with the given length. Initially, each element equals 0. void set(index, val) sets the element at the given index to be equal to val. int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1. int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id   Example 1: Input: [\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"] [[3],[0,5],[],[0,6],[0,0]] Output: [null,null,0,null,5] Explanation:  SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3 snapshotArr.set(0,5);  // Set array[0] = 5 snapshotArr.snap();  // Take a snapshot, return snap_id = 0 snapshotArr.set(0,6); snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5   Constraints: 1 <= length <= 5 * 104 0 <= index < length 0 <= val <= 109 0 <= snap_id < (the total number of times we call snap()) At most 5 * 104 calls will be made to set, snap, and get.",
        "886": "You are given a string text. You should split it to k substrings (subtext1, subtext2, ..., subtextk) such that: subtexti is a non-empty string. The concatenation of all the substrings is equal to text (i.e., subtext1 + subtext2 + ... + subtextk == text). subtexti == subtextk - i + 1 for all valid values of i (i.e., 1 <= i <= k). Return the largest possible value of k.   Example 1: Input: text = \"ghiabcdefhelloadamhelloabcdefghi\" Output: 7 Explanation: We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\". Example 2: Input: text = \"merchant\" Output: 1 Explanation: We can split the string on \"(merchant)\". Example 3: Input: text = \"antaprezatepzapreanta\" Output: 11 Explanation: We can split the string on \"(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a)\".   Constraints: 1 <= text.length <= 1000 text consists only of lowercase English characters.",
        "887": "SQL Schema Pandas Schema",
        "888": "Given a string date representing a Gregorian calendar date formatted as YYYY-MM-DD, return the day number of the year.   Example 1: Input: date = \"2019-01-09\" Output: 9 Explanation: Given date is the 9th day of the year in 2019. Example 2: Input: date = \"2019-02-10\" Output: 41   Constraints: date.length == 10 date[4] == date[7] == '-', and all other date[i]'s are digits date represents a calendar date between Jan 1st, 1900 and Dec 31th, 2019.",
        "889": "You have n dice, and each dice has k faces numbered from 1 to k. Given three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice, so the sum of the face-up numbers equals target. Since the answer may be too large, return it modulo 109 + 7.   Example 1: Input: n = 1, k = 6, target = 3 Output: 1 Explanation: You throw one die with 6 faces. There is only one way to get a sum of 3. Example 2: Input: n = 2, k = 6, target = 7 Output: 6 Explanation: You throw two dice, each with 6 faces. There are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1. Example 3: Input: n = 30, k = 30, target = 500 Output: 222616187 Explanation: The answer must be returned modulo 109 + 7.   Constraints: 1 <= n, k <= 30 1 <= target <= 1000",
        "890": "Design a data structure that efficiently finds the majority element of a given subarray. The majority element of a subarray is an element that occurs threshold times or more in the subarray. Implementing the MajorityChecker class: MajorityChecker(int[] arr) Initializes the instance of the class with the given array arr. int query(int left, int right, int threshold) returns the element in the subarray arr[left...right] that occurs at least threshold times, or -1 if no such element exists.   Example 1: Input [\"MajorityChecker\", \"query\", \"query\", \"query\"] [[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]] Output [null, 1, -1, 2]  Explanation MajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]); majorityChecker.query(0, 5, 4); // return 1 majorityChecker.query(0, 3, 3); // return -1 majorityChecker.query(2, 3, 2); // return 2   Constraints: 1 <= arr.length <= 2 * 104 1 <= arr[i] <= 2 * 104 0 <= left <= right < arr.length threshold <= right - left + 1 2 * threshold > right - left + 1 At most 104 calls will be made to query.",
        "891": "SQL Schema Pandas Schema",
        "892": "You are given an array of strings words and a string chars. A string is good if it can be formed by characters from chars (each character can only be used once). Return the sum of lengths of all good strings in words.   Example 1: Input: words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\" Output: 6 Explanation: The strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6. Example 2: Input: words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\" Output: 10 Explanation: The strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10.   Constraints: 1 <= words.length <= 1000 1 <= words[i].length, chars.length <= 100 words[i] and chars consist of lowercase English letters.",
        "893": "Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on. Return the smallest level x such that the sum of all the values of nodes at level x is maximal.   Example 1: Input: root = [1,7,0,7,-8,null,null] Output: 2 Explanation:  Level 1 sum = 1. Level 2 sum = 7 + 0 = 7. Level 3 sum = 7 + -8 = -1. So we return the level with the maximum sum which is level 2. Example 2: Input: root = [989,null,10250,98693,-89388,null,null,null,-32127] Output: 2   Constraints: The number of nodes in the tree is in the range [1, 104]. -105 <= Node.val <= 105",
        "894": "Given a string s, return the last substring of s in lexicographical order.   Example 1: Input: s = \"abab\" Output: \"bab\" Explanation: The substrings are [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]. The lexicographically maximum substring is \"bab\". Example 2: Input: s = \"leetcode\" Output: \"tcode\"   Constraints: 1 <= s.length <= 4 * 105 s contains only lowercase English letters.",
        "895": "SQL Schema Pandas Schema",
        "896": "A transaction is possibly invalid if: the amount exceeds $1000, or; if it occurs within (and including) 60 minutes of another transaction with the same name in a different city. You are given an array of strings transaction where transactions[i] consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction. Return a list of transactions that are possibly invalid. You may return the answer in any order.   Example 1: Input: transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"] Output: [\"alice,20,800,mtv\",\"alice,50,100,beijing\"] Explanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too. Example 2: Input: transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"] Output: [\"alice,50,1200,mtv\"] Example 3: Input: transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"] Output: [\"bob,50,1200,mtv\"]   Constraints: transactions.length <= 1000 Each transactions[i] takes the form \"{name},{time},{amount},{city}\" Each {name} and {city} consist of lowercase English letters, and have lengths between 1 and 10. Each {time} consist of digits, and represent an integer between 0 and 1000. Each {amount} consist of digits, and represent an integer between 0 and 2000.",
        "897": "Let the function f(s) be the frequency of the lexicographically smallest character in a non-empty string s. For example, if s = \"dcce\" then f(s) = 2 because the lexicographically smallest character is 'c', which has a frequency of 2. You are given an array of strings words and another array of query strings queries. For each query queries[i], count the number of words in words such that f(queries[i]) < f(W) for each W in words. Return an integer array answer, where each answer[i] is the answer to the ith query.   Example 1: Input: queries = [\"cbd\"], words = [\"zaaaz\"] Output: [1] Explanation: On the first query we have f(\"cbd\") = 1, f(\"zaaaz\") = 3 so f(\"cbd\") < f(\"zaaaz\"). Example 2: Input: queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"] Output: [1,2] Explanation: On the first query only f(\"bbb\") < f(\"aaaa\"). On the second query both f(\"aaa\") and f(\"aaaa\") are both > f(\"cc\").   Constraints: 1 <= queries.length <= 2000 1 <= words.length <= 2000 1 <= queries[i].length, words[i].length <= 10 queries[i][j], words[i][j] consist of lowercase English letters.",
        "898": "Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences. After doing so, return the head of the final linked list.  You may return any such answer.   (Note that in the examples below, all sequences are serializations of ListNode objects.) Example 1: Input: head = [1,2,-3,3,1] Output: [3,1] Note: The answer [1,2,1] would also be accepted. Example 2: Input: head = [1,2,3,-3,4] Output: [1,2,4] Example 3: Input: head = [1,2,3,-3,-2] Output: [1]   Constraints: The given linked list will contain between 1 and 1000 nodes. Each node in the linked list has -1000 <= node.val <= 1000.",
        "899": "Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.) (Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.) Since the answer may be large, return the answer modulo 10^9 + 7.   Example 1: Input: n = 5 Output: 12 Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1. Example 2: Input: n = 100 Output: 682289015   Constraints: 1 <= n <= 100",
        "900": "You are given a string s and array queries where queries[i] = [lefti, righti, ki]. We may rearrange the substring s[lefti...righti] for each query and then choose up to ki of them to replace with any lowercase English letter. If the substring is possible to be a palindrome string after the operations above, the result of the query is true. Otherwise, the result is false. Return a boolean array answer where answer[i] is the result of the ith query queries[i]. Note that each letter is counted individually for replacement, so if, for example s[lefti...righti] = \"aaa\", and ki = 2, we can only replace two of the letters. Also, note that no query modifies the initial string s.   Example : Input: s = \"abcda\", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]] Output: [true,false,false,true,true] Explanation: queries[0]: substring = \"d\", is palidrome. queries[1]: substring = \"bc\", is not palidrome. queries[2]: substring = \"abcd\", is not palidrome after replacing only 1 character. queries[3]: substring = \"abcd\", could be changed to \"abba\" which is palidrome. Also this can be changed to \"baab\" first rearrange it \"bacd\" then replace \"cd\" with \"ab\". queries[4]: substring = \"abcda\", could be changed to \"abcba\" which is palidrome. Example 2: Input: s = \"lyb\", queries = [[0,1,0],[2,2,1]] Output: [false,true]   Constraints: 1 <= s.length, queries.length <= 105 0 <= lefti <= righti < s.length 0 <= ki <= s.length s consists of lowercase English letters.",
        "901": "With respect to a given puzzle string, a word is valid if both the following conditions are satisfied: word contains the first letter of puzzle. For each letter in word, that letter is in puzzle. For example, if the puzzle is \"abcdefg\", then valid words are \"faced\", \"cabbage\", and \"baggage\", while invalid words are \"beefed\" (does not include 'a') and \"based\" (includes 's' which is not in the puzzle). Return an array answer, where answer[i] is the number of words in the given word list words that is valid with respect to the puzzle puzzles[i].   Example 1: Input: words = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"], puzzles = [\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"] Output: [1,1,3,2,4,0] Explanation:  1 valid word for \"aboveyz\" : \"aaaa\"  1 valid word for \"abrodyz\" : \"aaaa\" 3 valid words for \"abslute\" : \"aaaa\", \"asas\", \"able\" 2 valid words for \"absoryz\" : \"aaaa\", \"asas\" 4 valid words for \"actresz\" : \"aaaa\", \"asas\", \"actt\", \"access\" There are no valid words for \"gaswxyz\" cause none of the words in the list contains letter 'g'. Example 2: Input: words = [\"apple\",\"pleas\",\"please\"], puzzles = [\"aelwxyz\",\"aelpxyz\",\"aelpsxy\",\"saelpxy\",\"xaelpsy\"] Output: [0,1,3,2,0]   Constraints: 1 <= words.length <= 105 4 <= words[i].length <= 50 1 <= puzzles.length <= 104 puzzles[i].length == 7 words[i] and puzzles[i] consist of lowercase English letters. Each puzzles[i] does not contain repeated characters.",
        "902": "SQL Schema Pandas Schema",
        "903": "A bus has n stops numbered from 0 to n - 1 that form a circle. We know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number i and (i + 1) % n. The bus goes along both directions i.e. clockwise and counterclockwise. Return the shortest distance between the given start and destination stops.   Example 1: Input: distance = [1,2,3,4], start = 0, destination = 1 Output: 1 Explanation: Distance between 0 and 1 is 1 or 9, minimum is 1.   Example 2: Input: distance = [1,2,3,4], start = 0, destination = 2 Output: 3 Explanation: Distance between 0 and 2 is 3 or 7, minimum is 3.   Example 3: Input: distance = [1,2,3,4], start = 0, destination = 3 Output: 4 Explanation: Distance between 0 and 3 is 6 or 4, minimum is 4.   Constraints: 1 <= n <= 10^4 distance.length == n 0 <= start, destination < n 0 <= distance[i] <= 10^4",
        "904": "Given a date, return the corresponding day of the week for that date. The input is given as three integers representing the day, month and year respectively. Return the answer as one of the following values {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}.   Example 1: Input: day = 31, month = 8, year = 2019 Output: \"Saturday\" Example 2: Input: day = 18, month = 7, year = 1999 Output: \"Sunday\" Example 3: Input: day = 15, month = 8, year = 1993 Output: \"Sunday\"   Constraints: The given dates are valid dates between the years 1971 and 2100.",
        "905": "Given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible. Note that the subarray needs to be non-empty after deleting one element.   Example 1: Input: arr = [1,-2,0,3] Output: 4 Explanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value. Example 2: Input: arr = [1,-2,-2,3] Output: 3 Explanation: We just choose [3] and it's the maximum sum. Example 3: Input: arr = [-1,-1,-1,-1] Output: -1 Explanation: The final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0.   Constraints: 1 <= arr.length <= 105 -104 <= arr[i] <= 104",
        "906": "Given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing. In one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j]. If there is no way to make arr1 strictly increasing, return -1.   Example 1: Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4] Output: 1 Explanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7]. Example 2: Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1] Output: 2 Explanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7]. Example 3: Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3] Output: -1 Explanation: You can't make arr1 strictly increasing.   Constraints: 1 <= arr1.length, arr2.length <= 2000 0 <= arr1[i], arr2[i] <= 10^9  ",
        "907": "Given a string text, you want to use the characters of text to form as many instances of the word \"balloon\" as possible. You can use each character in text at most once. Return the maximum number of instances that can be formed.   Example 1: Input: text = \"nlaebolko\" Output: 1 Example 2: Input: text = \"loonbalxballpoon\" Output: 2 Example 3: Input: text = \"leetcode\" Output: 0   Constraints: 1 <= text.length <= 104 text consists of lower case English letters only.   Note: This question is the same as 2287: Rearrange Characters to Make Target String.",
        "908": "Given an integer array arr and an integer k, modify the array by repeating it k times. For example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2]. Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0 and its sum in that case is 0. As the answer can be very large, return the answer modulo 109 + 7.   Example 1: Input: arr = [1,2], k = 3 Output: 9 Example 2: Input: arr = [1,-2,1], k = 5 Output: 2 Example 3: Input: arr = [-1,-2], k = 7 Output: 0   Constraints: 1 <= arr.length <= 105 1 <= k <= 105 -104 <= arr[i] <= 104",
        "909": "SQL Schema Pandas Schema",
        "910": "You have the four functions: printFizz that prints the word \"fizz\" to the console, printBuzz that prints the word \"buzz\" to the console, printFizzBuzz that prints the word \"fizzbuzz\" to the console, and printNumber that prints a given integer to the console. You are given an instance of the class FizzBuzz that has four functions: fizz, buzz, fizzbuzz and number. The same instance of FizzBuzz will be passed to four different threads: Thread A: calls fizz() that should output the word \"fizz\". Thread B: calls buzz() that should output the word \"buzz\". Thread C: calls fizzbuzz() that should output the word \"fizzbuzz\". Thread D: calls number() that should only output the integers. Modify the given class to output the series [1, 2, \"fizz\", 4, \"buzz\", ...] where the ith token (1-indexed) of the series is: \"fizzbuzz\" if i is divisible by 3 and 5, \"fizz\" if i is divisible by 3 and not 5, \"buzz\" if i is divisible by 5 and not 3, or i if i is not divisible by 3 or 5. Implement the FizzBuzz class: FizzBuzz(int n) Initializes the object with the number n that represents the length of the sequence that should be printed. void fizz(printFizz) Calls printFizz to output \"fizz\". void buzz(printBuzz) Calls printBuzz to output \"buzz\". void fizzbuzz(printFizzBuzz) Calls printFizzBuzz to output \"fizzbuzz\". void number(printNumber) Calls printnumber to output the numbers.   Example 1: Input: n = 15 Output: [1,2,\"fizz\",4,\"buzz\",\"fizz\",7,8,\"fizz\",\"buzz\",11,\"fizz\",13,14,\"fizzbuzz\"] Example 2: Input: n = 5 Output: [1,2,\"fizz\",4,\"buzz\"]   Constraints: 1 <= n <= 50",
        "911": "Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements. Return a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows a, b are from arr a < b b - a equals to the minimum absolute difference of any two elements in arr   Example 1: Input: arr = [4,2,1,3] Output: [[1,2],[2,3],[3,4]] Explanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order. Example 2: Input: arr = [1,3,6,10,15] Output: [[1,3]] Example 3: Input: arr = [3,8,-10,23,19,-4,-14,27] Output: [[-14,-10],[19,23],[23,27]]   Constraints: 2 <= arr.length <= 105 -106 <= arr[i] <= 106",
        "912": "An ugly number is a positive integer that is divisible by a, b, or c. Given four integers n, a, b, and c, return the nth ugly number.   Example 1: Input: n = 3, a = 2, b = 3, c = 5 Output: 4 Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4. Example 2: Input: n = 4, a = 2, b = 3, c = 4 Output: 6 Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6. Example 3: Input: n = 5, a = 2, b = 11, c = 13 Output: 10 Explanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.   Constraints: 1 <= n, a, b, c <= 109 1 <= a * b * c <= 1018 It is guaranteed that the result will be in range [1, 2 * 109].",
        "913": "You are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string. You can swap the characters at any pair of indices in the given pairs any number of times. Return the lexicographically smallest string that s can be changed to after using the swaps.   Example 1: Input: s = \"dcab\", pairs = [[0,3],[1,2]] Output: \"bacd\" Explaination:  Swap s[0] and s[3], s = \"bcad\" Swap s[1] and s[2], s = \"bacd\" Example 2: Input: s = \"dcab\", pairs = [[0,3],[1,2],[0,2]] Output: \"abcd\" Explaination:  Swap s[0] and s[3], s = \"bcad\" Swap s[0] and s[2], s = \"acbd\" Swap s[1] and s[2], s = \"abcd\" Example 3: Input: s = \"cba\", pairs = [[0,1],[1,2]] Output: \"abc\" Explaination:  Swap s[0] and s[1], s = \"bca\" Swap s[1] and s[2], s = \"bac\" Swap s[0] and s[1], s = \"abc\"   Constraints: 1 <= s.length <= 10^5 0 <= pairs.length <= 10^5 0 <= pairs[i][0], pairs[i][1] < s.length s only contains lower case English letters.",
        "914": "There are n items each belonging to zero or one of m groups where group[i] is the group that the i-th item belongs to and it's equal to -1 if the i-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it. Return a sorted list of the items such that: The items that belong to the same group are next to each other in the sorted list. There are some relations between these items where beforeItems[i] is a list containing all the items that should come before the i-th item in the sorted array (to the left of the i-th item). Return any solution if there is more than one solution and return an empty list if there is no solution.   Example 1: Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]] Output: [6,3,4,1,5,2,0,7] Example 2: Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]] Output: [] Explanation: This is the same as example 1 except that 4 needs to be before 6 in the sorted list.   Constraints: 1 <= m <= n <= 3 * 104 group.length == beforeItems.length == n -1 <= group[i] <= m - 1 0 <= beforeItems[i].length <= n - 1 0 <= beforeItems[i][j] <= n - 1 i != beforeItems[i][j] beforeItems[i] does not contain duplicates elements.",
        "915": "SQL Schema Pandas Schema",
        "916": "Design a Skiplist without using any built-in libraries. A skiplist is a data structure that takes O(log(n)) time to add, erase and search. Comparing with treap and red-black tree which has the same function and performance, the code length of Skiplist can be comparatively short and the idea behind Skiplists is just simple linked lists. For example, we have a Skiplist containing [30,40,50,60,70,90] and we want to add 80 and 45 into it. The Skiplist works this way:  Artyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons You can see there are many layers in the Skiplist. Each layer is a sorted linked list. With the help of the top layers, add, erase and search can be faster than O(n). It can be proven that the average time complexity for each operation is O(log(n)) and space complexity is O(n). See more about Skiplist: https://en.wikipedia.org/wiki/Skip_list Implement the Skiplist class: Skiplist() Initializes the object of the skiplist. bool search(int target) Returns true if the integer target exists in the Skiplist or false otherwise. void add(int num) Inserts the value num into the SkipList. bool erase(int num) Removes the value num from the Skiplist and returns true. If num does not exist in the Skiplist, do nothing and return false. If there exist multiple num values, removing any one of them is fine. Note that duplicates may exist in the Skiplist, your code needs to handle this situation.   Example 1: Input [\"Skiplist\", \"add\", \"add\", \"add\", \"search\", \"add\", \"search\", \"erase\", \"erase\", \"search\"] [[], [1], [2], [3], [0], [4], [1], [0], [1], [1]] Output [null, null, null, null, false, null, true, false, true, false]  Explanation Skiplist skiplist = new Skiplist(); skiplist.add(1); skiplist.add(2); skiplist.add(3); skiplist.search(0); // return False skiplist.add(4); skiplist.search(1); // return True skiplist.erase(0);  // return False, 0 is not in skiplist. skiplist.erase(1);  // return True skiplist.search(1); // return False, 1 has already been erased.   Constraints: 0 <= num, target <= 2 * 104 At most 5 * 104 calls will be made to search, add, and erase.",
        "917": "Given an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.   Example 1: Input: arr = [1,2,2,1,1,3] Output: true Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences. Example 2: Input: arr = [1,2] Output: false Example 3: Input: arr = [-3,0,1,-3,1,1,1,-3,10,0] Output: true   Constraints: 1 <= arr.length <= 1000 -1000 <= arr[i] <= 1000",
        "918": "You are given two strings s and t of the same length and an integer maxCost. You want to change s to t. Changing the ith character of s to ith character of t costs |s[i] - t[i]| (i.e., the absolute difference between the ASCII values of the characters). Return the maximum length of a substring of s that can be changed to be the same as the corresponding substring of t with a cost less than or equal to maxCost. If there is no substring from s that can be changed to its corresponding substring from t, return 0.   Example 1: Input: s = \"abcd\", t = \"bcdf\", maxCost = 3 Output: 3 Explanation: \"abc\" of s can change to \"bcd\". That costs 3, so the maximum length is 3. Example 2: Input: s = \"abcd\", t = \"cdef\", maxCost = 3 Output: 1 Explanation: Each character in s costs 2 to change to character in t,  so the maximum length is 1. Example 3: Input: s = \"abcd\", t = \"acde\", maxCost = 0 Output: 1 Explanation: You cannot make any change, so the maximum length is 1.   Constraints: 1 <= s.length <= 105 t.length == s.length 0 <= maxCost <= 106 s and t consist of only lowercase English letters.",
        "919": "You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together. We repeatedly make k duplicate removals on s until we no longer can. Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.   Example 1: Input: s = \"abcd\", k = 2 Output: \"abcd\" Explanation: There's nothing to delete. Example 2: Input: s = \"deeedbbcccbdaa\", k = 3 Output: \"aa\" Explanation:  First delete \"eee\" and \"ccc\", get \"ddbbbdaa\" Then delete \"bbb\", get \"dddaa\" Finally delete \"ddd\", get \"aa\" Example 3: Input: s = \"pbbcggttciiippooaais\", k = 2 Output: \"ps\"   Constraints: 1 <= s.length <= 105 2 <= k <= 104 s only contains lowercase English letters.",
        "920": "In an n*n grid, there is a snake that spans 2 cells and starts moving from the top left corner at (0, 0) and (0, 1). The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at (n-1, n-2) and (n-1, n-1). In one move the snake can: Move one cell to the right if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is. Move down one cell if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is. Rotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from (r, c) and (r, c+1) to (r, c) and (r+1, c). Rotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from (r, c) and (r+1, c) to (r, c) and (r, c+1). Return the minimum number of moves to reach the target. If there is no way to reach the target, return -1.   Example 1: Input: grid = [[0,0,0,0,0,1],                [1,1,0,0,1,0],                [0,0,0,0,1,1],                [0,0,1,0,1,0],                [0,1,1,0,0,0],                [0,1,1,0,0,0]] Output: 11 Explanation: One possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down]. Example 2: Input: grid = [[0,0,1,1,1,1],                [0,0,0,0,1,1],                [1,1,0,0,0,1],                [1,1,1,0,0,1],                [1,1,1,0,0,1],                [1,1,1,0,0,0]] Output: 9   Constraints: 2 <= n <= 100 0 <= grid[i][j] <= 1 It is guaranteed that the snake starts at empty cells.",
        "921": "SQL Schema Pandas Schema",
        "922": "We have n chips, where the position of the ith chip is position[i]. We need to move all the chips to the same position. In one step, we can change the position of the ith chip from position[i] to: position[i] + 2 or position[i] - 2 with cost = 0. position[i] + 1 or position[i] - 1 with cost = 1. Return the minimum cost needed to move all the chips to the same position.   Example 1: Input: position = [1,2,3] Output: 1 Explanation: First step: Move the chip at position 3 to position 1 with cost = 0. Second step: Move the chip at position 2 to position 1 with cost = 1. Total cost is 1. Example 2: Input: position = [2,2,2,3,3] Output: 2 Explanation: We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2. Example 3: Input: position = [1,1000000000] Output: 1   Constraints: 1 <= position.length <= 100 1 <= position[i] <= 10^9",
        "923": "Given an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference. A subsequence is a sequence that can be derived from arr by deleting some or no elements without changing the order of the remaining elements.   Example 1: Input: arr = [1,2,3,4], difference = 1 Output: 4 Explanation: The longest arithmetic subsequence is [1,2,3,4]. Example 2: Input: arr = [1,3,5,7], difference = 1 Output: 1 Explanation: The longest arithmetic subsequence is any single element. Example 3: Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2 Output: 4 Explanation: The longest arithmetic subsequence is [7,5,3,1].   Constraints: 1 <= arr.length <= 105 -104 <= arr[i], difference <= 104",
        "924": "In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty. Return the maximum amount of gold you can collect under the conditions: Every time you are located in a cell you will collect all the gold in that cell. From your position, you can walk one step to the left, right, up, or down. You can't visit the same cell more than once. Never visit a cell with 0 gold. You can start and stop collecting gold from any position in the grid that has some gold.   Example 1: Input: grid = [[0,6,0],[5,8,7],[0,9,0]] Output: 24 Explanation: [[0,6,0],  [5,8,7],  [0,9,0]] Path to get the maximum gold, 9 -> 8 -> 7. Example 2: Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]] Output: 28 Explanation: [[1,0,7],  [2,0,6],  [3,4,5],  [0,3,0],  [9,0,20]] Path to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 15 0 <= grid[i][j] <= 100 There are at most 25 cells containing gold.",
        "925": "Given an integer n, your task is to count how many strings of length n can be formed under the following rules: Each character is a lower case vowel ('a', 'e', 'i', 'o', 'u') Each vowel 'a' may only be followed by an 'e'. Each vowel 'e' may only be followed by an 'a' or an 'i'. Each vowel 'i' may not be followed by another 'i'. Each vowel 'o' may only be followed by an 'i' or a 'u'. Each vowel 'u' may only be followed by an 'a'. Since the answer may be too large, return it modulo 10^9 + 7.   Example 1: Input: n = 1 Output: 5 Explanation: All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\". Example 2: Input: n = 2 Output: 10 Explanation: All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\". Example 3:  Input: n = 5 Output: 68   Constraints: 1 <= n <= 2 * 10^4",
        "926": "Balanced strings are those that have an equal quantity of 'L' and 'R' characters. Given a balanced string s, split it into some number of substrings such that: Each substring is balanced. Return the maximum number of balanced strings you can obtain.   Example 1: Input: s = \"RLRRLLRLRL\" Output: 4 Explanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'. Example 2: Input: s = \"RLRRRLLRLL\" Output: 2 Explanation: s can be split into \"RL\", \"RRRLLRLL\", each substring contains same number of 'L' and 'R'. Note that s cannot be split into \"RL\", \"RR\", \"RL\", \"LR\", \"LL\", because the 2nd and 5th substrings are not balanced. Example 3: Input: s = \"LLLLRRRR\" Output: 1 Explanation: s can be split into \"LLLLRRRR\".   Constraints: 2 <= s.length <= 1000 s[i] is either 'L' or 'R'. s is a balanced string.",
        "927": "On a 0-indexed 8 x 8 chessboard, there can be multiple black queens and one white king. You are given a 2D integer array queens where queens[i] = [xQueeni, yQueeni] represents the position of the ith black queen on the chessboard. You are also given an integer array king of length 2 where king = [xKing, yKing] represents the position of the white king. Return the coordinates of the black queens that can directly attack the king. You may return the answer in any order.   Example 1: Input: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0] Output: [[0,1],[1,0],[3,3]] Explanation: The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes). Example 2: Input: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3] Output: [[2,2],[3,4],[4,4]] Explanation: The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes).   Constraints: 1 <= queens.length < 64 queens[i].length == king.length == 2 0 <= xQueeni, yQueeni, xKing, yKing < 8 All the given positions are unique.",
        "928": "A die simulator generates a random number from 1 to 6 for each roll. You introduced a constraint to the generator such that it cannot roll the number i more than rollMax[i] (1-indexed) consecutive times. Given an array of integers rollMax and an integer n, return the number of distinct sequences that can be obtained with exact n rolls. Since the answer may be too large, return it modulo 109 + 7. Two sequences are considered different if at least one element differs from each other.   Example 1: Input: n = 2, rollMax = [1,1,2,2,2,3] Output: 34 Explanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34. Example 2: Input: n = 2, rollMax = [1,1,1,1,1,1] Output: 30 Example 3: Input: n = 3, rollMax = [1,1,1,2,2,3] Output: 181   Constraints: 1 <= n <= 5000 rollMax.length == 6 1 <= rollMax[i] <= 15",
        "929": "Given an array nums of positive integers, return the longest possible length of an array prefix of nums, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences. If after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).   Example 1: Input: nums = [2,2,1,1,5,3,3,5] Output: 7 Explanation: For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4] = 5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice. Example 2: Input: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5] Output: 13   Constraints: 2 <= nums.length <= 105 1 <= nums[i] <= 105",
        "930": "Five silent philosophers sit at a round table with bowls of spaghetti. Forks are placed between each pair of adjacent philosophers. Each philosopher must alternately think and eat. However, a philosopher can only eat spaghetti when they have both left and right forks. Each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher. After an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others. A philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks. Eating is not limited by the remaining amounts of spaghetti or stomach space; an infinite supply and an infinite demand are assumed. Design a discipline of behaviour (a concurrent algorithm) such that no philosopher will starve; i.e., each can forever continue to alternate between eating and thinking, assuming that no philosopher can know when others may want to eat or think. The problem statement and the image above are taken from wikipedia.org   The philosophers' ids are numbered from 0 to 4 in a clockwise order. Implement the function void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork) where: philosopher is the id of the philosopher who wants to eat. pickLeftFork and pickRightFork are functions you can call to pick the corresponding forks of that philosopher. eat is a function you can call to let the philosopher eat once he has picked both forks. putLeftFork and putRightFork are functions you can call to put down the corresponding forks of that philosopher. The philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number). Five threads, each representing a philosopher, will simultaneously use one object of your class to simulate the process. The function may be called for the same philosopher more than once, even before the last call ends.   Example 1: Input: n = 1 Output: [[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]] Explanation: n is the number of times each philosopher will call the function. The output array describes the calls you made to the functions controlling the forks and the eat function, its format is: output[i] = [a, b, c] (three integers) - a is the id of a philosopher. - b specifies the fork: {1 : left, 2 : right}. - c specifies the operation: {1 : pick, 2 : put, 3 : eat}.   Constraints: 1 <= n <= 60",
        "931": "n passengers board an airplane with exactly n seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of the passengers will: Take their own seat if it is still available, and Pick other seats randomly when they find their seat occupied Return the probability that the nth person gets his own seat.   Example 1: Input: n = 1 Output: 1.00000 Explanation: The first person can only get the first seat. Example 2: Input: n = 2 Output: 0.50000 Explanation: The second person has a probability of 0.5 to get the second seat (when first person gets the first seat).   Constraints: 1 <= n <= 105",
        "932": "You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.     Example 1: Input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]] Output: true Example 2: Input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]] Output: false   Constraints: 2 <= coordinates.length <= 1000 coordinates[i].length == 2 -10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4 coordinates contains no duplicate point.",
        "933": "Given a list of folders folder, return the folders after removing all sub-folders in those folders. You may return the answer in any order. If a folder[i] is located within another folder[j], it is called a sub-folder of it. The format of a path is one or more concatenated strings of the form: '/' followed by one or more lowercase English letters. For example, \"/leetcode\" and \"/leetcode/problems\" are valid paths while an empty string and \"/\" are not.   Example 1: Input: folder = [\"/a\",\"/a/b\",\"/c/d\",\"/c/d/e\",\"/c/f\"] Output: [\"/a\",\"/c/d\",\"/c/f\"] Explanation: Folders \"/a/b\" is a subfolder of \"/a\" and \"/c/d/e\" is inside of folder \"/c/d\" in our filesystem. Example 2: Input: folder = [\"/a\",\"/a/b/c\",\"/a/b/d\"] Output: [\"/a\"] Explanation: Folders \"/a/b/c\" and \"/a/b/d\" will be removed because they are subfolders of \"/a\". Example 3: Input: folder = [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"] Output: [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]   Constraints: 1 <= folder.length <= 4 * 104 2 <= folder[i].length <= 100 folder[i] contains only lowercase letters and '/'. folder[i] always starts with the character '/'. Each folder name is unique.",
        "934": "You are given a string s of length n containing only four kinds of characters: 'Q', 'W', 'E', and 'R'. A string is said to be balanced if each of its characters appears n / 4 times where n is the length of the string. Return the minimum length of the substring that can be replaced with any other string of the same length to make s balanced. If s is already balanced, return 0.   Example 1: Input: s = \"QWER\" Output: 0 Explanation: s is already balanced. Example 2: Input: s = \"QQWE\" Output: 1 Explanation: We need to replace a 'Q' to 'R', so that \"RQWE\" (or \"QRWE\") is balanced. Example 3: Input: s = \"QQQW\" Output: 2 Explanation: We can replace the first \"QQ\" to \"ER\".    Constraints: n == s.length 4 <= n <= 105 n is a multiple of 4. s contains only 'Q', 'W', 'E', and 'R'.",
        "935": "Given a callable function f(x, y) with a hidden formula and a value z, reverse engineer the formula and return all positive integer pairs x and y where f(x,y) == z. You may return the pairs in any order. While the exact formula is hidden, the function is monotonically increasing, i.e.: f(x, y) < f(x + 1, y) f(x, y) < f(x, y + 1) The function interface is defined like this: interface CustomFunction { public:   // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.   int f(int x, int y); }; We will judge your solution as follows: The judge has a list of 9 hidden implementations of CustomFunction, along with a way to generate an answer key of all valid pairs for a specific z. The judge will receive two inputs: a function_id (to determine which implementation to test your code with), and the target z. The judge will call your findSolution and compare your results with the answer key. If your results match the answer key, your solution will be Accepted.   Example 1: Input: function_id = 1, z = 5 Output: [[1,4],[2,3],[3,2],[4,1]] Explanation: The hidden formula for function_id = 1 is f(x, y) = x + y. The following positive integer values of x and y make f(x, y) equal to 5: x=1, y=4 -> f(1, 4) = 1 + 4 = 5. x=2, y=3 -> f(2, 3) = 2 + 3 = 5. x=3, y=2 -> f(3, 2) = 3 + 2 = 5. x=4, y=1 -> f(4, 1) = 4 + 1 = 5. Example 2: Input: function_id = 2, z = 5 Output: [[1,5],[5,1]] Explanation: The hidden formula for function_id = 2 is f(x, y) = x * y. The following positive integer values of x and y make f(x, y) equal to 5: x=1, y=5 -> f(1, 5) = 1 * 5 = 5. x=5, y=1 -> f(5, 1) = 5 * 1 = 5.   Constraints: 1 <= function_id <= 9 1 <= z <= 100 It is guaranteed that the solutions of f(x, y) == z will be in the range 1 <= x, y <= 1000. It is also guaranteed that f(x, y) will fit in 32 bit signed integer if 1 <= x, y <= 1000.",
        "936": "Given 2 integers n and start. Your task is return any permutation p of (0,1,2.....,2^n -1) such that : p[0] = start p[i] and p[i+1] differ by only one bit in their binary representation. p[0] and p[2^n -1] must also differ by only one bit in their binary representation.   Example 1: Input: n = 2, start = 3 Output: [3,2,0,1] Explanation: The binary representation of the permutation is (11,10,00,01).  All the adjacent element differ by one bit. Another valid permutation is [3,1,0,2] Example 2: Input: n = 3, start = 2 Output: [2,6,7,5,4,0,1,3] Explanation: The binary representation of the permutation is (010,110,111,101,100,000,001,011).   Constraints: 1 <= n <= 16 0 <= start < 2 ^ n",
        "937": "You are given an array of strings arr. A string s is formed by the concatenation of a subsequence of arr that has unique characters. Return the maximum possible length of s. A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.   Example 1: Input: arr = [\"un\",\"iq\",\"ue\"] Output: 4 Explanation: All the valid concatenations are: - \"\" - \"un\" - \"iq\" - \"ue\" - \"uniq\" (\"un\" + \"iq\") - \"ique\" (\"iq\" + \"ue\") Maximum length is 4. Example 2: Input: arr = [\"cha\",\"r\",\"act\",\"ers\"] Output: 6 Explanation: Possible longest valid concatenations are \"chaers\" (\"cha\" + \"ers\") and \"acters\" (\"act\" + \"ers\"). Example 3: Input: arr = [\"abcdefghijklmnopqrstuvwxyz\"] Output: 26 Explanation: The only string in arr has all 26 characters.   Constraints: 1 <= arr.length <= 16 1 <= arr[i].length <= 26 arr[i] contains only lowercase English letters.",
        "938": "Given a rectangle of size n x m, return the minimum number of integer-sided squares that tile the rectangle.   Example 1: Input: n = 2, m = 3 Output: 3 Explanation: 3 squares are necessary to cover the rectangle. 2 (squares of 1x1) 1 (square of 2x2) Example 2: Input: n = 5, m = 8 Output: 5 Example 3: Input: n = 11, m = 13 Output: 6   Constraints: 1 <= n, m <= 13",
        "939": "You are given two strings s1 and s2 of equal length consisting of letters \"x\" and \"y\" only. Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap s1[i] and s2[j]. Return the minimum number of swaps required to make s1 and s2 equal, or return -1 if it is impossible to do so.   Example 1: Input: s1 = \"xx\", s2 = \"yy\" Output: 1 Explanation: Swap s1[0] and s2[1], s1 = \"yx\", s2 = \"yx\". Example 2: Input: s1 = \"xy\", s2 = \"yx\" Output: 2 Explanation: Swap s1[0] and s2[0], s1 = \"yy\", s2 = \"xx\". Swap s1[0] and s2[1], s1 = \"xy\", s2 = \"xy\". Note that you cannot swap s1[0] and s1[1] to make s1 equal to \"yx\", cause we can only swap chars in different strings. Example 3: Input: s1 = \"xx\", s2 = \"xy\" Output: -1   Constraints: 1 <= s1.length, s2.length <= 1000 s1.length == s2.length s1, s2 only contain 'x' or 'y'.",
        "940": "Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it. Return the number of nice sub-arrays.   Example 1: Input: nums = [1,1,2,1,1], k = 3 Output: 2 Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1]. Example 2: Input: nums = [2,4,6], k = 1 Output: 0 Explanation: There are no odd numbers in the array. Example 3: Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2 Output: 16   Constraints: 1 <= nums.length <= 50000 1 <= nums[i] <= 10^5 1 <= k <= nums.length",
        "941": "Given a string s of '(' , ')' and lowercase English characters. Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string. Formally, a parentheses string is valid if and only if: It is the empty string, contains only lowercase characters, or It can be written as AB (A concatenated with B), where A and B are valid strings, or It can be written as (A), where A is a valid string.   Example 1: Input: s = \"lee(t(c)o)de)\" Output: \"lee(t(c)o)de\" Explanation: \"lee(t(co)de)\" , \"lee(t(c)ode)\" would also be accepted. Example 2: Input: s = \"a)b(c)d\" Output: \"ab(c)d\" Example 3: Input: s = \"))((\" Output: \"\" Explanation: An empty string is also valid.   Constraints: 1 <= s.length <= 105 s[i] is either '(' , ')', or lowercase English letter.",
        "942": "Given an array nums of positive integers. Your task is to select some subset of nums, multiply each element by an integer and add all these numbers. The array is said to be good if you can obtain a sum of 1 from the array by any possible subset and multiplicand. Return True if the array is good otherwise return False.   Example 1: Input: nums = [12,5,7,23] Output: true Explanation: Pick numbers 5 and 7. 5*3 + 7*(-2) = 1 Example 2: Input: nums = [29,6,10] Output: true Explanation: Pick numbers 29, 6 and 10. 29*1 + 6*(-3) + 10*(-1) = 1 Example 3: Input: nums = [3,6] Output: false   Constraints: 1 <= nums.length <= 10^5 1 <= nums[i] <= 10^9",
        "943": "SQL Schema Pandas Schema",
        "944": "There is an m x n matrix that is initialized to all 0's. There is also a 2D array indices where each indices[i] = [ri, ci] represents a 0-indexed location to perform some increment operations on the matrix. For each location indices[i], do both of the following: Increment all the cells on row ri. Increment all the cells on column ci. Given m, n, and indices, return the number of odd-valued cells in the matrix after applying the increment to all locations in indices.   Example 1: Input: m = 2, n = 3, indices = [[0,1],[1,1]] Output: 6 Explanation: Initial matrix = [[0,0,0],[0,0,0]]. After applying first increment it becomes [[1,2,1],[0,1,0]]. The final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers. Example 2: Input: m = 2, n = 2, indices = [[1,1],[0,0]] Output: 0 Explanation: Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix.   Constraints: 1 <= m, n <= 50 1 <= indices.length <= 100 0 <= ri < m 0 <= ci < n   Follow up: Could you solve this in O(n + m + indices.length) time with only O(n + m) extra space?",
        "945": "Given the following details of a matrix with n columns and 2 rows : The matrix is a binary matrix, which means each element in the matrix can be 0 or 1. The sum of elements of the 0-th(upper) row is given as upper. The sum of elements of the 1-st(lower) row is given as lower. The sum of elements in the i-th column(0-indexed) is colsum[i], where colsum is given as an integer array with length n. Your task is to reconstruct the matrix with upper, lower and colsum. Return it as a 2-D integer array. If there are more than one valid solution, any of them will be accepted. If no valid solution exists, return an empty 2-D array.   Example 1: Input: upper = 2, lower = 1, colsum = [1,1,1] Output: [[1,1,0],[0,0,1]] Explanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers. Example 2: Input: upper = 2, lower = 3, colsum = [2,2,1,1] Output: [] Example 3: Input: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1] Output: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]   Constraints: 1 <= colsum.length <= 10^5 0 <= upper, lower <= colsum.length 0 <= colsum[i] <= 2",
        "946": "Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s. Return the number of closed islands.   Example 1: Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]] Output: 2 Explanation:  Islands in gray are closed because they are completely surrounded by water (group of 1s). Example 2: Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]] Output: 1 Example 3: Input: grid = [[1,1,1,1,1,1,1],                [1,0,0,0,0,0,1],                [1,0,1,1,1,0,1],                [1,0,1,0,1,0,1],                [1,0,1,1,1,0,1],                [1,0,0,0,0,0,1],                [1,1,1,1,1,1,1]] Output: 2   Constraints: 1 <= grid.length, grid[0].length <= 100 0 <= grid[i][j] <=1",
        "947": "Given a list of words, list of  single letters (might be repeating) and score of every character. Return the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two or more times). It is not necessary to use all characters in letters and each letter can only be used once. Score of letters 'a', 'b', 'c', ... ,'z' is given by score[0], score[1], ... , score[25] respectively.   Example 1: Input: words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0] Output: 23 Explanation: Score  a=1, c=9, d=5, g=3, o=2 Given letters, we can form the words \"dad\" (5+1+5) and \"good\" (3+2+2+5) with a score of 23. Words \"dad\" and \"dog\" only get a score of 21. Example 2: Input: words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10] Output: 27 Explanation: Score  a=4, b=4, c=4, x=5, z=10 Given letters, we can form the words \"ax\" (4+5), \"bx\" (4+5) and \"cx\" (4+5) with a score of 27. Word \"xxxz\" only get a score of 25. Example 3: Input: words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0] Output: 0 Explanation: Letter \"e\" can only be used once.   Constraints: 1 <= words.length <= 14 1 <= words[i].length <= 15 1 <= letters.length <= 100 letters[i].length == 1 score.length == 26 0 <= score[i] <= 10 words[i], letters[i] contains only lower case English letters.",
        "948": "Given a 2D grid of size m x n and an integer k. You need to shift the grid k times. In one shift operation: Element at grid[i][j] moves to grid[i][j + 1]. Element at grid[i][n - 1] moves to grid[i + 1][0]. Element at grid[m - 1][n - 1] moves to grid[0][0]. Return the 2D grid after applying shift operation k times.   Example 1: Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1 Output: [[9,1,2],[3,4,5],[6,7,8]] Example 2: Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4 Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]] Example 3: Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9 Output: [[1,2,3],[4,5,6],[7,8,9]]   Constraints: m == grid.length n == grid[i].length 1 <= m <= 50 1 <= n <= 50 -1000 <= grid[i][j] <= 1000 0 <= k <= 100",
        "949": "Given a binary tree with the following rules: root.val == 0 If treeNode.val == x and treeNode.left != null, then treeNode.left.val == 2 * x + 1 If treeNode.val == x and treeNode.right != null, then treeNode.right.val == 2 * x + 2 Now the binary tree is contaminated, which means all treeNode.val have been changed to -1. Implement the FindElements class: FindElements(TreeNode* root) Initializes the object with a contaminated binary tree and recovers it. bool find(int target) Returns true if the target value exists in the recovered binary tree.   Example 1: Input [\"FindElements\",\"find\",\"find\"] [[[-1,null,-1]],[1],[2]] Output [null,false,true] Explanation FindElements findElements = new FindElements([-1,null,-1]);  findElements.find(1); // return False  findElements.find(2); // return True  Example 2: Input [\"FindElements\",\"find\",\"find\",\"find\"] [[[-1,-1,-1,-1,-1]],[1],[3],[5]] Output [null,true,true,false] Explanation FindElements findElements = new FindElements([-1,-1,-1,-1,-1]); findElements.find(1); // return True findElements.find(3); // return True findElements.find(5); // return False Example 3: Input [\"FindElements\",\"find\",\"find\",\"find\",\"find\"] [[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]] Output [null,true,false,false,true] Explanation FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]); findElements.find(2); // return True findElements.find(3); // return False findElements.find(4); // return False findElements.find(5); // return True   Constraints: TreeNode.val == -1 The height of the binary tree is less than or equal to 20 The total number of nodes is between [1, 104] Total calls of find() is between [1, 104] 0 <= target <= 106",
        "950": "Given an integer array nums, return the maximum possible sum of elements of the array such that it is divisible by three.   Example 1: Input: nums = [3,6,5,1,8] Output: 18 Explanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3). Example 2: Input: nums = [4] Output: 0 Explanation: Since 4 is not divisible by 3, do not pick any number. Example 3: Input: nums = [1,2,3,4,4] Output: 12 Explanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).   Constraints: 1 <= nums.length <= 4 * 104 1 <= nums[i] <= 104",
        "951": "A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations. The game is represented by an m x n grid of characters grid where each element is a wall, floor, or box. Your task is to move the box 'B' to the target position 'T' under the following rules: The character 'S' represents the player. The player can move up, down, left, right in grid if it is a floor (empty cell). The character '.' represents the floor which means a free cell to walk. The character '#' represents the wall which means an obstacle (impossible to walk there). There is only one box 'B' and one target cell 'T' in the grid. The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a push. The player cannot walk through the box. Return the minimum number of pushes to move the box to the target. If there is no way to reach the target, return -1.   Example 1: Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],                [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],                [\"#\",\".\",\".\",\"B\",\".\",\"#\"],                [\"#\",\".\",\"#\",\"#\",\".\",\"#\"],                [\"#\",\".\",\".\",\".\",\"S\",\"#\"],                [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]] Output: 3 Explanation: We return only the number of times the box is pushed. Example 2: Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],                [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],                [\"#\",\".\",\".\",\"B\",\".\",\"#\"],                [\"#\",\"#\",\"#\",\"#\",\".\",\"#\"],                [\"#\",\".\",\".\",\".\",\"S\",\"#\"],                [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]] Output: -1 Example 3: Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],                [\"#\",\"T\",\".\",\".\",\"#\",\"#\"],                [\"#\",\".\",\"#\",\"B\",\".\",\"#\"],                [\"#\",\".\",\".\",\".\",\".\",\"#\"],                [\"#\",\".\",\".\",\".\",\"S\",\"#\"],                [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]] Output: 5 Explanation: push the box down, left, left, up and up.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 20 grid contains only characters '.', '#', 'S', 'T', or 'B'. There is only one character 'S', 'B', and 'T' in the grid.",
        "952": "On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points. You can move according to these rules: In 1 second, you can either: move vertically by one unit, move horizontally by one unit, or move diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second). You have to visit the points in the same order as they appear in the array. You are allowed to pass through points that appear later in the order, but these do not count as visits.   Example 1: Input: points = [[1,1],[3,4],[-1,0]] Output: 7 Explanation: One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]    Time from [1,1] to [3,4] = 3 seconds  Time from [3,4] to [-1,0] = 4 seconds Total time = 7 seconds Example 2: Input: points = [[3,2],[-2,2]] Output: 5   Constraints: points.length == n 1 <= n <= 100 points[i].length == 2 -1000 <= points[i][0], points[i][1] <= 1000",
        "953": "You are given a map of a server center, represented as a m * n integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.  Return the number of servers that communicate with any other server.   Example 1: Input: grid = [[1,0],[0,1]] Output: 0 Explanation: No servers can communicate with others. Example 2: Input: grid = [[1,0],[1,1]] Output: 3 Explanation: All three servers can communicate with at least one other server. Example 3: Input: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]] Output: 4 Explanation: The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server.   Constraints: m == grid.length n == grid[i].length 1 <= m <= 250 1 <= n <= 250 grid[i][j] == 0 or 1",
        "954": "You are given an array of strings products and a string searchWord. Design a system that suggests at most three product names from products after each character of searchWord is typed. Suggested products should have common prefix with searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products. Return a list of lists of the suggested products after each character of searchWord is typed.   Example 1: Input: products = [\"mobile\",\"mouse\",\"moneypot\",\"monitor\",\"mousepad\"], searchWord = \"mouse\" Output: [[\"mobile\",\"moneypot\",\"monitor\"],[\"mobile\",\"moneypot\",\"monitor\"],[\"mouse\",\"mousepad\"],[\"mouse\",\"mousepad\"],[\"mouse\",\"mousepad\"]] Explanation: products sorted lexicographically = [\"mobile\",\"moneypot\",\"monitor\",\"mouse\",\"mousepad\"]. After typing m and mo all products match and we show user [\"mobile\",\"moneypot\",\"monitor\"]. After typing mou, mous and mouse the system suggests [\"mouse\",\"mousepad\"]. Example 2: Input: products = [\"havana\"], searchWord = \"havana\" Output: [[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"]] Explanation: The only word \"havana\" will be always suggested while typing the search word.   Constraints: 1 <= products.length <= 1000 1 <= products[i].length <= 3000 1 <= sum(products[i].length) <= 2 * 104 All the strings of products are unique. products[i] consists of lowercase English letters. 1 <= searchWord.length <= 1000 searchWord consists of lowercase English letters.",
        "955": "You have a pointer at index 0 in an array of size arrLen. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time). Given two integers steps and arrLen, return the number of ways such that your pointer is still at index 0 after exactly steps steps. Since the answer may be too large, return it modulo 109 + 7.   Example 1: Input: steps = 3, arrLen = 2 Output: 4 Explanation: There are 4 differents ways to stay at index 0 after 3 steps. Right, Left, Stay Stay, Right, Left Right, Stay, Left Stay, Stay, Stay Example 2: Input: steps = 2, arrLen = 4 Output: 2 Explanation: There are 2 differents ways to stay at index 0 after 2 steps Right, Left Stay, Stay Example 3: Input: steps = 4, arrLen = 2 Output: 8   Constraints: 1 <= steps <= 500 1 <= arrLen <= 106",
        "956": "Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are: Players take turns placing characters into empty squares ' '. The first player A always places 'X' characters, while the second player B always places 'O' characters. 'X' and 'O' characters are always placed into empty squares, never on filled ones. The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal. The game also ends if all squares are non-empty. No more moves can be played if the game is over. Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return \"Draw\". If there are still movements to play return \"Pending\". You can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.   Example 1: Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]] Output: \"A\" Explanation: A wins, they always play first. Example 2: Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]] Output: \"B\" Explanation: B wins. Example 3: Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]] Output: \"Draw\" Explanation: The game ends in a draw since there are no moves to make.   Constraints: 1 <= moves.length <= 9 moves[i].length == 2 0 <= rowi, coli <= 2 There are no repeated elements on moves. moves follow the rules of tic tac toe.",
        "957": "Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.   Example 1: Input: matrix = [   [0,1,1,1],   [1,1,1,1],   [0,1,1,1] ] Output: 15 Explanation:  There are 10 squares of side 1. There are 4 squares of side 2. There is  1 square of side 3. Total number of squares = 10 + 4 + 1 = 15. Example 2: Input: matrix =  [   [1,0,1],   [1,1,0],   [1,1,0] ] Output: 7 Explanation:  There are 6 squares of side 1.   There is 1 square of side 2.  Total number of squares = 6 + 1 = 7.   Constraints: 1 <= arr.length <= 300 1 <= arr[0].length <= 300 0 <= arr[i][j] <= 1",
        "958": "You are given a string s containing lowercase letters and an integer k. You need to : First, change some characters of s to other lowercase English letters. Then divide s into k non-empty disjoint substrings such that each substring is a palindrome. Return the minimal number of characters that you need to change to divide the string.   Example 1: Input: s = \"abc\", k = 2 Output: 1 Explanation: You can split the string into \"ab\" and \"c\", and change 1 character in \"ab\" to make it palindrome. Example 2: Input: s = \"aabbc\", k = 3 Output: 0 Explanation: You can split the string into \"aa\", \"bb\" and \"c\", all of them are palindrome. Example 3: Input: s = \"leetcode\", k = 8 Output: 0   Constraints: 1 <= k <= s.length <= 100. s only contains lowercase English letters.",
        "959": "SQL Schema Pandas Schema",
        "960": "Given an integer number n, return the difference between the product of its digits and the sum of its digits.   Example 1: Input: n = 234 Output: 15  Explanation:  Product of digits = 2 * 3 * 4 = 24  Sum of digits = 2 + 3 + 4 = 9  Result = 24 - 9 = 15 Example 2: Input: n = 4421 Output: 21 Explanation:  Product of digits = 4 * 4 * 2 * 1 = 32  Sum of digits = 4 + 4 + 2 + 1 = 11  Result = 32 - 11 = 21   Constraints: 1 <= n <= 10^5",
        "961": "There are n people that are split into some unknown number of groups. Each person is labeled with a unique ID from 0 to n - 1. You are given an integer array groupSizes, where groupSizes[i] is the size of the group that person i is in. For example, if groupSizes[1] = 3, then person 1 must be in a group of size 3. Return a list of groups such that each person i is in a group of size groupSizes[i]. Each person should appear in exactly one group, and every person must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.   Example 1: Input: groupSizes = [3,3,3,3,3,1,3] Output: [[5],[0,1,2],[3,4,6]] Explanation:  The first group is [5]. The size is 1, and groupSizes[5] = 1. The second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3. The third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3. Other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]]. Example 2: Input: groupSizes = [2,1,3,3,3,2] Output: [[1],[0,5],[2,3,4]]   Constraints: groupSizes.length == n 1 <= n <= 500 1 <= groupSizes[i] <= n",
        "962": "Given a m x n binary matrix mat. In one step, you can choose one cell and flip it and all the four neighbors of it if they exist (Flip is changing 1 to 0 and 0 to 1). A pair of cells are called neighbors if they share one edge. Return the minimum number of steps required to convert mat to a zero matrix or -1 if you cannot. A binary matrix is a matrix with all cells equal to 0 or 1 only. A zero matrix is a matrix with all cells equal to 0.   Example 1: Input: mat = [[0,0],[0,1]] Output: 3 Explanation: One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown. Example 2: Input: mat = [[0]] Output: 0 Explanation: Given matrix is a zero matrix. We do not need to change it. Example 3: Input: mat = [[1,0,0],[1,0,0]] Output: -1 Explanation: Given matrix cannot be a zero matrix.   Constraints: m == mat.length n == mat[i].length 1 <= m, n <= 3 mat[i][j] is either 0 or 1.",
        "963": "Design the CombinationIterator class: CombinationIterator(string characters, int combinationLength) Initializes the object with a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments. next() Returns the next combination of length combinationLength in lexicographical order. hasNext() Returns true if and only if there exists a next combination.   Example 1: Input [\"CombinationIterator\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"] [[\"abc\", 2], [], [], [], [], [], []] Output [null, \"ab\", true, \"ac\", true, \"bc\", false]  Explanation CombinationIterator itr = new CombinationIterator(\"abc\", 2); itr.next();    // return \"ab\" itr.hasNext(); // return True itr.next();    // return \"ac\" itr.hasNext(); // return True itr.next();    // return \"bc\" itr.hasNext(); // return False   Constraints: 1 <= combinationLength <= characters.length <= 15 All the characters of characters are unique. At most 104 calls will be made to next and hasNext. It is guaranteed that all calls of the function next are valid.",
        "964": "Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.   Example 1: Input: arr = [1,2,2,6,6,6,6,7,10] Output: 6 Example 2: Input: arr = [1,1] Output: 1   Constraints: 1 <= arr.length <= 104 0 <= arr[i] <= 105",
        "965": "Given an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list. The interval [a, b) is covered by the interval [c, d) if and only if c <= a and b <= d. Return the number of remaining intervals.   Example 1: Input: intervals = [[1,4],[3,6],[2,8]] Output: 2 Explanation: Interval [3,6] is covered by [2,8], therefore it is removed. Example 2: Input: intervals = [[1,4],[2,3]] Output: 1   Constraints: 1 <= intervals.length <= 1000 intervals[i].length == 2 0 <= li < ri <= 105 All the given intervals are unique.",
        "966": "Given an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts. A falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.   Example 1: Input: grid = [[1,2,3],[4,5,6],[7,8,9]] Output: 13 Explanation:  The possible falling paths are: [1,5,9], [1,5,7], [1,6,7], [1,6,8], [2,4,8], [2,4,9], [2,6,7], [2,6,8], [3,4,8], [3,4,9], [3,5,7], [3,5,9] The falling path with the smallest sum is [1,5,7], so the answer is 13. Example 2: Input: grid = [[7]] Output: 7   Constraints: n == grid.length == grid[i].length 1 <= n <= 200 -99 <= grid[i][j] <= 99",
        "967": "Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number. Return the decimal value of the number in the linked list. The most significant bit is at the head of the linked list.   Example 1: Input: head = [1,0,1] Output: 5 Explanation: (101) in base 2 = (5) in base 10 Example 2: Input: head = [0] Output: 0   Constraints: The Linked List is not empty. Number of nodes will not exceed 30. Each node's value is either 0 or 1.",
        "968": "An integer has sequential digits if and only if each digit in the number is one more than the previous digit. Return a sorted list of all the integers in the range [low, high] inclusive that have sequential digits.   Example 1: Input: low = 100, high = 300 Output: [123,234] Example 2: Input: low = 1000, high = 13000 Output: [1234,2345,3456,4567,5678,6789,12345]   Constraints: 10 <= low <= high <= 10^9",
        "969": "Given a m x n matrix mat and an integer threshold, return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square.   Example 1: Input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4 Output: 2 Explanation: The maximum side length of square with sum less than 4 is 2 as shown. Example 2: Input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1 Output: 0   Constraints: m == mat.length n == mat[i].length 1 <= m, n <= 300 0 <= mat[i][j] <= 104 0 <= threshold <= 105",
        "970": "You are given an m x n integer matrix grid where each cell is either 0 (empty) or 1 (obstacle). You can move up, down, left, or right from and to an empty cell in one step. Return the minimum number of steps to walk from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1) given that you can eliminate at most k obstacles. If it is not possible to find such walk return -1.   Example 1: Input: grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1 Output: 6 Explanation:  The shortest path without eliminating any obstacle is 10. The shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2). Example 2: Input: grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1 Output: -1 Explanation: We need to eliminate at least two obstacles to find such a walk.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 40 1 <= k <= m * n grid[i][j] is either 0 or 1. grid[0][0] == grid[m - 1][n - 1] == 0",
        "971": "Given an array nums of integers, return how many of them contain an even number of digits.   Example 1: Input: nums = [12,345,2,6,7896] Output: 2 Explanation:  12 contains 2 digits (even number of digits).  345 contains 3 digits (odd number of digits).  2 contains 1 digit (odd number of digits).  6 contains 1 digit (odd number of digits).  7896 contains 4 digits (even number of digits).  Therefore only 12 and 7896 contain an even number of digits. Example 2: Input: nums = [555,901,482,1771] Output: 1  Explanation:  Only 1771 contains an even number of digits.   Constraints: 1 <= nums.length <= 500 1 <= nums[i] <= 105",
        "972": "Given an array of integers nums and a positive integer k, check whether it is possible to divide this array into sets of k consecutive numbers. Return true if it is possible. Otherwise, return false.   Example 1: Input: nums = [1,2,3,3,4,4,5,6], k = 4 Output: true Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6]. Example 2: Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3 Output: true Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11]. Example 3: Input: nums = [1,2,3,4], k = 3 Output: false Explanation: Each array should be divided in subarrays of size 3.   Constraints: 1 <= k <= nums.length <= 105 1 <= nums[i] <= 109   Note: This question is the same as 846: https://leetcode.com/problems/hand-of-straights/",
        "973": "Given a string s, return the maximum number of occurrences of any substring under the following rules: The number of unique characters in the substring must be less than or equal to maxLetters. The substring size must be between minSize and maxSize inclusive.   Example 1: Input: s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4 Output: 2 Explanation: Substring \"aab\" has 2 occurrences in the original string. It satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize). Example 2: Input: s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3 Output: 2 Explanation: Substring \"aaa\" occur 2 times in the string. It can overlap.   Constraints: 1 <= s.length <= 105 1 <= maxLetters <= 26 1 <= minSize <= maxSize <= min(26, s.length) s consists of only lowercase English letters.",
        "974": "You have n boxes labeled from 0 to n - 1. You are given four arrays: status, candies, keys, and containedBoxes where: status[i] is 1 if the ith box is open and 0 if the ith box is closed, candies[i] is the number of candies in the ith box, keys[i] is a list of the labels of the boxes you can open after opening the ith box. containedBoxes[i] is a list of the boxes you found inside the ith box. You are given an integer array initialBoxes that contains the labels of the boxes you initially have. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it. Return the maximum number of candies you can get following the rules above.   Example 1: Input: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0] Output: 16 Explanation: You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2. Box 1 is closed and you do not have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2. In box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed. Total number of candies collected = 7 + 4 + 5 = 16 candy. Example 2: Input: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0] Output: 6 Explanation: You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys. The total number of candies will be 6.   Constraints: n == status.length == candies.length == keys.length == containedBoxes.length 1 <= n <= 1000 status[i] is either 0 or 1. 1 <= candies[i] <= 1000 0 <= keys[i].length <= n 0 <= keys[i][j] < n All values of keys[i] are unique. 0 <= containedBoxes[i].length <= n 0 <= containedBoxes[i][j] < n All values of containedBoxes[i] are unique. Each box is contained in one box at most. 0 <= initialBoxes.length <= n 0 <= initialBoxes[i] < n",
        "975": "Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1. After doing so, return the array.   Example 1: Input: arr = [17,18,5,4,6,1] Output: [18,6,6,6,1,-1] Explanation:  - index 0 --> the greatest element to the right of index 0 is index 1 (18). - index 1 --> the greatest element to the right of index 1 is index 4 (6). - index 2 --> the greatest element to the right of index 2 is index 4 (6). - index 3 --> the greatest element to the right of index 3 is index 4 (6). - index 4 --> the greatest element to the right of index 4 is index 5 (1). - index 5 --> there are no elements to the right of index 5, so we put -1. Example 2: Input: arr = [400] Output: [-1] Explanation: There are no elements to the right of index 0.   Constraints: 1 <= arr.length <= 104 1 <= arr[i] <= 105",
        "976": "Given an integer array arr and a target value target, return the integer value such that when we change all the integers larger than value in the given array to be equal to value, the sum of the array gets as close as possible (in absolute difference) to target. In case of a tie, return the minimum such integer. Notice that the answer is not neccesarilly a number from arr.   Example 1: Input: arr = [4,9,3], target = 10 Output: 3 Explanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer. Example 2: Input: arr = [2,3,5], target = 10 Output: 5 Example 3: Input: arr = [60864,25176,27249,21296,20204], target = 56803 Output: 11361   Constraints: 1 <= arr.length <= 104 1 <= arr[i], target <= 105",
        "977": "You are given a square board of characters. You can move on the board starting at the bottom right square marked with the character 'S'. You need to reach the top left square marked with the character 'E'. The rest of the squares are labeled either with a numeric character 1, 2, ..., 9 or with an obstacle 'X'. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there. Return a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo 10^9 + 7. In case there is no path, return [0, 0].   Example 1: Input: board = [\"E23\",\"2X2\",\"12S\"] Output: [7,1] Example 2: Input: board = [\"E12\",\"1X1\",\"21S\"] Output: [4,2] Example 3: Input: board = [\"E11\",\"XXX\",\"11S\"] Output: [0,0]   Constraints: 2 <= board.length == board[i].length <= 100",
        "978": "Given the root of a binary tree, return the sum of values of its deepest leaves.   Example 1: Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8] Output: 15 Example 2: Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5] Output: 19   Constraints: The number of nodes in the tree is in the range [1, 104]. 1 <= Node.val <= 100",
        "979": "Given an integer n, return any array containing n unique integers such that they add up to 0.   Example 1: Input: n = 5 Output: [-7,-1,1,3,4] Explanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4]. Example 2: Input: n = 3 Output: [-1,0,1] Example 3: Input: n = 1 Output: [0]   Constraints: 1 <= n <= 1000",
        "980": "Given two binary search trees root1 and root2, return a list containing all the integers from both trees sorted in ascending order.   Example 1: Input: root1 = [2,1,4], root2 = [1,0,3] Output: [0,1,1,2,3,4] Example 2: Input: root1 = [1,null,8], root2 = [8,1] Output: [1,1,8,8]   Constraints: The number of nodes in each tree is in the range [0, 5000]. -105 <= Node.val <= 105",
        "981": "Given an array of non-negative integers arr, you are initially positioned at start index of the array. When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach any index with value 0. Notice that you can not jump outside of the array at any time.   Example 1: Input: arr = [4,2,3,0,3,1,2], start = 5 Output: true Explanation:  All possible ways to reach at index 3 with value 0 are:  index 5 -> index 4 -> index 1 -> index 3  index 5 -> index 6 -> index 4 -> index 1 -> index 3  Example 2: Input: arr = [4,2,3,0,3,1,2], start = 0 Output: true  Explanation:  One possible way to reach at index 3 with value 0 is:  index 0 -> index 4 -> index 1 -> index 3 Example 3: Input: arr = [3,0,2,1,2], start = 2 Output: false Explanation: There is no way to reach at index 1 with value 0.   Constraints: 1 <= arr.length <= 5 * 104 0 <= arr[i] < arr.length 0 <= start < arr.length",
        "982": "Given an equation, represented by words on the left side and the result on the right side. You need to check if the equation is solvable under the following rules: Each character is decoded as one digit (0 - 9). No two characters can map to the same digit. Each words[i] and result are decoded as one number without leading zeros. Sum of numbers on the left side (words) will equal to the number on the right side (result). Return true if the equation is solvable, otherwise return false.   Example 1: Input: words = [\"SEND\",\"MORE\"], result = \"MONEY\" Output: true Explanation: Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2' Such that: \"SEND\" + \"MORE\" = \"MONEY\" ,  9567 + 1085 = 10652 Example 2: Input: words = [\"SIX\",\"SEVEN\",\"SEVEN\"], result = \"TWENTY\" Output: true Explanation: Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4 Such that: \"SIX\" + \"SEVEN\" + \"SEVEN\" = \"TWENTY\" ,  650 + 68782 + 68782 = 138214 Example 3: Input: words = [\"LEET\",\"CODE\"], result = \"POINT\" Output: false Explanation: There is no possible mapping to satisfy the equation, so we return false. Note that two different characters cannot map to the same digit.   Constraints: 2 <= words.length <= 5 1 <= words[i].length, result.length <= 7 words[i], result contain only uppercase English letters. The number of different characters used in the expression is at most 10.",
        "983": "You are given a string s formed by digits and '#'. We want to map s to English lowercase characters as follows: Characters ('a' to 'i') are represented by ('1' to '9') respectively. Characters ('j' to 'z') are represented by ('10#' to '26#') respectively. Return the string formed after mapping. The test cases are generated so that a unique mapping will always exist.   Example 1: Input: s = \"10#11#12\" Output: \"jkab\" Explanation: \"j\" -> \"10#\" , \"k\" -> \"11#\" , \"a\" -> \"1\" , \"b\" -> \"2\". Example 2: Input: s = \"1326#\" Output: \"acz\"   Constraints: 1 <= s.length <= 1000 s consists of digits and the '#' letter. s will be a valid string such that mapping is always possible.",
        "984": "You are given an array arr of positive integers. You are also given the array queries where queries[i] = [lefti, righti]. For each query i compute the XOR of elements from lefti to righti (that is, arr[lefti] XOR arr[lefti + 1] XOR ... XOR arr[righti] ). Return an array answer where answer[i] is the answer to the ith query.   Example 1: Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]] Output: [2,7,14,8]  Explanation:  The binary representation of the elements in the array are: 1 = 0001  3 = 0011  4 = 0100  8 = 1000  The XOR values for queries are: [0,1] = 1 xor 3 = 2  [1,2] = 3 xor 4 = 7  [0,3] = 1 xor 3 xor 4 xor 8 = 14  [3,3] = 8 Example 2: Input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]] Output: [8,0,4,4]   Constraints: 1 <= arr.length, queries.length <= 3 * 104 1 <= arr[i] <= 109 queries[i].length == 2 0 <= lefti <= righti < arr.length",
        "985": "There are n people, each person has a unique id between 0 and n-1. Given the arrays watchedVideos and friends, where watchedVideos[i] and friends[i] contain the list of watched videos and the list of friends respectively for the person with id = i. Level 1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on. In general, the level k of videos are all watched videos by people with the shortest path exactly equal to k with you. Given your id and the level of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest.    Example 1: Input: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1 Output: [\"B\",\"C\"]  Explanation:  You have id = 0 (green color in the figure) and your friends are (yellow color in the figure): Person with id = 1 -> watchedVideos = [\"C\"]  Person with id = 2 -> watchedVideos = [\"B\",\"C\"]  The frequencies of watchedVideos by your friends are:  B -> 1  C -> 2 Example 2: Input: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2 Output: [\"D\"] Explanation:  You have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).   Constraints: n == watchedVideos.length == friends.length 2 <= n <= 100 1 <= watchedVideos[i].length <= 100 1 <= watchedVideos[i][j].length <= 8 0 <= friends[i].length < n 0 <= friends[i][j] < n 0 <= id < n 1 <= level < n if friends[i] contains j, then friends[j] contains i",
        "986": "Given a string s. In one step you can insert any character at any index of the string. Return the minimum number of steps to make s palindrome. A Palindrome String is one that reads the same backward as well as forward.   Example 1: Input: s = \"zzazz\" Output: 0 Explanation: The string \"zzazz\" is already palindrome we do not need any insertions. Example 2: Input: s = \"mbadm\" Output: 2 Explanation: String can be \"mbdadbm\" or \"mdbabdm\". Example 3: Input: s = \"leetcode\" Output: 5 Explanation: Inserting 5 characters the string becomes \"leetcodocteel\".   Constraints: 1 <= s.length <= 500 s consists of lowercase English letters.",
        "987": "We are given a list nums of integers representing a list compressed with run-length encoding. Consider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0).  For each such pair, there are freq elements with value val concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list. Return the decompressed list.   Example 1: Input: nums = [1,2,3,4] Output: [2,4,4,4] Explanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2]. The second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4]. At the end the concatenation [2] + [4,4,4] is [2,4,4,4]. Example 2: Input: nums = [1,1,2,3] Output: [1,3,3]   Constraints: 2 <= nums.length <= 100 nums.length % 2 == 0 1 <= nums[i] <= 100",
        "988": "Given a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for: i - k <= r <= i + k, j - k <= c <= j + k, and (r, c) is a valid position in the matrix.   Example 1: Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1 Output: [[12,21,16],[27,45,33],[24,39,28]] Example 2: Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2 Output: [[45,45,45],[45,45,45],[45,45,45]]   Constraints: m == mat.length n == mat[i].length 1 <= m, n, k <= 100 1 <= mat[i][j] <= 100",
        "989": "Given the root of a binary tree, return the sum of values of nodes with an even-valued grandparent. If there are no nodes with an even-valued grandparent, return 0. A grandparent of a node is the parent of its parent if it exists.   Example 1: Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5] Output: 18 Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents. Example 2: Input: root = [1] Output: 0   Constraints: The number of nodes in the tree is in the range [1, 104]. 1 <= Node.val <= 100",
        "990": "Return the number of distinct non-empty substrings of text that can be written as the concatenation of some string with itself (i.e. it can be written as a + a where a is some string).   Example 1: Input: text = \"abcabcabc\" Output: 3 Explanation: The 3 substrings are \"abcabc\", \"bcabca\" and \"cabcab\". Example 2: Input: text = \"leetcodeleetcode\" Output: 2 Explanation: The 2 substrings are \"ee\" and \"leetcodeleetcode\".   Constraints: 1 <= text.length <= 2000 text has only lowercase English letters.",
        "991": "No-Zero integer is a positive integer that does not contain any 0 in its decimal representation. Given an integer n, return a list of two integers [a, b] where: a and b are No-Zero integers. a + b = n The test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.   Example 1: Input: n = 2 Output: [1,1] Explanation: Let a = 1 and b = 1. Both a and b are no-zero integers, and a + b = 2 = n. Example 2: Input: n = 11 Output: [2,9] Explanation: Let a = 2 and b = 9. Both a and b are no-zero integers, and a + b = 9 = n. Note that there are other valid answers as [8, 3] that can be accepted.   Constraints: 2 <= n <= 104",
        "992": "Given 3 positives numbers a, b and c. Return the minimum flips required in some bits of a and b to make ( a OR b == c ). (bitwise OR operation). Flip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.   Example 1: Input: a = 2, b = 6, c = 5 Output: 3 Explanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c) Example 2: Input: a = 4, b = 2, c = 7 Output: 1 Example 3: Input: a = 1, b = 2, c = 3 Output: 0   Constraints: 1 <= a <= 10^9 1 <= b <= 10^9 1 <= c <= 10^9",
        "993": "There are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] represents a connection between computers ai and bi. Any computer can reach any other computer directly or indirectly through the network. You are given an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected. Return the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.   Example 1: Input: n = 4, connections = [[0,1],[0,2],[1,2]] Output: 1 Explanation: Remove cable between computer 1 and 2 and place between computers 1 and 3. Example 2: Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]] Output: 2 Example 3: Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]] Output: -1 Explanation: There are not enough cables.   Constraints: 1 <= n <= 105 1 <= connections.length <= min(n * (n - 1) / 2, 105) connections[i].length == 2 0 <= ai, bi < n ai != bi There are no repeated connections. No two computers are connected by more than one cable.",
        "994": "SQL Schema Pandas Schema",
        "995": "You are given a positive integer num consisting only of digits 6 and 9. Return the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).   Example 1: Input: num = 9669 Output: 9969 Explanation:  Changing the first digit results in 6669. Changing the second digit results in 9969. Changing the third digit results in 9699. Changing the fourth digit results in 9666. The maximum number is 9969. Example 2: Input: num = 9996 Output: 9999 Explanation: Changing the last digit 6 to 9 results in the maximum number. Example 3: Input: num = 9999 Output: 9999 Explanation: It is better not to apply any change.   Constraints: 1 <= num <= 104 num consists of only 6 and 9 digits.",
        "996": "Given a string s. Return all the words vertically in the same order in which they appear in s. Words are returned as a list of strings, complete with spaces when is necessary. (Trailing spaces are not allowed). Each word would be put on only one column and that in one column there will be only one word.   Example 1: Input: s = \"HOW ARE YOU\" Output: [\"HAY\",\"ORO\",\"WEU\"] Explanation: Each word is printed vertically.   \"HAY\"  \"ORO\"  \"WEU\" Example 2: Input: s = \"TO BE OR NOT TO BE\" Output: [\"TBONTB\",\"OEROOE\",\"   T\"] Explanation: Trailing spaces is not allowed.  \"TBONTB\" \"OEROOE\" \"   T\" Example 3: Input: s = \"CONTEST IS COMING\" Output: [\"CIC\",\"OSO\",\"N M\",\"T I\",\"E N\",\"S G\",\"T\"]   Constraints: 1 <= s.length <= 200 s contains only upper case English letters. It's guaranteed that there is only one space between 2 words.",
        "997": "Given a binary tree root and an integer target, delete all the leaf nodes with value target. Note that once you delete a leaf node with value target, if its parent node becomes a leaf node and has the value target, it should also be deleted (you need to continue doing that until you cannot).   Example 1: Input: root = [1,2,3,2,null,2,4], target = 2 Output: [1,null,3,null,4] Explanation: Leaf nodes in green with value (target = 2) are removed (Picture in left).  After removing, new nodes become leaf nodes with value (target = 2) (Picture in center). Example 2: Input: root = [1,3,3,3,2], target = 3 Output: [1,3,null,null,2] Example 3: Input: root = [1,2,null,2,null,2], target = 2 Output: [1] Explanation: Leaf nodes in green with value (target = 2) are removed at each step.   Constraints: The number of nodes in the tree is in the range [1, 3000]. 1 <= Node.val, target <= 1000",
        "998": "There is a one-dimensional garden on the x-axis. The garden starts at the point 0 and ends at the point n. (i.e., the length of the garden is n). There are n + 1 taps located at points [0, 1, ..., n] in the garden. Given an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open. Return the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.   Example 1: Input: n = 5, ranges = [3,4,1,1,0,0] Output: 1 Explanation: The tap at point 0 can cover the interval [-3,3] The tap at point 1 can cover the interval [-3,5] The tap at point 2 can cover the interval [1,3] The tap at point 3 can cover the interval [2,4] The tap at point 4 can cover the interval [4,4] The tap at point 5 can cover the interval [5,5] Opening Only the second tap will water the whole garden [0,5] Example 2: Input: n = 3, ranges = [0,0,0,0] Output: -1 Explanation: Even if you activate all the four taps you cannot water the whole garden.   Constraints: 1 <= n <= 104 ranges.length == n + 1 0 <= ranges[i] <= 100",
        "999": "SQL Schema Pandas Schema",
        "1000": "Given a palindromic string of lowercase English letters palindrome, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible. Return the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string. A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, a has a character strictly smaller than the corresponding character in b. For example, \"abcc\" is lexicographically smaller than \"abcd\" because the first position they differ is at the fourth character, and 'c' is smaller than 'd'.   Example 1: Input: palindrome = \"abccba\" Output: \"aaccba\" Explanation: There are many ways to make \"abccba\" not a palindrome, such as \"zbccba\", \"aaccba\", and \"abacba\". Of all the ways, \"aaccba\" is the lexicographically smallest. Example 2: Input: palindrome = \"a\" Output: \"\" Explanation: There is no way to replace a single character to make \"a\" not a palindrome, so return an empty string.   Constraints: 1 <= palindrome.length <= 1000 palindrome consists of only lowercase English letters.",
        "1001": "A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2]. Given an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.   Example 1: Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]] Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]] Example 2: Input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]] Output: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]   Constraints: m == mat.length n == mat[i].length 1 <= m, n <= 100 1 <= mat[i][j] <= 100",
        "1002": "You are given an integer array nums. The value of this array is defined as the sum of |nums[i] - nums[i + 1]| for all 0 <= i < nums.length - 1. You are allowed to select any subarray of the given array and reverse it. You can perform this operation only once. Find maximum possible value of the final array.   Example 1: Input: nums = [2,3,1,5,4] Output: 10 Explanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10. Example 2: Input: nums = [2,4,9,24,2,1,10] Output: 68   Constraints: 2 <= nums.length <= 3 * 104 -105 <= nums[i] <= 105 The answer is guaranteed to fit in a 32-bit integer.",
        "1003": "Given an array of integers arr, replace each element with its rank. The rank represents how large the element is. The rank has the following rules: Rank is an integer starting from 1. The larger the element, the larger the rank. If two elements are equal, their rank must be the same. Rank should be as small as possible.   Example 1: Input: arr = [40,10,20,30] Output: [4,1,2,3] Explanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest. Example 2: Input: arr = [100,100,100] Output: [1,1,1] Explanation: Same elements share the same rank. Example 3: Input: arr = [37,12,28,9,100,56,80,5,12] Output: [5,3,4,2,8,6,7,1,3]   Constraints: 0 <= arr.length <= 105 -109 <= arr[i] <= 109",
        "1004": "You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s. Return the minimum number of steps to make the given string empty. A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous. A string is called palindrome if is one that reads the same backward as well as forward.   Example 1: Input: s = \"ababa\" Output: 1 Explanation: s is already a palindrome, so its entirety can be removed in a single step. Example 2: Input: s = \"abb\" Output: 2 Explanation: \"abb\" -> \"bb\" -> \"\".  Remove palindromic subsequence \"a\" then \"bb\". Example 3: Input: s = \"baabb\" Output: 2 Explanation: \"baabb\" -> \"b\" -> \"\".  Remove palindromic subsequence \"baab\" then \"b\".   Constraints: 1 <= s.length <= 1000 s[i] is either 'a' or 'b'.",
        "1005": "Given the array restaurants where  restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]. You have to filter the restaurants using three filters. The veganFriendly filter will be either true (meaning you should only include restaurants with veganFriendlyi set to true) or false (meaning you can include any restaurant). In addition, you have the filters maxPrice and maxDistance which are the maximum value for price and distance of restaurants you should consider respectively. Return the array of restaurant IDs after filtering, ordered by rating from highest to lowest. For restaurants with the same rating, order them by id from highest to lowest. For simplicity veganFriendlyi and veganFriendly take value 1 when it is true, and 0 when it is false.   Example 1: Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10 Output: [3,1,5]  Explanation:  The restaurants are: Restaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10] Restaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5] Restaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4] Restaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3] Restaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1]  After filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest).  Example 2: Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10 Output: [4,3,2,1,5] Explanation: The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered. Example 3: Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3 Output: [4,5]   Constraints: 1 <= restaurants.length <= 10^4 restaurants[i].length == 5 1 <= idi, ratingi, pricei, distancei <= 10^5 1 <= maxPrice, maxDistance <= 10^5 veganFriendlyi and veganFriendly are 0 or 1. All idi are distinct.",
        "1006": "There are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distanceThreshold. Return the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold, If there are multiple such cities, return the city with the greatest number. Notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.   Example 1: Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4 Output: 3 Explanation: The figure above describes the graph.  The neighboring cities at a distanceThreshold = 4 for each city are: City 0 -> [City 1, City 2]  City 1 -> [City 0, City 2, City 3]  City 2 -> [City 0, City 1, City 3]  City 3 -> [City 1, City 2]  Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number. Example 2: Input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2 Output: 0 Explanation: The figure above describes the graph.  The neighboring cities at a distanceThreshold = 2 for each city are: City 0 -> [City 1]  City 1 -> [City 0, City 4]  City 2 -> [City 3, City 4]  City 3 -> [City 2, City 4] City 4 -> [City 1, City 2, City 3]  The city 0 has 1 neighboring city at a distanceThreshold = 2.   Constraints: 2 <= n <= 100 1 <= edges.length <= n * (n - 1) / 2 edges[i].length == 3 0 <= fromi < toi < n 1 <= weighti, distanceThreshold <= 10^4 All pairs (fromi, toi) are distinct.",
        "1007": "You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the ith job, you have to finish all the jobs j where 0 <= j < i). You have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. The difficulty of a day is the maximum difficulty of a job done on that day. You are given an integer array jobDifficulty and an integer d. The difficulty of the ith job is jobDifficulty[i]. Return the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.   Example 1: Input: jobDifficulty = [6,5,4,3,2,1], d = 2 Output: 7 Explanation: First day you can finish the first 5 jobs, total difficulty = 6. Second day you can finish the last job, total difficulty = 1. The difficulty of the schedule = 6 + 1 = 7  Example 2: Input: jobDifficulty = [9,9,9], d = 4 Output: -1 Explanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs. Example 3: Input: jobDifficulty = [1,1,1], d = 3 Output: 3 Explanation: The schedule is one job per day. total difficulty will be 3.   Constraints: 1 <= jobDifficulty.length <= 300 0 <= jobDifficulty[i] <= 1000 1 <= d <= 10",
        "1008": "You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). The soldiers are positioned in front of the civilians. That is, all the 1's will appear to the left of all the 0's in each row. A row i is weaker than a row j if one of the following is true: The number of soldiers in row i is less than the number of soldiers in row j. Both rows have the same number of soldiers and i < j. Return the indices of the k weakest rows in the matrix ordered from weakest to strongest.   Example 1: Input: mat =  [[1,1,0,0,0],  [1,1,1,1,0],  [1,0,0,0,0],  [1,1,0,0,0],  [1,1,1,1,1]],  k = 3 Output: [2,0,3] Explanation:  The number of soldiers in each row is:  - Row 0: 2  - Row 1: 4  - Row 2: 1  - Row 3: 2  - Row 4: 5  The rows ordered from weakest to strongest are [2,0,3,1,4]. Example 2: Input: mat =  [[1,0,0,0],  [1,1,1,1],  [1,0,0,0],  [1,0,0,0]],  k = 2 Output: [0,2] Explanation:  The number of soldiers in each row is:  - Row 0: 1  - Row 1: 4  - Row 2: 1  - Row 3: 1  The rows ordered from weakest to strongest are [0,2,3,1].   Constraints: m == mat.length n == mat[i].length 2 <= n, m <= 100 1 <= k <= m matrix[i][j] is either 0 or 1.",
        "1009": "You are given an integer array arr. You can choose a set of integers and remove all the occurrences of these integers in the array. Return the minimum size of the set so that at least half of the integers of the array are removed.   Example 1: Input: arr = [3,3,3,3,5,5,5,2,2,7] Output: 2 Explanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array). Possible sets of size 2 are {3,5},{3,2},{5,2}. Choosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array. Example 2: Input: arr = [7,7,7,7,7,7] Output: 1 Explanation: The only possible set you can choose is {7}. This will make the new array empty.   Constraints: 2 <= arr.length <= 105 arr.length is even. 1 <= arr[i] <= 105",
        "1010": "Given the root of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized. Return the maximum product of the sums of the two subtrees. Since the answer may be too large, return it modulo 109 + 7. Note that you need to maximize the answer before taking the mod and not after taking it.   Example 1: Input: root = [1,2,3,4,5,6] Output: 110 Explanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10) Example 2: Input: root = [1,null,2,3,4,null,null,5,6] Output: 90 Explanation: Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6)   Constraints: The number of nodes in the tree is in the range [2, 5 * 104]. 1 <= Node.val <= 104",
        "1011": "Given an array of integers arr and an integer d. In one step you can jump from index i to index: i + x where: i + x < arr.length and  0 < x <= d. i - x where: i - x >= 0 and  0 < x <= d. In addition, you can only jump from index i to index j if arr[i] > arr[j] and arr[i] > arr[k] for all indices k between i and j (More formally min(i, j) < k < max(i, j)). You can choose any index of the array and start jumping. Return the maximum number of indices you can visit. Notice that you can not jump outside of the array at any time.   Example 1: Input: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2 Output: 4 Explanation: You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown. Note that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9. Similarly You cannot jump from index 3 to index 2 or index 1. Example 2: Input: arr = [3,3,3,3,3], d = 3 Output: 1 Explanation: You can start at any index. You always cannot jump to any index. Example 3: Input: arr = [7,6,5,4,3,2,1], d = 1 Output: 7 Explanation: Start at index 0. You can visit all the indicies.    Constraints: 1 <= arr.length <= 1000 1 <= arr[i] <= 105 1 <= d <= arr.length",
        "1012": "SQL Schema Pandas Schema",
        "1013": "Given an integer num, return the number of steps to reduce it to zero. In one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.   Example 1: Input: num = 14 Output: 6 Explanation:  Step 1) 14 is even; divide by 2 and obtain 7.  Step 2) 7 is odd; subtract 1 and obtain 6. Step 3) 6 is even; divide by 2 and obtain 3.  Step 4) 3 is odd; subtract 1 and obtain 2.  Step 5) 2 is even; divide by 2 and obtain 1.  Step 6) 1 is odd; subtract 1 and obtain 0. Example 2: Input: num = 8 Output: 4 Explanation:  Step 1) 8 is even; divide by 2 and obtain 4.  Step 2) 4 is even; divide by 2 and obtain 2.  Step 3) 2 is even; divide by 2 and obtain 1.  Step 4) 1 is odd; subtract 1 and obtain 0. Example 3: Input: num = 123 Output: 12   Constraints: 0 <= num <= 106",
        "1014": "Given an array of integers arr and two integers k and threshold, return the number of sub-arrays of size k and average greater than or equal to threshold.   Example 1: Input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4 Output: 3 Explanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold). Example 2: Input: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5 Output: 6 Explanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.   Constraints: 1 <= arr.length <= 105 1 <= arr[i] <= 104 1 <= k <= arr.length 0 <= threshold <= 104",
        "1015": "Given two numbers, hour and minutes, return the smaller angle (in degrees) formed between the hour and the minute hand. Answers within 10-5 of the actual value will be accepted as correct.   Example 1: Input: hour = 12, minutes = 30 Output: 165 Example 2: Input: hour = 3, minutes = 30 Output: 75 Example 3: Input: hour = 3, minutes = 15 Output: 7.5   Constraints: 1 <= hour <= 12 0 <= minutes <= 59",
        "1016": "Given an array of integers arr, you are initially positioned at the first index of the array. In one step you can jump from index i to index: i + 1 where: i + 1 < arr.length. i - 1 where: i - 1 >= 0. j where: arr[i] == arr[j] and i != j. Return the minimum number of steps to reach the last index of the array. Notice that you can not jump outside of the array at any time.   Example 1: Input: arr = [100,-23,-23,404,100,23,23,23,3,404] Output: 3 Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array. Example 2: Input: arr = [7] Output: 0 Explanation: Start index is the last index. You do not need to jump. Example 3: Input: arr = [7,6,9,6,9,6,9,7] Output: 1 Explanation: You can jump directly from index 0 to index 7 which is last index of the array.   Constraints: 1 <= arr.length <= 5 * 104 -108 <= arr[i] <= 108",
        "1017": "Given an array arr of integers, check if there exist two indices i and j such that : i != j 0 <= i, j < arr.length arr[i] == 2 * arr[j]   Example 1: Input: arr = [10,2,5,3] Output: true Explanation: For i = 0 and j = 2, arr[i] == 10 == 2 * 5 == 2 * arr[j] Example 2: Input: arr = [3,1,7,11] Output: false Explanation: There is no i and j that satisfy the conditions.   Constraints: 2 <= arr.length <= 500 -103 <= arr[i] <= 103",
        "1018": "You are given two strings of the same length s and t. In one step you can choose any character of t and replace it with another character. Return the minimum number of steps to make t an anagram of s. An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.   Example 1: Input: s = \"bab\", t = \"aba\" Output: 1 Explanation: Replace the first 'a' in t with b, t = \"bba\" which is anagram of s. Example 2: Input: s = \"leetcode\", t = \"practice\" Output: 5 Explanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s. Example 3: Input: s = \"anagram\", t = \"mangaar\" Output: 0 Explanation: \"anagram\" and \"mangaar\" are anagrams.    Constraints: 1 <= s.length <= 5 * 104 s.length == t.length s and t consist of lowercase English letters only.",
        "1019": "A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day). For example, the period [10, 10000] (in seconds) would be partitioned into the following time chunks with these frequencies: Every minute (60-second chunks): [10,69], [70,129], [130,189], ..., [9970,10000] Every hour (3600-second chunks): [10,3609], [3610,7209], [7210,10000] Every day (86400-second chunks): [10,10000] Notice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (10000 in the above example). Design and implement an API to help the company with their analysis. Implement the TweetCounts class: TweetCounts() Initializes the TweetCounts object. void recordTweet(String tweetName, int time) Stores the tweetName at the recorded time (in seconds). List<Integer> getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime) Returns a list of integers representing the number of tweets with tweetName in each time chunk for the given period of time [startTime, endTime] (in seconds) and frequency freq. freq is one of \"minute\", \"hour\", or \"day\" representing a frequency of every minute, hour, or day respectively.   Example: Input [\"TweetCounts\",\"recordTweet\",\"recordTweet\",\"recordTweet\",\"getTweetCountsPerFrequency\",\"getTweetCountsPerFrequency\",\"recordTweet\",\"getTweetCountsPerFrequency\"] [[],[\"tweet3\",0],[\"tweet3\",60],[\"tweet3\",10],[\"minute\",\"tweet3\",0,59],[\"minute\",\"tweet3\",0,60],[\"tweet3\",120],[\"hour\",\"tweet3\",0,210]]  Output [null,null,null,null,[2],[2,1],null,[4]]  Explanation TweetCounts tweetCounts = new TweetCounts(); tweetCounts.recordTweet(\"tweet3\", 0);                              // New tweet \"tweet3\" at time 0 tweetCounts.recordTweet(\"tweet3\", 60);                             // New tweet \"tweet3\" at time 60 tweetCounts.recordTweet(\"tweet3\", 10);                             // New tweet \"tweet3\" at time 10 tweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 59); // return [2]; chunk [0,59] had 2 tweets tweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet tweetCounts.recordTweet(\"tweet3\", 120);                            // New tweet \"tweet3\" at time 120 tweetCounts.getTweetCountsPerFrequency(\"hour\", \"tweet3\", 0, 210);  // return [4]; chunk [0,210] had 4 tweets   Constraints: 0 <= time, startTime, endTime <= 109 0 <= endTime - startTime <= 104 There will be at most 104 calls in total to recordTweet and getTweetCountsPerFrequency.",
        "1020": "Given a m * n matrix seats  that represent seats distributions in a classroom. If a seat is broken, it is denoted by '#' character otherwise it is denoted by a '.' character. Students can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him. Return the maximum number of students that can take the exam together without any cheating being possible. Students must be placed in seats in good condition.   Example 1: Input: seats = [[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],                 [\".\",\"#\",\"#\",\"#\",\"#\",\".\"],                 [\"#\",\".\",\"#\",\"#\",\".\",\"#\"]] Output: 4 Explanation: Teacher can place 4 students in available seats so they don't cheat on the exam.  Example 2: Input: seats = [[\".\",\"#\"],                 [\"#\",\"#\"],                 [\"#\",\".\"],                 [\"#\",\"#\"],                 [\".\",\"#\"]] Output: 3 Explanation: Place all students in available seats.  Example 3: Input: seats = [[\"#\",\".\",\".\",\".\",\"#\"],                 [\".\",\"#\",\".\",\"#\",\".\"],                 [\".\",\".\",\"#\",\".\",\".\"],                 [\".\",\"#\",\".\",\"#\",\".\"],                 [\"#\",\".\",\".\",\".\",\"#\"]] Output: 10 Explanation: Place students in available seats in column 1, 3 and 5.   Constraints: seats contains only characters '.' and'#'. m == seats.length n == seats[i].length 1 <= m <= 8 1 <= n <= 8",
        "1021": "Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.   Example 1: Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]] Output: 8 Explanation: There are 8 negatives number in the matrix. Example 2: Input: grid = [[3,2],[1,0]] Output: 0   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 100 -100 <= grid[i][j] <= 100   Follow up: Could you find an O(n + m) solution?",
        "1022": "Design an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream. Implement the ProductOfNumbers class: ProductOfNumbers() Initializes the object with an empty stream. void add(int num) Appends the integer num to the stream. int getProduct(int k) Returns the product of the last k numbers in the current list. You can assume that always the current list has at least k numbers. The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.   Example: Input [\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"] [[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]  Output [null,null,null,null,null,null,20,40,0,null,32]  Explanation ProductOfNumbers productOfNumbers = new ProductOfNumbers(); productOfNumbers.add(3);        // [3] productOfNumbers.add(0);        // [3,0] productOfNumbers.add(2);        // [3,0,2] productOfNumbers.add(5);        // [3,0,2,5] productOfNumbers.add(4);        // [3,0,2,5,4] productOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20 productOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40 productOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0 productOfNumbers.add(8);        // [3,0,2,5,4,8] productOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32    Constraints: 0 <= num <= 100 1 <= k <= 4 * 104 At most 4 * 104 calls will be made to add and getProduct. The product of the stream at any point in time will fit in a 32-bit integer.",
        "1023": "You are given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi. You can attend an event i at any day d where startTimei <= d <= endTimei. You can only attend one event at any time d. Return the maximum number of events you can attend.   Example 1: Input: events = [[1,2],[2,3],[3,4]] Output: 3 Explanation: You can attend all the three events. One way to attend them all is as shown. Attend the first event on day 1. Attend the second event on day 2. Attend the third event on day 3. Example 2: Input: events= [[1,2],[2,3],[3,4],[1,2]] Output: 4   Constraints: 1 <= events.length <= 105 events[i].length == 2 1 <= startDayi <= endDayi <= 105",
        "1024": "You are given an array target of n integers. From a starting array arr consisting of n 1's, you may perform the following procedure : let x be the sum of all elements currently in your array. choose index i, such that 0 <= i < n and set the value of arr at index i to x. You may repeat this procedure as many times as needed. Return true if it is possible to construct the target array from arr, otherwise, return false.   Example 1: Input: target = [9,3,5] Output: true Explanation: Start with arr = [1, 1, 1]  [1, 1, 1], sum = 3 choose index 1 [1, 3, 1], sum = 5 choose index 2 [1, 3, 5], sum = 9 choose index 0 [9, 3, 5] Done Example 2: Input: target = [1,1,1,2] Output: false Explanation: Impossible to create target array from [1,1,1,1]. Example 3: Input: target = [8,5] Output: true   Constraints: n == target.length 1 <= n <= 5 * 104 1 <= target[i] <= 109",
        "1025": "You are given an integer array arr. Sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order. Return the array after sorting it.   Example 1: Input: arr = [0,1,2,3,4,5,6,7,8] Output: [0,1,2,4,8,3,5,6,7] Explantion: [0] is the only integer with 0 bits. [1,2,4,8] all have 1 bit. [3,5,6] have 2 bits. [7] has 3 bits. The sorted array by bits is [0,1,2,4,8,3,5,6,7] Example 2: Input: arr = [1024,512,256,128,64,32,16,8,4,2,1] Output: [1,2,4,8,16,32,64,128,256,512,1024] Explantion: All integers have 1 bit in the binary representation, you should just sort them in ascending order.   Constraints: 1 <= arr.length <= 500 0 <= arr[i] <= 104",
        "1026": "Given a string s consisting only of characters a, b and c. Return the number of substrings containing at least one occurrence of all these characters a, b and c.   Example 1: Input: s = \"abcabc\" Output: 10 Explanation: The substrings containing at least one occurrence of the characters a, b and c are \"abc\", \"abca\", \"abcab\", \"abcabc\", \"bca\", \"bcab\", \"bcabc\", \"cab\", \"cabc\" and \"abc\" (again).  Example 2: Input: s = \"aaacb\" Output: 3 Explanation: The substrings containing at least one occurrence of the characters a, b and c are \"aaacb\", \"aacb\" and \"acb\".  Example 3: Input: s = \"abc\" Output: 1   Constraints: 3 <= s.length <= 5 x 10^4 s only consists of a, b or c characters.",
        "1027": "Given n orders, each order consists of a pickup and a delivery service. Count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i).  Since the answer may be too large, return it modulo 10^9 + 7.   Example 1: Input: n = 1 Output: 1 Explanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1. Example 2: Input: n = 2 Output: 6 Explanation: All possible orders:  (P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1). This is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2. Example 3: Input: n = 3 Output: 90   Constraints: 1 <= n <= 500",
        "1028": "Write a program to count the number of days between two dates. The two dates are given as strings, their format is YYYY-MM-DD as shown in the examples.   Example 1: Input: date1 = \"2019-06-29\", date2 = \"2019-06-30\" Output: 1 Example 2: Input: date1 = \"2020-01-15\", date2 = \"2019-12-31\" Output: 15   Constraints: The given dates are valid dates between the years 1971 and 2100.",
        "1029": "You have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftChild[i] and rightChild[i], return true if and only if all the given nodes form exactly one valid binary tree. If node i has no left child then leftChild[i] will equal -1, similarly for the right child. Note that the nodes have no values and that we only use the node numbers in this problem.   Example 1: Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1] Output: true Example 2: Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1] Output: false Example 3: Input: n = 2, leftChild = [1,0], rightChild = [-1,-1] Output: false   Constraints: n == leftChild.length == rightChild.length 1 <= n <= 104 -1 <= leftChild[i], rightChild[i] <= n - 1",
        "1030": "Given an integer num, find the closest two integers in absolute difference whose product equals num + 1 or num + 2. Return the two integers in any order.   Example 1: Input: num = 8 Output: [3,3] Explanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen. Example 2: Input: num = 123 Output: [5,25] Example 3: Input: num = 999 Output: [40,25]   Constraints: 1 <= num <= 10^9",
        "1031": "Given an array of digits digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. If there is no answer return an empty string. Since the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.   Example 1: Input: digits = [8,1,9] Output: \"981\" Example 2: Input: digits = [8,6,7,1,0] Output: \"8760\" Example 3: Input: digits = [1] Output: \"\"   Constraints: 1 <= digits.length <= 104 0 <= digits[i] <= 9",
        "1032": "In a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition. The ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter. You are given an array of strings votes which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above. Return a string of all teams sorted by the ranking system.   Example 1: Input: votes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"] Output: \"ACB\" Explanation:  Team A was ranked first place by 5 voters. No other team was voted as first place, so team A is the first team. Team B was ranked second by 2 voters and ranked third by 3 voters. Team C was ranked second by 3 voters and ranked third by 2 voters. As most of the voters ranked C second, team C is the second team, and team B is the third. Example 2: Input: votes = [\"WXYZ\",\"XYZW\"] Output: \"XWYZ\" Explanation: X is the winner due to the tie-breaking rule. X has the same votes as W for the first position, but X has one vote in the second position, while W does not have any votes in the second position.  Example 3: Input: votes = [\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"] Output: \"ZMNAGUEDSJYLBOPHRQICWFXTVK\" Explanation: Only one voter, so their votes are used for the ranking.   Constraints: 1 <= votes.length <= 1000 1 <= votes[i].length <= 26 votes[i].length == votes[j].length for 0 <= i, j < votes.length. votes[i][j] is an English uppercase letter. All characters of votes[i] are unique. All the characters that occur in votes[0] also occur in votes[j] where 1 <= j < votes.length.",
        "1033": "Given a binary tree root and a linked list with head as the first node.  Return True if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree otherwise return False. In this context downward path means a path that starts at some node and goes downwards.   Example 1: Input: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3] Output: true Explanation: Nodes in blue form a subpath in the binary Tree.   Example 2: Input: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3] Output: true Example 3: Input: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3] Output: false Explanation: There is no path in the binary tree that contains all the elements of the linked list from head.   Constraints: The number of nodes in the tree will be in the range [1, 2500]. The number of nodes in the list will be in the range [1, 100]. 1 <= Node.val <= 100 for each node in the linked list and binary tree.",
        "1034": "Given an m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be: 1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1]) 2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1]) 3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j]) 4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j]) Notice that there could be some signs on the cells of the grid that point outside the grid. You will initially start at the upper left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. The valid path does not have to be the shortest. You can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only. Return the minimum cost to make the grid have at least one valid path.   Example 1: Input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]] Output: 3 Explanation: You will start at point (0, 0). The path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3) The total cost = 3. Example 2: Input: grid = [[1,1,3],[3,2,2],[1,1,4]] Output: 0 Explanation: You can follow the path from (0, 0) to (2, 2). Example 3: Input: grid = [[1,2],[4,3]] Output: 1   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 100 1 <= grid[i][j] <= 4",
        "1035": "You are given a string s. Reorder the string using the following algorithm: Remove the smallest character from s and append it to the result. Remove the smallest character from s that is greater than the last appended character, and append it to the result. Repeat step 2 until no more characters can be removed. Remove the largest character from s and append it to the result. Remove the largest character from s that is smaller than the last appended character, and append it to the result. Repeat step 5 until no more characters can be removed. Repeat steps 1 through 6 until all characters from s have been removed. If the smallest or largest character appears more than once, you may choose any occurrence to append to the result. Return the resulting string after reordering s using this algorithm.   Example 1: Input: s = \"aaaabbbbcccc\" Output: \"abccbaabccba\" Explanation: After steps 1, 2 and 3 of the first iteration, result = \"abc\" After steps 4, 5 and 6 of the first iteration, result = \"abccba\" First iteration is done. Now s = \"aabbcc\" and we go back to step 1 After steps 1, 2 and 3 of the second iteration, result = \"abccbaabc\" After steps 4, 5 and 6 of the second iteration, result = \"abccbaabccba\" Example 2: Input: s = \"rat\" Output: \"art\" Explanation: The word \"rat\" becomes \"art\" after re-ordering it with the mentioned algorithm.   Constraints: 1 <= s.length <= 500 s consists of only lowercase English letters.",
        "1036": "Given the string s, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.   Example 1: Input: s = \"eleetminicoworoep\" Output: 13 Explanation: The longest substring is \"leetminicowor\" which contains two each of the vowels: e, i and o and zero of the vowels: a and u. Example 2: Input: s = \"leetcodeisgreat\" Output: 5 Explanation: The longest substring is \"leetc\" which contains two e's. Example 3: Input: s = \"bcbcbc\" Output: 6 Explanation: In this case, the given string \"bcbcbc\" is the longest because all vowels: a, e, i, o and u appear zero times.   Constraints: 1 <= s.length <= 5 x 10^5 s contains only lowercase English letters.",
        "1037": "You are given the root of a binary tree. A ZigZag path for a binary tree is defined as follow: Choose any node in the binary tree and a direction (right or left). If the current direction is right, move to the right child of the current node; otherwise, move to the left child. Change the direction from right to left or from left to right. Repeat the second and third steps until you can't move in the tree. Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0). Return the longest ZigZag path contained in that tree.   Example 1: Input: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1] Output: 3 Explanation: Longest ZigZag path in blue nodes (right -> left -> right). Example 2: Input: root = [1,1,1,null,1,null,null,1,1,null,1] Output: 4 Explanation: Longest ZigZag path in blue nodes (left -> right -> left -> right). Example 3: Input: root = [1] Output: 0   Constraints: The number of nodes in the tree is in the range [1, 5 * 104]. 1 <= Node.val <= 100",
        "1038": "Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST). Assume a BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees.   Example 1: Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6] Output: 20 Explanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3. Example 2: Input: root = [4,3,null,1,2] Output: 2 Explanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2. Example 3: Input: root = [-4,-2,-5] Output: 0 Explanation: All values are negatives. Return an empty BST.   Constraints: The number of nodes in the tree is in the range [1, 4 * 104]. -4 * 104 <= Node.val <= 4 * 104",
        "1039": "Given an integer n, return a string with n characters such that each character in such string occurs an odd number of times. The returned string must contain only lowercase English letters. If there are multiples valid strings, return any of them.     Example 1: Input: n = 4 Output: \"pppz\" Explanation: \"pppz\" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as \"ohhh\" and \"love\". Example 2: Input: n = 2 Output: \"xy\" Explanation: \"xy\" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as \"ag\" and \"ur\". Example 3: Input: n = 7 Output: \"holasss\"   Constraints: 1 <= n <= 500",
        "1040": "You have a 1-indexed binary string of length n where all the bits are 0 initially. We will flip all the bits of this binary string (i.e., change them from 0 to 1) one by one. You are given a 1-indexed integer array flips where flips[i] indicates that the bit at index i will be flipped in the ith step. A binary string is prefix-aligned if, after the ith step, all the bits in the inclusive range [1, i] are ones and all the other bits are zeros. Return the number of times the binary string is prefix-aligned during the flipping process.   Example 1: Input: flips = [3,2,4,1,5] Output: 2 Explanation: The binary string is initially \"00000\". After applying step 1: The string becomes \"00100\", which is not prefix-aligned. After applying step 2: The string becomes \"01100\", which is not prefix-aligned. After applying step 3: The string becomes \"01110\", which is not prefix-aligned. After applying step 4: The string becomes \"11110\", which is prefix-aligned. After applying step 5: The string becomes \"11111\", which is prefix-aligned. We can see that the string was prefix-aligned 2 times, so we return 2. Example 2: Input: flips = [4,1,2,3] Output: 1 Explanation: The binary string is initially \"0000\". After applying step 1: The string becomes \"0001\", which is not prefix-aligned. After applying step 2: The string becomes \"1001\", which is not prefix-aligned. After applying step 3: The string becomes \"1101\", which is not prefix-aligned. After applying step 4: The string becomes \"1111\", which is prefix-aligned. We can see that the string was prefix-aligned 1 time, so we return 1.   Constraints: n == flips.length 1 <= n <= 5 * 104 flips is a permutation of the integers in the range [1, n].",
        "1041": "A company has n employees with a unique ID for each employee from 0 to n - 1. The head of the company is the one with headID. Each employee has one direct manager given in the manager array where manager[i] is the direct manager of the i-th employee, manager[headID] = -1. Also, it is guaranteed that the subordination relationships have a tree structure. The head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news. The i-th employee needs informTime[i] minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news). Return the number of minutes needed to inform all the employees about the urgent news.   Example 1: Input: n = 1, headID = 0, manager = [-1], informTime = [0] Output: 0 Explanation: The head of the company is the only employee in the company. Example 2: Input: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0] Output: 1 Explanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all. The tree structure of the employees in the company is shown.   Constraints: 1 <= n <= 105 0 <= headID < n manager.length == n 0 <= manager[i] < n manager[headID] == -1 informTime.length == n 0 <= informTime[i] <= 1000 informTime[i] == 0 if employee i has no subordinates. It is guaranteed that all the employees can be informed.",
        "1042": "Given an undirected tree consisting of n vertices numbered from 1 to n. A frog starts jumping from vertex 1. In one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex. The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. Return the probability that after t seconds the frog is on the vertex target. Answers within 10-5 of the actual answer will be accepted.   Example 1: Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4 Output: 0.16666666666666666  Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex 4 after second 2. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666.  Example 2: Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7 Output: 0.3333333333333333 Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after second 1.    Constraints: 1 <= n <= 100 edges.length == n - 1 edges[i].length == 2 1 <= ai, bi <= n 1 <= t <= 50 1 <= target <= n",
        "1043": "SQL Schema Pandas Schema",
        "1044": "Given two binary trees original and cloned and given a reference to a node target in the original tree. The cloned tree is a copy of the original tree. Return a reference to the same node in the cloned tree. Note that you are not allowed to change any of the two trees or the target node and the answer must be a reference to a node in the cloned tree.   Example 1: Input: tree = [7,4,3,null,null,6,19], target = 3 Output: 3 Explanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree. Example 2: Input: tree = [7], target =  7 Output: 7 Example 3: Input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4 Output: 4   Constraints: The number of nodes in the tree is in the range [1, 104]. The values of the nodes of the tree are unique. target node is a node from the original tree and is not null.   Follow up: Could you solve the problem if repeated values on the tree are allowed?",
        "1045": "Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order. A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.   Example 1: Input: matrix = [[3,7,8],[9,11,13],[15,16,17]] Output: [15] Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column. Example 2: Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]] Output: [12] Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column. Example 3: Input: matrix = [[7,8],[1,2]] Output: [7] Explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.   Constraints: m == mat.length n == mat[i].length 1 <= n, m <= 50 1 <= matrix[i][j] <= 105. All elements in the matrix are distinct.",
        "1046": "Design a stack that supports increment operations on its elements. Implement the CustomStack class: CustomStack(int maxSize) Initializes the object with maxSize which is the maximum number of elements in the stack. void push(int x) Adds x to the top of the stack if the stack has not reached the maxSize. int pop() Pops and returns the top of the stack or -1 if the stack is empty. void inc(int k, int val) Increments the bottom k elements of the stack by val. If there are less than k elements in the stack, increment all the elements in the stack.   Example 1: Input [\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"] [[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]] Output [null,null,null,2,null,null,null,null,null,103,202,201,-1] Explanation CustomStack stk = new CustomStack(3); // Stack is Empty [] stk.push(1);                          // stack becomes [1] stk.push(2);                          // stack becomes [1, 2] stk.pop();                            // return 2 --> Return top of the stack 2, stack becomes [1] stk.push(2);                          // stack becomes [1, 2] stk.push(3);                          // stack becomes [1, 2, 3] stk.push(4);                          // stack still [1, 2, 3], Do not add another elements as size is 4 stk.increment(5, 100);                // stack becomes [101, 102, 103] stk.increment(2, 100);                // stack becomes [201, 202, 103] stk.pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202] stk.pop();                            // return 202 --> Return top of the stack 202, stack becomes [201] stk.pop();                            // return 201 --> Return top of the stack 201, stack becomes [] stk.pop();                            // return -1 --> Stack is empty return -1.   Constraints: 1 <= maxSize, x, k <= 1000 0 <= val <= 100 At most 1000 calls will be made to each method of increment, push and pop each separately.",
        "1047": "Given two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays. The distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.   Example 1: Input: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2 Output: 2 Explanation:  For arr1[0]=4 we have:  |4-10|=6 > d=2  |4-9|=5 > d=2  |4-1|=3 > d=2  |4-8|=4 > d=2  For arr1[1]=5 we have:  |5-10|=5 > d=2  |5-9|=4 > d=2  |5-1|=4 > d=2  |5-8|=3 > d=2 For arr1[2]=8 we have: |8-10|=2 <= d=2 |8-9|=1 <= d=2 |8-1|=7 > d=2 |8-8|=0 <= d=2 Example 2: Input: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3 Output: 2 Example 3: Input: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6 Output: 1   Constraints: 1 <= arr1.length, arr2.length <= 500 -1000 <= arr1[i], arr2[j] <= 1000 0 <= d <= 100",
        "1048": "A cinema has n rows of seats, numbered from 1 to n and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above. Given the array reservedSeats containing the numbers of seats already reserved, for example, reservedSeats[i] = [3,8] means the seat located in row 3 and labelled with 8 is already reserved. Return the maximum number of four-person groups you can assign on the cinema seats. A four-person group occupies four adjacent seats in one single row. Seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.   Example 1: Input: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]] Output: 4 Explanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group. Example 2: Input: n = 2, reservedSeats = [[2,1],[1,8],[2,6]] Output: 2 Example 3: Input: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]] Output: 4   Constraints: 1 <= n <= 10^9 1 <= reservedSeats.length <= min(10*n, 10^4) reservedSeats[i].length == 2 1 <= reservedSeats[i][0] <= n 1 <= reservedSeats[i][1] <= 10 All reservedSeats[i] are distinct.",
        "1049": "The power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps: if x is even then x = x / 2 if x is odd then x = 3 * x + 1 For example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1). Given three integers lo, hi and k. The task is to sort all integers in the interval [lo, hi] by the power value in ascending order, if two or more integers have the same power value sort them by ascending order. Return the kth integer in the range [lo, hi] sorted by the power value. Notice that for any integer x (lo <= x <= hi) it is guaranteed that x will transform into 1 using these steps and that the power of x is will fit in a 32-bit signed integer.   Example 1: Input: lo = 12, hi = 15, k = 2 Output: 13 Explanation: The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1) The power of 13 is 9 The power of 14 is 17 The power of 15 is 17 The interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13. Notice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15. Example 2: Input: lo = 7, hi = 11, k = 4 Output: 7 Explanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14]. The interval sorted by power is [8, 10, 11, 7, 9]. The fourth number in the sorted array is 7.   Constraints: 1 <= lo <= hi <= 1000 1 <= k <= hi - lo + 1",
        "1050": "There is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows: You will pick any pizza slice. Your friend Alice will pick the next slice in the anti-clockwise direction of your pick. Your friend Bob will pick the next slice in the clockwise direction of your pick. Repeat until there are no more slices of pizzas. Given an integer array slices that represent the sizes of the pizza slices in a clockwise direction, return the maximum possible sum of slice sizes that you can pick.   Example 1: Input: slices = [1,2,3,4,5,6] Output: 10 Explanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6. Example 2: Input: slices = [8,9,8,6,1,1] Output: 16 Explanation: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.   Constraints: 3 * n == slices.length 1 <= slices.length <= 500 1 <= slices[i] <= 1000",
        "1051": "Given two arrays of integers nums and index. Your task is to create target array under the following rules: Initially target array is empty. From left to right read nums[i] and index[i], insert at index index[i] the value nums[i] in target array. Repeat the previous step until there are no elements to read in nums and index. Return the target array. It is guaranteed that the insertion operations will be valid.   Example 1: Input: nums = [0,1,2,3,4], index = [0,1,2,2,1] Output: [0,4,1,3,2] Explanation: nums       index     target 0            0        [0] 1            1        [0,1] 2            2        [0,1,2] 3            2        [0,1,3,2] 4            1        [0,4,1,3,2] Example 2: Input: nums = [1,2,3,4,0], index = [0,1,2,3,0] Output: [0,1,2,3,4] Explanation: nums       index     target 1            0        [1] 2            1        [1,2] 3            2        [1,2,3] 4            3        [1,2,3,4] 0            0        [0,1,2,3,4] Example 3: Input: nums = [1], index = [0] Output: [1]   Constraints: 1 <= nums.length, index.length <= 100 nums.length == index.length 0 <= nums[i] <= 100 0 <= index[i] <= i",
        "1052": "Given an integer array nums, return the sum of divisors of the integers in that array that have exactly four divisors. If there is no such integer in the array, return 0.   Example 1: Input: nums = [21,4,7] Output: 32 Explanation:  21 has 4 divisors: 1, 3, 7, 21 4 has 3 divisors: 1, 2, 4 7 has 2 divisors: 1, 7 The answer is the sum of divisors of 21 only. Example 2: Input: nums = [21,21] Output: 64 Example 3: Input: nums = [1,2,3,4,5] Output: 0   Constraints: 1 <= nums.length <= 104 1 <= nums[i] <= 105",
        "1053": "You are given an m x n grid. Each cell of grid represents a street. The street of grid[i][j] can be: 1 which means a street connecting the left cell and the right cell. 2 which means a street connecting the upper cell and the lower cell. 3 which means a street connecting the left cell and the lower cell. 4 which means a street connecting the right cell and the lower cell. 5 which means a street connecting the left cell and the upper cell. 6 which means a street connecting the right cell and the upper cell. You will initially start at the street of the upper-left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1). The path should only follow the streets. Notice that you are not allowed to change any street. Return true if there is a valid path in the grid or false otherwise.   Example 1: Input: grid = [[2,4,3],[6,5,2]] Output: true Explanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1). Example 2: Input: grid = [[1,2,1],[1,2,1]] Output: false Explanation: As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0) Example 3: Input: grid = [[1,1,2]] Output: false Explanation: You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 300 1 <= grid[i][j] <= 6",
        "1054": "A string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself). Given a string s, return the longest happy prefix of s. Return an empty string \"\" if no such prefix exists.   Example 1: Input: s = \"level\" Output: \"l\" Explanation: s contains 4 prefix excluding itself (\"l\", \"le\", \"lev\", \"leve\"), and suffix (\"l\", \"el\", \"vel\", \"evel\"). The largest prefix which is also suffix is given by \"l\". Example 2: Input: s = \"ababab\" Output: \"abab\" Explanation: \"abab\" is the largest prefix which is also suffix. They can overlap in the original string.   Constraints: 1 <= s.length <= 105 s contains only lowercase English letters.",
        "1055": "SQL Schema Pandas Schema",
        "1056": "Given an array of integers arr, a lucky integer is an integer that has a frequency in the array equal to its value. Return the largest lucky integer in the array. If there is no lucky integer return -1.   Example 1: Input: arr = [2,2,3,4] Output: 2 Explanation: The only lucky number in the array is 2 because frequency[2] == 2. Example 2: Input: arr = [1,2,2,3,3,3] Output: 3 Explanation: 1, 2 and 3 are all lucky numbers, return the largest of them. Example 3: Input: arr = [2,2,2,3,3] Output: -1 Explanation: There are no lucky numbers in the array.   Constraints: 1 <= arr.length <= 500 1 <= arr[i] <= 500",
        "1057": "There are n soldiers standing in a line. Each soldier is assigned a unique rating value. You have to form a team of 3 soldiers amongst them under the following rules: Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]). A team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n). Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).   Example 1: Input: rating = [2,5,3,4,1] Output: 3 Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1).  Example 2: Input: rating = [2,1,3] Output: 0 Explanation: We can't form any team given the conditions. Example 3: Input: rating = [1,2,3,4] Output: 4   Constraints: n == rating.length 3 <= n <= 1000 1 <= rating[i] <= 105 All the integers in rating are unique.",
        "1058": "An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another. Implement the UndergroundSystem class: void checkIn(int id, string stationName, int t) A customer with a card ID equal to id, checks in at the station stationName at time t. A customer can only be checked into one place at a time. void checkOut(int id, string stationName, int t) A customer with a card ID equal to id, checks out from the station stationName at time t. double getAverageTime(string startStation, string endStation) Returns the average time it takes to travel from startStation to endStation. The average time is computed from all the previous traveling times from startStation to endStation that happened directly, meaning a check in at startStation followed by a check out from endStation. The time it takes to travel from startStation to endStation may be different from the time it takes to travel from endStation to startStation. There will be at least one customer that has traveled from startStation to endStation before getAverageTime is called. You may assume all calls to the checkIn and checkOut methods are consistent. If a customer checks in at time t1 then checks out at time t2, then t1 < t2. All events happen in chronological order.   Example 1: Input [\"UndergroundSystem\",\"checkIn\",\"checkIn\",\"checkIn\",\"checkOut\",\"checkOut\",\"checkOut\",\"getAverageTime\",\"getAverageTime\",\"checkIn\",\"getAverageTime\",\"checkOut\",\"getAverageTime\"] [[],[45,\"Leyton\",3],[32,\"Paradise\",8],[27,\"Leyton\",10],[45,\"Waterloo\",15],[27,\"Waterloo\",20],[32,\"Cambridge\",22],[\"Paradise\",\"Cambridge\"],[\"Leyton\",\"Waterloo\"],[10,\"Leyton\",24],[\"Leyton\",\"Waterloo\"],[10,\"Waterloo\",38],[\"Leyton\",\"Waterloo\"]]  Output [null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]  Explanation UndergroundSystem undergroundSystem = new UndergroundSystem(); undergroundSystem.checkIn(45, \"Leyton\", 3); undergroundSystem.checkIn(32, \"Paradise\", 8); undergroundSystem.checkIn(27, \"Leyton\", 10); undergroundSystem.checkOut(45, \"Waterloo\", 15);  // Customer 45 \"Leyton\" -> \"Waterloo\" in 15-3 = 12 undergroundSystem.checkOut(27, \"Waterloo\", 20);  // Customer 27 \"Leyton\" -> \"Waterloo\" in 20-10 = 10 undergroundSystem.checkOut(32, \"Cambridge\", 22); // Customer 32 \"Paradise\" -> \"Cambridge\" in 22-8 = 14 undergroundSystem.getAverageTime(\"Paradise\", \"Cambridge\"); // return 14.00000. One trip \"Paradise\" -> \"Cambridge\", (14) / 1 = 14 undergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000. Two trips \"Leyton\" -> \"Waterloo\", (10 + 12) / 2 = 11 undergroundSystem.checkIn(10, \"Leyton\", 24); undergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000 undergroundSystem.checkOut(10, \"Waterloo\", 38);  // Customer 10 \"Leyton\" -> \"Waterloo\" in 38-24 = 14 undergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 12.00000. Three trips \"Leyton\" -> \"Waterloo\", (10 + 12 + 14) / 3 = 12 Example 2: Input [\"UndergroundSystem\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\"] [[],[10,\"Leyton\",3],[10,\"Paradise\",8],[\"Leyton\",\"Paradise\"],[5,\"Leyton\",10],[5,\"Paradise\",16],[\"Leyton\",\"Paradise\"],[2,\"Leyton\",21],[2,\"Paradise\",30],[\"Leyton\",\"Paradise\"]]  Output [null,null,null,5.00000,null,null,5.50000,null,null,6.66667]  Explanation UndergroundSystem undergroundSystem = new UndergroundSystem(); undergroundSystem.checkIn(10, \"Leyton\", 3); undergroundSystem.checkOut(10, \"Paradise\", 8); // Customer 10 \"Leyton\" -> \"Paradise\" in 8-3 = 5 undergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.00000, (5) / 1 = 5 undergroundSystem.checkIn(5, \"Leyton\", 10); undergroundSystem.checkOut(5, \"Paradise\", 16); // Customer 5 \"Leyton\" -> \"Paradise\" in 16-10 = 6 undergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.50000, (5 + 6) / 2 = 5.5 undergroundSystem.checkIn(2, \"Leyton\", 21); undergroundSystem.checkOut(2, \"Paradise\", 30); // Customer 2 \"Leyton\" -> \"Paradise\" in 30-21 = 9 undergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667   Constraints: 1 <= id, t <= 106 1 <= stationName.length, startStation.length, endStation.length <= 10 All strings consist of uppercase and lowercase English letters and digits. There will be at most 2 * 104 calls in total to checkIn, checkOut, and getAverageTime. Answers within 10-5 of the actual value will be accepted.",
        "1059": "Given the strings s1 and s2 of size n and the string evil, return the number of good strings. A good string has size n, it is alphabetically greater than or equal to s1, it is alphabetically smaller than or equal to s2, and it does not contain the string evil as a substring. Since the answer can be a huge number, return this modulo 109 + 7.   Example 1: Input: n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\" Output: 51  Explanation: There are 25 good strings starting with 'a': \"aa\",\"ac\",\"ad\",...,\"az\". Then there are 25 good strings starting with 'c': \"ca\",\"cc\",\"cd\",...,\"cz\" and finally there is one good string starting with 'd': \"da\".  Example 2: Input: n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\" Output: 0  Explanation: All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix \"leet\", therefore, there is not any good string. Example 3: Input: n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\" Output: 2   Constraints: s1.length == n s2.length == n s1 <= s2 1 <= n <= 500 1 <= evil.length <= 50 All strings consist of lowercase English letters.",
        "1060": "You are given a circle represented as (radius, xCenter, yCenter) and an axis-aligned rectangle represented as (x1, y1, x2, y2), where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the rectangle. Return true if the circle and rectangle are overlapped otherwise return false. In other words, check if there is any point (xi, yi) that belongs to the circle and the rectangle at the same time.   Example 1: Input: radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1 Output: true Explanation: Circle and rectangle share the point (1,0). Example 2: Input: radius = 1, xCenter = 1, yCenter = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1 Output: false Example 3: Input: radius = 1, xCenter = 0, yCenter = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1 Output: true   Constraints: 1 <= radius <= 2000 -104 <= xCenter, yCenter <= 104 -104 <= x1 < x2 <= 104 -104 <= y1 < y2 <= 104",
        "1061": "A chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time. Like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. time[i] * satisfaction[i]. Return the maximum sum of like-time coefficient that the chef can obtain after preparing some amount of dishes. Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.   Example 1: Input: satisfaction = [-1,-8,0,5,-9] Output: 14 Explanation: After Removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14). Each dish is prepared in one unit of time. Example 2: Input: satisfaction = [4,3,2] Output: 20 Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20) Example 3: Input: satisfaction = [-1,-4,-5] Output: 0 Explanation: People do not like the dishes. No dish is prepared.   Constraints: n == satisfaction.length 1 <= n <= 500 -1000 <= satisfaction[i] <= 1000",
        "1062": "",
        "1063": "A string s is called happy if it satisfies the following conditions: s only contains the letters 'a', 'b', and 'c'. s does not contain any of \"aaa\", \"bbb\", or \"ccc\" as a substring. s contains at most a occurrences of the letter 'a'. s contains at most b occurrences of the letter 'b'. s contains at most c occurrences of the letter 'c'. Given three integers a, b, and c, return the longest possible happy string. If there are multiple longest happy strings, return any of them. If there is no such string, return the empty string \"\". A substring is a contiguous sequence of characters within a string.   Example 1: Input: a = 1, b = 1, c = 7 Output: \"ccaccbcc\" Explanation: \"ccbccacc\" would also be a correct answer. Example 2: Input: a = 7, b = 1, c = 0 Output: \"aabaa\" Explanation: It is the only correct answer in this case.   Constraints: 0 <= a, b, c <= 100 a + b + c > 0",
        "1064": "Alice and Bob continue their games with piles of stones. There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue. Alice and Bob take turns, with Alice starting first. On each player's turn, that player can take 1, 2, or 3 stones from the first remaining stones in the row. The score of each player is the sum of the values of the stones taken. The score of each player is 0 initially. The objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken. Assume Alice and Bob play optimally. Return \"Alice\" if Alice will win, \"Bob\" if Bob will win, or \"Tie\" if they will end the game with the same score.   Example 1: Input: stoneValue = [1,2,3,7] Output: \"Bob\" Explanation: Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins. Example 2: Input: stoneValue = [1,2,3,-9] Output: \"Alice\" Explanation: Alice must choose all the three piles at the first move to win and leave Bob with negative score. If Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. In the next move, Alice will take the pile with value = -9 and lose. If Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. In the next move, Alice will take the pile with value = -9 and also lose. Remember that both play optimally so here Alice will choose the scenario that makes her win. Example 3: Input: stoneValue = [1,2,3,6] Output: \"Tie\" Explanation: Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.   Constraints: 1 <= stoneValue.length <= 5 * 104 -1000 <= stoneValue[i] <= 1000",
        "1065": "SQL Schema Pandas Schema",
        "1066": "Given an array of string words, return all strings in words that is a substring of another word. You can return the answer in any order. A substring is a contiguous sequence of characters within a string   Example 1: Input: words = [\"mass\",\"as\",\"hero\",\"superhero\"] Output: [\"as\",\"hero\"] Explanation: \"as\" is substring of \"mass\" and \"hero\" is substring of \"superhero\". [\"hero\",\"as\"] is also a valid answer. Example 2: Input: words = [\"leetcode\",\"et\",\"code\"] Output: [\"et\",\"code\"] Explanation: \"et\", \"code\" are substring of \"leetcode\". Example 3: Input: words = [\"blue\",\"green\",\"bu\"] Output: [] Explanation: No string of words is substring of another string.   Constraints: 1 <= words.length <= 100 1 <= words[i].length <= 30 words[i] contains only lowercase English letters. All the strings of words are unique.",
        "1067": "Given the array queries of positive integers between 1 and m, you have to process all queries[i] (from i=0 to i=queries.length-1) according to the following rules: In the beginning, you have the permutation P=[1,2,3,...,m]. For the current i, find the position of queries[i] in the permutation P (indexing from 0) and then move this at the beginning of the permutation P. Notice that the position of queries[i] in P is the result for queries[i]. Return an array containing the result for the given queries.   Example 1: Input: queries = [3,1,2,1], m = 5 Output: [2,1,2,1]  Explanation: The queries are processed as follow:  For i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is 2, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5].  For i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5].  For i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is 2, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5].  For i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5].  Therefore, the array containing the result is [2,1,2,1].   Example 2: Input: queries = [4,1,2,2], m = 4 Output: [3,1,2,0] Example 3: Input: queries = [7,5,5,8,3], m = 8 Output: [6,5,0,7,5]   Constraints: 1 <= m <= 10^3 1 <= queries.length <= m 1 <= queries[i] <= m",
        "1068": "You have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color). Given n the number of rows of the grid, return the number of ways you can paint this grid. As the answer may grow large, the answer must be computed modulo 109 + 7.   Example 1: Input: n = 1 Output: 12 Explanation: There are 12 possible way to paint the grid as shown. Example 2: Input: n = 5000 Output: 30228214   Constraints: n == grid.length 1 <= n <= 5000",
        "1069": "Given an array of integers nums, you start with an initial positive value startValue. In each iteration, you calculate the step by step sum of startValue plus elements in nums (from left to right). Return the minimum positive value of startValue such that the step by step sum is never less than 1.   Example 1: Input: nums = [-3,2,-3,4,2] Output: 5 Explanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1. step by step sum startValue = 4 | startValue = 5 | nums   (4 -3 ) = 1  | (5 -3 ) = 2    |  -3   (1 +2 ) = 3  | (2 +2 ) = 4    |   2   (3 -3 ) = 0  | (4 -3 ) = 1    |  -3   (0 +4 ) = 4  | (1 +4 ) = 5    |   4   (4 +2 ) = 6  | (5 +2 ) = 7    |   2 Example 2: Input: nums = [1,2] Output: 1 Explanation: Minimum start value should be positive.  Example 3: Input: nums = [1,-2,-3] Output: 5   Constraints: 1 <= nums.length <= 100 -100 <= nums[i] <= 100",
        "1070": "Given an integer k, return the minimum number of Fibonacci numbers whose sum is equal to k. The same Fibonacci number can be used multiple times. The Fibonacci numbers are defined as: F1 = 1 F2 = 1 Fn = Fn-1 + Fn-2 for n > 2. It is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to k.   Example 1: Input: k = 7 Output: 2  Explanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ...  For k = 7 we can use 2 + 5 = 7. Example 2: Input: k = 10 Output: 2  Explanation: For k = 10 we can use 2 + 8 = 10. Example 3: Input: k = 19 Output: 3  Explanation: For k = 19 we can use 1 + 5 + 13 = 19.   Constraints: 1 <= k <= 109",
        "1071": "A happy string is a string that: consists only of letters of the set ['a', 'b', 'c']. s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed). For example, strings \"abc\", \"ac\", \"b\" and \"abcbabcbcb\" are all happy strings and strings \"aa\", \"baa\" and \"ababbc\" are not happy strings. Given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order. Return the kth string of this list or return an empty string if there are less than k happy strings of length n.   Example 1: Input: n = 1, k = 3 Output: \"c\" Explanation: The list [\"a\", \"b\", \"c\"] contains all happy strings of length 1. The third string is \"c\". Example 2: Input: n = 1, k = 4 Output: \"\" Explanation: There are only 3 happy strings of length 1. Example 3: Input: n = 3, k = 9 Output: \"cab\" Explanation: There are 12 different happy string of length 3 [\"aba\", \"abc\", \"aca\", \"acb\", \"bab\", \"bac\", \"bca\", \"bcb\", \"cab\", \"cac\", \"cba\", \"cbc\"]. You will find the 9th string = \"cab\"   Constraints: 1 <= n <= 10 1 <= k <= 100",
        "1072": "A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits s and all we know is that all integers in the array were in the range [1, k] and there are no leading zeros in the array. Given the string s and the integer k, return the number of the possible arrays that can be printed as s using the mentioned program. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: s = \"1000\", k = 10000 Output: 1 Explanation: The only possible array is [1000] Example 2: Input: s = \"1000\", k = 10 Output: 0 Explanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10. Example 3: Input: s = \"1317\", k = 2000 Output: 8 Explanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]   Constraints: 1 <= s.length <= 105 s consists of only digits and does not contain leading zeros. 1 <= k <= 109",
        "1073": "You are given an alphanumeric string s. (Alphanumeric string is a string consisting of lowercase English letters and digits). You have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type. Return the reformatted string or return an empty string if it is impossible to reformat the string.   Example 1: Input: s = \"a0b1c2\" Output: \"0a1b2c\" Explanation: No two adjacent characters have the same type in \"0a1b2c\". \"a0b1c2\", \"0a1b2c\", \"0c2a1b\" are also valid permutations. Example 2: Input: s = \"leetcode\" Output: \"\" Explanation: \"leetcode\" has only characters so we cannot separate them by digits. Example 3: Input: s = \"1229857369\" Output: \"\" Explanation: \"1229857369\" has only digits so we cannot separate them by characters.   Constraints: 1 <= s.length <= 500 s consists of only lowercase English letters and/or digits.",
        "1074": "Given the array orders, which represents the orders that customers have done in a restaurant. More specifically orders[i]=[customerNamei,tableNumberi,foodItemi] where customerNamei is the name of the customer, tableNumberi is the table customer sit at, and foodItemi is the item customer orders. Return the restaurant's “display table”. The “display table” is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is “Table”, followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.   Example 1: Input: orders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]] Output: [[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]]  Explanation: The displaying table looks like: Table,Beef Burrito,Ceviche,Fried Chicken,Water 3    ,0           ,2      ,1            ,0 5    ,0           ,1      ,0            ,1 10   ,1           ,0      ,0            ,0 For the table 3: David orders \"Ceviche\" and \"Fried Chicken\", and Rous orders \"Ceviche\". For the table 5: Carla orders \"Water\" and \"Ceviche\". For the table 10: Corina orders \"Beef Burrito\".  Example 2: Input: orders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]] Output: [[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]]  Explanation:  For the table 1: Adam and Brianna order \"Canadian Waffles\". For the table 12: James, Ratesh and Amadeus order \"Fried Chicken\". Example 3: Input: orders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]] Output: [[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]]   Constraints: 1 <= orders.length <= 5 * 10^4 orders[i].length == 3 1 <= customerNamei.length, foodItemi.length <= 20 customerNamei and foodItemi consist of lowercase and uppercase English letters and the space character. tableNumberi is a valid integer between 1 and 500.",
        "1075": "You are given the string croakOfFrogs, which represents a combination of the string \"croak\" from different frogs, that is, multiple frogs can croak at the same time, so multiple \"croak\" are mixed. Return the minimum number of different frogs to finish all the croaks in the given string. A valid \"croak\" means a frog is printing five letters 'c', 'r', 'o', 'a', and 'k' sequentially. The frogs have to print all five letters to finish a croak. If the given string is not a combination of a valid \"croak\" return -1.   Example 1: Input: croakOfFrogs = \"croakcroak\" Output: 1  Explanation: One frog yelling \"croak\" twice. Example 2: Input: croakOfFrogs = \"crcoakroak\" Output: 2  Explanation: The minimum number of frogs is two.  The first frog could yell \"crcoakroak\". The second frog could yell later \"crcoakroak\". Example 3: Input: croakOfFrogs = \"croakcrook\" Output: -1 Explanation: The given string is an invalid combination of \"croak\" from different frogs.   Constraints: 1 <= croakOfFrogs.length <= 105 croakOfFrogs is either 'c', 'r', 'o', 'a', or 'k'.",
        "1076": "You are given three integers n, m and k. Consider the following algorithm to find the maximum element of an array of positive integers: You should build the array arr which has the following properties: arr has exactly n integers. 1 <= arr[i] <= m where (0 <= i < n). After applying the mentioned algorithm to arr, the value search_cost is equal to k. Return the number of ways to build the array arr under the mentioned conditions. As the answer may grow large, the answer must be computed modulo 109 + 7.   Example 1: Input: n = 2, m = 3, k = 1 Output: 6 Explanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3] Example 2: Input: n = 5, m = 2, k = 3 Output: 0 Explanation: There are no possible arrays that satisfy the mentioned conditions. Example 3: Input: n = 9, m = 1, k = 1 Output: 1 Explanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]   Constraints: 1 <= n <= 50 1 <= m <= 100 0 <= k <= n",
        "1077": "There are several cards arranged in a row, and each card has an associated number of points. The points are given in the integer array cardPoints. In one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards. Your score is the sum of the points of the cards you have taken. Given the integer array cardPoints and the integer k, return the maximum score you can obtain.   Example 1: Input: cardPoints = [1,2,3,4,5,6,1], k = 3 Output: 12 Explanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12. Example 2: Input: cardPoints = [2,2,2], k = 2 Output: 4 Explanation: Regardless of which two cards you take, your score will always be 4. Example 3: Input: cardPoints = [9,7,7,9,7,7,9], k = 7 Output: 55 Explanation: You have to take all the cards. Your score is the sum of points of all cards.   Constraints: 1 <= cardPoints.length <= 105 1 <= cardPoints[i] <= 104 1 <= k <= cardPoints.length",
        "1078": "Given a 2D integer array nums, return all elements of nums in diagonal order as shown in the below images.   Example 1: Input: nums = [[1,2,3],[4,5,6],[7,8,9]] Output: [1,4,2,7,5,3,8,6,9] Example 2: Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]] Output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]   Constraints: 1 <= nums.length <= 105 1 <= nums[i].length <= 105 1 <= sum(nums[i].length) <= 105 1 <= nums[i][j] <= 105",
        "1079": "Given an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied. A subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.   Example 1: Input: nums = [10,2,-10,5,20], k = 2 Output: 37 Explanation: The subsequence is [10, 2, 5, 20]. Example 2: Input: nums = [-1,-2,-3], k = 1 Output: -1 Explanation: The subsequence must be non-empty, so we choose the largest number. Example 3: Input: nums = [10,-2,-10,-5,20], k = 2 Output: 23 Explanation: The subsequence is [10, -2, -5, 20].   Constraints: 1 <= k <= nums.length <= 105 -104 <= nums[i] <= 104",
        "1080": "There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have. Return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise. Note that multiple kids can have the greatest number of candies.   Example 1: Input: candies = [2,3,5,1,3], extraCandies = 3 Output: [true,true,true,false,true]  Explanation: If you give all extraCandies to: - Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids. - Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids. - Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids. - Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids. - Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids. Example 2: Input: candies = [4,2,1,1,2], extraCandies = 1 Output: [true,false,false,false,false]  Explanation: There is only 1 extra candy. Kid 1 will always have the greatest number of candies, even if a different kid is given the extra candy. Example 3: Input: candies = [12,1,12], extraCandies = 10 Output: [true,false,true]   Constraints: n == candies.length 2 <= n <= 100 1 <= candies[i] <= 100 1 <= extraCandies <= 50",
        "1081": "You are given an integer num. You will apply the following steps exactly two times: Pick a digit x (0 <= x <= 9). Pick another digit y (0 <= y <= 9). The digit y can be equal to x. Replace all the occurrences of x in the decimal representation of num by y. The new integer cannot have any leading zeros, also the new integer cannot be 0. Let a and b be the results of applying the operations to num the first and second times, respectively. Return the max difference between a and b.   Example 1: Input: num = 555 Output: 888 Explanation: The first time pick x = 5 and y = 9 and store the new integer in a. The second time pick x = 5 and y = 1 and store the new integer in b. We have now a = 999 and b = 111 and max difference = 888 Example 2: Input: num = 9 Output: 8 Explanation: The first time pick x = 9 and y = 9 and store the new integer in a. The second time pick x = 9 and y = 1 and store the new integer in b. We have now a = 9 and b = 1 and max difference = 8   Constraints: 1 <= num <= 108",
        "1082": "Given two strings: s1 and s2 with the same size, check if some permutation of string s1 can break some permutation of string s2 or vice-versa. In other words s2 can break s1 or vice-versa. A string x can break string y (both of size n) if x[i] >= y[i] (in alphabetical order) for all i between 0 and n-1.   Example 1: Input: s1 = \"abc\", s2 = \"xya\" Output: true Explanation: \"ayx\" is a permutation of s2=\"xya\" which can break to string \"abc\" which is a permutation of s1=\"abc\". Example 2: Input: s1 = \"abe\", s2 = \"acd\" Output: false  Explanation: All permutations for s1=\"abe\" are: \"abe\", \"aeb\", \"bae\", \"bea\", \"eab\" and \"eba\" and all permutation for s2=\"acd\" are: \"acd\", \"adc\", \"cad\", \"cda\", \"dac\" and \"dca\". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa. Example 3: Input: s1 = \"leetcodee\", s2 = \"interview\" Output: true   Constraints: s1.length == n s2.length == n 1 <= n <= 10^5 All strings consist of lowercase English letters.",
        "1083": "There are n people and 40 types of hats labeled from 1 to 40. Given a 2D integer array hats, where hats[i] is a list of all hats preferred by the ith person. Return the number of ways that the n people wear different hats to each other. Since the answer may be too large, return it modulo 109 + 7.   Example 1: Input: hats = [[3,4],[4,5],[5]] Output: 1 Explanation: There is only one way to choose hats given the conditions.  First person choose hat 3, Second person choose hat 4 and last one hat 5. Example 2: Input: hats = [[3,5,1],[3,5]] Output: 4 Explanation: There are 4 ways to choose hats: (3,5), (5,3), (1,3) and (1,5) Example 3: Input: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]] Output: 24 Explanation: Each person can choose hats labeled from 1 to 4. Number of Permutations of (1,2,3,4) = 24.   Constraints: n == hats.length 1 <= n <= 10 1 <= hats[i].length <= 40 1 <= hats[i][j] <= 40 hats[i] contains a list of unique integers.",
        "1084": "You are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. Return the destination city, that is, the city without any path outgoing to another city. It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.   Example 1: Input: paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]] Output: \"Sao Paulo\"  Explanation: Starting at \"London\" city you will reach \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" -> \"New York\" -> \"Lima\" -> \"Sao Paulo\". Example 2: Input: paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]] Output: \"A\" Explanation: All possible trips are:  \"D\" -> \"B\" -> \"C\" -> \"A\".  \"B\" -> \"C\" -> \"A\".  \"C\" -> \"A\".  \"A\".  Clearly the destination city is \"A\". Example 3: Input: paths = [[\"A\",\"Z\"]] Output: \"Z\"   Constraints: 1 <= paths.length <= 100 paths[i].length == 2 1 <= cityAi.length, cityBi.length <= 10 cityAi != cityBi All strings consist of lowercase and uppercase English letters and the space character.",
        "1085": "Given an binary array nums and an integer k, return true if all 1's are at least k places away from each other, otherwise return false.   Example 1: Input: nums = [1,0,0,0,1,0,0,1], k = 2 Output: true Explanation: Each of the 1s are at least 2 places away from each other. Example 2: Input: nums = [1,0,0,1,0,1], k = 2 Output: false Explanation: The second 1 and third 1 are only one apart from each other.   Constraints: 1 <= nums.length <= 105 0 <= k <= nums.length nums[i] is 0 or 1",
        "1086": "Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.   Example 1: Input: nums = [8,2,4,7], limit = 4 Output: 2  Explanation: All subarrays are:  [8] with maximum absolute diff |8-8| = 0 <= 4. [8,2] with maximum absolute diff |8-2| = 6 > 4.  [8,2,4] with maximum absolute diff |8-2| = 6 > 4. [8,2,4,7] with maximum absolute diff |8-2| = 6 > 4. [2] with maximum absolute diff |2-2| = 0 <= 4. [2,4] with maximum absolute diff |2-4| = 2 <= 4. [2,4,7] with maximum absolute diff |2-7| = 5 > 4. [4] with maximum absolute diff |4-4| = 0 <= 4. [4,7] with maximum absolute diff |4-7| = 3 <= 4. [7] with maximum absolute diff |7-7| = 0 <= 4.  Therefore, the size of the longest subarray is 2. Example 2: Input: nums = [10,1,2,4,7,2], limit = 5 Output: 4  Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5. Example 3: Input: nums = [4,2,2,2,4,4,2,2], limit = 0 Output: 3   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 0 <= limit <= 109",
        "1087": "You are given an m x n matrix mat that has its rows sorted in non-decreasing order and an integer k. You are allowed to choose exactly one element from each row to form an array. Return the kth smallest array sum among all possible arrays.   Example 1: Input: mat = [[1,3,11],[2,4,6]], k = 5 Output: 7 Explanation: Choosing one element from each row, the first k smallest sum are: [1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7. Example 2: Input: mat = [[1,3,11],[2,4,6]], k = 9 Output: 17 Example 3: Input: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7 Output: 9 Explanation: Choosing one element from each row, the first k smallest sum are: [1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.     Constraints: m == mat.length n == mat.length[i] 1 <= m, n <= 40 1 <= mat[i][j] <= 5000 1 <= k <= min(200, nm) mat[i] is a non-decreasing array.",
        "1088": "You are given an integer array target and an integer n. You have an empty stack with the two following operations: \"Push\": pushes an integer to the top of the stack. \"Pop\": removes the integer on the top of the stack. You also have a stream of the integers in the range [1, n]. Use the two stack operations to make the numbers in the stack (from the bottom to the top) equal to target. You should follow the following rules: If the stream of the integers is not empty, pick the next integer from the stream and push it to the top of the stack. If the stack is not empty, pop the integer at the top of the stack. If, at any moment, the elements in the stack (from the bottom to the top) are equal to target, do not read new integers from the stream and do not do more operations on the stack. Return the stack operations needed to build target following the mentioned rules. If there are multiple valid answers, return any of them.   Example 1: Input: target = [1,3], n = 3 Output: [\"Push\",\"Push\",\"Pop\",\"Push\"] Explanation: Initially the stack s is empty. The last element is the top of the stack. Read 1 from the stream and push it to the stack. s = [1]. Read 2 from the stream and push it to the stack. s = [1,2]. Pop the integer on the top of the stack. s = [1]. Read 3 from the stream and push it to the stack. s = [1,3]. Example 2: Input: target = [1,2,3], n = 3 Output: [\"Push\",\"Push\",\"Push\"] Explanation: Initially the stack s is empty. The last element is the top of the stack. Read 1 from the stream and push it to the stack. s = [1]. Read 2 from the stream and push it to the stack. s = [1,2]. Read 3 from the stream and push it to the stack. s = [1,2,3]. Example 3: Input: target = [1,2], n = 4 Output: [\"Push\",\"Push\"] Explanation: Initially the stack s is empty. The last element is the top of the stack. Read 1 from the stream and push it to the stack. s = [1]. Read 2 from the stream and push it to the stack. s = [1,2]. Since the stack (from the bottom to the top) is equal to target, we stop the stack operations. The answers that read integer 3 from the stream are not accepted.   Constraints: 1 <= target.length <= 100 1 <= n <= 100 1 <= target[i] <= n target is strictly increasing.",
        "1089": "Given an array of integers arr. We want to select three indices i, j and k where (0 <= i < j <= k < arr.length). Let's define a and b as follows: a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1] b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k] Note that ^ denotes the bitwise-xor operation. Return the number of triplets (i, j and k) Where a == b.   Example 1: Input: arr = [2,3,1,6,7] Output: 4 Explanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4) Example 2: Input: arr = [1,1,1,1,1] Output: 10   Constraints: 1 <= arr.length <= 300 1 <= arr[i] <= 108",
        "1090": "Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex. The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.   Example 1: Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false] Output: 8  Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.   Example 2: Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false] Output: 6 Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.   Example 3: Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false] Output: 0   Constraints: 1 <= n <= 105 edges.length == n - 1 edges[i].length == 2 0 <= ai < bi <= n - 1 hasApple.length == n",
        "1091": "Given a rectangular pizza represented as a rows x cols matrix containing the following characters: 'A' (an apple) and '.' (empty cell) and given the integer k. You have to cut the pizza into k pieces using k-1 cuts.  For each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person. Return the number of ways of cutting the pizza such that each piece contains at least one apple. Since the answer can be a huge number, return this modulo 10^9 + 7.   Example 1: Input: pizza = [\"A..\",\"AAA\",\"...\"], k = 3 Output: 3  Explanation: The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple. Example 2: Input: pizza = [\"A..\",\"AA.\",\"...\"], k = 3 Output: 1 Example 3: Input: pizza = [\"A..\",\"A..\",\"...\"], k = 1 Output: 1   Constraints: 1 <= rows, cols <= 50 rows == pizza.length cols == pizza[i].length 1 <= k <= 10 pizza consists of characters 'A' and '.' only.",
        "1092": "Given an integer n, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to n. You can return the answer in any order.   Example 1: Input: n = 2 Output: [\"1/2\"] Explanation: \"1/2\" is the only unique fraction with a denominator less-than-or-equal-to 2. Example 2: Input: n = 3 Output: [\"1/2\",\"1/3\",\"2/3\"] Example 3: Input: n = 4 Output: [\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"] Explanation: \"2/4\" is not a simplified fraction because it can be simplified to \"1/2\".   Constraints: 1 <= n <= 100",
        "1093": "Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X. Return the number of good nodes in the binary tree.   Example 1: Input: root = [3,1,4,3,null,1,5] Output: 4 Explanation: Nodes in blue are good. Root Node (3) is always a good node. Node 4 -> (3,4) is the maximum value in the path starting from the root. Node 5 -> (3,4,5) is the maximum value in the path Node 3 -> (3,1,3) is the maximum value in the path. Example 2: Input: root = [3,3,null,4,2] Output: 3 Explanation: Node 2 -> (3, 3, 2) is not good, because \"3\" is higher than it. Example 3: Input: root = [1] Output: 1 Explanation: Root is considered as good.   Constraints: The number of nodes in the binary tree is in the range [1, 10^5]. Each node's value is between [-10^4, 10^4].",
        "1094": "Given an array of integers cost and an integer target, return the maximum integer you can paint under the following rules: The cost of painting a digit (i + 1) is given by cost[i] (0-indexed). The total cost used must be equal to target. The integer does not have 0 digits. Since the answer may be very large, return it as a string. If there is no way to paint any integer given the condition, return \"0\".   Example 1: Input: cost = [4,3,2,5,6,7,2,5,5], target = 9 Output: \"7772\" Explanation: The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(\"7772\") = 2*3+ 3*1 = 9. You could also paint \"977\", but \"7772\" is the largest number. Digit    cost   1  ->   4   2  ->   3   3  ->   2   4  ->   5   5  ->   6   6  ->   7   7  ->   2   8  ->   5   9  ->   5 Example 2: Input: cost = [7,6,5,5,5,6,8,7,8], target = 12 Output: \"85\" Explanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(\"85\") = 7 + 5 = 12. Example 3: Input: cost = [2,4,6,2,4,6,4,4,4], target = 5 Output: \"0\" Explanation: It is impossible to paint any integer with total cost equal to target.   Constraints: cost.length == 9 1 <= cost[i], target <= 5000",
        "1095": "Given two integer arrays startTime and endTime and given an integer queryTime. The ith student started doing their homework at the time startTime[i] and finished it at time endTime[i]. Return the number of students doing their homework at time queryTime. More formally, return the number of students where queryTime lays in the interval [startTime[i], endTime[i]] inclusive.   Example 1: Input: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4 Output: 1 Explanation: We have 3 students where: The first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4. The second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4. The third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4. Example 2: Input: startTime = [4], endTime = [4], queryTime = 4 Output: 1 Explanation: The only student was doing their homework at the queryTime.   Constraints: startTime.length == endTime.length 1 <= startTime.length <= 100 1 <= startTime[i] <= endTime[i] <= 1000 1 <= queryTime <= 1000",
        "1096": "Alice is throwing n darts on a very large wall. You are given an array darts where darts[i] = [xi, yi] is the position of the ith dart that Alice threw on the wall. Bob knows the positions of the n darts on the wall. He wants to place a dartboard of radius r on the wall so that the maximum number of darts that Alice throws lie on the dartboard. Given the integer r, return the maximum number of darts that can lie on the dartboard.   Example 1: Input: darts = [[-2,0],[2,0],[0,2],[0,-2]], r = 2 Output: 4 Explanation: Circle dartboard with center in (0,0) and radius = 2 contain all points. Example 2: Input: darts = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5 Output: 5 Explanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).   Constraints: 1 <= darts.length <= 100 darts[i].length == 2 -104 <= xi, yi <= 104 All the darts are unique 1 <= r <= 5000",
        "1097": "Given a sentence that consists of some words separated by a single space, and a searchWord, check if searchWord is a prefix of any word in sentence. Return the index of the word in sentence (1-indexed) where searchWord is a prefix of this word. If searchWord is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1. A prefix of a string s is any leading contiguous substring of s.   Example 1: Input: sentence = \"i love eating burger\", searchWord = \"burg\" Output: 4 Explanation: \"burg\" is prefix of \"burger\" which is the 4th word in the sentence. Example 2: Input: sentence = \"this problem is an easy problem\", searchWord = \"pro\" Output: 2 Explanation: \"pro\" is prefix of \"problem\" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index. Example 3: Input: sentence = \"i am tired\", searchWord = \"you\" Output: -1 Explanation: \"you\" is not a prefix of any word in the sentence.   Constraints: 1 <= sentence.length <= 100 1 <= searchWord.length <= 10 sentence consists of lowercase English letters and spaces. searchWord consists of lowercase English letters.",
        "1098": "Given a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k. Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'.   Example 1: Input: s = \"abciiidef\", k = 3 Output: 3 Explanation: The substring \"iii\" contains 3 vowel letters. Example 2: Input: s = \"aeiou\", k = 2 Output: 2 Explanation: Any substring of length 2 contains 2 vowels. Example 3: Input: s = \"leetcode\", k = 3 Output: 2 Explanation: \"lee\", \"eet\" and \"ode\" contain 2 vowels.   Constraints: 1 <= s.length <= 105 s consists of lowercase English letters. 1 <= k <= s.length",
        "1099": "Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome. Return the number of pseudo-palindromic paths going from the root node to leaf nodes.   Example 1: Input: root = [2,3,1,3,1,null,1] Output: 2  Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome). Example 2: Input: root = [2,1,1,1,3,null,null,null,null,null,1] Output: 1  Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome). Example 3: Input: root = [9] Output: 1   Constraints: The number of nodes in the tree is in the range [1, 105]. 1 <= Node.val <= 9",
        "1100": "Given two arrays nums1 and nums2. Return the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length. A subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, [2,3,5] is a subsequence of [1,2,3,4,5] while [1,5,3] is not).   Example 1: Input: nums1 = [2,1,-2,5], nums2 = [3,0,-6] Output: 18 Explanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2. Their dot product is (2*3 + (-2)*(-6)) = 18. Example 2: Input: nums1 = [3,-2], nums2 = [2,-6,7] Output: 21 Explanation: Take subsequence [3] from nums1 and subsequence [7] from nums2. Their dot product is (3*7) = 21. Example 3: Input: nums1 = [-1,-1], nums2 = [1,1] Output: -1 Explanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2. Their dot product is -1.   Constraints: 1 <= nums1.length, nums2.length <= 500 -1000 <= nums1[i], nums2[i] <= 1000",
        "1101": "You are given two integer arrays of equal length target and arr. In one step, you can select any non-empty subarray of arr and reverse it. You are allowed to make any number of steps. Return true if you can make arr equal to target or false otherwise.   Example 1: Input: target = [1,2,3,4], arr = [2,4,1,3] Output: true Explanation: You can follow the next steps to convert arr to target: 1- Reverse subarray [2,4,1], arr becomes [1,4,2,3] 2- Reverse subarray [4,2], arr becomes [1,2,4,3] 3- Reverse subarray [4,3], arr becomes [1,2,3,4] There are multiple ways to convert arr to target, this is not the only way to do so. Example 2: Input: target = [7], arr = [7] Output: true Explanation: arr is equal to target without any reverses. Example 3: Input: target = [3,7,9], arr = [3,7,11] Output: false Explanation: arr does not have value 9 and it can never be converted to target.   Constraints: target.length == arr.length 1 <= target.length <= 1000 1 <= target[i] <= 1000 1 <= arr[i] <= 1000",
        "1102": "Given a binary string s and an integer k, return true if every binary code of length k is a substring of s. Otherwise, return false.   Example 1: Input: s = \"00110110\", k = 2 Output: true Explanation: The binary codes of length 2 are \"00\", \"01\", \"10\" and \"11\". They can be all found as substrings at indices 0, 1, 3 and 2 respectively. Example 2: Input: s = \"0110\", k = 1 Output: true Explanation: The binary codes of length 1 are \"0\" and \"1\", it is clear that both exist as a substring.  Example 3: Input: s = \"0110\", k = 2 Output: false Explanation: The binary code \"00\" is of length 2 and does not exist in the array.   Constraints: 1 <= s.length <= 5 * 105 s[i] is either '0' or '1'. 1 <= k <= 20",
        "1103": "Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).   Example 1: Input: nums = [3,4,5,2] Output: 12  Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12.  Example 2: Input: nums = [1,5,4,5] Output: 16 Explanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16. Example 3: Input: nums = [3,7] Output: 12   Constraints: 2 <= nums.length <= 500 1 <= nums[i] <= 10^3",
        "1104": "You are given a rectangular cake of size h x w and two arrays of integers horizontalCuts and verticalCuts where: horizontalCuts[i] is the distance from the top of the rectangular cake to the ith horizontal cut and similarly, and verticalCuts[j] is the distance from the left of the rectangular cake to the jth vertical cut. Return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalCuts and verticalCuts. Since the answer can be a large number, return this modulo 109 + 7.   Example 1: Input: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3] Output: 4  Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area. Example 2: Input: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1] Output: 6 Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area. Example 3: Input: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3] Output: 9   Constraints: 2 <= h, w <= 109 1 <= horizontalCuts.length <= min(h - 1, 105) 1 <= verticalCuts.length <= min(w - 1, 105) 1 <= horizontalCuts[i] < h 1 <= verticalCuts[i] < w All the elements in horizontalCuts are distinct. All the elements in verticalCuts are distinct.",
        "1105": "There are n cities numbered from 0 to n - 1 and n - 1 roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow. Roads are represented by connections where connections[i] = [ai, bi] represents a road from city ai to city bi. This year, there will be a big event in the capital (city 0), and many people want to travel to this city. Your task consists of reorienting some roads such that each city can visit the city 0. Return the minimum number of edges changed. It's guaranteed that each city can reach city 0 after reorder.   Example 1: Input: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]] Output: 3 Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital). Example 2: Input: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]] Output: 2 Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital). Example 3: Input: n = 3, connections = [[1,0],[2,0]] Output: 0   Constraints: 2 <= n <= 5 * 104 connections.length == n - 1 connections[i].length == 2 0 <= ai, bi <= n - 1 ai != bi",
        "1106": "",
        "1107": "Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn]. Return the array in the form [x1,y1,x2,y2,...,xn,yn].   Example 1: Input: nums = [2,5,1,3,4,7], n = 3 Output: [2,3,5,4,1,7]  Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7]. Example 2: Input: nums = [1,2,3,4,4,3,2,1], n = 4 Output: [1,4,2,3,3,2,4,1] Example 3: Input: nums = [1,1,2,2], n = 2 Output: [1,2,1,2]   Constraints: 1 <= n <= 500 nums.length == 2n 1 <= nums[i] <= 10^3",
        "1108": "Given an array of integers arr and an integer k. A value arr[i] is said to be stronger than a value arr[j] if |arr[i] - m| > |arr[j] - m| where m is the median of the array. If |arr[i] - m| == |arr[j] - m|, then arr[i] is said to be stronger than arr[j] if arr[i] > arr[j]. Return a list of the strongest k values in the array. return the answer in any arbitrary order. Median is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position ((n - 1) / 2) in the sorted list (0-indexed). For arr = [6, -3, 7, 2, 11], n = 5 and the median is obtained by sorting the array arr = [-3, 2, 6, 7, 11] and the median is arr[m] where m = ((5 - 1) / 2) = 2. The median is 6. For arr = [-7, 22, 17, 3], n = 4 and the median is obtained by sorting the array arr = [-7, 3, 17, 22] and the median is arr[m] where m = ((4 - 1) / 2) = 1. The median is 3.   Example 1: Input: arr = [1,2,3,4,5], k = 2 Output: [5,1] Explanation: Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also accepted answer. Please note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1. Example 2: Input: arr = [1,1,3,5,5], k = 2 Output: [5,5] Explanation: Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5]. Example 3: Input: arr = [6,7,11,7,6,8], k = 5 Output: [11,8,6,6,7] Explanation: Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7]. Any permutation of [11,8,6,6,7] is accepted.   Constraints: 1 <= arr.length <= 105 -105 <= arr[i] <= 105 1 <= k <= arr.length",
        "1109": "You have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps. Implement the BrowserHistory class: BrowserHistory(string homepage) Initializes the object with the homepage of the browser. void visit(string url) Visits url from the current page. It clears up all the forward history. string back(int steps) Move steps back in history. If you can only return x steps in the history and steps > x, you will return only x steps. Return the current url after moving back in history at most steps. string forward(int steps) Move steps forward in history. If you can only forward x steps in the history and steps > x, you will forward only x steps. Return the current url after forwarding in history at most steps.   Example: Input: [\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"] [[\"leetcode.com\"],[\"google.com\"],[\"facebook.com\"],[\"youtube.com\"],[1],[1],[1],[\"linkedin.com\"],[2],[2],[7]] Output: [null,null,null,null,\"facebook.com\",\"google.com\",\"facebook.com\",null,\"linkedin.com\",\"google.com\",\"leetcode.com\"]  Explanation: BrowserHistory browserHistory = new BrowserHistory(\"leetcode.com\"); browserHistory.visit(\"google.com\");       // You are in \"leetcode.com\". Visit \"google.com\" browserHistory.visit(\"facebook.com\");     // You are in \"google.com\". Visit \"facebook.com\" browserHistory.visit(\"youtube.com\");      // You are in \"facebook.com\". Visit \"youtube.com\" browserHistory.back(1);                   // You are in \"youtube.com\", move back to \"facebook.com\" return \"facebook.com\" browserHistory.back(1);                   // You are in \"facebook.com\", move back to \"google.com\" return \"google.com\" browserHistory.forward(1);                // You are in \"google.com\", move forward to \"facebook.com\" return \"facebook.com\" browserHistory.visit(\"linkedin.com\");     // You are in \"facebook.com\". Visit \"linkedin.com\" browserHistory.forward(2);                // You are in \"linkedin.com\", you cannot move forward any steps. browserHistory.back(2);                   // You are in \"linkedin.com\", move back two steps to \"facebook.com\" then to \"google.com\". return \"google.com\" browserHistory.back(7);                   // You are in \"google.com\", you can move back only one step to \"leetcode.com\". return \"leetcode.com\"   Constraints: 1 <= homepage.length <= 20 1 <= url.length <= 20 1 <= steps <= 100 homepage and url consist of  '.' or lower case English letters. At most 5000 calls will be made to visit, back, and forward.",
        "1110": "There is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), some houses that have been painted last summer should not be painted again. A neighborhood is a maximal group of continuous houses that are painted with the same color. For example: houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods [{1}, {2,2}, {3,3}, {2}, {1,1}]. Given an array houses, an m x n matrix cost and an integer target where: houses[i]: is the color of the house i, and 0 if the house is not painted yet. cost[i][j]: is the cost of paint the house i with the color j + 1. Return the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. If it is not possible, return -1.   Example 1: Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3 Output: 9 Explanation: Paint houses of this way [1,2,2,1,1] This array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}]. Cost of paint all houses (1 + 1 + 1 + 1 + 5) = 9. Example 2: Input: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3 Output: 11 Explanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2] This array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}].  Cost of paint the first and last house (10 + 1) = 11. Example 3: Input: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3 Output: -1 Explanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3.   Constraints: m == houses.length == cost.length n == cost[i].length 1 <= m <= 100 1 <= n <= 20 1 <= target <= m 0 <= houses[i] <= n 1 <= cost[i][j] <= 104",
        "1111": "You are given an integer array prices where prices[i] is the price of the ith item in a shop. There is a special discount for items in the shop. If you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j > i and prices[j] <= prices[i]. Otherwise, you will not receive any discount at all. Return an integer array answer where answer[i] is the final price you will pay for the ith item of the shop, considering the special discount.   Example 1: Input: prices = [8,4,6,2,3] Output: [4,2,4,2,3] Explanation:  For item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4. For item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2. For item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4. For items 3 and 4 you will not receive any discount at all. Example 2: Input: prices = [1,2,3,4,5] Output: [1,2,3,4,5] Explanation: In this case, for all items, you will not receive any discount at all. Example 3: Input: prices = [10,1,1,6] Output: [9,0,1,6]   Constraints: 1 <= prices.length <= 500 1 <= prices[i] <= 1000",
        "1112": "Implement the class SubrectangleQueries which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods: 1. updateSubrectangle(int row1, int col1, int row2, int col2, int newValue) Updates all values with newValue in the subrectangle whose upper left coordinate is (row1,col1) and bottom right coordinate is (row2,col2). 2. getValue(int row, int col) Returns the current value of the coordinate (row,col) from the rectangle.   Example 1: Input [\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"] [[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]] Output [null,1,null,5,5,null,10,5] Explanation SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);   // The initial rectangle (4x3) looks like: // 1 2 1 // 4 3 4 // 3 2 1 // 1 1 1 subrectangleQueries.getValue(0, 2); // return 1 subrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5); // After this update the rectangle looks like: // 5 5 5 // 5 5 5 // 5 5 5 // 5 5 5  subrectangleQueries.getValue(0, 2); // return 5 subrectangleQueries.getValue(3, 1); // return 5 subrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10); // After this update the rectangle looks like: // 5   5   5 // 5   5   5 // 5   5   5 // 10  10  10  subrectangleQueries.getValue(3, 1); // return 10 subrectangleQueries.getValue(0, 2); // return 5 Example 2: Input [\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"] [[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]] Output [null,1,null,100,100,null,20] Explanation SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]); subrectangleQueries.getValue(0, 0); // return 1 subrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100); subrectangleQueries.getValue(0, 0); // return 100 subrectangleQueries.getValue(2, 2); // return 100 subrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20); subrectangleQueries.getValue(2, 2); // return 20   Constraints: There will be at most 500 operations considering both methods: updateSubrectangle and getValue. 1 <= rows, cols <= 100 rows == rectangle.length cols == rectangle[i].length 0 <= row1 <= row2 < rows 0 <= col1 <= col2 < cols 1 <= newValue, rectangle[i][j] <= 10^9 0 <= row < rows 0 <= col < cols",
        "1113": "You are given an array of integers arr and an integer target. You have to find two non-overlapping sub-arrays of arr each with a sum equal target. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum. Return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.   Example 1: Input: arr = [3,2,2,4,3], target = 3 Output: 2 Explanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2. Example 2: Input: arr = [7,3,4,7], target = 7 Output: 2 Explanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2. Example 3: Input: arr = [4,3,2,6,2,3,4], target = 6 Output: -1 Explanation: We have only one sub-array of sum = 6.   Constraints: 1 <= arr.length <= 105 1 <= arr[i] <= 1000 1 <= target <= 108",
        "1114": "Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]). Return the running sum of nums.   Example 1: Input: nums = [1,2,3,4] Output: [1,3,6,10] Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4]. Example 2: Input: nums = [1,1,1,1,1] Output: [1,2,3,4,5] Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]. Example 3: Input: nums = [3,1,2,10,1] Output: [3,4,6,16,17]   Constraints: 1 <= nums.length <= 1000 -10^6 <= nums[i] <= 10^6",
        "1115": "Given an array of integers arr and an integer k. Find the least number of unique integers after removing exactly k elements.   Example 1: Input: arr = [5,5,4], k = 1 Output: 1 Explanation: Remove the single 4, only 5 is left. Example 2: Input: arr = [4,3,1,1,3,3,2], k = 3 Output: 2 Explanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.   Constraints: 1 <= arr.length <= 10^5 1 <= arr[i] <= 10^9 0 <= k <= arr.length",
        "1116": "You are given an integer array bloomDay, an integer m and an integer k. You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden. The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet. Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.   Example 1: Input: bloomDay = [1,10,3,10,2], m = 3, k = 1 Output: 3 Explanation: Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden. We need 3 bouquets each should contain 1 flower. After day 1: [x, _, _, _, _]   // we can only make one bouquet. After day 2: [x, _, _, _, x]   // we can only make two bouquets. After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3. Example 2: Input: bloomDay = [1,10,3,10,2], m = 3, k = 2 Output: -1 Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1. Example 3: Input: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3 Output: 12 Explanation: We need 2 bouquets each should have 3 flowers. Here is the garden after the 7 and 12 days: After day 7: [x, x, x, x, _, x, x] We can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent. After day 12: [x, x, x, x, x, x, x] It is obvious that we can make two bouquets in different ways.   Constraints: bloomDay.length == n 1 <= n <= 105 1 <= bloomDay[i] <= 109 1 <= m <= 106 1 <= k <= n",
        "1117": "You are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of ith node. The root of the tree is node 0. Find the kth ancestor of a given node. The kth ancestor of a tree node is the kth node in the path from that node to the root node. Implement the TreeAncestor class: TreeAncestor(int n, int[] parent) Initializes the object with the number of nodes in the tree and the parent array. int getKthAncestor(int node, int k) return the kth ancestor of the given node node. If there is no such ancestor, return -1.   Example 1: Input [\"TreeAncestor\", \"getKthAncestor\", \"getKthAncestor\", \"getKthAncestor\"] [[7, [-1, 0, 0, 1, 1, 2, 2]], [3, 1], [5, 2], [6, 3]] Output [null, 1, 0, -1]  Explanation TreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]); treeAncestor.getKthAncestor(3, 1); // returns 1 which is the parent of 3 treeAncestor.getKthAncestor(5, 2); // returns 0 which is the grandparent of 5 treeAncestor.getKthAncestor(6, 3); // returns -1 because there is no such ancestor   Constraints: 1 <= k <= n <= 5 * 104 parent.length == n parent[0] == -1 0 <= parent[i] < n for all 0 < i < n 0 <= node < n There will be at most 5 * 104 queries.",
        "1118": "SQL Schema Pandas Schema",
        "1119": "You are given an integer n and an integer start. Define an array nums where nums[i] = start + 2 * i (0-indexed) and n == nums.length. Return the bitwise XOR of all elements of nums.   Example 1: Input: n = 5, start = 0 Output: 8 Explanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8. Where \"^\" corresponds to bitwise XOR operator. Example 2: Input: n = 4, start = 3 Output: 8 Explanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.   Constraints: 1 <= n <= 1000 0 <= start <= 1000 n == nums.length",
        "1120": "Given an array of strings names of size n. You will create n folders in your file system such that, at the ith minute, you will create a folder with the name names[i]. Since two files cannot have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique. Return an array of strings of length n where ans[i] is the actual name the system will assign to the ith folder when you create it.   Example 1: Input: names = [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"] Output: [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"] Explanation: Let's see how the file system creates folder names: \"pes\" --> not assigned before, remains \"pes\" \"fifa\" --> not assigned before, remains \"fifa\" \"gta\" --> not assigned before, remains \"gta\" \"pes(2019)\" --> not assigned before, remains \"pes(2019)\" Example 2: Input: names = [\"gta\",\"gta(1)\",\"gta\",\"avalon\"] Output: [\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"] Explanation: Let's see how the file system creates folder names: \"gta\" --> not assigned before, remains \"gta\" \"gta(1)\" --> not assigned before, remains \"gta(1)\" \"gta\" --> the name is reserved, system adds (k), since \"gta(1)\" is also reserved, systems put k = 2. it becomes \"gta(2)\" \"avalon\" --> not assigned before, remains \"avalon\" Example 3: Input: names = [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"] Output: [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"] Explanation: When the last folder is created, the smallest positive valid k is 4, and it becomes \"onepiece(4)\".   Constraints: 1 <= names.length <= 5 * 104 1 <= names[i].length <= 20 names[i] consists of lowercase English letters, digits, and/or round brackets.",
        "1121": "Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. If it rains over a lake that is full of water, there will be a flood. Your goal is to avoid floods in any lake. Given an integer array rains where: rains[i] > 0 means there will be rains over the rains[i] lake. rains[i] == 0 means there are no rains this day and you can choose one lake this day and dry it. Return an array ans where: ans.length == rains.length ans[i] == -1 if rains[i] > 0. ans[i] is the lake you choose to dry in the ith day if rains[i] == 0. If there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array. Notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.   Example 1: Input: rains = [1,2,3,4] Output: [-1,-1,-1,-1] Explanation: After the first day full lakes are [1] After the second day full lakes are [1,2] After the third day full lakes are [1,2,3] After the fourth day full lakes are [1,2,3,4] There's no day to dry any lake and there is no flood in any lake. Example 2: Input: rains = [1,2,0,0,2,1] Output: [-1,-1,2,1,-1,-1] Explanation: After the first day full lakes are [1] After the second day full lakes are [1,2] After the third day, we dry lake 2. Full lakes are [1] After the fourth day, we dry lake 1. There is no full lakes. After the fifth day, full lakes are [2]. After the sixth day, full lakes are [1,2]. It is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario. Example 3: Input: rains = [1,2,0,1,2] Output: [] Explanation: After the second day, full lakes are  [1,2]. We have to dry one lake in the third day. After that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood.   Constraints: 1 <= rains.length <= 105 0 <= rains[i] <= 109",
        "1122": "Given a weighted undirected connected graph with n vertices numbered from 0 to n - 1, and an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional and weighted edge between nodes ai and bi. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight. Find all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST). An MST edge whose deletion from the graph would cause the MST weight to increase is called a critical edge. On the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all. Note that you can return the indices of the edges in any order.   Example 1: Input: n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]] Output: [[0,1],[2,3,4,5]] Explanation: The figure above describes the graph. The following figure shows all the possible MSTs: Notice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output. The edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output. Example 2: Input: n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]] Output: [[],[0,1,2,3]] Explanation: We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical.   Constraints: 2 <= n <= 100 1 <= edges.length <= min(200, n * (n - 1) / 2) edges[i].length == 3 0 <= ai < bi < n 1 <= weighti <= 1000 All pairs (ai, bi) are distinct.",
        "1123": "You are given an array of unique integers salary where salary[i] is the salary of the ith employee. Return the average salary of employees excluding the minimum and maximum salary. Answers within 10-5 of the actual answer will be accepted.   Example 1: Input: salary = [4000,3000,1000,2000] Output: 2500.00000 Explanation: Minimum salary and maximum salary are 1000 and 4000 respectively. Average salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500 Example 2: Input: salary = [1000,2000,3000] Output: 2000.00000 Explanation: Minimum salary and maximum salary are 1000 and 3000 respectively. Average salary excluding minimum and maximum salary is (2000) / 1 = 2000   Constraints: 3 <= salary.length <= 100 1000 <= salary[i] <= 106 All the integers of salary are unique.",
        "1124": "You are given two positive integers n and k. A factor of an integer n is defined as an integer i where n % i == 0. Consider a list of all factors of n sorted in ascending order, return the kth factor in this list or return -1 if n has less than k factors.   Example 1: Input: n = 12, k = 3 Output: 3 Explanation: Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3. Example 2: Input: n = 7, k = 2 Output: 7 Explanation: Factors list is [1, 7], the 2nd factor is 7. Example 3: Input: n = 4, k = 4 Output: -1 Explanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.   Constraints: 1 <= k <= n <= 1000   Follow up: Could you solve this problem in less than O(n) complexity?",
        "1125": "Given a binary array nums, you should delete one element from it. Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.   Example 1: Input: nums = [1,1,0,1] Output: 3 Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's. Example 2: Input: nums = [0,1,1,1,0,1,1,0,1] Output: 5 Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1]. Example 3: Input: nums = [1,1,1] Output: 2 Explanation: You must delete one element.   Constraints: 1 <= nums.length <= 105 nums[i] is either 0 or 1.",
        "1126": "You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given an array relations where relations[i] = [prevCoursei, nextCoursei], representing a prerequisite relationship between course prevCoursei and course nextCoursei: course prevCoursei has to be taken before course nextCoursei. Also, you are given the integer k. In one semester, you can take at most k courses as long as you have taken all the prerequisites in the previous semesters for the courses you are taking. Return the minimum number of semesters needed to take all courses. The testcases will be generated such that it is possible to take every course.   Example 1: Input: n = 4, relations = [[2,1],[3,1],[1,4]], k = 2 Output: 3 Explanation: The figure above represents the given graph. In the first semester, you can take courses 2 and 3. In the second semester, you can take course 1. In the third semester, you can take course 4. Example 2: Input: n = 5, relations = [[2,1],[3,1],[4,1],[1,5]], k = 2 Output: 4 Explanation: The figure above represents the given graph. In the first semester, you can only take courses 2 and 3 since you cannot take more than two per semester. In the second semester, you can take course 4. In the third semester, you can take course 1. In the fourth semester, you can take course 5.   Constraints: 1 <= n <= 15 1 <= k <= n 0 <= relations.length <= n * (n-1) / 2 relations[i].length == 2 1 <= prevCoursei, nextCoursei <= n prevCoursei != nextCoursei All the pairs [prevCoursei, nextCoursei] are unique. The given graph is a directed acyclic graph.",
        "1127": "Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path. Return true if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited. Return false otherwise.   Example 1: Input: path = \"NES\" Output: false  Explanation: Notice that the path doesn't cross any point more than once. Example 2: Input: path = \"NESWW\" Output: true Explanation: Notice that the path visits the origin twice.   Constraints: 1 <= path.length <= 104 path[i] is either 'N', 'S', 'E', or 'W'.",
        "1128": "Given an array of integers arr of even length n and an integer k. We want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k. Return true If you can find a way to do that or false otherwise.   Example 1: Input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5 Output: true Explanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10). Example 2: Input: arr = [1,2,3,4,5,6], k = 7 Output: true Explanation: Pairs are (1,6),(2,5) and(3,4). Example 3: Input: arr = [1,2,3,4,5,6], k = 10 Output: false Explanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.   Constraints: arr.length == n 1 <= n <= 105 n is even. -109 <= arr[i] <= 109 1 <= k <= 105",
        "1129": "You are given an array of integers nums and an integer target. Return the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. Since the answer may be too large, return it modulo 109 + 7.   Example 1: Input: nums = [3,5,6,7], target = 9 Output: 4 Explanation: There are 4 subsequences that satisfy the condition. [3] -> Min value + max value <= target (3 + 3 <= 9) [3,5] -> (3 + 5 <= 9) [3,5,6] -> (3 + 6 <= 9) [3,6] -> (3 + 6 <= 9) Example 2: Input: nums = [3,3,6,8], target = 10 Output: 6 Explanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers). [3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6] Example 3: Input: nums = [2,3,3,4,6,7], target = 12 Output: 61 Explanation: There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]). Number of valid subsequences (63 - 2 = 61).   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 106 1 <= target <= 106",
        "1130": "You are given an array points containing the coordinates of points on a 2D plane, sorted by the x-values, where points[i] = [xi, yi] such that xi < xj for all 1 <= i < j <= points.length. You are also given an integer k. Return the maximum value of the equation yi + yj + |xi - xj| where |xi - xj| <= k and 1 <= i < j <= points.length. It is guaranteed that there exists at least one pair of points that satisfy the constraint |xi - xj| <= k.   Example 1: Input: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1 Output: 4 Explanation: The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1. No other pairs satisfy the condition, so we return the max of 4 and 1. Example 2: Input: points = [[0,0],[3,0],[9,2]], k = 3 Output: 3 Explanation: Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.   Constraints: 2 <= points.length <= 105 points[i].length == 2 -108 <= xi, yi <= 108 0 <= k <= 2 * 108 xi < xj for all 1 <= i < j <= points.length xi form a strictly increasing sequence.",
        "1131": "We have a wooden plank of the length n units. Some ants are walking on the plank, each ant moves with a speed of 1 unit per second. Some of the ants move to the left, the other move to the right. When two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time. When an ant reaches one end of the plank at a time t, it falls out of the plank immediately. Given an integer n and two integer arrays left and right, the positions of the ants moving to the left and the right, return the moment when the last ant(s) fall out of the plank.   Example 1: Input: n = 4, left = [4,3], right = [0,1] Output: 4 Explanation: In the image above: -The ant at index 0 is named A and going to the right. -The ant at index 1 is named B and going to the right. -The ant at index 3 is named C and going to the left. -The ant at index 4 is named D and going to the left. The last moment when an ant was on the plank is t = 4 seconds. After that, it falls immediately out of the plank. (i.e., We can say that at t = 4.0000000001, there are no ants on the plank). Example 2: Input: n = 7, left = [], right = [0,1,2,3,4,5,6,7] Output: 7 Explanation: All ants are going to the right, the ant at index 0 needs 7 seconds to fall. Example 3: Input: n = 7, left = [0,1,2,3,4,5,6,7], right = [] Output: 7 Explanation: All ants are going to the left, the ant at index 7 needs 7 seconds to fall.   Constraints: 1 <= n <= 104 0 <= left.length <= n + 1 0 <= left[i] <= n 0 <= right.length <= n + 1 0 <= right[i] <= n 1 <= left.length + right.length <= n + 1 All values of left and right are unique, and each value can appear only in one of the two arrays.",
        "1132": "Given an m x n binary matrix mat, return the number of submatrices that have all ones.   Example 1: Input: mat = [[1,0,1],[1,1,0],[1,1,0]] Output: 13 Explanation:  There are 6 rectangles of side 1x1. There are 2 rectangles of side 1x2. There are 3 rectangles of side 2x1. There is 1 rectangle of side 2x2.  There is 1 rectangle of side 3x1. Total number of rectangles = 6 + 2 + 3 + 1 + 1 = 13. Example 2: Input: mat = [[0,1,1,0],[0,1,1,1],[1,1,1,0]] Output: 24 Explanation:  There are 8 rectangles of side 1x1. There are 5 rectangles of side 1x2. There are 2 rectangles of side 1x3.  There are 4 rectangles of side 2x1. There are 2 rectangles of side 2x2.  There are 2 rectangles of side 3x1.  There is 1 rectangle of side 3x2.  Total number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24.   Constraints: 1 <= m, n <= 150 mat[i][j] is either 0 or 1.",
        "1133": "You are given a string num representing the digits of a very large integer and an integer k. You are allowed to swap any two adjacent digits of the integer at most k times. Return the minimum integer you can obtain also as a string.   Example 1: Input: num = \"4321\", k = 4 Output: \"1342\" Explanation: The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown. Example 2: Input: num = \"100\", k = 1 Output: \"010\" Explanation: It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros. Example 3: Input: num = \"36789\", k = 1000 Output: \"36789\" Explanation: We can keep the number without any swaps.   Constraints: 1 <= num.length <= 3 * 104 num consists of only digits and does not contain leading zeros. 1 <= k <= 109",
        "1134": "Given a date string in the form Day Month Year, where: Day is in the set {\"1st\", \"2nd\", \"3rd\", \"4th\", ..., \"30th\", \"31st\"}. Month is in the set {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}. Year is in the range [1900, 2100]. Convert the date string to the format YYYY-MM-DD, where: YYYY denotes the 4 digit year. MM denotes the 2 digit month. DD denotes the 2 digit day.   Example 1: Input: date = \"20th Oct 2052\" Output: \"2052-10-20\" Example 2: Input: date = \"6th Jun 1933\" Output: \"1933-06-06\" Example 3: Input: date = \"26th May 1960\" Output: \"1960-05-26\"   Constraints: The given dates are guaranteed to be valid, so no error handling is necessary.",
        "1135": "You are given the array nums consisting of n positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers. Return the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 109 + 7.   Example 1: Input: nums = [1,2,3,4], n = 4, left = 1, right = 5 Output: 13  Explanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13.  Example 2: Input: nums = [1,2,3,4], n = 4, left = 3, right = 4 Output: 6 Explanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6. Example 3: Input: nums = [1,2,3,4], n = 4, left = 1, right = 10 Output: 50   Constraints: n == nums.length 1 <= nums.length <= 1000 1 <= nums[i] <= 100 1 <= left <= right <= n * (n + 1) / 2",
        "1136": "You are given an integer array nums. In one move, you can choose one element of nums and change it to any value. Return the minimum difference between the largest and smallest value of nums after performing at most three moves.   Example 1: Input: nums = [5,3,2,4] Output: 0 Explanation: We can make at most 3 moves. In the first move, change 2 to 3. nums becomes [5,3,3,4]. In the second move, change 4 to 3. nums becomes [5,3,3,3]. In the third move, change 5 to 3. nums becomes [3,3,3,3]. After performing 3 moves, the difference between the minimum and maximum is 3 - 3 = 0. Example 2: Input: nums = [1,5,0,10,14] Output: 1 Explanation: We can make at most 3 moves. In the first move, change 5 to 0. nums becomes [1,0,0,10,14]. In the second move, change 10 to 0. nums becomes [1,0,0,0,14]. In the third move, change 14 to 1. nums becomes [1,0,0,0,1]. After performing 3 moves, the difference between the minimum and maximum is 1 - 0 = 1. It can be shown that there is no way to make the difference 0 in 3 moves. Example 3: Input: nums = [3,100,20] Output: 0 Explanation: We can make at most 3 moves. In the first move, change 100 to 7. nums becomes [3,7,20]. In the second move, change 20 to 7. nums becomes [3,7,7]. In the third move, change 3 to 7. nums becomes [7,7,7]. After performing 3 moves, the difference between the minimum and maximum is 7 - 7 = 0.   Constraints: 1 <= nums.length <= 105 -109 <= nums[i] <= 109",
        "1137": "Alice and Bob take turns playing a game, with Alice starting first. Initially, there are n stones in a pile. On each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile. Also, if a player cannot make a move, he/she loses the game. Given a positive integer n, return true if and only if Alice wins the game otherwise return false, assuming both players play optimally.   Example 1: Input: n = 1 Output: true Explanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves. Example 2: Input: n = 2 Output: false Explanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0). Example 3: Input: n = 4 Output: true Explanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).   Constraints: 1 <= n <= 105",
        "1138": "Given an array of integers nums, return the number of good pairs. A pair (i, j) is called good if nums[i] == nums[j] and i < j.   Example 1: Input: nums = [1,2,3,1,1,3] Output: 4 Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed. Example 2: Input: nums = [1,1,1,1] Output: 6 Explanation: Each pair in the array are good. Example 3: Input: nums = [1,2,3] Output: 0   Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100",
        "1139": "Given a binary string s, return the number of substrings with all characters 1's. Since the answer may be too large, return it modulo 109 + 7.   Example 1: Input: s = \"0110111\" Output: 9 Explanation: There are 9 substring in total with only 1's characters. \"1\" -> 5 times. \"11\" -> 3 times. \"111\" -> 1 time. Example 2: Input: s = \"101\" Output: 2 Explanation: Substring \"1\" is shown 2 times in s. Example 3: Input: s = \"111111\" Output: 21 Explanation: Each substring contains only 1's characters.   Constraints: 1 <= s.length <= 105 s[i] is either '0' or '1'.",
        "1140": "You are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succProb[i]. Given two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability. If there is no path from start to end, return 0. Your answer will be accepted if it differs from the correct answer by at most 1e-5.   Example 1: Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2 Output: 0.25000 Explanation: There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25. Example 2: Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2 Output: 0.30000 Example 3: Input: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2 Output: 0.00000 Explanation: There is no path between 0 and 2.   Constraints: 2 <= n <= 10^4 0 <= start, end < n start != end 0 <= a, b < n a != b 0 <= succProb.length == edges.length <= 2*10^4 0 <= succProb[i] <= 1 There is at most one edge between every two nodes.",
        "1141": "A delivery company wants to build a new service center in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new center in a position such that the sum of the euclidean distances to all customers is minimum. Given an array positions where positions[i] = [xi, yi] is the position of the ith customer on the map, return the minimum sum of the euclidean distances to all customers. In other words, you need to choose the position of the service center [xcentre, ycentre] such that the following formula is minimized: Answers within 10-5 of the actual value will be accepted.   Example 1: Input: positions = [[0,1],[1,0],[1,2],[2,1]] Output: 4.00000 Explanation: As shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve. Example 2: Input: positions = [[1,1],[3,3]] Output: 2.82843 Explanation: The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843   Constraints: 1 <= positions.length <= 50 positions[i].length == 2 0 <= xi, yi <= 100",
        "1142": "SQL Schema Pandas Schema",
        "1143": "There are numBottles water bottles that are initially full of water. You can exchange numExchange empty water bottles from the market with one full water bottle. The operation of drinking a full water bottle turns it into an empty bottle. Given the two integers numBottles and numExchange, return the maximum number of water bottles you can drink.   Example 1: Input: numBottles = 9, numExchange = 3 Output: 13 Explanation: You can exchange 3 empty bottles to get 1 full water bottle. Number of water bottles you can drink: 9 + 3 + 1 = 13. Example 2: Input: numBottles = 15, numExchange = 4 Output: 19 Explanation: You can exchange 4 empty bottles to get 1 full water bottle.  Number of water bottles you can drink: 15 + 3 + 1 = 19.   Constraints: 1 <= numBottles <= 100 2 <= numExchange <= 100",
        "1144": "You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. The root of the tree is the node 0, and each node of the tree has a label which is a lower-case character given in the string labels (i.e. The node with the number i has the label labels[i]). The edges array is given on the form edges[i] = [ai, bi], which means there is an edge between nodes ai and bi in the tree. Return an array of size n where ans[i] is the number of nodes in the subtree of the ith node which have the same label as node i. A subtree of a tree T is the tree consisting of a node in T and all of its descendant nodes.   Example 1: Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \"abaedcd\" Output: [2,1,1,1,1,1,1] Explanation: Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree. Node 1 has a label 'b'. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself). Example 2: Input: n = 4, edges = [[0,1],[1,2],[0,3]], labels = \"bbbb\" Output: [4,2,1,1] Explanation: The sub-tree of node 2 contains only node 2, so the answer is 1. The sub-tree of node 3 contains only node 3, so the answer is 1. The sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2. The sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4. Example 3: Input: n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \"aabab\" Output: [3,2,1,1,1]   Constraints: 1 <= n <= 105 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n ai != bi labels.length == n labels is consisting of only of lowercase English letters.",
        "1145": "Given a string s of lowercase letters, you need to find the maximum number of non-empty substrings of s that meet the following conditions: The substrings do not overlap, that is for any two substrings s[i..j] and s[x..y], either j < x or i > y is true. A substring that contains a certain character c must also contain all occurrences of c. Find the maximum number of substrings that meet the above conditions. If there are multiple solutions with the same number of substrings, return the one with minimum total length. It can be shown that there exists a unique solution of minimum total length. Notice that you can return the substrings in any order.   Example 1: Input: s = \"adefaddaccc\" Output: [\"e\",\"f\",\"ccc\"] Explanation: The following are all the possible substrings that meet the conditions: [   \"adefaddaccc\"   \"adefadda\",   \"ef\",   \"e\",   \"f\",   \"ccc\", ] If we choose the first string, we cannot choose anything else and we'd get only 1. If we choose \"adefadda\", we are left with \"ccc\" which is the only one that doesn't overlap, thus obtaining 2 substrings. Notice also, that it's not optimal to choose \"ef\" since it can be split into two. Therefore, the optimal way is to choose [\"e\",\"f\",\"ccc\"] which gives us 3 substrings. No other solution of the same number of substrings exist. Example 2: Input: s = \"abbaccd\" Output: [\"d\",\"bb\",\"cc\"] Explanation: Notice that while the set of substrings [\"d\",\"abba\",\"cc\"] also has length 3, it's considered incorrect since it has larger total length.   Constraints: 1 <= s.length <= 105 s contains only lowercase English letters.",
        "1146": "Winston was given the above mysterious function func. He has an integer array arr and an integer target and he wants to find the values l and r that make the value |func(arr, l, r) - target| minimum possible. Return the minimum possible value of |func(arr, l, r) - target|. Notice that func should be called with the values l and r where 0 <= l, r < arr.length.   Example 1: Input: arr = [9,12,3,7,15], target = 5 Output: 2 Explanation: Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2. Example 2: Input: arr = [1000000,1000000,1000000], target = 1 Output: 999999 Explanation: Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999. Example 3: Input: arr = [1,2,4,8,16], target = 0 Output: 0   Constraints: 1 <= arr.length <= 105 1 <= arr[i] <= 106 0 <= target <= 107",
        "1147": "Given two non-negative integers low and high. Return the count of odd numbers between low and high (inclusive).   Example 1: Input: low = 3, high = 7 Output: 3 Explanation: The odd numbers between 3 and 7 are [3,5,7]. Example 2: Input: low = 8, high = 10 Output: 1 Explanation: The odd numbers between 8 and 10 are [9].   Constraints: 0 <= low <= high <= 10^9",
        "1148": "Given an array of integers arr, return the number of subarrays with an odd sum. Since the answer can be very large, return it modulo 109 + 7.   Example 1: Input: arr = [1,3,5] Output: 4 Explanation: All subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]] All sub-arrays sum are [1,4,9,3,8,5]. Odd sums are [1,9,3,5] so the answer is 4. Example 2: Input: arr = [2,4,6] Output: 0 Explanation: All subarrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]] All sub-arrays sum are [2,6,12,4,10,6]. All sub-arrays have even sum and the answer is 0. Example 3: Input: arr = [1,2,3,4,5,6,7] Output: 16   Constraints: 1 <= arr.length <= 105 1 <= arr[i] <= 100",
        "1149": "You are given a string s. A split is called good if you can split s into two non-empty strings sleft and sright where their concatenation is equal to s (i.e., sleft + sright = s) and the number of distinct letters in sleft and sright is the same. Return the number of good splits you can make in s.   Example 1: Input: s = \"aacaba\" Output: 2 Explanation: There are 5 ways to split \"aacaba\" and 2 of them are good.  (\"a\", \"acaba\") Left string and right string contains 1 and 3 different letters respectively. (\"aa\", \"caba\") Left string and right string contains 1 and 3 different letters respectively. (\"aac\", \"aba\") Left string and right string contains 2 and 2 different letters respectively (good split). (\"aaca\", \"ba\") Left string and right string contains 2 and 2 different letters respectively (good split). (\"aacab\", \"a\") Left string and right string contains 3 and 1 different letters respectively. Example 2: Input: s = \"abcd\" Output: 1 Explanation: Split the string as follows (\"ab\", \"cd\").   Constraints: 1 <= s.length <= 105 s consists of only lowercase English letters.",
        "1150": "You are given an integer array target. You have an integer array initial of the same size as target with all elements initially zeros. In one operation you can choose any subarray from initial and increment each value by one. Return the minimum number of operations to form a target array from initial. The test cases are generated so that the answer fits in a 32-bit integer.   Example 1: Input: target = [1,2,3,2,1] Output: 3 Explanation: We need at least 3 operations to form the target array from the initial array. [0,0,0,0,0] increment 1 from index 0 to 4 (inclusive). [1,1,1,1,1] increment 1 from index 1 to 3 (inclusive). [1,2,2,2,1] increment 1 at index 2. [1,2,3,2,1] target array is formed. Example 2: Input: target = [3,1,1,2] Output: 4 Explanation: [0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2] Example 3: Input: target = [3,1,5,4,2] Output: 7 Explanation: [0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2].   Constraints: 1 <= target.length <= 105 1 <= target[i] <= 105",
        "1151": "SQL Schema Pandas Schema",
        "1152": "You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string. Return the shuffled string.   Example 1: Input: s = \"codeleet\", indices = [4,5,6,7,0,2,1,3] Output: \"leetcode\" Explanation: As shown, \"codeleet\" becomes \"leetcode\" after shuffling. Example 2: Input: s = \"abc\", indices = [0,1,2] Output: \"abc\" Explanation: After shuffling, each character remains in its position.   Constraints: s.length == indices.length == n 1 <= n <= 100 s consists of only lowercase English letters. 0 <= indices[i] < n All values of indices are unique.",
        "1153": "You are given a 0-indexed binary string target of length n. You have another binary string s of length n that is initially set to all zeros. You want to make s equal to target. In one operation, you can pick an index i where 0 <= i < n and flip all bits in the inclusive range [i, n - 1]. Flip means changing '0' to '1' and '1' to '0'. Return the minimum number of operations needed to make s equal to target.   Example 1: Input: target = \"10111\" Output: 3 Explanation: Initially, s = \"00000\". Choose index i = 2: \"00000\" -> \"00111\" Choose index i = 0: \"00111\" -> \"11000\" Choose index i = 1: \"11000\" -> \"10111\" We need at least 3 flip operations to form target. Example 2: Input: target = \"101\" Output: 3 Explanation: Initially, s = \"000\". Choose index i = 0: \"000\" -> \"111\" Choose index i = 1: \"111\" -> \"100\" Choose index i = 2: \"100\" -> \"101\" We need at least 3 flip operations to form target. Example 3: Input: target = \"00000\" Output: 0 Explanation: We do not need any operations since the initial s already equals target.   Constraints: n == target.length 1 <= n <= 105 target[i] is either '0' or '1'.",
        "1154": "You are given the root of a binary tree and an integer distance. A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to distance. Return the number of good leaf node pairs in the tree.   Example 1: Input: root = [1,2,3,null,4], distance = 3 Output: 1 Explanation: The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair. Example 2: Input: root = [1,2,3,4,5,6,7], distance = 3 Output: 2 Explanation: The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4. Example 3: Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3 Output: 1 Explanation: The only good pair is [2,5].   Constraints: The number of nodes in the tree is in the range [1, 210]. 1 <= Node.val <= 100 1 <= distance <= 10",
        "1155": "Run-length encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string \"aabccc\" we replace \"aa\" by \"a2\" and replace \"ccc\" by \"c3\". Thus the compressed string becomes \"a2bc3\". Notice that in this problem, we are not adding '1' after single characters. Given a string s and an integer k. You need to delete at most k characters from s such that the run-length encoded version of s has minimum length. Find the minimum length of the run-length encoded version of s after deleting at most k characters.   Example 1: Input: s = \"aaabcccd\", k = 2 Output: 4 Explanation: Compressing s without deleting anything will give us \"a3bc3d\" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = \"abcccd\" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be \"a3c3\" of length 4. Example 2: Input: s = \"aabbaa\", k = 2 Output: 2 Explanation: If we delete both 'b' characters, the resulting compressed string would be \"a4\" of length 2. Example 3: Input: s = \"aaaaaaaaaaa\", k = 0 Output: 3 Explanation: Since k is zero, we cannot delete anything. The compressed string is \"a11\" of length 3.   Constraints: 1 <= s.length <= 100 0 <= k <= s.length s contains only lowercase English letters.",
        "1156": "Given an array of integers arr, and three integers a, b and c. You need to find the number of good triplets. A triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true: 0 <= i < j < k < arr.length |arr[i] - arr[j]| <= a |arr[j] - arr[k]| <= b |arr[i] - arr[k]| <= c Where |x| denotes the absolute value of x. Return the number of good triplets.   Example 1: Input: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3 Output: 4 Explanation: There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)]. Example 2: Input: arr = [1,1,2,2,3], a = 0, b = 0, c = 1 Output: 0 Explanation: No triplet satisfies all conditions.   Constraints: 3 <= arr.length <= 100 0 <= arr[i] <= 1000 0 <= a, b, c <= 1000",
        "1157": "Given an integer array arr of distinct integers and an integer k. A game will be played between the first two elements of the array (i.e. arr[0] and arr[1]). In each round of the game, we compare arr[0] with arr[1], the larger integer wins and remains at position 0, and the smaller integer moves to the end of the array. The game ends when an integer wins k consecutive rounds. Return the integer which will win the game. It is guaranteed that there will be a winner of the game.   Example 1: Input: arr = [2,1,3,5,4,6,7], k = 2 Output: 5 Explanation: Let's see the rounds of the game: Round |       arr       | winner | win_count   1   | [2,1,3,5,4,6,7] | 2      | 1   2   | [2,3,5,4,6,7,1] | 3      | 1   3   | [3,5,4,6,7,1,2] | 5      | 1   4   | [5,4,6,7,1,2,3] | 5      | 2 So we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games. Example 2: Input: arr = [3,2,1], k = 10 Output: 3 Explanation: 3 will win the first 10 rounds consecutively.   Constraints: 2 <= arr.length <= 105 1 <= arr[i] <= 106 arr contains distinct integers. 1 <= k <= 109",
        "1158": "Given an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them. A grid is said to be valid if all the cells above the main diagonal are zeros. Return the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid. The main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n).   Example 1: Input: grid = [[0,0,1],[1,1,0],[1,0,0]] Output: 3 Example 2: Input: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]] Output: -1 Explanation: All rows are similar, swaps have no effect on the grid. Example 3: Input: grid = [[1,0,0],[1,1,0],[1,1,1]] Output: 0   Constraints: n == grid.length == grid[i].length 1 <= n <= 200 grid[i][j] is either 0 or 1",
        "1159": "You are given two sorted arrays of distinct integers nums1 and nums2. A valid path is defined as follows: Choose array nums1 or nums2 to traverse (from index-0). Traverse the current array from left to right. If you are reading any value that is present in nums1 and nums2 you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path). The score is defined as the sum of unique values in a valid path. Return the maximum score you can obtain of all possible valid paths. Since the answer may be too large, return it modulo 109 + 7.   Example 1: Input: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9] Output: 30 Explanation: Valid paths: [2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1) [4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2) The maximum is obtained with the path in green [2,4,6,8,10]. Example 2: Input: nums1 = [1,3,5,7,9], nums2 = [3,5,100] Output: 109 Explanation: Maximum sum is obtained with the path [1,3,5,100]. Example 3: Input: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10] Output: 40 Explanation: There are no common elements between nums1 and nums2. Maximum sum is obtained with the path [6,7,8,9,10].   Constraints: 1 <= nums1.length, nums2.length <= 105 1 <= nums1[i], nums2[i] <= 107 nums1 and nums2 are strictly increasing.",
        "1160": "Given an array arr of positive integers sorted in a strictly increasing order, and an integer k. Return the kth positive integer that is missing from this array.   Example 1: Input: arr = [2,3,4,7,11], k = 5 Output: 9 Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9. Example 2: Input: arr = [1,2,3,4], k = 2 Output: 6 Explanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.   Constraints: 1 <= arr.length <= 1000 1 <= arr[i] <= 1000 1 <= k <= 1000 arr[i] < arr[j] for 1 <= i < j <= arr.length   Follow up: Could you solve this problem in less than O(n) complexity?",
        "1161": "Given two strings s and t, your goal is to convert s into t in k moves or less. During the ith (1 <= i <= k) move you can: Choose any index j (1-indexed) from s, such that 1 <= j <= s.length and j has not been chosen in any previous move, and shift the character at that index i times. Do nothing. Shifting a character means replacing it by the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Shifting a character by i means applying the shift operations i times. Remember that any index j can be picked at most once. Return true if it's possible to convert s into t in no more than k moves, otherwise return false.   Example 1: Input: s = \"input\", t = \"ouput\", k = 9 Output: true Explanation: In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'. Example 2: Input: s = \"abc\", t = \"bcd\", k = 10 Output: false Explanation: We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s. Example 3: Input: s = \"aab\", t = \"bbb\", k = 27 Output: true Explanation: In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'.   Constraints: 1 <= s.length, t.length <= 10^5 0 <= k <= 10^9 s, t contain only lowercase English letters.",
        "1162": "Given a parentheses string s containing only the characters '(' and ')'. A parentheses string is balanced if: Any left parenthesis '(' must have a corresponding two consecutive right parenthesis '))'. Left parenthesis '(' must go before the corresponding two consecutive right parenthesis '))'. In other words, we treat '(' as an opening parenthesis and '))' as a closing parenthesis. For example, \"())\", \"())(())))\" and \"(())())))\" are balanced, \")()\", \"()))\" and \"(()))\" are not balanced. You can insert the characters '(' and ')' at any position of the string to balance it if needed. Return the minimum number of insertions needed to make s balanced.   Example 1: Input: s = \"(()))\" Output: 1 Explanation: The second '(' has two matching '))', but the first '(' has only ')' matching. We need to add one more ')' at the end of the string to be \"(())))\" which is balanced. Example 2: Input: s = \"())\" Output: 0 Explanation: The string is already balanced. Example 3: Input: s = \"))())(\" Output: 3 Explanation: Add '(' to match the first '))', Add '))' to match the last '('.   Constraints: 1 <= s.length <= 105 s consists of '(' and ')' only.",
        "1163": "You are given a string s. An awesome substring is a non-empty substring of s such that we can make any number of swaps in order to make it a palindrome. Return the length of the maximum length awesome substring of s.   Example 1: Input: s = \"3242415\" Output: 5 Explanation: \"24241\" is the longest awesome substring, we can form the palindrome \"24142\" with some swaps. Example 2: Input: s = \"12345678\" Output: 1 Example 3: Input: s = \"213123\" Output: 6 Explanation: \"213123\" is the longest awesome substring, we can form the palindrome \"231132\" with some swaps.   Constraints: 1 <= s.length <= 105 s consists only of digits.",
        "1164": "Given a string s of lower and upper case English letters. A good string is a string which doesn't have two adjacent characters s[i] and s[i + 1] where: 0 <= i <= s.length - 2 s[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa. To make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good. Return the string after making it good. The answer is guaranteed to be unique under the given constraints. Notice that an empty string is also good.   Example 1: Input: s = \"leEeetcode\" Output: \"leetcode\" Explanation: In the first step, either you choose i = 1 or i = 2, both will result \"leEeetcode\" to be reduced to \"leetcode\". Example 2: Input: s = \"abBAcC\" Output: \"\" Explanation: We have many possible scenarios, and all lead to the same answer. For example: \"abBAcC\" --> \"aAcC\" --> \"cC\" --> \"\" \"abBAcC\" --> \"abBA\" --> \"aA\" --> \"\" Example 3: Input: s = \"s\" Output: \"s\"   Constraints: 1 <= s.length <= 100 s contains only lower and upper case English letters.",
        "1165": "Given two positive integers n and k, the binary string Sn is formed as follows: S1 = \"0\" Si = Si - 1 + \"1\" + reverse(invert(Si - 1)) for i > 1 Where + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0). For example, the first four strings in the above sequence are: S1 = \"0\" S2 = \"011\" S3 = \"0111001\" S4 = \"011100110110001\" Return the kth bit in Sn. It is guaranteed that k is valid for the given n.   Example 1: Input: n = 3, k = 1 Output: \"0\" Explanation: S3 is \"0111001\". The 1st bit is \"0\". Example 2: Input: n = 4, k = 11 Output: \"1\" Explanation: S4 is \"011100110110001\". The 11th bit is \"1\".   Constraints: 1 <= n <= 20 1 <= k <= 2n - 1",
        "1166": "Given an array nums and an integer target, return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.   Example 1: Input: nums = [1,1,1,1,1], target = 2 Output: 2 Explanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2). Example 2: Input: nums = [-1,3,5,1,4,2,-9], target = 6 Output: 2 Explanation: There are 3 subarrays with sum equal to 6. ([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.   Constraints: 1 <= nums.length <= 105 -104 <= nums[i] <= 104 0 <= target <= 106",
        "1167": "Given a wooden stick of length n units. The stick is labelled from 0 to n. For example, a stick of length 6 is labelled as follows: Given an integer array cuts where cuts[i] denotes a position you should perform a cut at. You should perform the cuts in order, you can change the order of the cuts as you wish. The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation. Return the minimum total cost of the cuts.   Example 1: Input: n = 7, cuts = [1,3,4,5] Output: 16 Explanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario: The first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20. Rearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16). Example 2: Input: n = 9, cuts = [5,6,1,4,2] Output: 22 Explanation: If you try the given cuts ordering the cost will be 25. There are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible.   Constraints: 2 <= n <= 106 1 <= cuts.length <= min(n - 1, 100) 1 <= cuts[i] <= n - 1 All the integers in cuts array are distinct.",
        "1168": "Given an integer array arr, return true if there are three consecutive odd numbers in the array. Otherwise, return false.   Example 1: Input: arr = [2,6,4,1] Output: false Explanation: There are no three consecutive odds. Example 2: Input: arr = [1,2,34,3,4,5,7,23,12] Output: true Explanation: [5,7,23] are three consecutive odds.   Constraints: 1 <= arr.length <= 1000 1 <= arr[i] <= 1000",
        "1169": "In the universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has n empty baskets, the ith basket is at position[i], Morty has m balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum. Rick stated that magnetic force between two different balls at positions x and y is |x - y|. Given the integer array position and the integer m. Return the required force.   Example 1: Input: position = [1,2,3,4,7], m = 3 Output: 3 Explanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3. Example 2: Input: position = [5,4,3,2,1,1000000000], m = 2 Output: 999999999 Explanation: We can use baskets 1 and 1000000000.   Constraints: n == position.length 2 <= n <= 105 1 <= position[i] <= 109 All integers in position are distinct. 2 <= m <= position.length",
        "1170": "There are n oranges in the kitchen and you decided to eat some of these oranges every day as follows: Eat one orange. If the number of remaining oranges n is divisible by 2 then you can eat n / 2 oranges. If the number of remaining oranges n is divisible by 3 then you can eat 2 * (n / 3) oranges. You can only choose one of the actions per day. Given the integer n, return the minimum number of days to eat n oranges.   Example 1: Input: n = 10 Output: 4 Explanation: You have 10 oranges. Day 1: Eat 1 orange,  10 - 1 = 9.   Day 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3) Day 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1.  Day 4: Eat the last orange  1 - 1  = 0. You need at least 4 days to eat the 10 oranges. Example 2: Input: n = 6 Output: 3 Explanation: You have 6 oranges. Day 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2). Day 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3) Day 3: Eat the last orange  1 - 1  = 0. You need at least 3 days to eat the 6 oranges.   Constraints: 1 <= n <= 2 * 109",
        "1171": "Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi. Find the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists. Notice that you can return the vertices in any order.   Example 1: Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]] Output: [0,3] Explanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3]. Example 2: Input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]] Output: [0,2,3] Explanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.   Constraints: 2 <= n <= 10^5 1 <= edges.length <= min(10^5, n * (n - 1) / 2) edges[i].length == 2 0 <= fromi, toi < n All pairs (fromi, toi) are distinct.",
        "1172": "Given a 2D array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid. A cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell. Also, you cannot move to the cell that you visited in your last move. For example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell. Return true if any cycle of the same value exists in grid, otherwise, return false.   Example 1: Input: grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]] Output: true Explanation: There are two valid cycles shown in different colors in the image below: Example 2: Input: grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]] Output: true Explanation: There is only one valid cycle highlighted in the image below: Example 3: Input: grid = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]] Output: false   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 500 grid consists only of lowercase English letters.",
        "1173": "Given an integer n and an integer array rounds. We have a circular track which consists of n sectors labeled from 1 to n. A marathon will be held on this track, the marathon consists of m rounds. The ith round starts at sector rounds[i - 1] and ends at sector rounds[i]. For example, round 1 starts at sector rounds[0] and ends at sector rounds[1] Return an array of the most visited sectors sorted in ascending order. Notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).   Example 1: Input: n = 4, rounds = [1,3,1,2] Output: [1,2] Explanation: The marathon starts at sector 1. The order of the visited sectors is as follows: 1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon) We can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once. Example 2: Input: n = 2, rounds = [2,1,2,1,2,1,2,1,2] Output: [2] Example 3: Input: n = 7, rounds = [1,3,5,7] Output: [1,2,3,4,5,6,7]   Constraints: 2 <= n <= 100 1 <= m <= 100 rounds.length == m + 1 1 <= rounds[i] <= n rounds[i] != rounds[i + 1] for 0 <= i < m",
        "1174": "There are 3n piles of coins of varying size, you and your friends will take piles of coins as follows: In each step, you will choose any 3 piles of coins (not necessarily consecutive). Of your choice, Alice will pick the pile with the maximum number of coins. You will pick the next pile with the maximum number of coins. Your friend Bob will pick the last pile. Repeat until there are no more piles of coins. Given an array of integers piles where piles[i] is the number of coins in the ith pile. Return the maximum number of coins that you can have.   Example 1: Input: piles = [2,4,1,2,7,8] Output: 9 Explanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one. Choose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one. The maximum number of coins which you can have are: 7 + 2 = 9. On the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal. Example 2: Input: piles = [2,4,5] Output: 4 Example 3: Input: piles = [9,8,7,6,5,1,2,3,4] Output: 18   Constraints: 3 <= piles.length <= 105 piles.length % 3 == 0 1 <= piles[i] <= 104",
        "1175": "Given an array arr that represents a permutation of numbers from 1 to n. You have a binary string of size n that initially has all its bits set to zero. At each step i (assuming both the binary string and arr are 1-indexed) from 1 to n, the bit at position arr[i] is set to 1. You are also given an integer m. Find the latest step at which there exists a group of ones of length m. A group of ones is a contiguous substring of 1's such that it cannot be extended in either direction. Return the latest step at which there exists a group of ones of length exactly m. If no such group exists, return -1.   Example 1: Input: arr = [3,5,1,2,4], m = 1 Output: 4 Explanation:  Step 1: \"00100\", groups: [\"1\"] Step 2: \"00101\", groups: [\"1\", \"1\"] Step 3: \"10101\", groups: [\"1\", \"1\", \"1\"] Step 4: \"11101\", groups: [\"111\", \"1\"] Step 5: \"11111\", groups: [\"11111\"] The latest step at which there exists a group of size 1 is step 4. Example 2: Input: arr = [3,1,5,4,2], m = 2 Output: -1 Explanation:  Step 1: \"00100\", groups: [\"1\"] Step 2: \"10100\", groups: [\"1\", \"1\"] Step 3: \"10101\", groups: [\"1\", \"1\", \"1\"] Step 4: \"10111\", groups: [\"1\", \"111\"] Step 5: \"11111\", groups: [\"11111\"] No group of size 2 exists during any step.   Constraints: n == arr.length 1 <= m <= n <= 105 1 <= arr[i] <= n All integers in arr are distinct.",
        "1176": "There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue. In each round of the game, Alice divides the row into two non-empty rows (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row. The game ends when there is only one stone remaining. Alice's is initially zero. Return the maximum score that Alice can obtain.   Example 1: Input: stoneValue = [6,2,3,4,5,5] Output: 18 Explanation: In the first round, Alice divides the row to [6,2,3], [4,5,5]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11. In the second round Alice divides the row to [6], [2,3]. This time Bob throws away the left row and Alice's score becomes 16 (11 + 5). The last round Alice has only one choice to divide the row which is [2], [3]. Bob throws away the right row and Alice's score is now 18 (16 + 2). The game ends because only one stone is remaining in the row. Example 2: Input: stoneValue = [7,7,7,7,7,7,7] Output: 28 Example 3: Input: stoneValue = [4] Output: 0   Constraints: 1 <= stoneValue.length <= 500 1 <= stoneValue[i] <= 106",
        "1177": "Given an array of positive integers arr, find a pattern of length m that is repeated k or more times. A pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions. Return true if there exists a pattern of length m that is repeated k or more times, otherwise return false.   Example 1: Input: arr = [1,2,4,4,4,4], m = 1, k = 3 Output: true Explanation: The pattern (4) of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less. Example 2: Input: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2 Output: true Explanation: The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times. Example 3: Input: arr = [1,2,1,2,1,3], m = 2, k = 3 Output: false Explanation: The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.   Constraints: 2 <= arr.length <= 100 1 <= arr[i] <= 100 1 <= m <= 100 2 <= k <= 100",
        "1178": "Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive. A subarray of an array is a consecutive sequence of zero or more values taken out of that array. Return the maximum length of a subarray with positive product.   Example 1: Input: nums = [1,-2,-3,4] Output: 4 Explanation: The array nums already has a positive product of 24. Example 2: Input: nums = [0,1,-2,-3,-4] Output: 3 Explanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6. Notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive. Example 3: Input: nums = [-1,-2,-3,0,1] Output: 2 Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3].   Constraints: 1 <= nums.length <= 105 -109 <= nums[i] <= 109",
        "1179": "You are given an m x n binary grid grid where 1 represents land and 0 represents water. An island is a maximal 4-directionally (horizontal or vertical) connected group of 1's. The grid is said to be connected if we have exactly one island, otherwise is said disconnected. In one day, we are allowed to change any single land cell (1) into a water cell (0). Return the minimum number of days to disconnect the grid.   Example 1: Input: grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]  Output: 2 Explanation: We need at least 2 days to get a disconnected grid. Change land grid[1][1] and grid[0][2] to water and get 2 disconnected island. Example 2: Input: grid = [[1,1]] Output: 2 Explanation: Grid of full water is also disconnected ([[1,1]] -> [[0,0]]), 0 islands.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 30 grid[i][j] is either 0 or 1.",
        "1180": "Given an array nums that represents a permutation of integers from 1 to n. We are going to construct a binary search tree (BST) by inserting the elements of nums in order into an initially empty BST. Find the number of different ways to reorder nums so that the constructed BST is identical to that formed from the original array nums. For example, given nums = [2,1,3], we will have 2 as the root, 1 as a left child, and 3 as a right child. The array [2,3,1] also yields the same BST but [3,2,1] yields a different BST. Return the number of ways to reorder nums such that the BST formed is identical to the original BST formed from nums. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: nums = [2,1,3] Output: 1 Explanation: We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST. Example 2: Input: nums = [3,4,5,1,2] Output: 5 Explanation: The following 5 arrays will yield the same BST:  [3,1,2,4,5] [3,1,4,2,5] [3,1,4,5,2] [3,4,1,2,5] [3,4,1,5,2] Example 3: Input: nums = [1,2,3] Output: 0 Explanation: There are no other orderings of nums that will yield the same BST.   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= nums.length All integers in nums are distinct.",
        "1181": "Given a square matrix mat, return the sum of the matrix diagonals. Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.   Example 1: Input: mat = [[1,2,3],               [4,5,6],               [7,8,9]] Output: 25 Explanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25 Notice that element mat[1][1] = 5 is counted only once. Example 2: Input: mat = [[1,1,1,1],               [1,1,1,1],               [1,1,1,1],               [1,1,1,1]] Output: 8 Example 3: Input: mat = [[5]] Output: 5   Constraints: n == mat.length == mat[i].length 1 <= n <= 100 1 <= mat[i][j] <= 100",
        "1182": "Given a binary string s, you can split s into 3 non-empty strings s1, s2, and s3 where s1 + s2 + s3 = s. Return the number of ways s can be split such that the number of ones is the same in s1, s2, and s3. Since the answer may be too large, return it modulo 109 + 7.   Example 1: Input: s = \"10101\" Output: 4 Explanation: There are four ways to split s in 3 parts where each part contain the same number of letters '1'. \"1|010|1\" \"1|01|01\" \"10|10|1\" \"10|1|01\" Example 2: Input: s = \"1001\" Output: 0 Example 3: Input: s = \"0000\" Output: 3 Explanation: There are three ways to split s in 3 parts. \"0|0|00\" \"0|00|0\" \"00|0|0\"   Constraints: 3 <= s.length <= 105 s[i] is either '0' or '1'.",
        "1183": "",
        "1184": "You are given an array of distinct positive integers locations where locations[i] represents the position of city i. You are also given integers start, finish and fuel representing the starting city, ending city, and the initial amount of fuel you have, respectively. At each step, if you are at city i, you can pick any city j such that j != i and 0 <= j < locations.length and move to city j. Moving from city i to city j reduces the amount of fuel you have by |locations[i] - locations[j]|. Please notice that |x| denotes the absolute value of x. Notice that fuel cannot become negative at any point in time, and that you are allowed to visit any city more than once (including start and finish). Return the count of all possible routes from start to finish. Since the answer may be too large, return it modulo 109 + 7.   Example 1: Input: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5 Output: 4 Explanation: The following are all possible routes, each uses 5 units of fuel: 1 -> 3 1 -> 2 -> 3 1 -> 4 -> 3 1 -> 4 -> 2 -> 3 Example 2: Input: locations = [4,3,1], start = 1, finish = 0, fuel = 6 Output: 5 Explanation: The following are all possible routes: 1 -> 0, used fuel = 1 1 -> 2 -> 0, used fuel = 5 1 -> 2 -> 1 -> 0, used fuel = 5 1 -> 0 -> 1 -> 0, used fuel = 3 1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5 Example 3: Input: locations = [5,2,1], start = 0, finish = 2, fuel = 3 Output: 0 Explanation: It is impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel.   Constraints: 2 <= locations.length <= 100 1 <= locations[i] <= 109 All integers in locations are distinct. 0 <= start, finish < locations.length 1 <= fuel <= 200",
        "1185": "Given a string s containing only lowercase English letters and the '?' character, convert all the '?' characters into lowercase letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters. It is guaranteed that there are no consecutive repeating characters in the given string except for '?'. Return the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. It can be shown that an answer is always possible with the given constraints.   Example 1: Input: s = \"?zs\" Output: \"azs\" Explanation: There are 25 solutions for this problem. From \"azs\" to \"yzs\", all are valid. Only \"z\" is an invalid modification as the string will consist of consecutive repeating characters in \"zzs\". Example 2: Input: s = \"ubv?w\" Output: \"ubvaw\" Explanation: There are 24 solutions for this problem. Only \"v\" and \"w\" are invalid modifications as the strings will consist of consecutive repeating characters in \"ubvvw\" and \"ubvww\".   Constraints: 1 <= s.length <= 100 s consist of lowercase English letters and '?'.",
        "1186": "Given two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules: Type 1: Triplet (i, j, k) if nums1[i]2 == nums2[j] * nums2[k] where 0 <= i < nums1.length and 0 <= j < k < nums2.length. Type 2: Triplet (i, j, k) if nums2[i]2 == nums1[j] * nums1[k] where 0 <= i < nums2.length and 0 <= j < k < nums1.length.   Example 1: Input: nums1 = [7,4], nums2 = [5,2,8,9] Output: 1 Explanation: Type 1: (1, 1, 2), nums1[1]2 = nums2[1] * nums2[2]. (42 = 2 * 8).  Example 2: Input: nums1 = [1,1], nums2 = [1,1,1] Output: 9 Explanation: All Triplets are valid, because 12 = 1 * 1. Type 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]2 = nums2[j] * nums2[k]. Type 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]2 = nums1[j] * nums1[k]. Example 3: Input: nums1 = [7,7,8,3], nums2 = [1,2,9,7] Output: 2 Explanation: There are 2 valid triplets. Type 1: (3,0,2).  nums1[3]2 = nums2[0] * nums2[2]. Type 2: (3,0,1).  nums2[3]2 = nums1[0] * nums1[1].   Constraints: 1 <= nums1.length, nums2.length <= 1000 1 <= nums1[i], nums2[i] <= 105",
        "1187": "Alice has n balloons arranged on a rope. You are given a 0-indexed string colors where colors[i] is the color of the ith balloon. Alice wants the rope to be colorful. She does not want two consecutive balloons to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it colorful. You are given a 0-indexed integer array neededTime where neededTime[i] is the time (in seconds) that Bob needs to remove the ith balloon from the rope. Return the minimum time Bob needs to make the rope colorful.   Example 1: Input: colors = \"abaac\", neededTime = [1,2,3,4,5] Output: 3 Explanation: In the above image, 'a' is blue, 'b' is red, and 'c' is green. Bob can remove the blue balloon at index 2. This takes 3 seconds. There are no longer two consecutive balloons of the same color. Total time = 3. Example 2: Input: colors = \"abc\", neededTime = [1,2,3] Output: 0 Explanation: The rope is already colorful. Bob does not need to remove any balloons from the rope. Example 3: Input: colors = \"aabaa\", neededTime = [1,2,3,4,1] Output: 2 Explanation: Bob will remove the balloons at indices 0 and 4. Each balloons takes 1 second to remove. There are no longer two consecutive balloons of the same color. Total time = 1 + 1 = 2.   Constraints: n == colors.length == neededTime.length 1 <= n <= 105 1 <= neededTime[i] <= 104 colors contains only lowercase English letters.",
        "1188": "Alice and Bob have an undirected graph of n nodes and three types of edges: Type 1: Can be traversed by Alice only. Type 2: Can be traversed by Bob only. Type 3: Can be traversed by both Alice and Bob. Given an array edges where edges[i] = [typei, ui, vi] represents a bidirectional edge of type typei between nodes ui and vi, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes. Return the maximum number of edges you can remove, or return -1 if Alice and Bob cannot fully traverse the graph.   Example 1: Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]] Output: 2 Explanation: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2. Example 2: Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]] Output: 0 Explanation: Notice that removing any edge will not make the graph fully traversable by Alice and Bob. Example 3: Input: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]] Output: -1 Explanation: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable.     Constraints: 1 <= n <= 105 1 <= edges.length <= min(105, 3 * n * (n - 1) / 2) edges[i].length == 3 1 <= typei <= 3 1 <= ui < vi <= n All tuples (typei, ui, vi) are distinct.",
        "1189": "SQL Schema Pandas Schema",
        "1190": "Given an m x n binary matrix mat, return the number of special positions in mat. A position (i, j) is called special if mat[i][j] == 1 and all other elements in row i and column j are 0 (rows and columns are 0-indexed).   Example 1: Input: mat = [[1,0,0],[0,0,1],[1,0,0]] Output: 1 Explanation: (1, 2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0. Example 2: Input: mat = [[1,0,0],[0,1,0],[0,0,1]] Output: 3 Explanation: (0, 0), (1, 1) and (2, 2) are special positions.   Constraints: m == mat.length n == mat[i].length 1 <= m, n <= 100 mat[i][j] is either 0 or 1.",
        "1191": "You are given a list of preferences for n friends, where n is always even. For each person i, preferences[i] contains a list of friends sorted in the order of preference. In other words, a friend earlier in the list is more preferred than a friend later in the list. Friends in each list are denoted by integers from 0 to n-1. All the friends are divided into pairs. The pairings are given in a list pairs, where pairs[i] = [xi, yi] denotes xi is paired with yi and yi is paired with xi. However, this pairing may cause some of the friends to be unhappy. A friend x is unhappy if x is paired with y and there exists a friend u who is paired with v but: x prefers u over y, and u prefers x over v. Return the number of unhappy friends.   Example 1: Input: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]] Output: 2 Explanation: Friend 1 is unhappy because: - 1 is paired with 0 but prefers 3 over 0, and - 3 prefers 1 over 2. Friend 3 is unhappy because: - 3 is paired with 2 but prefers 1 over 2, and - 1 prefers 3 over 0. Friends 0 and 2 are happy. Example 2: Input: n = 2, preferences = [[1], [0]], pairs = [[1, 0]] Output: 0 Explanation: Both friends 0 and 1 are happy. Example 3: Input: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]] Output: 4   Constraints: 2 <= n <= 500 n is even. preferences.length == n preferences[i].length == n - 1 0 <= preferences[i][j] <= n - 1 preferences[i] does not contain i. All values in preferences[i] are unique. pairs.length == n/2 pairs[i].length == 2 xi != yi 0 <= xi, yi <= n - 1 Each person is contained in exactly one pair.",
        "1192": "You are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi]. The cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val. Return the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.   Example 1: Input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]] Output: 20 Explanation:  We can connect the points as shown above to get the minimum cost of 20. Notice that there is a unique path between every pair of points. Example 2: Input: points = [[3,12],[-2,5],[-4,1]] Output: 18   Constraints: 1 <= points.length <= 1000 -106 <= xi, yi <= 106 All pairs (xi, yi) are distinct.",
        "1193": "SQL Schema Pandas Schema",
        "1194": "Given an array of positive integers arr, return the sum of all possible odd-length subarrays of arr. A subarray is a contiguous subsequence of the array.   Example 1: Input: arr = [1,4,2,5,3] Output: 58 Explanation: The odd-length subarrays of arr and their sums are: [1] = 1 [4] = 4 [2] = 2 [5] = 5 [3] = 3 [1,4,2] = 7 [4,2,5] = 11 [2,5,3] = 10 [1,4,2,5,3] = 15 If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58 Example 2: Input: arr = [1,2] Output: 3 Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3. Example 3: Input: arr = [10,11,12] Output: 66   Constraints: 1 <= arr.length <= 100 1 <= arr[i] <= 1000   Follow up: Could you solve this problem in O(n) time complexity?",
        "1195": "We have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. The ith request asks for the sum of nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. Both starti and endi are 0-indexed. Return the maximum total sum of all requests among all permutations of nums. Since the answer may be too large, return it modulo 109 + 7.   Example 1: Input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]] Output: 19 Explanation: One permutation of nums is [2,1,3,4,5] with the following result:  requests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8 requests[1] -> nums[0] + nums[1] = 2 + 1 = 3 Total sum: 8 + 3 = 11. A permutation with a higher total sum is [3,5,4,2,1] with the following result: requests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11 requests[1] -> nums[0] + nums[1] = 3 + 5  = 8 Total sum: 11 + 8 = 19, which is the best that you can do. Example 2: Input: nums = [1,2,3,4,5,6], requests = [[0,1]] Output: 11 Explanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11]. Example 3: Input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]] Output: 47 Explanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].   Constraints: n == nums.length 1 <= n <= 105 0 <= nums[i] <= 105 1 <= requests.length <= 105 requests[i].length == 2 0 <= starti <= endi < n",
        "1196": "Given an array of positive integers nums, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by p. It is not allowed to remove the whole array. Return the length of the smallest subarray that you need to remove, or -1 if it's impossible. A subarray is defined as a contiguous block of elements in the array.   Example 1: Input: nums = [3,1,4,2], p = 6 Output: 1 Explanation: The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6. Example 2: Input: nums = [6,3,5,2], p = 9 Output: 2 Explanation: We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9. Example 3: Input: nums = [1,2,3], p = 3 Output: 0 Explanation: Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 1 <= p <= 109",
        "1197": "There is a strange printer with the following two special requirements: On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle. Once the printer has used a color for the above operation, the same color cannot be used again. You are given a m x n matrix targetGrid, where targetGrid[row][col] is the color in the position (row, col) of the grid. Return true if it is possible to print the matrix targetGrid, otherwise, return false.   Example 1: Input: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]] Output: true Example 2: Input: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]] Output: true Example 3: Input: targetGrid = [[1,2,1],[2,1,2],[1,2,1]] Output: false Explanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns.   Constraints: m == targetGrid.length n == targetGrid[i].length 1 <= m, n <= 60 1 <= targetGrid[row][col] <= 60",
        "1198": "You are given a string text of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that text contains at least one word. Rearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. If you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as text. Return the string after rearranging the spaces.   Example 1: Input: text = \"  this   is  a sentence \" Output: \"this   is   a   sentence\" Explanation: There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces. Example 2: Input: text = \" practice   makes   perfect\" Output: \"practice   makes   perfect \" Explanation: There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.   Constraints: 1 <= text.length <= 100 text consists of lowercase English letters and ' '. text contains at least one word.",
        "1199": "Given a string s, return the maximum number of unique substrings that the given string can be split into. You can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are unique. A substring is a contiguous sequence of characters within a string.   Example 1: Input: s = \"ababccc\" Output: 5 Explanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times. Example 2: Input: s = \"aba\" Output: 2 Explanation: One way to split maximally is ['a', 'ba']. Example 3: Input: s = \"aa\" Output: 1 Explanation: It is impossible to split the string any further.   Constraints: 1 <= s.length <= 16 s contains only lower case English letters.",
        "1200": "You are given a m x n matrix grid. Initially, you are located at the top-left corner (0, 0), and in each step, you can only move right or down in the matrix. Among all possible paths starting from the top-left corner (0, 0) and ending in the bottom-right corner (m - 1, n - 1), find the path with the maximum non-negative product. The product of a path is the product of all integers in the grid cells visited along the path. Return the maximum non-negative product modulo 109 + 7. If the maximum product is negative, return -1. Notice that the modulo is performed after getting the maximum product.   Example 1: Input: grid = [[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]] Output: -1 Explanation: It is not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1. Example 2: Input: grid = [[1,-2,1],[1,-2,1],[3,-4,1]] Output: 8 Explanation: Maximum non-negative product is shown (1 * 1 * -2 * -4 * 1 = 8). Example 3: Input: grid = [[1,3],[0,-4]] Output: 0 Explanation: Maximum non-negative product is shown (1 * 0 * -4 = 0).   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 15 -4 <= grid[i][j] <= 4",
        "1201": "You are given two groups of points where the first group has size1 points, the second group has size2 points, and size1 >= size2. The cost of the connection between any two points are given in an size1 x size2 matrix where cost[i][j] is the cost of connecting point i of the first group and point j of the second group. The groups are connected if each point in both groups is connected to one or more points in the opposite group. In other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group. Return the minimum cost it takes to connect the two groups.   Example 1: Input: cost = [[15, 96], [36, 2]] Output: 17 Explanation: The optimal way of connecting the groups is: 1--A 2--B This results in a total cost of 17. Example 2: Input: cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]] Output: 4 Explanation: The optimal way of connecting the groups is: 1--A 2--B 2--C 3--A This results in a total cost of 4. Note that there are multiple points connected to point 2 in the first group and point A in the second group. This does not matter as there is no limit to the number of points that can be connected. We only care about the minimum total cost. Example 3: Input: cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]] Output: 10   Constraints: size1 == cost.length size2 == cost[i].length 1 <= size1, size2 <= 12 size1 >= size2 0 <= cost[i][j] <= 100",
        "1202": "The Leetcode file system keeps a log each time some user performs a change folder operation. The operations are described below: \"../\" : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder). \"./\" : Remain in the same folder. \"x/\" : Move to the child folder named x (This folder is guaranteed to always exist). You are given a list of strings logs where logs[i] is the operation performed by the user at the ith step. The file system starts in the main folder, then the operations in logs are performed. Return the minimum number of operations needed to go back to the main folder after the change folder operations.   Example 1: Input: logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"] Output: 2 Explanation: Use this change folder operation \"../\" 2 times and go back to the main folder. Example 2: Input: logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"] Output: 3 Example 3: Input: logs = [\"d1/\",\"../\",\"../\",\"../\"] Output: 0   Constraints: 1 <= logs.length <= 103 2 <= logs[i].length <= 10 logs[i] contains lowercase English letters, digits, '.', and '/'. logs[i] follows the format described in the statement. Folder names consist of lowercase English letters and digits.",
        "1203": "You are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. You have the ability to rotate the gondolas counterclockwise, which costs you runningCost dollars. You are given an array customers of length n where customers[i] is the number of new customers arriving just before the ith rotation (0-indexed). This means you must rotate the wheel i times before the customers[i] customers arrive. You cannot make customers wait if there is room in the gondola. Each customer pays boardingCost dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again. You can stop the wheel at any time, including before serving all customers. If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation. Return the minimum number of rotations you need to perform to maximize your profit. If there is no scenario where the profit is positive, return -1.   Example 1: Input: customers = [8,3], boardingCost = 5, runningCost = 6 Output: 3 Explanation: The numbers written on the gondolas are the number of people currently there. 1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14. 2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28. 3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37. The highest profit was $37 after rotating the wheel 3 times. Example 2: Input: customers = [10,9,6], boardingCost = 6, runningCost = 4 Output: 7 Explanation: 1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20. 2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. Current profit is 8 * $6 - 2 * $4 = $40. 3. The final 6 customers arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 * $6 - 3 * $4 = $60. 4. 4 board and 9 wait, the wheel rotates. Current profit is 16 * $6 - 4 * $4 = $80. 5. 4 board and 5 wait, the wheel rotates. Current profit is 20 * $6 - 5 * $4 = $100. 6. 4 board and 1 waits, the wheel rotates. Current profit is 24 * $6 - 6 * $4 = $120. 7. 1 boards, the wheel rotates. Current profit is 25 * $6 - 7 * $4 = $122. The highest profit was $122 after rotating the wheel 7 times. Example 3: Input: customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92 Output: -1 Explanation: 1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89. 2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 2 * $92 = -$177. 3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 3 * $92 = -$269. 4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. Current profit is 11 * $1 - 4 * $92 = -$357. 5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. Current profit is 13 * $1 - 5 * $92 = -$447. The profit was never positive, so return -1.   Constraints: n == customers.length 1 <= n <= 105 0 <= customers[i] <= 50 1 <= boardingCost, runningCost <= 100",
        "1204": "A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born. The kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function Successor(x, curOrder), which given a person x and the inheritance order so far, returns who should be the next person after x in the order of inheritance. Successor(x, curOrder):     if x has no children or all of x's children are in curOrder:         if x is the king return null         else return Successor(x's parent, curOrder)     else return x's oldest child who's not in curOrder For example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack. In the beginning, curOrder will be [\"king\"]. Calling Successor(king, curOrder) will return Alice, so we append to curOrder to get [\"king\", \"Alice\"]. Calling Successor(Alice, curOrder) will return Jack, so we append to curOrder to get [\"king\", \"Alice\", \"Jack\"]. Calling Successor(Jack, curOrder) will return Bob, so we append to curOrder to get [\"king\", \"Alice\", \"Jack\", \"Bob\"]. Calling Successor(Bob, curOrder) will return null. Thus the order of inheritance will be [\"king\", \"Alice\", \"Jack\", \"Bob\"]. Using the above function, we can always obtain a unique order of inheritance. Implement the ThroneInheritance class: ThroneInheritance(string kingName) Initializes an object of the ThroneInheritance class. The name of the king is given as part of the constructor. void birth(string parentName, string childName) Indicates that parentName gave birth to childName. void death(string name) Indicates the death of name. The death of the person doesn't affect the Successor function nor the current inheritance order. You can treat it as just marking the person as dead. string[] getInheritanceOrder() Returns a list representing the current order of inheritance excluding dead people.   Example 1: Input [\"ThroneInheritance\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"getInheritanceOrder\", \"death\", \"getInheritanceOrder\"] [[\"king\"], [\"king\", \"andy\"], [\"king\", \"bob\"], [\"king\", \"catherine\"], [\"andy\", \"matthew\"], [\"bob\", \"alex\"], [\"bob\", \"asha\"], [null], [\"bob\"], [null]] Output [null, null, null, null, null, null, null, [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"], null, [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]]  Explanation ThroneInheritance t= new ThroneInheritance(\"king\"); // order: king t.birth(\"king\", \"andy\"); // order: king > andy t.birth(\"king\", \"bob\"); // order: king > andy > bob t.birth(\"king\", \"catherine\"); // order: king > andy > bob > catherine t.birth(\"andy\", \"matthew\"); // order: king > andy > matthew > bob > catherine t.birth(\"bob\", \"alex\"); // order: king > andy > matthew > bob > alex > catherine t.birth(\"bob\", \"asha\"); // order: king > andy > matthew > bob > alex > asha > catherine t.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"] t.death(\"bob\"); // order: king > andy > matthew > bob > alex > asha > catherine t.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]   Constraints: 1 <= kingName.length, parentName.length, childName.length, name.length <= 15 kingName, parentName, childName, and name consist of lowercase English letters only. All arguments childName and kingName are distinct. All name arguments of death will be passed to either the constructor or as childName to birth first. For each call to birth(parentName, childName), it is guaranteed that parentName is alive. At most 105 calls will be made to birth and death. At most 10 calls will be made to getInheritanceOrder.",
        "1205": "We have n buildings numbered from 0 to n - 1. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in. You are given an array requests where requests[i] = [fromi, toi] represents an employee's request to transfer from building fromi to building toi. All buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. This means the number of employees leaving is equal to the number of employees moving in. For example if n = 3 and two employees are leaving building 0, one is leaving building 1, and one is leaving building 2, there should be two employees moving to building 0, one employee moving to building 1, and one employee moving to building 2. Return the maximum number of achievable requests.   Example 1: Input: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]] Output: 5 Explantion: Let's see the requests: From building 0 we have employees x and y and both want to move to building 1. From building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively. From building 2 we have employee z and they want to move to building 0. From building 3 we have employee c and they want to move to building 4. From building 4 we don't have any requests. We can achieve the requests of users x and b by swapping their places. We can achieve the requests of users y, a and z by swapping the places in the 3 buildings. Example 2: Input: n = 3, requests = [[0,0],[1,2],[2,1]] Output: 3 Explantion: Let's see the requests: From building 0 we have employee x and they want to stay in the same building 0. From building 1 we have employee y and they want to move to building 2. From building 2 we have employee z and they want to move to building 1. We can achieve all the requests.  Example 3: Input: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]] Output: 4   Constraints: 1 <= n <= 20 1 <= requests.length <= 16 requests[i].length == 2 0 <= fromi, toi < n",
        "1206": "Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size. Implement the ParkingSystem class: ParkingSystem(int big, int medium, int small) Initializes object of the ParkingSystem class. The number of slots for each parking space are given as part of the constructor. bool addCar(int carType) Checks whether there is a parking space of carType for the car that wants to get into the parking lot. carType can be of three kinds: big, medium, or small, which are represented by 1, 2, and 3 respectively. A car can only park in a parking space of its carType. If there is no space available, return false, else park the car in that size space and return true.   Example 1: Input [\"ParkingSystem\", \"addCar\", \"addCar\", \"addCar\", \"addCar\"] [[1, 1, 0], [1], [2], [3], [1]] Output [null, true, true, false, false]  Explanation ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0); parkingSystem.addCar(1); // return true because there is 1 available slot for a big car parkingSystem.addCar(2); // return true because there is 1 available slot for a medium car parkingSystem.addCar(3); // return false because there is no available slot for a small car parkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.   Constraints: 0 <= big, medium, small <= 1000 carType is 1, 2, or 3 At most 1000 calls will be made to addCar",
        "1207": "LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an alert if any worker uses the key-card three or more times in a one-hour period. You are given a list of strings keyName and keyTime where [keyName[i], keyTime[i]] corresponds to a person's name and the time when their key-card was used in a single day. Access times are given in the 24-hour time format \"HH:MM\", such as \"23:51\" and \"09:49\". Return a list of unique worker names who received an alert for frequent keycard use. Sort the names in ascending order alphabetically. Notice that \"10:00\" - \"11:00\" is considered to be within a one-hour period, while \"22:51\" - \"23:52\" is not considered to be within a one-hour period.   Example 1: Input: keyName = [\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"], keyTime = [\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"] Output: [\"daniel\"] Explanation: \"daniel\" used the keycard 3 times in a one-hour period (\"10:00\",\"10:40\", \"11:00\"). Example 2: Input: keyName = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\",\"bob\"], keyTime = [\"12:01\",\"12:00\",\"18:00\",\"21:00\",\"21:20\",\"21:30\",\"23:00\"] Output: [\"bob\"] Explanation: \"bob\" used the keycard 3 times in a one-hour period (\"21:00\",\"21:20\", \"21:30\").   Constraints: 1 <= keyName.length, keyTime.length <= 105 keyName.length == keyTime.length keyTime[i] is in the format \"HH:MM\". [keyName[i], keyTime[i]] is unique. 1 <= keyName[i].length <= 10 keyName[i] contains only lowercase English letters.",
        "1208": "You are given two arrays rowSum and colSum of non-negative integers where rowSum[i] is the sum of the elements in the ith row and colSum[j] is the sum of the elements of the jth column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column. Find any matrix of non-negative integers of size rowSum.length x colSum.length that satisfies the rowSum and colSum requirements. Return a 2D array representing any matrix that fulfills the requirements. It's guaranteed that at least one matrix that fulfills the requirements exists.   Example 1: Input: rowSum = [3,8], colSum = [4,7] Output: [[3,0],          [1,7]] Explanation:  0th row: 3 + 0 = 3 == rowSum[0] 1st row: 1 + 7 = 8 == rowSum[1] 0th column: 3 + 1 = 4 == colSum[0] 1st column: 0 + 7 = 7 == colSum[1] The row and column sums match, and all matrix elements are non-negative. Another possible matrix is: [[1,2],                              [3,5]] Example 2: Input: rowSum = [5,7,10], colSum = [8,6,8] Output: [[0,5,0],          [6,1,0],          [2,0,8]]   Constraints: 1 <= rowSum.length, colSum.length <= 500 0 <= rowSum[i], colSum[i] <= 108 sum(rowSum) == sum(colSum)",
        "1209": "You have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but cannot handle more than one request at a time. The requests are assigned to servers according to a specific algorithm: The ith (0-indexed) request arrives. If all servers are busy, the request is dropped (not handled at all). If the (i % k)th server is available, assign the request to that server. Otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the ith server is busy, try to assign the request to the (i+1)th server, then the (i+2)th server, and so on. You are given a strictly increasing array arrival of positive integers, where arrival[i] represents the arrival time of the ith request, and another array load, where load[i] represents the load of the ith request (the time it takes to complete). Your goal is to find the busiest server(s). A server is considered busiest if it handled the most number of requests successfully among all the servers. Return a list containing the IDs (0-indexed) of the busiest server(s). You may return the IDs in any order.   Example 1: Input: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3]  Output: [1]  Explanation:  All of the servers start out available. The first 3 requests are handled by the first 3 servers in order. Request 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1. Request 4 comes in. It cannot be handled since all servers are busy, so it is dropped. Servers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server. Example 2: Input: k = 3, arrival = [1,2,3,4], load = [1,2,1,2] Output: [0] Explanation:  The first 3 requests are handled by first 3 servers. Request 3 comes in. It is handled by server 0 since the server is available. Server 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server. Example 3: Input: k = 3, arrival = [1,2,3], load = [10,12,11] Output: [0,1,2] Explanation: Each server handles a single request, so they are all considered the busiest.   Constraints: 1 <= k <= 105 1 <= arrival.length, load.length <= 105 arrival.length == load.length 1 <= arrival[i], load[i] <= 109 arrival is strictly increasing.",
        "1210": "You are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x. Notice that x does not have to be an element in nums. Return x if the array is special, otherwise, return -1. It can be proven that if nums is special, the value for x is unique.   Example 1: Input: nums = [3,5] Output: 2 Explanation: There are 2 values (3 and 5) that are greater than or equal to 2. Example 2: Input: nums = [0,0] Output: -1 Explanation: No numbers fit the criteria for x. If x = 0, there should be 0 numbers >= x, but there are 2. If x = 1, there should be 1 number >= x, but there are 0. If x = 2, there should be 2 numbers >= x, but there are 0. x cannot be greater since there are only 2 numbers in nums. Example 3: Input: nums = [0,4,3,0,4] Output: 3 Explanation: There are 3 values that are greater than or equal to 3.   Constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 1000",
        "1211": "A binary tree is named Even-Odd if it meets the following conditions: The root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc. For every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right). For every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right). Given the root of a binary tree, return true if the binary tree is Even-Odd, otherwise return false.   Example 1: Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2] Output: true Explanation: The node values on each level are: Level 0: [1] Level 1: [10,4] Level 2: [3,7,9] Level 3: [12,8,6,2] Since levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is Even-Odd. Example 2: Input: root = [5,4,2,3,3,7] Output: false Explanation: The node values on each level are: Level 0: [5] Level 1: [4,2] Level 2: [3,3,7] Node values in level 2 must be in strictly increasing order, so the tree is not Even-Odd. Example 3: Input: root = [5,9,1,3,5,7] Output: false Explanation: Node values in the level 1 should be even integers.   Constraints: The number of nodes in the tree is in the range [1, 105]. 1 <= Node.val <= 106",
        "1212": "You are given an array points, an integer angle, and your location, where location = [posx, posy] and points[i] = [xi, yi] both denote integral coordinates on the X-Y plane. Initially, you are facing directly east from your position. You cannot move from your position, but you can rotate. In other words, posx and posy cannot be changed. Your field of view in degrees is represented by angle, determining how wide you can see from any given view direction. Let d be the amount in degrees that you rotate counterclockwise. Then, your field of view is the inclusive range of angles [d - angle/2, d + angle/2]. Your browser does not support the video tag or this video format. You can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view. There can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. Points do not obstruct your vision to other points. Return the maximum number of points you can see.   Example 1: Input: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1] Output: 3 Explanation: The shaded region represents your field of view. All points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight. Example 2: Input: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1] Output: 4 Explanation: All points can be made visible in your field of view, including the one at your location. Example 3: Input: points = [[1,0],[2,1]], angle = 13, location = [1,1] Output: 1 Explanation: You can only see one of the two points, as shown above.   Constraints: 1 <= points.length <= 105 points[i].length == 2 location.length == 2 0 <= angle < 360 0 <= posx, posy, xi, yi <= 100",
        "1213": "Given an integer n, you must transform it into 0 using the following operations any number of times: Change the rightmost (0th) bit in the binary representation of n. Change the ith bit in the binary representation of n if the (i-1)th bit is set to 1 and the (i-2)th through 0th bits are set to 0. Return the minimum number of operations to transform n into 0.   Example 1: Input: n = 3 Output: 2 Explanation: The binary representation of 3 is \"11\". \"11\" -> \"01\" with the 2nd operation since the 0th bit is 1. \"01\" -> \"00\" with the 1st operation. Example 2: Input: n = 6 Output: 4 Explanation: The binary representation of 6 is \"110\". \"110\" -> \"010\" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0. \"010\" -> \"011\" with the 1st operation. \"011\" -> \"001\" with the 2nd operation since the 0th bit is 1. \"001\" -> \"000\" with the 1st operation.   Constraints: 0 <= n <= 109",
        "1214": "Given a valid parentheses string s, return the nesting depth of s. The nesting depth is the maximum number of nested parentheses.   Example 1: Input: s = \"(1+(2*3)+((8)/4))+1\" Output: 3 Explanation: Digit 8 is inside of 3 nested parentheses in the string. Example 2: Input: s = \"(1)+((2))+(((3)))\" Output: 3 Explanation: Digit 3 is inside of 3 nested parentheses in the string. Example 3: Input: s = \"()(())((()()))\" Output: 3   Constraints: 1 <= s.length <= 100 s consists of digits 0-9 and characters '+', '-', '*', '/', '(', and ')'. It is guaranteed that parentheses expression s is a VPS.",
        "1215": "There is an infrastructure of n cities with some number of roads connecting these cities. Each roads[i] = [ai, bi] indicates that there is a bidirectional road between cities ai and bi. The network rank of two different cities is defined as the total number of directly connected roads to either city. If a road is directly connected to both cities, it is only counted once. The maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities. Given the integer n and the array roads, return the maximal network rank of the entire infrastructure.   Example 1: Input: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]] Output: 4 Explanation: The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once. Example 2: Input: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]] Output: 5 Explanation: There are 5 roads that are connected to cities 1 or 2. Example 3: Input: n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]] Output: 5 Explanation: The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected.   Constraints: 2 <= n <= 100 0 <= roads.length <= n * (n - 1) / 2 roads[i].length == 2 0 <= ai, bi <= n-1 ai != bi Each pair of cities has at most one road connecting them.",
        "1216": "You are given two strings a and b of the same length. Choose an index and split both strings at the same index, splitting a into two strings: aprefix and asuffix where a = aprefix + asuffix, and splitting b into two strings: bprefix and bsuffix where b = bprefix + bsuffix. Check if aprefix + bsuffix or bprefix + asuffix forms a palindrome. When you split a string s into sprefix and ssuffix, either ssuffix or sprefix is allowed to be empty. For example, if s = \"abc\", then \"\" + \"abc\", \"a\" + \"bc\", \"ab\" + \"c\" , and \"abc\" + \"\" are valid splits. Return true if it is possible to form a palindrome string, otherwise return false. Notice that x + y denotes the concatenation of strings x and y.   Example 1: Input: a = \"x\", b = \"y\" Output: true Explaination: If either a or b are palindromes the answer is true since you can split in the following way: aprefix = \"\", asuffix = \"x\" bprefix = \"\", bsuffix = \"y\" Then, aprefix + bsuffix = \"\" + \"y\" = \"y\", which is a palindrome. Example 2: Input: a = \"xbdef\", b = \"xecab\" Output: false Example 3: Input: a = \"ulacfd\", b = \"jizalu\" Output: true Explaination: Split them at index 3: aprefix = \"ula\", asuffix = \"cfd\" bprefix = \"jiz\", bsuffix = \"alu\" Then, aprefix + bsuffix = \"ula\" + \"alu\" = \"ulaalu\", which is a palindrome.   Constraints: 1 <= a.length, b.length <= 105 a.length == b.length a and b consist of lowercase English letters",
        "1217": "There are n cities numbered from 1 to n. You are given an array edges of size n-1, where edges[i] = [ui, vi] represents a bidirectional edge between cities ui and vi. There exists a unique path between each pair of cities. In other words, the cities form a tree. A subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other. For each d from 1 to n-1, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to d. Return an array of size n-1 where the dth element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to d. Notice that the distance between the two cities is the number of edges in the path between them.   Example 1: Input: n = 4, edges = [[1,2],[2,3],[2,4]] Output: [3,4,0] Explanation: The subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1. The subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2. No subtree has two nodes where the max distance between them is 3. Example 2: Input: n = 2, edges = [[1,2]] Output: [1] Example 3: Input: n = 3, edges = [[1,2],[2,3]] Output: [2,1]   Constraints: 2 <= n <= 15 edges.length == n-1 edges[i].length == 2 1 <= ui, vi <= n All pairs (ui, vi) are distinct.",
        "1218": "Given an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements. Answers within 10-5 of the actual answer will be considered accepted.   Example 1: Input: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3] Output: 2.00000 Explanation: After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2. Example 2: Input: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0] Output: 4.00000 Example 3: Input: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4] Output: 4.77778   Constraints: 20 <= arr.length <= 1000 arr.length is a multiple of 20. 0 <= arr[i] <= 105",
        "1219": "You are given an array of network towers towers, where towers[i] = [xi, yi, qi] denotes the ith network tower with location (xi, yi) and quality factor qi. All the coordinates are integral coordinates on the X-Y plane, and the distance between the two coordinates is the Euclidean distance. You are also given an integer radius where a tower is reachable if the distance is less than or equal to radius. Outside that distance, the signal becomes garbled, and the tower is not reachable. The signal quality of the ith tower at a coordinate (x, y) is calculated with the formula ⌊qi / (1 + d)⌋, where d is the distance between the tower and the coordinate. The network quality at a coordinate is the sum of the signal qualities from all the reachable towers. Return the array [cx, cy] representing the integral coordinate (cx, cy) where the network quality is maximum. If there are multiple coordinates with the same network quality, return the lexicographically minimum non-negative coordinate. Note: A coordinate (x1, y1) is lexicographically smaller than (x2, y2) if either: x1 < x2, or x1 == x2 and y1 < y2. ⌊val⌋ is the greatest integer less than or equal to val (the floor function).   Example 1: Input: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2 Output: [2,1] Explanation: At coordinate (2, 1) the total quality is 13. - Quality of 7 from (2, 1) results in ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7 - Quality of 5 from (1, 2) results in ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2 - Quality of 9 from (3, 1) results in ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4 No other coordinate has a higher network quality. Example 2: Input: towers = [[23,11,21]], radius = 9 Output: [23,11] Explanation: Since there is only one tower, the network quality is highest right at the tower's location. Example 3: Input: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2 Output: [1,2] Explanation: Coordinate (1, 2) has the highest network quality.   Constraints: 1 <= towers.length <= 50 towers[i].length == 3 0 <= xi, yi, qi <= 50 1 <= radius <= 50",
        "1220": "Given n points on a 1-D plane, where the ith point (from 0 to n-1) is at x = i, find the number of ways we can draw exactly k non-overlapping line segments such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. The k line segments do not have to cover all n points, and they are allowed to share endpoints. Return the number of ways we can draw k non-overlapping line segments. Since this number can be huge, return it modulo 109 + 7.   Example 1: Input: n = 4, k = 2 Output: 5 Explanation: The two line segments are shown in red and blue. The image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}. Example 2: Input: n = 3, k = 1 Output: 3 Explanation: The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}. Example 3: Input: n = 30, k = 7 Output: 796297179 Explanation: The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 109 + 7 gives us 796297179.   Constraints: 2 <= n <= 1000 1 <= k <= n-1",
        "1221": "Write an API that generates fancy sequences using the append, addAll, and multAll operations. Implement the Fancy class: Fancy() Initializes the object with an empty sequence. void append(val) Appends an integer val to the end of the sequence. void addAll(inc) Increments all existing values in the sequence by an integer inc. void multAll(m) Multiplies all existing values in the sequence by an integer m. int getIndex(idx) Gets the current value at index idx (0-indexed) of the sequence modulo 109 + 7. If the index is greater or equal than the length of the sequence, return -1.   Example 1: Input [\"Fancy\", \"append\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"getIndex\", \"getIndex\"] [[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]] Output [null, null, null, null, null, 10, null, null, null, 26, 34, 20]  Explanation Fancy fancy = new Fancy(); fancy.append(2);   // fancy sequence: [2] fancy.addAll(3);   // fancy sequence: [2+3] -> [5] fancy.append(7);   // fancy sequence: [5, 7] fancy.multAll(2);  // fancy sequence: [5*2, 7*2] -> [10, 14] fancy.getIndex(0); // return 10 fancy.addAll(3);   // fancy sequence: [10+3, 14+3] -> [13, 17] fancy.append(10);  // fancy sequence: [13, 17, 10] fancy.multAll(2);  // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20] fancy.getIndex(0); // return 26 fancy.getIndex(1); // return 34 fancy.getIndex(2); // return 20   Constraints: 1 <= val, inc, m <= 100 0 <= idx <= 105 At most 105 calls total will be made to append, addAll, multAll, and getIndex.",
        "1222": "Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1. A substring is a contiguous sequence of characters within a string.   Example 1: Input: s = \"aa\" Output: 0 Explanation: The optimal substring here is an empty substring between the two 'a's. Example 2: Input: s = \"abca\" Output: 2 Explanation: The optimal substring here is \"bc\". Example 3: Input: s = \"cbzxy\" Output: -1 Explanation: There are no characters that appear twice in s.   Constraints: 1 <= s.length <= 300 s contains only lowercase English letters.",
        "1223": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b. You can apply either of the following two operations any number of times and in any order on s: Add a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = \"3456\" and a = 5, s becomes \"3951\". Rotate s to the right by b positions. For example, if s = \"3456\" and b = 1, s becomes \"6345\". Return the lexicographically smallest string you can obtain by applying the above operations any number of times on s. A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.   Example 1: Input: s = \"5525\", a = 9, b = 2 Output: \"2050\" Explanation: We can apply the following operations: Start:  \"5525\" Rotate: \"2555\" Add:    \"2454\" Add:    \"2353\" Rotate: \"5323\" Add:    \"5222\" Add:    \"5121\" Rotate: \"2151\" Add:    \"2050\" There is no way to obtain a string that is lexicographically smaller than \"2050\". Example 2: Input: s = \"74\", a = 5, b = 1 Output: \"24\" Explanation: We can apply the following operations: Start:  \"74\" Rotate: \"47\" Add:    \"42\" Rotate: \"24\" There is no way to obtain a string that is lexicographically smaller than \"24\". Example 3: Input: s = \"0011\", a = 4, b = 2 Output: \"0011\" Explanation: There are no sequence of operations that will give us a lexicographically smaller string than \"0011\".   Constraints: 2 <= s.length <= 100 s.length is even. s consists of digits from 0 to 9 only. 1 <= a <= 9 1 <= b <= s.length - 1",
        "1224": "You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team. However, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. A conflict does not occur between players of the same age. Given two lists, scores and ages, where each scores[i] and ages[i] represents the score and age of the ith player, respectively, return the highest overall score of all possible basketball teams.   Example 1: Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5] Output: 34 Explanation: You can choose all the players. Example 2: Input: scores = [4,5,6,5], ages = [2,1,2,1] Output: 16 Explanation: It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age. Example 3: Input: scores = [1,2,3,5], ages = [8,9,10,1] Output: 6 Explanation: It is best to choose the first 3 players.    Constraints: 1 <= scores.length, ages.length <= 1000 scores.length == ages.length 1 <= scores[i] <= 106 1 <= ages[i] <= 1000",
        "1225": "A newly designed keypad was tested, where a tester pressed a sequence of n keys, one at a time. You are given a string keysPressed of length n, where keysPressed[i] was the ith key pressed in the testing sequence, and a sorted list releaseTimes, where releaseTimes[i] was the time the ith key was released. Both arrays are 0-indexed. The 0th key was pressed at the time 0, and every subsequent key was pressed at the exact time the previous key was released. The tester wants to know the key of the keypress that had the longest duration. The ith keypress had a duration of releaseTimes[i] - releaseTimes[i - 1], and the 0th keypress had a duration of releaseTimes[0]. Note that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration. Return the key of the keypress that had the longest duration. If there are multiple such keypresses, return the lexicographically largest key of the keypresses.   Example 1: Input: releaseTimes = [9,29,49,50], keysPressed = \"cbcd\" Output: \"c\" Explanation: The keypresses were as follows: Keypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9). Keypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29). Keypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49). Keypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50). The longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20. 'c' is lexicographically larger than 'b', so the answer is 'c'. Example 2: Input: releaseTimes = [12,23,36,46,62], keysPressed = \"spuda\" Output: \"a\" Explanation: The keypresses were as follows: Keypress for 's' had a duration of 12. Keypress for 'p' had a duration of 23 - 12 = 11. Keypress for 'u' had a duration of 36 - 23 = 13. Keypress for 'd' had a duration of 46 - 36 = 10. Keypress for 'a' had a duration of 62 - 46 = 16. The longest of these was the keypress for 'a' with duration 16.   Constraints: releaseTimes.length == n keysPressed.length == n 2 <= n <= 1000 1 <= releaseTimes[i] <= 109 releaseTimes[i] < releaseTimes[i+1] keysPressed contains only lowercase English letters.",
        "1226": "A sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence s is arithmetic if and only if s[i+1] - s[i] == s[1] - s[0] for all valid i. For example, these are arithmetic sequences: 1, 3, 5, 7, 9 7, 7, 7, 7 3, -1, -5, -9 The following sequence is not arithmetic: 1, 1, 2, 5, 7 You are given an array of n integers, nums, and two arrays of m integers each, l and r, representing the m range queries, where the ith query is the range [l[i], r[i]]. All the arrays are 0-indexed. Return a list of boolean elements answer, where answer[i] is true if the subarray nums[l[i]], nums[l[i]+1], ... , nums[r[i]] can be rearranged to form an arithmetic sequence, and false otherwise.   Example 1: Input: nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5] Output: [true,false,true] Explanation: In the 0th query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence. In the 1st query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic sequence. In the 2nd query, the subarray is [5,9,3,7]. This can be rearranged as [3,5,7,9], which is an arithmetic sequence. Example 2: Input: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10] Output: [false,true,false,false,true,true]   Constraints: n == nums.length m == l.length m == r.length 2 <= n <= 500 1 <= m <= 500 0 <= l[i] < r[i] < n -105 <= nums[i] <= 105",
        "1227": "You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort. A route's effort is the maximum absolute difference in heights between two consecutive cells of the route. Return the minimum effort required to travel from the top-left cell to the bottom-right cell.   Example 1: Input: heights = [[1,2,2],[3,8,2],[5,3,5]] Output: 2 Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells. This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3. Example 2: Input: heights = [[1,2,3],[3,8,4],[5,3,5]] Output: 1 Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5]. Example 3: Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]] Output: 0 Explanation: This route does not require any effort.   Constraints: rows == heights.length columns == heights[i].length 1 <= rows, columns <= 100 1 <= heights[i][j] <= 106",
        "1228": "Given an m x n matrix, return a new matrix answer where answer[row][col] is the rank of matrix[row][col]. The rank is an integer that represents how large an element is compared to other elements. It is calculated using the following rules: The rank is an integer starting from 1. If two elements p and q are in the same row or column, then: If p < q then rank(p) < rank(q) If p == q then rank(p) == rank(q) If p > q then rank(p) > rank(q) The rank should be as small as possible. The test cases are generated so that answer is unique under the given rules.   Example 1: Input: matrix = [[1,2],[3,4]] Output: [[1,2],[2,3]] Explanation: The rank of matrix[0][0] is 1 because it is the smallest integer in its row and column. The rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1. The rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1. The rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2. Example 2: Input: matrix = [[7,7],[7,7]] Output: [[1,1],[1,1]] Example 3: Input: matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]] Output: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]   Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 500 -109 <= matrix[row][col] <= 109",
        "1229": "SQL Schema Pandas Schema",
        "1230": "Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order. Return the sorted array.   Example 1: Input: nums = [1,1,2,2,2,3] Output: [3,1,1,2,2,2] Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3. Example 2: Input: nums = [2,3,1,3,2] Output: [1,3,3,2,2] Explanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order. Example 3: Input: nums = [-1,1,-6,4,5,-6,1,4,1] Output: [5,-1,4,4,-6,-6,1,1,1]   Constraints: 1 <= nums.length <= 100 -100 <= nums[i] <= 100",
        "1231": "Given n points on a 2D plane where points[i] = [xi, yi], Return the widest vertical area between two points such that no points are inside the area. A vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width. Note that points on the edge of a vertical area are not considered included in the area.   Example 1: Input: points = [[8,7],[9,9],[7,4],[9,7]] Output: 1 Explanation: Both the red and the blue area are optimal. Example 2: Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]] Output: 3   Constraints: n == points.length 2 <= n <= 105 points[i].length == 2 0 <= xi, yi <= 109",
        "1232": "Given two strings s and t, find the number of ways you can choose a non-empty substring of s and replace a single character by a different character such that the resulting substring is a substring of t. In other words, find the number of substrings in s that differ from some substring in t by exactly one character. For example, the underlined substrings in \"computer\" and \"computation\" only differ by the 'e'/'a', so this is a valid way. Return the number of substrings that satisfy the condition above. A substring is a contiguous sequence of characters within a string.   Example 1: Input: s = \"aba\", t = \"baba\" Output: 6 Explanation: The following are the pairs of substrings from s and t that differ by exactly 1 character: (\"aba\", \"baba\") (\"aba\", \"baba\") (\"aba\", \"baba\") (\"aba\", \"baba\") (\"aba\", \"baba\") (\"aba\", \"baba\") The underlined portions are the substrings that are chosen from s and t. Example 2: Input: s = \"ab\", t = \"bb\" Output: 3 Explanation: The following are the pairs of substrings from s and t that differ by 1 character: (\"ab\", \"bb\") (\"ab\", \"bb\") (\"ab\", \"bb\") The underlined portions are the substrings that are chosen from s and t.   Constraints: 1 <= s.length, t.length <= 100 s and t consist of lowercase English letters only.",
        "1233": "You are given an array of distinct integers arr and an array of integer arrays pieces, where the integers in pieces are distinct. Your goal is to form arr by concatenating the arrays in pieces in any order. However, you are not allowed to reorder the integers in each array pieces[i]. Return true if it is possible to form the array arr from pieces. Otherwise, return false.   Example 1: Input: arr = [15,88], pieces = [[88],[15]] Output: true Explanation: Concatenate [15] then [88] Example 2: Input: arr = [49,18,16], pieces = [[16,18,49]] Output: false Explanation: Even though the numbers match, we cannot reorder pieces[0]. Example 3: Input: arr = [91,4,64,78], pieces = [[78],[4,64],[91]] Output: true Explanation: Concatenate [91] then [4,64] then [78]   Constraints: 1 <= pieces.length <= arr.length <= 100 sum(pieces[i].length) == arr.length 1 <= pieces[i].length <= arr.length 1 <= arr[i], pieces[i][j] <= 100 The integers in arr are distinct. The integers in pieces are distinct (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct).",
        "1234": "Given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted. A string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.   Example 1: Input: n = 1 Output: 5 Explanation: The 5 sorted strings that consist of vowels only are [\"a\",\"e\",\"i\",\"o\",\"u\"]. Example 2: Input: n = 2 Output: 15 Explanation: The 15 sorted strings that consist of vowels only are [\"aa\",\"ae\",\"ai\",\"ao\",\"au\",\"ee\",\"ei\",\"eo\",\"eu\",\"ii\",\"io\",\"iu\",\"oo\",\"ou\",\"uu\"]. Note that \"ea\" is not a valid string since 'e' comes after 'a' in the alphabet. Example 3: Input: n = 33 Output: 66045   Constraints: 1 <= n <= 50 ",
        "1235": "You are given an integer array heights representing the heights of buildings, some bricks, and some ladders. You start your journey from building 0 and move to the next building by possibly using bricks or ladders. While moving from building i to building i+1 (0-indexed), If the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks. If the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks. Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.   Example 1: Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1 Output: 4 Explanation: Starting at building 0, you can follow these steps: - Go to building 1 without using ladders nor bricks since 4 >= 2. - Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7. - Go to building 3 without using ladders nor bricks since 7 >= 6. - Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9. It is impossible to go beyond building 4 because you do not have any more bricks or ladders. Example 2: Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2 Output: 7 Example 3: Input: heights = [14,3,19,3], bricks = 17, ladders = 0 Output: 3   Constraints: 1 <= heights.length <= 105 1 <= heights[i] <= 106 0 <= bricks <= 109 0 <= ladders <= heights.length",
        "1236": "Bob is standing at cell (0, 0), and he wants to reach destination: (row, column). He can only travel right and down. You are going to help Bob by providing instructions for him to reach destination. The instructions are represented as a string, where each character is either: 'H', meaning move horizontally (go right), or 'V', meaning move vertically (go down). Multiple instructions will lead Bob to destination. For example, if destination is (2, 3), both \"HHHVV\" and \"HVHVH\" are valid instructions. However, Bob is very picky. Bob has a lucky number k, and he wants the kth lexicographically smallest instructions that will lead him to destination. k is 1-indexed. Given an integer array destination and an integer k, return the kth lexicographically smallest instructions that will take Bob to destination.   Example 1: Input: destination = [2,3], k = 1 Output: \"HHHVV\" Explanation: All the instructions that reach (2, 3) in lexicographic order are as follows: [\"HHHVV\", \"HHVHV\", \"HHVVH\", \"HVHHV\", \"HVHVH\", \"HVVHH\", \"VHHHV\", \"VHHVH\", \"VHVHH\", \"VVHHH\"]. Example 2: Input: destination = [2,3], k = 2 Output: \"HHVHV\" Example 3: Input: destination = [2,3], k = 3 Output: \"HHVVH\"   Constraints: destination.length == 2 1 <= row, column <= 15 1 <= k <= nCr(row + column, row), where nCr(a, b) denotes a choose b.",
        "1237": "You are given an integer n. A 0-indexed integer array nums of length n + 1 is generated in the following way: nums[0] = 0 nums[1] = 1 nums[2 * i] = nums[i] when 2 <= 2 * i <= n nums[2 * i + 1] = nums[i] + nums[i + 1] when 2 <= 2 * i + 1 <= n Return the maximum integer in the array nums.   Example 1: Input: n = 7 Output: 3 Explanation: According to the given rules:   nums[0] = 0   nums[1] = 1   nums[(1 * 2) = 2] = nums[1] = 1   nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2   nums[(2 * 2) = 4] = nums[2] = 1   nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3   nums[(3 * 2) = 6] = nums[3] = 2   nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3 Hence, nums = [0,1,1,2,1,3,2,3], and the maximum is max(0,1,1,2,1,3,2,3) = 3. Example 2: Input: n = 2 Output: 1 Explanation: According to the given rules, nums = [0,1,1]. The maximum is max(0,1,1) = 1. Example 3: Input: n = 3 Output: 2 Explanation: According to the given rules, nums = [0,1,1,2]. The maximum is max(0,1,1,2) = 2.   Constraints: 0 <= n <= 100",
        "1238": "A string s is called good if there are no two different characters in s that have the same frequency. Given a string s, return the minimum number of characters you need to delete to make s good. The frequency of a character in a string is the number of times it appears in the string. For example, in the string \"aab\", the frequency of 'a' is 2, while the frequency of 'b' is 1.   Example 1: Input: s = \"aab\" Output: 0 Explanation: s is already good. Example 2: Input: s = \"aaabbbcc\" Output: 2 Explanation: You can delete two 'b's resulting in the good string \"aaabcc\". Another way it to delete one 'b' and one 'c' resulting in the good string \"aaabbc\". Example 3: Input: s = \"ceabaacb\" Output: 2 Explanation: You can delete both 'c's resulting in the good string \"eabaab\". Note that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).   Constraints: 1 <= s.length <= 105 s contains only lowercase English letters.",
        "1239": "Given an integer array instructions, you are asked to create a sorted array from the elements in instructions. You start with an empty container nums. For each element from left to right in instructions, insert it into nums. The cost of each insertion is the minimum of the following: The number of elements currently in nums that are strictly less than instructions[i]. The number of elements currently in nums that are strictly greater than instructions[i]. For example, if inserting element 3 into nums = [1,2,3,5], the cost of insertion is min(2, 1) (elements 1 and 2 are less than 3, element 5 is greater than 3) and nums will become [1,2,3,3,5]. Return the total cost to insert all elements from instructions into nums. Since the answer may be large, return it modulo 109 + 7   Example 1: Input: instructions = [1,5,6,2] Output: 1 Explanation: Begin with nums = []. Insert 1 with cost min(0, 0) = 0, now nums = [1]. Insert 5 with cost min(1, 0) = 0, now nums = [1,5]. Insert 6 with cost min(2, 0) = 0, now nums = [1,5,6]. Insert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6]. The total cost is 0 + 0 + 0 + 1 = 1. Example 2: Input: instructions = [1,2,3,6,5,4] Output: 3 Explanation: Begin with nums = []. Insert 1 with cost min(0, 0) = 0, now nums = [1]. Insert 2 with cost min(1, 0) = 0, now nums = [1,2]. Insert 3 with cost min(2, 0) = 0, now nums = [1,2,3]. Insert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6]. Insert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6]. Insert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6]. The total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3. Example 3: Input: instructions = [1,3,3,3,2,4,2,1,2] Output: 4 Explanation: Begin with nums = []. Insert 1 with cost min(0, 0) = 0, now nums = [1]. Insert 3 with cost min(1, 0) = 0, now nums = [1,3]. Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3]. Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3]. Insert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3]. Insert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4]. Insert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4]. Insert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4]. Insert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4]. The total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.   Constraints: 1 <= instructions.length <= 105 1 <= instructions[i] <= 105",
        "1240": "You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code of length of n and a key k. To decrypt the code, you must replace every number. All the numbers are replaced simultaneously. If k > 0, replace the ith number with the sum of the next k numbers. If k < 0, replace the ith number with the sum of the previous k numbers. If k == 0, replace the ith number with 0. As code is circular, the next element of code[n-1] is code[0], and the previous element of code[0] is code[n-1]. Given the circular array code and an integer key k, return the decrypted code to defuse the bomb!   Example 1: Input: code = [5,7,1,4], k = 3 Output: [12,10,16,13] Explanation: Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around. Example 2: Input: code = [1,2,3,4], k = 0 Output: [0,0,0,0] Explanation: When k is zero, the numbers are replaced by 0.  Example 3: Input: code = [2,4,9,3], k = -2 Output: [12,5,6,13] Explanation: The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the previous numbers.   Constraints: n == code.length 1 <= n <= 100 1 <= code[i] <= 100 -(n - 1) <= k <= n - 1",
        "1241": "You are given a string s consisting only of characters 'a' and 'b'. You can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'. Return the minimum number of deletions needed to make s balanced.   Example 1: Input: s = \"aababbab\" Output: 2 Explanation: You can either: Delete the characters at 0-indexed positions 2 and 6 (\"aababbab\" -> \"aaabbb\"), or Delete the characters at 0-indexed positions 3 and 6 (\"aababbab\" -> \"aabbbb\"). Example 2: Input: s = \"bbaaaaabb\" Output: 2 Explanation: The only solution is to delete the first two characters.   Constraints: 1 <= s.length <= 105 s[i] is 'a' or 'b'.",
        "1242": "A certain bug's home is on the x-axis at position x. Help them get there from position 0. The bug jumps according to the following rules: It can jump exactly a positions forward (to the right). It can jump exactly b positions backward (to the left). It cannot jump backward twice in a row. It cannot jump to any forbidden positions. The bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers. Given an array of integers forbidden, where forbidden[i] means that the bug cannot jump to the position forbidden[i], and integers a, b, and x, return the minimum number of jumps needed for the bug to reach its home. If there is no possible sequence of jumps that lands the bug on position x, return -1.   Example 1: Input: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9 Output: 3 Explanation: 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home. Example 2: Input: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11 Output: -1 Example 3: Input: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7 Output: 2 Explanation: One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home.   Constraints: 1 <= forbidden.length <= 1000 1 <= a, b, forbidden[i] <= 2000 0 <= x <= 2000 All the elements in forbidden are distinct. Position x is not forbidden.",
        "1243": "You are given an array of n integers, nums, where there are at most 50 unique values in the array. You are also given an array of m customer order quantities, quantity, where quantity[i] is the amount of integers the ith customer ordered. Determine if it is possible to distribute nums such that: The ith customer gets exactly quantity[i] integers, The integers the ith customer gets are all equal, and Every customer is satisfied. Return true if it is possible to distribute nums according to the above conditions.   Example 1: Input: nums = [1,2,3,4], quantity = [2] Output: false Explanation: The 0th customer cannot be given two different integers. Example 2: Input: nums = [1,2,3,3], quantity = [2] Output: true Explanation: The 0th customer is given [3,3]. The integers [1,2] are not used. Example 3: Input: nums = [1,1,2,2], quantity = [2,2] Output: true Explanation: The 0th customer is given [1,1], and the 1st customer is given [2,2].   Constraints: n == nums.length 1 <= n <= 105 1 <= nums[i] <= 1000 m == quantity.length 1 <= m <= 10 1 <= quantity[i] <= 105 There are at most 50 unique values in nums.",
        "1244": "There is a stream of n (idKey, value) pairs arriving in an arbitrary order, where idKey is an integer between 1 and n and value is a string. No two pairs have the same id. Design a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. The concatenation of all the chunks should result in a list of the sorted values. Implement the OrderedStream class: OrderedStream(int n) Constructs the stream to take n values. String[] insert(int idKey, String value) Inserts the pair (idKey, value) into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order.   Example: Input [\"OrderedStream\", \"insert\", \"insert\", \"insert\", \"insert\", \"insert\"] [[5], [3, \"ccccc\"], [1, \"aaaaa\"], [2, \"bbbbb\"], [5, \"eeeee\"], [4, \"ddddd\"]] Output [null, [], [\"aaaaa\"], [\"bbbbb\", \"ccccc\"], [], [\"ddddd\", \"eeeee\"]]  Explanation // Note that the values ordered by ID is [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"]. OrderedStream os = new OrderedStream(5); os.insert(3, \"ccccc\"); // Inserts (3, \"ccccc\"), returns []. os.insert(1, \"aaaaa\"); // Inserts (1, \"aaaaa\"), returns [\"aaaaa\"]. os.insert(2, \"bbbbb\"); // Inserts (2, \"bbbbb\"), returns [\"bbbbb\", \"ccccc\"]. os.insert(5, \"eeeee\"); // Inserts (5, \"eeeee\"), returns []. os.insert(4, \"ddddd\"); // Inserts (4, \"ddddd\"), returns [\"ddddd\", \"eeeee\"]. // Concatentating all the chunks returned: // [] + [\"aaaaa\"] + [\"bbbbb\", \"ccccc\"] + [] + [\"ddddd\", \"eeeee\"] = [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"] // The resulting order is the same as the order above.   Constraints: 1 <= n <= 1000 1 <= id <= n value.length == 5 value consists only of lowercase letters. Each call to insert will have a unique id. Exactly n calls will be made to insert.",
        "1245": "Two strings are considered close if you can attain one from the other using the following operations: Operation 1: Swap any two existing characters. For example, abcde -> aecdb Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character. For example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's) You can use the operations on either string as many times as necessary. Given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.   Example 1: Input: word1 = \"abc\", word2 = \"bca\" Output: true Explanation: You can attain word2 from word1 in 2 operations. Apply Operation 1: \"abc\" -> \"acb\" Apply Operation 1: \"acb\" -> \"bca\" Example 2: Input: word1 = \"a\", word2 = \"aa\" Output: false Explanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations. Example 3: Input: word1 = \"cabbba\", word2 = \"abbccc\" Output: true Explanation: You can attain word2 from word1 in 3 operations. Apply Operation 1: \"cabbba\" -> \"caabbb\" Apply Operation 2: \"caabbb\" -> \"baaccc\" Apply Operation 2: \"baaccc\" -> \"abbccc\"   Constraints: 1 <= word1.length, word2.length <= 105 word1 and word2 contain only lowercase English letters.",
        "1246": "",
        "1247": "You are given four integers, m, n, introvertsCount, and extrovertsCount. You have an m x n grid, and there are two types of people: introverts and extroverts. There are introvertsCount introverts and extrovertsCount extroverts. You should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you do not have to have all the people living in the grid. The happiness of each person is calculated as follows: Introverts start with 120 happiness and lose 30 happiness for each neighbor (introvert or extrovert). Extroverts start with 40 happiness and gain 20 happiness for each neighbor (introvert or extrovert). Neighbors live in the directly adjacent cells north, east, south, and west of a person's cell. The grid happiness is the sum of each person's happiness. Return the maximum possible grid happiness.   Example 1: Input: m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2 Output: 240 Explanation: Assume the grid is 1-indexed with coordinates (row, column). We can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3). - Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120 - Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60 - Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60 The grid happiness is 120 + 60 + 60 = 240. The above figure shows the grid in this example with each person's happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells. Example 2: Input: m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1 Output: 260 Explanation: Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1). - Introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90 - Extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80 - Introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90 The grid happiness is 90 + 80 + 90 = 260. Example 3: Input: m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0 Output: 240   Constraints: 1 <= m, n <= 5 0 <= introvertsCount, extrovertsCount <= min(m * n, 6)",
        "1248": "SQL Schema Pandas Schema",
        "1249": "Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise. A string is represented by an array if the array elements concatenated in order forms the string.   Example 1: Input: word1 = [\"ab\", \"c\"], word2 = [\"a\", \"bc\"] Output: true Explanation: word1 represents string \"ab\" + \"c\" -> \"abc\" word2 represents string \"a\" + \"bc\" -> \"abc\" The strings are the same, so return true. Example 2: Input: word1 = [\"a\", \"cb\"], word2 = [\"ab\", \"c\"] Output: false Example 3: Input: word1  = [\"abc\", \"d\", \"defg\"], word2 = [\"abcddefg\"] Output: true   Constraints: 1 <= word1.length, word2.length <= 103 1 <= word1[i].length, word2[i].length <= 103 1 <= sum(word1[i].length), sum(word2[i].length) <= 103 word1[i] and word2[i] consist of lowercase letters.",
        "1250": "The numeric value of a lowercase character is defined as its position (1-indexed) in the alphabet, so the numeric value of a is 1, the numeric value of b is 2, the numeric value of c is 3, and so on. The numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string \"abe\" is equal to 1 + 2 + 5 = 8. You are given two integers n and k. Return the lexicographically smallest string with length equal to n and numeric value equal to k. Note that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.   Example 1: Input: n = 3, k = 27 Output: \"aay\" Explanation: The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3. Example 2: Input: n = 5, k = 73 Output: \"aaszz\"   Constraints: 1 <= n <= 105 n <= k <= 26 * n",
        "1251": "You are given an integer array nums. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal. For example, if nums = [6,1,7,4,1]: Choosing to remove index 1 results in nums = [6,7,4,1]. Choosing to remove index 2 results in nums = [6,1,4,1]. Choosing to remove index 4 results in nums = [6,1,7,4]. An array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values. Return the number of indices that you could choose such that after the removal, nums is fair.   Example 1: Input: nums = [2,1,6,4] Output: 1 Explanation: Remove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair. Remove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair. Remove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair. Remove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair. There is 1 index that you can remove to make nums fair. Example 2: Input: nums = [1,1,1] Output: 3 Explanation: You can remove any index and the remaining array is fair. Example 3: Input: nums = [1,2,3] Output: 0 Explanation: You cannot make a fair array after removing any index.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 104",
        "1252": "",
        "1253": "SQL Schema Pandas Schema",
        "1254": "For a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. The word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. If word is not a substring of sequence, word's maximum k-repeating value is 0. Given strings sequence and word, return the maximum k-repeating value of word in sequence.   Example 1: Input: sequence = \"ababc\", word = \"ab\" Output: 2 Explanation: \"abab\" is a substring in \"ababc\". Example 2: Input: sequence = \"ababc\", word = \"ba\" Output: 1 Explanation: \"ba\" is a substring in \"ababc\". \"baba\" is not a substring in \"ababc\". Example 3: Input: sequence = \"ababc\", word = \"ac\" Output: 0 Explanation: \"ac\" is not a substring in \"ababc\".    Constraints: 1 <= sequence.length <= 100 1 <= word.length <= 100 sequence and word contains only lowercase English letters.",
        "1255": "You are given two linked lists: list1 and list2 of sizes n and m respectively. Remove list1's nodes from the ath node to the bth node, and put list2 in their place. The blue edges and nodes in the following figure indicate the result: Build the result list and return its head.   Example 1: Input: list1 = [10,1,13,6,9,5], a = 3, b = 4, list2 = [1000000,1000001,1000002] Output: [10,1,13,1000000,1000001,1000002,5] Explanation: We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result. Example 2: Input: list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004] Output: [0,1,1000000,1000001,1000002,1000003,1000004,6] Explanation: The blue edges and nodes in the above figure indicate the result.   Constraints: 3 <= list1.length <= 104 1 <= a <= b < list1.length - 1 1 <= list2.length <= 104",
        "1256": "Design a queue that supports push and pop operations in the front, middle, and back. Implement the FrontMiddleBack class: FrontMiddleBack() Initializes the queue. void pushFront(int val) Adds val to the front of the queue. void pushMiddle(int val) Adds val to the middle of the queue. void pushBack(int val) Adds val to the back of the queue. int popFront() Removes the front element of the queue and returns it. If the queue is empty, return -1. int popMiddle() Removes the middle element of the queue and returns it. If the queue is empty, return -1. int popBack() Removes the back element of the queue and returns it. If the queue is empty, return -1. Notice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. For example: Pushing 6 into the middle of [1, 2, 3, 4, 5] results in [1, 2, 6, 3, 4, 5]. Popping the middle from [1, 2, 3, 4, 5, 6] returns 3 and results in [1, 2, 4, 5, 6].   Example 1: Input: [\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"] [[], [1], [2], [3], [4], [], [], [], [], []] Output: [null, null, null, null, null, 1, 3, 4, 2, -1]  Explanation: FrontMiddleBackQueue q = new FrontMiddleBackQueue(); q.pushFront(1);   // [1] q.pushBack(2);    // [1, 2] q.pushMiddle(3);  // [1, 3, 2] q.pushMiddle(4);  // [1, 4, 3, 2] q.popFront();     // return 1 -> [4, 3, 2] q.popMiddle();    // return 3 -> [4, 2] q.popMiddle();    // return 4 -> [2] q.popBack();      // return 2 -> [] q.popFront();     // return -1 -> [] (The queue is empty)   Constraints: 1 <= val <= 109 At most 1000 calls will be made to pushFront, pushMiddle, pushBack, popFront, popMiddle, and popBack.",
        "1257": "You may recall that an array arr is a mountain array if and only if: arr.length >= 3 There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that: arr[0] < arr[1] < ... < arr[i - 1] < arr[i] arr[i] > arr[i + 1] > ... > arr[arr.length - 1] Given an integer array nums, return the minimum number of elements to remove to make nums a mountain array.   Example 1: Input: nums = [1,3,1] Output: 0 Explanation: The array itself is a mountain array so we do not need to remove any elements. Example 2: Input: nums = [2,1,1,5,6,2,3,1] Output: 3 Explanation: One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].   Constraints: 3 <= nums.length <= 1000 1 <= nums[i] <= 109 It is guaranteed that you can make a mountain array out of nums.",
        "1258": "You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the ith customer has in the jth bank. Return the wealth that the richest customer has. A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.   Example 1: Input: accounts = [[1,2,3],[3,2,1]] Output: 6 Explanation: 1st customer has wealth = 1 + 2 + 3 = 6 2nd customer has wealth = 3 + 2 + 1 = 6 Both customers are considered the richest with a wealth of 6 each, so return 6. Example 2: Input: accounts = [[1,5],[7,3],[3,5]] Output: 10 Explanation:  1st customer has wealth = 6 2nd customer has wealth = 10  3rd customer has wealth = 8 The 2nd customer is the richest with a wealth of 10. Example 3: Input: accounts = [[2,8,7],[7,1,3],[1,9,5]] Output: 17   Constraints: m == accounts.length n == accounts[i].length 1 <= m, n <= 50 1 <= accounts[i][j] <= 100",
        "1259": "Given an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k. An array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array. We define that a subsequence a is more competitive than a subsequence b (of the same length) if in the first position where a and b differ, subsequence a has a number less than the corresponding number in b. For example, [1,3,4] is more competitive than [1,3,5] because the first position they differ is at the final number, and 4 is less than 5.   Example 1: Input: nums = [3,5,2,6], k = 2 Output: [2,6] Explanation: Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive. Example 2: Input: nums = [2,4,3,3,5,4,9,6], k = 4 Output: [2,3,3,4]   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109 1 <= k <= nums.length",
        "1260": "You are given an integer array nums of even length n and an integer limit. In one move, you can replace any integer from nums with another integer between 1 and limit, inclusive. The array nums is complementary if for all indices i (0-indexed), nums[i] + nums[n - 1 - i] equals the same number. For example, the array [1,2,3,4] is complementary because for all indices i, nums[i] + nums[n - 1 - i] = 5. Return the minimum number of moves required to make nums complementary.   Example 1: Input: nums = [1,2,4,3], limit = 4 Output: 1 Explanation: In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed). nums[0] + nums[3] = 1 + 3 = 4. nums[1] + nums[2] = 2 + 2 = 4. nums[2] + nums[1] = 2 + 2 = 4. nums[3] + nums[0] = 3 + 1 = 4. Therefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary. Example 2: Input: nums = [1,2,2,1], limit = 2 Output: 2 Explanation: In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit. Example 3: Input: nums = [1,2,1,2], limit = 2 Output: 0 Explanation: nums is already complementary.   Constraints: n == nums.length 2 <= n <= 105 1 <= nums[i] <= limit <= 105 n is even.",
        "1261": "You are given an array nums of n positive integers. You can perform two types of operations on any element of the array any number of times: If the element is even, divide it by 2. For example, if the array is [1,2,3,4], then you can do this operation on the last element, and the array will be [1,2,3,2]. If the element is odd, multiply it by 2. For example, if the array is [1,2,3,4], then you can do this operation on the first element, and the array will be [2,2,3,4]. The deviation of the array is the maximum difference between any two elements in the array. Return the minimum deviation the array can have after performing some number of operations.   Example 1: Input: nums = [1,2,3,4] Output: 1 Explanation: You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1. Example 2: Input: nums = [4,1,5,20,3] Output: 3 Explanation: You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3. Example 3: Input: nums = [2,10,8] Output: 3   Constraints: n == nums.length 2 <= n <= 5 * 104 1 <= nums[i] <= 109",
        "1262": "You own a Goal Parser that can interpret a string command. The command consists of an alphabet of \"G\", \"()\" and/or \"(al)\" in some order. The Goal Parser will interpret \"G\" as the string \"G\", \"()\" as the string \"o\", and \"(al)\" as the string \"al\". The interpreted strings are then concatenated in the original order. Given the string command, return the Goal Parser's interpretation of command.   Example 1: Input: command = \"G()(al)\" Output: \"Goal\" Explanation: The Goal Parser interprets the command as follows: G -> G () -> o (al) -> al The final concatenated result is \"Goal\". Example 2: Input: command = \"G()()()()(al)\" Output: \"Gooooal\" Example 3: Input: command = \"(al)G(al)()()G\" Output: \"alGalooG\"   Constraints: 1 <= command.length <= 100 command consists of \"G\", \"()\", and/or \"(al)\" in some order.",
        "1263": "You are given an integer array nums and an integer k. In one operation, you can pick two numbers from the array whose sum equals k and remove them from the array. Return the maximum number of operations you can perform on the array.   Example 1: Input: nums = [1,2,3,4], k = 5 Output: 2 Explanation: Starting with nums = [1,2,3,4]: - Remove numbers 1 and 4, then nums = [2,3] - Remove numbers 2 and 3, then nums = [] There are no more pairs that sum up to 5, hence a total of 2 operations. Example 2: Input: nums = [3,1,3,4,3], k = 6 Output: 1 Explanation: Starting with nums = [3,1,3,4,3]: - Remove the first two 3's, then nums = [1,4,3] There are no more pairs that sum up to 6, hence a total of 1 operation.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 1 <= k <= 109",
        "1264": "Given an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 109 + 7.   Example 1: Input: n = 1 Output: 1 Explanation: \"1\" in binary corresponds to the decimal value 1.  Example 2: Input: n = 3 Output: 27 Explanation: In binary, 1, 2, and 3 corresponds to \"1\", \"10\", and \"11\". After concatenating them, we have \"11011\", which corresponds to the decimal value 27. Example 3: Input: n = 12 Output: 505379714 Explanation: The concatenation results in \"1101110010111011110001001101010111100\". The decimal value of that is 118505380540. After modulo 109 + 7, the result is 505379714.   Constraints: 1 <= n <= 105",
        "1265": "You are given an integer array nums and an integer k. You are asked to distribute this array into k subsets of equal size such that there are no two equal elements in the same subset. A subset's incompatibility is the difference between the maximum and minimum elements in that array. Return the minimum possible sum of incompatibilities of the k subsets after distributing the array optimally, or return -1 if it is not possible. A subset is a group integers that appear in the array with no particular order.   Example 1: Input: nums = [1,2,1,4], k = 2 Output: 4 Explanation: The optimal distribution of subsets is [1,2] and [1,4]. The incompatibility is (2-1) + (4-1) = 4. Note that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements. Example 2: Input: nums = [6,3,8,1,3,1,2,2], k = 4 Output: 6 Explanation: The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3]. The incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6. Example 3: Input: nums = [5,3,3,6,3,3], k = 3 Output: -1 Explanation: It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset.   Constraints: 1 <= k <= nums.length <= 16 nums.length is divisible by k 1 <= nums[i] <= nums.length",
        "1266": "SQL Schema Pandas Schema",
        "1267": "You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed. Return the number of consistent strings in the array words.   Example 1: Input: allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"] Output: 2 Explanation: Strings \"aaab\" and \"baa\" are consistent since they only contain characters 'a' and 'b'. Example 2: Input: allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"] Output: 7 Explanation: All strings are consistent. Example 3: Input: allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"] Output: 4 Explanation: Strings \"cc\", \"acd\", \"ac\", and \"d\" are consistent.   Constraints: 1 <= words.length <= 104 1 <= allowed.length <= 26 1 <= words[i].length <= 10 The characters in allowed are distinct. words[i] and allowed contain only lowercase English letters.",
        "1268": "You are given an integer array nums sorted in non-decreasing order. Build and return an integer array result with the same length as nums such that result[i] is equal to the summation of absolute differences between nums[i] and all the other elements in the array. In other words, result[i] is equal to sum(|nums[i]-nums[j]|) where 0 <= j < nums.length and j != i (0-indexed).   Example 1: Input: nums = [2,3,5] Output: [4,3,5] Explanation: Assuming the arrays are 0-indexed, then result[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4, result[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3, result[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5. Example 2: Input: nums = [1,4,6,8,10] Output: [24,15,13,15,21]   Constraints: 2 <= nums.length <= 105 1 <= nums[i] <= nums[i + 1] <= 104",
        "1269": "Alice and Bob take turns playing a game, with Alice starting first. There are n stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently. You are given two integer arrays of length n, aliceValues and bobValues. Each aliceValues[i] and bobValues[i] represents how Alice and Bob, respectively, value the ith stone. The winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play optimally. Both players know the other's values. Determine the result of the game, and: If Alice wins, return 1. If Bob wins, return -1. If the game results in a draw, return 0.   Example 1: Input: aliceValues = [1,3], bobValues = [2,1] Output: 1 Explanation: If Alice takes stone 1 (0-indexed) first, Alice will receive 3 points. Bob can only choose stone 0, and will only receive 2 points. Alice wins. Example 2: Input: aliceValues = [1,2], bobValues = [3,1] Output: 0 Explanation: If Alice takes stone 0, and Bob takes stone 1, they will both have 1 point. Draw. Example 3: Input: aliceValues = [2,4,3], bobValues = [1,6,7] Output: -1 Explanation: Regardless of how Alice plays, Bob will be able to have more points than Alice. For example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7. Bob wins.   Constraints: n == aliceValues.length == bobValues.length 1 <= n <= 105 1 <= aliceValues[i], bobValues[i] <= 100",
        "1270": "You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a limit on the number of boxes and the total weight that it can carry. You are given an array boxes, where boxes[i] = [portsi, weighti], and three integers portsCount, maxBoxes, and maxWeight. portsi is the port where you need to deliver the ith box and weightsi is the weight of the ith box. portsCount is the number of ports. maxBoxes and maxWeight are the respective box and weight limits of the ship. The boxes need to be delivered in the order they are given. The ship will follow these steps: The ship will take some number of boxes from the boxes queue, not violating the maxBoxes and maxWeight constraints. For each loaded box in order, the ship will make a trip to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no trip is needed, and the box can immediately be delivered. The ship then makes a return trip to storage to take more boxes from the queue. The ship must end at storage after all the boxes have been delivered. Return the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.   Example 1: Input: boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3 Output: 4 Explanation: The optimal strategy is as follows:  - The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips. So the total number of trips is 4. Note that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box). Example 2: Input: boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6 Output: 6 Explanation: The optimal strategy is as follows:  - The ship takes the first box, goes to port 1, then returns to storage. 2 trips. - The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips. - The ship takes the fifth box, goes to port 2, then returns to storage. 2 trips. So the total number of trips is 2 + 2 + 2 = 6. Example 3: Input: boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7 Output: 6 Explanation: The optimal strategy is as follows: - The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips. - The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips. - The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips. So the total number of trips is 2 + 2 + 2 = 6.   Constraints: 1 <= boxes.length <= 105 1 <= portsCount, maxBoxes, maxWeight <= 105 1 <= portsi <= portsCount 1 <= weightsi <= maxWeight",
        "1271": "You are given an integer n, the number of teams in a tournament that has strange rules: If the current number of teams is even, each team gets paired with another team. A total of n / 2 matches are played, and n / 2 teams advance to the next round. If the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. A total of (n - 1) / 2 matches are played, and (n - 1) / 2 + 1 teams advance to the next round. Return the number of matches played in the tournament until a winner is decided.   Example 1: Input: n = 7 Output: 6 Explanation: Details of the tournament:  - 1st Round: Teams = 7, Matches = 3, and 4 teams advance. - 2nd Round: Teams = 4, Matches = 2, and 2 teams advance. - 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner. Total number of matches = 3 + 2 + 1 = 6. Example 2: Input: n = 14 Output: 13 Explanation: Details of the tournament: - 1st Round: Teams = 14, Matches = 7, and 7 teams advance. - 2nd Round: Teams = 7, Matches = 3, and 4 teams advance. - 3rd Round: Teams = 4, Matches = 2, and 2 teams advance. - 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner. Total number of matches = 7 + 3 + 2 + 1 = 13.   Constraints: 1 <= n <= 200",
        "1272": "A decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. For example, 101 and 1100 are deci-binary, while 112 and 3001 are not. Given a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to n.   Example 1: Input: n = \"32\" Output: 3 Explanation: 10 + 11 + 11 = 32 Example 2: Input: n = \"82734\" Output: 8 Example 3: Input: n = \"27346209830709182346\" Output: 9   Constraints: 1 <= n.length <= 105 n consists of only digits. n does not contain any leading zeros and represents a positive integer.",
        "1273": "Alice and Bob take turns playing a game, with Alice starting first. There are n stones arranged in a row. On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove. Bob found that he will always lose this game (poor Bob, he always loses), so he decided to minimize the score's difference. Alice's goal is to maximize the difference in the score. Given an array of integers stones where stones[i] represents the value of the ith stone from the left, return the difference in Alice and Bob's score if they both play optimally.   Example 1: Input: stones = [5,3,1,4,2] Output: 6 Explanation:  - Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4]. - Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4]. - Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4]. - Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4]. - Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = []. The score difference is 18 - 12 = 6. Example 2: Input: stones = [7,90,5,1,100,10,10,2] Output: 122   Constraints: n == stones.length 2 <= n <= 1000 1 <= stones[i] <= 1000",
        "1274": "Given n cuboids where the dimensions of the ith cuboid is cuboids[i] = [widthi, lengthi, heighti] (0-indexed). Choose a subset of cuboids and place them on each other. You can place cuboid i on cuboid j if widthi <= widthj and lengthi <= lengthj and heighti <= heightj. You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid. Return the maximum height of the stacked cuboids.   Example 1: Input: cuboids = [[50,45,20],[95,37,53],[45,23,12]] Output: 190 Explanation: Cuboid 1 is placed on the bottom with the 53x37 side facing down with height 95. Cuboid 0 is placed next with the 45x20 side facing down with height 50. Cuboid 2 is placed next with the 23x12 side facing down with height 45. The total height is 95 + 50 + 45 = 190. Example 2: Input: cuboids = [[38,25,45],[76,35,3]] Output: 76 Explanation: You can't place any of the cuboids on the other. We choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76. Example 3: Input: cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]] Output: 102 Explanation: After rearranging the cuboids, you can see that all cuboids have the same dimension. You can place the 11x7 side down on all cuboids so their heights are 17. The maximum height of stacked cuboids is 6 * 17 = 102.   Constraints: n == cuboids.length 1 <= n <= 100 1 <= widthi, lengthi, heighti <= 100",
        "1275": "SQL Schema Pandas Schema",
        "1276": "You are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'. You would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows: 2 digits: A single block of length 2. 3 digits: A single block of length 3. 4 digits: Two blocks of length 2 each. The blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2. Return the phone number after formatting.   Example 1: Input: number = \"1-23-45 6\" Output: \"123-456\" Explanation: The digits are \"123456\". Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\". Step 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is \"456\". Joining the blocks gives \"123-456\". Example 2: Input: number = \"123 4-567\" Output: \"123-45-67\" Explanation: The digits are \"1234567\". Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\". Step 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are \"45\" and \"67\". Joining the blocks gives \"123-45-67\". Example 3: Input: number = \"123 4-5678\" Output: \"123-456-78\" Explanation: The digits are \"12345678\". Step 1: The 1st block is \"123\". Step 2: The 2nd block is \"456\". Step 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is \"78\". Joining the blocks gives \"123-456-78\".   Constraints: 2 <= number.length <= 100 number consists of digits and the characters '-' and ' '. There are at least two digits in number.",
        "1277": "You are given an array of positive integers nums and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements. Return the maximum score you can get by erasing exactly one subarray. An array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).   Example 1: Input: nums = [4,2,4,5,6] Output: 17 Explanation: The optimal subarray here is [2,4,5,6]. Example 2: Input: nums = [5,2,1,2,5,2,1,2,5] Output: 8 Explanation: The optimal subarray here is [5,2,1] or [1,2,5].   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 104",
        "1278": "You are given a 0-indexed integer array nums and an integer k. You are initially standing at index 0. In one move, you can jump at most k steps forward without going outside the boundaries of the array. That is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive. You want to reach the last index of the array (index n - 1). Your score is the sum of all nums[j] for each index j you visited in the array. Return the maximum score you can get.   Example 1: Input: nums = [1,-1,-2,4,-7,3], k = 2 Output: 7 Explanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7. Example 2: Input: nums = [10,-5,-2,4,0,3], k = 3 Output: 17 Explanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17. Example 3: Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2 Output: 0   Constraints: 1 <= nums.length, k <= 105 -104 <= nums[i] <= 104",
        "1279": "The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. All students stand in a queue. Each student either prefers square or circular sandwiches. The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step: If the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue. Otherwise, they will leave it and go to the queue's end. This continues until none of the queue students want to take the top sandwich and are thus unable to eat. You are given two integer arrays students and sandwiches where sandwiches[i] is the type of the ith sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the jth student in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.   Example 1: Input: students = [1,1,0,0], sandwiches = [0,1,0,1] Output: 0  Explanation: - Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1]. - Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1]. - Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1]. - Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0]. - Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1]. - Front student leaves the top sandwich and returns to the end of the line making students = [0,1]. - Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1]. - Front student takes the top sandwich and leaves the line making students = [] and sandwiches = []. Hence all students are able to eat. Example 2: Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1] Output: 3   Constraints: 1 <= students.length, sandwiches.length <= 100 students.length == sandwiches.length sandwiches[i] is 0 or 1. students[i] is 0 or 1.",
        "1280": "There is a restaurant with a single chef. You are given an array customers, where customers[i] = [arrivali, timei]: arrivali is the arrival time of the ith customer. The arrival times are sorted in non-decreasing order. timei is the time needed to prepare the order of the ith customer. When a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers in the order they were given in the input. Return the average waiting time of all customers. Solutions within 10-5 from the actual answer are considered accepted.   Example 1: Input: customers = [[1,2],[2,5],[4,3]] Output: 5.00000 Explanation: 1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2. 2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6. 3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7. So the average waiting time = (2 + 6 + 7) / 3 = 5. Example 2: Input: customers = [[5,2],[5,4],[10,3],[20,1]] Output: 3.25000 Explanation: 1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2. 2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6. 3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4. 4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1. So the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25.   Constraints: 1 <= customers.length <= 105 1 <= arrivali, timei <= 104 arrivali <= arrivali+1",
        "1281": "You are given a binary string binary consisting of only 0's or 1's. You can apply each of the following operations any number of times: Operation 1: If the number contains the substring \"00\", you can replace it with \"10\". For example, \"00010\" -> \"10010\" Operation 2: If the number contains the substring \"10\", you can replace it with \"01\". For example, \"00010\" -> \"00001\" Return the maximum binary string you can obtain after any number of operations. Binary string x is greater than binary string y if x's decimal representation is greater than y's decimal representation.   Example 1: Input: binary = \"000110\" Output: \"111011\" Explanation: A valid transformation sequence can be: \"000110\" -> \"000101\"  \"000101\" -> \"100101\"  \"100101\" -> \"110101\"  \"110101\" -> \"110011\"  \"110011\" -> \"111011\" Example 2: Input: binary = \"01\" Output: \"01\" Explanation: \"01\" cannot be transformed any further.   Constraints: 1 <= binary.length <= 105 binary consist of '0' and '1'.",
        "1282": "You are given an integer array, nums, and an integer k. nums comprises of only 0's and 1's. In one move, you can choose two adjacent indices and swap their values. Return the minimum number of moves required so that nums has k consecutive 1's.   Example 1: Input: nums = [1,0,0,1,0,1], k = 2 Output: 1 Explanation: In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's. Example 2: Input: nums = [1,0,0,0,0,0,1,1], k = 3 Output: 5 Explanation: In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1]. Example 3: Input: nums = [1,1,0,1], k = 2 Output: 0 Explanation: nums already has 2 consecutive 1's.   Constraints: 1 <= nums.length <= 105 nums[i] is 0 or 1. 1 <= k <= sum(nums)",
        "1283": "You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half. Two strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and lowercase letters. Return true if a and b are alike. Otherwise, return false.   Example 1: Input: s = \"book\" Output: true Explanation: a = \"bo\" and b = \"ok\". a has 1 vowel and b has 1 vowel. Therefore, they are alike. Example 2: Input: s = \"textbook\" Output: false Explanation: a = \"text\" and b = \"book\". a has 1 vowel whereas b has 2. Therefore, they are not alike. Notice that the vowel o is counted twice.   Constraints: 2 <= s.length <= 1000 s.length is even. s consists of uppercase and lowercase letters.",
        "1284": "There is a special kind of apple tree that grows apples every day for n days. On the ith day, the tree grows apples[i] apples that will rot after days[i] days, that is on day i + days[i] the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by apples[i] == 0 and days[i] == 0. You decided to eat at most one apple a day (to keep the doctors away). Note that you can keep eating after the first n days. Given two integer arrays days and apples of length n, return the maximum number of apples you can eat.   Example 1: Input: apples = [1,2,3,5,2], days = [3,2,1,4,2] Output: 7 Explanation: You can eat 7 apples: - On the first day, you eat an apple that grew on the first day. - On the second day, you eat an apple that grew on the second day. - On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot. - On the fourth to the seventh days, you eat apples that grew on the fourth day. Example 2: Input: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2] Output: 5 Explanation: You can eat 5 apples: - On the first to the third day you eat apples that grew on the first day. - Do nothing on the fouth and fifth days. - On the sixth and seventh days you eat apples that grew on the sixth day.   Constraints: n == apples.length == days.length 1 <= n <= 2 * 104 0 <= apples[i], days[i] <= 2 * 104 days[i] = 0 if and only if apples[i] = 0.",
        "1285": "You have a 2-D grid of size m x n representing a box, and you have n balls. The box is open on the top and bottom sides. Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left. A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1. A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1. We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a \"V\" shaped pattern between two boards or if a board redirects the ball into either wall of the box. Return an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 if the ball gets stuck in the box.   Example 1: Input: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]] Output: [1,-1,-1,-1,-1] Explanation: This example is shown in the photo. Ball b0 is dropped at column 0 and falls out of the box at column 1. Ball b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1. Ball b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0. Ball b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0. Ball b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1. Example 2: Input: grid = [[-1]] Output: [-1] Explanation: The ball gets stuck against the left wall. Example 3: Input: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]] Output: [0,1,2,3,4,-1]   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 100 grid[i][j] is 1 or -1.",
        "1286": "You are given an array nums consisting of non-negative integers. You are also given a queries array, where queries[i] = [xi, mi]. The answer to the ith query is the maximum bitwise XOR value of xi and any element of nums that does not exceed mi. In other words, the answer is max(nums[j] XOR xi) for all j such that nums[j] <= mi. If all elements in nums are larger than mi, then the answer is -1. Return an integer array answer where answer.length == queries.length and answer[i] is the answer to the ith query.   Example 1: Input: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]] Output: [3,3,7] Explanation: 1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3. 2) 1 XOR 2 = 3. 3) 5 XOR 2 = 7. Example 2: Input: nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]] Output: [15,-1,5]   Constraints: 1 <= nums.length, queries.length <= 105 queries[i].length == 2 0 <= nums[j], xi, mi <= 109",
        "1287": "You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]: numberOfBoxesi is the number of boxes of type i. numberOfUnitsPerBoxi is the number of units in each box of the type i. You are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed truckSize. Return the maximum total number of units that can be put on the truck.   Example 1: Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4 Output: 8 Explanation: There are: - 1 box of the first type that contains 3 units. - 2 boxes of the second type that contain 2 units each. - 3 boxes of the third type that contain 1 unit each. You can take all the boxes of the first and second types, and one box of the third type. The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8. Example 2: Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10 Output: 91   Constraints: 1 <= boxTypes.length <= 1000 1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000 1 <= truckSize <= 106",
        "1288": "A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two. You can pick any two different foods to make a good meal. Given an array of integers deliciousness where deliciousness[i] is the deliciousness of the ith item of food, return the number of different good meals you can make from this list modulo 109 + 7. Note that items with different indices are considered different even if they have the same deliciousness value.   Example 1: Input: deliciousness = [1,3,5,7,9] Output: 4 Explanation: The good meals are (1,3), (1,7), (3,5) and, (7,9). Their respective sums are 4, 8, 8, and 16, all of which are powers of 2. Example 2: Input: deliciousness = [1,1,1,3,3,3,7] Output: 15 Explanation: The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.   Constraints: 1 <= deliciousness.length <= 105 0 <= deliciousness[i] <= 220",
        "1289": "A split of an integer array is good if: The array is split into three non-empty contiguous subarrays - named left, mid, right respectively from left to right. The sum of the elements in left is less than or equal to the sum of the elements in mid, and the sum of the elements in mid is less than or equal to the sum of the elements in right. Given nums, an array of non-negative integers, return the number of good ways to split nums. As the number may be too large, return it modulo 109 + 7.   Example 1: Input: nums = [1,1,1] Output: 1 Explanation: The only good way to split nums is [1] [1] [1]. Example 2: Input: nums = [1,2,2,2,5,0] Output: 3 Explanation: There are three good ways of splitting nums: [1] [2] [2,2,5,0] [1] [2,2] [2,5,0] [1,2] [2,2] [5,0] Example 3: Input: nums = [3,2,1] Output: 0 Explanation: There is no good way to split nums.   Constraints: 3 <= nums.length <= 105 0 <= nums[i] <= 104",
        "1290": "You are given an array target that consists of distinct integers and another integer array arr that can have duplicates. In one operation, you can insert any integer at any position in arr. For example, if arr = [1,4,1,2], you can add 3 in the middle and make it [1,4,3,1,2]. Note that you can insert the integer at the very beginning or end of the array. Return the minimum number of operations needed to make target a subsequence of arr. A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.   Example 1: Input: target = [5,1,3], arr = [9,4,2,3,4] Output: 2 Explanation: You can add 5 and 1 in such a way that makes arr = [5,9,4,1,2,3,4], then target will be a subsequence of arr. Example 2: Input: target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1] Output: 3   Constraints: 1 <= target.length, arr.length <= 105 1 <= target[i], arr[i] <= 109 target contains no duplicates.",
        "1291": "Hercy wants to save money for his first car. He puts money in the Leetcode bank every day. He starts by putting in $1 on Monday, the first day. Every day from Tuesday to Sunday, he will put in $1 more than the day before. On every subsequent Monday, he will put in $1 more than the previous Monday. Given n, return the total amount of money he will have in the Leetcode bank at the end of the nth day.   Example 1: Input: n = 4 Output: 10 Explanation: After the 4th day, the total is 1 + 2 + 3 + 4 = 10. Example 2: Input: n = 10 Output: 37 Explanation: After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2. Example 3: Input: n = 20 Output: 96 Explanation: After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.   Constraints: 1 <= n <= 1000",
        "1292": "You are given a string s and two integers x and y. You can perform two types of operations any number of times. Remove substring \"ab\" and gain x points. For example, when removing \"ab\" from \"cabxbae\" it becomes \"cxbae\". Remove substring \"ba\" and gain y points. For example, when removing \"ba\" from \"cabxbae\" it becomes \"cabxe\". Return the maximum points you can gain after applying the above operations on s.   Example 1: Input: s = \"cdbcbbaaabab\", x = 4, y = 5 Output: 19 Explanation: - Remove the \"ba\" underlined in \"cdbcbbaaabab\". Now, s = \"cdbcbbaaab\" and 5 points are added to the score. - Remove the \"ab\" underlined in \"cdbcbbaaab\". Now, s = \"cdbcbbaa\" and 4 points are added to the score. - Remove the \"ba\" underlined in \"cdbcbbaa\". Now, s = \"cdbcba\" and 5 points are added to the score. - Remove the \"ba\" underlined in \"cdbcba\". Now, s = \"cdbc\" and 5 points are added to the score. Total score = 5 + 4 + 5 + 5 = 19. Example 2: Input: s = \"aabbaaxybbaabb\", x = 5, y = 4 Output: 20   Constraints: 1 <= s.length <= 105 1 <= x, y <= 104 s consists of lowercase English letters.",
        "1293": "Given an integer n, find a sequence that satisfies all of the following: The integer 1 occurs once in the sequence. Each integer between 2 and n occurs twice in the sequence. For every integer i between 2 and n, the distance between the two occurrences of i is exactly i. The distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|. Return the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution. A sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. For example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.   Example 1: Input: n = 3 Output: [3,1,2,3,2] Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence. Example 2: Input: n = 5 Output: [5,3,1,4,3,5,2,4,2]   Constraints: 1 <= n <= 20",
        "1294": "You are given an array pairs, where pairs[i] = [xi, yi], and: There are no duplicates. xi < yi Let ways be the number of rooted trees that satisfy the following conditions: The tree consists of nodes whose values appeared in pairs. A pair [xi, yi] exists in pairs if and only if xi is an ancestor of yi or yi is an ancestor of xi. Note: the tree does not have to be a binary tree. Two ways are considered to be different if there is at least one node that has different parents in both ways. Return: 0 if ways == 0 1 if ways == 1 2 if ways > 1 A rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root. An ancestor of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.   Example 1: Input: pairs = [[1,2],[2,3]] Output: 1 Explanation: There is exactly one valid rooted tree, which is shown in the above figure. Example 2: Input: pairs = [[1,2],[2,3],[1,3]] Output: 2 Explanation: There are multiple valid rooted trees. Three of them are shown in the above figures. Example 3: Input: pairs = [[1,2],[2,3],[2,4],[1,5]] Output: 0 Explanation: There are no valid rooted trees.   Constraints: 1 <= pairs.length <= 105 1 <= xi < yi <= 500 The elements in pairs are unique.",
        "1295": "You are given the head of a linked list, and an integer k. Return the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end (the list is 1-indexed).   Example 1: Input: head = [1,2,3,4,5], k = 2 Output: [1,4,3,2,5] Example 2: Input: head = [7,9,6,6,7,8,3,0,9,5], k = 5 Output: [7,9,6,6,8,7,3,0,9,5]   Constraints: The number of nodes in the list is n. 1 <= k <= n <= 105 0 <= Node.val <= 100",
        "1296": "You are given two integer arrays, source and target, both of length n. You are also given an array allowedSwaps where each allowedSwaps[i] = [ai, bi] indicates that you are allowed to swap the elements at index ai and index bi (0-indexed) of array source. Note that you can swap elements at a specific pair of indices multiple times and in any order. The Hamming distance of two arrays of the same length, source and target, is the number of positions where the elements are different. Formally, it is the number of indices i for 0 <= i <= n-1 where source[i] != target[i] (0-indexed). Return the minimum Hamming distance of source and target after performing any amount of swap operations on array source.   Example 1: Input: source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]] Output: 1 Explanation: source can be transformed the following way: - Swap indices 0 and 1: source = [2,1,3,4] - Swap indices 2 and 3: source = [2,1,4,3] The Hamming distance of source and target is 1 as they differ in 1 position: index 3. Example 2: Input: source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = [] Output: 2 Explanation: There are no allowed swaps. The Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2. Example 3: Input: source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]] Output: 0   Constraints: n == source.length == target.length 1 <= n <= 105 1 <= source[i], target[i] <= 105 0 <= allowedSwaps.length <= 105 allowedSwaps[i].length == 2 0 <= ai, bi <= n - 1 ai != bi",
        "1297": "You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job. There are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized. Return the minimum possible maximum working time of any assignment.   Example 1: Input: jobs = [3,2,3], k = 3 Output: 3 Explanation: By assigning each person one job, the maximum time is 3. Example 2: Input: jobs = [1,2,4,7,8], k = 2 Output: 11 Explanation: Assign the jobs the following way: Worker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11) Worker 2: 4, 7 (working time = 4 + 7 = 11) The maximum working time is 11.   Constraints: 1 <= k <= jobs.length <= 12 1 <= jobs[i] <= 107",
        "1298": "You are given an array rectangles where rectangles[i] = [li, wi] represents the ith rectangle of length li and width wi. You can cut the ith rectangle to form a square with a side length of k if both k <= li and k <= wi. For example, if you have a rectangle [4,6], you can cut it to get a square with a side length of at most 4. Let maxLen be the side length of the largest square you can obtain from any of the given rectangles. Return the number of rectangles that can make a square with a side length of maxLen.   Example 1: Input: rectangles = [[5,8],[3,9],[5,12],[16,5]] Output: 3 Explanation: The largest squares you can get from each rectangle are of lengths [5,3,5,5]. The largest possible square is of length 5, and you can get it out of 3 rectangles. Example 2: Input: rectangles = [[2,3],[3,7],[4,3],[3,7]] Output: 3   Constraints: 1 <= rectangles.length <= 1000 rectangles[i].length == 2 1 <= li, wi <= 109 li != wi",
        "1299": "Given an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.   Example 1: Input: nums = [2,3,4,6] Output: 8 Explanation: There are 8 valid tuples: (2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3) (3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2) Example 2: Input: nums = [1,2,4,5,10] Output: 16 Explanation: There are 16 valid tuples: (1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2) (2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1) (2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4) (4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 104 All elements in nums are distinct.",
        "1300": "You are given a binary matrix matrix of size m x n, and you are allowed to rearrange the columns of the matrix in any order. Return the area of the largest submatrix within matrix where every element of the submatrix is 1 after reordering the columns optimally.   Example 1: Input: matrix = [[0,0,1],[1,1,1],[1,0,1]] Output: 4 Explanation: You can rearrange the columns as shown above. The largest submatrix of 1s, in bold, has an area of 4. Example 2: Input: matrix = [[1,0,1,0,1]] Output: 3 Explanation: You can rearrange the columns as shown above. The largest submatrix of 1s, in bold, has an area of 3. Example 3: Input: matrix = [[1,1,0],[1,0,1]] Output: 2 Explanation: Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.   Constraints: m == matrix.length n == matrix[i].length 1 <= m * n <= 105 matrix[i][j] is either 0 or 1.",
        "1301": "A game is played by a cat and a mouse named Cat and Mouse. The environment is represented by a grid of size rows x cols, where each element is a wall, floor, player (Cat, Mouse), or food. Players are represented by the characters 'C'(Cat),'M'(Mouse). Floors are represented by the character '.' and can be walked on. Walls are represented by the character '#' and cannot be walked on. Food is represented by the character 'F' and can be walked on. There is only one of each character 'C', 'M', and 'F' in grid. Mouse and Cat play according to the following rules: Mouse moves first, then they take turns to move. During each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the grid. catJump, mouseJump are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length. Staying in the same position is allowed. Mouse can jump over Cat. The game can end in 4 ways: If Cat occupies the same position as Mouse, Cat wins. If Cat reaches the food first, Cat wins. If Mouse reaches the food first, Mouse wins. If Mouse cannot get to the food within 1000 turns, Cat wins. Given a rows x cols matrix grid and two integers catJump and mouseJump, return true if Mouse can win the game if both Cat and Mouse play optimally, otherwise return false.   Example 1: Input: grid = [\"####F\",\"#C...\",\"M....\"], catJump = 1, mouseJump = 2 Output: true Explanation: Cat cannot catch Mouse on its turn nor can it get the food before Mouse. Example 2: Input: grid = [\"M.C...F\"], catJump = 1, mouseJump = 4 Output: true Example 3: Input: grid = [\"M.C...F\"], catJump = 1, mouseJump = 3 Output: false   Constraints: rows == grid.length cols = grid[i].length 1 <= rows, cols <= 8 grid[i][j] consist only of characters 'C', 'M', 'F', '.', and '#'. There is only one of each character 'C', 'M', and 'F' in grid. 1 <= catJump, mouseJump <= 8",
        "1302": "SQL Schema Pandas Schema",
        "1303": "SQL Schema Pandas Schema",
        "1304": "There is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0. You are given an integer array gain of length n where gain[i] is the net gain in altitude between points i and i + 1 for all (0 <= i < n). Return the highest altitude of a point.   Example 1: Input: gain = [-5,1,5,0,-7] Output: 1 Explanation: The altitudes are [0,-5,-4,1,1,-6]. The highest is 1. Example 2: Input: gain = [-4,-3,-2,-1,4,3,2] Output: 0 Explanation: The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.   Constraints: n == gain.length 1 <= n <= 100 -100 <= gain[i] <= 100",
        "1305": "On a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language. You are given an integer n, an array languages, and an array friendships where: There are n languages numbered 1 through n, languages[i] is the set of languages the ith user knows, and friendships[i] = [ui, vi] denotes a friendship between the users ui and vi. You can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach. Note that friendships are not transitive, meaning if x is a friend of y and y is a friend of z, this doesn't guarantee that x is a friend of z.   Example 1: Input: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]] Output: 1 Explanation: You can either teach user 1 the second language or user 2 the first language. Example 2: Input: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]] Output: 2 Explanation: Teach the third language to users 1 and 3, yielding two users to teach.   Constraints: 2 <= n <= 500 languages.length == m 1 <= m <= 500 1 <= languages[i].length <= n 1 <= languages[i][j] <= n 1 <= ui < vi <= languages.length 1 <= friendships.length <= 500 All tuples (ui, vi) are unique languages[i] contains only unique values",
        "1306": "There is an integer array perm that is a permutation of the first n positive integers, where n is always odd. It was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] XOR perm[i + 1]. For example, if perm = [1,3,2], then encoded = [2,1]. Given the encoded array, return the original array perm. It is guaranteed that the answer exists and is unique.   Example 1: Input: encoded = [3,1] Output: [1,2,3] Explanation: If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1] Example 2: Input: encoded = [6,5,4,6] Output: [2,4,1,5,3]   Constraints: 3 <= n < 105 n is odd. encoded.length == n - 1",
        "1307": "You are given a 2D integer array, queries. For each queries[i], where queries[i] = [ni, ki], find the number of different ways you can place positive integers into an array of size ni such that the product of the integers is ki. As the number of ways may be too large, the answer to the ith query is the number of ways modulo 109 + 7. Return an integer array answer where answer.length == queries.length, and answer[i] is the answer to the ith query.   Example 1: Input: queries = [[2,6],[5,1],[73,660]] Output: [4,1,50734910] Explanation: Each query is independent. [2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1]. [5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1]. [73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 109 + 7 = 50734910. Example 2: Input: queries = [[1,1],[2,2],[3,3],[4,4],[5,5]] Output: [1,2,3,10,5]   Constraints: 1 <= queries.length <= 104  1 <= ni, ki <= 104",
        "1308": "You are given a string time in the form of  hh:mm, where some of the digits in the string are hidden (represented by ?). The valid times are those inclusively between 00:00 and 23:59. Return the latest valid time you can get from time by replacing the hidden digits.   Example 1: Input: time = \"2?:?0\" Output: \"23:50\" Explanation: The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50. Example 2: Input: time = \"0?:3?\" Output: \"09:39\" Example 3: Input: time = \"1?:22\" Output: \"19:22\"   Constraints: time is in the format hh:mm. It is guaranteed that you can produce a valid time from the given string.",
        "1309": "You are given two strings a and b that consist of lowercase letters. In one operation, you can change any character in a or b to any lowercase letter. Your goal is to satisfy one of the following three conditions: Every letter in a is strictly less than every letter in b in the alphabet. Every letter in b is strictly less than every letter in a in the alphabet. Both a and b consist of only one distinct letter. Return the minimum number of operations needed to achieve your goal.   Example 1: Input: a = \"aba\", b = \"caa\" Output: 2 Explanation: Consider the best way to make each condition true: 1) Change b to \"ccc\" in 2 operations, then every letter in a is less than every letter in b. 2) Change a to \"bbb\" and b to \"aaa\" in 3 operations, then every letter in b is less than every letter in a. 3) Change a to \"aaa\" and b to \"aaa\" in 2 operations, then a and b consist of one distinct letter. The best way was done in 2 operations (either condition 1 or condition 3). Example 2: Input: a = \"dabadd\", b = \"cda\" Output: 3 Explanation: The best way is to make condition 1 true by changing b to \"eee\".   Constraints: 1 <= a.length, b.length <= 105 a and b consist only of lowercase letters.",
        "1310": "You are given a 2D matrix of size m x n, consisting of non-negative integers. You are also given an integer k. The value of coordinate (a, b) of the matrix is the XOR of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n (0-indexed). Find the kth largest value (1-indexed) of all the coordinates of matrix.   Example 1: Input: matrix = [[5,2],[1,6]], k = 1 Output: 7 Explanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value. Example 2: Input: matrix = [[5,2],[1,6]], k = 2 Output: 5 Explanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value. Example 3: Input: matrix = [[5,2],[1,6]], k = 3 Output: 4 Explanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.   Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 1000 0 <= matrix[i][j] <= 106 1 <= k <= m * n",
        "1311": "You have a cubic storeroom where the width, length, and height of the room are all equal to n units. You are asked to place n boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes: You can place the boxes anywhere on the floor. If box x is placed on top of the box y, then each side of the four vertical sides of the box y must either be adjacent to another box or to a wall. Given an integer n, return the minimum possible number of boxes touching the floor.   Example 1: Input: n = 3 Output: 3 Explanation: The figure above is for the placement of the three boxes. These boxes are placed in the corner of the room, where the corner is on the left side. Example 2: Input: n = 4 Output: 3 Explanation: The figure above is for the placement of the four boxes. These boxes are placed in the corner of the room, where the corner is on the left side. Example 3: Input: n = 10 Output: 6 Explanation: The figure above is for the placement of the ten boxes. These boxes are placed in the corner of the room, where the corner is on the back side.   Constraints: 1 <= n <= 109",
        "1312": "SQL Schema Pandas Schema",
        "1313": "You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity. Your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1. Given two integers lowLimit and highLimit, return the number of balls in the box with the most balls.   Example 1: Input: lowLimit = 1, highLimit = 10 Output: 2 Explanation: Box Number:  1 2 3 4 5 6 7 8 9 10 11 ... Ball Count:  2 1 1 1 1 1 1 1 1 0  0  ... Box 1 has the most number of balls with 2 balls. Example 2: Input: lowLimit = 5, highLimit = 15 Output: 2 Explanation: Box Number:  1 2 3 4 5 6 7 8 9 10 11 ... Ball Count:  1 1 1 1 2 2 1 1 1 0  0  ... Boxes 5 and 6 have the most number of balls with 2 balls in each. Example 3: Input: lowLimit = 19, highLimit = 28 Output: 2 Explanation: Box Number:  1 2 3 4 5 6 7 8 9 10 11 12 ... Ball Count:  0 1 1 1 1 1 1 1 1 2  0  0  ... Box 10 has the most number of balls with 2 balls.   Constraints: 1 <= lowLimit <= highLimit <= 105",
        "1314": "There is an integer array nums that consists of n unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in nums. You are given a 2D integer array adjacentPairs of size n - 1 where each adjacentPairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums. It is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentPairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. The pairs can appear in any order. Return the original array nums. If there are multiple solutions, return any of them.   Example 1: Input: adjacentPairs = [[2,1],[3,4],[3,2]] Output: [1,2,3,4] Explanation: This array has all its adjacent pairs in adjacentPairs. Notice that adjacentPairs[i] may not be in left-to-right order. Example 2: Input: adjacentPairs = [[4,-2],[1,4],[-3,1]] Output: [-2,4,1,-3] Explanation: There can be negative numbers. Another solution is [-3,1,4,-2], which would also be accepted. Example 3: Input: adjacentPairs = [[100000,-100000]] Output: [100000,-100000]   Constraints: nums.length == n adjacentPairs.length == n - 1 adjacentPairs[i].length == 2 2 <= n <= 105 -105 <= nums[i], ui, vi <= 105 There exists some nums that has adjacentPairs as its pairs.",
        "1315": "You are given a (0-indexed) array of positive integers candiesCount where candiesCount[i] represents the number of candies of the ith type you have. You are also given a 2D array queries where queries[i] = [favoriteTypei, favoriteDayi, dailyCapi]. You play a game with the following rules: You start eating candies on day 0. You cannot eat any candy of type i unless you have eaten all candies of type i - 1. You must eat at least one candy per day until you have eaten all the candies. Construct a boolean array answer such that answer.length == queries.length and answer[i] is true if you can eat a candy of type favoriteTypei on day favoriteDayi without eating more than dailyCapi candies on any day, and false otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2. Return the constructed array answer.   Example 1: Input: candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]] Output: [true,false,true] Explanation: 1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2. 2- You can eat at most 4 candies each day.    If you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.    On day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2. 3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13. Example 2: Input: candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]] Output: [false,true,true,false,false]   Constraints: 1 <= candiesCount.length <= 105 1 <= candiesCount[i] <= 105 1 <= queries.length <= 105 queries[i].length == 3 0 <= favoriteTypei < candiesCount.length 0 <= favoriteDayi <= 109 1 <= dailyCapi <= 109",
        "1316": "Given a string s, return true if it is possible to split the string s into three non-empty palindromic substrings. Otherwise, return false. A string is said to be palindrome if it the same string when reversed.   Example 1: Input: s = \"abcbdd\" Output: true Explanation: \"abcbdd\" = \"a\" + \"bcb\" + \"dd\", and all three substrings are palindromes. Example 2: Input: s = \"bcbddxy\" Output: false Explanation: s cannot be split into 3 palindromes.   Constraints: 3 <= s.length <= 2000 s consists only of lowercase English letters.",
        "1317": "You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array. Return the sum of all the unique elements of nums.   Example 1: Input: nums = [1,2,3,2] Output: 4 Explanation: The unique elements are [1,3], and the sum is 4. Example 2: Input: nums = [1,1,1,1,1] Output: 0 Explanation: There are no unique elements, and the sum is 0. Example 3: Input: nums = [1,2,3,4,5] Output: 15 Explanation: The unique elements are [1,2,3,4,5], and the sum is 15.   Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100",
        "1318": "You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr). Return the maximum absolute sum of any (possibly empty) subarray of nums. Note that abs(x) is defined as follows: If x is a negative integer, then abs(x) = -x. If x is a non-negative integer, then abs(x) = x.   Example 1: Input: nums = [1,-3,2,3,-4] Output: 5 Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5. Example 2: Input: nums = [2,-5,1,-4,3,-2] Output: 8 Explanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.   Constraints: 1 <= nums.length <= 105 -104 <= nums[i] <= 104",
        "1319": "Given a string s consisting only of characters 'a', 'b', and 'c'. You are asked to apply the following algorithm on the string any number of times: Pick a non-empty prefix from the string s where all the characters in the prefix are equal. Pick a non-empty suffix from the string s where all the characters in this suffix are equal. The prefix and the suffix should not intersect at any index. The characters from the prefix and suffix must be the same. Delete both the prefix and the suffix. Return the minimum length of s after performing the above operation any number of times (possibly zero times).   Example 1: Input: s = \"ca\" Output: 2 Explanation: You can't remove any characters, so the string stays as is. Example 2: Input: s = \"cabaabac\" Output: 0 Explanation: An optimal sequence of operations is: - Take prefix = \"c\" and suffix = \"c\" and remove them, s = \"abaaba\". - Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"baab\". - Take prefix = \"b\" and suffix = \"b\" and remove them, s = \"aa\". - Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"\". Example 3: Input: s = \"aabccabba\" Output: 3 Explanation: An optimal sequence of operations is: - Take prefix = \"aa\" and suffix = \"a\" and remove them, s = \"bccabb\". - Take prefix = \"b\" and suffix = \"bb\" and remove them, s = \"cca\".   Constraints: 1 <= s.length <= 105 s only consists of characters 'a', 'b', and 'c'.",
        "1320": "Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false. There may be duplicates in the original array. Note: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.length], where % is the modulo operation.   Example 1: Input: nums = [3,4,5,1,2] Output: true Explanation: [1,2,3,4,5] is the original sorted array. You can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2]. Example 2: Input: nums = [2,1,3,4] Output: false Explanation: There is no sorted array once rotated that can make nums. Example 3: Input: nums = [1,2,3] Output: true Explanation: [1,2,3] is the original sorted array. You can rotate the array by x = 0 positions (i.e. no rotation) to make nums.   Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100",
        "1321": "You are playing a solitaire game with three piles of stones of sizes a, b, and c respectively. Each turn you choose two different non-empty piles, take one stone from each, and add 1 point to your score. The game stops when there are fewer than two non-empty piles (meaning there are no more available moves). Given three integers a, b, and c, return the maximum score you can get.   Example 1: Input: a = 2, b = 4, c = 6 Output: 6 Explanation: The starting state is (2, 4, 6). One optimal set of moves is: - Take from 1st and 3rd piles, state is now (1, 4, 5) - Take from 1st and 3rd piles, state is now (0, 4, 4) - Take from 2nd and 3rd piles, state is now (0, 3, 3) - Take from 2nd and 3rd piles, state is now (0, 2, 2) - Take from 2nd and 3rd piles, state is now (0, 1, 1) - Take from 2nd and 3rd piles, state is now (0, 0, 0) There are fewer than two non-empty piles, so the game ends. Total: 6 points. Example 2: Input: a = 4, b = 4, c = 6 Output: 7 Explanation: The starting state is (4, 4, 6). One optimal set of moves is: - Take from 1st and 2nd piles, state is now (3, 3, 6) - Take from 1st and 3rd piles, state is now (2, 3, 5) - Take from 1st and 3rd piles, state is now (1, 3, 4) - Take from 1st and 3rd piles, state is now (0, 3, 3) - Take from 2nd and 3rd piles, state is now (0, 2, 2) - Take from 2nd and 3rd piles, state is now (0, 1, 1) - Take from 2nd and 3rd piles, state is now (0, 0, 0) There are fewer than two non-empty piles, so the game ends. Total: 7 points. Example 3: Input: a = 1, b = 8, c = 8 Output: 8 Explanation: One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty. After that, there are fewer than two non-empty piles, so the game ends.   Constraints: 1 <= a, b, c <= 105",
        "1322": "You are given two strings word1 and word2. You want to construct a string merge in the following way: while either word1 or word2 are non-empty, choose one of the following options: If word1 is non-empty, append the first character in word1 to merge and delete it from word1. For example, if word1 = \"abc\" and merge = \"dv\", then after choosing this operation, word1 = \"bc\" and merge = \"dva\". If word2 is non-empty, append the first character in word2 to merge and delete it from word2. For example, if word2 = \"abc\" and merge = \"\", then after choosing this operation, word2 = \"bc\" and merge = \"a\". Return the lexicographically largest merge you can construct. A string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. For example, \"abcd\" is lexicographically larger than \"abcc\" because the first position they differ is at the fourth character, and d is greater than c.   Example 1: Input: word1 = \"cabaa\", word2 = \"bcaaa\" Output: \"cbcabaaaaa\" Explanation: One way to get the lexicographically largest merge is: - Take from word1: merge = \"c\", word1 = \"abaa\", word2 = \"bcaaa\" - Take from word2: merge = \"cb\", word1 = \"abaa\", word2 = \"caaa\" - Take from word2: merge = \"cbc\", word1 = \"abaa\", word2 = \"aaa\" - Take from word1: merge = \"cbca\", word1 = \"baa\", word2 = \"aaa\" - Take from word1: merge = \"cbcab\", word1 = \"aa\", word2 = \"aaa\" - Append the remaining 5 a's from word1 and word2 at the end of merge. Example 2: Input: word1 = \"abcabc\", word2 = \"abdcaba\" Output: \"abdcabcabcaba\"   Constraints: 1 <= word1.length, word2.length <= 3000 word1 and word2 consist only of lowercase English letters.",
        "1323": "You are given an integer array nums and an integer goal. You want to choose a subsequence of nums such that the sum of its elements is the closest possible to goal. That is, if the sum of the subsequence's elements is sum, then you want to minimize the absolute difference abs(sum - goal). Return the minimum possible value of abs(sum - goal). Note that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.   Example 1: Input: nums = [5,-7,3,5], goal = 6 Output: 0 Explanation: Choose the whole array as a subsequence, with a sum of 6. This is equal to the goal, so the absolute difference is 0. Example 2: Input: nums = [7,-9,15,-2], goal = -5 Output: 1 Explanation: Choose the subsequence [7,-9,-2], with a sum of -4. The absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum. Example 3: Input: nums = [1,2,3], goal = -7 Output: 7   Constraints: 1 <= nums.length <= 40 -107 <= nums[i] <= 107 -109 <= goal <= 109",
        "1324": "SQL Schema Pandas Schema",
        "1325": "You are given a string s consisting only of the characters '0' and '1'. In one operation, you can change any '0' to '1' or vice versa. The string is called alternating if no two adjacent characters are equal. For example, the string \"010\" is alternating, while the string \"0100\" is not. Return the minimum number of operations needed to make s alternating.   Example 1: Input: s = \"0100\" Output: 1 Explanation: If you change the last character to '1', s will be \"0101\", which is alternating. Example 2: Input: s = \"10\" Output: 0 Explanation: s is already alternating. Example 3: Input: s = \"1111\" Output: 2 Explanation: You need two operations to reach \"0101\" or \"1010\".   Constraints: 1 <= s.length <= 104 s[i] is either '0' or '1'.",
        "1326": "Given a string s, return the number of homogenous substrings of s. Since the answer may be too large, return it modulo 109 + 7. A string is homogenous if all the characters of the string are the same. A substring is a contiguous sequence of characters within a string.   Example 1: Input: s = \"abbcccaa\" Output: 13 Explanation: The homogenous substrings are listed as below: \"a\"   appears 3 times. \"aa\"  appears 1 time. \"b\"   appears 2 times. \"bb\"  appears 1 time. \"c\"   appears 3 times. \"cc\"  appears 2 times. \"ccc\" appears 1 time. 3 + 1 + 2 + 1 + 3 + 2 + 1 = 13. Example 2: Input: s = \"xy\" Output: 2 Explanation: The homogenous substrings are \"x\" and \"y\". Example 3: Input: s = \"zzzzz\" Output: 15   Constraints: 1 <= s.length <= 105 s consists of lowercase letters.",
        "1327": "You are given an undirected graph. You are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi. A connected trio is a set of three nodes where there is an edge between every pair of them. The degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not. Return the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.   Example 1: Input: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]] Output: 3 Explanation: There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above. Example 2: Input: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]] Output: 0 Explanation: There are exactly three trios: 1) [1,4,3] with degree 0. 2) [2,5,6] with degree 2. 3) [5,6,7] with degree 2.   Constraints: 2 <= n <= 400 edges[i].length == 2 1 <= edges.length <= n * (n-1) / 2 1 <= ui, vi <= n ui != vi There are no repeated edges.",
        "1328": "A string s is nice if, for every letter of the alphabet that s contains, it appears both in uppercase and lowercase. For example, \"abABB\" is nice because 'A' and 'a' appear, and 'B' and 'b' appear. However, \"abA\" is not because 'b' appears, but 'B' does not. Given a string s, return the longest substring of s that is nice. If there are multiple, return the substring of the earliest occurrence. If there are none, return an empty string.   Example 1: Input: s = \"YazaAay\" Output: \"aAa\" Explanation: \"aAa\" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear. \"aAa\" is the longest nice substring. Example 2: Input: s = \"Bb\" Output: \"Bb\" Explanation: \"Bb\" is a nice string because both 'B' and 'b' appear. The whole string is a substring. Example 3: Input: s = \"c\" Output: \"\" Explanation: There are no nice substrings.   Constraints: 1 <= s.length <= 100 s consists of uppercase and lowercase English letters.",
        "1329": "You are given a 2D integer array groups of length n. You are also given an integer array nums. You are asked if you can choose n disjoint subarrays from the array nums such that the ith subarray is equal to groups[i] (0-indexed), and if i > 0, the (i-1)th subarray appears before the ith subarray in nums (i.e. the subarrays must be in the same order as groups). Return true if you can do this task, and false otherwise. Note that the subarrays are disjoint if and only if there is no index k such that nums[k] belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.   Example 1: Input: groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0] Output: true Explanation: You can choose the 0th subarray as [1,-1,0,1,-1,-1,3,-2,0] and the 1st one as [1,-1,0,1,-1,-1,3,-2,0]. These subarrays are disjoint as they share no common nums[k] element. Example 2: Input: groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2] Output: false Explanation: Note that choosing the subarrays [1,2,3,4,10,-2] and [1,2,3,4,10,-2] is incorrect because they are not in the same order as in groups. [10,-2] must come before [1,2,3,4]. Example 3: Input: groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7] Output: false Explanation: Note that choosing the subarrays [7,7,1,2,3,4,7,7] and [7,7,1,2,3,4,7,7] is invalid because they are not disjoint. They share a common elements nums[4] (0-indexed).   Constraints: groups.length == n 1 <= n <= 103 1 <= groups[i].length, sum(groups[i].length) <= 103 1 <= nums.length <= 103 -107 <= groups[i][j], nums[k] <= 107",
        "1330": "You are given an integer matrix isWater of size m x n that represents a map of land and water cells. If isWater[i][j] == 0, cell (i, j) is a land cell. If isWater[i][j] == 1, cell (i, j) is a water cell. You must assign each cell a height in a way that follows these rules: The height of each cell must be non-negative. If the cell is a water cell, its height must be 0. Any two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching). Find an assignment of heights such that the maximum height in the matrix is maximized. Return an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.   Example 1: Input: isWater = [[0,1],[0,0]] Output: [[1,0],[2,1]] Explanation: The image shows the assigned heights of each cell. The blue cell is the water cell, and the green cells are the land cells. Example 2: Input: isWater = [[0,0,1],[1,0,0],[0,0,0]] Output: [[1,1,0],[0,1,1],[1,2,2]] Explanation: A height of 2 is the maximum possible height of any assignment. Any height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.   Constraints: m == isWater.length n == isWater[i].length 1 <= m, n <= 1000 isWater[i][j] is 0 or 1. There is at least one water cell.",
        "1331": "There is a tree (i.e., a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. Each node has a value associated with it, and the root of the tree is node 0. To represent this tree, you are given an integer array nums and a 2D array edges. Each nums[i] represents the ith node's value, and each edges[j] = [uj, vj] represents an edge between nodes uj and vj in the tree. Two values x and y are coprime if gcd(x, y) == 1 where gcd(x, y) is the greatest common divisor of x and y. An ancestor of a node i is any other node on the shortest path from node i to the root. A node is not considered an ancestor of itself. Return an array ans of size n, where ans[i] is the closest ancestor to node i such that nums[i] and nums[ans[i]] are coprime, or -1 if there is no such ancestor.   Example 1: Input: nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]] Output: [-1,0,0,1] Explanation: In the above figure, each node's value is in parentheses. - Node 0 has no coprime ancestors. - Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1). - Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime (gcd(3,3) == 3), but node 0's   value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor. - Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its   closest valid ancestor. Example 2: Input: nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]] Output: [-1,0,-1,0,0,0,-1]   Constraints: nums.length == n 1 <= nums[i] <= 50 1 <= n <= 105 edges.length == n - 1 edges[j].length == 2 0 <= uj, vj < n uj != vj",
        "1332": "You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string. Return the merged string.   Example 1: Input: word1 = \"abc\", word2 = \"pqr\" Output: \"apbqcr\" Explanation: The merged string will be merged as so: word1:  a   b   c word2:    p   q   r merged: a p b q c r Example 2: Input: word1 = \"ab\", word2 = \"pqrs\" Output: \"apbqrs\" Explanation: Notice that as word2 is longer, \"rs\" is appended to the end. word1:  a   b  word2:    p   q   r   s merged: a p b q   r   s Example 3: Input: word1 = \"abcd\", word2 = \"pq\" Output: \"apbqcd\" Explanation: Notice that as word1 is longer, \"cd\" is appended to the end. word1:  a   b   c   d word2:    p   q  merged: a p b q c   d   Constraints: 1 <= word1.length, word2.length <= 100 word1 and word2 consist of lowercase English letters.",
        "1333": "You have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball. In one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1. Note that after doing so, there may be more than one ball in some boxes. Return an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box. Each answer[i] is calculated considering the initial state of the boxes.   Example 1: Input: boxes = \"110\" Output: [1,1,3] Explanation: The answer for each box is as follows: 1) First box: you will have to move one ball from the second box to the first box in one operation. 2) Second box: you will have to move one ball from the first box to the second box in one operation. 3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation. Example 2: Input: boxes = \"001011\" Output: [11,8,5,4,3,4]   Constraints: n == boxes.length 1 <= n <= 2000 boxes[i] is either '0' or '1'.",
        "1334": "You are given two 0-indexed integer arrays nums and multipliers of size n and m respectively, where n >= m. You begin with a score of 0. You want to perform exactly m operations. On the ith operation (0-indexed) you will: Choose one integer x from either the start or the end of the array nums. Add multipliers[i] * x to your score. Note that multipliers[0] corresponds to the first operation, multipliers[1] to the second operation, and so on. Remove x from nums. Return the maximum score after performing m operations.   Example 1: Input: nums = [1,2,3], multipliers = [3,2,1] Output: 14 Explanation: An optimal solution is as follows: - Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score. - Choose from the end, [1,2], adding 2 * 2 = 4 to the score. - Choose from the end, [1], adding 1 * 1 = 1 to the score. The total score is 9 + 4 + 1 = 14. Example 2: Input: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6] Output: 102 Explanation: An optimal solution is as follows: - Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score. - Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score. - Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score. - Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score. - Choose from the end, [-2,7], adding 7 * 6 = 42 to the score.  The total score is 50 + 15 - 9 + 4 + 42 = 102.   Constraints: n == nums.length m == multipliers.length 1 <= m <= 300 m <= n <= 105  -1000 <= nums[i], multipliers[i] <= 1000",
        "1335": "You are given two strings, word1 and word2. You want to construct a string in the following manner: Choose some non-empty subsequence subsequence1 from word1. Choose some non-empty subsequence subsequence2 from word2. Concatenate the subsequences: subsequence1 + subsequence2, to make the string. Return the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return 0. A subsequence of a string s is a string that can be made by deleting some (possibly none) characters from s without changing the order of the remaining characters. A palindrome is a string that reads the same forward as well as backward.   Example 1: Input: word1 = \"cacb\", word2 = \"cbba\" Output: 5 Explanation: Choose \"ab\" from word1 and \"cba\" from word2 to make \"abcba\", which is a palindrome. Example 2: Input: word1 = \"ab\", word2 = \"ab\" Output: 3 Explanation: Choose \"ab\" from word1 and \"a\" from word2 to make \"aba\", which is a palindrome. Example 3: Input: word1 = \"aa\", word2 = \"bb\" Output: 0 Explanation: You cannot construct a palindrome from the described method, so return 0.   Constraints: 1 <= word1.length, word2.length <= 1000 word1 and word2 consist of lowercase English letters.",
        "1336": "You are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item. You are also given a rule represented by two strings, ruleKey and ruleValue. The ith item is said to match the rule if one of the following is true: ruleKey == \"type\" and ruleValue == typei. ruleKey == \"color\" and ruleValue == colori. ruleKey == \"name\" and ruleValue == namei. Return the number of items that match the given rule.   Example 1: Input: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"color\", ruleValue = \"silver\" Output: 1 Explanation: There is only one item matching the given rule, which is [\"computer\",\"silver\",\"lenovo\"]. Example 2: Input: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"phone\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"type\", ruleValue = \"phone\" Output: 2 Explanation: There are only two items matching the given rule, which are [\"phone\",\"blue\",\"pixel\"] and [\"phone\",\"gold\",\"iphone\"]. Note that the item [\"computer\",\"silver\",\"phone\"] does not match.   Constraints: 1 <= items.length <= 104 1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10 ruleKey is equal to either \"type\", \"color\", or \"name\". All strings consist only of lowercase letters.",
        "1337": "You would like to make dessert and are preparing to buy the ingredients. You have n ice cream base flavors and m types of toppings to choose from. You must follow these rules when making your dessert: There must be exactly one ice cream base. You can add one or more types of topping or have no toppings at all. There are at most two of each type of topping. You are given three inputs: baseCosts, an integer array of length n, where each baseCosts[i] represents the price of the ith ice cream base flavor. toppingCosts, an integer array of length m, where each toppingCosts[i] is the price of one of the ith topping. target, an integer representing your target price for dessert. You want to make a dessert with a total cost as close to target as possible. Return the closest possible cost of the dessert to target. If there are multiple, return the lower one.   Example 1: Input: baseCosts = [1,7], toppingCosts = [3,4], target = 10 Output: 10 Explanation: Consider the following combination (all 0-indexed): - Choose base 1: cost 7 - Take 1 of topping 0: cost 1 x 3 = 3 - Take 0 of topping 1: cost 0 x 4 = 0 Total: 7 + 3 + 0 = 10. Example 2: Input: baseCosts = [2,3], toppingCosts = [4,5,100], target = 18 Output: 17 Explanation: Consider the following combination (all 0-indexed): - Choose base 1: cost 3 - Take 1 of topping 0: cost 1 x 4 = 4 - Take 2 of topping 1: cost 2 x 5 = 10 - Take 0 of topping 2: cost 0 x 100 = 0 Total: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18. Example 3: Input: baseCosts = [3,10], toppingCosts = [2,5], target = 9 Output: 8 Explanation: It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.   Constraints: n == baseCosts.length m == toppingCosts.length 1 <= n, m <= 10 1 <= baseCosts[i], toppingCosts[i] <= 104 1 <= target <= 104",
        "1338": "You are given two arrays of integers nums1 and nums2, possibly of different lengths. The values in the arrays are between 1 and 6, inclusive. In one operation, you can change any integer's value in any of the arrays to any value between 1 and 6, inclusive. Return the minimum number of operations required to make the sum of values in nums1 equal to the sum of values in nums2. Return -1 if it is not possible to make the sum of the two arrays equal.   Example 1: Input: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2] Output: 3 Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. - Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2]. - Change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2]. - Change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2]. Example 2: Input: nums1 = [1,1,1,1,1,1,1], nums2 = [6] Output: -1 Explanation: There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal. Example 3: Input: nums1 = [6,6], nums2 = [1] Output: 3 Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.  - Change nums1[0] to 2. nums1 = [2,6], nums2 = [1]. - Change nums1[1] to 2. nums1 = [2,2], nums2 = [1]. - Change nums2[0] to 4. nums1 = [2,2], nums2 = [4].   Constraints: 1 <= nums1.length, nums2.length <= 105 1 <= nums1[i], nums2[i] <= 6",
        "1339": "There are n cars traveling at different speeds in the same direction along a one-lane road. You are given an array cars of length n, where cars[i] = [positioni, speedi] represents: positioni is the distance between the ith car and the beginning of the road in meters. It is guaranteed that positioni < positioni+1. speedi is the initial speed of the ith car in meters per second. For simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the slowest car in the fleet. Return an array answer, where answer[i] is the time, in seconds, at which the ith car collides with the next car, or -1 if the car does not collide with the next car. Answers within 10-5 of the actual answers are accepted.   Example 1: Input: cars = [[1,2],[2,1],[4,3],[7,2]] Output: [1.00000,-1.00000,3.00000,-1.00000] Explanation: After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s. Example 2: Input: cars = [[3,4],[5,4],[6,3],[9,1]] Output: [2.00000,1.00000,1.50000,-1.00000]   Constraints: 1 <= cars.length <= 105 1 <= positioni, speedi <= 106 positioni < positioni+1",
        "1340": "You are given two integers, x and y, which represent your current location on a Cartesian grid: (x, y). You are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi). A point is valid if it shares the same x-coordinate or the same y-coordinate as your location. Return the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return -1. The Manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).   Example 1: Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]] Output: 2 Explanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2. Example 2: Input: x = 3, y = 4, points = [[3,4]] Output: 0 Explanation: The answer is allowed to be on the same location as your current location. Example 3: Input: x = 3, y = 4, points = [[2,3]] Output: -1 Explanation: There are no valid points.   Constraints: 1 <= points.length <= 104 points[i].length == 2 1 <= x, y, ai, bi <= 104",
        "1341": "Given an integer n, return true if it is possible to represent n as the sum of distinct powers of three. Otherwise, return false. An integer y is a power of three if there exists an integer x such that y == 3x.   Example 1: Input: n = 12 Output: true Explanation: 12 = 31 + 32 Example 2: Input: n = 91 Output: true Explanation: 91 = 30 + 32 + 34 Example 3: Input: n = 21 Output: false   Constraints: 1 <= n <= 107",
        "1342": "You are given an undirected graph defined by an integer n, the number of nodes, and a 2D integer array edges, the edges in the graph, where edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi. You are also given an integer array queries. Let incident(a, b) be defined as the number of edges that are connected to either node a or b. The answer to the jth query is the number of pairs of nodes (a, b) that satisfy both of the following conditions: a < b incident(a, b) > queries[j] Return an array answers such that answers.length == queries.length and answers[j] is the answer of the jth query. Note that there can be multiple edges between the same two nodes.   Example 1: Input: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3] Output: [6,5] Explanation: The calculations for incident(a, b) are shown in the table above. The answers for each of the queries are as follows: - answers[0] = 6. All the pairs have an incident(a, b) value greater than 2. - answers[1] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3. Example 2: Input: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5] Output: [10,10,9,8,6]   Constraints: 2 <= n <= 2 * 104 1 <= edges.length <= 105 1 <= ui, vi <= n ui != vi 1 <= queries.length <= 20 0 <= queries[j] < edges.length",
        "1343": "You are given an integer array nums and two integers limit and goal. The array nums has an interesting property that abs(nums[i]) <= limit. Return the minimum number of elements you need to add to make the sum of the array equal to goal. The array must maintain its property that abs(nums[i]) <= limit. Note that abs(x) equals x if x >= 0, and -x otherwise.   Example 1: Input: nums = [1,-1,1], limit = 3, goal = -4 Output: 2 Explanation: You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4. Example 2: Input: nums = [1,-10,9,1], limit = 100, goal = 0 Output: 1   Constraints: 1 <= nums.length <= 105 1 <= limit <= 106 -limit <= nums[i] <= limit -109 <= goal <= 109",
        "1344": "There is an undirected weighted connected graph. You are given a positive integer n which denotes that the graph has n nodes labeled from 1 to n, and an array edges where each edges[i] = [ui, vi, weighti] denotes that there is an edge between nodes ui and vi with weight equal to weighti. A path from node start to node end is a sequence of nodes [z0, z1, z2, ..., zk] such that z0 = start and zk = end and there is an edge between zi and zi+1 where 0 <= i <= k-1. The distance of a path is the sum of the weights on the edges of the path. Let distanceToLastNode(x) denote the shortest distance of a path between node n and node x. A restricted path is a path that also satisfies that distanceToLastNode(zi) > distanceToLastNode(zi+1) where 0 <= i <= k-1. Return the number of restricted paths from node 1 to node n. Since that number may be too large, return it modulo 109 + 7.   Example 1: Input: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]] Output: 3 Explanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The three restricted paths are: 1) 1 --> 2 --> 5 2) 1 --> 2 --> 3 --> 5 3) 1 --> 3 --> 5 Example 2: Input: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]] Output: 1 Explanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The only restricted path is 1 --> 3 --> 7.   Constraints: 1 <= n <= 2 * 104 n - 1 <= edges.length <= 4 * 104 edges[i].length == 3 1 <= ui, vi <= n ui != vi 1 <= weighti <= 105 There is at most one edge between any two nodes. There is at least one path between any two nodes.",
        "1345": "You are given an array nums and an integer k. The XOR of a segment [left, right] where left <= right is the XOR of all the elements with indices between left and right, inclusive: nums[left] XOR nums[left+1] XOR ... XOR nums[right]. Return the minimum number of elements to change in the array such that the XOR of all segments of size k is equal to zero.   Example 1: Input: nums = [1,2,0,3,0], k = 1 Output: 3 Explanation: Modify the array from [1,2,0,3,0] to from [0,0,0,0,0]. Example 2: Input: nums = [3,4,5,2,1,7,3,4,7], k = 3 Output: 3 Explanation: Modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7]. Example 3: Input: nums = [1,2,4,1,2,5,1,2,6], k = 3 Output: 3 Explanation: Modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3].   Constraints: 1 <= k <= nums.length <= 2000 0 <= nums[i] < 210",
        "1346": "SQL Schema Pandas Schema",
        "1347": "You are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices. Return true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return false.   Example 1: Input: s1 = \"bank\", s2 = \"kanb\" Output: true Explanation: For example, swap the first character with the last character of s2 to make \"bank\". Example 2: Input: s1 = \"attack\", s2 = \"defend\" Output: false Explanation: It is impossible to make them equal with one string swap. Example 3: Input: s1 = \"kelb\", s2 = \"kelb\" Output: true Explanation: The two strings are already equal, so no string swap operation is required.   Constraints: 1 <= s1.length, s2.length <= 100 s1.length == s2.length s1 and s2 consist of only lowercase English letters.",
        "1348": "There is an undirected star graph consisting of n nodes labeled from 1 to n. A star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node. You are given a 2D integer array edges where each edges[i] = [ui, vi] indicates that there is an edge between the nodes ui and vi. Return the center of the given star graph.   Example 1: Input: edges = [[1,2],[2,3],[4,2]] Output: 2 Explanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center. Example 2: Input: edges = [[1,2],[5,1],[1,3],[1,4]] Output: 1   Constraints: 3 <= n <= 105 edges.length == n - 1 edges[i].length == 2 1 <= ui, vi <= n ui != vi The given edges represent a valid star graph.",
        "1349": "There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array classes, where classes[i] = [passi, totali]. You know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam. You are also given an integer extraStudents. There are another extraStudents brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the extraStudents students to a class in a way that maximizes the average pass ratio across all the classes. The pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes. Return the maximum possible average pass ratio after assigning the extraStudents students. Answers within 10-5 of the actual answer will be accepted.   Example 1: Input: classes = [[1,2],[3,5],[2,2]], extraStudents = 2 Output: 0.78333 Explanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333. Example 2: Input: classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4 Output: 0.53485   Constraints: 1 <= classes.length <= 105 classes[i].length == 2 1 <= passi <= totali <= 105 1 <= extraStudents <= 105",
        "1350": "You are given an array of integers nums (0-indexed) and an integer k. The score of a subarray (i, j) is defined as min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). A good subarray is a subarray where i <= k <= j. Return the maximum possible score of a good subarray.   Example 1: Input: nums = [1,4,3,7,4,5], k = 3 Output: 15 Explanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15.  Example 2: Input: nums = [5,5,4,5,4,1,1,1], k = 0 Output: 20 Explanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 2 * 104 0 <= k < nums.length",
        "1351": "SQL Schema Pandas Schema",
        "1352": "Given an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist. An alphanumeric string is a string consisting of lowercase English letters and digits.   Example 1: Input: s = \"dfa12321afd\" Output: 2 Explanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2. Example 2: Input: s = \"abc1111\" Output: -1 Explanation: The digits that appear in s are [1]. There is no second largest digit.    Constraints: 1 <= s.length <= 500 s consists of only lowercase English letters and digits.",
        "1353": "There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire timeToLive seconds after the currentTime. If the token is renewed, the expiry time will be extended to expire timeToLive seconds after the (potentially different) currentTime. Implement the AuthenticationManager class: AuthenticationManager(int timeToLive) constructs the AuthenticationManager and sets the timeToLive. generate(string tokenId, int currentTime) generates a new token with the given tokenId at the given currentTime in seconds. renew(string tokenId, int currentTime) renews the unexpired token with the given tokenId at the given currentTime in seconds. If there are no unexpired tokens with the given tokenId, the request is ignored, and nothing happens. countUnexpiredTokens(int currentTime) returns the number of unexpired tokens at the given currentTime. Note that if a token expires at time t, and another action happens on time t (renew or countUnexpiredTokens), the expiration takes place before the other actions.   Example 1: Input [\"AuthenticationManager\", \"renew\", \"generate\", \"countUnexpiredTokens\", \"generate\", \"renew\", \"renew\", \"countUnexpiredTokens\"] [[5], [\"aaa\", 1], [\"aaa\", 2], [6], [\"bbb\", 7], [\"aaa\", 8], [\"bbb\", 10], [15]] Output [null, null, null, 1, null, null, null, 0]  Explanation AuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with timeToLive = 5 seconds. authenticationManager.renew(\"aaa\", 1); // No token exists with tokenId \"aaa\" at time 1, so nothing happens. authenticationManager.generate(\"aaa\", 2); // Generates a new token with tokenId \"aaa\" at time 2. authenticationManager.countUnexpiredTokens(6); // The token with tokenId \"aaa\" is the only unexpired one at time 6, so return 1. authenticationManager.generate(\"bbb\", 7); // Generates a new token with tokenId \"bbb\" at time 7. authenticationManager.renew(\"aaa\", 8); // The token with tokenId \"aaa\" expired at time 7, and 8 >= 7, so at time 8 the renew request is ignored, and nothing happens. authenticationManager.renew(\"bbb\", 10); // The token with tokenId \"bbb\" is unexpired at time 10, so the renew request is fulfilled and now the token will expire at time 15. authenticationManager.countUnexpiredTokens(15); // The token with tokenId \"bbb\" expires at time 15, and the token with tokenId \"aaa\" expired at time 7, so currently no token is unexpired, so return 0.   Constraints: 1 <= timeToLive <= 108 1 <= currentTime <= 108 1 <= tokenId.length <= 5 tokenId consists only of lowercase letters. All calls to generate will contain unique values of tokenId. The values of currentTime across all the function calls will be strictly increasing. At most 2000 calls will be made to all functions combined.",
        "1354": "You are given an integer array coins of length n which represents the n coins that you own. The value of the ith coin is coins[i]. You can make some value x if you can choose some of your n coins such that their values sum up to x. Return the maximum number of consecutive integer values that you can make with your coins starting from and including 0. Note that you may have multiple coins of the same value.   Example 1: Input: coins = [1,3] Output: 2 Explanation: You can make the following values: - 0: take [] - 1: take [1] You can make 2 consecutive integer values starting from 0. Example 2: Input: coins = [1,1,1,4] Output: 8 Explanation: You can make the following values: - 0: take [] - 1: take [1] - 2: take [1,1] - 3: take [1,1,1] - 4: take [4] - 5: take [4,1] - 6: take [4,1,1] - 7: take [4,1,1,1] You can make 8 consecutive integer values starting from 0. Example 3: Input: coins = [1,4,10,3,1] Output: 20   Constraints: coins.length == n 1 <= n <= 4 * 104 1 <= coins[i] <= 4 * 104",
        "1355": "You are given nums, an array of positive integers of size 2 * n. You must perform n operations on this array. In the ith operation (1-indexed), you will: Choose two elements, x and y. Receive a score of i * gcd(x, y). Remove x and y from nums. Return the maximum score you can receive after performing n operations. The function gcd(x, y) is the greatest common divisor of x and y.   Example 1: Input: nums = [1,2] Output: 1 Explanation: The optimal choice of operations is: (1 * gcd(1, 2)) = 1 Example 2: Input: nums = [3,4,6,8] Output: 11 Explanation: The optimal choice of operations is: (1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11 Example 3: Input: nums = [1,2,3,4,5,6] Output: 14 Explanation: The optimal choice of operations is: (1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14   Constraints: 1 <= n <= 7 nums.length == 2 * n 1 <= nums[i] <= 106",
        "1356": "Given an array of positive integers nums, return the maximum possible sum of an ascending subarray in nums. A subarray is defined as a contiguous sequence of numbers in an array. A subarray [numsl, numsl+1, ..., numsr-1, numsr] is ascending if for all i where l <= i < r, numsi  < numsi+1. Note that a subarray of size 1 is ascending.   Example 1: Input: nums = [10,20,30,5,10,50] Output: 65 Explanation: [5,10,50] is the ascending subarray with the maximum sum of 65. Example 2: Input: nums = [10,20,30,40,50] Output: 150 Explanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150. Example 3: Input: nums = [12,17,15,13,10,11,12] Output: 33 Explanation: [10,11,12] is the ascending subarray with the maximum sum of 33.   Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100",
        "1357": "You are given three positive integers: n, index, and maxSum. You want to construct an array nums (0-indexed) that satisfies the following conditions: nums.length == n nums[i] is a positive integer where 0 <= i < n. abs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1. The sum of all the elements of nums does not exceed maxSum. nums[index] is maximized. Return nums[index] of the constructed array. Note that abs(x) equals x if x >= 0, and -x otherwise.   Example 1: Input: n = 4, index = 2,  maxSum = 6 Output: 2 Explanation: nums = [1,2,2,1] is one array that satisfies all the conditions. There are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2]. Example 2: Input: n = 6, index = 1,  maxSum = 10 Output: 3   Constraints: 1 <= n <= maxSum <= 109 0 <= index < n",
        "1358": "You are given an even integer n. You initially have a permutation perm of size n where perm[i] == i (0-indexed). In one operation, you will create a new array arr, and for each i: If i % 2 == 0, then arr[i] = perm[i / 2]. If i % 2 == 1, then arr[i] = perm[n / 2 + (i - 1) / 2]. You will then assign arr to perm. Return the minimum non-zero number of operations you need to perform on perm to return the permutation to its initial value.   Example 1: Input: n = 2 Output: 1 Explanation: perm = [0,1] initially. After the 1st operation, perm = [0,1] So it takes only 1 operation. Example 2: Input: n = 4 Output: 2 Explanation: perm = [0,1,2,3] initially. After the 1st operation, perm = [0,2,1,3] After the 2nd operation, perm = [0,1,2,3] So it takes only 2 operations. Example 3: Input: n = 6 Output: 4   Constraints: 2 <= n <= 1000 n is even.",
        "1359": "You are given a string s that contains some bracket pairs, with each pair containing a non-empty key. For example, in the string \"(name)is(age)yearsold\", there are two bracket pairs that contain the keys \"name\" and \"age\". You know the values of a wide range of keys. This is represented by a 2D string array knowledge where each knowledge[i] = [keyi, valuei] indicates that key keyi has a value of valuei. You are tasked to evaluate all of the bracket pairs. When you evaluate a bracket pair that contains some key keyi, you will: Replace keyi and the bracket pair with the key's corresponding valuei. If you do not know the value of the key, you will replace keyi and the bracket pair with a question mark \"?\" (without the quotation marks). Each key will appear at most once in your knowledge. There will not be any nested brackets in s. Return the resulting string after evaluating all of the bracket pairs.   Example 1: Input: s = \"(name)is(age)yearsold\", knowledge = [[\"name\",\"bob\"],[\"age\",\"two\"]] Output: \"bobistwoyearsold\" Explanation: The key \"name\" has a value of \"bob\", so replace \"(name)\" with \"bob\". The key \"age\" has a value of \"two\", so replace \"(age)\" with \"two\". Example 2: Input: s = \"hi(name)\", knowledge = [[\"a\",\"b\"]] Output: \"hi?\" Explanation: As you do not know the value of the key \"name\", replace \"(name)\" with \"?\". Example 3: Input: s = \"(a)(a)(a)aaa\", knowledge = [[\"a\",\"yes\"]] Output: \"yesyesyesaaa\" Explanation: The same key can appear multiple times. The key \"a\" has a value of \"yes\", so replace all occurrences of \"(a)\" with \"yes\". Notice that the \"a\"s not in a bracket pair are not evaluated.   Constraints: 1 <= s.length <= 105 0 <= knowledge.length <= 105 knowledge[i].length == 2 1 <= keyi.length, valuei.length <= 10 s consists of lowercase English letters and round brackets '(' and ')'. Every open bracket '(' in s will have a corresponding close bracket ')'. The key in each bracket pair of s will be non-empty. There will not be any nested bracket pairs in s. keyi and valuei consist of lowercase English letters. Each keyi in knowledge is unique.",
        "1360": "You are given a positive integer primeFactors. You are asked to construct a positive integer n that satisfies the following conditions: The number of prime factors of n (not necessarily distinct) is at most primeFactors. The number of nice divisors of n is maximized. Note that a divisor of n is nice if it is divisible by every prime factor of n. For example, if n = 12, then its prime factors are [2,2,3], then 6 and 12 are nice divisors, while 3 and 4 are not. Return the number of nice divisors of n. Since that number can be too large, return it modulo 109 + 7. Note that a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. The prime factors of a number n is a list of prime numbers such that their product equals n.   Example 1: Input: primeFactors = 5 Output: 6 Explanation: 200 is a valid value of n. It has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200]. There is not other value of n that has at most 5 prime factors and more nice divisors. Example 2: Input: primeFactors = 8 Output: 18   Constraints: 1 <= primeFactors <= 109",
        "1361": "You are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference. Return true if the square is white, and false if the square is black. The coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.   Example 1: Input: coordinates = \"a1\" Output: false Explanation: From the chessboard above, the square with coordinates \"a1\" is black, so return false. Example 2: Input: coordinates = \"h3\" Output: true Explanation: From the chessboard above, the square with coordinates \"h3\" is white, so return true. Example 3: Input: coordinates = \"c7\" Output: false   Constraints: coordinates.length == 2 'a' <= coordinates[0] <= 'h' '1' <= coordinates[1] <= '8'",
        "1362": "You are given two strings sentence1 and sentence2, each representing a sentence composed of words. A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of only uppercase and lowercase English characters. Two sentences s1 and s2 are considered similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. Note that the inserted sentence must be separated from existing words by spaces. For example, s1 = \"Hello Jane\" and s2 = \"Hello my name is Jane\" can be made equal by inserting \"my name is\" between \"Hello\" and \"Jane\" in s1. s1 = \"Frog cool\" and s2 = \"Frogs are cool\" are not similar, since although there is a sentence \"s are\" inserted into s1, it is not separated from \"Frog\" by a space. Given two sentences sentence1 and sentence2, return true if sentence1 and sentence2 are similar. Otherwise, return false.   Example 1: Input: sentence1 = \"My name is Haley\", sentence2 = \"My Haley\" Output: true Explanation: sentence2 can be turned to sentence1 by inserting \"name is\" between \"My\" and \"Haley\". Example 2: Input: sentence1 = \"of\", sentence2 = \"A lot of words\" Output: false Explanation: No single sentence can be inserted inside one of the sentences to make it equal to the other. Example 3: Input: sentence1 = \"Eating right now\", sentence2 = \"Eating\" Output: true Explanation: sentence2 can be turned to sentence1 by inserting \"right now\" at the end of the sentence.   Constraints: 1 <= sentence1.length, sentence2.length <= 100 sentence1 and sentence2 consist of lowercase and uppercase English letters and spaces. The words in sentence1 and sentence2 are separated by a single space.",
        "1363": "You are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions: 0 <= i < j < nums.length nums[i] + rev(nums[j]) == nums[j] + rev(nums[i]) Return the number of nice pairs of indices. Since that number can be too large, return it modulo 109 + 7.   Example 1: Input: nums = [42,11,1,97] Output: 2 Explanation: The two pairs are:  - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.  - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12. Example 2: Input: nums = [13,10,35,24,76] Output: 4   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109",
        "1364": "There is a donuts shop that bakes donuts in batches of batchSize. They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. You are given an integer batchSize and an integer array groups, where groups[i] denotes that there is a group of groups[i] customers that will visit the shop. Each customer will get exactly one donut. When a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group. You can freely rearrange the ordering of the groups. Return the maximum possible number of happy groups after rearranging the groups.   Example 1: Input: batchSize = 3, groups = [1,2,3,4,5,6] Output: 4 Explanation: You can arrange the groups as [6,2,4,5,1,3]. Then the 1st, 2nd, 4th, and 6th groups will be happy. Example 2: Input: batchSize = 4, groups = [1,3,2,5,2,2,1,6] Output: 4   Constraints: 1 <= batchSize <= 9 1 <= groups.length <= 30 1 <= groups[i] <= 109",
        "1365": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation). For example, \"Hello World\", \"HELLO\", and \"hello world hello world\" are all sentences. You are given a sentence s and an integer k. You want to truncate s such that it contains only the first k words. Return s after truncating it.   Example 1: Input: s = \"Hello how are you Contestant\", k = 4 Output: \"Hello how are you\" Explanation: The words in s are [\"Hello\", \"how\" \"are\", \"you\", \"Contestant\"]. The first 4 words are [\"Hello\", \"how\", \"are\", \"you\"]. Hence, you should return \"Hello how are you\". Example 2: Input: s = \"What is the solution to this problem\", k = 4 Output: \"What is the solution\" Explanation: The words in s are [\"What\", \"is\" \"the\", \"solution\", \"to\", \"this\", \"problem\"]. The first 4 words are [\"What\", \"is\", \"the\", \"solution\"]. Hence, you should return \"What is the solution\". Example 3: Input: s = \"chopper is not a tanuki\", k = 5 Output: \"chopper is not a tanuki\"   Constraints: 1 <= s.length <= 500 k is in the range [1, the number of words in s]. s consist of only lowercase and uppercase English letters and spaces. The words in s are separated by a single space. There are no leading or trailing spaces.",
        "1366": "You are given the logs for users' actions on LeetCode, and an integer k. The logs are represented by a 2D integer array logs where each logs[i] = [IDi, timei] indicates that the user with IDi performed an action at the minute timei. Multiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute. The user active minutes (UAM) for a given user is defined as the number of unique minutes in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it. You are to calculate a 1-indexed array answer of size k such that, for each j (1 <= j <= k), answer[j] is the number of users whose UAM equals j. Return the array answer as described above.   Example 1: Input: logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5 Output: [0,2,0,0,0] Explanation: The user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once). The user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2. Since both users have a UAM of 2, answer[2] is 2, and the remaining answer[j] values are 0. Example 2: Input: logs = [[1,1],[2,2],[2,3]], k = 4 Output: [1,1,0,0] Explanation: The user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1. The user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2. There is one user with a UAM of 1 and one with a UAM of 2. Hence, answer[1] = 1, answer[2] = 1, and the remaining values are 0.   Constraints: 1 <= logs.length <= 104 0 <= IDi <= 109 1 <= timei <= 105 k is in the range [The maximum UAM for a user, 105].",
        "1367": "You are given two positive integer arrays nums1 and nums2, both of length n. The absolute sum difference of arrays nums1 and nums2 is defined as the sum of |nums1[i] - nums2[i]| for each 0 <= i < n (0-indexed). You can replace at most one element of nums1 with any other element in nums1 to minimize the absolute sum difference. Return the minimum absolute sum difference after replacing at most one element in the array nums1. Since the answer may be large, return it modulo 109 + 7. |x| is defined as: x if x >= 0, or -x if x < 0.   Example 1: Input: nums1 = [1,7,5], nums2 = [2,3,5] Output: 3 Explanation: There are two possible optimal solutions: - Replace the second element with the first: [1,7,5] => [1,1,5], or - Replace the second element with the third: [1,7,5] => [1,5,5]. Both will yield an absolute sum difference of |1-2| + (|1-3| or |5-3|) + |5-5| = 3. Example 2: Input: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10] Output: 0 Explanation: nums1 is equal to nums2 so no replacement is needed. This will result in an  absolute sum difference of 0. Example 3: Input: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4] Output: 20 Explanation: Replace the first element with the second: [1,10,4,4,2,7] => [10,10,4,4,2,7]. This yields an absolute sum difference of |10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20   Constraints: n == nums1.length n == nums2.length 1 <= n <= 105 1 <= nums1[i], nums2[i] <= 105",
        "1368": "You are given an array nums that consists of positive integers. The GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly. For example, the GCD of the sequence [4,6,16] is 2. A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array. For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10]. Return the number of different GCDs among all non-empty subsequences of nums.   Example 1: Input: nums = [6,10,3] Output: 5 Explanation: The figure shows all the non-empty subsequences and their GCDs. The different GCDs are 6, 10, 3, 2, and 1. Example 2: Input: nums = [5,15,40,5,6] Output: 7   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 2 * 105",
        "1369": "Implement a function signFunc(x) that returns: 1 if x is positive. -1 if x is negative. 0 if x is equal to 0. You are given an integer array nums. Let product be the product of all values in the array nums. Return signFunc(product).   Example 1: Input: nums = [-1,-2,-3,-4,3,2,1] Output: 1 Explanation: The product of all values in the array is 144, and signFunc(144) = 1 Example 2: Input: nums = [1,5,0,2,-3] Output: 0 Explanation: The product of all values in the array is 0, and signFunc(0) = 0 Example 3: Input: nums = [-1,1,-1,1,-1] Output: -1 Explanation: The product of all values in the array is -1, and signFunc(-1) = -1   Constraints: 1 <= nums.length <= 1000 -100 <= nums[i] <= 100",
        "1370": "There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend. The rules of the game are as follows: Start at the 1st friend. Count the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once. The last friend you counted leaves the circle and loses the game. If there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat. Else, the last friend in the circle wins the game. Given the number of friends, n, and an integer k, return the winner of the game.   Example 1: Input: n = 5, k = 2 Output: 3 Explanation: Here are the steps of the game: 1) Start at friend 1. 2) Count 2 friends clockwise, which are friends 1 and 2. 3) Friend 2 leaves the circle. Next start is friend 3. 4) Count 2 friends clockwise, which are friends 3 and 4. 5) Friend 4 leaves the circle. Next start is friend 5. 6) Count 2 friends clockwise, which are friends 5 and 1. 7) Friend 1 leaves the circle. Next start is friend 3. 8) Count 2 friends clockwise, which are friends 3 and 5. 9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner. Example 2: Input: n = 6, k = 5 Output: 1 Explanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.   Constraints: 1 <= k <= n <= 500   Follow up: Could you solve this problem in linear time with constant space?",
        "1371": "There is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n. A frog starts at point 0 in the second lane and wants to jump to point n. However, there could be obstacles along the way. You are given an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 to 3) describes an obstacle on the lane obstacles[i] at point i. If obstacles[i] == 0, there are no obstacles at point i. There will be at most one obstacle in the 3 lanes at each point. For example, if obstacles[2] == 1, then there is an obstacle on lane 1 at point 2. The frog can only travel from point i to point i + 1 on the same lane if there is not an obstacle on the lane at point i + 1. To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane. For example, the frog can jump from lane 3 at point 3 to lane 1 at point 3. Return the minimum number of side jumps the frog needs to reach any lane at point n starting from lane 2 at point 0. Note: There will be no obstacles on points 0 and n.   Example 1: Input: obstacles = [0,1,2,3,0] Output: 2  Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows). Note that the frog can jump over obstacles only when making side jumps (as shown at point 2). Example 2: Input: obstacles = [0,1,1,3,3,0] Output: 0 Explanation: There are no obstacles on lane 2. No side jumps are required. Example 3: Input: obstacles = [0,2,1,0,3,0] Output: 2 Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps.   Constraints: obstacles.length == n + 1 1 <= n <= 5 * 105 0 <= obstacles[i] <= 3 obstacles[0] == obstacles[n] == 0",
        "1372": "You are given two integers, m and k, and a stream of integers. You are tasked to implement a data structure that calculates the MKAverage for the stream. The MKAverage can be calculated using these steps: If the number of the elements in the stream is less than m you should consider the MKAverage to be -1. Otherwise, copy the last m elements of the stream to a separate container. Remove the smallest k elements and the largest k elements from the container. Calculate the average value for the rest of the elements rounded down to the nearest integer. Implement the MKAverage class: MKAverage(int m, int k) Initializes the MKAverage object with an empty stream and the two integers m and k. void addElement(int num) Inserts a new element num into the stream. int calculateMKAverage() Calculates and returns the MKAverage for the current stream rounded down to the nearest integer.   Example 1: Input [\"MKAverage\", \"addElement\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"addElement\", \"addElement\", \"calculateMKAverage\"] [[3, 1], [3], [1], [], [10], [], [5], [5], [5], []] Output [null, null, null, -1, null, 3, null, null, null, 5]  Explanation MKAverage obj = new MKAverage(3, 1);  obj.addElement(3);        // current elements are [3] obj.addElement(1);        // current elements are [3,1] obj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist. obj.addElement(10);       // current elements are [3,1,10] obj.calculateMKAverage(); // The last 3 elements are [3,1,10].                           // After removing smallest and largest 1 element the container will be [3].                           // The average of [3] equals 3/1 = 3, return 3 obj.addElement(5);        // current elements are [3,1,10,5] obj.addElement(5);        // current elements are [3,1,10,5,5] obj.addElement(5);        // current elements are [3,1,10,5,5,5] obj.calculateMKAverage(); // The last 3 elements are [5,5,5].                           // After removing smallest and largest 1 element the container will be [5].                           // The average of [5] equals 5/1 = 5, return 5   Constraints: 3 <= m <= 105 1 <= k*2 < m 1 <= num <= 105 At most 105 calls will be made to addElement and calculateMKAverage.",
        "1373": "You are given an integer array nums (0-indexed). In one operation, you can choose an element of the array and increment it by 1. For example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3]. Return the minimum number of operations needed to make nums strictly increasing. An array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.length - 1. An array of length 1 is trivially strictly increasing.   Example 1: Input: nums = [1,1,1] Output: 3 Explanation: You can do the following operations: 1) Increment nums[2], so nums becomes [1,1,2]. 2) Increment nums[1], so nums becomes [1,2,2]. 3) Increment nums[2], so nums becomes [1,2,3]. Example 2: Input: nums = [1,5,2,4,1] Output: 14 Example 3: Input: nums = [8] Output: 0   Constraints: 1 <= nums.length <= 5000 1 <= nums[i] <= 104",
        "1374": "You are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2D plane. Multiple points can have the same coordinates. You are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj. For each query queries[j], compute the number of points inside the jth circle. Points on the border of the circle are considered inside. Return an array answer, where answer[j] is the answer to the jth query.   Example 1: Input: points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]] Output: [3,2,2] Explanation: The points and circles are shown above. queries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle. Example 2: Input: points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]] Output: [2,3,2,4] Explanation: The points and circles are shown above. queries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple.   Constraints: 1 <= points.length <= 500 points[i].length == 2 0 <= xi, yi <= 500 1 <= queries.length <= 500 queries[j].length == 3 0 <= xj, yj <= 500 1 <= rj <= 500 All coordinates are integers.   Follow up: Could you find the answer for each query in better complexity than O(n)?",
        "1375": "You are given a sorted array nums of n non-negative integers and an integer maximumBit. You want to perform the following query n times: Find a non-negative integer k < 2maximumBit such that nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k is maximized. k is the answer to the ith query. Remove the last element from the current array nums. Return an array answer, where answer[i] is the answer to the ith query.   Example 1: Input: nums = [0,1,1,3], maximumBit = 2 Output: [0,3,2,3] Explanation: The queries are answered as follows: 1st query: nums = [0,1,1,3], k = 0 since 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3. 2nd query: nums = [0,1,1], k = 3 since 0 XOR 1 XOR 1 XOR 3 = 3. 3rd query: nums = [0,1], k = 2 since 0 XOR 1 XOR 2 = 3. 4th query: nums = [0], k = 3 since 0 XOR 3 = 3. Example 2: Input: nums = [2,3,4,7], maximumBit = 3 Output: [5,2,6,5] Explanation: The queries are answered as follows: 1st query: nums = [2,3,4,7], k = 5 since 2 XOR 3 XOR 4 XOR 7 XOR 5 = 7. 2nd query: nums = [2,3,4], k = 2 since 2 XOR 3 XOR 4 XOR 2 = 7. 3rd query: nums = [2,3], k = 6 since 2 XOR 3 XOR 6 = 7. 4th query: nums = [2], k = 5 since 2 XOR 5 = 7. Example 3: Input: nums = [0,1,2,2,5,7], maximumBit = 3 Output: [4,3,6,4,6,7]   Constraints: nums.length == n 1 <= n <= 105 1 <= maximumBit <= 20 0 <= nums[i] < 2maximumBit nums is sorted in ascending order.",
        "1376": "You are given a string s (0-indexed). You are asked to perform the following operation on s until you get a sorted string: Find the largest index i such that 1 <= i < s.length and s[i] < s[i - 1]. Find the largest index j such that i <= j < s.length and s[k] < s[i - 1] for all the possible values of k in the range [i, j] inclusive. Swap the two characters at indices i - 1 and j. Reverse the suffix starting at index i. Return the number of operations needed to make the string sorted. Since the answer can be too large, return it modulo 109 + 7.   Example 1: Input: s = \"cba\" Output: 5 Explanation: The simulation goes as follows: Operation 1: i=2, j=2. Swap s[1] and s[2] to get s=\"cab\", then reverse the suffix starting at 2. Now, s=\"cab\". Operation 2: i=1, j=2. Swap s[0] and s[2] to get s=\"bac\", then reverse the suffix starting at 1. Now, s=\"bca\". Operation 3: i=2, j=2. Swap s[1] and s[2] to get s=\"bac\", then reverse the suffix starting at 2. Now, s=\"bac\". Operation 4: i=1, j=1. Swap s[0] and s[1] to get s=\"abc\", then reverse the suffix starting at 1. Now, s=\"acb\". Operation 5: i=2, j=2. Swap s[1] and s[2] to get s=\"abc\", then reverse the suffix starting at 2. Now, s=\"abc\". Example 2: Input: s = \"aabaa\" Output: 2 Explanation: The simulation goes as follows: Operation 1: i=3, j=4. Swap s[2] and s[4] to get s=\"aaaab\", then reverse the substring starting at 3. Now, s=\"aaaba\". Operation 2: i=4, j=4. Swap s[3] and s[4] to get s=\"aaaab\", then reverse the substring starting at 4. Now, s=\"aaaab\".   Constraints: 1 <= s.length <= 3000 s consists only of lowercase English letters.",
        "1377": "A pangram is a sentence where every letter of the English alphabet appears at least once. Given a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise.   Example 1: Input: sentence = \"thequickbrownfoxjumpsoverthelazydog\" Output: true Explanation: sentence contains at least one of every letter of the English alphabet. Example 2: Input: sentence = \"leetcode\" Output: false   Constraints: 1 <= sentence.length <= 1000 sentence consists of lowercase English letters.",
        "1378": "It is a sweltering summer day, and a boy wants to buy some ice cream bars. At the store, there are n ice cream bars. You are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins. The boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible.  Note: The boy can buy the ice cream bars in any order. Return the maximum number of ice cream bars the boy can buy with coins coins. You must solve the problem by counting sort.   Example 1: Input: costs = [1,3,2,4,1], coins = 7 Output: 4 Explanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7. Example 2: Input: costs = [10,6,8,7,7,8], coins = 5 Output: 0 Explanation: The boy cannot afford any of the ice cream bars. Example 3: Input: costs = [1,6,3,1,2,5], coins = 20 Output: 6 Explanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.   Constraints: costs.length == n 1 <= n <= 105 1 <= costs[i] <= 105 1 <= coins <= 108",
        "1379": "You are given n tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTimei, processingTimei] means that the ith task will be available to process at enqueueTimei and will take processingTimei to finish processing. You have a single-threaded CPU that can process at most one task at a time and will act in the following way: If the CPU is idle and there are no available tasks to process, the CPU remains idle. If the CPU is idle and there are available tasks, the CPU will choose the one with the shortest processing time. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index. Once a task is started, the CPU will process the entire task without stopping. The CPU can finish a task then start a new one instantly. Return the order in which the CPU will process the tasks.   Example 1: Input: tasks = [[1,2],[2,4],[3,2],[4,1]] Output: [0,2,3,1] Explanation: The events go as follows:  - At time = 1, task 0 is available to process. Available tasks = {0}. - Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}. - At time = 2, task 1 is available to process. Available tasks = {1}. - At time = 3, task 2 is available to process. Available tasks = {1, 2}. - Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}. - At time = 4, task 3 is available to process. Available tasks = {1, 3}. - At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}. - At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}. - At time = 10, the CPU finishes task 1 and becomes idle. Example 2: Input: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]] Output: [4,3,2,0,1] Explanation: The events go as follows: - At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}. - Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}. - At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}. - At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}. - At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}. - At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}. - At time = 40, the CPU finishes task 1 and becomes idle.   Constraints: tasks.length == n 1 <= n <= 105 1 <= enqueueTimei, processingTimei <= 109",
        "1380": "The XOR sum of a list is the bitwise XOR of all its elements. If the list only contains one element, then its XOR sum will be equal to this element. For example, the XOR sum of [1,2,3,4] is equal to 1 XOR 2 XOR 3 XOR 4 = 4, and the XOR sum of [3] is equal to 3. You are given two 0-indexed arrays arr1 and arr2 that consist only of non-negative integers. Consider the list containing the result of arr1[i] AND arr2[j] (bitwise AND) for every (i, j) pair where 0 <= i < arr1.length and 0 <= j < arr2.length. Return the XOR sum of the aforementioned list.   Example 1: Input: arr1 = [1,2,3], arr2 = [6,5] Output: 0 Explanation: The list = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1]. The XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0. Example 2: Input: arr1 = [12], arr2 = [4] Output: 4 Explanation: The list = [12 AND 4] = [4]. The XOR sum = 4.   Constraints: 1 <= arr1.length, arr2.length <= 105 0 <= arr1[i], arr2[j] <= 109",
        "1381": "Given an integer n (in base 10) and a base k, return the sum of the digits of n after converting n from base 10 to base k. After converting, each digit should be interpreted as a base 10 number, and the sum should be returned in base 10.   Example 1: Input: n = 34, k = 6 Output: 9 Explanation: 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9. Example 2: Input: n = 10, k = 10 Output: 1 Explanation: n is already in base 10. 1 + 0 = 1.   Constraints: 1 <= n <= 100 2 <= k <= 10",
        "1382": "The frequency of an element is the number of times it occurs in an array. You are given an integer array nums and an integer k. In one operation, you can choose an index of nums and increment the element at that index by 1. Return the maximum possible frequency of an element after performing at most k operations.   Example 1: Input: nums = [1,2,4], k = 5 Output: 3 Explanation: Increment the first element three times and the second element two times to make nums = [4,4,4]. 4 has a frequency of 3. Example 2: Input: nums = [1,4,8,13], k = 5 Output: 2 Explanation: There are multiple optimal solutions: - Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2. - Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2. - Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2. Example 3: Input: nums = [3,9,6], k = 2 Output: 1   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105 1 <= k <= 105",
        "1383": "A string is considered beautiful if it satisfies the following conditions: Each of the 5 English vowels ('a', 'e', 'i', 'o', 'u') must appear at least once in it. The letters must be sorted in alphabetical order (i.e. all 'a's before 'e's, all 'e's before 'i's, etc.). For example, strings \"aeiou\" and \"aaaaaaeiiiioou\" are considered beautiful, but \"uaeio\", \"aeoiu\", and \"aaaeeeooo\" are not beautiful. Given a string word consisting of English vowels, return the length of the longest beautiful substring of word. If no such substring exists, return 0. A substring is a contiguous sequence of characters in a string.   Example 1: Input: word = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\" Output: 13 Explanation: The longest beautiful substring in word is \"aaaaeiiiiouuu\" of length 13. Example 2: Input: word = \"aeeeiiiioooauuuaeiou\" Output: 5 Explanation: The longest beautiful substring in word is \"aeiou\" of length 5. Example 3: Input: word = \"a\" Output: 0 Explanation: There is no beautiful substring, so return 0.   Constraints: 1 <= word.length <= 5 * 105 word consists of characters 'a', 'e', 'i', 'o', and 'u'.",
        "1384": "You want to build n new buildings in a city. The new buildings will be built in a line and are labeled from 1 to n. However, there are city restrictions on the heights of the new buildings: The height of each building must be a non-negative integer. The height of the first building must be 0. The height difference between any two adjacent buildings cannot exceed 1. Additionally, there are city restrictions on the maximum height of specific buildings. These restrictions are given as a 2D integer array restrictions where restrictions[i] = [idi, maxHeighti] indicates that building idi must have a height less than or equal to maxHeighti. It is guaranteed that each building will appear at most once in restrictions, and building 1 will not be in restrictions. Return the maximum possible height of the tallest building.   Example 1: Input: n = 5, restrictions = [[2,1],[4,1]] Output: 2 Explanation: The green area in the image indicates the maximum allowed height for each building. We can build the buildings with heights [0,1,2,1,2], and the tallest building has a height of 2. Example 2: Input: n = 6, restrictions = [] Output: 5 Explanation: The green area in the image indicates the maximum allowed height for each building. We can build the buildings with heights [0,1,2,3,4,5], and the tallest building has a height of 5. Example 3: Input: n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]] Output: 5 Explanation: The green area in the image indicates the maximum allowed height for each building. We can build the buildings with heights [0,1,2,3,3,4,4,5,4,3], and the tallest building has a height of 5.   Constraints: 2 <= n <= 109 0 <= restrictions.length <= min(n - 1, 105) 2 <= idi <= n idi is unique. 0 <= maxHeighti <= 109",
        "1385": "You are given a 0-indexed string s that has lowercase English letters in its even indices and digits in its odd indices. You must perform an operation shift(c, x), where c is a character and x is a digit, that returns the xth character after c. For example, shift('a', 5) = 'f' and shift('x', 0) = 'x'. For every odd index i, you want to replace the digit s[i] with the result of the shift(s[i-1], s[i]) operation. Return s after replacing all digits. It is guaranteed that shift(s[i-1], s[i]) will never exceed 'z'. Note that shift(c, x) is not a preloaded function, but an operation to be implemented as part of the solution.   Example 1: Input: s = \"a1c1e1\" Output: \"abcdef\" Explanation: The digits are replaced as follows: - s[1] -> shift('a',1) = 'b' - s[3] -> shift('c',1) = 'd' - s[5] -> shift('e',1) = 'f' Example 2: Input: s = \"a1b2c3d4e\" Output: \"abbdcfdhe\" Explanation: The digits are replaced as follows: - s[1] -> shift('a',1) = 'b' - s[3] -> shift('b',2) = 'd' - s[5] -> shift('c',3) = 'f' - s[7] -> shift('d',4) = 'h'   Constraints: 1 <= s.length <= 100 s consists only of lowercase English letters and digits. shift(s[i-1], s[i]) <= 'z' for all odd indices i.",
        "1386": "Design a system that manages the reservation state of n seats that are numbered from 1 to n. Implement the SeatManager class: SeatManager(int n) Initializes a SeatManager object that will manage n seats numbered from 1 to n. All seats are initially available. int reserve() Fetches the smallest-numbered unreserved seat, reserves it, and returns its number. void unreserve(int seatNumber) Unreserves the seat with the given seatNumber.   Example 1: Input [\"SeatManager\", \"reserve\", \"reserve\", \"unreserve\", \"reserve\", \"reserve\", \"reserve\", \"reserve\", \"unreserve\"] [[5], [], [], [2], [], [], [], [], [5]] Output [null, 1, 2, null, 2, 3, 4, 5, null]  Explanation SeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats. seatManager.reserve();    // All seats are available, so return the lowest numbered seat, which is 1. seatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2. seatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5]. seatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2. seatManager.reserve();    // The available seats are [3,4,5], so return the lowest of them, which is 3. seatManager.reserve();    // The available seats are [4,5], so return the lowest of them, which is 4. seatManager.reserve();    // The only available seat is seat 5, so return 5. seatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5].   Constraints: 1 <= n <= 105 1 <= seatNumber <= n For each call to reserve, it is guaranteed that there will be at least one unreserved seat. For each call to unreserve, it is guaranteed that seatNumber will be reserved. At most 105 calls in total will be made to reserve and unreserve.",
        "1387": "You are given an array of positive integers arr. Perform some operations (possibly none) on arr so that it satisfies these conditions: The value of the first element in arr must be 1. The absolute difference between any 2 adjacent elements must be less than or equal to 1. In other words, abs(arr[i] - arr[i - 1]) <= 1 for each i where 1 <= i < arr.length (0-indexed). abs(x) is the absolute value of x. There are 2 types of operations that you can perform any number of times: Decrease the value of any element of arr to a smaller positive integer. Rearrange the elements of arr to be in any order. Return the maximum possible value of an element in arr after performing the operations to satisfy the conditions.   Example 1: Input: arr = [2,2,1,2,1] Output: 2 Explanation:  We can satisfy the conditions by rearranging arr so it becomes [1,2,2,2,1]. The largest element in arr is 2. Example 2: Input: arr = [100,1,1000] Output: 3 Explanation:  One possible way to satisfy the conditions is by doing the following: 1. Rearrange arr so it becomes [1,100,1000]. 2. Decrease the value of the second element to 2. 3. Decrease the value of the third element to 3. Now arr = [1,2,3], which satisfies the conditions. The largest element in arr is 3. Example 3: Input: arr = [1,2,3,4,5] Output: 5 Explanation: The array already satisfies the conditions, and the largest element is 5.   Constraints: 1 <= arr.length <= 105 1 <= arr[i] <= 109",
        "1388": "There is a hotel with n rooms. The rooms are represented by a 2D integer array rooms where rooms[i] = [roomIdi, sizei] denotes that there is a room with room number roomIdi and size equal to sizei. Each roomIdi is guaranteed to be unique. You are also given k queries in a 2D array queries where queries[j] = [preferredj, minSizej]. The answer to the jth query is the room number id of a room such that: The room has a size of at least minSizej, and abs(id - preferredj) is minimized, where abs(x) is the absolute value of x. If there is a tie in the absolute difference, then use the room with the smallest such id. If there is no such room, the answer is -1. Return an array answer of length k where answer[j] contains the answer to the jth query.   Example 1: Input: rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]] Output: [3,-1,3] Explanation: The answers to the queries are as follows: Query = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3. Query = [3,3]: There are no rooms with a size of at least 3, so the answer is -1. Query = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3. Example 2: Input: rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]] Output: [2,1,3] Explanation: The answers to the queries are as follows: Query = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2. Query = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller. Query = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3.   Constraints: n == rooms.length 1 <= n <= 105 k == queries.length 1 <= k <= 104 1 <= roomIdi, preferredj <= 107 1 <= sizei, minSizej <= 107",
        "1389": "Given an integer array nums (0-indexed) and two integers target and start, find an index i such that nums[i] == target and abs(i - start) is minimized. Note that abs(x) is the absolute value of x. Return abs(i - start). It is guaranteed that target exists in nums.   Example 1: Input: nums = [1,2,3,4,5], target = 5, start = 3 Output: 1 Explanation: nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1. Example 2: Input: nums = [1], target = 1, start = 0 Output: 0 Explanation: nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0. Example 3: Input: nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0 Output: 0 Explanation: Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0.   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 104 0 <= start < nums.length target is in nums.",
        "1390": "You are given a string s that consists of only digits. Check if we can split s into two or more non-empty substrings such that the numerical values of the substrings are in descending order and the difference between numerical values of every two adjacent substrings is equal to 1. For example, the string s = \"0090089\" can be split into [\"0090\", \"089\"] with numerical values [90,89]. The values are in descending order and adjacent values differ by 1, so this way is valid. Another example, the string s = \"001\" can be split into [\"0\", \"01\"], [\"00\", \"1\"], or [\"0\", \"0\", \"1\"]. However all the ways are invalid because they have numerical values [0,1], [0,1], and [0,0,1] respectively, all of which are not in descending order. Return true if it is possible to split s as described above, or false otherwise. A substring is a contiguous sequence of characters in a string.   Example 1: Input: s = \"1234\" Output: false Explanation: There is no valid way to split s. Example 2: Input: s = \"050043\" Output: true Explanation: s can be split into [\"05\", \"004\", \"3\"] with numerical values [5,4,3]. The values are in descending order with adjacent values differing by 1. Example 3: Input: s = \"9080701\" Output: false Explanation: There is no valid way to split s.   Constraints: 1 <= s.length <= 20 s only consists of digits.",
        "1391": "You are given a string num, representing a large integer, and an integer k. We call some integer wonderful if it is a permutation of the digits in num and is greater in value than num. There can be many wonderful integers. However, we only care about the smallest-valued ones. For example, when num = \"5489355142\": The 1st smallest wonderful integer is \"5489355214\". The 2nd smallest wonderful integer is \"5489355241\". The 3rd smallest wonderful integer is \"5489355412\". The 4th smallest wonderful integer is \"5489355421\". Return the minimum number of adjacent digit swaps that needs to be applied to num to reach the kth smallest wonderful integer. The tests are generated in such a way that kth smallest wonderful integer exists.   Example 1: Input: num = \"5489355142\", k = 4 Output: 2 Explanation: The 4th smallest wonderful number is \"5489355421\". To get this number: - Swap index 7 with index 8: \"5489355142\" -> \"5489355412\" - Swap index 8 with index 9: \"5489355412\" -> \"5489355421\" Example 2: Input: num = \"11112\", k = 4 Output: 4 Explanation: The 4th smallest wonderful number is \"21111\". To get this number: - Swap index 3 with index 4: \"11112\" -> \"11121\" - Swap index 2 with index 3: \"11121\" -> \"11211\" - Swap index 1 with index 2: \"11211\" -> \"12111\" - Swap index 0 with index 1: \"12111\" -> \"21111\" Example 3: Input: num = \"00123\", k = 1 Output: 1 Explanation: The 1st smallest wonderful number is \"00132\". To get this number: - Swap index 3 with index 4: \"00123\" -> \"00132\"   Constraints: 2 <= num.length <= 1000 1 <= k <= 1000 num only consists of digits.",
        "1392": "You are given a 2D integer array intervals, where intervals[i] = [lefti, righti] describes the ith interval starting at lefti and ending at righti (inclusive). The size of an interval is defined as the number of integers it contains, or more formally righti - lefti + 1. You are also given an integer array queries. The answer to the jth query is the size of the smallest interval i such that lefti <= queries[j] <= righti. If no such interval exists, the answer is -1. Return an array containing the answers to the queries.   Example 1: Input: intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5] Output: [3,3,1,4] Explanation: The queries are processed as follows: - Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3. - Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3. - Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1. - Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4. Example 2: Input: intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22] Output: [2,-1,4,6] Explanation: The queries are processed as follows: - Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2. - Query = 19: None of the intervals contain 19. The answer is -1. - Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4. - Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.   Constraints: 1 <= intervals.length <= 105 1 <= queries.length <= 105 intervals[i].length == 2 1 <= lefti <= righti <= 107 1 <= queries[j] <= 107",
        "1393": "You are given a 2D integer array logs where each logs[i] = [birthi, deathi] indicates the birth and death years of the ith person. The population of some year x is the number of people alive during that year. The ith person is counted in year x's population if x is in the inclusive range [birthi, deathi - 1]. Note that the person is not counted in the year that they die. Return the earliest year with the maximum population.   Example 1: Input: logs = [[1993,1999],[2000,2010]] Output: 1993 Explanation: The maximum population is 1, and 1993 is the earliest year with this population. Example 2: Input: logs = [[1950,1961],[1960,1971],[1970,1981]] Output: 1960 Explanation:  The maximum population is 2, and it had happened in years 1960 and 1970. The earlier year between them is 1960.   Constraints: 1 <= logs.length <= 100 1950 <= birthi < deathi <= 2050",
        "1394": "You are given two non-increasing 0-indexed integer arrays nums1 and nums2. A pair of indices (i, j), where 0 <= i < nums1.length and 0 <= j < nums2.length, is valid if both i <= j and nums1[i] <= nums2[j]. The distance of the pair is j - i. Return the maximum distance of any valid pair (i, j). If there are no valid pairs, return 0. An array arr is non-increasing if arr[i-1] >= arr[i] for every 1 <= i < arr.length.   Example 1: Input: nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5] Output: 2 Explanation: The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4). The maximum distance is 2 with pair (2,4). Example 2: Input: nums1 = [2,2,2], nums2 = [10,10,1] Output: 1 Explanation: The valid pairs are (0,0), (0,1), and (1,1). The maximum distance is 1 with pair (0,1). Example 3: Input: nums1 = [30,29,19,5], nums2 = [25,25,25,25,25] Output: 2 Explanation: The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4). The maximum distance is 2 with pair (2,4).   Constraints: 1 <= nums1.length, nums2.length <= 105 1 <= nums1[i], nums2[j] <= 105 Both nums1 and nums2 are non-increasing.",
        "1395": "The min-product of an array is equal to the minimum value in the array multiplied by the array's sum. For example, the array [3,2,5] (minimum value is 2) has a min-product of 2 * (3+2+5) = 2 * 10 = 20. Given an array of integers nums, return the maximum min-product of any non-empty subarray of nums. Since the answer may be large, return it modulo 109 + 7. Note that the min-product should be maximized before performing the modulo operation. Testcases are generated such that the maximum min-product without modulo will fit in a 64-bit signed integer. A subarray is a contiguous part of an array.   Example 1: Input: nums = [1,2,3,2] Output: 14 Explanation: The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2). 2 * (2+3+2) = 2 * 7 = 14. Example 2: Input: nums = [2,3,3,1,2] Output: 18 Explanation: The maximum min-product is achieved with the subarray [3,3] (minimum value is 3). 3 * (3+3) = 3 * 6 = 18. Example 3: Input: nums = [3,1,5,6,4,2] Output: 60 Explanation: The maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4). 4 * (5+6+4) = 4 * 15 = 60.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 107",
        "1396": "There is a directed graph of n colored nodes and m edges. The nodes are numbered from 0 to n - 1. You are given a string colors where colors[i] is a lowercase English letter representing the color of the ith node in this graph (0-indexed). You are also given a 2D array edges where edges[j] = [aj, bj] indicates that there is a directed edge from node aj to node bj. A valid path in the graph is a sequence of nodes x1 -> x2 -> x3 -> ... -> xk such that there is a directed edge from xi to xi+1 for every 1 <= i < k. The color value of the path is the number of nodes that are colored the most frequently occurring color along that path. Return the largest color value of any valid path in the given graph, or -1 if the graph contains a cycle.   Example 1: Input: colors = \"abaca\", edges = [[0,1],[0,2],[2,3],[3,4]] Output: 3 Explanation: The path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored \"a\" (red in the above image). Example 2: Input: colors = \"a\", edges = [[0,0]] Output: -1 Explanation: There is a cycle from 0 to 0.   Constraints: n == colors.length m == edges.length 1 <= n <= 105 0 <= m <= 105 colors consists of lowercase English letters. 0 <= aj, bj < n",
        "1397": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters. A sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence. For example, the sentence \"This is a sentence\" can be shuffled as \"sentence4 a3 is2 This1\" or \"is2 sentence4 This1 a3\". Given a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.   Example 1: Input: s = \"is2 sentence4 This1 a3\" Output: \"This is a sentence\" Explanation: Sort the words in s to their original positions \"This1 is2 a3 sentence4\", then remove the numbers. Example 2: Input: s = \"Myself2 Me1 I4 and3\" Output: \"Me Myself and I\" Explanation: Sort the words in s to their original positions \"Me1 Myself2 and3 I4\", then remove the numbers.   Constraints: 2 <= s.length <= 200 s consists of lowercase and uppercase English letters, spaces, and digits from 1 to 9. The number of words in s is between 1 and 9. The words in s are separated by a single space. s contains no leading or trailing spaces.",
        "1398": "You are given two integers memory1 and memory2 representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second. At the ith second (starting from 1), i bits of memory are allocated to the stick with more available memory (or from the first memory stick if both have the same available memory). If neither stick has at least i bits of available memory, the program crashes. Return an array containing [crashTime, memory1crash, memory2crash], where crashTime is the time (in seconds) when the program crashed and memory1crash and memory2crash are the available bits of memory in the first and second sticks respectively.   Example 1: Input: memory1 = 2, memory2 = 2 Output: [3,1,0] Explanation: The memory is allocated as follows: - At the 1st second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory. - At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory. - At the 3rd second, the program crashes. The sticks have 1 and 0 bits available respectively. Example 2: Input: memory1 = 8, memory2 = 11 Output: [6,0,4] Explanation: The memory is allocated as follows: - At the 1st second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory. - At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory. - At the 3rd second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory. - At the 4th second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory. - At the 5th second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory. - At the 6th second, the program crashes. The sticks have 0 and 4 bits available respectively.   Constraints: 0 <= memory1, memory2 <= 231 - 1",
        "1399": "Given an integer array nums, return the sum of floor(nums[i] / nums[j]) for all pairs of indices 0 <= i, j < nums.length in the array. Since the answer may be too large, return it modulo 109 + 7. The floor() function returns the integer part of the division.   Example 1: Input: nums = [2,5,9] Output: 10 Explanation: floor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0 floor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1 floor(5 / 2) = 2 floor(9 / 2) = 4 floor(9 / 5) = 1 We calculate the floor of the division for every pair of indices in the array then sum them up. Example 2: Input: nums = [7,7,7,7,7,7,7] Output: 49   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105",
        "1400": "The XOR total of an array is defined as the bitwise XOR of all its elements, or 0 if the array is empty. For example, the XOR total of the array [2,5,6] is 2 XOR 5 XOR 6 = 1. Given an array nums, return the sum of all XOR totals for every subset of nums.  Note: Subsets with the same elements should be counted multiple times. An array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b.   Example 1: Input: nums = [1,3] Output: 6 Explanation: The 4 subsets of [1,3] are: - The empty subset has an XOR total of 0. - [1] has an XOR total of 1. - [3] has an XOR total of 3. - [1,3] has an XOR total of 1 XOR 3 = 2. 0 + 1 + 3 + 2 = 6 Example 2: Input: nums = [5,1,6] Output: 28 Explanation: The 8 subsets of [5,1,6] are: - The empty subset has an XOR total of 0. - [5] has an XOR total of 5. - [1] has an XOR total of 1. - [6] has an XOR total of 6. - [5,1] has an XOR total of 5 XOR 1 = 4. - [5,6] has an XOR total of 5 XOR 6 = 3. - [1,6] has an XOR total of 1 XOR 6 = 7. - [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2. 0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28 Example 3: Input: nums = [3,4,5,6,7,8] Output: 480 Explanation: The sum of all XOR totals for every subset is 480.   Constraints: 1 <= nums.length <= 12 1 <= nums[i] <= 20",
        "1401": "Given a binary string s, return the minimum number of character swaps to make it alternating, or -1 if it is impossible. The string is called alternating if no two adjacent characters are equal. For example, the strings \"010\" and \"1010\" are alternating, while the string \"0100\" is not. Any two characters may be swapped, even if they are not adjacent.   Example 1: Input: s = \"111000\" Output: 1 Explanation: Swap positions 1 and 4: \"111000\" -> \"101010\" The string is now alternating. Example 2: Input: s = \"010\" Output: 0 Explanation: The string is already alternating, no swaps are needed. Example 3: Input: s = \"1110\" Output: -1   Constraints: 1 <= s.length <= 1000 s[i] is either '0' or '1'.",
        "1402": "You are given two integer arrays nums1 and nums2. You are tasked to implement a data structure that supports queries of two types: Add a positive integer to an element of a given index in the array nums2. Count the number of pairs (i, j) such that nums1[i] + nums2[j] equals a given value (0 <= i < nums1.length and 0 <= j < nums2.length). Implement the FindSumPairs class: FindSumPairs(int[] nums1, int[] nums2) Initializes the FindSumPairs object with two integer arrays nums1 and nums2. void add(int index, int val) Adds val to nums2[index], i.e., apply nums2[index] += val. int count(int tot) Returns the number of pairs (i, j) such that nums1[i] + nums2[j] == tot.   Example 1: Input [\"FindSumPairs\", \"count\", \"add\", \"count\", \"count\", \"add\", \"add\", \"count\"] [[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]] Output [null, 8, null, 2, 1, null, null, 11]  Explanation FindSumPairs findSumPairs = new FindSumPairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]); findSumPairs.count(7);  // return 8; pairs (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) make 2 + 5 and pairs (5,1), (5,5) make 3 + 4 findSumPairs.add(3, 2); // now nums2 = [1,4,5,4,5,4] findSumPairs.count(8);  // return 2; pairs (5,2), (5,4) make 3 + 5 findSumPairs.count(4);  // return 1; pair (5,0) makes 3 + 1 findSumPairs.add(0, 1); // now nums2 = [2,4,5,4,5,4] findSumPairs.add(1, 1); // now nums2 = [2,5,5,4,5,4] findSumPairs.count(7);  // return 11; pairs (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) make 2 + 5 and pairs (5,3), (5,5) make 3 + 4   Constraints: 1 <= nums1.length <= 1000 1 <= nums2.length <= 105 1 <= nums1[i] <= 109 1 <= nums2[i] <= 105 0 <= index < nums2.length 1 <= val <= 105 1 <= tot <= 109 At most 1000 calls are made to add and count each.",
        "1403": "There are n uniquely-sized sticks whose lengths are integers from 1 to n. You want to arrange the sticks such that exactly k sticks are visible from the left. A stick is visible from the left if there are no longer sticks to the left of it. For example, if the sticks are arranged [1,3,2,5,4], then the sticks with lengths 1, 3, and 5 are visible from the left. Given n and k, return the number of such arrangements. Since the answer may be large, return it modulo 109 + 7.   Example 1: Input: n = 3, k = 2 Output: 3 Explanation: [1,3,2], [2,3,1], and [2,1,3] are the only arrangements such that exactly 2 sticks are visible. The visible sticks are underlined. Example 2: Input: n = 5, k = 5 Output: 1 Explanation: [1,2,3,4,5] is the only arrangement such that all 5 sticks are visible. The visible sticks are underlined. Example 3: Input: n = 20, k = 11 Output: 647427950 Explanation: There are 647427950 (mod 109 + 7) ways to rearrange the sticks such that exactly 11 sticks are visible.   Constraints: 1 <= n <= 1000 1 <= k <= n",
        "1404": "Given a binary string s, return true if the longest contiguous segment of 1's is strictly longer than the longest contiguous segment of 0's in s, or return false otherwise. For example, in s = \"110100010\" the longest continuous segment of 1s has length 2, and the longest continuous segment of 0s has length 3. Note that if there are no 0's, then the longest continuous segment of 0's is considered to have a length 0. The same applies if there is no 1's.   Example 1: Input: s = \"1101\" Output: true Explanation: The longest contiguous segment of 1s has length 2: \"1101\" The longest contiguous segment of 0s has length 1: \"1101\" The segment of 1s is longer, so return true. Example 2: Input: s = \"111000\" Output: false Explanation: The longest contiguous segment of 1s has length 3: \"111000\" The longest contiguous segment of 0s has length 3: \"111000\" The segment of 1s is not longer, so return false. Example 3: Input: s = \"110100010\" Output: false Explanation: The longest contiguous segment of 1s has length 2: \"110100010\" The longest contiguous segment of 0s has length 3: \"110100010\" The segment of 1s is not longer, so return false.   Constraints: 1 <= s.length <= 100 s[i] is either '0' or '1'.",
        "1405": "You are given a floating-point number hour, representing the amount of time you have to reach the office. To commute to the office, you must take n trains in sequential order. You are also given an integer array dist of length n, where dist[i] describes the distance (in kilometers) of the ith train ride. Each train can only depart at an integer hour, so you may need to wait in between each train ride. For example, if the 1st train ride takes 1.5 hours, you must wait for an additional 0.5 hours before you can depart on the 2nd train ride at the 2 hour mark. Return the minimum positive integer speed (in kilometers per hour) that all the trains must travel at for you to reach the office on time, or -1 if it is impossible to be on time. Tests are generated such that the answer will not exceed 107 and hour will have at most two digits after the decimal point.   Example 1: Input: dist = [1,3,2], hour = 6 Output: 1 Explanation: At speed 1: - The first train ride takes 1/1 = 1 hour. - Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours. - Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours. - You will arrive at exactly the 6 hour mark. Example 2: Input: dist = [1,3,2], hour = 2.7 Output: 3 Explanation: At speed 3: - The first train ride takes 1/3 = 0.33333 hours. - Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour. - Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0.66667 hours. - You will arrive at the 2.66667 hour mark. Example 3: Input: dist = [1,3,2], hour = 1.9 Output: -1 Explanation: It is impossible because the earliest the third train can depart is at the 2 hour mark.   Constraints: n == dist.length 1 <= n <= 105 1 <= dist[i] <= 105 1 <= hour <= 109 There will be at most two digits after the decimal point in hour.",
        "1406": "You are given a 0-indexed binary string s and two integers minJump and maxJump. In the beginning, you are standing at index 0, which is equal to '0'. You can move from index i to index j if the following conditions are fulfilled: i + minJump <= j <= min(i + maxJump, s.length - 1), and s[j] == '0'. Return true if you can reach index s.length - 1 in s, or false otherwise.   Example 1: Input: s = \"011010\", minJump = 2, maxJump = 3 Output: true Explanation: In the first step, move from index 0 to index 3.  In the second step, move from index 3 to index 5. Example 2: Input: s = \"01101110\", minJump = 2, maxJump = 3 Output: false   Constraints: 2 <= s.length <= 105 s[i] is either '0' or '1'. s[0] == '0' 1 <= minJump <= maxJump < s.length",
        "1407": "Alice and Bob take turns playing a game, with Alice starting first. There are n stones arranged in a row. On each player's turn, while the number of stones is more than one, they will do the following: Choose an integer x > 1, and remove the leftmost x stones from the row. Add the sum of the removed stones' values to the player's score. Place a new stone, whose value is equal to that sum, on the left side of the row. The game stops when only one stone is left in the row. The score difference between Alice and Bob is (Alice's score - Bob's score). Alice's goal is to maximize the score difference, and Bob's goal is the minimize the score difference. Given an integer array stones of length n where stones[i] represents the value of the ith stone from the left, return the score difference between Alice and Bob if they both play optimally.   Example 1: Input: stones = [-1,2,-3,4,-5] Output: 5 Explanation: - Alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her score, and places a stone of   value 2 on the left. stones = [2,-5]. - Bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and places a stone of value -3 on   the left. stones = [-3]. The difference between their scores is 2 - (-3) = 5. Example 2: Input: stones = [7,-6,5,10,5,-2,-6] Output: 13 Explanation: - Alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) = 13 to her score, and places a   stone of value 13 on the left. stones = [13]. The difference between their scores is 13 - 0 = 13. Example 3: Input: stones = [-10,-12] Output: -22 Explanation: - Alice can only make one move, which is to remove both stones. She adds (-10) + (-12) = -22 to her   score and places a stone of value -22 on the left. stones = [-22]. The difference between their scores is (-22) - 0 = -22.   Constraints: n == stones.length 2 <= n <= 105 -104 <= stones[i] <= 104",
        "1408": "SQL Schema Pandas Schema",
        "1409": "A string is good if there are no repeated characters. Given a string s, return the number of good substrings of length three in s. Note that if there are multiple occurrences of the same substring, every occurrence should be counted. A substring is a contiguous sequence of characters in a string.   Example 1: Input: s = \"xyzzaz\" Output: 1 Explanation: There are 4 substrings of size 3: \"xyz\", \"yzz\", \"zza\", and \"zaz\".  The only good substring of length 3 is \"xyz\". Example 2: Input: s = \"aababcabc\" Output: 4 Explanation: There are 7 substrings of size 3: \"aab\", \"aba\", \"bab\", \"abc\", \"bca\", \"cab\", and \"abc\". The good substrings are \"abc\", \"bca\", \"cab\", and \"abc\".   Constraints: 1 <= s.length <= 100 s consists of lowercase English letters.",
        "1410": "The pair sum of a pair (a,b) is equal to a + b. The maximum pair sum is the largest pair sum in a list of pairs. For example, if we have pairs (1,5), (2,3), and (4,4), the maximum pair sum would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8. Given an array nums of even length n, pair up the elements of nums into n / 2 pairs such that: Each element of nums is in exactly one pair, and The maximum pair sum is minimized. Return the minimized maximum pair sum after optimally pairing up the elements.   Example 1: Input: nums = [3,5,2,3] Output: 7 Explanation: The elements can be paired up into pairs (3,3) and (5,2). The maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7. Example 2: Input: nums = [3,5,4,2,4,6] Output: 8 Explanation: The elements can be paired up into pairs (3,5), (4,4), and (6,2). The maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8.   Constraints: n == nums.length 2 <= n <= 105 n is even. 1 <= nums[i] <= 105",
        "1411": "You are given an m x n integer matrix grid. A rhombus sum is the sum of the elements that form the border of a regular rhombus shape in grid. The rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each rhombus sum: Note that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner. Return the biggest three distinct rhombus sums in the grid in descending order. If there are less than three distinct values, return all of them.   Example 1: Input: grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]] Output: [228,216,211] Explanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above. - Blue: 20 + 3 + 200 + 5 = 228 - Red: 200 + 2 + 10 + 4 = 216 - Green: 5 + 200 + 4 + 2 = 211 Example 2: Input: grid = [[1,2,3],[4,5,6],[7,8,9]] Output: [20,9,8] Explanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above. - Blue: 4 + 2 + 6 + 8 = 20 - Red: 9 (area 0 rhombus in the bottom right corner) - Green: 8 (area 0 rhombus in the bottom middle) Example 3: Input: grid = [[7,7,7]] Output: [7] Explanation: All three possible rhombus sums are the same, so return [7].   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 50 1 <= grid[i][j] <= 105",
        "1412": "You are given two integer arrays nums1 and nums2 of length n. The XOR sum of the two integer arrays is (nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1]) (0-indexed). For example, the XOR sum of [1,2,3] and [3,2,1] is equal to (1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4. Rearrange the elements of nums2 such that the resulting XOR sum is minimized. Return the XOR sum after the rearrangement.   Example 1: Input: nums1 = [1,2], nums2 = [2,3] Output: 2 Explanation: Rearrange nums2 so that it becomes [3,2]. The XOR sum is (1 XOR 3) + (2 XOR 2) = 2 + 0 = 2. Example 2: Input: nums1 = [1,0,3], nums2 = [5,3,4] Output: 8 Explanation: Rearrange nums2 so that it becomes [5,4,3].  The XOR sum is (1 XOR 5) + (0 XOR 4) + (3 XOR 3) = 4 + 4 + 0 = 8.   Constraints: n == nums1.length n == nums2.length 1 <= n <= 14 0 <= nums1[i], nums2[i] <= 107",
        "1413": "The letter value of a letter is its position in the alphabet starting from 0 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.). The numerical value of some string of lowercase English letters s is the concatenation of the letter values of each letter in s, which is then converted into an integer. For example, if s = \"acb\", we concatenate each letter's letter value, resulting in \"021\". After converting it, we get 21. You are given three strings firstWord, secondWord, and targetWord, each consisting of lowercase English letters 'a' through 'j' inclusive. Return true if the summation of the numerical values of firstWord and secondWord equals the numerical value of targetWord, or false otherwise.   Example 1: Input: firstWord = \"acb\", secondWord = \"cba\", targetWord = \"cdb\" Output: true Explanation: The numerical value of firstWord is \"acb\" -> \"021\" -> 21. The numerical value of secondWord is \"cba\" -> \"210\" -> 210. The numerical value of targetWord is \"cdb\" -> \"231\" -> 231. We return true because 21 + 210 == 231. Example 2: Input: firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aab\" Output: false Explanation:  The numerical value of firstWord is \"aaa\" -> \"000\" -> 0. The numerical value of secondWord is \"a\" -> \"0\" -> 0. The numerical value of targetWord is \"aab\" -> \"001\" -> 1. We return false because 0 + 0 != 1. Example 3: Input: firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aaaa\" Output: true Explanation:  The numerical value of firstWord is \"aaa\" -> \"000\" -> 0. The numerical value of secondWord is \"a\" -> \"0\" -> 0. The numerical value of targetWord is \"aaaa\" -> \"0000\" -> 0. We return true because 0 + 0 == 0.   Constraints: 1 <= firstWord.length, secondWord.length, targetWord.length <= 8 firstWord, secondWord, and targetWord consist of lowercase English letters from 'a' to 'j' inclusive.",
        "1414": "You are given a very large integer n, represented as a string, and an integer digit x. The digits in n and the digit x are in the inclusive range [1, 9], and n may represent a negative number. You want to maximize n's numerical value by inserting x anywhere in the decimal representation of n. You cannot insert x to the left of the negative sign. For example, if n = 73 and x = 6, it would be best to insert it between 7 and 3, making n = 763. If n = -55 and x = 2, it would be best to insert it before the first 5, making n = -255. Return a string representing the maximum value of n after the insertion.   Example 1: Input: n = \"99\", x = 9 Output: \"999\" Explanation: The result is the same regardless of where you insert 9. Example 2: Input: n = \"-13\", x = 2 Output: \"-123\" Explanation: You can make n one of {-213, -123, -132}, and the largest of those three is -123.   Constraints: 1 <= n.length <= 105 1 <= x <= 9 The digits in n are in the range [1, 9]. n is a valid representation of an integer. In the case of a negative n, it will begin with '-'.",
        "1415": "You are given two 0-indexed integer arrays servers and tasks of lengths n and m respectively. servers[i] is the weight of the ith server, and tasks[j] is the time needed to process the jth task in seconds. Tasks are assigned to the servers using a task queue. Initially, all servers are free, and the queue is empty. At second j, the jth task is inserted into the queue (starting with the 0th task being inserted at second 0). As long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the smallest weight, and in case of a tie, it is assigned to a free server with the smallest index. If there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. If multiple servers become free at the same time, then multiple tasks from the queue will be assigned in order of insertion following the weight and index priorities above. A server that is assigned task j at second t will be free again at second t + tasks[j]. Build an array ans of length m, where ans[j] is the index of the server the jth task will be assigned to. Return the array ans.   Example 1: Input: servers = [3,3,2], tasks = [1,2,3,2,1,2] Output: [2,2,0,2,1,2] Explanation: Events in chronological order go as follows: - At second 0, task 0 is added and processed using server 2 until second 1. - At second 1, server 2 becomes free. Task 1 is added and processed using server 2 until second 3. - At second 2, task 2 is added and processed using server 0 until second 5. - At second 3, server 2 becomes free. Task 3 is added and processed using server 2 until second 5. - At second 4, task 4 is added and processed using server 1 until second 5. - At second 5, all servers become free. Task 5 is added and processed using server 2 until second 7. Example 2: Input: servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1] Output: [1,4,1,4,1,3,2] Explanation: Events in chronological order go as follows:  - At second 0, task 0 is added and processed using server 1 until second 2. - At second 1, task 1 is added and processed using server 4 until second 2. - At second 2, servers 1 and 4 become free. Task 2 is added and processed using server 1 until second 4.  - At second 3, task 3 is added and processed using server 4 until second 7. - At second 4, server 1 becomes free. Task 4 is added and processed using server 1 until second 9.  - At second 5, task 5 is added and processed using server 3 until second 7. - At second 6, task 6 is added and processed using server 2 until second 7.   Constraints: servers.length == n tasks.length == m 1 <= n, m <= 2 * 105 1 <= servers[i], tasks[j] <= 2 * 105",
        "1416": "You are given an integer hoursBefore, the number of hours you have to travel to your meeting. To arrive at your meeting, you have to travel through n roads. The road lengths are given as an integer array dist of length n, where dist[i] describes the length of the ith road in kilometers. In addition, you are given an integer speed, which is the speed (in km/h) you will travel at. After you travel road i, you must rest and wait for the next integer hour before you can begin traveling on the next road. Note that you do not have to rest after traveling the last road because you are already at the meeting. For example, if traveling a road takes 1.4 hours, you must wait until the 2 hour mark before traveling the next road. If traveling a road takes exactly 2 hours, you do not need to wait. However, you are allowed to skip some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. Note that this means you may finish traveling future roads at different hour marks. For example, suppose traveling the first road takes 1.4 hours and traveling the second road takes 0.6 hours. Skipping the rest after the first road will mean you finish traveling the second road right at the 2 hour mark, letting you start traveling the third road immediately. Return the minimum number of skips required to arrive at the meeting on time, or -1 if it is impossible.   Example 1: Input: dist = [1,3,2], speed = 4, hoursBefore = 2 Output: 1 Explanation: Without skipping any rests, you will arrive in (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 hours. You can skip the first rest to arrive in ((1/4 + 0) + (3/4 + 0)) + (2/4) = 1.5 hours. Note that the second rest is shortened because you finish traveling the second road at an integer hour due to skipping the first rest. Example 2: Input: dist = [7,3,5,5], speed = 2, hoursBefore = 10 Output: 2 Explanation: Without skipping any rests, you will arrive in (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 hours. You can skip the first and third rest to arrive in ((7/2 + 0) + (3/2 + 0)) + ((5/2 + 0) + (5/2)) = 10 hours. Example 3: Input: dist = [7,3,5,5], speed = 1, hoursBefore = 10 Output: -1 Explanation: It is impossible to arrive at the meeting on time even if you skip all the rests.   Constraints: n == dist.length 1 <= n <= 1000 1 <= dist[i] <= 105 1 <= speed <= 106 1 <= hoursBefore <= 107",
        "1417": "You are given two identical eggs and you have access to a building with n floors labeled from 1 to n. You know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break. In each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves. Return the minimum number of moves that you need to determine with certainty what the value of f is.   Example 1: Input: n = 2 Output: 2 Explanation: We can drop the first egg from floor 1 and the second egg from floor 2. If the first egg breaks, we know that f = 0. If the second egg breaks but the first egg didn't, we know that f = 1. Otherwise, if both eggs survive, we know that f = 2. Example 2: Input: n = 100 Output: 14 Explanation: One optimal strategy is: - Drop the 1st egg at floor 9. If it breaks, we know f is between 0 and 8. Drop the 2nd egg starting from floor 1 and going up one at a time to find f within 8 more drops. Total drops is 1 + 8 = 9. - If the 1st egg does not break, drop the 1st egg again at floor 22. If it breaks, we know f is between 9 and 21. Drop the 2nd egg starting from floor 10 and going up one at a time to find f within 12 more drops. Total drops is 2 + 12 = 14. - If the 1st egg does not break again, follow a similar process dropping the 1st egg from floors 34, 45, 55, 64, 72, 79, 85, 90, 94, 97, 99, and 100. Regardless of the outcome, it takes at most 14 drops to determine f.   Constraints: 1 <= n <= 1000",
        "1418": "Given two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise.   Example 1: Input: mat = [[0,1],[1,0]], target = [[1,0],[0,1]] Output: true Explanation: We can rotate mat 90 degrees clockwise to make mat equal target. Example 2: Input: mat = [[0,1],[1,1]], target = [[1,0],[0,1]] Output: false Explanation: It is impossible to make mat equal to target by rotating mat. Example 3: Input: mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]] Output: true Explanation: We can rotate mat 90 degrees clockwise two times to make mat equal target.   Constraints: n == mat.length == target.length n == mat[i].length == target[i].length 1 <= n <= 10 mat[i][j] and target[i][j] are either 0 or 1.",
        "1419": "Given an integer array nums, your goal is to make all elements in nums equal. To complete one operation, follow these steps: Find the largest value in nums. Let its index be i (0-indexed) and its value be largest. If there are multiple elements with the largest value, pick the smallest i. Find the next largest value in nums strictly smaller than largest. Let its value be nextLargest. Reduce nums[i] to nextLargest. Return the number of operations to make all elements in nums equal.   Example 1: Input: nums = [5,1,3] Output: 3 Explanation: It takes 3 operations to make all elements in nums equal: 1. largest = 5 at index 0. nextLargest = 3. Reduce nums[0] to 3. nums = [3,1,3]. 2. largest = 3 at index 0. nextLargest = 1. Reduce nums[0] to 1. nums = [1,1,3]. 3. largest = 3 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1]. Example 2: Input: nums = [1,1,1] Output: 0 Explanation: All elements in nums are already equal. Example 3: Input: nums = [1,1,2,2,3] Output: 4 Explanation: It takes 4 operations to make all elements in nums equal: 1. largest = 3 at index 4. nextLargest = 2. Reduce nums[4] to 2. nums = [1,1,2,2,2]. 2. largest = 2 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1,2,2]. 3. largest = 2 at index 3. nextLargest = 1. Reduce nums[3] to 1. nums = [1,1,1,1,2]. 4. largest = 2 at index 4. nextLargest = 1. Reduce nums[4] to 1. nums = [1,1,1,1,1].   Constraints: 1 <= nums.length <= 5 * 104 1 <= nums[i] <= 5 * 104",
        "1420": "You are given a binary string s. You are allowed to perform two types of operations on the string in any sequence: Type-1: Remove the character at the start of the string s and append it to the end of the string. Type-2: Pick any character in s and flip its value, i.e., if its value is '0' it becomes '1' and vice-versa. Return the minimum number of type-2 operations you need to perform such that s becomes alternating. The string is called alternating if no two adjacent characters are equal. For example, the strings \"010\" and \"1010\" are alternating, while the string \"0100\" is not.   Example 1: Input: s = \"111000\" Output: 2 Explanation: Use the first operation two times to make s = \"100011\". Then, use the second operation on the third and sixth elements to make s = \"101010\". Example 2: Input: s = \"010\" Output: 0 Explanation: The string is already alternating. Example 3: Input: s = \"1110\" Output: 1 Explanation: Use the second operation on the second element to make s = \"1010\".   Constraints: 1 <= s.length <= 105 s[i] is either '0' or '1'.",
        "1421": "You have n packages that you are trying to place in boxes, one package in each box. There are m suppliers that each produce boxes of different sizes (with infinite supply). A package can be placed in a box if the size of the package is less than or equal to the size of the box. The package sizes are given as an integer array packages, where packages[i] is the size of the ith package. The suppliers are given as a 2D integer array boxes, where boxes[j] is an array of box sizes that the jth supplier produces. You want to choose a single supplier and use boxes from them such that the total wasted space is minimized. For each package in a box, we define the space wasted to be size of the box - size of the package. The total wasted space is the sum of the space wasted in all the boxes. For example, if you have to fit packages with sizes [2,3,5] and the supplier offers boxes of sizes [4,8], you can fit the packages of size-2 and size-3 into two boxes of size-4 and the package with size-5 into a box of size-8. This would result in a waste of (4-2) + (4-3) + (8-5) = 6. Return the minimum total wasted space by choosing the box supplier optimally, or -1 if it is impossible to fit all the packages inside boxes. Since the answer may be large, return it modulo 109 + 7.   Example 1: Input: packages = [2,3,5], boxes = [[4,8],[2,8]] Output: 6 Explanation: It is optimal to choose the first supplier, using two size-4 boxes and one size-8 box. The total waste is (4-2) + (4-3) + (8-5) = 6. Example 2: Input: packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]] Output: -1 Explanation: There is no box that the package of size 5 can fit in. Example 3: Input: packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]] Output: 9 Explanation: It is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes. The total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9.   Constraints: n == packages.length m == boxes.length 1 <= n <= 105 1 <= m <= 105 1 <= packages[i] <= 105 1 <= boxes[j].length <= 105 1 <= boxes[j][k] <= 105 sum(boxes[j].length) <= 105 The elements in boxes[j] are distinct.",
        "1422": "You are given a 2D integer array ranges and two integers left and right. Each ranges[i] = [starti, endi] represents an inclusive interval between starti and endi. Return true if each integer in the inclusive range [left, right] is covered by at least one interval in ranges. Return false otherwise. An integer x is covered by an interval ranges[i] = [starti, endi] if starti <= x <= endi.   Example 1: Input: ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5 Output: true Explanation: Every integer between 2 and 5 is covered: - 2 is covered by the first range. - 3 and 4 are covered by the second range. - 5 is covered by the third range. Example 2: Input: ranges = [[1,10],[10,20]], left = 21, right = 21 Output: false Explanation: 21 is not covered by any range.   Constraints: 1 <= ranges.length <= 50 1 <= starti <= endi <= 50 1 <= left <= right <= 50",
        "1423": "There are n students in a class numbered from 0 to n - 1. The teacher will give each student a problem starting with the student number 0, then the student number 1, and so on until the teacher reaches the student number n - 1. After that, the teacher will restart the process, starting with the student number 0 again. You are given a 0-indexed integer array chalk and an integer k. There are initially k pieces of chalk. When the student number i is given a problem to solve, they will use chalk[i] pieces of chalk to solve that problem. However, if the current number of chalk pieces is strictly less than chalk[i], then the student number i will be asked to replace the chalk. Return the index of the student that will replace the chalk pieces.   Example 1: Input: chalk = [5,1,5], k = 22 Output: 0 Explanation: The students go in turns as follows: - Student number 0 uses 5 chalk, so k = 17. - Student number 1 uses 1 chalk, so k = 16. - Student number 2 uses 5 chalk, so k = 11. - Student number 0 uses 5 chalk, so k = 6. - Student number 1 uses 1 chalk, so k = 5. - Student number 2 uses 5 chalk, so k = 0. Student number 0 does not have enough chalk, so they will have to replace it. Example 2: Input: chalk = [3,4,1,2], k = 25 Output: 1 Explanation: The students go in turns as follows: - Student number 0 uses 3 chalk so k = 22. - Student number 1 uses 4 chalk so k = 18. - Student number 2 uses 1 chalk so k = 17. - Student number 3 uses 2 chalk so k = 15. - Student number 0 uses 3 chalk so k = 12. - Student number 1 uses 4 chalk so k = 8. - Student number 2 uses 1 chalk so k = 7. - Student number 3 uses 2 chalk so k = 5. - Student number 0 uses 3 chalk so k = 2. Student number 1 does not have enough chalk, so they will have to replace it.   Constraints: chalk.length == n 1 <= n <= 105 1 <= chalk[i] <= 105 1 <= k <= 109",
        "1424": "A k x k magic square is a k x k grid filled with integers such that every row sum, every column sum, and both diagonal sums are all equal. The integers in the magic square do not have to be distinct. Every 1 x 1 grid is trivially a magic square. Given an m x n integer grid, return the size (i.e., the side length k) of the largest magic square that can be found within this grid.   Example 1: Input: grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]] Output: 3 Explanation: The largest magic square has a size of 3. Every row sum, column sum, and diagonal sum of this magic square is equal to 12. - Row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12 - Column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12 - Diagonal sums: 5+4+3 = 6+4+2 = 12 Example 2: Input: grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]] Output: 2   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 50 1 <= grid[i][j] <= 106",
        "1425": "You are given a valid boolean expression as a string expression consisting of the characters '1','0','&' (bitwise AND operator),'|' (bitwise OR operator),'(', and ')'. For example, \"()1|1\" and \"(1)&()\" are not valid while \"1\", \"(((1))|(0))\", and \"1|(0&(1))\" are valid expressions. Return the minimum cost to change the final value of the expression. For example, if expression = \"1|1|(0&0)&1\", its value is 1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1. We want to apply operations so that the new expression evaluates to 0. The cost of changing the final value of an expression is the number of operations performed on the expression. The types of operations are described as follows: Turn a '1' into a '0'. Turn a '0' into a '1'. Turn a '&' into a '|'. Turn a '|' into a '&'. Note: '&' does not take precedence over '|' in the order of calculation. Evaluate parentheses first, then in left-to-right order.   Example 1: Input: expression = \"1&(0|1)\" Output: 1 Explanation: We can turn \"1&(0|1)\" into \"1&(0&1)\" by changing the '|' to a '&' using 1 operation. The new expression evaluates to 0.  Example 2: Input: expression = \"(0&0)&(0&0&0)\" Output: 3 Explanation: We can turn \"(0&0)&(0&0&0)\" into \"(0|1)|(0&0&0)\" using 3 operations. The new expression evaluates to 1. Example 3: Input: expression = \"(0|(1|0&1))\" Output: 1 Explanation: We can turn \"(0|(1|0&1))\" into \"(0|(0|0&1))\" using 1 operation. The new expression evaluates to 0.   Constraints: 1 <= expression.length <= 105 expression only contains '1','0','&','|','(', and ')' All parentheses are properly matched. There will be no empty parentheses (i.e: \"()\" is not a substring of expression).",
        "1426": "You are given an array of strings words (0-indexed). In one operation, pick two distinct indices i and j, where words[i] is a non-empty string, and move any character from words[i] to any position in words[j]. Return true if you can make every string in words equal using any number of operations, and false otherwise.   Example 1: Input: words = [\"abc\",\"aabc\",\"bc\"] Output: true Explanation: Move the first 'a' in words[1] to the front of words[2], to make words[1] = \"abc\" and words[2] = \"abc\". All the strings are now equal to \"abc\", so return true. Example 2: Input: words = [\"ab\",\"a\"] Output: false Explanation: It is impossible to make all the strings equal using the operation.   Constraints: 1 <= words.length <= 100 1 <= words[i].length <= 100 words[i] consists of lowercase English letters.",
        "1427": "A triplet is an array of three integers. You are given a 2D integer array triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet. You are also given an integer array target = [x, y, z] that describes the triplet you want to obtain. To obtain target, you may apply the following operation on triplets any number of times (possibly zero): Choose two indices (0-indexed) i and j (i != j) and update triplets[j] to become [max(ai, aj), max(bi, bj), max(ci, cj)]. For example, if triplets[i] = [2, 5, 3] and triplets[j] = [1, 7, 5], triplets[j] will be updated to [max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5]. Return true if it is possible to obtain the target triplet [x, y, z] as an element of triplets, or false otherwise.   Example 1: Input: triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5] Output: true Explanation: Perform the following operations: - Choose the first and last triplets [[2,5,3],[1,8,4],[1,7,5]]. Update the last triplet to be [max(2,1), max(5,7), max(3,5)] = [2,7,5]. triplets = [[2,5,3],[1,8,4],[2,7,5]] The target triplet [2,7,5] is now an element of triplets. Example 2: Input: triplets = [[3,4,5],[4,5,6]], target = [3,2,5] Output: false Explanation: It is impossible to have [3,2,5] as an element because there is no 2 in any of the triplets. Example 3: Input: triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5] Output: true Explanation: Perform the following operations: - Choose the first and third triplets [[2,5,3],[2,3,4],[1,2,5],[5,2,3]]. Update the third triplet to be [max(2,1), max(5,2), max(3,5)] = [2,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. - Choose the third and fourth triplets [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. Update the fourth triplet to be [max(2,5), max(5,2), max(5,3)] = [5,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,5,5]]. The target triplet [5,5,5] is now an element of triplets.   Constraints: 1 <= triplets.length <= 105 triplets[i].length == target.length == 3 1 <= ai, bi, ci, x, y, z <= 1000",
        "1428": "There is a tournament where n players are participating. The players are standing in a single row and are numbered from 1 to n based on their initial standing position (player 1 is the first player in the row, player 2 is the second player in the row, etc.). The tournament consists of multiple rounds (starting from round number 1). In each round, the ith player from the front of the row competes against the ith player from the end of the row, and the winner advances to the next round. When the number of players is odd for the current round, the player in the middle automatically advances to the next round. For example, if the row consists of players 1, 2, 4, 6, 7 Player 1 competes against player 7. Player 2 competes against player 6. Player 4 automatically advances to the next round. After each round is over, the winners are lined back up in the row based on the original ordering assigned to them initially (ascending order). The players numbered firstPlayer and secondPlayer are the best in the tournament. They can win against any other player before they compete against each other. If any two other players compete against each other, either of them might win, and thus you may choose the outcome of this round. Given the integers n, firstPlayer, and secondPlayer, return an integer array containing two values, the earliest possible round number and the latest possible round number in which these two players will compete against each other, respectively.   Example 1: Input: n = 11, firstPlayer = 2, secondPlayer = 4 Output: [3,4] Explanation: One possible scenario which leads to the earliest round number: First round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 Second round: 2, 3, 4, 5, 6, 11 Third round: 2, 3, 4 One possible scenario which leads to the latest round number: First round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 Second round: 1, 2, 3, 4, 5, 6 Third round: 1, 2, 4 Fourth round: 2, 4 Example 2: Input: n = 5, firstPlayer = 1, secondPlayer = 5 Output: [1,1] Explanation: The players numbered 1 and 5 compete in the first round. There is no way to make them compete in any other round.   Constraints: 2 <= n <= 28 1 <= firstPlayer < secondPlayer <= n",
        "1429": "A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom. Given a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j]. You may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell. You must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.   Example 1: Input: mat = [[1,4],[3,2]] Output: [0,1] Explanation: Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers. Example 2: Input: mat = [[10,20,15],[21,30,14],[7,16,32]] Output: [1,1] Explanation: Both 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers.   Constraints: m == mat.length n == mat[i].length 1 <= m, n <= 500 1 <= mat[i][j] <= 105 No two adjacent cells are equal.",
        "1430": "You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string \"\" if no odd integer exists. A substring is a contiguous sequence of characters within a string.   Example 1: Input: num = \"52\" Output: \"5\" Explanation: The only non-empty substrings are \"5\", \"2\", and \"52\". \"5\" is the only odd number. Example 2: Input: num = \"4206\" Output: \"\" Explanation: There are no odd numbers in \"4206\". Example 3: Input: num = \"35427\" Output: \"35427\" Explanation: \"35427\" is already an odd number.   Constraints: 1 <= num.length <= 105 num only consists of digits and does not contain any leading zeros.",
        "1431": "You are participating in an online chess tournament. There is a chess round that starts every 15 minutes. The first round of the day starts at 00:00, and after every 15 minutes, a new round starts. For example, the second round starts at 00:15, the fourth round starts at 00:45, and the seventh round starts at 01:30. You are given two strings loginTime and logoutTime where: loginTime is the time you will login to the game, and logoutTime is the time you will logout from the game. If logoutTime is earlier than loginTime, this means you have played from loginTime to midnight and from midnight to logoutTime. Return the number of full chess rounds you have played in the tournament. Note: All the given times follow the 24-hour clock. That means the first round of the day starts at 00:00 and the last round of the day starts at 23:45.   Example 1: Input: loginTime = \"09:31\", logoutTime = \"10:14\" Output: 1 Explanation: You played one full round from 09:45 to 10:00. You did not play the full round from 09:30 to 09:45 because you logged in at 09:31 after it began. You did not play the full round from 10:00 to 10:15 because you logged out at 10:14 before it ended. Example 2: Input: loginTime = \"21:30\", logoutTime = \"03:00\" Output: 22 Explanation: You played 10 full rounds from 21:30 to 00:00 and 12 full rounds from 00:00 to 03:00. 10 + 12 = 22.   Constraints: loginTime and logoutTime are in the format hh:mm. 00 <= hh <= 23 00 <= mm <= 59 loginTime and logoutTime are not equal.",
        "1432": "You are given two m x n binary matrices grid1 and grid2 containing only 0's (representing water) and 1's (representing land). An island is a group of 1's connected 4-directionally (horizontal or vertical). Any cells outside of the grid are considered water cells. An island in grid2 is considered a sub-island if there is an island in grid1 that contains all the cells that make up this island in grid2. Return the number of islands in grid2 that are considered sub-islands.   Example 1: Input: grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]] Output: 3 Explanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2. The 1s colored red in grid2 are those considered to be part of a sub-island. There are three sub-islands. Example 2: Input: grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]] Output: 2  Explanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2. The 1s colored red in grid2 are those considered to be part of a sub-island. There are two sub-islands.   Constraints: m == grid1.length == grid2.length n == grid1[i].length == grid2[i].length 1 <= m, n <= 500 grid1[i][j] and grid2[i][j] are either 0 or 1.",
        "1433": "The minimum absolute difference of an array a is defined as the minimum value of |a[i] - a[j]|, where 0 <= i < j < a.length and a[i] != a[j]. If all elements of a are the same, the minimum absolute difference is -1. For example, the minimum absolute difference of the array [5,2,3,7,2] is |2 - 3| = 1. Note that it is not 0 because a[i] and a[j] must be different. You are given an integer array nums and the array queries where queries[i] = [li, ri]. For each query i, compute the minimum absolute difference of the subarray nums[li...ri] containing the elements of nums between the 0-based indices li and ri (inclusive). Return an array ans where ans[i] is the answer to the ith query. A subarray is a contiguous sequence of elements in an array. The value of |x| is defined as: x if x >= 0. -x if x < 0.   Example 1: Input: nums = [1,3,4,8], queries = [[0,1],[1,2],[2,3],[0,3]] Output: [2,1,4,1] Explanation: The queries are processed as follows: - queries[0] = [0,1]: The subarray is [1,3] and the minimum absolute difference is |1-3| = 2. - queries[1] = [1,2]: The subarray is [3,4] and the minimum absolute difference is |3-4| = 1. - queries[2] = [2,3]: The subarray is [4,8] and the minimum absolute difference is |4-8| = 4. - queries[3] = [0,3]: The subarray is [1,3,4,8] and the minimum absolute difference is |3-4| = 1. Example 2: Input: nums = [4,5,2,2,7,10], queries = [[2,3],[0,2],[0,5],[3,5]] Output: [-1,1,1,3] Explanation: The queries are processed as follows: - queries[0] = [2,3]: The subarray is [2,2] and the minimum absolute difference is -1 because all the   elements are the same. - queries[1] = [0,2]: The subarray is [4,5,2] and the minimum absolute difference is |4-5| = 1. - queries[2] = [0,5]: The subarray is [4,5,2,2,7,10] and the minimum absolute difference is |4-5| = 1. - queries[3] = [3,5]: The subarray is [2,7,10] and the minimum absolute difference is |7-10| = 3.   Constraints: 2 <= nums.length <= 105 1 <= nums[i] <= 100 1 <= queries.length <= 2 * 104 0 <= li < ri < nums.length",
        "1434": "SQL Schema Pandas Schema",
        "1435": "Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true. The array nums is strictly increasing if nums[i - 1] < nums[i] for each index (1 <= i < nums.length).   Example 1: Input: nums = [1,2,10,5,7] Output: true Explanation: By removing 10 at index 2 from nums, it becomes [1,2,5,7]. [1,2,5,7] is strictly increasing, so return true. Example 2: Input: nums = [2,3,1,2] Output: false Explanation: [3,1,2] is the result of removing the element at index 0. [2,1,2] is the result of removing the element at index 1. [2,3,2] is the result of removing the element at index 2. [2,3,1] is the result of removing the element at index 3. No resulting array is strictly increasing, so return false. Example 3: Input: nums = [1,1,1] Output: false Explanation: The result of removing any element is [1,1]. [1,1] is not strictly increasing, so return false.   Constraints: 2 <= nums.length <= 1000 1 <= nums[i] <= 1000",
        "1436": "Given two strings s and part, perform the following operation on s until all occurrences of the substring part are removed: Find the leftmost occurrence of the substring part and remove it from s. Return s after removing all occurrences of part. A substring is a contiguous sequence of characters in a string.   Example 1: Input: s = \"daabcbaabcbc\", part = \"abc\" Output: \"dab\" Explanation: The following operations are done: - s = \"daabcbaabcbc\", remove \"abc\" starting at index 2, so s = \"dabaabcbc\". - s = \"dabaabcbc\", remove \"abc\" starting at index 4, so s = \"dababc\". - s = \"dababc\", remove \"abc\" starting at index 3, so s = \"dab\". Now s has no occurrences of \"abc\". Example 2: Input: s = \"axxxxyyyyb\", part = \"xy\" Output: \"ab\" Explanation: The following operations are done: - s = \"axxxxyyyyb\", remove \"xy\" starting at index 4 so s = \"axxxyyyb\". - s = \"axxxyyyb\", remove \"xy\" starting at index 3 so s = \"axxyyb\". - s = \"axxyyb\", remove \"xy\" starting at index 2 so s = \"axyb\". - s = \"axyb\", remove \"xy\" starting at index 1 so s = \"ab\". Now s has no occurrences of \"xy\".   Constraints: 1 <= s.length <= 1000 1 <= part.length <= 1000 s and part consists of lowercase English letters.",
        "1437": "The alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices. For example, the alternating sum of [4,2,5,3] is (4 + 5) - (2 + 3) = 4. Given an array nums, return the maximum alternating sum of any subsequence of nums (after reindexing the elements of the subsequence). A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.   Example 1: Input: nums = [4,2,5,3] Output: 7 Explanation: It is optimal to choose the subsequence [4,2,5] with alternating sum (4 + 5) - 2 = 7. Example 2: Input: nums = [5,6,7,8] Output: 8 Explanation: It is optimal to choose the subsequence [8] with alternating sum 8. Example 3: Input: nums = [6,2,1,2,4,5] Output: 10 Explanation: It is optimal to choose the subsequence [6,1,5] with alternating sum (6 + 5) - 1 = 10.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105",
        "1438": "You have a movie renting company consisting of n shops. You want to implement a renting system that supports searching for, booking, and returning movies. The system should also support generating a report of the currently rented movies. Each movie is given as a 2D integer array entries where entries[i] = [shopi, moviei, pricei] indicates that there is a copy of movie moviei at shop shopi with a rental price of pricei. Each shop carries at most one copy of a movie moviei. The system should support the following functions: Search: Finds the cheapest 5 shops that have an unrented copy of a given movie. The shops should be sorted by price in ascending order, and in case of a tie, the one with the smaller shopi should appear first. If there are less than 5 matching shops, then all of them should be returned. If no shop has an unrented copy, then an empty list should be returned. Rent: Rents an unrented copy of a given movie from a given shop. Drop: Drops off a previously rented copy of a given movie at a given shop. Report: Returns the cheapest 5 rented movies (possibly of the same movie ID) as a 2D list res where res[j] = [shopj, moviej] describes that the jth cheapest rented movie moviej was rented from the shop shopj. The movies in res should be sorted by price in ascending order, and in case of a tie, the one with the smaller shopj should appear first, and if there is still tie, the one with the smaller moviej should appear first. If there are fewer than 5 rented movies, then all of them should be returned. If no movies are currently being rented, then an empty list should be returned. Implement the MovieRentingSystem class: MovieRentingSystem(int n, int[][] entries) Initializes the MovieRentingSystem object with n shops and the movies in entries. List<Integer> search(int movie) Returns a list of shops that have an unrented copy of the given movie as described above. void rent(int shop, int movie) Rents the given movie from the given shop. void drop(int shop, int movie) Drops off a previously rented movie at the given shop. List<List<Integer>> report() Returns a list of cheapest rented movies as described above. Note: The test cases will be generated such that rent will only be called if the shop has an unrented copy of the movie, and drop will only be called if the shop had previously rented out the movie.   Example 1: Input [\"MovieRentingSystem\", \"search\", \"rent\", \"rent\", \"report\", \"drop\", \"search\"] [[3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]], [1], [0, 1], [1, 2], [], [1, 2], [2]] Output [null, [1, 0, 2], null, null, [[0, 1], [1, 2]], null, [0, 1]]  Explanation MovieRentingSystem movieRentingSystem = new MovieRentingSystem(3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]); movieRentingSystem.search(1);  // return [1, 0, 2], Movies of ID 1 are unrented at shops 1, 0, and 2. Shop 1 is cheapest; shop 0 and 2 are the same price, so order by shop number. movieRentingSystem.rent(0, 1); // Rent movie 1 from shop 0. Unrented movies at shop 0 are now [2,3]. movieRentingSystem.rent(1, 2); // Rent movie 2 from shop 1. Unrented movies at shop 1 are now [1]. movieRentingSystem.report();   // return [[0, 1], [1, 2]]. Movie 1 from shop 0 is cheapest, followed by movie 2 from shop 1. movieRentingSystem.drop(1, 2); // Drop off movie 2 at shop 1. Unrented movies at shop 1 are now [1,2]. movieRentingSystem.search(2);  // return [0, 1]. Movies of ID 2 are unrented at shops 0 and 1. Shop 0 is cheapest, followed by shop 1.   Constraints: 1 <= n <= 3 * 105 1 <= entries.length <= 105 0 <= shopi < n 1 <= moviei, pricei <= 104 Each shop carries at most one copy of a movie moviei. At most 105 calls in total will be made to search, rent, drop and report.",
        "1439": "The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d). For example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) = 16. Given an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized. Return the maximum such product difference.   Example 1: Input: nums = [5,6,2,7,4] Output: 34 Explanation: We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4). The product difference is (6 * 7) - (2 * 4) = 34. Example 2: Input: nums = [4,2,5,9,7,4,8] Output: 64 Explanation: We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4). The product difference is (9 * 8) - (2 * 4) = 64.   Constraints: 4 <= nums.length <= 104 1 <= nums[i] <= 104",
        "1440": "You are given an m x n integer matrix grid, where m and n are both even integers, and an integer k. The matrix is composed of several layers, which is shown in the below image, where each color is its own layer: A cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix. To cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the counter-clockwise direction. An example rotation is shown below: Return the matrix after applying k cyclic rotations to it.   Example 1: Input: grid = [[40,10],[30,20]], k = 1 Output: [[10,20],[40,30]] Explanation: The figures above represent the grid at every state. Example 2: Input: grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2 Output: [[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]] Explanation: The figures above represent the grid at every state.   Constraints: m == grid.length n == grid[i].length 2 <= m, n <= 50 Both m and n are even integers. 1 <= grid[i][j] <= 5000 1 <= k <= 109",
        "1441": "You are an ant tasked with adding n new rooms numbered 0 to n-1 to your colony. You are given the expansion plan as a 0-indexed integer array of length n, prevRoom, where prevRoom[i] indicates that you must build room prevRoom[i] before building room i, and these two rooms must be connected directly. Room 0 is already built, so prevRoom[0] = -1. The expansion plan is given such that once all the rooms are built, every room will be reachable from room 0. You can only build one room at a time, and you can travel freely between rooms you have already built only if they are connected. You can choose to build any room as long as its previous room is already built. Return the number of different orders you can build all the rooms in. Since the answer may be large, return it modulo 109 + 7.   Example 1: Input: prevRoom = [-1,0,1] Output: 1 Explanation: There is only one way to build the additional rooms: 0 → 1 → 2 Example 2: Input: prevRoom = [-1,0,0,1,2] Output: 6 Explanation: The 6 ways are: 0 → 1 → 3 → 2 → 4 0 → 2 → 4 → 1 → 3 0 → 1 → 2 → 3 → 4 0 → 1 → 2 → 4 → 3 0 → 2 → 1 → 3 → 4 0 → 2 → 1 → 4 → 3   Constraints: n == prevRoom.length 2 <= n <= 105 prevRoom[0] == -1 0 <= prevRoom[i] < n for all 1 <= i < n Every room is reachable from room 0 once all the rooms are built.",
        "1442": "Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it. A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).   Example 1: Input: nums = [0,2,1,5,3,4] Output: [0,1,2,4,5,3] Explanation: The array ans is built as follows:  ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]     = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]     = [0,1,2,4,5,3] Example 2: Input: nums = [5,0,1,2,3,4] Output: [4,5,0,1,2,3] Explanation: The array ans is built as follows: ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]     = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]     = [4,5,0,1,2,3]   Constraints: 1 <= nums.length <= 1000 0 <= nums[i] < nums.length The elements in nums are distinct.   Follow-up: Can you solve it without using an extra space (i.e., O(1) memory)?",
        "1443": "You are playing a video game where you are defending your city from a group of n monsters. You are given a 0-indexed integer array dist of size n, where dist[i] is the initial distance in kilometers of the ith monster from the city. The monsters walk toward the city at a constant speed. The speed of each monster is given to you in an integer array speed of size n, where speed[i] is the speed of the ith monster in kilometers per minute. You have a weapon that, once fully charged, can eliminate a single monster. However, the weapon takes one minute to charge. The weapon is fully charged at the very start. You lose when any monster reaches your city. If a monster reaches the city at the exact moment the weapon is fully charged, it counts as a loss, and the game ends before you can use your weapon. Return the maximum number of monsters that you can eliminate before you lose, or n if you can eliminate all the monsters before they reach the city.   Example 1: Input: dist = [1,3,4], speed = [1,1,1] Output: 3 Explanation: In the beginning, the distances of the monsters are [1,3,4]. You eliminate the first monster. After a minute, the distances of the monsters are [X,2,3]. You eliminate the second monster. After a minute, the distances of the monsters are [X,X,2]. You eliminate the third monster. All 3 monsters can be eliminated. Example 2: Input: dist = [1,1,2,3], speed = [1,1,1,1] Output: 1 Explanation: In the beginning, the distances of the monsters are [1,1,2,3]. You eliminate the first monster. After a minute, the distances of the monsters are [X,0,1,2], so you lose. You can only eliminate 1 monster. Example 3: Input: dist = [3,2,4], speed = [5,3,2] Output: 1 Explanation: In the beginning, the distances of the monsters are [3,2,4]. You eliminate the first monster. After a minute, the distances of the monsters are [X,0,2], so you lose. You can only eliminate 1 monster.   Constraints: n == dist.length == speed.length 1 <= n <= 105 1 <= dist[i], speed[i] <= 105",
        "1444": "A digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7). For example, \"2582\" is good because the digits (2 and 8) at even positions are even and the digits (5 and 2) at odd positions are prime. However, \"3245\" is not good because 3 is at an even index but is not even. Given an integer n, return the total number of good digit strings of length n. Since the answer may be large, return it modulo 109 + 7. A digit string is a string consisting of digits 0 through 9 that may contain leading zeros.   Example 1: Input: n = 1 Output: 5 Explanation: The good numbers of length 1 are \"0\", \"2\", \"4\", \"6\", \"8\". Example 2: Input: n = 4 Output: 400 Example 3: Input: n = 50 Output: 564908303   Constraints: 1 <= n <= 1015",
        "1445": "There is a country of n cities numbered from 0 to n - 1. In this country, there is a road connecting every pair of cities. There are m friends numbered from 0 to m - 1 who are traveling through the country. Each one of them will take a path consisting of some cities. Each path is represented by an integer array that contains the visited cities in order. The path may contain a city more than once, but the same city will not be listed consecutively. Given an integer n and a 2D integer array paths where paths[i] is an integer array representing the path of the ith friend, return the length of the longest common subpath that is shared by every friend's path, or 0 if there is no common subpath at all. A subpath of a path is a contiguous sequence of cities within that path.   Example 1: Input: n = 5, paths = [[0,1,2,3,4],                        [2,3,4],                        [4,0,1,2,3]] Output: 2 Explanation: The longest common subpath is [2,3]. Example 2: Input: n = 3, paths = [[0],[1],[2]] Output: 0 Explanation: There is no common subpath shared by the three paths. Example 3: Input: n = 5, paths = [[0,1,2,3,4],                        [4,3,2,1,0]] Output: 1 Explanation: The possible longest common subpaths are [0], [1], [2], [3], and [4]. All have a length of 1.   Constraints: 1 <= n <= 105 m == paths.length 2 <= m <= 105 sum(paths[i].length) <= 105 0 <= paths[i][j] < n The same city is not listed multiple times consecutively in paths[i].",
        "1446": "A square triple (a,b,c) is a triple where a, b, and c are integers and a2 + b2 = c2. Given an integer n, return the number of square triples such that 1 <= a, b, c <= n.   Example 1: Input: n = 5 Output: 2 Explanation: The square triples are (3,4,5) and (4,3,5). Example 2: Input: n = 10 Output: 4 Explanation: The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10).   Constraints: 1 <= n <= 250",
        "1447": "You are given an m x n matrix maze (0-indexed) with empty cells (represented as '.') and walls (represented as '+'). You are also given the entrance of the maze, where entrance = [entrancerow, entrancecol] denotes the row and column of the cell you are initially standing at. In one step, you can move one cell up, down, left, or right. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the nearest exit from the entrance. An exit is defined as an empty cell that is at the border of the maze. The entrance does not count as an exit. Return the number of steps in the shortest path from the entrance to the nearest exit, or -1 if no such path exists.   Example 1: Input: maze = [[\"+\",\"+\",\".\",\"+\"],[\".\",\".\",\".\",\"+\"],[\"+\",\"+\",\"+\",\".\"]], entrance = [1,2] Output: 1 Explanation: There are 3 exits in this maze at [1,0], [0,2], and [2,3]. Initially, you are at the entrance cell [1,2]. - You can reach [1,0] by moving 2 steps left. - You can reach [0,2] by moving 1 step up. It is impossible to reach [2,3] from the entrance. Thus, the nearest exit is [0,2], which is 1 step away. Example 2: Input: maze = [[\"+\",\"+\",\"+\"],[\".\",\".\",\".\"],[\"+\",\"+\",\"+\"]], entrance = [1,0] Output: 2 Explanation: There is 1 exit in this maze at [1,2]. [1,0] does not count as an exit since it is the entrance cell. Initially, you are at the entrance cell [1,0]. - You can reach [1,2] by moving 2 steps right. Thus, the nearest exit is [1,2], which is 2 steps away. Example 3: Input: maze = [[\".\",\"+\"]], entrance = [0,0] Output: -1 Explanation: There are no exits in this maze.   Constraints: maze.length == m maze[i].length == n 1 <= m, n <= 100 maze[i][j] is either '.' or '+'. entrance.length == 2 0 <= entrancerow < m 0 <= entrancecol < n entrance will always be an empty cell.",
        "1448": "There is a country of n cities numbered from 0 to n - 1 where all the cities are connected by bi-directional roads. The roads are represented as a 2D integer array edges where edges[i] = [xi, yi, timei] denotes a road between cities xi and yi that takes timei minutes to travel. There may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself. Each time you pass through a city, you must pay a passing fee. This is represented as a 0-indexed integer array passingFees of length n where passingFees[j] is the amount of dollars you must pay when you pass through city j. In the beginning, you are at city 0 and want to reach city n - 1 in maxTime minutes or less. The cost of your journey is the summation of passing fees for each city that you passed through at some moment of your journey (including the source and destination cities). Given maxTime, edges, and passingFees, return the minimum cost to complete your journey, or -1 if you cannot complete it within maxTime minutes.   Example 1: Input: maxTime = 30, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3] Output: 11 Explanation: The path to take is 0 -> 1 -> 2 -> 5, which takes 30 minutes and has $11 worth of passing fees. Example 2: Input: maxTime = 29, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3] Output: 48 Explanation: The path to take is 0 -> 3 -> 4 -> 5, which takes 26 minutes and has $48 worth of passing fees. You cannot take path 0 -> 1 -> 2 -> 5 since it would take too long. Example 3: Input: maxTime = 25, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3] Output: -1 Explanation: There is no way to reach city 5 from city 0 within 25 minutes.   Constraints: 1 <= maxTime <= 1000 n == passingFees.length 2 <= n <= 1000 n - 1 <= edges.length <= 1000 0 <= xi, yi <= n - 1 1 <= timei <= 1000 1 <= passingFees[j] <= 1000  The graph may contain multiple edges between two nodes. The graph does not contain self loops.",
        "1449": "Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed). Specifically, ans is the concatenation of two nums arrays. Return the array ans.   Example 1: Input: nums = [1,2,1] Output: [1,2,1,1,2,1] Explanation: The array ans is formed as follows: - ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]] - ans = [1,2,1,1,2,1] Example 2: Input: nums = [1,3,2,1] Output: [1,3,2,1,1,3,2,1] Explanation: The array ans is formed as follows: - ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]] - ans = [1,3,2,1,1,3,2,1]   Constraints: n == nums.length 1 <= n <= 1000 1 <= nums[i] <= 1000",
        "1450": "Given a string s, return the number of unique palindromes of length three that are a subsequence of s. Note that even if there are multiple ways to obtain the same subsequence, it is still only counted once. A palindrome is a string that reads the same forwards and backwards. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. For example, \"ace\" is a subsequence of \"abcde\".   Example 1: Input: s = \"aabca\" Output: 3 Explanation: The 3 palindromic subsequences of length 3 are: - \"aba\" (subsequence of \"aabca\") - \"aaa\" (subsequence of \"aabca\") - \"aca\" (subsequence of \"aabca\") Example 2: Input: s = \"adc\" Output: 0 Explanation: There are no palindromic subsequences of length 3 in \"adc\". Example 3: Input: s = \"bbcbaba\" Output: 4 Explanation: The 4 palindromic subsequences of length 3 are: - \"bbb\" (subsequence of \"bbcbaba\") - \"bcb\" (subsequence of \"bbcbaba\") - \"bab\" (subsequence of \"bbcbaba\") - \"aba\" (subsequence of \"bbcbaba\")   Constraints: 3 <= s.length <= 105 s consists of only lowercase English letters.",
        "1451": "You are given two integers m and n. Consider an m x n grid where each cell is initially white. You can paint each cell red, green, or blue. All cells must be painted. Return the number of ways to color the grid with no two adjacent cells having the same color. Since the answer can be very large, return it modulo 109 + 7.   Example 1: Input: m = 1, n = 1 Output: 3 Explanation: The three possible colorings are shown in the image above. Example 2: Input: m = 1, n = 2 Output: 6 Explanation: The six possible colorings are shown in the image above. Example 3: Input: m = 5, n = 5 Output: 580986   Constraints: 1 <= m <= 5 1 <= n <= 1000",
        "1452": "SQL Schema Pandas Schema",
        "1453": "There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly. Given a string text of words separated by a single space (no leading or trailing spaces) and a string brokenLetters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.   Example 1: Input: text = \"hello world\", brokenLetters = \"ad\" Output: 1 Explanation: We cannot type \"world\" because the 'd' key is broken. Example 2: Input: text = \"leet code\", brokenLetters = \"lt\" Output: 1 Explanation: We cannot type \"leet\" because the 'l' and 't' keys are broken. Example 3: Input: text = \"leet code\", brokenLetters = \"e\" Output: 0 Explanation: We cannot type either word because the 'e' key is broken.   Constraints: 1 <= text.length <= 104 0 <= brokenLetters.length <= 26 text consists of words separated by a single space without any leading or trailing spaces. Each word only consists of lowercase English letters. brokenLetters consists of distinct lowercase English letters.",
        "1454": "You are given a strictly increasing integer array rungs that represents the height of rungs on a ladder. You are currently on the floor at height 0, and you want to reach the last rung. You are also given an integer dist. You can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is at most dist. You are able to insert rungs at any positive integer height if a rung is not already there. Return the minimum number of rungs that must be added to the ladder in order for you to climb to the last rung.   Example 1: Input: rungs = [1,3,5,10], dist = 2 Output: 2 Explanation: You currently cannot reach the last rung. Add rungs at heights 7 and 8 to climb this ladder.  The ladder will now have rungs at [1,3,5,7,8,10]. Example 2: Input: rungs = [3,6,8,10], dist = 3 Output: 0 Explanation: This ladder can be climbed without adding additional rungs. Example 3: Input: rungs = [3,4,6,7], dist = 2 Output: 1 Explanation: You currently cannot reach the first rung from the ground. Add a rung at height 1 to climb this ladder. The ladder will now have rungs at [1,3,4,6,7].   Constraints: 1 <= rungs.length <= 105 1 <= rungs[i] <= 109 1 <= dist <= 109 rungs is strictly increasing.",
        "1455": "You are given an m x n integer matrix points (0-indexed). Starting with 0 points, you want to maximize the number of points you can get from the matrix. To gain points, you must pick one cell in each row. Picking the cell at coordinates (r, c) will add points[r][c] to your score. However, you will lose points if you pick a cell too far from the cell that you picked in the previous row. For every two adjacent rows r and r + 1 (where 0 <= r < m - 1), picking cells at coordinates (r, c1) and (r + 1, c2) will subtract abs(c1 - c2) from your score. Return the maximum number of points you can achieve. abs(x) is defined as: x for x >= 0. -x for x < 0.   Example 1: Input: points = [[1,2,3],[1,5,1],[3,1,1]] Output: 9 Explanation: The blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0). You add 3 + 5 + 3 = 11 to your score. However, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score. Your final score is 11 - 2 = 9. Example 2: Input: points = [[1,5],[2,3],[4,2]] Output: 11 Explanation: The blue cells denote the optimal cells to pick, which have coordinates (0, 1), (1, 1), and (2, 0). You add 5 + 3 + 4 = 12 to your score. However, you must subtract abs(1 - 1) + abs(1 - 0) = 1 from your score. Your final score is 12 - 1 = 11.   Constraints: m == points.length n == points[r].length 1 <= m, n <= 105 1 <= m * n <= 105 0 <= points[r][c] <= 105",
        "1456": "There is a rooted tree consisting of n nodes numbered 0 to n - 1. Each node's number denotes its unique genetic value (i.e. the genetic value of node x is x). The genetic difference between two genetic values is defined as the bitwise-XOR of their values. You are given the integer array parents, where parents[i] is the parent for node i. If node x is the root of the tree, then parents[x] == -1. You are also given the array queries where queries[i] = [nodei, vali]. For each query i, find the maximum genetic difference between vali and pi, where pi is the genetic value of any node that is on the path between nodei and the root (including nodei and the root). More formally, you want to maximize vali XOR pi. Return an array ans where ans[i] is the answer to the ith query.   Example 1: Input: parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]] Output: [2,3,7] Explanation: The queries are processed as follows: - [0,2]: The node with the maximum genetic difference is 0, with a difference of 2 XOR 0 = 2. - [3,2]: The node with the maximum genetic difference is 1, with a difference of 2 XOR 1 = 3. - [2,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7. Example 2: Input: parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]] Output: [6,14,7] Explanation: The queries are processed as follows: - [4,6]: The node with the maximum genetic difference is 0, with a difference of 6 XOR 0 = 6. - [1,15]: The node with the maximum genetic difference is 1, with a difference of 15 XOR 1 = 14. - [0,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.   Constraints: 2 <= parents.length <= 105 0 <= parents[i] <= parents.length - 1 for every node i that is not the root. parents[root] == -1 1 <= queries.length <= 3 * 104 0 <= nodei <= parents.length - 1 0 <= vali <= 2 * 105",
        "1457": "Given a string s, return true if s is a good string, or false otherwise. A string s is good if all the characters that appear in s have the same number of occurrences (i.e., the same frequency).   Example 1: Input: s = \"abacbc\" Output: true Explanation: The characters that appear in s are 'a', 'b', and 'c'. All characters occur 2 times in s. Example 2: Input: s = \"aaabb\" Output: false Explanation: The characters that appear in s are 'a' and 'b'. 'a' occurs 3 times while 'b' occurs 2 times, which is not the same number of times.   Constraints: 1 <= s.length <= 1000 s consists of lowercase English letters.",
        "1458": "There is a party where n friends numbered from 0 to n - 1 are attending. There is an infinite number of chairs in this party that are numbered from 0 to infinity. When a friend arrives at the party, they sit on the unoccupied chair with the smallest number. For example, if chairs 0, 1, and 5 are occupied when a friend comes, they will sit on chair number 2. When a friend leaves the party, their chair becomes unoccupied at the moment they leave. If another friend arrives at that same moment, they can sit in that chair. You are given a 0-indexed 2D integer array times where times[i] = [arrivali, leavingi], indicating the arrival and leaving times of the ith friend respectively, and an integer targetFriend. All arrival times are distinct. Return the chair number that the friend numbered targetFriend will sit on.   Example 1: Input: times = [[1,4],[2,3],[4,6]], targetFriend = 1 Output: 1 Explanation:  - Friend 0 arrives at time 1 and sits on chair 0. - Friend 1 arrives at time 2 and sits on chair 1. - Friend 1 leaves at time 3 and chair 1 becomes empty. - Friend 0 leaves at time 4 and chair 0 becomes empty. - Friend 2 arrives at time 4 and sits on chair 0. Since friend 1 sat on chair 1, we return 1. Example 2: Input: times = [[3,10],[1,5],[2,6]], targetFriend = 0 Output: 2 Explanation:  - Friend 1 arrives at time 1 and sits on chair 0. - Friend 2 arrives at time 2 and sits on chair 1. - Friend 0 arrives at time 3 and sits on chair 2. - Friend 1 leaves at time 5 and chair 0 becomes empty. - Friend 2 leaves at time 6 and chair 1 becomes empty. - Friend 0 leaves at time 10 and chair 2 becomes empty. Since friend 0 sat on chair 2, we return 2.   Constraints: n == times.length 2 <= n <= 104 times[i].length == 2 1 <= arrivali < leavingi <= 105 0 <= targetFriend <= n - 1 Each arrivali time is distinct.",
        "1459": "There is a long and thin painting that can be represented by a number line. The painting was painted with multiple overlapping segments where each segment was painted with a unique color. You are given a 2D integer array segments, where segments[i] = [starti, endi, colori] represents the half-closed segment [starti, endi) with colori as the color. The colors in the overlapping segments of the painting were mixed when it was painted. When two or more colors mix, they form a new color that can be represented as a set of mixed colors. For example, if colors 2, 4, and 6 are mixed, then the resulting mixed color is {2,4,6}. For the sake of simplicity, you should only output the sum of the elements in the set rather than the full set. You want to describe the painting with the minimum number of non-overlapping half-closed segments of these mixed colors. These segments can be represented by the 2D array painting where painting[j] = [leftj, rightj, mixj] describes a half-closed segment [leftj, rightj) with the mixed color sum of mixj. For example, the painting created with segments = [[1,4,5],[1,7,7]] can be described by painting = [[1,4,12],[4,7,7]] because: [1,4) is colored {5,7} (with a sum of 12) from both the first and second segments. [4,7) is colored {7} from only the second segment. Return the 2D array painting describing the finished painting (excluding any parts that are not painted). You may return the segments in any order. A half-closed segment [a, b) is the section of the number line between points a and b including point a and not including point b.   Example 1: Input: segments = [[1,4,5],[4,7,7],[1,7,9]] Output: [[1,4,14],[4,7,16]] Explanation: The painting can be described as follows: - [1,4) is colored {5,9} (with a sum of 14) from the first and third segments. - [4,7) is colored {7,9} (with a sum of 16) from the second and third segments. Example 2: Input: segments = [[1,7,9],[6,8,15],[8,10,7]] Output: [[1,6,9],[6,7,24],[7,8,15],[8,10,7]] Explanation: The painting can be described as follows: - [1,6) is colored 9 from the first segment. - [6,7) is colored {9,15} (with a sum of 24) from the first and second segments. - [7,8) is colored 15 from the second segment. - [8,10) is colored 7 from the third segment. Example 3: Input: segments = [[1,4,5],[1,4,7],[4,7,1],[4,7,11]] Output: [[1,4,12],[4,7,12]] Explanation: The painting can be described as follows: - [1,4) is colored {5,7} (with a sum of 12) from the first and second segments. - [4,7) is colored {1,11} (with a sum of 12) from the third and fourth segments. Note that returning a single segment [1,7) is incorrect because the mixed color sets are different.   Constraints: 1 <= segments.length <= 2 * 104 segments[i].length == 3 1 <= starti < endi <= 105 1 <= colori <= 109 Each colori is distinct.",
        "1460": "There are n people standing in a queue, and they numbered from 0 to n - 1 in left to right order. You are given an array heights of distinct integers where heights[i] represents the height of the ith person. A person can see another person to their right in the queue if everybody in between is shorter than both of them. More formally, the ith person can see the jth person if i < j and min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1]). Return an array answer of length n where answer[i] is the number of people the ith person can see to their right in the queue.   Example 1: Input: heights = [10,6,8,5,11,9] Output: [3,1,2,1,1,0] Explanation: Person 0 can see person 1, 2, and 4. Person 1 can see person 2. Person 2 can see person 3 and 4. Person 3 can see person 4. Person 4 can see person 5. Person 5 can see no one since nobody is to the right of them. Example 2: Input: heights = [5,1,2,3,10] Output: [4,1,1,1,0]   Constraints: n == heights.length 1 <= n <= 105 1 <= heights[i] <= 105 All the values of heights are unique.",
        "1461": "You are given a string s consisting of lowercase English letters, and an integer k. Your task is to convert the string into an integer by a special process, and then transform it by summing its digits repeatedly k times. More specifically, perform the following steps: Convert s into an integer by replacing each letter with its position in the alphabet (i.e. replace 'a' with 1, 'b' with 2, ..., 'z' with 26). Transform the integer by replacing it with the sum of its digits. Repeat the transform operation (step 2) k times in total. For example, if s = \"zbax\" and k = 2, then the resulting integer would be 8 by the following operations: Convert: \"zbax\" ➝ \"(26)(2)(1)(24)\" ➝ \"262124\" ➝ 262124 Transform #1: 262124 ➝ 2 + 6 + 2 + 1 + 2 + 4 ➝ 17 Transform #2: 17 ➝ 1 + 7 ➝ 8 Return the resulting integer after performing the operations described above.   Example 1: Input: s = \"iiii\", k = 1 Output: 36 Explanation: The operations are as follows: - Convert: \"iiii\" ➝ \"(9)(9)(9)(9)\" ➝ \"9999\" ➝ 9999 - Transform #1: 9999 ➝ 9 + 9 + 9 + 9 ➝ 36 Thus the resulting integer is 36. Example 2: Input: s = \"leetcode\", k = 2 Output: 6 Explanation: The operations are as follows: - Convert: \"leetcode\" ➝ \"(12)(5)(5)(20)(3)(15)(4)(5)\" ➝ \"12552031545\" ➝ 12552031545 - Transform #1: 12552031545 ➝ 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 ➝ 33 - Transform #2: 33 ➝ 3 + 3 ➝ 6 Thus the resulting integer is 6. Example 3: Input: s = \"zbax\", k = 2 Output: 8   Constraints: 1 <= s.length <= 100 1 <= k <= 10 s consists of lowercase English letters.",
        "1462": "You are given a string num, which represents a large integer. You are also given a 0-indexed integer array change of length 10 that maps each digit 0-9 to another digit. More formally, digit d maps to digit change[d]. You may choose to mutate a single substring of num. To mutate a substring, replace each digit num[i] with the digit it maps to in change (i.e. replace num[i] with change[num[i]]). Return a string representing the largest possible integer after mutating (or choosing not to) a single substring of num. A substring is a contiguous sequence of characters within the string.   Example 1: Input: num = \"132\", change = [9,8,5,0,3,6,4,2,6,8] Output: \"832\" Explanation: Replace the substring \"1\": - 1 maps to change[1] = 8. Thus, \"132\" becomes \"832\". \"832\" is the largest number that can be created, so return it. Example 2: Input: num = \"021\", change = [9,4,3,5,7,2,1,9,0,6] Output: \"934\" Explanation: Replace the substring \"021\": - 0 maps to change[0] = 9. - 2 maps to change[2] = 3. - 1 maps to change[1] = 4. Thus, \"021\" becomes \"934\". \"934\" is the largest number that can be created, so return it. Example 3: Input: num = \"5\", change = [1,4,7,5,3,2,5,6,9,4] Output: \"5\" Explanation: \"5\" is already the largest number that can be created, so return it.   Constraints: 1 <= num.length <= 105 num consists of only digits 0-9. change.length == 10 0 <= change[d] <= 9",
        "1463": "",
        "1464": "Due to a bug, there are many duplicate folders in a file system. You are given a 2D array paths, where paths[i] is an array representing an absolute path to the ith folder in the file system. For example, [\"one\", \"two\", \"three\"] represents the path \"/one/two/three\". Two folders (not necessarily on the same level) are identical if they contain the same non-empty set of identical subfolders and underlying subfolder structure. The folders do not need to be at the root level to be identical. If two or more folders are identical, then mark the folders as well as all their subfolders. For example, folders \"/a\" and \"/b\" in the file structure below are identical. They (as well as their subfolders) should all be marked: /a /a/x /a/x/y /a/z /b /b/x /b/x/y /b/z However, if the file structure also included the path \"/b/w\", then the folders \"/a\" and \"/b\" would not be identical. Note that \"/a/x\" and \"/b/x\" would still be considered identical even with the added folder. Once all the identical folders and their subfolders have been marked, the file system will delete all of them. The file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted. Return the 2D array ans containing the paths of the remaining folders after deleting all the marked folders. The paths may be returned in any order.   Example 1: Input: paths = [[\"a\"],[\"c\"],[\"d\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"d\",\"a\"]] Output: [[\"d\"],[\"d\",\"a\"]] Explanation: The file structure is as shown. Folders \"/a\" and \"/c\" (and their subfolders) are marked for deletion because they both contain an empty folder named \"b\". Example 2: Input: paths = [[\"a\"],[\"c\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"a\",\"b\",\"x\"],[\"a\",\"b\",\"x\",\"y\"],[\"w\"],[\"w\",\"y\"]] Output: [[\"c\"],[\"c\",\"b\"],[\"a\"],[\"a\",\"b\"]] Explanation: The file structure is as shown.  Folders \"/a/b/x\" and \"/w\" (and their subfolders) are marked for deletion because they both contain an empty folder named \"y\". Note that folders \"/a\" and \"/c\" are identical after the deletion, but they are not deleted because they were not marked beforehand. Example 3: Input: paths = [[\"a\",\"b\"],[\"c\",\"d\"],[\"c\"],[\"a\"]] Output: [[\"c\"],[\"c\",\"d\"],[\"a\"],[\"a\",\"b\"]] Explanation: All folders are unique in the file system. Note that the returned array can be in a different order as the order does not matter.   Constraints: 1 <= paths.length <= 2 * 104 1 <= paths[i].length <= 500 1 <= paths[i][j].length <= 10 1 <= sum(paths[i][j].length) <= 2 * 105 path[i][j] consists of lowercase English letters. No two paths lead to the same folder. For any folder not at the root level, its parent folder will also be in the input.",
        "1465": "In a garden represented as an infinite 2D grid, there is an apple tree planted at every integer coordinate. The apple tree planted at an integer coordinate (i, j) has |i| + |j| apples growing on it. You will buy an axis-aligned square plot of land that is centered at (0, 0). Given an integer neededApples, return the minimum perimeter of a plot such that at least neededApples apples are inside or on the perimeter of that plot. The value of |x| is defined as: x if x >= 0 -x if x < 0   Example 1: Input: neededApples = 1 Output: 8 Explanation: A square plot of side length 1 does not contain any apples. However, a square plot of side length 2 has 12 apples inside (as depicted in the image above). The perimeter is 2 * 4 = 8. Example 2: Input: neededApples = 13 Output: 16 Example 3: Input: neededApples = 1000000000 Output: 5040   Constraints: 1 <= neededApples <= 1015",
        "1466": "A sequence is special if it consists of a positive number of 0s, followed by a positive number of 1s, then a positive number of 2s. For example, [0,1,2] and [0,0,1,1,1,2] are special. In contrast, [2,1,0], [1], and [0,1,2,0] are not special. Given an array nums (consisting of only integers 0, 1, and 2), return the number of different subsequences that are special. Since the answer may be very large, return it modulo 109 + 7. A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Two subsequences are different if the set of indices chosen are different.   Example 1: Input: nums = [0,1,2,2] Output: 3 Explanation: The special subsequences are bolded [0,1,2,2], [0,1,2,2], and [0,1,2,2]. Example 2: Input: nums = [2,2,0,0] Output: 0 Explanation: There are no special subsequences in [2,2,0,0]. Example 3: Input: nums = [0,1,2,0,1,2] Output: 7 Explanation: The special subsequences are bolded: - [0,1,2,0,1,2] - [0,1,2,0,1,2] - [0,1,2,0,1,2] - [0,1,2,0,1,2] - [0,1,2,0,1,2] - [0,1,2,0,1,2] - [0,1,2,0,1,2]   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 2",
        "1467": "A fancy string is a string where no three consecutive characters are equal. Given a string s, delete the minimum possible number of characters from s to make it fancy. Return the final string after the deletion. It can be shown that the answer will always be unique.   Example 1: Input: s = \"leeetcode\" Output: \"leetcode\" Explanation: Remove an 'e' from the first group of 'e's to create \"leetcode\". No three consecutive characters are equal, so return \"leetcode\". Example 2: Input: s = \"aaabaaaa\" Output: \"aabaa\" Explanation: Remove an 'a' from the first group of 'a's to create \"aabaaaa\". Remove two 'a's from the second group of 'a's to create \"aabaa\". No three consecutive characters are equal, so return \"aabaa\". Example 3: Input: s = \"aab\" Output: \"aab\" Explanation: No three consecutive characters are equal, so return \"aab\".   Constraints: 1 <= s.length <= 105 s consists only of lowercase English letters.",
        "1468": "You are given a 0-indexed 8 x 8 grid board, where board[r][c] represents the cell (r, c) on a game board. On the board, free cells are represented by '.', white cells are represented by 'W', and black cells are represented by 'B'. Each move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black). However, a move is only legal if, after changing it, the cell becomes the endpoint of a good line (horizontal, vertical, or diagonal). A good line is a line of three or more cells (including the endpoints) where the endpoints of the line are one color, and the remaining cells in the middle are the opposite color (no cells in the line are free). You can find examples for good lines in the figure below: Given two integers rMove and cMove and a character color representing the color you are playing as (white or black), return true if changing cell (rMove, cMove) to color color is a legal move, or false if it is not legal.   Example 1: Input: board = [[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\"W\",\"B\",\"B\",\".\",\"W\",\"W\",\"W\",\"B\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"]], rMove = 4, cMove = 3, color = \"B\" Output: true Explanation: '.', 'W', and 'B' are represented by the colors blue, white, and black respectively, and cell (rMove, cMove) is marked with an 'X'. The two good lines with the chosen cell as an endpoint are annotated above with the red rectangles. Example 2: Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"B\",\".\",\".\",\"W\",\".\",\".\",\".\"],[\".\",\".\",\"W\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\"B\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"B\",\"W\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\"W\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"B\"]], rMove = 4, cMove = 4, color = \"W\" Output: false Explanation: While there are good lines with the chosen cell as a middle cell, there are no good lines with the chosen cell as an endpoint.   Constraints: board.length == board[r].length == 8 0 <= rMove, cMove < 8 board[rMove][cMove] == '.' color is either 'B' or 'W'.",
        "1469": "You are currently designing a dynamic array. You are given a 0-indexed integer array nums, where nums[i] is the number of elements that will be in the array at time i. In addition, you are given an integer k, the maximum number of times you can resize the array (to any size). The size of the array at time t, sizet, must be at least nums[t] because there needs to be enough space in the array to hold all the elements. The space wasted at time t is defined as sizet - nums[t], and the total space wasted is the sum of the space wasted across every time t where 0 <= t < nums.length. Return the minimum total space wasted if you can resize the array at most k times. Note: The array can have any size at the start and does not count towards the number of resizing operations.   Example 1: Input: nums = [10,20], k = 0 Output: 10 Explanation: size = [20,20]. We can set the initial size to be 20. The total wasted space is (20 - 10) + (20 - 20) = 10. Example 2: Input: nums = [10,20,30], k = 1 Output: 10 Explanation: size = [20,20,30]. We can set the initial size to be 20 and resize to 30 at time 2.  The total wasted space is (20 - 10) + (20 - 20) + (30 - 30) = 10. Example 3: Input: nums = [10,20,15,30,20], k = 2 Output: 15 Explanation: size = [10,20,20,30,30]. We can set the initial size to 10, resize to 20 at time 1, and resize to 30 at time 3. The total wasted space is (10 - 10) + (20 - 20) + (20 - 15) + (30 - 30) + (30 - 20) = 15.   Constraints: 1 <= nums.length <= 200 1 <= nums[i] <= 106 0 <= k <= nums.length - 1",
        "1470": "You are given a 0-indexed string s and are tasked with finding two non-intersecting palindromic substrings of odd length such that the product of their lengths is maximized. More formally, you want to choose four integers i, j, k, l such that 0 <= i <= j < k <= l < s.length and both the substrings s[i...j] and s[k...l] are palindromes and have odd lengths. s[i...j] denotes a substring from index i to index j inclusive. Return the maximum possible product of the lengths of the two non-intersecting palindromic substrings. A palindrome is a string that is the same forward and backward. A substring is a contiguous sequence of characters in a string.   Example 1: Input: s = \"ababbb\" Output: 9 Explanation: Substrings \"aba\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9. Example 2: Input: s = \"zaaaxbbby\" Output: 9 Explanation: Substrings \"aaa\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9.   Constraints: 2 <= s.length <= 105 s consists of lowercase English letters.",
        "1471": "Given a string s and an array of strings words, determine whether s is a prefix string of words. A string s is a prefix string of words if s can be made by concatenating the first k strings in words for some positive k no larger than words.length. Return true if s is a prefix string of words, or false otherwise.   Example 1: Input: s = \"iloveleetcode\", words = [\"i\",\"love\",\"leetcode\",\"apples\"] Output: true Explanation: s can be made by concatenating \"i\", \"love\", and \"leetcode\" together. Example 2: Input: s = \"iloveleetcode\", words = [\"apples\",\"i\",\"love\",\"leetcode\"] Output: false Explanation: It is impossible to make s using a prefix of arr.   Constraints: 1 <= words.length <= 100 1 <= words[i].length <= 20 1 <= s.length <= 1000 words[i] and s consist of only lowercase English letters.",
        "1472": "You are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the ith pile, and an integer k. You should apply the following operation exactly k times: Choose any piles[i] and remove floor(piles[i] / 2) stones from it. Notice that you can apply the operation on the same pile more than once. Return the minimum possible total number of stones remaining after applying the k operations. floor(x) is the greatest integer that is smaller than or equal to x (i.e., rounds x down).   Example 1: Input: piles = [5,4,9], k = 2 Output: 12 Explanation: Steps of a possible scenario are: - Apply the operation on pile 2. The resulting piles are [5,4,5]. - Apply the operation on pile 0. The resulting piles are [3,4,5]. The total number of stones in [3,4,5] is 12. Example 2: Input: piles = [4,3,6,7], k = 3 Output: 12 Explanation: Steps of a possible scenario are: - Apply the operation on pile 2. The resulting piles are [4,3,3,7]. - Apply the operation on pile 3. The resulting piles are [4,3,3,4]. - Apply the operation on pile 0. The resulting piles are [2,3,3,4]. The total number of stones in [2,3,3,4] is 12.   Constraints: 1 <= piles.length <= 105 1 <= piles[i] <= 104 1 <= k <= 105",
        "1473": "You are given a 0-indexed string s of even length n. The string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'. A string is called balanced if and only if: It is the empty string, or It can be written as AB, where both A and B are balanced strings, or It can be written as [C], where C is a balanced string. You may swap the brackets at any two indices any number of times. Return the minimum number of swaps to make s balanced.   Example 1: Input: s = \"][][\" Output: 1 Explanation: You can make the string balanced by swapping index 0 with index 3. The resulting string is \"[[]]\". Example 2: Input: s = \"]]][[[\" Output: 2 Explanation: You can do the following to make the string balanced: - Swap index 0 with index 4. s = \"[]][][\". - Swap index 1 with index 5. s = \"[[][]]\". The resulting string is \"[[][]]\". Example 3: Input: s = \"[]\" Output: 0 Explanation: The string is already balanced.   Constraints: n == s.length 2 <= n <= 106 n is even. s[i] is either '[' or ']'. The number of opening brackets '[' equals n / 2, and the number of closing brackets ']' equals n / 2.",
        "1474": "You want to build some obstacle courses. You are given a 0-indexed integer array obstacles of length n, where obstacles[i] describes the height of the ith obstacle. For every index i between 0 and n - 1 (inclusive), find the length of the longest obstacle course in obstacles such that: You choose any number of obstacles between 0 and i inclusive. You must include the ith obstacle in the course. You must put the chosen obstacles in the same order as they appear in obstacles. Every obstacle (except the first) is taller than or the same height as the obstacle immediately before it. Return an array ans of length n, where ans[i] is the length of the longest obstacle course for index i as described above.   Example 1: Input: obstacles = [1,2,3,2] Output: [1,2,3,3] Explanation: The longest valid obstacle course at each position is: - i = 0: [1], [1] has length 1. - i = 1: [1,2], [1,2] has length 2. - i = 2: [1,2,3], [1,2,3] has length 3. - i = 3: [1,2,3,2], [1,2,2] has length 3. Example 2: Input: obstacles = [2,2,1] Output: [1,2,1] Explanation: The longest valid obstacle course at each position is: - i = 0: [2], [2] has length 1. - i = 1: [2,2], [2,2] has length 2. - i = 2: [2,2,1], [1] has length 1. Example 3: Input: obstacles = [3,1,5,6,4,2] Output: [1,1,2,3,2,2] Explanation: The longest valid obstacle course at each position is: - i = 0: [3], [3] has length 1. - i = 1: [3,1], [1] has length 1. - i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid. - i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid. - i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid. - i = 5: [3,1,5,6,4,2], [1,2] has length 2.   Constraints: n == obstacles.length 1 <= n <= 105 1 <= obstacles[i] <= 107",
        "1475": "SQL Schema Pandas Schema",
        "1476": "Given an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word. A substring is a contiguous sequence of characters within a string.   Example 1: Input: patterns = [\"a\",\"abc\",\"bc\",\"d\"], word = \"abc\" Output: 3 Explanation: - \"a\" appears as a substring in \"abc\". - \"abc\" appears as a substring in \"abc\". - \"bc\" appears as a substring in \"abc\". - \"d\" does not appear as a substring in \"abc\". 3 of the strings in patterns appear as a substring in word. Example 2: Input: patterns = [\"a\",\"b\",\"c\"], word = \"aaaaabbbbb\" Output: 2 Explanation: - \"a\" appears as a substring in \"aaaaabbbbb\". - \"b\" appears as a substring in \"aaaaabbbbb\". - \"c\" does not appear as a substring in \"aaaaabbbbb\". 2 of the strings in patterns appear as a substring in word. Example 3: Input: patterns = [\"a\",\"a\",\"a\"], word = \"ab\" Output: 3 Explanation: Each of the patterns appears as a substring in word \"ab\".   Constraints: 1 <= patterns.length <= 100 1 <= patterns[i].length <= 100 1 <= word.length <= 100 patterns[i] and word consist of lowercase English letters.",
        "1477": "You are given a 0-indexed array nums of distinct integers. You want to rearrange the elements in the array such that every element in the rearranged array is not equal to the average of its neighbors. More formally, the rearranged array should have the property such that for every i in the range 1 <= i < nums.length - 1, (nums[i-1] + nums[i+1]) / 2 is not equal to nums[i]. Return any rearrangement of nums that meets the requirements.   Example 1: Input: nums = [1,2,3,4,5] Output: [1,2,4,5,3] Explanation: When i=1, nums[i] = 2, and the average of its neighbors is (1+4) / 2 = 2.5. When i=2, nums[i] = 4, and the average of its neighbors is (2+5) / 2 = 3.5. When i=3, nums[i] = 5, and the average of its neighbors is (4+3) / 2 = 3.5. Example 2: Input: nums = [6,2,0,9,7] Output: [9,7,6,2,0] Explanation: When i=1, nums[i] = 7, and the average of its neighbors is (9+6) / 2 = 7.5. When i=2, nums[i] = 6, and the average of its neighbors is (7+2) / 2 = 4.5. When i=3, nums[i] = 2, and the average of its neighbors is (6+0) / 2 = 3.   Constraints: 3 <= nums.length <= 105 0 <= nums[i] <= 105",
        "1478": "You are given a positive integer p. Consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2p - 1] in their binary representations. You are allowed to do the following operation any number of times: Choose two elements x and y from nums. Choose a bit in x and swap it with its corresponding bit in y. Corresponding bit refers to the bit that is in the same position in the other integer. For example, if x = 1101 and y = 0011, after swapping the 2nd bit from the right, we have x = 1111 and y = 0001. Find the minimum non-zero product of nums after performing the above operation any number of times. Return this product modulo 109 + 7. Note: The answer should be the minimum product before the modulo operation is done.   Example 1: Input: p = 1 Output: 1 Explanation: nums = [1]. There is only one element, so the product equals that element. Example 2: Input: p = 2 Output: 6 Explanation: nums = [01, 10, 11]. Any swap would either make the product 0 or stay the same. Thus, the array product of 1 * 2 * 3 = 6 is already minimized. Example 3: Input: p = 3 Output: 1512 Explanation: nums = [001, 010, 011, 100, 101, 110, 111] - In the first operation we can swap the leftmost bit of the second and fifth elements.     - The resulting array is [001, 110, 011, 100, 001, 110, 111]. - In the second operation we can swap the middle bit of the third and fourth elements.     - The resulting array is [001, 110, 001, 110, 001, 110, 111]. The array product is 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512, which is the minimum possible product.   Constraints: 1 <= p <= 60",
        "1479": "There is a 1-based binary matrix where 0 represents land and 1 represents water. You are given integers row and col representing the number of rows and columns in the matrix, respectively. Initially on day 0, the entire matrix is land. However, each day a new cell becomes flooded with water. You are given a 1-based 2D array cells, where cells[i] = [ri, ci] represents that on the ith day, the cell on the rith row and cith column (1-based coordinates) will be covered with water (i.e., changed to 1). You want to find the last day that it is possible to walk from the top to the bottom by only walking on land cells. You can start from any cell in the top row and end at any cell in the bottom row. You can only travel in the four cardinal directions (left, right, up, and down). Return the last day where it is possible to walk from the top to the bottom by only walking on land cells.   Example 1: Input: row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]] Output: 2 Explanation: The above image depicts how the matrix changes each day starting from day 0. The last day where it is possible to cross from top to bottom is on day 2. Example 2: Input: row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]] Output: 1 Explanation: The above image depicts how the matrix changes each day starting from day 0. The last day where it is possible to cross from top to bottom is on day 1. Example 3: Input: row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]] Output: 3 Explanation: The above image depicts how the matrix changes each day starting from day 0. The last day where it is possible to cross from top to bottom is on day 3.   Constraints: 2 <= row, col <= 2 * 104 4 <= row * col <= 2 * 104 cells.length == row * col 1 <= ri <= row 1 <= ci <= col All the values of cells are unique.",
        "1480": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. You want to determine if there is a valid path that exists from vertex source to vertex destination. Given edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.   Example 1: Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2 Output: true Explanation: There are two paths from vertex 0 to vertex 2: - 0 → 1 → 2 - 0 → 2 Example 2: Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5 Output: false Explanation: There is no path from vertex 0 to vertex 5.   Constraints: 1 <= n <= 2 * 105 0 <= edges.length <= 2 * 105 edges[i].length == 2 0 <= ui, vi <= n - 1 ui != vi 0 <= source, destination <= n - 1 There are no duplicate edges. There are no self edges.",
        "1481": "There is a special typewriter with lowercase English letters 'a' to 'z' arranged in a circle with a pointer. A character can only be typed if the pointer is pointing to that character. The pointer is initially pointing to the character 'a'. Each second, you may perform one of the following operations: Move the pointer one character counterclockwise or clockwise. Type the character the pointer is currently on. Given a string word, return the minimum number of seconds to type out the characters in word.   Example 1: Input: word = \"abc\" Output: 5 Explanation:  The characters are printed as follows: - Type the character 'a' in 1 second since the pointer is initially on 'a'. - Move the pointer clockwise to 'b' in 1 second. - Type the character 'b' in 1 second. - Move the pointer clockwise to 'c' in 1 second. - Type the character 'c' in 1 second. Example 2: Input: word = \"bza\" Output: 7 Explanation: The characters are printed as follows: - Move the pointer clockwise to 'b' in 1 second. - Type the character 'b' in 1 second. - Move the pointer counterclockwise to 'z' in 2 seconds. - Type the character 'z' in 1 second. - Move the pointer clockwise to 'a' in 1 second. - Type the character 'a' in 1 second. Example 3: Input: word = \"zjpc\" Output: 34 Explanation: The characters are printed as follows: - Move the pointer counterclockwise to 'z' in 1 second. - Type the character 'z' in 1 second. - Move the pointer clockwise to 'j' in 10 seconds. - Type the character 'j' in 1 second. - Move the pointer clockwise to 'p' in 6 seconds. - Type the character 'p' in 1 second. - Move the pointer counterclockwise to 'c' in 13 seconds. - Type the character 'c' in 1 second.   Constraints: 1 <= word.length <= 100 word consists of lowercase English letters.",
        "1482": "You are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections. You are given an integer n and a 2D integer array roads where roads[i] = [ui, vi, timei] means that there is a road between intersections ui and vi that takes timei minutes to travel. You want to know in how many ways you can travel from intersection 0 to intersection n - 1 in the shortest amount of time. Return the number of ways you can arrive at your destination in the shortest amount of time. Since the answer may be large, return it modulo 109 + 7.   Example 1: Input: n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]] Output: 4 Explanation: The shortest amount of time it takes to go from intersection 0 to intersection 6 is 7 minutes. The four ways to get there in 7 minutes are: - 0 ➝ 6 - 0 ➝ 4 ➝ 6 - 0 ➝ 1 ➝ 2 ➝ 5 ➝ 6 - 0 ➝ 1 ➝ 3 ➝ 5 ➝ 6 Example 2: Input: n = 2, roads = [[1,0,10]] Output: 1 Explanation: There is only one way to go from intersection 0 to intersection 1, and it takes 10 minutes.   Constraints: 1 <= n <= 200 n - 1 <= roads.length <= n * (n - 1) / 2 roads[i].length == 3 0 <= ui, vi <= n - 1 1 <= timei <= 109 ui != vi There is at most one road connecting any two intersections. You can reach any intersection from any other intersection.",
        "1483": "You wrote down many positive integers in a string called num. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was non-decreasing and that no integer had leading zeros. Return the number of possible lists of integers that you could have written down to get the string num. Since the answer may be large, return it modulo 109 + 7.   Example 1: Input: num = \"327\" Output: 2 Explanation: You could have written down the numbers: 3, 27 327 Example 2: Input: num = \"094\" Output: 0 Explanation: No numbers can have leading zeros and all numbers must be positive. Example 3: Input: num = \"0\" Output: 0 Explanation: No numbers can have leading zeros and all numbers must be positive.   Constraints: 1 <= num.length <= 3500 num consists of digits '0' through '9'.",
        "1484": "SQL Schema Pandas Schema",
        "1485": "Given an integer array nums, return the greatest common divisor of the smallest number and largest number in nums. The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.   Example 1: Input: nums = [2,5,6,9,10] Output: 2 Explanation: The smallest number in nums is 2. The largest number in nums is 10. The greatest common divisor of 2 and 10 is 2. Example 2: Input: nums = [7,5,6,8,3] Output: 1 Explanation: The smallest number in nums is 3. The largest number in nums is 8. The greatest common divisor of 3 and 8 is 1. Example 3: Input: nums = [3,3] Output: 3 Explanation: The smallest number in nums is 3. The largest number in nums is 3. The greatest common divisor of 3 and 3 is 3.   Constraints: 2 <= nums.length <= 1000 1 <= nums[i] <= 1000",
        "1486": "Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.   Example 1: Input: nums = [\"01\",\"10\"] Output: \"11\" Explanation: \"11\" does not appear in nums. \"00\" would also be correct. Example 2: Input: nums = [\"00\",\"01\"] Output: \"11\" Explanation: \"11\" does not appear in nums. \"10\" would also be correct. Example 3: Input: nums = [\"111\",\"011\",\"001\"] Output: \"101\" Explanation: \"101\" does not appear in nums. \"000\", \"010\", \"100\", and \"110\" would also be correct.   Constraints: n == nums.length 1 <= n <= 16 nums[i].length == n nums[i] is either '0' or '1'. All the strings of nums are unique.",
        "1487": "You are given an m x n integer matrix mat and an integer target. Choose one integer from each row in the matrix such that the absolute difference between target and the sum of the chosen elements is minimized. Return the minimum absolute difference. The absolute difference between two numbers a and b is the absolute value of a - b.   Example 1: Input: mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13 Output: 0 Explanation: One possible choice is to: - Choose 1 from the first row. - Choose 5 from the second row. - Choose 7 from the third row. The sum of the chosen elements is 13, which equals the target, so the absolute difference is 0. Example 2: Input: mat = [[1],[2],[3]], target = 100 Output: 94 Explanation: The best possible choice is to: - Choose 1 from the first row. - Choose 2 from the second row. - Choose 3 from the third row. The sum of the chosen elements is 6, and the absolute difference is 94. Example 3: Input: mat = [[1,2,9,8,7]], target = 6 Output: 1 Explanation: The best choice is to choose 7 from the first row. The absolute difference is 1.   Constraints: m == mat.length n == mat[i].length 1 <= m, n <= 70 1 <= mat[i][j] <= 70 1 <= target <= 800",
        "1488": "You are given an integer n representing the length of an unknown array that you are trying to recover. You are also given an array sums containing the values of all 2n subset sums of the unknown array (in no particular order). Return the array ans of length n representing the unknown array. If multiple answers exist, return any of them. An array sub is a subset of an array arr if sub can be obtained from arr by deleting some (possibly zero or all) elements of arr. The sum of the elements in sub is one possible subset sum of arr. The sum of an empty array is considered to be 0. Note: Test cases are generated such that there will always be at least one correct answer.   Example 1: Input: n = 3, sums = [-3,-2,-1,0,0,1,2,3] Output: [1,2,-3] Explanation: [1,2,-3] is able to achieve the given subset sums: - []: sum is 0 - [1]: sum is 1 - [2]: sum is 2 - [1,2]: sum is 3 - [-3]: sum is -3 - [1,-3]: sum is -2 - [2,-3]: sum is -1 - [1,2,-3]: sum is 0 Note that any permutation of [1,2,-3] and also any permutation of [-1,-2,3] will also be accepted. Example 2: Input: n = 2, sums = [0,0,0,0] Output: [0,0] Explanation: The only correct answer is [0,0]. Example 3: Input: n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8] Output: [0,-1,4,5] Explanation: [0,-1,4,5] is able to achieve the given subset sums.   Constraints: 1 <= n <= 15 sums.length == 2n -104 <= sums[i] <= 104",
        "1489": "You are given a 0-indexed integer array nums, where nums[i] represents the score of the ith student. You are also given an integer k. Pick the scores of any k students from the array so that the difference between the highest and the lowest of the k scores is minimized. Return the minimum possible difference.   Example 1: Input: nums = [90], k = 1 Output: 0 Explanation: There is one way to pick score(s) of one student: - [90]. The difference between the highest and lowest score is 90 - 90 = 0. The minimum possible difference is 0. Example 2: Input: nums = [9,4,1,7], k = 2 Output: 2 Explanation: There are six ways to pick score(s) of two students: - [9,4,1,7]. The difference between the highest and lowest score is 9 - 4 = 5. - [9,4,1,7]. The difference between the highest and lowest score is 9 - 1 = 8. - [9,4,1,7]. The difference between the highest and lowest score is 9 - 7 = 2. - [9,4,1,7]. The difference between the highest and lowest score is 4 - 1 = 3. - [9,4,1,7]. The difference between the highest and lowest score is 7 - 4 = 3. - [9,4,1,7]. The difference between the highest and lowest score is 7 - 1 = 6. The minimum possible difference is 2.   Constraints: 1 <= k <= nums.length <= 1000 0 <= nums[i] <= 105",
        "1490": "You are given an array of strings nums and an integer k. Each string in nums represents an integer without leading zeros. Return the string that represents the kth largest integer in nums. Note: Duplicate numbers should be counted distinctly. For example, if nums is [\"1\",\"2\",\"2\"], \"2\" is the first largest integer, \"2\" is the second-largest integer, and \"1\" is the third-largest integer.   Example 1: Input: nums = [\"3\",\"6\",\"7\",\"10\"], k = 4 Output: \"3\" Explanation: The numbers in nums sorted in non-decreasing order are [\"3\",\"6\",\"7\",\"10\"]. The 4th largest integer in nums is \"3\". Example 2: Input: nums = [\"2\",\"21\",\"12\",\"1\"], k = 3 Output: \"2\" Explanation: The numbers in nums sorted in non-decreasing order are [\"1\",\"2\",\"12\",\"21\"]. The 3rd largest integer in nums is \"2\". Example 3: Input: nums = [\"0\",\"0\"], k = 2 Output: \"0\" Explanation: The numbers in nums sorted in non-decreasing order are [\"0\",\"0\"]. The 2nd largest integer in nums is \"0\".   Constraints: 1 <= k <= nums.length <= 104 1 <= nums[i].length <= 100 nums[i] consists of only digits. nums[i] will not have any leading zeros.",
        "1491": "There are n tasks assigned to you. The task times are represented as an integer array tasks of length n, where the ith task takes tasks[i] hours to finish. A work session is when you work for at most sessionTime consecutive hours and then take a break. You should finish the given tasks in a way that satisfies the following conditions: If you start a task in a work session, you must complete it in the same work session. You can start a new task immediately after finishing the previous one. You may complete the tasks in any order. Given tasks and sessionTime, return the minimum number of work sessions needed to finish all the tasks following the conditions above. The tests are generated such that sessionTime is greater than or equal to the maximum element in tasks[i].   Example 1: Input: tasks = [1,2,3], sessionTime = 3 Output: 2 Explanation: You can finish the tasks in two work sessions. - First work session: finish the first and the second tasks in 1 + 2 = 3 hours. - Second work session: finish the third task in 3 hours. Example 2: Input: tasks = [3,1,3,1,1], sessionTime = 8 Output: 2 Explanation: You can finish the tasks in two work sessions. - First work session: finish all the tasks except the last one in 3 + 1 + 3 + 1 = 8 hours. - Second work session: finish the last task in 1 hour. Example 3: Input: tasks = [1,2,3,4,5], sessionTime = 15 Output: 1 Explanation: You can finish all the tasks in one work session.   Constraints: n == tasks.length 1 <= n <= 14 1 <= tasks[i] <= 10 max(tasks[i]) <= sessionTime <= 15",
        "1492": "You are given a binary string binary. A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of \"0\"). Find the number of unique good subsequences of binary. For example, if binary = \"001\", then all the good subsequences are [\"0\", \"0\", \"1\"], so the unique good subsequences are \"0\" and \"1\". Note that subsequences \"00\", \"01\", and \"001\" are not good because they have leading zeros. Return the number of unique good subsequences of binary. Since the answer may be very large, return it modulo 109 + 7. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.   Example 1: Input: binary = \"001\" Output: 2 Explanation: The good subsequences of binary are [\"0\", \"0\", \"1\"]. The unique good subsequences are \"0\" and \"1\". Example 2: Input: binary = \"11\" Output: 2 Explanation: The good subsequences of binary are [\"1\", \"1\", \"11\"]. The unique good subsequences are \"1\" and \"11\". Example 3: Input: binary = \"101\" Output: 5 Explanation: The good subsequences of binary are [\"1\", \"0\", \"1\", \"10\", \"11\", \"101\"].  The unique good subsequences are \"0\", \"1\", \"10\", \"11\", and \"101\".   Constraints: 1 <= binary.length <= 105 binary consists of only '0's and '1's.",
        "1493": "Given a 0-indexed integer array nums, find the leftmost middleIndex (i.e., the smallest amongst all the possible ones). A middleIndex is an index where nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1]. If middleIndex == 0, the left side sum is considered to be 0. Similarly, if middleIndex == nums.length - 1, the right side sum is considered to be 0. Return the leftmost middleIndex that satisfies the condition, or -1 if there is no such index.   Example 1: Input: nums = [2,3,-1,8,4] Output: 3 Explanation: The sum of the numbers before index 3 is: 2 + 3 + -1 = 4 The sum of the numbers after index 3 is: 4 = 4 Example 2: Input: nums = [1,-1,4] Output: 2 Explanation: The sum of the numbers before index 2 is: 1 + -1 = 0 The sum of the numbers after index 2 is: 0 Example 3: Input: nums = [2,5] Output: -1 Explanation: There is no valid middleIndex.   Constraints: 1 <= nums.length <= 100 -1000 <= nums[i] <= 1000   Note: This question is the same as 724: https://leetcode.com/problems/find-pivot-index/",
        "1494": "You are given a 0-indexed m x n binary matrix land where a 0 represents a hectare of forested land and a 1 represents a hectare of farmland. To keep the land organized, there are designated rectangular areas of hectares that consist entirely of farmland. These rectangular areas are called groups. No two groups are adjacent, meaning farmland in one group is not four-directionally adjacent to another farmland in a different group. land can be represented by a coordinate system where the top left corner of land is (0, 0) and the bottom right corner of land is (m-1, n-1). Find the coordinates of the top left and bottom right corner of each group of farmland. A group of farmland with a top left corner at (r1, c1) and a bottom right corner at (r2, c2) is represented by the 4-length array [r1, c1, r2, c2]. Return a 2D array containing the 4-length arrays described above for each group of farmland in land. If there are no groups of farmland, return an empty array. You may return the answer in any order.   Example 1: Input: land = [[1,0,0],[0,1,1],[0,1,1]] Output: [[0,0,0,0],[1,1,2,2]] Explanation: The first group has a top left corner at land[0][0] and a bottom right corner at land[0][0]. The second group has a top left corner at land[1][1] and a bottom right corner at land[2][2]. Example 2: Input: land = [[1,1],[1,1]] Output: [[0,0,1,1]] Explanation: The first group has a top left corner at land[0][0] and a bottom right corner at land[1][1]. Example 3: Input: land = [[0]] Output: [] Explanation: There are no groups of farmland.   Constraints: m == land.length n == land[i].length 1 <= m, n <= 300 land consists of only 0's and 1's. Groups of farmland are rectangular in shape.",
        "1495": "You are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of the ith node. The root of the tree is node 0, so parent[0] = -1 since it has no parent. You want to design a data structure that allows users to lock, unlock, and upgrade nodes in the tree. The data structure should support the following functions: Lock: Locks the given node for the given user and prevents other users from locking the same node. You may only lock a node using this function if the node is unlocked. Unlock: Unlocks the given node for the given user. You may only unlock a node using this function if it is currently locked by the same user. Upgrade: Locks the given node for the given user and unlocks all of its descendants regardless of who locked it. You may only upgrade a node if all 3 conditions are true: The node is unlocked, It has at least one locked descendant (by any user), and It does not have any locked ancestors. Implement the LockingTree class: LockingTree(int[] parent) initializes the data structure with the parent array. lock(int num, int user) returns true if it is possible for the user with id user to lock the node num, or false otherwise. If it is possible, the node num will become locked by the user with id user. unlock(int num, int user) returns true if it is possible for the user with id user to unlock the node num, or false otherwise. If it is possible, the node num will become unlocked. upgrade(int num, int user) returns true if it is possible for the user with id user to upgrade the node num, or false otherwise. If it is possible, the node num will be upgraded.   Example 1: Input [\"LockingTree\", \"lock\", \"unlock\", \"unlock\", \"lock\", \"upgrade\", \"lock\"] [[[-1, 0, 0, 1, 1, 2, 2]], [2, 2], [2, 3], [2, 2], [4, 5], [0, 1], [0, 1]] Output [null, true, false, true, true, true, false]  Explanation LockingTree lockingTree = new LockingTree([-1, 0, 0, 1, 1, 2, 2]); lockingTree.lock(2, 2);    // return true because node 2 is unlocked.                            // Node 2 will now be locked by user 2. lockingTree.unlock(2, 3);  // return false because user 3 cannot unlock a node locked by user 2. lockingTree.unlock(2, 2);  // return true because node 2 was previously locked by user 2.                            // Node 2 will now be unlocked. lockingTree.lock(4, 5);    // return true because node 4 is unlocked.                            // Node 4 will now be locked by user 5. lockingTree.upgrade(0, 1); // return true because node 0 is unlocked and has at least one locked descendant (node 4).                            // Node 0 will now be locked by user 1 and node 4 will now be unlocked. lockingTree.lock(0, 1);    // return false because node 0 is already locked.   Constraints: n == parent.length 2 <= n <= 2000 0 <= parent[i] <= n - 1 for i != 0 parent[0] == -1 0 <= num <= n - 1 1 <= user <= 104 parent represents a valid tree. At most 2000 calls in total will be made to lock, unlock, and upgrade.",
        "1496": "You are given an integer array nums. We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers. For example, if nums = [1, 2, 3, 4]: [2, 3], [1, 2, 3], and [1, 3] are good subsets with products 6 = 2*3, 6 = 2*3, and 3 = 3 respectively. [1, 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively. Return the number of different good subsets in nums modulo 109 + 7. A subset of nums is any array that can be obtained by deleting some (possibly none or all) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.   Example 1: Input: nums = [1,2,3,4] Output: 6 Explanation: The good subsets are: - [1,2]: product is 2, which is the product of distinct prime 2. - [1,2,3]: product is 6, which is the product of distinct primes 2 and 3. - [1,3]: product is 3, which is the product of distinct prime 3. - [2]: product is 2, which is the product of distinct prime 2. - [2,3]: product is 6, which is the product of distinct primes 2 and 3. - [3]: product is 3, which is the product of distinct prime 3. Example 2: Input: nums = [4,2,3,15] Output: 5 Explanation: The good subsets are: - [2]: product is 2, which is the product of distinct prime 2. - [2,3]: product is 6, which is the product of distinct primes 2 and 3. - [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5. - [3]: product is 3, which is the product of distinct prime 3. - [15]: product is 15, which is the product of distinct primes 3 and 5.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 30",
        "1497": "Given a 0-indexed integer array nums, return the number of distinct quadruplets (a, b, c, d) such that: nums[a] + nums[b] + nums[c] == nums[d], and a < b < c < d   Example 1: Input: nums = [1,2,3,6] Output: 1 Explanation: The only quadruplet that satisfies the requirement is (0, 1, 2, 3) because 1 + 2 + 3 == 6. Example 2: Input: nums = [3,3,6,4,5] Output: 0 Explanation: There are no such quadruplets in [3,3,6,4,5]. Example 3: Input: nums = [1,1,1,3,5] Output: 4 Explanation: The 4 quadruplets that satisfy the requirement are: - (0, 1, 2, 3): 1 + 1 + 1 == 3 - (0, 1, 3, 4): 1 + 1 + 3 == 5 - (0, 2, 3, 4): 1 + 1 + 3 == 5 - (1, 2, 3, 4): 1 + 1 + 3 == 5   Constraints: 4 <= nums.length <= 50 1 <= nums[i] <= 100",
        "1498": "You are playing a game that contains multiple characters, and each of the characters has two main properties: attack and defense. You are given a 2D integer array properties where properties[i] = [attacki, defensei] represents the properties of the ith character in the game. A character is said to be weak if any other character has both attack and defense levels strictly greater than this character's attack and defense levels. More formally, a character i is said to be weak if there exists another character j where attackj > attacki and defensej > defensei. Return the number of weak characters.   Example 1: Input: properties = [[5,5],[6,3],[3,6]] Output: 0 Explanation: No character has strictly greater attack and defense than the other. Example 2: Input: properties = [[2,2],[3,3]] Output: 1 Explanation: The first character is weak because the second character has a strictly greater attack and defense. Example 3: Input: properties = [[1,5],[10,4],[4,3]] Output: 1 Explanation: The third character is weak because the second character has a strictly greater attack and defense.   Constraints: 2 <= properties.length <= 105 properties[i].length == 2 1 <= attacki, defensei <= 105",
        "1499": "There are n rooms you need to visit, labeled from 0 to n - 1. Each day is labeled, starting from 0. You will go in and visit one room a day. Initially on day 0, you visit room 0. The order you visit the rooms for the coming days is determined by the following rules and a given 0-indexed array nextVisit of length n: Assuming that on a day, you visit room i, if you have been in room i an odd number of times (including the current visit), on the next day you will visit a room with a lower or equal room number specified by nextVisit[i] where 0 <= nextVisit[i] <= i; if you have been in room i an even number of times (including the current visit), on the next day you will visit room (i + 1) mod n. Return the label of the first day where you have been in all the rooms. It can be shown that such a day exists. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: nextVisit = [0,0] Output: 2 Explanation: - On day 0, you visit room 0. The total times you have been in room 0 is 1, which is odd.   On the next day you will visit room nextVisit[0] = 0 - On day 1, you visit room 0, The total times you have been in room 0 is 2, which is even.   On the next day you will visit room (0 + 1) mod 2 = 1 - On day 2, you visit room 1. This is the first day where you have been in all the rooms. Example 2: Input: nextVisit = [0,0,2] Output: 6 Explanation: Your room visiting order for each day is: [0,0,1,0,0,1,2,...]. Day 6 is the first day where you have been in all the rooms. Example 3: Input: nextVisit = [0,1,2,0] Output: 6 Explanation: Your room visiting order for each day is: [0,0,1,1,2,2,3,...]. Day 6 is the first day where you have been in all the rooms.   Constraints: n == nextVisit.length 2 <= n <= 105 0 <= nextVisit[i] <= i",
        "1500": "You are given an integer array nums, and you can perform the following operation any number of times on nums: Swap the positions of two elements nums[i] and nums[j] if gcd(nums[i], nums[j]) > 1 where gcd(nums[i], nums[j]) is the greatest common divisor of nums[i] and nums[j]. Return true if it is possible to sort nums in non-decreasing order using the above swap method, or false otherwise.   Example 1: Input: nums = [7,21,3] Output: true Explanation: We can sort [7,21,3] by performing the following operations: - Swap 7 and 21 because gcd(7,21) = 7. nums = [21,7,3] - Swap 21 and 3 because gcd(21,3) = 3. nums = [3,7,21] Example 2: Input: nums = [5,2,6,2] Output: false Explanation: It is impossible to sort the array because 5 cannot be swapped with any other element. Example 3: Input: nums = [10,5,9,3,15] Output: true We can sort [10,5,9,3,15] by performing the following operations: - Swap 10 and 15 because gcd(10,15) = 5. nums = [15,5,9,3,10] - Swap 15 and 3 because gcd(15,3) = 3. nums = [3,5,9,15,10] - Swap 10 and 15 because gcd(10,15) = 5. nums = [3,5,9,10,15]   Constraints: 1 <= nums.length <= 3 * 104 2 <= nums[i] <= 105",
        "1501": "Given a 0-indexed string word and a character ch, reverse the segment of word that starts at index 0 and ends at the index of the first occurrence of ch (inclusive). If the character ch does not exist in word, do nothing. For example, if word = \"abcdefd\" and ch = \"d\", then you should reverse the segment that starts at 0 and ends at 3 (inclusive). The resulting string will be \"dcbaefd\". Return the resulting string.   Example 1: Input: word = \"abcdefd\", ch = \"d\" Output: \"dcbaefd\" Explanation: The first occurrence of \"d\" is at index 3.  Reverse the part of word from 0 to 3 (inclusive), the resulting string is \"dcbaefd\". Example 2: Input: word = \"xyxzxe\", ch = \"z\" Output: \"zxyxxe\" Explanation: The first and only occurrence of \"z\" is at index 3. Reverse the part of word from 0 to 3 (inclusive), the resulting string is \"zxyxxe\". Example 3: Input: word = \"abcd\", ch = \"z\" Output: \"abcd\" Explanation: \"z\" does not exist in word. You should not do any reverse operation, the resulting string is \"abcd\".   Constraints: 1 <= word.length <= 250 word consists of lowercase English letters. ch is a lowercase English letter.",
        "1502": "Given a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized. The two subsequences are disjoint if they do not both pick a character at the same index. Return the maximum possible product of the lengths of the two palindromic subsequences. A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string is palindromic if it reads the same forward and backward.   Example 1: Input: s = \"leetcodecom\" Output: 9 Explanation: An optimal solution is to choose \"ete\" for the 1st subsequence and \"cdc\" for the 2nd subsequence. The product of their lengths is: 3 * 3 = 9. Example 2: Input: s = \"bb\" Output: 1 Explanation: An optimal solution is to choose \"b\" (the first character) for the 1st subsequence and \"b\" (the second character) for the 2nd subsequence. The product of their lengths is: 1 * 1 = 1. Example 3: Input: s = \"accbcaxxcxx\" Output: 25 Explanation: An optimal solution is to choose \"accca\" for the 1st subsequence and \"xxcxx\" for the 2nd subsequence. The product of their lengths is: 5 * 5 = 25.   Constraints: 2 <= s.length <= 12 s consists of lowercase English letters only.",
        "1503": "There is a family tree rooted at 0 consisting of n nodes numbered 0 to n - 1. You are given a 0-indexed integer array parents, where parents[i] is the parent for node i. Since node 0 is the root, parents[0] == -1. There are 105 genetic values, each represented by an integer in the inclusive range [1, 105]. You are given a 0-indexed integer array nums, where nums[i] is a distinct genetic value for node i. Return an array ans of length n where ans[i] is the smallest genetic value that is missing from the subtree rooted at node i. The subtree rooted at a node x contains node x and all of its descendant nodes.   Example 1: Input: parents = [-1,0,0,2], nums = [1,2,3,4] Output: [5,1,1,1] Explanation: The answer for each subtree is calculated as follows: - 0: The subtree contains nodes [0,1,2,3] with values [1,2,3,4]. 5 is the smallest missing value. - 1: The subtree contains only node 1 with value 2. 1 is the smallest missing value. - 2: The subtree contains nodes [2,3] with values [3,4]. 1 is the smallest missing value. - 3: The subtree contains only node 3 with value 4. 1 is the smallest missing value. Example 2: Input: parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3] Output: [7,1,1,4,2,1] Explanation: The answer for each subtree is calculated as follows: - 0: The subtree contains nodes [0,1,2,3,4,5] with values [5,4,6,2,1,3]. 7 is the smallest missing value. - 1: The subtree contains nodes [1,2] with values [4,6]. 1 is the smallest missing value. - 2: The subtree contains only node 2 with value 6. 1 is the smallest missing value. - 3: The subtree contains nodes [3,4,5] with values [2,1,3]. 4 is the smallest missing value. - 4: The subtree contains only node 4 with value 1. 2 is the smallest missing value. - 5: The subtree contains only node 5 with value 3. 1 is the smallest missing value. Example 3: Input: parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8] Output: [1,1,1,1,1,1,1] Explanation: The value 1 is missing from all the subtrees.   Constraints: n == parents.length == nums.length 2 <= n <= 105 0 <= parents[i] <= n - 1 for i != 0 parents[0] == -1 parents represents a valid tree. 1 <= nums[i] <= 105 Each nums[i] is distinct.",
        "1504": "Given an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k. The value of |x| is defined as: x if x >= 0. -x if x < 0.   Example 1: Input: nums = [1,2,2,1], k = 1 Output: 4 Explanation: The pairs with an absolute difference of 1 are: - [1,2,2,1] - [1,2,2,1] - [1,2,2,1] - [1,2,2,1] Example 2: Input: nums = [1,3], k = 3 Output: 0 Explanation: There are no pairs with an absolute difference of 3. Example 3: Input: nums = [3,2,1,5,4], k = 2 Output: 3 Explanation: The pairs with an absolute difference of 2 are: - [3,2,1,5,4] - [3,2,1,5,4] - [3,2,1,5,4]   Constraints: 1 <= nums.length <= 200 1 <= nums[i] <= 100 1 <= k <= 99",
        "1505": "An integer array original is transformed into a doubled array changed by appending twice the value of every element in original, and then randomly shuffling the resulting array. Given an array changed, return original if changed is a doubled array. If changed is not a doubled array, return an empty array. The elements in original may be returned in any order.   Example 1: Input: changed = [1,3,4,2,6,8] Output: [1,3,4] Explanation: One possible original array could be [1,3,4]: - Twice the value of 1 is 1 * 2 = 2. - Twice the value of 3 is 3 * 2 = 6. - Twice the value of 4 is 4 * 2 = 8. Other original arrays could be [4,3,1] or [3,1,4]. Example 2: Input: changed = [6,3,0,1] Output: [] Explanation: changed is not a doubled array. Example 3: Input: changed = [1] Output: [] Explanation: changed is not a doubled array.   Constraints: 1 <= changed.length <= 105 0 <= changed[i] <= 105",
        "1506": "You are given an integer array nums. In one operation, you can replace any element in nums with any integer. nums is considered continuous if both of the following conditions are fulfilled: All elements in nums are unique. The difference between the maximum element and the minimum element in nums equals nums.length - 1. For example, nums = [4, 2, 5, 3] is continuous, but nums = [1, 2, 3, 5, 6] is not continuous. Return the minimum number of operations to make nums continuous.   Example 1: Input: nums = [4,2,5,3] Output: 0 Explanation: nums is already continuous. Example 2: Input: nums = [1,2,3,5,6] Output: 1 Explanation: One possible solution is to change the last element to 4. The resulting array is [1,2,3,5,4], which is continuous. Example 3: Input: nums = [1,10,100,1000] Output: 3 Explanation: One possible solution is to: - Change the second element to 2. - Change the third element to 3. - Change the fourth element to 4. The resulting array is [1,2,3,4], which is continuous.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109",
        "1507": "There is a programming language with only four operations and one variable X: ++X and X++ increments the value of the variable X by 1. --X and X-- decrements the value of the variable X by 1. Initially, the value of X is 0. Given an array of strings operations containing a list of operations, return the final value of X after performing all the operations.   Example 1: Input: operations = [\"--X\",\"X++\",\"X++\"] Output: 1 Explanation: The operations are performed as follows: Initially, X = 0. --X: X is decremented by 1, X =  0 - 1 = -1. X++: X is incremented by 1, X = -1 + 1 =  0. X++: X is incremented by 1, X =  0 + 1 =  1. Example 2: Input: operations = [\"++X\",\"++X\",\"X++\"] Output: 3 Explanation: The operations are performed as follows: Initially, X = 0. ++X: X is incremented by 1, X = 0 + 1 = 1. ++X: X is incremented by 1, X = 1 + 1 = 2. X++: X is incremented by 1, X = 2 + 1 = 3. Example 3: Input: operations = [\"X++\",\"++X\",\"--X\",\"X--\"] Output: 0 Explanation: The operations are performed as follows: Initially, X = 0. X++: X is incremented by 1, X = 0 + 1 = 1. ++X: X is incremented by 1, X = 1 + 1 = 2. --X: X is decremented by 1, X = 2 - 1 = 1. X--: X is decremented by 1, X = 1 - 1 = 0.   Constraints: 1 <= operations.length <= 100 operations[i] will be either \"++X\", \"X++\", \"--X\", or \"X--\".",
        "1508": "You are given a 0-indexed integer array nums. For each index i (1 <= i <= nums.length - 2) the beauty of nums[i] equals: 2, if nums[j] < nums[i] < nums[k], for all 0 <= j < i and for all i < k <= nums.length - 1. 1, if nums[i - 1] < nums[i] < nums[i + 1], and the previous condition is not satisfied. 0, if none of the previous conditions holds. Return the sum of beauty of all nums[i] where 1 <= i <= nums.length - 2.   Example 1: Input: nums = [1,2,3] Output: 2 Explanation: For each index i in the range 1 <= i <= 1: - The beauty of nums[1] equals 2. Example 2: Input: nums = [2,4,6,4] Output: 1 Explanation: For each index i in the range 1 <= i <= 2: - The beauty of nums[1] equals 1. - The beauty of nums[2] equals 0. Example 3: Input: nums = [3,2,1] Output: 0 Explanation: For each index i in the range 1 <= i <= 1: - The beauty of nums[1] equals 0.   Constraints: 3 <= nums.length <= 105 1 <= nums[i] <= 105",
        "1509": "You are given a stream of points on the X-Y plane. Design an algorithm that: Adds new points from the stream into a data structure. Duplicate points are allowed and should be treated as different points. Given a query point, counts the number of ways to choose three points from the data structure such that the three points and the query point form an axis-aligned square with positive area. An axis-aligned square is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis. Implement the DetectSquares class: DetectSquares() Initializes the object with an empty data structure. void add(int[] point) Adds a new point point = [x, y] to the data structure. int count(int[] point) Counts the number of ways to form axis-aligned squares with point point = [x, y] as described above.   Example 1: Input [\"DetectSquares\", \"add\", \"add\", \"add\", \"count\", \"count\", \"add\", \"count\"] [[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]] Output [null, null, null, null, 1, 0, null, 2]  Explanation DetectSquares detectSquares = new DetectSquares(); detectSquares.add([3, 10]); detectSquares.add([11, 2]); detectSquares.add([3, 2]); detectSquares.count([11, 10]); // return 1. You can choose:                                //   - The first, second, and third points detectSquares.count([14, 8]);  // return 0. The query point cannot form a square with any points in the data structure. detectSquares.add([11, 2]);    // Adding duplicate points is allowed. detectSquares.count([11, 10]); // return 2. You can choose:                                //   - The first, second, and third points                                //   - The first, third, and fourth points   Constraints: point.length == 2 0 <= x, y <= 1000 At most 3000 calls in total will be made to add and count.",
        "1510": "",
        "1511": "Given a 0-indexed integer array nums of size n, find the maximum difference between nums[i] and nums[j] (i.e., nums[j] - nums[i]), such that 0 <= i < j < n and nums[i] < nums[j]. Return the maximum difference. If no such i and j exists, return -1.   Example 1: Input: nums = [7,1,5,4] Output: 4 Explanation: The maximum difference occurs with i = 1 and j = 2, nums[j] - nums[i] = 5 - 1 = 4. Note that with i = 1 and j = 0, the difference nums[j] - nums[i] = 7 - 1 = 6, but i > j, so it is not valid. Example 2: Input: nums = [9,4,3,2] Output: -1 Explanation: There is no i and j such that i < j and nums[i] < nums[j]. Example 3: Input: nums = [1,5,2,10] Output: 9 Explanation: The maximum difference occurs with i = 0 and j = 3, nums[j] - nums[i] = 10 - 1 = 9.   Constraints: n == nums.length 2 <= n <= 1000 1 <= nums[i] <= 109",
        "1512": "You are given a 0-indexed 2D array grid of size 2 x n, where grid[r][c] represents the number of points at position (r, c) on the matrix. Two robots are playing a game on this matrix. Both robots initially start at (0, 0) and want to reach (1, n-1). Each robot may only move to the right ((r, c) to (r, c + 1)) or down ((r, c) to (r + 1, c)). At the start of the game, the first robot moves from (0, 0) to (1, n-1), collecting all the points from the cells on its path. For all cells (r, c) traversed on the path, grid[r][c] is set to 0. Then, the second robot moves from (0, 0) to (1, n-1), collecting the points on its path. Note that their paths may intersect with one another. The first robot wants to minimize the number of points collected by the second robot. In contrast, the second robot wants to maximize the number of points it collects. If both robots play optimally, return the number of points collected by the second robot.   Example 1: Input: grid = [[2,5,4],[1,5,1]] Output: 4 Explanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue. The cells visited by the first robot are set to 0. The second robot will collect 0 + 0 + 4 + 0 = 4 points. Example 2: Input: grid = [[3,3,1],[8,5,2]] Output: 4 Explanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue. The cells visited by the first robot are set to 0. The second robot will collect 0 + 3 + 1 + 0 = 4 points. Example 3: Input: grid = [[1,3,1,15],[1,3,3,1]] Output: 7 Explanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue. The cells visited by the first robot are set to 0. The second robot will collect 0 + 1 + 3 + 3 + 0 = 7 points.   Constraints: grid.length == 2 n == grid[r].length 1 <= n <= 5 * 104 1 <= grid[r][c] <= 105",
        "1513": "You are given an m x n matrix board, representing the current state of a crossword puzzle. The crossword contains lowercase English letters (from solved words), ' ' to represent any empty cells, and '#' to represent any blocked cells. A word can be placed horizontally (left to right or right to left) or vertically (top to bottom or bottom to top) in the board if: It does not occupy a cell containing the character '#'. The cell each letter is placed in must either be ' ' (empty) or match the letter already on the board. There must not be any empty cells ' ' or other lowercase letters directly left or right of the word if the word was placed horizontally. There must not be any empty cells ' ' or other lowercase letters directly above or below the word if the word was placed vertically. Given a string word, return true if word can be placed in board, or false otherwise.   Example 1: Input: board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \"c\", \" \"]], word = \"abc\" Output: true Explanation: The word \"abc\" can be placed as shown above (top to bottom). Example 2: Input: board = [[\" \", \"#\", \"a\"], [\" \", \"#\", \"c\"], [\" \", \"#\", \"a\"]], word = \"ac\" Output: false Explanation: It is impossible to place the word because there will always be a space/letter above or below it. Example 3: Input: board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \" \", \"c\"]], word = \"ca\" Output: true Explanation: The word \"ca\" can be placed as shown above (right to left).    Constraints: m == board.length n == board[i].length 1 <= m * n <= 2 * 105 board[i][j] will be ' ', '#', or a lowercase English letter. 1 <= word.length <= max(m, n) word will contain only lowercase English letters.",
        "1514": "You are given a string s that contains digits 0-9, addition symbols '+', and multiplication symbols '*' only, representing a valid math expression of single digit numbers (e.g., 3+5*2). This expression was given to n elementary school students. The students were instructed to get the answer of the expression by following this order of operations: Compute multiplication, reading from left to right; Then, Compute addition, reading from left to right. You are given an integer array answers of length n, which are the submitted answers of the students in no particular order. You are asked to grade the answers, by following these rules: If an answer equals the correct answer of the expression, this student will be rewarded 5 points; Otherwise, if the answer could be interpreted as if the student applied the operators in the wrong order but had correct arithmetic, this student will be rewarded 2 points; Otherwise, this student will be rewarded 0 points. Return the sum of the points of the students.   Example 1: Input: s = \"7+3*1*2\", answers = [20,13,42] Output: 7 Explanation: As illustrated above, the correct answer of the expression is 13, therefore one student is rewarded 5 points: [20,13,42] A student might have applied the operators in this wrong order: ((7+3)*1)*2 = 20. Therefore one student is rewarded 2 points: [20,13,42] The points for the students are: [2,5,0]. The sum of the points is 2+5+0=7. Example 2: Input: s = \"3+5*2\", answers = [13,0,10,13,13,16,16] Output: 19 Explanation: The correct answer of the expression is 13, therefore three students are rewarded 5 points each: [13,0,10,13,13,16,16] A student might have applied the operators in this wrong order: ((3+5)*2 = 16. Therefore two students are rewarded 2 points: [13,0,10,13,13,16,16] The points for the students are: [5,0,0,5,5,2,2]. The sum of the points is 5+0+0+5+5+2+2=19. Example 3: Input: s = \"6+0*1\", answers = [12,9,6,4,8,6] Output: 10 Explanation: The correct answer of the expression is 6. If a student had incorrectly done (6+0)*1, the answer would also be 6. By the rules of grading, the students will still be rewarded 5 points (as they got the correct answer), not 2 points. The points for the students are: [0,0,5,0,0,5]. The sum of the points is 10.   Constraints: 3 <= s.length <= 31 s represents a valid expression that contains only digits 0-9, '+', and '*' only. All the integer operands in the expression are in the inclusive range [0, 9]. 1 <= The count of all operators ('+' and '*') in the math expression <= 15 Test data are generated such that the correct answer of the expression is in the range of [0, 1000]. n == answers.length 1 <= n <= 104 0 <= answers[i] <= 1000",
        "1515": "Given an array of digit strings nums and a digit string target, return the number of pairs of indices (i, j) (where i != j) such that the concatenation of nums[i] + nums[j] equals target.   Example 1: Input: nums = [\"777\",\"7\",\"77\",\"77\"], target = \"7777\" Output: 4 Explanation: Valid pairs are: - (0, 1): \"777\" + \"7\" - (1, 0): \"7\" + \"777\" - (2, 3): \"77\" + \"77\" - (3, 2): \"77\" + \"77\" Example 2: Input: nums = [\"123\",\"4\",\"12\",\"34\"], target = \"1234\" Output: 2 Explanation: Valid pairs are: - (0, 1): \"123\" + \"4\" - (2, 3): \"12\" + \"34\" Example 3: Input: nums = [\"1\",\"1\",\"1\"], target = \"11\" Output: 6 Explanation: Valid pairs are: - (0, 1): \"1\" + \"1\" - (1, 0): \"1\" + \"1\" - (0, 2): \"1\" + \"1\" - (2, 0): \"1\" + \"1\" - (1, 2): \"1\" + \"1\" - (2, 1): \"1\" + \"1\"   Constraints: 2 <= nums.length <= 100 1 <= nums[i].length <= 100 2 <= target.length <= 100 nums[i] and target consist of digits. nums[i] and target do not have leading zeros.",
        "1516": "A teacher is writing a test with n true/false questions, with 'T' denoting true and 'F' denoting false. He wants to confuse the students by maximizing the number of consecutive questions with the same answer (multiple trues or multiple falses in a row). You are given a string answerKey, where answerKey[i] is the original answer to the ith question. In addition, you are given an integer k, the maximum number of times you may perform the following operation: Change the answer key for any question to 'T' or 'F' (i.e., set answerKey[i] to 'T' or 'F'). Return the maximum number of consecutive 'T's or 'F's in the answer key after performing the operation at most k times.   Example 1: Input: answerKey = \"TTFF\", k = 2 Output: 4 Explanation: We can replace both the 'F's with 'T's to make answerKey = \"TTTT\". There are four consecutive 'T's. Example 2: Input: answerKey = \"TFFT\", k = 1 Output: 3 Explanation: We can replace the first 'T' with an 'F' to make answerKey = \"FFFT\". Alternatively, we can replace the second 'T' with an 'F' to make answerKey = \"TFFF\". In both cases, there are three consecutive 'F's. Example 3: Input: answerKey = \"TTFTTFTT\", k = 1 Output: 5 Explanation: We can replace the first 'F' to make answerKey = \"TTTTTFTT\" Alternatively, we can replace the second 'F' to make answerKey = \"TTFTTTTT\".  In both cases, there are five consecutive 'T's.   Constraints: n == answerKey.length 1 <= n <= 5 * 104 answerKey[i] is either 'T' or 'F' 1 <= k <= n",
        "1517": "You are given a 0-indexed integer array nums of length n. The number of ways to partition nums is the number of pivot indices that satisfy both conditions: 1 <= pivot < n nums[0] + nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1] You are also given an integer k. You can choose to change the value of one element of nums to k, or to leave the array unchanged. Return the maximum possible number of ways to partition nums to satisfy both conditions after changing at most one element.   Example 1: Input: nums = [2,-1,2], k = 3 Output: 1 Explanation: One optimal approach is to change nums[0] to k. The array becomes [3,-1,2]. There is one way to partition the array: - For pivot = 2, we have the partition [3,-1 | 2]: 3 + -1 == 2. Example 2: Input: nums = [0,0,0], k = 1 Output: 2 Explanation: The optimal approach is to leave the array unchanged. There are two ways to partition the array: - For pivot = 1, we have the partition [0 | 0,0]: 0 == 0 + 0. - For pivot = 2, we have the partition [0,0 | 0]: 0 + 0 == 0. Example 3: Input: nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33 Output: 4 Explanation: One optimal approach is to change nums[2] to k. The array becomes [22,4,-33,-20,-15,15,-16,7,19,-10,0,-13,-14]. There are four ways to partition the array.   Constraints: n == nums.length 2 <= n <= 105 -105 <= k, nums[i] <= 105",
        "1518": "You are given a string s consisting of n characters which are either 'X' or 'O'. A move is defined as selecting three consecutive characters of s and converting them to 'O'. Note that if a move is applied to the character 'O', it will stay the same. Return the minimum number of moves required so that all the characters of s are converted to 'O'.   Example 1: Input: s = \"XXX\" Output: 1 Explanation: XXX -> OOO We select all the 3 characters and convert them in one move. Example 2: Input: s = \"XXOX\" Output: 2 Explanation: XXOX -> OOOX -> OOOO We select the first 3 characters in the first move, and convert them to 'O'. Then we select the last 3 characters and convert them so that the final string contains all 'O's. Example 3: Input: s = \"OOOO\" Output: 0 Explanation: There are no 'X's in s to convert.   Constraints: 3 <= s.length <= 1000 s[i] is either 'X' or 'O'.",
        "1519": "You have observations of n + m 6-sided dice rolls with each face numbered from 1 to 6. n of the observations went missing, and you only have the observations of m rolls. Fortunately, you have also calculated the average value of the n + m rolls. You are given an integer array rolls of length m where rolls[i] is the value of the ith observation. You are also given the two integers mean and n. Return an array of length n containing the missing observations such that the average value of the n + m rolls is exactly mean. If there are multiple valid answers, return any of them. If no such array exists, return an empty array. The average value of a set of k numbers is the sum of the numbers divided by k. Note that mean is an integer, so the sum of the n + m rolls should be divisible by n + m.   Example 1: Input: rolls = [3,2,4,3], mean = 4, n = 2 Output: [6,6] Explanation: The mean of all n + m rolls is (3 + 2 + 4 + 3 + 6 + 6) / 6 = 4. Example 2: Input: rolls = [1,5,6], mean = 3, n = 4 Output: [2,3,2,2] Explanation: The mean of all n + m rolls is (1 + 5 + 6 + 2 + 3 + 2 + 2) / 7 = 3. Example 3: Input: rolls = [1,2,3,4], mean = 6, n = 4 Output: [] Explanation: It is impossible for the mean to be 6 no matter what the 4 missing rolls are.   Constraints: m == rolls.length 1 <= n, m <= 105 1 <= rolls[i], mean <= 6",
        "1520": "Alice and Bob continue their games with stones. There is a row of n stones, and each stone has an associated value. You are given an integer array stones, where stones[i] is the value of the ith stone. Alice and Bob take turns, with Alice starting first. On each turn, the player may remove any stone from stones. The player who removes a stone loses if the sum of the values of all removed stones is divisible by 3. Bob will win automatically if there are no remaining stones (even if it is Alice's turn). Assuming both players play optimally, return true if Alice wins and false if Bob wins.   Example 1: Input: stones = [2,1] Output: true Explanation: The game will be played as follows: - Turn 1: Alice can remove either stone. - Turn 2: Bob removes the remaining stone.  The sum of the removed stones is 1 + 2 = 3 and is divisible by 3. Therefore, Bob loses and Alice wins the game. Example 2: Input: stones = [2] Output: false Explanation: Alice will remove the only stone, and the sum of the values on the removed stones is 2.  Since all the stones are removed and the sum of values is not divisible by 3, Bob wins the game. Example 3: Input: stones = [5,1,2,4,3] Output: false Explanation: Bob will always win. One possible way for Bob to win is shown below: - Turn 1: Alice can remove the second stone with value 1. Sum of removed stones = 1. - Turn 2: Bob removes the fifth stone with value 3. Sum of removed stones = 1 + 3 = 4. - Turn 3: Alices removes the fourth stone with value 4. Sum of removed stones = 1 + 3 + 4 = 8. - Turn 4: Bob removes the third stone with value 2. Sum of removed stones = 1 + 3 + 4 + 2 = 10. - Turn 5: Alice removes the first stone with value 5. Sum of removed stones = 1 + 3 + 4 + 2 + 5 = 15. Alice loses the game because the sum of the removed stones (15) is divisible by 3. Bob wins the game.   Constraints: 1 <= stones.length <= 105 1 <= stones[i] <= 104",
        "1521": "You are given a string s, an integer k, a letter letter, and an integer repetition. Return the lexicographically smallest subsequence of s of length k that has the letter letter appear at least repetition times. The test cases are generated so that the letter appears in s at least repetition times. A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string a is lexicographically smaller than a string b if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.   Example 1: Input: s = \"leet\", k = 3, letter = \"e\", repetition = 1 Output: \"eet\" Explanation: There are four subsequences of length 3 that have the letter 'e' appear at least 1 time: - \"lee\" (from \"leet\") - \"let\" (from \"leet\") - \"let\" (from \"leet\") - \"eet\" (from \"leet\") The lexicographically smallest subsequence among them is \"eet\". Example 2: Input: s = \"leetcode\", k = 4, letter = \"e\", repetition = 2 Output: \"ecde\" Explanation: \"ecde\" is the lexicographically smallest subsequence of length 4 that has the letter \"e\" appear at least 2 times. Example 3: Input: s = \"bb\", k = 2, letter = \"b\", repetition = 2 Output: \"bb\" Explanation: \"bb\" is the only subsequence of length 2 that has the letter \"b\" appear at least 2 times.   Constraints: 1 <= repetition <= k <= s.length <= 5 * 104 s consists of lowercase English letters. letter is a lowercase English letter, and appears in s at least repetition times.",
        "1522": "Given three integer arrays nums1, nums2, and nums3, return a distinct array containing all the values that are present in at least two out of the three arrays. You may return the values in any order.   Example 1: Input: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3] Output: [3,2] Explanation: The values that are present in at least two arrays are: - 3, in all three arrays. - 2, in nums1 and nums2. Example 2: Input: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2] Output: [2,3,1] Explanation: The values that are present in at least two arrays are: - 2, in nums2 and nums3. - 3, in nums1 and nums2. - 1, in nums1 and nums3. Example 3: Input: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5] Output: [] Explanation: No value is present in at least two arrays.   Constraints: 1 <= nums1.length, nums2.length, nums3.length <= 100 1 <= nums1[i], nums2[j], nums3[k] <= 100",
        "1523": "You are given a stream of records about a particular stock. Each record contains a timestamp and the corresponding price of the stock at that timestamp. Unfortunately due to the volatile nature of the stock market, the records do not come in order. Even worse, some records may be incorrect. Another record with the same timestamp may appear later in the stream correcting the price of the previous wrong record. Design an algorithm that: Updates the price of the stock at a particular timestamp, correcting the price from any previous records at the timestamp. Finds the latest price of the stock based on the current records. The latest price is the price at the latest timestamp recorded. Finds the maximum price the stock has been based on the current records. Finds the minimum price the stock has been based on the current records. Implement the StockPrice class: StockPrice() Initializes the object with no price records. void update(int timestamp, int price) Updates the price of the stock at the given timestamp. int current() Returns the latest price of the stock. int maximum() Returns the maximum price of the stock. int minimum() Returns the minimum price of the stock.   Example 1: Input [\"StockPrice\", \"update\", \"update\", \"current\", \"maximum\", \"update\", \"maximum\", \"update\", \"minimum\"] [[], [1, 10], [2, 5], [], [], [1, 3], [], [4, 2], []] Output [null, null, null, 5, 10, null, 5, null, 2]  Explanation StockPrice stockPrice = new StockPrice(); stockPrice.update(1, 10); // Timestamps are [1] with corresponding prices [10]. stockPrice.update(2, 5);  // Timestamps are [1,2] with corresponding prices [10,5]. stockPrice.current();     // return 5, the latest timestamp is 2 with the price being 5. stockPrice.maximum();     // return 10, the maximum price is 10 at timestamp 1. stockPrice.update(1, 3);  // The previous timestamp 1 had the wrong price, so it is updated to 3.                           // Timestamps are [1,2] with corresponding prices [3,5]. stockPrice.maximum();     // return 5, the maximum price is 5 after the correction. stockPrice.update(4, 2);  // Timestamps are [1,2,4] with corresponding prices [3,5,2]. stockPrice.minimum();     // return 2, the minimum price is 2 at timestamp 4.   Constraints: 1 <= timestamp, price <= 109 At most 105 calls will be made in total to update, current, maximum, and minimum. current, maximum, and minimum will be called only after update has been called at least once.",
        "1524": "There are n availabe seats and n students standing in a room. You are given an array seats of length n, where seats[i] is the position of the ith seat. You are also given the array students of length n, where students[j] is the position of the jth student. You may perform the following move any number of times: Increase or decrease the position of the ith student by 1 (i.e., moving the ith student from position x to x + 1 or x - 1) Return the minimum number of moves required to move each student to a seat such that no two students are in the same seat. Note that there may be multiple seats or students in the same position at the beginning.   Example 1: Input: seats = [3,1,5], students = [2,7,4] Output: 4 Explanation: The students are moved as follows: - The first student is moved from position 2 to position 1 using 1 move. - The second student is moved from position 7 to position 5 using 2 moves. - The third student is moved from position 4 to position 3 using 1 move. In total, 1 + 2 + 1 = 4 moves were used. Example 2: Input: seats = [4,1,5,9], students = [1,3,2,6] Output: 7 Explanation: The students are moved as follows: - The first student is not moved. - The second student is moved from position 3 to position 4 using 1 move. - The third student is moved from position 2 to position 5 using 3 moves. - The fourth student is moved from position 6 to position 9 using 3 moves. In total, 0 + 1 + 3 + 3 = 7 moves were used. Example 3: Input: seats = [2,2,6,6], students = [1,3,2,6] Output: 4 Explanation: Note that there are two seats at position 2 and two seats at position 6. The students are moved as follows: - The first student is moved from position 1 to position 2 using 1 move. - The second student is moved from position 3 to position 6 using 3 moves. - The third student is not moved. - The fourth student is not moved. In total, 1 + 3 + 0 + 0 = 4 moves were used.   Constraints: n == seats.length == students.length 1 <= n <= 100 1 <= seats[i], students[j] <= 100",
        "1525": "There are n pieces arranged in a line, and each piece is colored either by 'A' or by 'B'. You are given a string colors of length n where colors[i] is the color of the ith piece. Alice and Bob are playing a game where they take alternating turns removing pieces from the line. In this game, Alice moves first. Alice is only allowed to remove a piece colored 'A' if both its neighbors are also colored 'A'. She is not allowed to remove pieces that are colored 'B'. Bob is only allowed to remove a piece colored 'B' if both its neighbors are also colored 'B'. He is not allowed to remove pieces that are colored 'A'. Alice and Bob cannot remove pieces from the edge of the line. If a player cannot make a move on their turn, that player loses and the other player wins. Assuming Alice and Bob play optimally, return true if Alice wins, or return false if Bob wins.   Example 1: Input: colors = \"AAABABB\" Output: true Explanation: AAABABB -> AABABB Alice moves first. She removes the second 'A' from the left since that is the only 'A' whose neighbors are both 'A'.  Now it's Bob's turn. Bob cannot make a move on his turn since there are no 'B's whose neighbors are both 'B'. Thus, Alice wins, so return true. Example 2: Input: colors = \"AA\" Output: false Explanation: Alice has her turn first. There are only two 'A's and both are on the edge of the line, so she cannot move on her turn. Thus, Bob wins, so return false. Example 3: Input: colors = \"ABBBBBBBAAA\" Output: false Explanation: ABBBBBBBAAA -> ABBBBBBBAA Alice moves first. Her only option is to remove the second to last 'A' from the right.  ABBBBBBBAA -> ABBBBBBAA Next is Bob's turn. He has many options for which 'B' piece to remove. He can pick any.  On Alice's second turn, she has no more pieces that she can remove. Thus, Bob wins, so return false.   Constraints: 1 <= colors.length <= 105 colors consists of only the letters 'A' and 'B'",
        "1526": "There is a network of n servers, labeled from 0 to n - 1. You are given a 2D integer array edges, where edges[i] = [ui, vi] indicates there is a message channel between servers ui and vi, and they can pass any number of messages to each other directly in one second. You are also given a 0-indexed integer array patience of length n. All servers are connected, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels. The server labeled 0 is the master server. The rest are data servers. Each data server needs to send its message to the master server for processing and wait for a reply. Messages move between servers optimally, so every message takes the least amount of time to arrive at the master server. The master server will process all newly arrived messages instantly and send a reply to the originating server via the reversed path the message had gone through. At the beginning of second 0, each data server sends its message to be processed. Starting from second 1, at the beginning of every second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server: If it has not, it will resend the message periodically. The data server i will resend the message every patience[i] second(s), i.e., the data server i will resend the message if patience[i] second(s) have elapsed since the last time the message was sent from this server. Otherwise, no more resending will occur from this server. The network becomes idle when there are no messages passing between servers or arriving at servers. Return the earliest second starting from which the network becomes idle.   Example 1: Input: edges = [[0,1],[1,2]], patience = [0,2,1] Output: 8 Explanation: At (the beginning of) second 0, - Data server 1 sends its message (denoted 1A) to the master server. - Data server 2 sends its message (denoted 2A) to the master server.  At second 1, - Message 1A arrives at the master server. Master server processes message 1A instantly and sends a reply 1A back. - Server 1 has not received any reply. 1 second (1 < patience[1] = 2) elapsed since this server has sent the message, therefore it does not resend the message. - Server 2 has not received any reply. 1 second (1 == patience[2] = 1) elapsed since this server has sent the message, therefore it resends the message (denoted 2B).  At second 2, - The reply 1A arrives at server 1. No more resending will occur from server 1. - Message 2A arrives at the master server. Master server processes message 2A instantly and sends a reply 2A back. - Server 2 resends the message (denoted 2C). ... At second 4, - The reply 2A arrives at server 2. No more resending will occur from server 2. ... At second 7, reply 2D arrives at server 2.  Starting from the beginning of the second 8, there are no messages passing between servers or arriving at servers. This is the time when the network becomes idle. Example 2: Input: edges = [[0,1],[0,2],[1,2]], patience = [0,10,10] Output: 3 Explanation: Data servers 1 and 2 receive a reply back at the beginning of second 2. From the beginning of the second 3, the network becomes idle.   Constraints: n == patience.length 2 <= n <= 105 patience[0] == 0 1 <= patience[i] <= 105 for 1 <= i < n 1 <= edges.length <= min(105, n * (n - 1) / 2) edges[i].length == 2 0 <= ui, vi < n ui != vi There are no duplicate edges. Each server can directly or indirectly reach another server.",
        "1527": "Given two sorted 0-indexed integer arrays nums1 and nums2 as well as an integer k, return the kth (1-based) smallest product of nums1[i] * nums2[j] where 0 <= i < nums1.length and 0 <= j < nums2.length.   Example 1: Input: nums1 = [2,5], nums2 = [3,4], k = 2 Output: 8 Explanation: The 2 smallest products are: - nums1[0] * nums2[0] = 2 * 3 = 6 - nums1[0] * nums2[1] = 2 * 4 = 8 The 2nd smallest product is 8. Example 2: Input: nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6 Output: 0 Explanation: The 6 smallest products are: - nums1[0] * nums2[1] = (-4) * 4 = -16 - nums1[0] * nums2[0] = (-4) * 2 = -8 - nums1[1] * nums2[1] = (-2) * 4 = -8 - nums1[1] * nums2[0] = (-2) * 2 = -4 - nums1[2] * nums2[0] = 0 * 2 = 0 - nums1[2] * nums2[1] = 0 * 4 = 0 The 6th smallest product is 0. Example 3: Input: nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3 Output: -6 Explanation: The 3 smallest products are: - nums1[0] * nums2[4] = (-2) * 5 = -10 - nums1[0] * nums2[3] = (-2) * 4 = -8 - nums1[4] * nums2[0] = 2 * (-3) = -6 The 3rd smallest product is -6.   Constraints: 1 <= nums1.length, nums2.length <= 5 * 104 -105 <= nums1[i], nums2[j] <= 105 1 <= k <= nums1.length * nums2.length nums1 and nums2 are sorted.",
        "1528": "A sentence is a list of tokens separated by a single space with no leading or trailing spaces. Every token is either a positive number consisting of digits 0-9 with no leading zeros, or a word consisting of lowercase English letters. For example, \"a puppy has 2 eyes 4 legs\" is a sentence with seven tokens: \"2\" and \"4\" are numbers and the other tokens such as \"puppy\" are words. Given a string s representing a sentence, you need to check if all the numbers in s are strictly increasing from left to right (i.e., other than the last number, each number is strictly smaller than the number on its right in s). Return true if so, or false otherwise.   Example 1: Input: s = \"1 box has 3 blue 4 red 6 green and 12 yellow marbles\" Output: true Explanation: The numbers in s are: 1, 3, 4, 6, 12. They are strictly increasing from left to right: 1 < 3 < 4 < 6 < 12. Example 2: Input: s = \"hello world 5 x 5\" Output: false Explanation: The numbers in s are: 5, 5. They are not strictly increasing. Example 3: Input: s = \"sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s\" Output: false Explanation: The numbers in s are: 7, 51, 50, 60. They are not strictly increasing.   Constraints: 3 <= s.length <= 200 s consists of lowercase English letters, spaces, and digits from 0 to 9, inclusive. The number of tokens in s is between 2 and 100, inclusive. The tokens in s are separated by a single space. There are at least two numbers in s. Each number in s is a positive number less than 100, with no leading zeros. s contains no leading or trailing spaces.",
        "1529": "You have been tasked with writing a program for a popular bank that will automate all its incoming transactions (transfer, deposit, and withdraw). The bank has n accounts numbered from 1 to n. The initial balance of each account is stored in a 0-indexed integer array balance, with the (i + 1)th account having an initial balance of balance[i]. Execute all the valid transactions. A transaction is valid if: The given account number(s) are between 1 and n, and The amount of money withdrawn or transferred from is less than or equal to the balance of the account. Implement the Bank class: Bank(long[] balance) Initializes the object with the 0-indexed integer array balance. boolean transfer(int account1, int account2, long money) Transfers money dollars from the account numbered account1 to the account numbered account2. Return true if the transaction was successful, false otherwise. boolean deposit(int account, long money) Deposit money dollars into the account numbered account. Return true if the transaction was successful, false otherwise. boolean withdraw(int account, long money) Withdraw money dollars from the account numbered account. Return true if the transaction was successful, false otherwise.   Example 1: Input [\"Bank\", \"withdraw\", \"transfer\", \"deposit\", \"transfer\", \"withdraw\"] [[[10, 100, 20, 50, 30]], [3, 10], [5, 1, 20], [5, 20], [3, 4, 15], [10, 50]] Output [null, true, true, true, false, false]  Explanation Bank bank = new Bank([10, 100, 20, 50, 30]); bank.withdraw(3, 10);    // return true, account 3 has a balance of $20, so it is valid to withdraw $10.                          // Account 3 has $20 - $10 = $10. bank.transfer(5, 1, 20); // return true, account 5 has a balance of $30, so it is valid to transfer $20.                          // Account 5 has $30 - $20 = $10, and account 1 has $10 + $20 = $30. bank.deposit(5, 20);     // return true, it is valid to deposit $20 to account 5.                          // Account 5 has $10 + $20 = $30. bank.transfer(3, 4, 15); // return false, the current balance of account 3 is $10,                          // so it is invalid to transfer $15 from it. bank.withdraw(10, 50);   // return false, it is invalid because account 10 does not exist.   Constraints: n == balance.length 1 <= n, account, account1, account2 <= 105 0 <= balance[i], money <= 1012 At most 104 calls will be made to each function transfer, deposit, withdraw.",
        "1530": "Given an integer array nums, find the maximum possible bitwise OR of a subset of nums and return the number of different non-empty subsets with the maximum bitwise OR. An array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b. Two subsets are considered different if the indices of the elements chosen are different. The bitwise OR of an array a is equal to a[0] OR a[1] OR ... OR a[a.length - 1] (0-indexed).   Example 1: Input: nums = [3,1] Output: 2 Explanation: The maximum possible bitwise OR of a subset is 3. There are 2 subsets with a bitwise OR of 3: - [3] - [3,1] Example 2: Input: nums = [2,2,2] Output: 7 Explanation: All non-empty subsets of [2,2,2] have a bitwise OR of 2. There are 23 - 1 = 7 total subsets. Example 3: Input: nums = [3,2,1,5] Output: 6 Explanation: The maximum possible bitwise OR of a subset is 7. There are 6 subsets with a bitwise OR of 7: - [3,5] - [3,1,5] - [3,2,5] - [3,2,1,5] - [2,5] - [2,1,5]   Constraints: 1 <= nums.length <= 16 1 <= nums[i] <= 105",
        "1531": "A city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. The time taken to traverse any edge is time minutes. Each vertex has a traffic signal which changes its color from green to red and vice versa every change minutes. All signals change at the same time. You can enter a vertex at any time, but can leave a vertex only when the signal is green. You cannot wait at a vertex if the signal is green. The second minimum value is defined as the smallest value strictly larger than the minimum value. For example the second minimum value of [2, 3, 4] is 3, and the second minimum value of [2, 2, 4] is 4. Given n, edges, time, and change, return the second minimum time it will take to go from vertex 1 to vertex n. Notes: You can go through any vertex any number of times, including 1 and n. You can assume that when the journey starts, all signals have just turned green.   Example 1: Input: n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5 Output: 13 Explanation: The figure on the left shows the given graph. The blue path in the figure on the right is the minimum time path. The time taken is: - Start at 1, time elapsed=0 - 1 -> 4: 3 minutes, time elapsed=3 - 4 -> 5: 3 minutes, time elapsed=6 Hence the minimum time needed is 6 minutes.  The red path shows the path to get the second minimum time. - Start at 1, time elapsed=0 - 1 -> 3: 3 minutes, time elapsed=3 - 3 -> 4: 3 minutes, time elapsed=6 - Wait at 4 for 4 minutes, time elapsed=10 - 4 -> 5: 3 minutes, time elapsed=13 Hence the second minimum time is 13 minutes.       Example 2: Input: n = 2, edges = [[1,2]], time = 3, change = 2 Output: 11 Explanation: The minimum time path is 1 -> 2 with time = 3 minutes. The second minimum time path is 1 -> 2 -> 1 -> 2 with time = 11 minutes.   Constraints: 2 <= n <= 104 n - 1 <= edges.length <= min(2 * 104, n * (n - 1) / 2) edges[i].length == 2 1 <= ui, vi <= n ui != vi There are no duplicate edges. Each vertex can be reached directly or indirectly from every other vertex. 1 <= time, change <= 103",
        "1532": "A sentence consists of lowercase letters ('a' to 'z'), digits ('0' to '9'), hyphens ('-'), punctuation marks ('!', '.', and ','), and spaces (' ') only. Each sentence can be broken down into one or more tokens separated by one or more spaces ' '. A token is a valid word if all three of the following are true: It only contains lowercase letters, hyphens, and/or punctuation (no digits). There is at most one hyphen '-'. If present, it must be surrounded by lowercase characters (\"a-b\" is valid, but \"-ab\" and \"ab-\" are not valid). There is at most one punctuation mark. If present, it must be at the end of the token (\"ab,\", \"cd!\", and \".\" are valid, but \"a!b\" and \"c.,\" are not valid). Examples of valid words include \"a-b.\", \"afad\", \"ba-c\", \"a!\", and \"!\". Given a string sentence, return the number of valid words in sentence.   Example 1: Input: sentence = \"cat and  dog\" Output: 3 Explanation: The valid words in the sentence are \"cat\", \"and\", and \"dog\". Example 2: Input: sentence = \"!this  1-s b8d!\" Output: 0 Explanation: There are no valid words in the sentence. \"!this\" is invalid because it starts with a punctuation mark. \"1-s\" and \"b8d\" are invalid because they contain digits. Example 3: Input: sentence = \"alice and  bob are playing stone-game10\" Output: 5 Explanation: The valid words in the sentence are \"alice\", \"and\", \"bob\", \"are\", and \"playing\". \"stone-game10\" is invalid because it contains digits.   Constraints: 1 <= sentence.length <= 1000 sentence only contains lowercase English letters, digits, ' ', '-', '!', '.', and ','. There will be at least 1 token.",
        "1533": "An integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x. Given an integer n, return the smallest numerically balanced number strictly greater than n.   Example 1: Input: n = 1 Output: 22 Explanation:  22 is numerically balanced since: - The digit 2 occurs 2 times.  It is also the smallest numerically balanced number strictly greater than 1. Example 2: Input: n = 1000 Output: 1333 Explanation:  1333 is numerically balanced since: - The digit 1 occurs 1 time. - The digit 3 occurs 3 times.  It is also the smallest numerically balanced number strictly greater than 1000. Note that 1022 cannot be the answer because 0 appeared more than 0 times. Example 3: Input: n = 3000 Output: 3133 Explanation:  3133 is numerically balanced since: - The digit 1 occurs 1 time. - The digit 3 occurs 3 times. It is also the smallest numerically balanced number strictly greater than 3000.   Constraints: 0 <= n <= 106",
        "1534": "There is a binary tree rooted at 0 consisting of n nodes. The nodes are labeled from 0 to n - 1. You are given a 0-indexed integer array parents representing the tree, where parents[i] is the parent of node i. Since node 0 is the root, parents[0] == -1. Each node has a score. To find the score of a node, consider if the node and the edges connected to it were removed. The tree would become one or more non-empty subtrees. The size of a subtree is the number of the nodes in it. The score of the node is the product of the sizes of all those subtrees. Return the number of nodes that have the highest score.   Example 1: Input: parents = [-1,2,0,2,0] Output: 3 Explanation: - The score of node 0 is: 3 * 1 = 3 - The score of node 1 is: 4 = 4 - The score of node 2 is: 1 * 1 * 2 = 2 - The score of node 3 is: 4 = 4 - The score of node 4 is: 4 = 4 The highest score is 4, and three nodes (node 1, node 3, and node 4) have the highest score. Example 2: Input: parents = [-1,2,0] Output: 2 Explanation: - The score of node 0 is: 2 = 2 - The score of node 1 is: 2 = 2 - The score of node 2 is: 1 * 1 = 1 The highest score is 2, and two nodes (node 0 and node 1) have the highest score.   Constraints: n == parents.length 2 <= n <= 105 parents[0] == -1 0 <= parents[i] <= n - 1 for i != 0 parents represents a valid binary tree.",
        "1535": "You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given a 2D integer array relations where relations[j] = [prevCoursej, nextCoursej] denotes that course prevCoursej has to be completed before course nextCoursej (prerequisite relationship). Furthermore, you are given a 0-indexed integer array time where time[i] denotes how many months it takes to complete the (i+1)th course. You must find the minimum number of months needed to complete all the courses following these rules: You may start taking a course at any time if the prerequisites are met. Any number of courses can be taken at the same time. Return the minimum number of months needed to complete all the courses. Note: The test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).   Example 1: Input: n = 3, relations = [[1,3],[2,3]], time = [3,2,5] Output: 8 Explanation: The figure above represents the given graph and the time required to complete each course.  We start course 1 and course 2 simultaneously at month 0. Course 1 takes 3 months and course 2 takes 2 months to complete respectively. Thus, the earliest time we can start course 3 is at month 3, and the total time required is 3 + 5 = 8 months. Example 2: Input: n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5] Output: 12 Explanation: The figure above represents the given graph and the time required to complete each course. You can start courses 1, 2, and 3 at month 0. You can complete them after 1, 2, and 3 months respectively. Course 4 can be taken only after course 3 is completed, i.e., after 3 months. It is completed after 3 + 4 = 7 months. Course 5 can be taken only after courses 1, 2, 3, and 4 have been completed, i.e., after max(1,2,3,7) = 7 months. Thus, the minimum time needed to complete all the courses is 7 + 5 = 12 months.   Constraints: 1 <= n <= 5 * 104 0 <= relations.length <= min(n * (n - 1) / 2, 5 * 104) relations[j].length == 2 1 <= prevCoursej, nextCoursej <= n prevCoursej != nextCoursej All the pairs [prevCoursej, nextCoursej] are unique. time.length == n 1 <= time[i] <= 104 The given graph is a directed acyclic graph.",
        "1536": "A distinct string is a string that is present only once in an array. Given an array of strings arr, and an integer k, return the kth distinct string present in arr. If there are fewer than k distinct strings, return an empty string \"\". Note that the strings are considered in the order in which they appear in the array.   Example 1: Input: arr = [\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"], k = 2 Output: \"a\" Explanation: The only distinct strings in arr are \"d\" and \"a\". \"d\" appears 1st, so it is the 1st distinct string. \"a\" appears 2nd, so it is the 2nd distinct string. Since k == 2, \"a\" is returned.  Example 2: Input: arr = [\"aaa\",\"aa\",\"a\"], k = 1 Output: \"aaa\" Explanation: All strings in arr are distinct, so the 1st string \"aaa\" is returned. Example 3: Input: arr = [\"a\",\"b\",\"a\"], k = 3 Output: \"\" Explanation: The only distinct string is \"b\". Since there are fewer than 3 distinct strings, we return an empty string \"\".   Constraints: 1 <= k <= arr.length <= 1000 1 <= arr[i].length <= 5 arr[i] consists of lowercase English letters.",
        "1537": "You are given a 0-indexed 2D integer array of events where events[i] = [startTimei, endTimei, valuei]. The ith event starts at startTimei and ends at endTimei, and if you attend this event, you will receive a value of valuei. You can choose at most two non-overlapping events to attend such that the sum of their values is maximized. Return this maximum sum. Note that the start time and end time is inclusive: that is, you cannot attend two events where one of them starts and the other ends at the same time. More specifically, if you attend an event with end time t, the next event must start at or after t + 1.   Example 1: Input: events = [[1,3,2],[4,5,2],[2,4,3]] Output: 4 Explanation: Choose the green events, 0 and 1 for a sum of 2 + 2 = 4. Example 2: Input: events = [[1,3,2],[4,5,2],[1,5,5]] Output: 5 Explanation: Choose event 2 for a sum of 5. Example 3: Input: events = [[1,5,3],[1,5,1],[6,6,5]] Output: 8 Explanation: Choose events 0 and 2 for a sum of 3 + 5 = 8.   Constraints: 2 <= events.length <= 105 events[i].length == 3 1 <= startTimei <= endTimei <= 109 1 <= valuei <= 106",
        "1538": "There is a long table with a line of plates and candles arranged on top of it. You are given a 0-indexed string s consisting of characters '*' and '|' only, where a '*' represents a plate and a '|' represents a candle. You are also given a 0-indexed 2D integer array queries where queries[i] = [lefti, righti] denotes the substring s[lefti...righti] (inclusive). For each query, you need to find the number of plates between candles that are in the substring. A plate is considered between candles if there is at least one candle to its left and at least one candle to its right in the substring. For example, s = \"||**||**|*\", and a query [3, 8] denotes the substring \"*||**|\". The number of plates between candles in this substring is 2, as each of the two plates has at least one candle in the substring to its left and right. Return an integer array answer where answer[i] is the answer to the ith query.   Example 1: Input: s = \"**|**|***|\", queries = [[2,5],[5,9]] Output: [2,3] Explanation: - queries[0] has two plates between candles. - queries[1] has three plates between candles. Example 2: Input: s = \"***|**|*****|**||**|*\", queries = [[1,17],[4,5],[14,17],[5,11],[15,16]] Output: [9,0,0,0,0] Explanation: - queries[0] has nine plates between candles. - The other queries have zero plates between candles.   Constraints: 3 <= s.length <= 105 s consists of '*' and '|' characters. 1 <= queries.length <= 105 queries[i].length == 2 0 <= lefti <= righti < s.length",
        "1539": "There is an 8 x 8 chessboard containing n pieces (rooks, queens, or bishops). You are given a string array pieces of length n, where pieces[i] describes the type (rook, queen, or bishop) of the ith piece. In addition, you are given a 2D integer array positions also of length n, where positions[i] = [ri, ci] indicates that the ith piece is currently at the 1-based coordinate (ri, ci) on the chessboard. When making a move for a piece, you choose a destination square that the piece will travel toward and stop on. A rook can only travel horizontally or vertically from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), or (r, c-1). A queen can only travel horizontally, vertically, or diagonally from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), (r, c-1), (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1). A bishop can only travel diagonally from (r, c) to the direction of (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1). You must make a move for every piece on the board simultaneously. A move combination consists of all the moves performed on all the given pieces. Every second, each piece will instantaneously travel one square towards their destination if they are not already at it. All pieces start traveling at the 0th second. A move combination is invalid if, at a given time, two or more pieces occupy the same square. Return the number of valid move combinations. Notes: No two pieces will start in the same square. You may choose the square a piece is already on as its destination. If two pieces are directly adjacent to each other, it is valid for them to move past each other and swap positions in one second.   Example 1: Input: pieces = [\"rook\"], positions = [[1,1]] Output: 15 Explanation: The image above shows the possible squares the piece can move to. Example 2: Input: pieces = [\"queen\"], positions = [[1,1]] Output: 22 Explanation: The image above shows the possible squares the piece can move to. Example 3: Input: pieces = [\"bishop\"], positions = [[4,3]] Output: 12 Explanation: The image above shows the possible squares the piece can move to.   Constraints: n == pieces.length  n == positions.length 1 <= n <= 4 pieces only contains the strings \"rook\", \"queen\", and \"bishop\". There will be at most one queen on the chessboard. 1 <= xi, yi <= 8 Each positions[i] is distinct.",
        "1540": "Given a 0-indexed integer array nums, return the smallest index i of nums such that i mod 10 == nums[i], or -1 if such index does not exist. x mod y denotes the remainder when x is divided by y.   Example 1: Input: nums = [0,1,2] Output: 0 Explanation:  i=0: 0 mod 10 = 0 == nums[0]. i=1: 1 mod 10 = 1 == nums[1]. i=2: 2 mod 10 = 2 == nums[2]. All indices have i mod 10 == nums[i], so we return the smallest index 0. Example 2: Input: nums = [4,3,2,1] Output: 2 Explanation:  i=0: 0 mod 10 = 0 != nums[0]. i=1: 1 mod 10 = 1 != nums[1]. i=2: 2 mod 10 = 2 == nums[2]. i=3: 3 mod 10 = 3 != nums[3]. 2 is the only index which has i mod 10 == nums[i]. Example 3: Input: nums = [1,2,3,4,5,6,7,8,9,0] Output: -1 Explanation: No index satisfies i mod 10 == nums[i].   Constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 9",
        "1541": "A critical point in a linked list is defined as either a local maxima or a local minima. A node is a local maxima if the current node has a value strictly greater than the previous node and the next node. A node is a local minima if the current node has a value strictly smaller than the previous node and the next node. Note that a node can only be a local maxima/minima if there exists both a previous node and a next node. Given a linked list head, return an array of length 2 containing [minDistance, maxDistance] where minDistance is the minimum distance between any two distinct critical points and maxDistance is the maximum distance between any two distinct critical points. If there are fewer than two critical points, return [-1, -1].   Example 1: Input: head = [3,1] Output: [-1,-1] Explanation: There are no critical points in [3,1]. Example 2: Input: head = [5,3,1,2,5,1,2] Output: [1,3] Explanation: There are three critical points: - [5,3,1,2,5,1,2]: The third node is a local minima because 1 is less than 3 and 2. - [5,3,1,2,5,1,2]: The fifth node is a local maxima because 5 is greater than 2 and 1. - [5,3,1,2,5,1,2]: The sixth node is a local minima because 1 is less than 5 and 2. The minimum distance is between the fifth and the sixth node. minDistance = 6 - 5 = 1. The maximum distance is between the third and the sixth node. maxDistance = 6 - 3 = 3. Example 3: Input: head = [1,3,2,2,3,2,2,2,7] Output: [3,3] Explanation: There are two critical points: - [1,3,2,2,3,2,2,2,7]: The second node is a local maxima because 3 is greater than 1 and 2. - [1,3,2,2,3,2,2,2,7]: The fifth node is a local maxima because 3 is greater than 2 and 2. Both the minimum and maximum distances are between the second and the fifth node. Thus, minDistance and maxDistance is 5 - 2 = 3. Note that the last node is not considered a local maxima because it does not have a next node.   Constraints: The number of nodes in the list is in the range [2, 105]. 1 <= Node.val <= 105",
        "1542": "You are given a 0-indexed integer array nums containing distinct numbers, an integer start, and an integer goal. There is an integer x that is initially set to start, and you want to perform operations on x such that it is converted to goal. You can perform the following operation repeatedly on the number x: If 0 <= x <= 1000, then for any index i in the array (0 <= i < nums.length), you can set x to any of the following: x + nums[i] x - nums[i] x ^ nums[i] (bitwise-XOR) Note that you can use each nums[i] any number of times in any order. Operations that set x to be out of the range 0 <= x <= 1000 are valid, but no more operations can be done afterward. Return the minimum number of operations needed to convert x = start into goal, and -1 if it is not possible.   Example 1: Input: nums = [2,4,12], start = 2, goal = 12 Output: 2 Explanation: We can go from 2 → 14 → 12 with the following 2 operations. - 2 + 12 = 14 - 14 - 2 = 12 Example 2: Input: nums = [3,5,7], start = 0, goal = -4 Output: 2 Explanation: We can go from 0 → 3 → -4 with the following 2 operations.  - 0 + 3 = 3 - 3 - 7 = -4 Note that the last operation sets x out of the range 0 <= x <= 1000, which is valid. Example 3: Input: nums = [2,8,16], start = 0, goal = 1 Output: -1 Explanation: There is no way to convert 0 into 1.   Constraints: 1 <= nums.length <= 1000 -109 <= nums[i], goal <= 109 0 <= start <= 1000 start != goal All the integers in nums are distinct.",
        "1543": "An original string, consisting of lowercase English letters, can be encoded by the following steps: Arbitrarily split it into a sequence of some number of non-empty substrings. Arbitrarily choose some elements (possibly none) of the sequence, and replace each with its length (as a numeric string). Concatenate the sequence as the encoded string. For example, one way to encode an original string \"abcdefghijklmnop\" might be: Split it as a sequence: [\"ab\", \"cdefghijklmn\", \"o\", \"p\"]. Choose the second and third elements to be replaced by their lengths, respectively. The sequence becomes [\"ab\", \"12\", \"1\", \"p\"]. Concatenate the elements of the sequence to get the encoded string: \"ab121p\". Given two encoded strings s1 and s2, consisting of lowercase English letters and digits 1-9 (inclusive), return true if there exists an original string that could be encoded as both s1 and s2. Otherwise, return false. Note: The test cases are generated such that the number of consecutive digits in s1 and s2 does not exceed 3.   Example 1: Input: s1 = \"internationalization\", s2 = \"i18n\" Output: true Explanation: It is possible that \"internationalization\" was the original string. - \"internationalization\"    -> Split:       [\"internationalization\"]   -> Do not replace any element   -> Concatenate:  \"internationalization\", which is s1. - \"internationalization\"   -> Split:       [\"i\", \"nternationalizatio\", \"n\"]   -> Replace:     [\"i\", \"18\",                 \"n\"]   -> Concatenate:  \"i18n\", which is s2 Example 2: Input: s1 = \"l123e\", s2 = \"44\" Output: true Explanation: It is possible that \"leetcode\" was the original string. - \"leetcode\"    -> Split:      [\"l\", \"e\", \"et\", \"cod\", \"e\"]   -> Replace:    [\"l\", \"1\", \"2\",  \"3\",   \"e\"]   -> Concatenate: \"l123e\", which is s1. - \"leetcode\"    -> Split:      [\"leet\", \"code\"]   -> Replace:    [\"4\",    \"4\"]   -> Concatenate: \"44\", which is s2. Example 3: Input: s1 = \"a5b\", s2 = \"c5b\" Output: false Explanation: It is impossible. - The original string encoded as s1 must start with the letter 'a'. - The original string encoded as s2 must start with the letter 'c'.   Constraints: 1 <= s1.length, s2.length <= 40 s1 and s2 consist of digits 1-9 (inclusive), and lowercase English letters only. The number of consecutive digits in s1 and s2 does not exceed 3.",
        "1544": "A substring is a contiguous (non-empty) sequence of characters within a string. A vowel substring is a substring that only consists of vowels ('a', 'e', 'i', 'o', and 'u') and has all five vowels present in it. Given a string word, return the number of vowel substrings in word.   Example 1: Input: word = \"aeiouu\" Output: 2 Explanation: The vowel substrings of word are as follows (underlined): - \"aeiouu\" - \"aeiouu\" Example 2: Input: word = \"unicornarihan\" Output: 0 Explanation: Not all 5 vowels are present, so there are no vowel substrings. Example 3: Input: word = \"cuaieuouac\" Output: 7 Explanation: The vowel substrings of word are as follows (underlined): - \"cuaieuouac\" - \"cuaieuouac\" - \"cuaieuouac\" - \"cuaieuouac\" - \"cuaieuouac\" - \"cuaieuouac\" - \"cuaieuouac\"   Constraints: 1 <= word.length <= 100 word consists of lowercase English letters only.",
        "1545": "Given a string word, return the sum of the number of vowels ('a', 'e', 'i', 'o', and 'u') in every substring of word. A substring is a contiguous (non-empty) sequence of characters within a string. Note: Due to the large constraints, the answer may not fit in a signed 32-bit integer. Please be careful during the calculations.   Example 1: Input: word = \"aba\" Output: 6 Explanation:  All possible substrings are: \"a\", \"ab\", \"aba\", \"b\", \"ba\", and \"a\". - \"b\" has 0 vowels in it - \"a\", \"ab\", \"ba\", and \"a\" have 1 vowel each - \"aba\" has 2 vowels in it Hence, the total sum of vowels = 0 + 1 + 1 + 1 + 1 + 2 = 6.  Example 2: Input: word = \"abc\" Output: 3 Explanation:  All possible substrings are: \"a\", \"ab\", \"abc\", \"b\", \"bc\", and \"c\". - \"a\", \"ab\", and \"abc\" have 1 vowel each - \"b\", \"bc\", and \"c\" have 0 vowels each Hence, the total sum of vowels = 1 + 1 + 1 + 0 + 0 + 0 = 3. Example 3: Input: word = \"ltcd\" Output: 0 Explanation: There are no vowels in any substring of \"ltcd\".   Constraints: 1 <= word.length <= 105 word consists of lowercase English letters.",
        "1546": "You are given an integer n indicating there are n specialty retail stores. There are m product types of varying amounts, which are given as a 0-indexed integer array quantities, where quantities[i] represents the number of products of the ith product type. You need to distribute all products to the retail stores following these rules: A store can only be given at most one product type but can be given any amount of it. After distribution, each store will have been given some number of products (possibly 0). Let x represent the maximum number of products given to any store. You want x to be as small as possible, i.e., you want to minimize the maximum number of products that are given to any store. Return the minimum possible x.   Example 1: Input: n = 6, quantities = [11,6] Output: 3 Explanation: One optimal way is: - The 11 products of type 0 are distributed to the first four stores in these amounts: 2, 3, 3, 3 - The 6 products of type 1 are distributed to the other two stores in these amounts: 3, 3 The maximum number of products given to any store is max(2, 3, 3, 3, 3, 3) = 3. Example 2: Input: n = 7, quantities = [15,10,10] Output: 5 Explanation: One optimal way is: - The 15 products of type 0 are distributed to the first three stores in these amounts: 5, 5, 5 - The 10 products of type 1 are distributed to the next two stores in these amounts: 5, 5 - The 10 products of type 2 are distributed to the last two stores in these amounts: 5, 5 The maximum number of products given to any store is max(5, 5, 5, 5, 5, 5, 5) = 5. Example 3: Input: n = 1, quantities = [100000] Output: 100000 Explanation: The only optimal way is: - The 100000 products of type 0 are distributed to the only store. The maximum number of products given to any store is max(100000) = 100000.   Constraints: m == quantities.length 1 <= m <= n <= 105 1 <= quantities[i] <= 105",
        "1547": "There is an undirected graph with n nodes numbered from 0 to n - 1 (inclusive). You are given a 0-indexed integer array values where values[i] is the value of the ith node. You are also given a 0-indexed 2D integer array edges, where each edges[j] = [uj, vj, timej] indicates that there is an undirected edge between the nodes uj and vj, and it takes timej seconds to travel between the two nodes. Finally, you are given an integer maxTime. A valid path in the graph is any path that starts at node 0, ends at node 0, and takes at most maxTime seconds to complete. You may visit the same node multiple times. The quality of a valid path is the sum of the values of the unique nodes visited in the path (each node's value is added at most once to the sum). Return the maximum quality of a valid path. Note: There are at most four edges connected to each node.   Example 1: Input: values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49 Output: 75 Explanation: One possible path is 0 -> 1 -> 0 -> 3 -> 0. The total time taken is 10 + 10 + 10 + 10 = 40 <= 49. The nodes visited are 0, 1, and 3, giving a maximal path quality of 0 + 32 + 43 = 75. Example 2: Input: values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30 Output: 25 Explanation: One possible path is 0 -> 3 -> 0. The total time taken is 10 + 10 = 20 <= 30. The nodes visited are 0 and 3, giving a maximal path quality of 5 + 20 = 25. Example 3: Input: values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50 Output: 7 Explanation: One possible path is 0 -> 1 -> 3 -> 1 -> 0. The total time taken is 10 + 13 + 13 + 10 = 46 <= 50. The nodes visited are 0, 1, and 3, giving a maximal path quality of 1 + 2 + 4 = 7.   Constraints: n == values.length 1 <= n <= 1000 0 <= values[i] <= 108 0 <= edges.length <= 2000 edges[j].length == 3  0 <= uj < vj <= n - 1 10 <= timej, maxTime <= 100 All the pairs [uj, vj] are unique. There are at most four edges connected to each node. The graph may not be connected.",
        "1548": "Two strings word1 and word2 are considered almost equivalent if the differences between the frequencies of each letter from 'a' to 'z' between word1 and word2 is at most 3. Given two strings word1 and word2, each of length n, return true if word1 and word2 are almost equivalent, or false otherwise. The frequency of a letter x is the number of times it occurs in the string.   Example 1: Input: word1 = \"aaaa\", word2 = \"bccb\" Output: false Explanation: There are 4 'a's in \"aaaa\" but 0 'a's in \"bccb\". The difference is 4, which is more than the allowed 3. Example 2: Input: word1 = \"abcdeef\", word2 = \"abaaacc\" Output: true Explanation: The differences between the frequencies of each letter in word1 and word2 are at most 3: - 'a' appears 1 time in word1 and 4 times in word2. The difference is 3. - 'b' appears 1 time in word1 and 1 time in word2. The difference is 0. - 'c' appears 1 time in word1 and 2 times in word2. The difference is 1. - 'd' appears 1 time in word1 and 0 times in word2. The difference is 1. - 'e' appears 2 times in word1 and 0 times in word2. The difference is 2. - 'f' appears 1 time in word1 and 0 times in word2. The difference is 1. Example 3: Input: word1 = \"cccddabba\", word2 = \"babababab\" Output: true Explanation: The differences between the frequencies of each letter in word1 and word2 are at most 3: - 'a' appears 2 times in word1 and 4 times in word2. The difference is 2. - 'b' appears 2 times in word1 and 5 times in word2. The difference is 3. - 'c' appears 3 times in word1 and 0 times in word2. The difference is 3. - 'd' appears 2 times in word1 and 0 times in word2. The difference is 2.   Constraints: n == word1.length == word2.length 1 <= n <= 100 word1 and word2 consist only of lowercase English letters.",
        "1549": "A width x height grid is on an XY-plane with the bottom-left cell at (0, 0) and the top-right cell at (width - 1, height - 1). The grid is aligned with the four cardinal directions (\"North\", \"East\", \"South\", and \"West\"). A robot is initially at cell (0, 0) facing direction \"East\". The robot can be instructed to move for a specific number of steps. For each step, it does the following. Attempts to move forward one cell in the direction it is facing. If the cell the robot is moving to is out of bounds, the robot instead turns 90 degrees counterclockwise and retries the step. After the robot finishes moving the number of steps required, it stops and awaits the next instruction. Implement the Robot class: Robot(int width, int height) Initializes the width x height grid with the robot at (0, 0) facing \"East\". void step(int num) Instructs the robot to move forward num steps. int[] getPos() Returns the current cell the robot is at, as an array of length 2, [x, y]. String getDir() Returns the current direction of the robot, \"North\", \"East\", \"South\", or \"West\".   Example 1: Input [\"Robot\", \"step\", \"step\", \"getPos\", \"getDir\", \"step\", \"step\", \"step\", \"getPos\", \"getDir\"] [[6, 3], [2], [2], [], [], [2], [1], [4], [], []] Output [null, null, null, [4, 0], \"East\", null, null, null, [1, 2], \"West\"]  Explanation Robot robot = new Robot(6, 3); // Initialize the grid and the robot at (0, 0) facing East. robot.step(2);  // It moves two steps East to (2, 0), and faces East. robot.step(2);  // It moves two steps East to (4, 0), and faces East. robot.getPos(); // return [4, 0] robot.getDir(); // return \"East\" robot.step(2);  // It moves one step East to (5, 0), and faces East.                 // Moving the next step East would be out of bounds, so it turns and faces North.                 // Then, it moves one step North to (5, 1), and faces North. robot.step(1);  // It moves one step North to (5, 2), and faces North (not West). robot.step(4);  // Moving the next step North would be out of bounds, so it turns and faces West.                 // Then, it moves four steps West to (1, 2), and faces West. robot.getPos(); // return [1, 2] robot.getDir(); // return \"West\"   Constraints: 2 <= width, height <= 100 1 <= num <= 105 At most 104 calls in total will be made to step, getPos, and getDir.",
        "1550": "You are given a 2D integer array items where items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively. You are also given a 0-indexed integer array queries. For each queries[j], you want to determine the maximum beauty of an item whose price is less than or equal to queries[j]. If no such item exists, then the answer to this query is 0. Return an array answer of the same length as queries where answer[j] is the answer to the jth query.   Example 1: Input: items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6] Output: [2,4,5,5,6,6] Explanation: - For queries[0]=1, [1,2] is the only item which has price <= 1. Hence, the answer for this query is 2. - For queries[1]=2, the items which can be considered are [1,2] and [2,4].    The maximum beauty among them is 4. - For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].   The maximum beauty among them is 5. - For queries[4]=5 and queries[5]=6, all items can be considered.   Hence, the answer for them is the maximum beauty of all items, i.e., 6. Example 2: Input: items = [[1,2],[1,2],[1,3],[1,4]], queries = [1] Output: [4] Explanation:  The price of every item is equal to 1, so we choose the item with the maximum beauty 4.  Note that multiple items can have the same price and/or beauty.   Example 3: Input: items = [[10,1000]], queries = [5] Output: [0] Explanation: No item has a price less than or equal to 5, so no item can be chosen. Hence, the answer to the query is 0.   Constraints: 1 <= items.length, queries.length <= 105 items[i].length == 2 1 <= pricei, beautyi, queries[j] <= 109",
        "1551": "You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. The strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]). Additionally, you have pills magical pills that will increase a worker's strength by strength. You can decide which workers receive the magical pills, however, you may only give each worker at most one magical pill. Given the 0-indexed integer arrays tasks and workers and the integers pills and strength, return the maximum number of tasks that can be completed.   Example 1: Input: tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1 Output: 3 Explanation: We can assign the magical pill and tasks as follows: - Give the magical pill to worker 0. - Assign worker 0 to task 2 (0 + 1 >= 1) - Assign worker 1 to task 1 (3 >= 2) - Assign worker 2 to task 0 (3 >= 3) Example 2: Input: tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5 Output: 1 Explanation: We can assign the magical pill and tasks as follows: - Give the magical pill to worker 0. - Assign worker 0 to task 0 (0 + 5 >= 5) Example 3: Input: tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10 Output: 2 Explanation: We can assign the magical pills and tasks as follows: - Give the magical pill to worker 0 and worker 1. - Assign worker 0 to task 0 (0 + 10 >= 10) - Assign worker 1 to task 1 (10 + 10 >= 15) The last pill is not given because it will not make any worker strong enough for the last task.   Constraints: n == tasks.length m == workers.length 1 <= n, m <= 5 * 104 0 <= pills <= m 0 <= tasks[i], workers[j], strength <= 109",
        "1552": "There are n people in a line queuing to buy tickets, where the 0th person is at the front of the line and the (n - 1)th person is at the back of the line. You are given a 0-indexed integer array tickets of length n where the number of tickets that the ith person would like to buy is tickets[i]. Each person takes exactly 1 second to buy a ticket. A person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously) in order to buy more tickets. If a person does not have any tickets left to buy, the person will leave the line. Return the time taken for the person initially at position k (0-indexed) to finish buying tickets.   Example 1: Input: tickets = [2,3,2], k = 2 Output: 6 Explanation: The queue starts as [2,3,2], where the kth person is underlined. After the person at the front has bought a ticket, the queue becomes [3,2,1] at 1 second. Continuing this process, the queue becomes [2,1,2] at 2 seconds. Continuing this process, the queue becomes [1,2,1] at 3 seconds. Continuing this process, the queue becomes [2,1] at 4 seconds. Note: the person at the front left the queue. Continuing this process, the queue becomes [1,1] at 5 seconds. Continuing this process, the queue becomes [1] at 6 seconds. The kth person has bought all their tickets, so return 6. Example 2: Input: tickets = [5,1,1,1], k = 0 Output: 8 Explanation: The queue starts as [5,1,1,1], where the kth person is underlined. After the person at the front has bought a ticket, the queue becomes [1,1,1,4] at 1 second. Continuing this process for 3 seconds, the queue becomes [4] at 4 seconds. Continuing this process for 4 seconds, the queue becomes [] at 8 seconds. The kth person has bought all their tickets, so return 8.   Constraints: n == tickets.length 1 <= n <= 100 1 <= tickets[i] <= 100 0 <= k < n",
        "1553": "You are given the head of a linked list. The nodes in the linked list are sequentially assigned to non-empty groups whose lengths form the sequence of the natural numbers (1, 2, 3, 4, ...). The length of a group is the number of nodes assigned to it. In other words, The 1st node is assigned to the first group. The 2nd and the 3rd nodes are assigned to the second group. The 4th, 5th, and 6th nodes are assigned to the third group, and so on. Note that the length of the last group may be less than or equal to 1 + the length of the second to last group. Reverse the nodes in each group with an even length, and return the head of the modified linked list.   Example 1: Input: head = [5,2,6,3,9,1,7,3,8,4] Output: [5,6,2,3,9,1,4,8,3,7] Explanation: - The length of the first group is 1, which is odd, hence no reversal occurs. - The length of the second group is 2, which is even, hence the nodes are reversed. - The length of the third group is 3, which is odd, hence no reversal occurs. - The length of the last group is 4, which is even, hence the nodes are reversed. Example 2: Input: head = [1,1,0,6] Output: [1,0,1,6] Explanation: - The length of the first group is 1. No reversal occurs. - The length of the second group is 2. The nodes are reversed. - The length of the last group is 1. No reversal occurs. Example 3: Input: head = [1,1,0,6,5] Output: [1,0,1,5,6] Explanation: - The length of the first group is 1. No reversal occurs. - The length of the second group is 2. The nodes are reversed. - The length of the last group is 2. The nodes are reversed.   Constraints: The number of nodes in the list is in the range [1, 105]. 0 <= Node.val <= 105",
        "1554": "A string originalText is encoded using a slanted transposition cipher to a string encodedText with the help of a matrix having a fixed number of rows rows. originalText is placed first in a top-left to bottom-right manner. The blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of originalText. The arrow indicates the order in which the cells are filled. All empty cells are filled with ' '. The number of columns is chosen such that the rightmost column will not be empty after filling in originalText. encodedText is then formed by appending all characters of the matrix in a row-wise fashion. The characters in the blue cells are appended first to encodedText, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed. For example, if originalText = \"cipher\" and rows = 3, then we encode it in the following manner: The blue arrows depict how originalText is placed in the matrix, and the red arrows denote the order in which encodedText is formed. In the above example, encodedText = \"ch ie pr\". Given the encoded string encodedText and number of rows rows, return the original string originalText. Note: originalText does not have any trailing spaces ' '. The test cases are generated such that there is only one possible originalText.   Example 1: Input: encodedText = \"ch   ie   pr\", rows = 3 Output: \"cipher\" Explanation: This is the same example described in the problem description. Example 2: Input: encodedText = \"iveo    eed   l te   olc\", rows = 4 Output: \"i love leetcode\" Explanation: The figure above denotes the matrix that was used to encode originalText.  The blue arrows show how we can find originalText from encodedText. Example 3: Input: encodedText = \"coding\", rows = 1 Output: \"coding\" Explanation: Since there is only 1 row, both originalText and encodedText are the same.   Constraints: 0 <= encodedText.length <= 106 encodedText consists of lowercase English letters and ' ' only. encodedText is a valid encoding of some originalText that does not have trailing spaces. 1 <= rows <= 1000 The testcases are generated such that there is only one possible originalText.",
        "1555": "You are given an integer n indicating the number of people in a network. Each person is labeled from 0 to n - 1. You are also given a 0-indexed 2D integer array restrictions, where restrictions[i] = [xi, yi] means that person xi and person yi cannot become friends, either directly or indirectly through other people. Initially, no one is friends with each other. You are given a list of friend requests as a 0-indexed 2D integer array requests, where requests[j] = [uj, vj] is a friend request between person uj and person vj. A friend request is successful if uj and vj can be friends. Each friend request is processed in the given order (i.e., requests[j] occurs before requests[j + 1]), and upon a successful request, uj and vj become direct friends for all future friend requests. Return a boolean array result, where each result[j] is true if the jth friend request is successful or false if it is not. Note: If uj and vj are already direct friends, the request is still successful.   Example 1: Input: n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]] Output: [true,false] Explanation: Request 0: Person 0 and person 2 can be friends, so they become direct friends.  Request 1: Person 2 and person 1 cannot be friends since person 0 and person 1 would be indirect friends (1--2--0). Example 2: Input: n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]] Output: [true,false] Explanation: Request 0: Person 1 and person 2 can be friends, so they become direct friends. Request 1: Person 0 and person 2 cannot be friends since person 0 and person 1 would be indirect friends (0--2--1). Example 3: Input: n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]] Output: [true,false,true,false] Explanation: Request 0: Person 0 and person 4 can be friends, so they become direct friends. Request 1: Person 1 and person 2 cannot be friends since they are directly restricted. Request 2: Person 3 and person 1 can be friends, so they become direct friends. Request 3: Person 3 and person 4 cannot be friends since person 0 and person 1 would be indirect friends (0--4--3--1).   Constraints: 2 <= n <= 1000 0 <= restrictions.length <= 1000 restrictions[i].length == 2 0 <= xi, yi <= n - 1 xi != yi 1 <= requests.length <= 1000 requests[j].length == 2 0 <= uj, vj <= n - 1 uj != vj",
        "1556": "There are n houses evenly lined up on the street, and each house is beautifully painted. You are given a 0-indexed integer array colors of length n, where colors[i] represents the color of the ith house. Return the maximum distance between two houses with different colors. The distance between the ith and jth houses is abs(i - j), where abs(x) is the absolute value of x.   Example 1: Input: colors = [1,1,1,6,1,1,1] Output: 3 Explanation: In the above image, color 1 is blue, and color 6 is red. The furthest two houses with different colors are house 0 and house 3. House 0 has color 1, and house 3 has color 6. The distance between them is abs(0 - 3) = 3. Note that houses 3 and 6 can also produce the optimal answer. Example 2: Input: colors = [1,8,3,8,3] Output: 4 Explanation: In the above image, color 1 is blue, color 8 is yellow, and color 3 is green. The furthest two houses with different colors are house 0 and house 4. House 0 has color 1, and house 4 has color 3. The distance between them is abs(0 - 4) = 4. Example 3: Input: colors = [0,1] Output: 1 Explanation: The furthest two houses with different colors are house 0 and house 1. House 0 has color 0, and house 1 has color 1. The distance between them is abs(0 - 1) = 1.   Constraints: n == colors.length 2 <= n <= 100 0 <= colors[i] <= 100 Test data are generated such that at least two houses have different colors.",
        "1557": "You want to water n plants in your garden with a watering can. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i. There is a river at x = -1 that you can refill your watering can at. Each plant needs a specific amount of water. You will water the plants in the following way: Water the plants in order from left to right. After watering the current plant, if you do not have enough water to completely water the next plant, return to the river to fully refill the watering can. You cannot refill the watering can early. You are initially at the river (i.e., x = -1). It takes one step to move one unit on the x-axis. Given a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and an integer capacity representing the watering can capacity, return the number of steps needed to water all the plants.   Example 1: Input: plants = [2,2,3,3], capacity = 5 Output: 14 Explanation: Start at the river with a full watering can: - Walk to plant 0 (1 step) and water it. Watering can has 3 units of water. - Walk to plant 1 (1 step) and water it. Watering can has 1 unit of water. - Since you cannot completely water plant 2, walk back to the river to refill (2 steps). - Walk to plant 2 (3 steps) and water it. Watering can has 2 units of water. - Since you cannot completely water plant 3, walk back to the river to refill (3 steps). - Walk to plant 3 (4 steps) and water it. Steps needed = 1 + 1 + 2 + 3 + 3 + 4 = 14. Example 2: Input: plants = [1,1,1,4,2,3], capacity = 4 Output: 30 Explanation: Start at the river with a full watering can: - Water plants 0, 1, and 2 (3 steps). Return to river (3 steps). - Water plant 3 (4 steps). Return to river (4 steps). - Water plant 4 (5 steps). Return to river (5 steps). - Water plant 5 (6 steps). Steps needed = 3 + 3 + 4 + 4 + 5 + 5 + 6 = 30. Example 3: Input: plants = [7,7,7,7,7,7,7], capacity = 8 Output: 49 Explanation: You have to refill before watering each plant. Steps needed = 1 + 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 = 49.   Constraints: n == plants.length 1 <= n <= 1000 1 <= plants[i] <= 106 max(plants[i]) <= capacity <= 109",
        "1558": "Design a data structure to find the frequency of a given value in a given subarray. The frequency of a value in a subarray is the number of occurrences of that value in the subarray. Implement the RangeFreqQuery class: RangeFreqQuery(int[] arr) Constructs an instance of the class with the given 0-indexed integer array arr. int query(int left, int right, int value) Returns the frequency of value in the subarray arr[left...right]. A subarray is a contiguous sequence of elements within an array. arr[left...right] denotes the subarray that contains the elements of nums between indices left and right (inclusive).   Example 1: Input [\"RangeFreqQuery\", \"query\", \"query\"] [[[12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]], [1, 2, 4], [0, 11, 33]] Output [null, 1, 2]  Explanation RangeFreqQuery rangeFreqQuery = new RangeFreqQuery([12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]); rangeFreqQuery.query(1, 2, 4); // return 1. The value 4 occurs 1 time in the subarray [33, 4] rangeFreqQuery.query(0, 11, 33); // return 2. The value 33 occurs 2 times in the whole array.   Constraints: 1 <= arr.length <= 105 1 <= arr[i], value <= 104 0 <= left <= right < arr.length At most 105 calls will be made to query",
        "1559": "A k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k. For example, 9 is a 2-mirror number. The representation of 9 in base-10 and base-2 are 9 and 1001 respectively, which read the same both forward and backward. On the contrary, 4 is not a 2-mirror number. The representation of 4 in base-2 is 100, which does not read the same both forward and backward. Given the base k and the number n, return the sum of the n smallest k-mirror numbers.   Example 1: Input: k = 2, n = 5 Output: 25 Explanation: The 5 smallest 2-mirror numbers and their representations in base-2 are listed as follows:   base-10    base-2     1          1     3          11     5          101     7          111     9          1001 Their sum = 1 + 3 + 5 + 7 + 9 = 25.  Example 2: Input: k = 3, n = 7 Output: 499 Explanation: The 7 smallest 3-mirror numbers are and their representations in base-3 are listed as follows:   base-10    base-3     1          1     2          2     4          11     8          22     121        11111     151        12121     212        21212 Their sum = 1 + 2 + 4 + 8 + 121 + 151 + 212 = 499. Example 3: Input: k = 7, n = 17 Output: 20379000 Explanation: The 17 smallest 7-mirror numbers are: 1, 2, 3, 4, 5, 6, 8, 121, 171, 242, 292, 16561, 65656, 2137312, 4602064, 6597956, 6958596   Constraints: 2 <= k <= 9 1 <= n <= 30",
        "1560": "Given two string arrays words1 and words2, return the number of strings that appear exactly once in each of the two arrays.   Example 1: Input: words1 = [\"leetcode\",\"is\",\"amazing\",\"as\",\"is\"], words2 = [\"amazing\",\"leetcode\",\"is\"] Output: 2 Explanation: - \"leetcode\" appears exactly once in each of the two arrays. We count this string. - \"amazing\" appears exactly once in each of the two arrays. We count this string. - \"is\" appears in each of the two arrays, but there are 2 occurrences of it in words1. We do not count this string. - \"as\" appears once in words1, but does not appear in words2. We do not count this string. Thus, there are 2 strings that appear exactly once in each of the two arrays. Example 2: Input: words1 = [\"b\",\"bb\",\"bbb\"], words2 = [\"a\",\"aa\",\"aaa\"] Output: 0 Explanation: There are no strings that appear in each of the two arrays. Example 3: Input: words1 = [\"a\",\"ab\"], words2 = [\"a\",\"a\",\"a\",\"ab\"] Output: 1 Explanation: The only string that appears exactly once in each of the two arrays is \"ab\".   Constraints: 1 <= words1.length, words2.length <= 1000 1 <= words1[i].length, words2[j].length <= 30 words1[i] and words2[j] consists only of lowercase English letters.",
        "1561": "You are given a 0-indexed string hamsters where hamsters[i] is either: 'H' indicating that there is a hamster at index i, or '.' indicating that index i is empty. You will add some number of food buckets at the empty indices in order to feed the hamsters. A hamster can be fed if there is at least one food bucket to its left or to its right. More formally, a hamster at index i can be fed if you place a food bucket at index i - 1 and/or at index i + 1. Return the minimum number of food buckets you should place at empty indices to feed all the hamsters or -1 if it is impossible to feed all of them.   Example 1: Input: hamsters = \"H..H\" Output: 2 Explanation: We place two food buckets at indices 1 and 2. It can be shown that if we place only one food bucket, one of the hamsters will not be fed. Example 2: Input: hamsters = \".H.H.\" Output: 1 Explanation: We place one food bucket at index 2. Example 3: Input: hamsters = \".HHH.\" Output: -1 Explanation: If we place a food bucket at every empty index as shown, the hamster at index 2 will not be able to eat.   Constraints: 1 <= hamsters.length <= 105 hamsters[i] is either'H' or '.'.",
        "1562": "There is an m x n grid, where (0, 0) is the top-left cell and (m - 1, n - 1) is the bottom-right cell. You are given an integer array startPos where startPos = [startrow, startcol] indicates that initially, a robot is at the cell (startrow, startcol). You are also given an integer array homePos where homePos = [homerow, homecol] indicates that its home is at the cell (homerow, homecol). The robot needs to go to its home. It can move one cell in four directions: left, right, up, or down, and it can not move outside the boundary. Every move incurs some cost. You are further given two 0-indexed integer arrays: rowCosts of length m and colCosts of length n. If the robot moves up or down into a cell whose row is r, then this move costs rowCosts[r]. If the robot moves left or right into a cell whose column is c, then this move costs colCosts[c]. Return the minimum total cost for this robot to return home.   Example 1: Input: startPos = [1, 0], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7] Output: 18 Explanation: One optimal path is that: Starting from (1, 0) -> It goes down to (2, 0). This move costs rowCosts[2] = 3. -> It goes right to (2, 1). This move costs colCosts[1] = 2. -> It goes right to (2, 2). This move costs colCosts[2] = 6. -> It goes right to (2, 3). This move costs colCosts[3] = 7. The total cost is 3 + 2 + 6 + 7 = 18 Example 2: Input: startPos = [0, 0], homePos = [0, 0], rowCosts = [5], colCosts = [26] Output: 0 Explanation: The robot is already at its home. Since no moves occur, the total cost is 0.   Constraints: m == rowCosts.length n == colCosts.length 1 <= m, n <= 105 0 <= rowCosts[r], colCosts[c] <= 104 startPos.length == 2 homePos.length == 2 0 <= startrow, homerow < m 0 <= startcol, homecol < n",
        "1563": "A farmer has a rectangular grid of land with m rows and n columns that can be divided into unit cells. Each cell is either fertile (represented by a 1) or barren (represented by a 0). All cells outside the grid are considered barren. A pyramidal plot of land can be defined as a set of cells with the following criteria: The number of cells in the set has to be greater than 1 and all cells must be fertile. The apex of a pyramid is the topmost cell of the pyramid. The height of a pyramid is the number of rows it covers. Let (r, c) be the apex of the pyramid, and its height be h. Then, the plot comprises of cells (i, j) where r <= i <= r + h - 1 and c - (i - r) <= j <= c + (i - r). An inverse pyramidal plot of land can be defined as a set of cells with similar criteria: The number of cells in the set has to be greater than 1 and all cells must be fertile. The apex of an inverse pyramid is the bottommost cell of the inverse pyramid. The height of an inverse pyramid is the number of rows it covers. Let (r, c) be the apex of the pyramid, and its height be h. Then, the plot comprises of cells (i, j) where r - h + 1 <= i <= r and c - (r - i) <= j <= c + (r - i). Some examples of valid and invalid pyramidal (and inverse pyramidal) plots are shown below. Black cells indicate fertile cells. Given a 0-indexed m x n binary matrix grid representing the farmland, return the total number of pyramidal and inverse pyramidal plots that can be found in grid.   Example 1: Input: grid = [[0,1,1,0],[1,1,1,1]] Output: 2 Explanation: The 2 possible pyramidal plots are shown in blue and red respectively. There are no inverse pyramidal plots in this grid.  Hence total number of pyramidal and inverse pyramidal plots is 2 + 0 = 2. Example 2: Input: grid = [[1,1,1],[1,1,1]] Output: 2 Explanation: The pyramidal plot is shown in blue, and the inverse pyramidal plot is shown in red.  Hence the total number of plots is 1 + 1 = 2. Example 3: Input: grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]] Output: 13 Explanation: There are 7 pyramidal plots, 3 of which are shown in the 2nd and 3rd figures. There are 6 inverse pyramidal plots, 2 of which are shown in the last figure. The total number of plots is 7 + 6 = 13.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 1000 1 <= m * n <= 105 grid[i][j] is either 0 or 1.",
        "1564": "You are given a 0-indexed integer array nums and a target element target. A target index is an index i such that nums[i] == target. Return a list of the target indices of nums after sorting nums in non-decreasing order. If there are no target indices, return an empty list. The returned list must be sorted in increasing order.   Example 1: Input: nums = [1,2,5,2,3], target = 2 Output: [1,2] Explanation: After sorting, nums is [1,2,2,3,5]. The indices where nums[i] == 2 are 1 and 2. Example 2: Input: nums = [1,2,5,2,3], target = 3 Output: [3] Explanation: After sorting, nums is [1,2,2,3,5]. The index where nums[i] == 3 is 3. Example 3: Input: nums = [1,2,5,2,3], target = 5 Output: [4] Explanation: After sorting, nums is [1,2,2,3,5]. The index where nums[i] == 5 is 4.   Constraints: 1 <= nums.length <= 100 1 <= nums[i], target <= 100",
        "1565": "",
        "1566": "You are given an integer n indicating there are n people numbered from 0 to n - 1. You are also given a 0-indexed 2D integer array meetings where meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. A person may attend multiple meetings at the same time. Finally, you are given an integer firstPerson. Person 0 has a secret and initially shares the secret with a person firstPerson at time 0. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person xi has the secret at timei, then they will share the secret with person yi, and vice versa. The secrets are shared instantaneously. That is, a person may receive the secret and share it with people in other meetings within the same time frame. Return a list of all the people that have the secret after all the meetings have taken place. You may return the answer in any order.   Example 1: Input: n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1 Output: [0,1,2,3,5] Explanation: At time 0, person 0 shares the secret with person 1. At time 5, person 1 shares the secret with person 2. At time 8, person 2 shares the secret with person 3. At time 10, person 1 shares the secret with person 5. Thus, people 0, 1, 2, 3, and 5 know the secret after all the meetings. Example 2: Input: n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3 Output: [0,1,3] Explanation: At time 0, person 0 shares the secret with person 3. At time 2, neither person 1 nor person 2 know the secret. At time 3, person 3 shares the secret with person 0 and person 1. Thus, people 0, 1, and 3 know the secret after all the meetings. Example 3: Input: n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1 Output: [0,1,2,3,4] Explanation: At time 0, person 0 shares the secret with person 1. At time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3. Note that person 2 can share the secret at the same time as receiving it. At time 2, person 3 shares the secret with person 4. Thus, people 0, 1, 2, 3, and 4 know the secret after all the meetings.   Constraints: 2 <= n <= 105 1 <= meetings.length <= 105 meetings[i].length == 3 0 <= xi, yi <= n - 1 xi != yi 1 <= timei <= 105 1 <= firstPerson <= n - 1",
        "1567": "You are given an integer array digits, where each element is a digit. The array may contain duplicates. You need to find all the unique integers that follow the given requirements: The integer consists of the concatenation of three elements from digits in any arbitrary order. The integer does not have leading zeros. The integer is even. For example, if the given digits were [1, 2, 3], integers 132 and 312 follow the requirements. Return a sorted array of the unique integers.   Example 1: Input: digits = [2,1,3,0] Output: [102,120,130,132,210,230,302,310,312,320] Explanation: All the possible integers that follow the requirements are in the output array.  Notice that there are no odd integers or integers with leading zeros. Example 2: Input: digits = [2,2,8,8,2] Output: [222,228,282,288,822,828,882] Explanation: The same digit can be used as many times as it appears in digits.  In this example, the digit 8 is used twice each time in 288, 828, and 882.  Example 3: Input: digits = [3,7,5] Output: [] Explanation: No even integers can be formed using the given digits.   Constraints: 3 <= digits.length <= 100 0 <= digits[i] <= 9",
        "1568": "You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list. The middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x. For n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively.   Example 1: Input: head = [1,3,4,7,1,2,6] Output: [1,3,4,1,2,6] Explanation: The above figure represents the given linked list. The indices of the nodes are written below. Since n = 7, node 3 with value 7 is the middle node, which is marked in red. We return the new list after removing this node.  Example 2: Input: head = [1,2,3,4] Output: [1,2,4] Explanation: The above figure represents the given linked list. For n = 4, node 2 with value 3 is the middle node, which is marked in red. Example 3: Input: head = [2,1] Output: [2] Explanation: The above figure represents the given linked list. For n = 2, node 1 with value 1 is the middle node, which is marked in red. Node 0 with value 2 is the only node remaining after removing node 1.   Constraints: The number of nodes in the list is in the range [1, 105]. 1 <= Node.val <= 105",
        "1569": "You are given the root of a binary tree with n nodes. Each node is uniquely assigned a value from 1 to n. You are also given an integer startValue representing the value of the start node s, and a different integer destValue representing the value of the destination node t. Find the shortest path starting from node s and ending at node t. Generate step-by-step directions of such path as a string consisting of only the uppercase letters 'L', 'R', and 'U'. Each letter indicates a specific direction: 'L' means to go from a node to its left child node. 'R' means to go from a node to its right child node. 'U' means to go from a node to its parent node. Return the step-by-step directions of the shortest path from node s to node t.   Example 1: Input: root = [5,1,2,3,null,6,4], startValue = 3, destValue = 6 Output: \"UURL\" Explanation: The shortest path is: 3 → 1 → 5 → 2 → 6. Example 2: Input: root = [2,1], startValue = 2, destValue = 1 Output: \"L\" Explanation: The shortest path is: 2 → 1.   Constraints: The number of nodes in the tree is n. 2 <= n <= 105 1 <= Node.val <= n All the values in the tree are unique. 1 <= startValue, destValue <= n startValue != destValue",
        "1570": "You are given a 0-indexed 2D integer array pairs where pairs[i] = [starti, endi]. An arrangement of pairs is valid if for every index i where 1 <= i < pairs.length, we have endi-1 == starti. Return any valid arrangement of pairs. Note: The inputs will be generated such that there exists a valid arrangement of pairs.   Example 1: Input: pairs = [[5,1],[4,5],[11,9],[9,4]] Output: [[11,9],[9,4],[4,5],[5,1]] Explanation: This is a valid arrangement since endi-1 always equals starti. end0 = 9 == 9 = start1  end1 = 4 == 4 = start2 end2 = 5 == 5 = start3 Example 2: Input: pairs = [[1,3],[3,2],[2,1]] Output: [[1,3],[3,2],[2,1]] Explanation: This is a valid arrangement since endi-1 always equals starti. end0 = 3 == 3 = start1 end1 = 2 == 2 = start2 The arrangements [[2,1],[1,3],[3,2]] and [[3,2],[2,1],[1,3]] are also valid. Example 3: Input: pairs = [[1,2],[1,3],[2,1]] Output: [[1,2],[2,1],[1,3]] Explanation: This is a valid arrangement since endi-1 always equals starti. end0 = 2 == 2 = start1 end1 = 1 == 1 = start2   Constraints: 1 <= pairs.length <= 105 pairs[i].length == 2 0 <= starti, endi <= 109 starti != endi No two pairs are exactly the same. There exists a valid arrangement of pairs.",
        "1571": "You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum. Return any such subsequence as an integer array of length k. A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.   Example 1: Input: nums = [2,1,3,3], k = 2 Output: [3,3] Explanation: The subsequence has the largest sum of 3 + 3 = 6. Example 2: Input: nums = [-1,-2,3,4], k = 3 Output: [-1,3,4] Explanation:  The subsequence has the largest sum of -1 + 3 + 4 = 6. Example 3: Input: nums = [3,4,3,3], k = 2 Output: [3,4] Explanation: The subsequence has the largest sum of 3 + 4 = 7.  Another possible subsequence is [4, 3].   Constraints: 1 <= nums.length <= 1000 -105 <= nums[i] <= 105 1 <= k <= nums.length",
        "1572": "You and a gang of thieves are planning on robbing a bank. You are given a 0-indexed integer array security, where security[i] is the number of guards on duty on the ith day. The days are numbered starting from 0. You are also given an integer time. The ith day is a good day to rob the bank if: There are at least time days before and after the ith day, The number of guards at the bank for the time days before i are non-increasing, and The number of guards at the bank for the time days after i are non-decreasing. More formally, this means day i is a good day to rob the bank if and only if security[i - time] >= security[i - time + 1] >= ... >= security[i] <= ... <= security[i + time - 1] <= security[i + time]. Return a list of all days (0-indexed) that are good days to rob the bank. The order that the days are returned in does not matter.   Example 1: Input: security = [5,3,3,3,5,6,2], time = 2 Output: [2,3] Explanation: On day 2, we have security[0] >= security[1] >= security[2] <= security[3] <= security[4]. On day 3, we have security[1] >= security[2] >= security[3] <= security[4] <= security[5]. No other days satisfy this condition, so days 2 and 3 are the only good days to rob the bank. Example 2: Input: security = [1,1,1,1,1], time = 0 Output: [0,1,2,3,4] Explanation: Since time equals 0, every day is a good day to rob the bank, so return every day. Example 3: Input: security = [1,2,3,4,5,6], time = 2 Output: [] Explanation: No day has 2 days before it that have a non-increasing number of guards. Thus, no day is a good day to rob the bank, so return an empty list.   Constraints: 1 <= security.length <= 105 0 <= security[i], time <= 105",
        "1573": "You are given a list of bombs. The range of a bomb is defined as the area where its effect can be felt. This area is in the shape of a circle with the center as the location of the bomb. The bombs are represented by a 0-indexed 2D integer array bombs where bombs[i] = [xi, yi, ri]. xi and yi denote the X-coordinate and Y-coordinate of the location of the ith bomb, whereas ri denotes the radius of its range. You may choose to detonate a single bomb. When a bomb is detonated, it will detonate all bombs that lie in its range. These bombs will further detonate the bombs that lie in their ranges. Given the list of bombs, return the maximum number of bombs that can be detonated if you are allowed to detonate only one bomb.   Example 1: Input: bombs = [[2,1,3],[6,1,4]] Output: 2 Explanation: The above figure shows the positions and ranges of the 2 bombs. If we detonate the left bomb, the right bomb will not be affected. But if we detonate the right bomb, both bombs will be detonated. So the maximum bombs that can be detonated is max(1, 2) = 2. Example 2: Input: bombs = [[1,1,5],[10,10,5]] Output: 1 Explanation: Detonating either bomb will not detonate the other bomb, so the maximum number of bombs that can be detonated is 1. Example 3: Input: bombs = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,6,4]] Output: 5 Explanation: The best bomb to detonate is bomb 0 because: - Bomb 0 detonates bombs 1 and 2. The red circle denotes the range of bomb 0. - Bomb 2 detonates bomb 3. The blue circle denotes the range of bomb 2. - Bomb 3 detonates bomb 4. The green circle denotes the range of bomb 3. Thus all 5 bombs are detonated.   Constraints: 1 <= bombs.length <= 100 bombs[i].length == 3 1 <= xi, yi, ri <= 105",
        "1574": "A scenic location is represented by its name and attractiveness score, where name is a unique string among all locations and score is an integer. Locations can be ranked from the best to the worst. The higher the score, the better the location. If the scores of two locations are equal, then the location with the lexicographically smaller name is better. You are building a system that tracks the ranking of locations with the system initially starting with no locations. It supports: Adding scenic locations, one at a time. Querying the ith best location of all locations already added, where i is the number of times the system has been queried (including the current query). For example, when the system is queried for the 4th time, it returns the 4th best location of all locations already added. Note that the test data are generated so that at any time, the number of queries does not exceed the number of locations added to the system. Implement the SORTracker class: SORTracker() Initializes the tracker system. void add(string name, int score) Adds a scenic location with name and score to the system. string get() Queries and returns the ith best location, where i is the number of times this method has been invoked (including this invocation).   Example 1: Input [\"SORTracker\", \"add\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"get\"] [[], [\"bradford\", 2], [\"branford\", 3], [], [\"alps\", 2], [], [\"orland\", 2], [], [\"orlando\", 3], [], [\"alpine\", 2], [], []] Output [null, null, null, \"branford\", null, \"alps\", null, \"bradford\", null, \"bradford\", null, \"bradford\", \"orland\"]  Explanation SORTracker tracker = new SORTracker(); // Initialize the tracker system. tracker.add(\"bradford\", 2); // Add location with name=\"bradford\" and score=2 to the system. tracker.add(\"branford\", 3); // Add location with name=\"branford\" and score=3 to the system. tracker.get();              // The sorted locations, from best to worst, are: branford, bradford.                             // Note that branford precedes bradford due to its higher score (3 > 2).                             // This is the 1st time get() is called, so return the best location: \"branford\". tracker.add(\"alps\", 2);     // Add location with name=\"alps\" and score=2 to the system. tracker.get();              // Sorted locations: branford, alps, bradford.                             // Note that alps precedes bradford even though they have the same score (2).                             // This is because \"alps\" is lexicographically smaller than \"bradford\".                             // Return the 2nd best location \"alps\", as it is the 2nd time get() is called. tracker.add(\"orland\", 2);   // Add location with name=\"orland\" and score=2 to the system. tracker.get();              // Sorted locations: branford, alps, bradford, orland.                             // Return \"bradford\", as it is the 3rd time get() is called. tracker.add(\"orlando\", 3);  // Add location with name=\"orlando\" and score=3 to the system. tracker.get();              // Sorted locations: branford, orlando, alps, bradford, orland.                             // Return \"bradford\". tracker.add(\"alpine\", 2);   // Add location with name=\"alpine\" and score=2 to the system. tracker.get();              // Sorted locations: branford, orlando, alpine, alps, bradford, orland.                             // Return \"bradford\". tracker.get();              // Sorted locations: branford, orlando, alpine, alps, bradford, orland.                             // Return \"orland\".   Constraints: name consists of lowercase English letters, and is unique among all locations. 1 <= name.length <= 10 1 <= score <= 105 At any time, the number of calls to get does not exceed the number of calls to add. At most 4 * 104 calls in total will be made to add and get.",
        "1575": "There are n rings and each ring is either red, green, or blue. The rings are distributed across ten rods labeled from 0 to 9. You are given a string rings of length 2n that describes the n rings that are placed onto the rods. Every two characters in rings forms a color-position pair that is used to describe each ring where: The first character of the ith pair denotes the ith ring's color ('R', 'G', 'B'). The second character of the ith pair denotes the rod that the ith ring is placed on ('0' to '9'). For example, \"R3G2B1\" describes n == 3 rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1. Return the number of rods that have all three colors of rings on them.   Example 1: Input: rings = \"B0B6G0R6R0R6G9\" Output: 1 Explanation:  - The rod labeled 0 holds 3 rings with all colors: red, green, and blue. - The rod labeled 6 holds 3 rings, but it only has red and blue. - The rod labeled 9 holds only a green ring. Thus, the number of rods with all three colors is 1. Example 2: Input: rings = \"B0R0G0R9R0B0G0\" Output: 1 Explanation:  - The rod labeled 0 holds 6 rings with all colors: red, green, and blue. - The rod labeled 9 holds only a red ring. Thus, the number of rods with all three colors is 1. Example 3: Input: rings = \"G4\" Output: 0 Explanation:  Only one ring is given. Thus, no rods have all three colors.   Constraints: rings.length == 2 * n 1 <= n <= 100 rings[i] where i is even is either 'R', 'G', or 'B' (0-indexed). rings[i] where i is odd is a digit from '0' to '9' (0-indexed).",
        "1576": "You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray. Return the sum of all subarray ranges of nums. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [1,2,3] Output: 4 Explanation: The 6 subarrays of nums are the following: [1], range = largest - smallest = 1 - 1 = 0  [2], range = 2 - 2 = 0 [3], range = 3 - 3 = 0 [1,2], range = 2 - 1 = 1 [2,3], range = 3 - 2 = 1 [1,2,3], range = 3 - 1 = 2 So the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4. Example 2: Input: nums = [1,3,3] Output: 4 Explanation: The 6 subarrays of nums are the following: [1], range = largest - smallest = 1 - 1 = 0 [3], range = 3 - 3 = 0 [3], range = 3 - 3 = 0 [1,3], range = 3 - 1 = 2 [3,3], range = 3 - 3 = 0 [1,3,3], range = 3 - 1 = 2 So the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4. Example 3: Input: nums = [4,-2,-3,4,1] Output: 59 Explanation: The sum of all subarray ranges of nums is 59.   Constraints: 1 <= nums.length <= 1000 -109 <= nums[i] <= 109   Follow-up: Could you find a solution with O(n) time complexity?",
        "1577": "Alice and Bob want to water n plants in their garden. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i. Each plant needs a specific amount of water. Alice and Bob have a watering can each, initially full. They water the plants in the following way: Alice waters the plants in order from left to right, starting from the 0th plant. Bob waters the plants in order from right to left, starting from the (n - 1)th plant. They begin watering the plants simultaneously. It takes the same amount of time to water each plant regardless of how much water it needs. Alice/Bob must water the plant if they have enough in their can to fully water it. Otherwise, they first refill their can (instantaneously) then water the plant. In case both Alice and Bob reach the same plant, the one with more water currently in his/her watering can should water this plant. If they have the same amount of water, then Alice should water this plant. Given a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and two integers capacityA and capacityB representing the capacities of Alice's and Bob's watering cans respectively, return the number of times they have to refill to water all the plants.   Example 1: Input: plants = [2,2,3,3], capacityA = 5, capacityB = 5 Output: 1 Explanation: - Initially, Alice and Bob have 5 units of water each in their watering cans. - Alice waters plant 0, Bob waters plant 3. - Alice and Bob now have 3 units and 2 units of water respectively. - Alice has enough water for plant 1, so she waters it. Bob does not have enough water for plant 2, so he refills his can then waters it. So, the total number of times they have to refill to water all the plants is 0 + 0 + 1 + 0 = 1. Example 2: Input: plants = [2,2,3,3], capacityA = 3, capacityB = 4 Output: 2 Explanation: - Initially, Alice and Bob have 3 units and 4 units of water in their watering cans respectively. - Alice waters plant 0, Bob waters plant 3. - Alice and Bob now have 1 unit of water each, and need to water plants 1 and 2 respectively. - Since neither of them have enough water for their current plants, they refill their cans and then water the plants. So, the total number of times they have to refill to water all the plants is 0 + 1 + 1 + 0 = 2. Example 3: Input: plants = [5], capacityA = 10, capacityB = 8 Output: 0 Explanation: - There is only one plant. - Alice's watering can has 10 units of water, whereas Bob's can has 8 units. Since Alice has more water in her can, she waters this plant. So, the total number of times they have to refill is 0.   Constraints: n == plants.length 1 <= n <= 105 1 <= plants[i] <= 106 max(plants[i]) <= capacityA, capacityB <= 109",
        "1578": "Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array fruits where fruits[i] = [positioni, amounti] depicts amounti fruits at the position positioni. fruits is already sorted by positioni in ascending order, and each positioni is unique. You are also given an integer startPos and an integer k. Initially, you are at the position startPos. From any position, you can either walk to the left or right. It takes one step to move one unit on the x-axis, and you can walk at most k steps in total. For every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position. Return the maximum total number of fruits you can harvest.   Example 1: Input: fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4 Output: 9 Explanation:  The optimal way is to: - Move right to position 6 and harvest 3 fruits - Move right to position 8 and harvest 6 fruits You moved 3 steps and harvested 3 + 6 = 9 fruits in total. Example 2: Input: fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4 Output: 14 Explanation:  You can move at most k = 4 steps, so you cannot reach position 0 nor 10. The optimal way is to: - Harvest the 7 fruits at the starting position 5 - Move left to position 4 and harvest 1 fruit - Move right to position 6 and harvest 2 fruits - Move right to position 7 and harvest 4 fruits You moved 1 + 3 = 4 steps and harvested 7 + 1 + 2 + 4 = 14 fruits in total. Example 3: Input: fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2 Output: 0 Explanation: You can move at most k = 2 steps and cannot reach any position with fruits.   Constraints: 1 <= fruits.length <= 105 fruits[i].length == 2 0 <= startPos, positioni <= 2 * 105 positioni-1 < positioni for any i > 0 (0-indexed) 1 <= amounti <= 104 0 <= k <= 2 * 105",
        "1579": "Given an array of strings words, return the first palindromic string in the array. If there is no such string, return an empty string \"\". A string is palindromic if it reads the same forward and backward.   Example 1: Input: words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"] Output: \"ada\" Explanation: The first string that is palindromic is \"ada\". Note that \"racecar\" is also palindromic, but it is not the first. Example 2: Input: words = [\"notapalindrome\",\"racecar\"] Output: \"racecar\" Explanation: The first and only string that is palindromic is \"racecar\". Example 3: Input: words = [\"def\",\"ghi\"] Output: \"\" Explanation: There are no palindromic strings, so the empty string is returned.   Constraints: 1 <= words.length <= 100 1 <= words[i].length <= 100 words[i] consists only of lowercase English letters.",
        "1580": "You are given a 0-indexed string s and a 0-indexed integer array spaces that describes the indices in the original string where spaces will be added. Each space should be inserted before the character at the given index. For example, given s = \"EnjoyYourCoffee\" and spaces = [5, 9], we place spaces before 'Y' and 'C', which are at indices 5 and 9 respectively. Thus, we obtain \"Enjoy Your Coffee\". Return the modified string after the spaces have been added.   Example 1: Input: s = \"LeetcodeHelpsMeLearn\", spaces = [8,13,15] Output: \"Leetcode Helps Me Learn\" Explanation:  The indices 8, 13, and 15 correspond to the underlined characters in \"LeetcodeHelpsMeLearn\". We then place spaces before those characters. Example 2: Input: s = \"icodeinpython\", spaces = [1,5,7,9] Output: \"i code in py thon\" Explanation: The indices 1, 5, 7, and 9 correspond to the underlined characters in \"icodeinpython\". We then place spaces before those characters. Example 3: Input: s = \"spacing\", spaces = [0,1,2,3,4,5,6] Output: \" s p a c i n g\" Explanation: We are also able to place spaces before the first character of the string.   Constraints: 1 <= s.length <= 3 * 105 s consists only of lowercase and uppercase English letters. 1 <= spaces.length <= 3 * 105 0 <= spaces[i] <= s.length - 1 All the values of spaces are strictly increasing.",
        "1581": "You are given an integer array prices representing the daily price history of a stock, where prices[i] is the stock price on the ith day. A smooth descent period of a stock consists of one or more contiguous days such that the price on each day is lower than the price on the preceding day by exactly 1. The first day of the period is exempted from this rule. Return the number of smooth descent periods.   Example 1: Input: prices = [3,2,1,4] Output: 7 Explanation: There are 7 smooth descent periods: [3], [2], [1], [4], [3,2], [2,1], and [3,2,1] Note that a period with one day is a smooth descent period by the definition. Example 2: Input: prices = [8,6,7,7] Output: 4 Explanation: There are 4 smooth descent periods: [8], [6], [7], and [7] Note that [8,6] is not a smooth descent period as 8 - 6 ≠ 1. Example 3: Input: prices = [1] Output: 1 Explanation: There is 1 smooth descent period: [1]   Constraints: 1 <= prices.length <= 105 1 <= prices[i] <= 105",
        "1582": "You are given a 0-indexed array arr consisting of n positive integers, and a positive integer k. The array arr is called K-increasing if arr[i-k] <= arr[i] holds for every index i, where k <= i <= n-1. For example, arr = [4, 1, 5, 2, 6, 2] is K-increasing for k = 2 because: arr[0] <= arr[2] (4 <= 5) arr[1] <= arr[3] (1 <= 2) arr[2] <= arr[4] (5 <= 6) arr[3] <= arr[5] (2 <= 2) However, the same arr is not K-increasing for k = 1 (because arr[0] > arr[1]) or k = 3 (because arr[0] > arr[3]). In one operation, you can choose an index i and change arr[i] into any positive integer. Return the minimum number of operations required to make the array K-increasing for the given k.   Example 1: Input: arr = [5,4,3,2,1], k = 1 Output: 4 Explanation: For k = 1, the resultant array has to be non-decreasing. Some of the K-increasing arrays that can be formed are [5,6,7,8,9], [1,1,1,1,1], [2,2,3,4,4]. All of them require 4 operations. It is suboptimal to change the array to, for example, [6,7,8,9,10] because it would take 5 operations. It can be shown that we cannot make the array K-increasing in less than 4 operations. Example 2: Input: arr = [4,1,5,2,6,2], k = 2 Output: 0 Explanation: This is the same example as the one in the problem description. Here, for every index i where 2 <= i <= 5, arr[i-2] <= arr[i]. Since the given array is already K-increasing, we do not need to perform any operations. Example 3: Input: arr = [4,1,5,2,6,2], k = 3 Output: 2 Explanation: Indices 3 and 5 are the only ones not satisfying arr[i-3] <= arr[i] for 3 <= i <= 5. One of the ways we can make the array K-increasing is by changing arr[3] to 4 and arr[5] to 5. The array will now be [4,1,5,4,6,5]. Note that there can be other ways to make the array K-increasing, but none of them require less than 2 operations.   Constraints: 1 <= arr.length <= 105 1 <= arr[i], k <= arr.length",
        "1583": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. You are given an array of strings sentences, where each sentences[i] represents a single sentence. Return the maximum number of words that appear in a single sentence.   Example 1: Input: sentences = [\"alice and bob love leetcode\", \"i think so too\", \"this is great thanks very much\"] Output: 6 Explanation:  - The first sentence, \"alice and bob love leetcode\", has 5 words in total. - The second sentence, \"i think so too\", has 4 words in total. - The third sentence, \"this is great thanks very much\", has 6 words in total. Thus, the maximum number of words in a single sentence comes from the third sentence, which has 6 words. Example 2: Input: sentences = [\"please wait\", \"continue to fight\", \"continue to win\"] Output: 3 Explanation: It is possible that multiple sentences contain the same number of words.  In this example, the second and third sentences (underlined) have the same number of words.   Constraints: 1 <= sentences.length <= 100 1 <= sentences[i].length <= 100 sentences[i] consists only of lowercase English letters and ' ' only. sentences[i] does not have leading or trailing spaces. All the words in sentences[i] are separated by a single space.",
        "1584": "You have information about n different recipes. You are given a string array recipes and a 2D string array ingredients. The ith recipe has the name recipes[i], and you can create it if you have all the needed ingredients from ingredients[i]. Ingredients to a recipe may need to be created from other recipes, i.e., ingredients[i] may contain a string that is in recipes. You are also given a string array supplies containing all the ingredients that you initially have, and you have an infinite supply of all of them. Return a list of all the recipes that you can create. You may return the answer in any order. Note that two recipes may contain each other in their ingredients.   Example 1: Input: recipes = [\"bread\"], ingredients = [[\"yeast\",\"flour\"]], supplies = [\"yeast\",\"flour\",\"corn\"] Output: [\"bread\"] Explanation: We can create \"bread\" since we have the ingredients \"yeast\" and \"flour\". Example 2: Input: recipes = [\"bread\",\"sandwich\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"]], supplies = [\"yeast\",\"flour\",\"meat\"] Output: [\"bread\",\"sandwich\"] Explanation: We can create \"bread\" since we have the ingredients \"yeast\" and \"flour\". We can create \"sandwich\" since we have the ingredient \"meat\" and can create the ingredient \"bread\". Example 3: Input: recipes = [\"bread\",\"sandwich\",\"burger\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"],[\"sandwich\",\"meat\",\"bread\"]], supplies = [\"yeast\",\"flour\",\"meat\"] Output: [\"bread\",\"sandwich\",\"burger\"] Explanation: We can create \"bread\" since we have the ingredients \"yeast\" and \"flour\". We can create \"sandwich\" since we have the ingredient \"meat\" and can create the ingredient \"bread\". We can create \"burger\" since we have the ingredient \"meat\" and can create the ingredients \"bread\" and \"sandwich\".   Constraints: n == recipes.length == ingredients.length 1 <= n <= 100 1 <= ingredients[i].length, supplies.length <= 100 1 <= recipes[i].length, ingredients[i][j].length, supplies[k].length <= 10 recipes[i], ingredients[i][j], and supplies[k] consist only of lowercase English letters. All the values of recipes and supplies combined are unique. Each ingredients[i] does not contain any duplicate values.",
        "1585": "A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true: It is (). It can be written as AB (A concatenated with B), where A and B are valid parentheses strings. It can be written as (A), where A is a valid parentheses string. You are given a parentheses string s and a string locked, both of length n. locked is a binary string consisting only of '0's and '1's. For each index i of locked, If locked[i] is '1', you cannot change s[i]. But if locked[i] is '0', you can change s[i] to either '(' or ')'. Return true if you can make s a valid parentheses string. Otherwise, return false.   Example 1: Input: s = \"))()))\", locked = \"010100\" Output: true Explanation: locked[1] == '1' and locked[3] == '1', so we cannot change s[1] or s[3]. We change s[0] and s[4] to '(' while leaving s[2] and s[5] unchanged to make s valid. Example 2: Input: s = \"()()\", locked = \"0000\" Output: true Explanation: We do not need to make any changes because s is already valid. Example 3: Input: s = \")\", locked = \"0\" Output: false Explanation: locked permits us to change s[0].  Changing s[0] to either '(' or ')' will not make s valid.   Constraints: n == s.length == locked.length 1 <= n <= 105 s[i] is either '(' or ')'. locked[i] is either '0' or '1'.",
        "1586": "You are given two positive integers left and right with left <= right. Calculate the product of all integers in the inclusive range [left, right]. Since the product may be very large, you will abbreviate it following these steps: Count all trailing zeros in the product and remove them. Let us denote this count as C. For example, there are 3 trailing zeros in 1000, and there are 0 trailing zeros in 546. Denote the remaining number of digits in the product as d. If d > 10, then express the product as <pre>...<suf> where <pre> denotes the first 5 digits of the product, and <suf> denotes the last 5 digits of the product after removing all trailing zeros. If d <= 10, we keep it unchanged. For example, we express 1234567654321 as 12345...54321, but 1234567 is represented as 1234567. Finally, represent the product as a string \"<pre>...<suf>eC\". For example, 12345678987600000 will be represented as \"12345...89876e5\". Return a string denoting the abbreviated product of all integers in the inclusive range [left, right].   Example 1: Input: left = 1, right = 4 Output: \"24e0\" Explanation: The product is 1 × 2 × 3 × 4 = 24. There are no trailing zeros, so 24 remains the same. The abbreviation will end with \"e0\". Since the number of digits is 2, which is less than 10, we do not have to abbreviate it further. Thus, the final representation is \"24e0\". Example 2: Input: left = 2, right = 11 Output: \"399168e2\" Explanation: The product is 39916800. There are 2 trailing zeros, which we remove to get 399168. The abbreviation will end with \"e2\". The number of digits after removing the trailing zeros is 6, so we do not abbreviate it further. Hence, the abbreviated product is \"399168e2\". Example 3: Input: left = 371, right = 375 Output: \"7219856259e3\" Explanation: The product is 7219856259000.   Constraints: 1 <= left <= right <= 104",
        "1587": "Reversing an integer means to reverse all its digits. For example, reversing 2021 gives 1202. Reversing 12300 gives 321 as the leading zeros are not retained. Given an integer num, reverse num to get reversed1, then reverse reversed1 to get reversed2. Return true if reversed2 equals num. Otherwise return false.   Example 1: Input: num = 526 Output: true Explanation: Reverse num to get 625, then reverse 625 to get 526, which equals num. Example 2: Input: num = 1800 Output: false Explanation: Reverse num to get 81, then reverse 81 to get 18, which does not equal num. Example 3: Input: num = 0 Output: true Explanation: Reverse num to get 0, then reverse 0 to get 0, which equals num.   Constraints: 0 <= num <= 106",
        "1588": "",
        "1589": "You are given a 0-indexed array of n integers arr. The interval between two elements in arr is defined as the absolute difference between their indices. More formally, the interval between arr[i] and arr[j] is |i - j|. Return an array intervals of length n where intervals[i] is the sum of intervals between arr[i] and each element in arr with the same value as arr[i]. Note: |x| is the absolute value of x.   Example 1: Input: arr = [2,1,3,1,2,3,3] Output: [4,2,7,2,4,4,5] Explanation: - Index 0: Another 2 is found at index 4. |0 - 4| = 4 - Index 1: Another 1 is found at index 3. |1 - 3| = 2 - Index 2: Two more 3s are found at indices 5 and 6. |2 - 5| + |2 - 6| = 7 - Index 3: Another 1 is found at index 1. |3 - 1| = 2 - Index 4: Another 2 is found at index 0. |4 - 0| = 4 - Index 5: Two more 3s are found at indices 2 and 6. |5 - 2| + |5 - 6| = 4 - Index 6: Two more 3s are found at indices 2 and 5. |6 - 2| + |6 - 5| = 5 Example 2: Input: arr = [10,5,10,10] Output: [5,0,3,4] Explanation: - Index 0: Two more 10s are found at indices 2 and 3. |0 - 2| + |0 - 3| = 5 - Index 1: There is only one 5 in the array, so its sum of intervals to identical elements is 0. - Index 2: Two more 10s are found at indices 0 and 3. |2 - 0| + |2 - 3| = 3 - Index 3: Two more 10s are found at indices 0 and 2. |3 - 0| + |3 - 2| = 4   Constraints: n == arr.length 1 <= n <= 105 1 <= arr[i] <= 105   Note: This question is the same as 2615: Sum of Distances.",
        "1590": "Alice had a 0-indexed array arr consisting of n positive integers. She chose an arbitrary positive integer k and created two new 0-indexed integer arrays lower and higher in the following manner: lower[i] = arr[i] - k, for every index i where 0 <= i < n higher[i] = arr[i] + k, for every index i where 0 <= i < n Unfortunately, Alice lost all three arrays. However, she remembers the integers that were present in the arrays lower and higher, but not the array each integer belonged to. Help Alice and recover the original array. Given an array nums consisting of 2n integers, where exactly n of the integers were present in lower and the remaining in higher, return the original array arr. In case the answer is not unique, return any valid array. Note: The test cases are generated such that there exists at least one valid array arr.   Example 1: Input: nums = [2,10,6,4,8,12] Output: [3,7,11] Explanation: If arr = [3,7,11] and k = 1, we get lower = [2,6,10] and higher = [4,8,12]. Combining lower and higher gives us [2,6,10,4,8,12], which is a permutation of nums. Another valid possibility is that arr = [5,7,9] and k = 3. In that case, lower = [2,4,6] and higher = [8,10,12].  Example 2: Input: nums = [1,1,3,3] Output: [2,2] Explanation: If arr = [2,2] and k = 1, we get lower = [1,1] and higher = [3,3]. Combining lower and higher gives us [1,1,3,3], which is equal to nums. Note that arr cannot be [1,3] because in that case, the only possible way to obtain [1,1,3,3] is with k = 0. This is invalid since k must be positive. Example 3: Input: nums = [5,435] Output: [220] Explanation: The only possible combination is arr = [220] and k = 215. Using them, we get lower = [5] and higher = [435].   Constraints: 2 * n == nums.length 1 <= n <= 1000 1 <= nums[i] <= 109 The test cases are generated such that there exists at least one valid array arr.",
        "1591": "Given a string s consisting of only the characters 'a' and 'b', return true if every 'a' appears before every 'b' in the string. Otherwise, return false.   Example 1: Input: s = \"aaabbb\" Output: true Explanation: The 'a's are at indices 0, 1, and 2, while the 'b's are at indices 3, 4, and 5. Hence, every 'a' appears before every 'b' and we return true. Example 2: Input: s = \"abab\" Output: false Explanation: There is an 'a' at index 2 and a 'b' at index 1. Hence, not every 'a' appears before every 'b' and we return false. Example 3: Input: s = \"bbb\" Output: true Explanation: There are no 'a's, hence, every 'a' appears before every 'b' and we return true.   Constraints: 1 <= s.length <= 100 s[i] is either 'a' or 'b'.",
        "1592": "Anti-theft security devices are activated inside a bank. You are given a 0-indexed binary string array bank representing the floor plan of the bank, which is an m x n 2D matrix. bank[i] represents the ith row, consisting of '0's and '1's. '0' means the cell is empty, while'1' means the cell has a security device. There is one laser beam between any two security devices if both conditions are met: The two devices are located on two different rows: r1 and r2, where r1 < r2. For each row i where r1 < i < r2, there are no security devices in the ith row. Laser beams are independent, i.e., one beam does not interfere nor join with another. Return the total number of laser beams in the bank.   Example 1: Input: bank = [\"011001\",\"000000\",\"010100\",\"001000\"] Output: 8 Explanation: Between each of the following device pairs, there is one beam. In total, there are 8 beams:  * bank[0][1] -- bank[2][1]  * bank[0][1] -- bank[2][3]  * bank[0][2] -- bank[2][1]  * bank[0][2] -- bank[2][3]  * bank[0][5] -- bank[2][1]  * bank[0][5] -- bank[2][3]  * bank[2][1] -- bank[3][2]  * bank[2][3] -- bank[3][2] Note that there is no beam between any device on the 0th row with any on the 3rd row. This is because the 2nd row contains security devices, which breaks the second condition. Example 2: Input: bank = [\"000\",\"111\",\"000\"] Output: 0 Explanation: There does not exist two devices located on two different rows.   Constraints: m == bank.length n == bank[i].length 1 <= m, n <= 500 bank[i][j] is either '0' or '1'.",
        "1593": "You are given an integer mass, which represents the original mass of a planet. You are further given an integer array asteroids, where asteroids[i] is the mass of the ith asteroid. You can arrange for the planet to collide with the asteroids in any arbitrary order. If the mass of the planet is greater than or equal to the mass of the asteroid, the asteroid is destroyed and the planet gains the mass of the asteroid. Otherwise, the planet is destroyed. Return true if all asteroids can be destroyed. Otherwise, return false.   Example 1: Input: mass = 10, asteroids = [3,9,19,5,21] Output: true Explanation: One way to order the asteroids is [9,19,5,3,21]: - The planet collides with the asteroid with a mass of 9. New planet mass: 10 + 9 = 19 - The planet collides with the asteroid with a mass of 19. New planet mass: 19 + 19 = 38 - The planet collides with the asteroid with a mass of 5. New planet mass: 38 + 5 = 43 - The planet collides with the asteroid with a mass of 3. New planet mass: 43 + 3 = 46 - The planet collides with the asteroid with a mass of 21. New planet mass: 46 + 21 = 67 All asteroids are destroyed. Example 2: Input: mass = 5, asteroids = [4,9,23,4] Output: false Explanation:  The planet cannot ever gain enough mass to destroy the asteroid with a mass of 23. After the planet destroys the other asteroids, it will have a mass of 5 + 4 + 9 + 4 = 22. This is less than 23, so a collision would not destroy the last asteroid.   Constraints: 1 <= mass <= 105 1 <= asteroids.length <= 105 1 <= asteroids[i] <= 105",
        "1594": "A company is organizing a meeting and has a list of n employees, waiting to be invited. They have arranged for a large circular table, capable of seating any number of employees. The employees are numbered from 0 to n - 1. Each employee has a favorite person and they will attend the meeting only if they can sit next to their favorite person at the table. The favorite person of an employee is not themself. Given a 0-indexed integer array favorite, where favorite[i] denotes the favorite person of the ith employee, return the maximum number of employees that can be invited to the meeting.   Example 1: Input: favorite = [2,2,1,2] Output: 3 Explanation: The above figure shows how the company can invite employees 0, 1, and 2, and seat them at the round table. All employees cannot be invited because employee 2 cannot sit beside employees 0, 1, and 3, simultaneously. Note that the company can also invite employees 1, 2, and 3, and give them their desired seats. The maximum number of employees that can be invited to the meeting is 3.  Example 2: Input: favorite = [1,2,0] Output: 3 Explanation:  Each employee is the favorite person of at least one other employee, and the only way the company can invite them is if they invite every employee. The seating arrangement will be the same as that in the figure given in example 1: - Employee 0 will sit between employees 2 and 1. - Employee 1 will sit between employees 0 and 2. - Employee 2 will sit between employees 1 and 0. The maximum number of employees that can be invited to the meeting is 3. Example 3: Input: favorite = [3,0,1,4,1] Output: 4 Explanation: The above figure shows how the company will invite employees 0, 1, 3, and 4, and seat them at the round table. Employee 2 cannot be invited because the two spots next to their favorite employee 1 are taken. So the company leaves them out of the meeting. The maximum number of employees that can be invited to the meeting is 4.   Constraints: n == favorite.length 2 <= n <= 105 0 <= favorite[i] <= n - 1 favorite[i] != i",
        "1595": "You are given a string title consisting of one or more words separated by a single space, where each word consists of English letters. Capitalize the string by changing the capitalization of each word such that: If the length of the word is 1 or 2 letters, change all letters to lowercase. Otherwise, change the first letter to uppercase and the remaining letters to lowercase. Return the capitalized title.   Example 1: Input: title = \"capiTalIze tHe titLe\" Output: \"Capitalize The Title\" Explanation: Since all the words have a length of at least 3, the first letter of each word is uppercase, and the remaining letters are lowercase. Example 2: Input: title = \"First leTTeR of EACH Word\" Output: \"First Letter of Each Word\" Explanation: The word \"of\" has length 2, so it is all lowercase. The remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase. Example 3: Input: title = \"i lOve leetcode\" Output: \"i Love Leetcode\" Explanation: The word \"i\" has length 1, so it is lowercase. The remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.   Constraints: 1 <= title.length <= 100 title consists of words separated by a single space without any leading or trailing spaces. Each word consists of uppercase and lowercase English letters and is non-empty.",
        "1596": "In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1. For example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. These are the only nodes with twins for n = 4. The twin sum is defined as the sum of a node and its twin. Given the head of a linked list with even length, return the maximum twin sum of the linked list.   Example 1: Input: head = [5,4,2,1] Output: 6 Explanation: Nodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6. There are no other nodes with twins in the linked list. Thus, the maximum twin sum of the linked list is 6.  Example 2: Input: head = [4,2,2,3] Output: 7 Explanation: The nodes with twins present in this linked list are: - Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7. - Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4. Thus, the maximum twin sum of the linked list is max(7, 4) = 7.  Example 3: Input: head = [1,100000] Output: 100001 Explanation: There is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001.   Constraints: The number of nodes in the list is an even integer in the range [2, 105]. 1 <= Node.val <= 105",
        "1597": "You are given an array of strings words. Each element of words consists of two lowercase English letters. Create the longest possible palindrome by selecting some elements from words and concatenating them in any order. Each element can be selected at most once. Return the length of the longest palindrome that you can create. If it is impossible to create any palindrome, return 0. A palindrome is a string that reads the same forward and backward.   Example 1: Input: words = [\"lc\",\"cl\",\"gg\"] Output: 6 Explanation: One longest palindrome is \"lc\" + \"gg\" + \"cl\" = \"lcggcl\", of length 6. Note that \"clgglc\" is another longest palindrome that can be created. Example 2: Input: words = [\"ab\",\"ty\",\"yt\",\"lc\",\"cl\",\"ab\"] Output: 8 Explanation: One longest palindrome is \"ty\" + \"lc\" + \"cl\" + \"yt\" = \"tylcclyt\", of length 8. Note that \"lcyttycl\" is another longest palindrome that can be created. Example 3: Input: words = [\"cc\",\"ll\",\"xx\"] Output: 2 Explanation: One longest palindrome is \"cc\", of length 2. Note that \"ll\" is another longest palindrome that can be created, and so is \"xx\".   Constraints: 1 <= words.length <= 105 words[i].length == 2 words[i] consists of lowercase English letters.",
        "1598": "You are given an m x n binary matrix grid where each cell is either 0 (empty) or 1 (occupied). You are then given stamps of size stampHeight x stampWidth. We want to fit the stamps such that they follow the given restrictions and requirements: Cover all the empty cells. Do not cover any of the occupied cells. We can put as many stamps as we want. Stamps can overlap with each other. Stamps are not allowed to be rotated. Stamps must stay completely inside the grid. Return true if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return false.   Example 1: Input: grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3 Output: true Explanation: We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells. Example 2: Input: grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2  Output: false  Explanation: There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid.   Constraints: m == grid.length n == grid[r].length 1 <= m, n <= 105 1 <= m * n <= 2 * 105 grid[r][c] is either 0 or 1. 1 <= stampHeight, stampWidth <= 105",
        "1599": "An n x n matrix is valid if every row and every column contains all the integers from 1 to n (inclusive). Given an n x n integer matrix matrix, return true if the matrix is valid. Otherwise, return false.   Example 1: Input: matrix = [[1,2,3],[3,1,2],[2,3,1]] Output: true Explanation: In this case, n = 3, and every row and column contains the numbers 1, 2, and 3. Hence, we return true. Example 2: Input: matrix = [[1,1,1],[1,2,3],[1,2,3]] Output: false Explanation: In this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3. Hence, we return false.   Constraints: n == matrix.length == matrix[i].length 1 <= n <= 100 1 <= matrix[i][j] <= n",
        "1600": "A swap is defined as taking two distinct positions in an array and swapping the values in them. A circular array is defined as an array where we consider the first element and the last element to be adjacent. Given a binary circular array nums, return the minimum number of swaps required to group all 1's present in the array together at any location.   Example 1: Input: nums = [0,1,0,1,1,0,0] Output: 1 Explanation: Here are a few of the ways to group all the 1's together: [0,0,1,1,1,0,0] using 1 swap. [0,1,1,1,0,0,0] using 1 swap. [1,1,0,0,0,0,1] using 2 swaps (using the circular property of the array). There is no way to group all 1's together with 0 swaps. Thus, the minimum number of swaps required is 1. Example 2: Input: nums = [0,1,1,1,0,0,1,1,0] Output: 2 Explanation: Here are a few of the ways to group all the 1's together: [1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the array). [1,1,1,1,1,0,0,0,0] using 2 swaps. There is no way to group all 1's together with 0 or 1 swaps. Thus, the minimum number of swaps required is 2. Example 3: Input: nums = [1,1,0,0,1] Output: 0 Explanation: All the 1's are already grouped together due to the circular property of the array. Thus, the minimum number of swaps required is 0.   Constraints: 1 <= nums.length <= 105 nums[i] is either 0 or 1.",
        "1601": "You are given two 0-indexed arrays of strings startWords and targetWords. Each string consists of lowercase English letters only. For each string in targetWords, check if it is possible to choose a string from startWords and perform a conversion operation on it to be equal to that from targetWords. The conversion operation is described in the following two steps: Append any lowercase letter that is not present in the string to its end. For example, if the string is \"abc\", the letters 'd', 'e', or 'y' can be added to it, but not 'a'. If 'd' is added, the resulting string will be \"abcd\". Rearrange the letters of the new string in any arbitrary order. For example, \"abcd\" can be rearranged to \"acbd\", \"bacd\", \"cbda\", and so on. Note that it can also be rearranged to \"abcd\" itself. Return the number of strings in targetWords that can be obtained by performing the operations on any string of startWords. Note that you will only be verifying if the string in targetWords can be obtained from a string in startWords by performing the operations. The strings in startWords do not actually change during this process.   Example 1: Input: startWords = [\"ant\",\"act\",\"tack\"], targetWords = [\"tack\",\"act\",\"acti\"] Output: 2 Explanation: - In order to form targetWords[0] = \"tack\", we use startWords[1] = \"act\", append 'k' to it, and rearrange \"actk\" to \"tack\". - There is no string in startWords that can be used to obtain targetWords[1] = \"act\".   Note that \"act\" does exist in startWords, but we must append one letter to the string before rearranging it. - In order to form targetWords[2] = \"acti\", we use startWords[1] = \"act\", append 'i' to it, and rearrange \"acti\" to \"acti\" itself. Example 2: Input: startWords = [\"ab\",\"a\"], targetWords = [\"abc\",\"abcd\"] Output: 1 Explanation: - In order to form targetWords[0] = \"abc\", we use startWords[0] = \"ab\", add 'c' to it, and rearrange it to \"abc\". - There is no string in startWords that can be used to obtain targetWords[1] = \"abcd\".   Constraints: 1 <= startWords.length, targetWords.length <= 5 * 104 1 <= startWords[i].length, targetWords[j].length <= 26 Each string of startWords and targetWords consists of lowercase English letters only. No letter occurs more than once in any string of startWords or targetWords.",
        "1602": "A string s can be partitioned into groups of size k using the following procedure: The first group consists of the first k characters of the string, the second group consists of the next k characters of the string, and so on. Each character can be a part of exactly one group. For the last group, if the string does not have k characters remaining, a character fill is used to complete the group. Note that the partition is done so that after removing the fill character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be s. Given the string s, the size of each group k and the character fill, return a string array denoting the composition of every group s has been divided into, using the above procedure.   Example 1: Input: s = \"abcdefghi\", k = 3, fill = \"x\" Output: [\"abc\",\"def\",\"ghi\"] Explanation: The first 3 characters \"abc\" form the first group. The next 3 characters \"def\" form the second group. The last 3 characters \"ghi\" form the third group. Since all groups can be completely filled by characters from the string, we do not need to use fill. Thus, the groups formed are \"abc\", \"def\", and \"ghi\". Example 2: Input: s = \"abcdefghij\", k = 3, fill = \"x\" Output: [\"abc\",\"def\",\"ghi\",\"jxx\"] Explanation: Similar to the previous example, we are forming the first three groups \"abc\", \"def\", and \"ghi\". For the last group, we can only use the character 'j' from the string. To complete this group, we add 'x' twice. Thus, the 4 groups formed are \"abc\", \"def\", \"ghi\", and \"jxx\".   Constraints: 1 <= s.length <= 100 s consists of lowercase English letters only. 1 <= k <= 100 fill is a lowercase English letter.",
        "1603": "You are playing a game with integers. You start with the integer 1 and you want to reach the integer target. In one move, you can either: Increment the current integer by one (i.e., x = x + 1). Double the current integer (i.e., x = 2 * x). You can use the increment operation any number of times, however, you can only use the double operation at most maxDoubles times. Given the two integers target and maxDoubles, return the minimum number of moves needed to reach target starting with 1.   Example 1: Input: target = 5, maxDoubles = 0 Output: 4 Explanation: Keep incrementing by 1 until you reach target. Example 2: Input: target = 19, maxDoubles = 2 Output: 7 Explanation: Initially, x = 1 Increment 3 times so x = 4 Double once so x = 8 Increment once so x = 9 Double again so x = 18 Increment once so x = 19 Example 3: Input: target = 10, maxDoubles = 4 Output: 4 Explanation: Initially, x = 1 Increment once so x = 2 Double once so x = 4 Increment once so x = 5 Double again so x = 10   Constraints: 1 <= target <= 109 0 <= maxDoubles <= 100",
        "1604": "You have n computers. You are given the integer n and a 0-indexed integer array batteries where the ith battery can run a computer for batteries[i] minutes. You are interested in running all n computers simultaneously using the given batteries. Initially, you can insert at most one battery into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery any number of times. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time. Note that the batteries cannot be recharged. Return the maximum number of minutes you can run all the n computers simultaneously.   Example 1: Input: n = 2, batteries = [3,3,3] Output: 4 Explanation:  Initially, insert battery 0 into the first computer and battery 1 into the second computer. After two minutes, remove battery 1 from the second computer and insert battery 2 instead. Note that battery 1 can still run for one minute. At the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead. By the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running. We can run the two computers simultaneously for at most 4 minutes, so we return 4. Example 2: Input: n = 2, batteries = [1,1,1,1] Output: 2 Explanation:  Initially, insert battery 0 into the first computer and battery 2 into the second computer.  After one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer.  After another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running. We can run the two computers simultaneously for at most 2 minutes, so we return 2.   Constraints: 1 <= n <= batteries.length <= 105 1 <= batteries[i] <= 109",
        "1605": "A shop is selling candies at a discount. For every two candies sold, the shop gives a third candy for free. The customer can choose any candy to take away for free as long as the cost of the chosen candy is less than or equal to the minimum cost of the two candies bought. For example, if there are 4 candies with costs 1, 2, 3, and 4, and the customer buys candies with costs 2 and 3, they can take the candy with cost 1 for free, but not the candy with cost 4. Given a 0-indexed integer array cost, where cost[i] denotes the cost of the ith candy, return the minimum cost of buying all the candies.   Example 1: Input: cost = [1,2,3] Output: 5 Explanation: We buy the candies with costs 2 and 3, and take the candy with cost 1 for free. The total cost of buying all candies is 2 + 3 = 5. This is the only way we can buy the candies. Note that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free. The cost of the free candy has to be less than or equal to the minimum cost of the purchased candies. Example 2: Input: cost = [6,5,7,9,2,2] Output: 23 Explanation: The way in which we can get the minimum cost is described below: - Buy candies with costs 9 and 7 - Take the candy with cost 6 for free - We buy candies with costs 5 and 2 - Take the last remaining candy with cost 2 for free Hence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23. Example 3: Input: cost = [5,5] Output: 10 Explanation: Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free. Hence, the minimum cost to buy all candies is 5 + 5 = 10.   Constraints: 1 <= cost.length <= 100 1 <= cost[i] <= 100",
        "1606": "You are given a 0-indexed array of n integers differences, which describes the differences between each pair of consecutive integers of a hidden sequence of length (n + 1). More formally, call the hidden sequence hidden, then we have that differences[i] = hidden[i + 1] - hidden[i]. You are further given two integers lower and upper that describe the inclusive range of values [lower, upper] that the hidden sequence can contain. For example, given differences = [1, -3, 4], lower = 1, upper = 6, the hidden sequence is a sequence of length 4 whose elements are in between 1 and 6 (inclusive). [3, 4, 1, 5] and [4, 5, 2, 6] are possible hidden sequences. [5, 6, 3, 7] is not possible since it contains an element greater than 6. [1, 2, 3, 4] is not possible since the differences are not correct. Return the number of possible hidden sequences there are. If there are no possible sequences, return 0.   Example 1: Input: differences = [1,-3,4], lower = 1, upper = 6 Output: 2 Explanation: The possible hidden sequences are: - [3, 4, 1, 5] - [4, 5, 2, 6] Thus, we return 2. Example 2: Input: differences = [3,-4,5,1,-2], lower = -4, upper = 5 Output: 4 Explanation: The possible hidden sequences are: - [-3, 0, -4, 1, 2, 0] - [-2, 1, -3, 2, 3, 1] - [-1, 2, -2, 3, 4, 2] - [0, 3, -1, 4, 5, 3] Thus, we return 4. Example 3: Input: differences = [4,-7,2], lower = 3, upper = 6 Output: 0 Explanation: There are no possible hidden sequences. Thus, we return 0.   Constraints: n == differences.length 1 <= n <= 105 -105 <= differences[i] <= 105 -105 <= lower <= upper <= 105",
        "1607": "You are given a 0-indexed 2D integer array grid of size m x n that represents a map of the items in a shop. The integers in the grid represent the following: 0 represents a wall that you cannot pass through. 1 represents an empty cell that you can freely move to and from. All other positive integers represent the price of an item in that cell. You may also freely move to and from these item cells. It takes 1 step to travel between adjacent grid cells. You are also given integer arrays pricing and start where pricing = [low, high] and start = [row, col] indicates that you start at the position (row, col) and are interested only in items with a price in the range of [low, high] (inclusive). You are further given an integer k. You are interested in the positions of the k highest-ranked items whose prices are within the given price range. The rank is determined by the first of these criteria that is different: Distance, defined as the length of the shortest path from the start (shorter distance has a higher rank). Price (lower price has a higher rank, but it must be in the price range). The row number (smaller row number has a higher rank). The column number (smaller column number has a higher rank). Return the k highest-ranked items within the price range sorted by their rank (highest to lowest). If there are fewer than k reachable items within the price range, return all of them.   Example 1: Input: grid = [[1,2,0,1],[1,3,0,1],[0,2,5,1]], pricing = [2,5], start = [0,0], k = 3 Output: [[0,1],[1,1],[2,1]] Explanation: You start at (0,0). With a price range of [2,5], we can take items from (0,1), (1,1), (2,1) and (2,2). The ranks of these items are: - (0,1) with distance 1 - (1,1) with distance 2 - (2,1) with distance 3 - (2,2) with distance 4 Thus, the 3 highest ranked items in the price range are (0,1), (1,1), and (2,1). Example 2: Input: grid = [[1,2,0,1],[1,3,3,1],[0,2,5,1]], pricing = [2,3], start = [2,3], k = 2 Output: [[2,1],[1,2]] Explanation: You start at (2,3). With a price range of [2,3], we can take items from (0,1), (1,1), (1,2) and (2,1). The ranks of these items are: - (2,1) with distance 2, price 2 - (1,2) with distance 2, price 3 - (1,1) with distance 3 - (0,1) with distance 4 Thus, the 2 highest ranked items in the price range are (2,1) and (1,2). Example 3: Input: grid = [[1,1,1],[0,0,1],[2,3,4]], pricing = [2,3], start = [0,0], k = 3 Output: [[2,1],[2,0]] Explanation: You start at (0,0). With a price range of [2,3], we can take items from (2,0) and (2,1).  The ranks of these items are:  - (2,1) with distance 5 - (2,0) with distance 6 Thus, the 2 highest ranked items in the price range are (2,1) and (2,0).  Note that k = 3 but there are only 2 reachable items within the price range.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 105 1 <= m * n <= 105 0 <= grid[i][j] <= 105 pricing.length == 2 2 <= low <= high <= 105 start.length == 2 0 <= row <= m - 1 0 <= col <= n - 1 grid[row][col] > 0 1 <= k <= m * n",
        "1608": "Along a long library corridor, there is a line of seats and decorative plants. You are given a 0-indexed string corridor of length n consisting of letters 'S' and 'P' where each 'S' represents a seat and each 'P' represents a plant. One room divider has already been installed to the left of index 0, and another to the right of index n - 1. Additional room dividers can be installed. For each position between indices i - 1 and i (1 <= i <= n - 1), at most one divider can be installed. Divide the corridor into non-overlapping sections, where each section has exactly two seats with any number of plants. There may be multiple ways to perform the division. Two ways are different if there is a position with a room divider installed in the first way but not in the second way. Return the number of ways to divide the corridor. Since the answer may be very large, return it modulo 109 + 7. If there is no way, return 0.   Example 1: Input: corridor = \"SSPPSPS\" Output: 3 Explanation: There are 3 different ways to divide the corridor. The black bars in the above image indicate the two room dividers already installed. Note that in each of the ways, each section has exactly two seats. Example 2: Input: corridor = \"PPSPSP\" Output: 1 Explanation: There is only 1 way to divide the corridor, by not installing any additional dividers. Installing any would create some section that does not have exactly two seats. Example 3: Input: corridor = \"S\" Output: 0 Explanation: There is no way to divide the corridor because there will always be a section that does not have exactly two seats.   Constraints: n == corridor.length 1 <= n <= 105 corridor[i] is either 'S' or 'P'.",
        "1609": "Given an integer array nums, return the number of elements that have both a strictly smaller and a strictly greater element appear in nums.   Example 1: Input: nums = [11,7,2,15] Output: 2 Explanation: The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it. Element 11 has element 7 strictly smaller than it and element 15 strictly greater than it. In total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums. Example 2: Input: nums = [-3,3,3,90] Output: 2 Explanation: The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it. Since there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums.   Constraints: 1 <= nums.length <= 100 -105 <= nums[i] <= 105",
        "1610": "You are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers. You should return the array of nums such that the the array follows the given conditions: Every consecutive pair of integers have opposite signs. For all integers with the same sign, the order in which they were present in nums is preserved. The rearranged array begins with a positive integer. Return the modified array after rearranging the elements to satisfy the aforementioned conditions.   Example 1: Input: nums = [3,1,-2,-5,2,-4] Output: [3,-2,1,-5,2,-4] Explanation: The positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4]. The only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4]. Other ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions.   Example 2: Input: nums = [-1,1] Output: [1,-1] Explanation: 1 is the only positive integer and -1 the only negative integer in nums. So nums is rearranged to [1,-1].   Constraints: 2 <= nums.length <= 2 * 105 nums.length is even 1 <= |nums[i]| <= 105 nums consists of equal number of positive and negative integers.   It is not required to do the modifications in-place.",
        "1611": "You are given an integer array nums. A number x is lonely when it appears only once, and no adjacent numbers (i.e. x + 1 and x - 1) appear in the array. Return all lonely numbers in nums. You may return the answer in any order.   Example 1: Input: nums = [10,6,5,8] Output: [10,8] Explanation:  - 10 is a lonely number since it appears exactly once and 9 and 11 does not appear in nums. - 8 is a lonely number since it appears exactly once and 7 and 9 does not appear in nums. - 5 is not a lonely number since 6 appears in nums and vice versa. Hence, the lonely numbers in nums are [10, 8]. Note that [8, 10] may also be returned. Example 2: Input: nums = [1,3,5,3] Output: [1,5] Explanation:  - 1 is a lonely number since it appears exactly once and 0 and 2 does not appear in nums. - 5 is a lonely number since it appears exactly once and 4 and 6 does not appear in nums. - 3 is not a lonely number since it appears twice. Hence, the lonely numbers in nums are [1, 5]. Note that [5, 1] may also be returned.   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 106",
        "1612": "You are given an array of integers nums. You are also given an integer original which is the first number that needs to be searched for in nums. You then do the following steps: If original is found in nums, multiply it by two (i.e., set original = 2 * original). Otherwise, stop the process. Repeat this process with the new number as long as you keep finding the number. Return the final value of original.   Example 1: Input: nums = [5,3,6,1,12], original = 3 Output: 24 Explanation:  - 3 is found in nums. 3 is multiplied by 2 to obtain 6. - 6 is found in nums. 6 is multiplied by 2 to obtain 12. - 12 is found in nums. 12 is multiplied by 2 to obtain 24. - 24 is not found in nums. Thus, 24 is returned. Example 2: Input: nums = [2,7,9], original = 4 Output: 4 Explanation: - 4 is not found in nums. Thus, 4 is returned.   Constraints: 1 <= nums.length <= 1000 1 <= nums[i], original <= 1000",
        "1613": "You are given a 0-indexed binary array nums of length n. nums can be divided at index i (where 0 <= i <= n) into two arrays (possibly empty) numsleft and numsright: numsleft has all the elements of nums between index 0 and i - 1 (inclusive), while numsright has all the elements of nums between index i and n - 1 (inclusive). If i == 0, numsleft is empty, while numsright has all the elements of nums. If i == n, numsleft has all the elements of nums, while numsright is empty. The division score of an index i is the sum of the number of 0's in numsleft and the number of 1's in numsright. Return all distinct indices that have the highest possible division score. You may return the answer in any order.   Example 1: Input: nums = [0,0,1,0] Output: [2,4] Explanation: Division at index - 0: numsleft is []. numsright is [0,0,1,0]. The score is 0 + 1 = 1. - 1: numsleft is [0]. numsright is [0,1,0]. The score is 1 + 1 = 2. - 2: numsleft is [0,0]. numsright is [1,0]. The score is 2 + 1 = 3. - 3: numsleft is [0,0,1]. numsright is [0]. The score is 2 + 0 = 2. - 4: numsleft is [0,0,1,0]. numsright is []. The score is 3 + 0 = 3. Indices 2 and 4 both have the highest possible division score 3. Note the answer [4,2] would also be accepted. Example 2: Input: nums = [0,0,0] Output: [3] Explanation: Division at index - 0: numsleft is []. numsright is [0,0,0]. The score is 0 + 0 = 0. - 1: numsleft is [0]. numsright is [0,0]. The score is 1 + 0 = 1. - 2: numsleft is [0,0]. numsright is [0]. The score is 2 + 0 = 2. - 3: numsleft is [0,0,0]. numsright is []. The score is 3 + 0 = 3. Only index 3 has the highest possible division score 3. Example 3: Input: nums = [1,1] Output: [0] Explanation: Division at index - 0: numsleft is []. numsright is [1,1]. The score is 0 + 2 = 2. - 1: numsleft is [1]. numsright is [1]. The score is 0 + 1 = 1. - 2: numsleft is [1,1]. numsright is []. The score is 0 + 0 = 0. Only index 0 has the highest possible division score 2.   Constraints: n == nums.length 1 <= n <= 105 nums[i] is either 0 or 1.",
        "1614": "The hash of a 0-indexed string s of length k, given integers p and m, is computed using the following function: hash(s, p, m) = (val(s[0]) * p0 + val(s[1]) * p1 + ... + val(s[k-1]) * pk-1) mod m. Where val(s[i]) represents the index of s[i] in the alphabet from val('a') = 1 to val('z') = 26. You are given a string s and the integers power, modulo, k, and hashValue. Return sub, the first substring of s of length k such that hash(sub, power, modulo) == hashValue. The test cases will be generated such that an answer always exists. A substring is a contiguous non-empty sequence of characters within a string.   Example 1: Input: s = \"leetcode\", power = 7, modulo = 20, k = 2, hashValue = 0 Output: \"ee\" Explanation: The hash of \"ee\" can be computed to be hash(\"ee\", 7, 20) = (5 * 1 + 5 * 7) mod 20 = 40 mod 20 = 0.  \"ee\" is the first substring of length 2 with hashValue 0. Hence, we return \"ee\". Example 2: Input: s = \"fbxzaad\", power = 31, modulo = 100, k = 3, hashValue = 32 Output: \"fbx\" Explanation: The hash of \"fbx\" can be computed to be hash(\"fbx\", 31, 100) = (6 * 1 + 2 * 31 + 24 * 312) mod 100 = 23132 mod 100 = 32.  The hash of \"bxz\" can be computed to be hash(\"bxz\", 31, 100) = (2 * 1 + 24 * 31 + 26 * 312) mod 100 = 25732 mod 100 = 32.  \"fbx\" is the first substring of length 3 with hashValue 32. Hence, we return \"fbx\". Note that \"bxz\" also has a hash of 32 but it appears later than \"fbx\".   Constraints: 1 <= k <= s.length <= 2 * 104 1 <= power, modulo <= 109 0 <= hashValue < modulo s consists of lowercase English letters only. The test cases are generated such that an answer always exists.",
        "1615": "You are given a 0-indexed array of strings words. Each string consists of lowercase English letters only. No letter occurs more than once in any string of words. Two strings s1 and s2 are said to be connected if the set of letters of s2 can be obtained from the set of letters of s1 by any one of the following operations: Adding exactly one letter to the set of the letters of s1. Deleting exactly one letter from the set of the letters of s1. Replacing exactly one letter from the set of the letters of s1 with any letter, including itself. The array words can be divided into one or more non-intersecting groups. A string belongs to a group if any one of the following is true: It is connected to at least one other string of the group. It is the only string present in the group. Note that the strings in words should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. It can be proved that such an arrangement is always unique. Return an array ans of size 2 where: ans[0] is the maximum number of groups words can be divided into, and ans[1] is the size of the largest group.   Example 1: Input: words = [\"a\",\"b\",\"ab\",\"cde\"] Output: [2,3] Explanation: - words[0] can be used to obtain words[1] (by replacing 'a' with 'b'), and words[2] (by adding 'b'). So words[0] is connected to words[1] and words[2]. - words[1] can be used to obtain words[0] (by replacing 'b' with 'a'), and words[2] (by adding 'a'). So words[1] is connected to words[0] and words[2]. - words[2] can be used to obtain words[0] (by deleting 'b'), and words[1] (by deleting 'a'). So words[2] is connected to words[0] and words[1]. - words[3] is not connected to any string in words. Thus, words can be divided into 2 groups [\"a\",\"b\",\"ab\"] and [\"cde\"]. The size of the largest group is 3.   Example 2: Input: words = [\"a\",\"ab\",\"abc\"] Output: [1,3] Explanation: - words[0] is connected to words[1]. - words[1] is connected to words[0] and words[2]. - words[2] is connected to words[1]. Since all strings are connected to each other, they should be grouped together. Thus, the size of the largest group is 3.   Constraints: 1 <= words.length <= 2 * 104 1 <= words[i].length <= 26 words[i] consists of lowercase English letters only. No letter occurs more than once in words[i].",
        "1616": "You are given a positive integer num consisting of exactly four digits. Split num into two new integers new1 and new2 by using the digits found in num. Leading zeros are allowed in new1 and new2, and all the digits found in num must be used. For example, given num = 2932, you have the following digits: two 2's, one 9 and one 3. Some of the possible pairs [new1, new2] are [22, 93], [23, 92], [223, 9] and [2, 329]. Return the minimum possible sum of new1 and new2.   Example 1: Input: num = 2932 Output: 52 Explanation: Some possible pairs [new1, new2] are [29, 23], [223, 9], etc. The minimum sum can be obtained by the pair [29, 23]: 29 + 23 = 52. Example 2: Input: num = 4009 Output: 13 Explanation: Some possible pairs [new1, new2] are [0, 49], [490, 0], etc.  The minimum sum can be obtained by the pair [4, 9]: 4 + 9 = 13.   Constraints: 1000 <= num <= 9999",
        "1617": "You are given a 0-indexed integer array nums and an integer pivot. Rearrange nums such that the following conditions are satisfied: Every element less than pivot appears before every element greater than pivot. Every element equal to pivot appears in between the elements less than and greater than pivot. The relative order of the elements less than pivot and the elements greater than pivot is maintained. More formally, consider every pi, pj where pi is the new position of the ith element and pj is the new position of the jth element. For elements less than pivot, if i < j and nums[i] < pivot and nums[j] < pivot, then pi < pj. Similarly for elements greater than pivot, if i < j and nums[i] > pivot and nums[j] > pivot, then pi < pj. Return nums after the rearrangement.   Example 1: Input: nums = [9,12,5,10,14,3,10], pivot = 10 Output: [9,5,3,10,10,12,14] Explanation:  The elements 9, 5, and 3 are less than the pivot so they are on the left side of the array. The elements 12 and 14 are greater than the pivot so they are on the right side of the array. The relative ordering of the elements less than and greater than pivot is also maintained. [9, 5, 3] and [12, 14] are the respective orderings. Example 2: Input: nums = [-3,4,3,2], pivot = 2 Output: [-3,2,4,3] Explanation:  The element -3 is less than the pivot so it is on the left side of the array. The elements 4 and 3 are greater than the pivot so they are on the right side of the array. The relative ordering of the elements less than and greater than pivot is also maintained. [-3] and [4, 3] are the respective orderings.   Constraints: 1 <= nums.length <= 105 -106 <= nums[i] <= 106 pivot equals to an element of nums.",
        "1618": "A generic microwave supports cooking times for: at least 1 second. at most 99 minutes and 99 seconds. To set the cooking time, you push at most four digits. The microwave normalizes what you push as four digits by prepending zeroes. It interprets the first two digits as the minutes and the last two digits as the seconds. It then adds them up as the cooking time. For example, You push 9 5 4 (three digits). It is normalized as 0954 and interpreted as 9 minutes and 54 seconds. You push 0 0 0 8 (four digits). It is interpreted as 0 minutes and 8 seconds. You push 8 0 9 0. It is interpreted as 80 minutes and 90 seconds. You push 8 1 3 0. It is interpreted as 81 minutes and 30 seconds. You are given integers startAt, moveCost, pushCost, and targetSeconds. Initially, your finger is on the digit startAt. Moving the finger above any specific digit costs moveCost units of fatigue. Pushing the digit below the finger once costs pushCost units of fatigue. There can be multiple ways to set the microwave to cook for targetSeconds seconds but you are interested in the way with the minimum cost. Return the minimum cost to set targetSeconds seconds of cooking time. Remember that one minute consists of 60 seconds.   Example 1: Input: startAt = 1, moveCost = 2, pushCost = 1, targetSeconds = 600 Output: 6 Explanation: The following are the possible ways to set the cooking time. - 1 0 0 0, interpreted as 10 minutes and 0 seconds.   The finger is already on digit 1, pushes 1 (with cost 1), moves to 0 (with cost 2), pushes 0 (with cost 1), pushes 0 (with cost 1), and pushes 0 (with cost 1).   The cost is: 1 + 2 + 1 + 1 + 1 = 6. This is the minimum cost. - 0 9 6 0, interpreted as 9 minutes and 60 seconds. That is also 600 seconds.   The finger moves to 0 (with cost 2), pushes 0 (with cost 1), moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).   The cost is: 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 = 12. - 9 6 0, normalized as 0960 and interpreted as 9 minutes and 60 seconds.   The finger moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).   The cost is: 2 + 1 + 2 + 1 + 2 + 1 = 9. Example 2: Input: startAt = 0, moveCost = 1, pushCost = 2, targetSeconds = 76 Output: 6 Explanation: The optimal way is to push two digits: 7 6, interpreted as 76 seconds. The finger moves to 7 (with cost 1), pushes 7 (with cost 2), moves to 6 (with cost 1), and pushes 6 (with cost 2). The total cost is: 1 + 2 + 1 + 2 = 6 Note other possible ways are 0076, 076, 0116, and 116, but none of them produces the minimum cost.   Constraints: 0 <= startAt <= 9 1 <= moveCost, pushCost <= 105 1 <= targetSeconds <= 6039",
        "1619": "You are given a 0-indexed integer array nums consisting of 3 * n elements. You are allowed to remove any subsequence of elements of size exactly n from nums. The remaining 2 * n elements will be divided into two equal parts: The first n elements belonging to the first part and their sum is sumfirst. The next n elements belonging to the second part and their sum is sumsecond. The difference in sums of the two parts is denoted as sumfirst - sumsecond. For example, if sumfirst = 3 and sumsecond = 2, their difference is 1. Similarly, if sumfirst = 2 and sumsecond = 3, their difference is -1. Return the minimum difference possible between the sums of the two parts after the removal of n elements.   Example 1: Input: nums = [3,1,2] Output: -1 Explanation: Here, nums has 3 elements, so n = 1.  Thus we have to remove 1 element from nums and divide the array into two equal parts. - If we remove nums[0] = 3, the array will be [1,2]. The difference in sums of the two parts will be 1 - 2 = -1. - If we remove nums[1] = 1, the array will be [3,2]. The difference in sums of the two parts will be 3 - 2 = 1. - If we remove nums[2] = 2, the array will be [3,1]. The difference in sums of the two parts will be 3 - 1 = 2. The minimum difference between sums of the two parts is min(-1,1,2) = -1.  Example 2: Input: nums = [7,9,5,8,1,3] Output: 1 Explanation: Here n = 2. So we must remove 2 elements and divide the remaining array into two parts containing two elements each. If we remove nums[2] = 5 and nums[3] = 8, the resultant array will be [7,9,1,3]. The difference in sums will be (7+9) - (1+3) = 12. To obtain the minimum difference, we should remove nums[1] = 9 and nums[4] = 1. The resultant array becomes [7,5,8,3]. The difference in sums of the two parts is (7+5) - (8+3) = 1. It can be shown that it is not possible to obtain a difference smaller than 1.   Constraints: nums.length == 3 * n 1 <= n <= 105 1 <= nums[i] <= 105",
        "1620": "You are given a 0-indexed integer array nums. Rearrange the values of nums according to the following rules: Sort the values at odd indices of nums in non-increasing order. For example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. The values at odd indices 1 and 3 are sorted in non-increasing order. Sort the values at even indices of nums in non-decreasing order. For example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. The values at even indices 0 and 2 are sorted in non-decreasing order. Return the array formed after rearranging the values of nums.   Example 1: Input: nums = [4,1,2,3] Output: [2,3,4,1] Explanation:  First, we sort the values present at odd indices (1 and 3) in non-increasing order. So, nums changes from [4,1,2,3] to [4,3,2,1]. Next, we sort the values present at even indices (0 and 2) in non-decreasing order. So, nums changes from [4,1,2,3] to [2,3,4,1]. Thus, the array formed after rearranging the values is [2,3,4,1]. Example 2: Input: nums = [2,1] Output: [2,1] Explanation:  Since there is exactly one odd index and one even index, no rearrangement of values takes place. The resultant array formed is [2,1], which is the same as the initial array.    Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100",
        "1621": "You are given an integer num. Rearrange the digits of num such that its value is minimized and it does not contain any leading zeros. Return the rearranged number with minimal value. Note that the sign of the number does not change after rearranging the digits.   Example 1: Input: num = 310 Output: 103 Explanation: The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310.  The arrangement with the smallest value that does not contain any leading zeros is 103. Example 2: Input: num = -7605 Output: -7650 Explanation: Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567. The arrangement with the smallest value that does not contain any leading zeros is -7650.   Constraints: -1015 <= num <= 1015",
        "1622": "A Bitset is a data structure that compactly stores bits. Implement the Bitset class: Bitset(int size) Initializes the Bitset with size bits, all of which are 0. void fix(int idx) Updates the value of the bit at the index idx to 1. If the value was already 1, no change occurs. void unfix(int idx) Updates the value of the bit at the index idx to 0. If the value was already 0, no change occurs. void flip() Flips the values of each bit in the Bitset. In other words, all bits with value 0 will now have value 1 and vice versa. boolean all() Checks if the value of each bit in the Bitset is 1. Returns true if it satisfies the condition, false otherwise. boolean one() Checks if there is at least one bit in the Bitset with value 1. Returns true if it satisfies the condition, false otherwise. int count() Returns the total number of bits in the Bitset which have value 1. String toString() Returns the current composition of the Bitset. Note that in the resultant string, the character at the ith index should coincide with the value at the ith bit of the Bitset.   Example 1: Input [\"Bitset\", \"fix\", \"fix\", \"flip\", \"all\", \"unfix\", \"flip\", \"one\", \"unfix\", \"count\", \"toString\"] [[5], [3], [1], [], [], [0], [], [], [0], [], []] Output [null, null, null, null, false, null, null, true, null, 2, \"01010\"]  Explanation Bitset bs = new Bitset(5); // bitset = \"00000\". bs.fix(3);     // the value at idx = 3 is updated to 1, so bitset = \"00010\". bs.fix(1);     // the value at idx = 1 is updated to 1, so bitset = \"01010\".  bs.flip();     // the value of each bit is flipped, so bitset = \"10101\".  bs.all();      // return False, as not all values of the bitset are 1. bs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset = \"00101\". bs.flip();     // the value of each bit is flipped, so bitset = \"11010\".  bs.one();      // return True, as there is at least 1 index with value 1. bs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset = \"01010\". bs.count();    // return 2, as there are 2 bits with value 1. bs.toString(); // return \"01010\", which is the composition of bitset.   Constraints: 1 <= size <= 105 0 <= idx <= size - 1 At most 105 calls will be made in total to fix, unfix, flip, all, one, count, and toString. At least one call will be made to all, one, count, or toString. At most 5 calls will be made to toString.",
        "1623": "You are given a 0-indexed binary string s which represents a sequence of train cars. s[i] = '0' denotes that the ith car does not contain illegal goods and s[i] = '1' denotes that the ith car does contain illegal goods. As the train conductor, you would like to get rid of all the cars containing illegal goods. You can do any of the following three operations any number of times: Remove a train car from the left end (i.e., remove s[0]) which takes 1 unit of time. Remove a train car from the right end (i.e., remove s[s.length - 1]) which takes 1 unit of time. Remove a train car from anywhere in the sequence which takes 2 units of time. Return the minimum time to remove all the cars containing illegal goods. Note that an empty sequence of cars is considered to have no cars containing illegal goods.   Example 1: Input: s = \"1100101\" Output: 5 Explanation:  One way to remove all the cars containing illegal goods from the sequence is to - remove a car from the left end 2 times. Time taken is 2 * 1 = 2. - remove a car from the right end. Time taken is 1. - remove the car containing illegal goods found in the middle. Time taken is 2. This obtains a total time of 2 + 1 + 2 = 5.   An alternative way is to - remove a car from the left end 2 times. Time taken is 2 * 1 = 2. - remove a car from the right end 3 times. Time taken is 3 * 1 = 3. This also obtains a total time of 2 + 3 = 5.  5 is the minimum time taken to remove all the cars containing illegal goods.  There are no other ways to remove them with less time. Example 2: Input: s = \"0010\" Output: 2 Explanation: One way to remove all the cars containing illegal goods from the sequence is to - remove a car from the left end 3 times. Time taken is 3 * 1 = 3. This obtains a total time of 3.  Another way to remove all the cars containing illegal goods from the sequence is to - remove the car containing illegal goods found in the middle. Time taken is 2. This obtains a total time of 2.  Another way to remove all the cars containing illegal goods from the sequence is to  - remove a car from the right end 2 times. Time taken is 2 * 1 = 2.  This obtains a total time of 2.  2 is the minimum time taken to remove all the cars containing illegal goods.  There are no other ways to remove them with less time.   Constraints: 1 <= s.length <= 2 * 105 s[i] is either '0' or '1'.",
        "1624": "You are given two non-negative integers num1 and num2. In one operation, if num1 >= num2, you must subtract num2 from num1, otherwise subtract num1 from num2. For example, if num1 = 5 and num2 = 4, subtract num2 from num1, thus obtaining num1 = 1 and num2 = 4. However, if num1 = 4 and num2 = 5, after one operation, num1 = 4 and num2 = 1. Return the number of operations required to make either num1 = 0 or num2 = 0.   Example 1: Input: num1 = 2, num2 = 3 Output: 3 Explanation:  - Operation 1: num1 = 2, num2 = 3. Since num1 < num2, we subtract num1 from num2 and get num1 = 2, num2 = 3 - 2 = 1. - Operation 2: num1 = 2, num2 = 1. Since num1 > num2, we subtract num2 from num1. - Operation 3: num1 = 1, num2 = 1. Since num1 == num2, we subtract num2 from num1. Now num1 = 0 and num2 = 1. Since num1 == 0, we do not need to perform any further operations. So the total number of operations required is 3. Example 2: Input: num1 = 10, num2 = 10 Output: 1 Explanation:  - Operation 1: num1 = 10, num2 = 10. Since num1 == num2, we subtract num2 from num1 and get num1 = 10 - 10 = 0. Now num1 = 0 and num2 = 10. Since num1 == 0, we are done. So the total number of operations required is 1.   Constraints: 0 <= num1, num2 <= 105",
        "1625": "You are given a 0-indexed array nums consisting of n positive integers. The array nums is called alternating if: nums[i - 2] == nums[i], where 2 <= i <= n - 1. nums[i - 1] != nums[i], where 1 <= i <= n - 1. In one operation, you can choose an index i and change nums[i] into any positive integer. Return the minimum number of operations required to make the array alternating.   Example 1: Input: nums = [3,1,3,2,4,3] Output: 3 Explanation: One way to make the array alternating is by converting it to [3,1,3,1,3,1]. The number of operations required in this case is 3. It can be proven that it is not possible to make the array alternating in less than 3 operations.  Example 2: Input: nums = [1,2,2,2,2] Output: 2 Explanation: One way to make the array alternating is by converting it to [1,2,1,2,1]. The number of operations required in this case is 2. Note that the array cannot be converted to [2,2,2,2,2] because in this case nums[0] == nums[1] which violates the conditions of an alternating array.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105",
        "1626": "You are given an array of positive integers beans, where each integer represents the number of magic beans found in a particular magic bag. Remove any number of beans (possibly none) from each bag such that the number of beans in each remaining non-empty bag (still containing at least one bean) is equal. Once a bean has been removed from a bag, you are not allowed to return it to any of the bags. Return the minimum number of magic beans that you have to remove.   Example 1: Input: beans = [4,1,6,5] Output: 4 Explanation:  - We remove 1 bean from the bag with only 1 bean.   This results in the remaining bags: [4,0,6,5] - Then we remove 2 beans from the bag with 6 beans.   This results in the remaining bags: [4,0,4,5] - Then we remove 1 bean from the bag with 5 beans.   This results in the remaining bags: [4,0,4,4] We removed a total of 1 + 2 + 1 = 4 beans to make the remaining non-empty bags have an equal number of beans. There are no other solutions that remove 4 beans or fewer. Example 2: Input: beans = [2,10,3,2] Output: 7 Explanation: - We remove 2 beans from one of the bags with 2 beans.   This results in the remaining bags: [0,10,3,2] - Then we remove 2 beans from the other bag with 2 beans.   This results in the remaining bags: [0,10,3,0] - Then we remove 3 beans from the bag with 3 beans.    This results in the remaining bags: [0,10,0,0] We removed a total of 2 + 2 + 3 = 7 beans to make the remaining non-empty bags have an equal number of beans. There are no other solutions that removes 7 beans or fewer.   Constraints: 1 <= beans.length <= 105 1 <= beans[i] <= 105",
        "1627": "Given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) where 0 <= i < j < n, such that nums[i] == nums[j] and (i * j) is divisible by k.   Example 1: Input: nums = [3,1,2,2,2,1,3], k = 2 Output: 4 Explanation: There are 4 pairs that meet all the requirements: - nums[0] == nums[6], and 0 * 6 == 0, which is divisible by 2. - nums[2] == nums[3], and 2 * 3 == 6, which is divisible by 2. - nums[2] == nums[4], and 2 * 4 == 8, which is divisible by 2. - nums[3] == nums[4], and 3 * 4 == 12, which is divisible by 2. Example 2: Input: nums = [1,2,3,4], k = 1 Output: 0 Explanation: Since no value in nums is repeated, there are no pairs (i,j) that meet all the requirements.   Constraints: 1 <= nums.length <= 100 1 <= nums[i], k <= 100",
        "1628": "Given an integer num, return three consecutive integers (as a sorted array) that sum to num. If num cannot be expressed as the sum of three consecutive integers, return an empty array.   Example 1: Input: num = 33 Output: [10,11,12] Explanation: 33 can be expressed as 10 + 11 + 12 = 33. 10, 11, 12 are 3 consecutive integers, so we return [10, 11, 12]. Example 2: Input: num = 4 Output: [] Explanation: There is no way to express 4 as the sum of 3 consecutive integers.   Constraints: 0 <= num <= 1015",
        "1629": "You are given an integer finalSum. Split it into a sum of a maximum number of unique positive even integers. For example, given finalSum = 12, the following splits are valid (unique positive even integers summing up to finalSum): (12), (2 + 10), (2 + 4 + 6), and (4 + 8). Among them, (2 + 4 + 6) contains the maximum number of integers. Note that finalSum cannot be split into (2 + 2 + 4 + 4) as all the numbers should be unique. Return a list of integers that represent a valid split containing a maximum number of integers. If no valid split exists for finalSum, return an empty list. You may return the integers in any order.   Example 1: Input: finalSum = 12 Output: [2,4,6] Explanation: The following are valid splits: (12), (2 + 10), (2 + 4 + 6), and (4 + 8). (2 + 4 + 6) has the maximum number of integers, which is 3. Thus, we return [2,4,6]. Note that [2,6,4], [6,2,4], etc. are also accepted. Example 2: Input: finalSum = 7 Output: [] Explanation: There are no valid splits for the given finalSum. Thus, we return an empty array. Example 3: Input: finalSum = 28 Output: [6,8,2,12] Explanation: The following are valid splits: (2 + 26), (6 + 8 + 2 + 12), and (4 + 24).  (6 + 8 + 2 + 12) has the maximum number of integers, which is 4. Thus, we return [6,8,2,12]. Note that [10,2,4,12], [6,2,4,16], etc. are also accepted.   Constraints: 1 <= finalSum <= 1010",
        "1630": "You are given two 0-indexed arrays nums1 and nums2 of length n, both of which are permutations of [0, 1, ..., n - 1]. A good triplet is a set of 3 distinct values which are present in increasing order by position both in nums1 and nums2. In other words, if we consider pos1v as the index of the value v in nums1 and pos2v as the index of the value v in nums2, then a good triplet will be a set (x, y, z) where 0 <= x, y, z <= n - 1, such that pos1x < pos1y < pos1z and pos2x < pos2y < pos2z. Return the total number of good triplets.   Example 1: Input: nums1 = [2,0,1,3], nums2 = [0,1,2,3] Output: 1 Explanation:  There are 4 triplets (x,y,z) such that pos1x < pos1y < pos1z. They are (2,0,1), (2,0,3), (2,1,3), and (0,1,3).  Out of those triplets, only the triplet (0,1,3) satisfies pos2x < pos2y < pos2z. Hence, there is only 1 good triplet. Example 2: Input: nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3] Output: 4 Explanation: The 4 good triplets are (4,0,3), (4,0,2), (4,1,3), and (4,1,2).   Constraints: n == nums1.length == nums2.length 3 <= n <= 105 0 <= nums1[i], nums2[i] <= n - 1 nums1 and nums2 are permutations of [0, 1, ..., n - 1].",
        "1631": "Given a positive integer num, return the number of positive integers less than or equal to num whose digit sums are even. The digit sum of a positive integer is the sum of all its digits.   Example 1: Input: num = 4 Output: 2 Explanation: The only integers less than or equal to 4 whose digit sums are even are 2 and 4.     Example 2: Input: num = 30 Output: 14 Explanation: The 14 integers less than or equal to 30 whose digit sums are even are 2, 4, 6, 8, 11, 13, 15, 17, 19, 20, 22, 24, 26, and 28.   Constraints: 1 <= num <= 1000",
        "1632": "You are given the head of a linked list, which contains a series of integers separated by 0's. The beginning and end of the linked list will have Node.val == 0. For every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. The modified list should not contain any 0's. Return the head of the modified linked list.   Example 1: Input: head = [0,3,1,0,4,5,2,0] Output: [4,11] Explanation:  The above figure represents the given linked list. The modified list contains - The sum of the nodes marked in green: 3 + 1 = 4. - The sum of the nodes marked in red: 4 + 5 + 2 = 11. Example 2: Input: head = [0,1,0,3,0,2,2,0] Output: [1,3,4] Explanation:  The above figure represents the given linked list. The modified list contains - The sum of the nodes marked in green: 1 = 1. - The sum of the nodes marked in red: 3 = 3. - The sum of the nodes marked in yellow: 2 + 2 = 4.   Constraints: The number of nodes in the list is in the range [3, 2 * 105]. 0 <= Node.val <= 1000 There are no two consecutive nodes with Node.val == 0. The beginning and end of the linked list have Node.val == 0.",
        "1633": "You are given a string s and an integer repeatLimit. Construct a new string repeatLimitedString using the characters of s such that no letter appears more than repeatLimit times in a row. You do not have to use all characters from s. Return the lexicographically largest repeatLimitedString possible. A string a is lexicographically larger than a string b if in the first position where a and b differ, string a has a letter that appears later in the alphabet than the corresponding letter in b. If the first min(a.length, b.length) characters do not differ, then the longer string is the lexicographically larger one.   Example 1: Input: s = \"cczazcc\", repeatLimit = 3 Output: \"zzcccac\" Explanation: We use all of the characters from s to construct the repeatLimitedString \"zzcccac\". The letter 'a' appears at most 1 time in a row. The letter 'c' appears at most 3 times in a row. The letter 'z' appears at most 2 times in a row. Hence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString. The string is the lexicographically largest repeatLimitedString possible so we return \"zzcccac\". Note that the string \"zzcccca\" is lexicographically larger but the letter 'c' appears more than 3 times in a row, so it is not a valid repeatLimitedString. Example 2: Input: s = \"aababab\", repeatLimit = 2 Output: \"bbabaa\" Explanation: We use only some of the characters from s to construct the repeatLimitedString \"bbabaa\".  The letter 'a' appears at most 2 times in a row. The letter 'b' appears at most 2 times in a row. Hence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString. The string is the lexicographically largest repeatLimitedString possible so we return \"bbabaa\". Note that the string \"bbabaaa\" is lexicographically larger but the letter 'a' appears more than 2 times in a row, so it is not a valid repeatLimitedString.   Constraints: 1 <= repeatLimit <= s.length <= 105 s consists of lowercase English letters.",
        "1634": "Given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) such that: 0 <= i < j <= n - 1 and nums[i] * nums[j] is divisible by k.   Example 1: Input: nums = [1,2,3,4,5], k = 2 Output: 7 Explanation:  The 7 pairs of indices whose corresponding products are divisible by 2 are (0, 1), (0, 3), (1, 2), (1, 3), (1, 4), (2, 3), and (3, 4). Their products are 2, 4, 6, 8, 10, 12, and 20 respectively. Other pairs such as (0, 2) and (2, 4) have products 3 and 15 respectively, which are not divisible by 2.     Example 2: Input: nums = [1,2,3,4], k = 5 Output: 0 Explanation: There does not exist any pair of indices whose corresponding product is divisible by 5.   Constraints: 1 <= nums.length <= 105 1 <= nums[i], k <= 105",
        "1635": "You are given an array of strings words and a string pref. Return the number of strings in words that contain pref as a prefix. A prefix of a string s is any leading contiguous substring of s.   Example 1: Input: words = [\"pay\",\"attention\",\"practice\",\"attend\"], pref = \"at\" Output: 2 Explanation: The 2 strings that contain \"at\" as a prefix are: \"attention\" and \"attend\". Example 2: Input: words = [\"leetcode\",\"win\",\"loops\",\"success\"], pref = \"code\" Output: 0 Explanation: There are no strings that contain \"code\" as a prefix.   Constraints: 1 <= words.length <= 100 1 <= words[i].length, pref.length <= 100 words[i] and pref consist of lowercase English letters.",
        "1636": "You are given two strings s and t. In one step, you can append any character to either s or t. Return the minimum number of steps to make s and t anagrams of each other. An anagram of a string is a string that contains the same characters with a different (or the same) ordering.   Example 1: Input: s = \"leetcode\", t = \"coats\" Output: 7 Explanation:  - In 2 steps, we can append the letters in \"as\" onto s = \"leetcode\", forming s = \"leetcodeas\". - In 5 steps, we can append the letters in \"leede\" onto t = \"coats\", forming t = \"coatsleede\". \"leetcodeas\" and \"coatsleede\" are now anagrams of each other. We used a total of 2 + 5 = 7 steps. It can be shown that there is no way to make them anagrams of each other with less than 7 steps. Example 2: Input: s = \"night\", t = \"thing\" Output: 0 Explanation: The given strings are already anagrams of each other. Thus, we do not need any further steps.   Constraints: 1 <= s.length, t.length <= 2 * 105 s and t consist of lowercase English letters.",
        "1637": "You are given an array time where time[i] denotes the time taken by the ith bus to complete one trip. Each bus can make multiple trips successively; that is, the next trip can start immediately after completing the current trip. Also, each bus operates independently; that is, the trips of one bus do not influence the trips of any other bus. You are also given an integer totalTrips, which denotes the number of trips all buses should make in total. Return the minimum time required for all buses to complete at least totalTrips trips.   Example 1: Input: time = [1,2,3], totalTrips = 5 Output: 3 Explanation: - At time t = 1, the number of trips completed by each bus are [1,0,0].    The total number of trips completed is 1 + 0 + 0 = 1. - At time t = 2, the number of trips completed by each bus are [2,1,0].    The total number of trips completed is 2 + 1 + 0 = 3. - At time t = 3, the number of trips completed by each bus are [3,1,1].    The total number of trips completed is 3 + 1 + 1 = 5. So the minimum time needed for all buses to complete at least 5 trips is 3. Example 2: Input: time = [2], totalTrips = 1 Output: 2 Explanation: There is only one bus, and it will complete its first trip at t = 2. So the minimum time needed to complete 1 trip is 2.   Constraints: 1 <= time.length <= 105 1 <= time[i], totalTrips <= 107",
        "1638": "You are given a 0-indexed 2D integer array tires where tires[i] = [fi, ri] indicates that the ith tire can finish its xth successive lap in fi * ri(x-1) seconds. For example, if fi = 3 and ri = 2, then the tire would finish its 1st lap in 3 seconds, its 2nd lap in 3 * 2 = 6 seconds, its 3rd lap in 3 * 22 = 12 seconds, etc. You are also given an integer changeTime and an integer numLaps. The race consists of numLaps laps and you may start the race with any tire. You have an unlimited supply of each tire and after every lap, you may change to any given tire (including the current tire type) if you wait changeTime seconds. Return the minimum time to finish the race.   Example 1: Input: tires = [[2,3],[3,4]], changeTime = 5, numLaps = 4 Output: 21 Explanation:  Lap 1: Start with tire 0 and finish the lap in 2 seconds. Lap 2: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds. Lap 3: Change tires to a new tire 0 for 5 seconds and then finish the lap in another 2 seconds. Lap 4: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds. Total time = 2 + 6 + 5 + 2 + 6 = 21 seconds. The minimum time to complete the race is 21 seconds. Example 2: Input: tires = [[1,10],[2,2],[3,4]], changeTime = 6, numLaps = 5 Output: 25 Explanation:  Lap 1: Start with tire 1 and finish the lap in 2 seconds. Lap 2: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds. Lap 3: Change tires to a new tire 1 for 6 seconds and then finish the lap in another 2 seconds. Lap 4: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds. Lap 5: Change tires to tire 0 for 6 seconds then finish the lap in another 1 second. Total time = 2 + 4 + 6 + 2 + 4 + 6 + 1 = 25 seconds. The minimum time to complete the race is 25 seconds.    Constraints: 1 <= tires.length <= 105 tires[i].length == 2 1 <= fi, changeTime <= 105 2 <= ri <= 105 1 <= numLaps <= 1000",
        "1639": "You are given a 0-indexed integer array nums. You are also given an integer key, which is present in nums. For every unique integer target in nums, count the number of times target immediately follows an occurrence of key in nums. In other words, count the number of indices i such that: 0 <= i <= nums.length - 2, nums[i] == key and, nums[i + 1] == target. Return the target with the maximum count. The test cases will be generated such that the target with maximum count is unique.   Example 1: Input: nums = [1,100,200,1,100], key = 1 Output: 100 Explanation: For target = 100, there are 2 occurrences at indices 1 and 4 which follow an occurrence of key. No other integers follow an occurrence of key, so we return 100. Example 2: Input: nums = [2,2,2,2,3], key = 2 Output: 2 Explanation: For target = 2, there are 3 occurrences at indices 1, 2, and 3 which follow an occurrence of key. For target = 3, there is only one occurrence at index 4 which follows an occurrence of key. target = 2 has the maximum number of occurrences following an occurrence of key, so we return 2.   Constraints: 2 <= nums.length <= 1000 1 <= nums[i] <= 1000 The test cases will be generated such that the answer is unique.",
        "1640": "You are given a 0-indexed integer array mapping which represents the mapping rule of a shuffled decimal system. mapping[i] = j means digit i should be mapped to digit j in this system. The mapped value of an integer is the new integer obtained by replacing each occurrence of digit i in the integer with mapping[i] for all 0 <= i <= 9. You are also given another integer array nums. Return the array nums sorted in non-decreasing order based on the mapped values of its elements. Notes: Elements with the same mapped values should appear in the same relative order as in the input. The elements of nums should only be sorted based on their mapped values and not be replaced by them.   Example 1: Input: mapping = [8,9,4,0,2,1,3,5,7,6], nums = [991,338,38] Output: [338,38,991] Explanation:  Map the number 991 as follows: 1. mapping[9] = 6, so all occurrences of the digit 9 will become 6. 2. mapping[1] = 9, so all occurrences of the digit 1 will become 9. Therefore, the mapped value of 991 is 669. 338 maps to 007, or 7 after removing the leading zeros. 38 maps to 07, which is also 7 after removing leading zeros. Since 338 and 38 share the same mapped value, they should remain in the same relative order, so 338 comes before 38. Thus, the sorted array is [338,38,991]. Example 2: Input: mapping = [0,1,2,3,4,5,6,7,8,9], nums = [789,456,123] Output: [123,456,789] Explanation: 789 maps to 789, 456 maps to 456, and 123 maps to 123. Thus, the sorted array is [123,456,789].   Constraints: mapping.length == 10 0 <= mapping[i] <= 9 All the values of mapping[i] are unique. 1 <= nums.length <= 3 * 104 0 <= nums[i] < 109",
        "1641": "You are given a positive integer n representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from 0 to n - 1 (inclusive). You are also given a 2D integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph. Return a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order. A node u is an ancestor of another node v if u can reach v via a set of edges.   Example 1: Input: n = 8, edgeList = [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]] Output: [[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]] Explanation: The above diagram represents the input graph. - Nodes 0, 1, and 2 do not have any ancestors. - Node 3 has two ancestors 0 and 1. - Node 4 has two ancestors 0 and 2. - Node 5 has three ancestors 0, 1, and 3. - Node 6 has five ancestors 0, 1, 2, 3, and 4. - Node 7 has four ancestors 0, 1, 2, and 3. Example 2: Input: n = 5, edgeList = [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]] Output: [[],[0],[0,1],[0,1,2],[0,1,2,3]] Explanation: The above diagram represents the input graph. - Node 0 does not have any ancestor. - Node 1 has one ancestor 0. - Node 2 has two ancestors 0 and 1. - Node 3 has three ancestors 0, 1, and 2. - Node 4 has four ancestors 0, 1, 2, and 3.   Constraints: 1 <= n <= 1000 0 <= edges.length <= min(2000, n * (n - 1) / 2) edges[i].length == 2 0 <= fromi, toi <= n - 1 fromi != toi There are no duplicate edges. The graph is directed and acyclic.",
        "1642": "You are given a string s consisting only of lowercase English letters. In one move, you can select any two adjacent characters of s and swap them. Return the minimum number of moves needed to make s a palindrome. Note that the input will be generated such that s can always be converted to a palindrome.   Example 1: Input: s = \"aabb\" Output: 2 Explanation: We can obtain two palindromes from s, \"abba\" and \"baab\".  - We can obtain \"abba\" from s in 2 moves: \"aabb\" -> \"abab\" -> \"abba\". - We can obtain \"baab\" from s in 2 moves: \"aabb\" -> \"abab\" -> \"baab\". Thus, the minimum number of moves needed to make s a palindrome is 2. Example 2: Input: s = \"letelt\" Output: 2 Explanation: One of the palindromes we can obtain from s in 2 moves is \"lettel\". One of the ways we can obtain it is \"letelt\" -> \"letetl\" -> \"lettel\". Other palindromes such as \"tleelt\" can also be obtained in 2 moves. It can be shown that it is not possible to obtain a palindrome in less than 2 moves.   Constraints: 1 <= s.length <= 2000 s consists only of lowercase English letters. s can be converted to a palindrome using a finite number of moves.",
        "1643": "A cell (r, c) of an excel sheet is represented as a string \"<col><row>\" where: <col> denotes the column number c of the cell. It is represented by alphabetical letters. For example, the 1st column is denoted by 'A', the 2nd by 'B', the 3rd by 'C', and so on. <row> is the row number r of the cell. The rth row is represented by the integer r. You are given a string s in the format \"<col1><row1>:<col2><row2>\", where <col1> represents the column c1, <row1> represents the row r1, <col2> represents the column c2, and <row2> represents the row r2, such that r1 <= r2 and c1 <= c2. Return the list of cells (x, y) such that r1 <= x <= r2 and c1 <= y <= c2. The cells should be represented as strings in the format mentioned above and be sorted in non-decreasing order first by columns and then by rows.   Example 1: Input: s = \"K1:L2\" Output: [\"K1\",\"K2\",\"L1\",\"L2\"] Explanation: The above diagram shows the cells which should be present in the list. The red arrows denote the order in which the cells should be presented. Example 2: Input: s = \"A1:F1\" Output: [\"A1\",\"B1\",\"C1\",\"D1\",\"E1\",\"F1\"] Explanation: The above diagram shows the cells which should be present in the list. The red arrow denotes the order in which the cells should be presented.   Constraints: s.length == 5 'A' <= s[0] <= s[3] <= 'Z' '1' <= s[1] <= s[4] <= '9' s consists of uppercase English letters, digits and ':'.",
        "1644": "You are given a 2D integer array descriptions where descriptions[i] = [parenti, childi, isLefti] indicates that parenti is the parent of childi in a binary tree of unique values. Furthermore, If isLefti == 1, then childi is the left child of parenti. If isLefti == 0, then childi is the right child of parenti. Construct the binary tree described by descriptions and return its root. The test cases will be generated such that the binary tree is valid.   Example 1: Input: descriptions = [[20,15,1],[20,17,0],[50,20,1],[50,80,0],[80,19,1]] Output: [50,20,80,15,17,19] Explanation: The root node is the node with value 50 since it has no parent. The resulting binary tree is shown in the diagram. Example 2: Input: descriptions = [[1,2,1],[2,3,0],[3,4,1]] Output: [1,2,null,null,3,4] Explanation: The root node is the node with value 1 since it has no parent. The resulting binary tree is shown in the diagram.   Constraints: 1 <= descriptions.length <= 104 descriptions[i].length == 3 1 <= parenti, childi <= 105 0 <= isLefti <= 1 The binary tree described by descriptions is valid.",
        "1645": "You are given an array of integers nums. Perform the following steps: Find any two adjacent numbers in nums that are non-coprime. If no such numbers are found, stop the process. Otherwise, delete the two numbers and replace them with their LCM (Least Common Multiple). Repeat this process as long as you keep finding two adjacent non-coprime numbers. Return the final modified array. It can be shown that replacing adjacent non-coprime numbers in any arbitrary order will lead to the same result. The test cases are generated such that the values in the final array are less than or equal to 108. Two values x and y are non-coprime if GCD(x, y) > 1 where GCD(x, y) is the Greatest Common Divisor of x and y.   Example 1: Input: nums = [6,4,3,2,7,6,2] Output: [12,7,6] Explanation:  - (6, 4) are non-coprime with LCM(6, 4) = 12. Now, nums = [12,3,2,7,6,2]. - (12, 3) are non-coprime with LCM(12, 3) = 12. Now, nums = [12,2,7,6,2]. - (12, 2) are non-coprime with LCM(12, 2) = 12. Now, nums = [12,7,6,2]. - (6, 2) are non-coprime with LCM(6, 2) = 6. Now, nums = [12,7,6]. There are no more adjacent non-coprime numbers in nums. Thus, the final modified array is [12,7,6]. Note that there are other ways to obtain the same resultant array. Example 2: Input: nums = [2,2,1,1,3,3,3] Output: [2,1,1,3] Explanation:  - (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,3,3]. - (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,3]. - (2, 2) are non-coprime with LCM(2, 2) = 2. Now, nums = [2,1,1,3]. There are no more adjacent non-coprime numbers in nums. Thus, the final modified array is [2,1,1,3]. Note that there are other ways to obtain the same resultant array.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105 The test cases are generated such that the values in the final array are less than or equal to 108.",
        "1646": "You are given a 0-indexed integer array nums and two integers key and k. A k-distant index is an index i of nums for which there exists at least one index j such that |i - j| <= k and nums[j] == key. Return a list of all k-distant indices sorted in increasing order.   Example 1: Input: nums = [3,4,9,1,3,9,5], key = 9, k = 1 Output: [1,2,3,4,5,6] Explanation: Here, nums[2] == key and nums[5] == key. - For index 0, |0 - 2| > k and |0 - 5| > k, so there is no j where |0 - j| <= k and nums[j] == key. Thus, 0 is not a k-distant index. - For index 1, |1 - 2| <= k and nums[2] == key, so 1 is a k-distant index. - For index 2, |2 - 2| <= k and nums[2] == key, so 2 is a k-distant index. - For index 3, |3 - 2| <= k and nums[2] == key, so 3 is a k-distant index. - For index 4, |4 - 5| <= k and nums[5] == key, so 4 is a k-distant index. - For index 5, |5 - 5| <= k and nums[5] == key, so 5 is a k-distant index. - For index 6, |6 - 5| <= k and nums[5] == key, so 6 is a k-distant index. Thus, we return [1,2,3,4,5,6] which is sorted in increasing order.  Example 2: Input: nums = [2,2,2,2,2], key = 2, k = 2 Output: [0,1,2,3,4] Explanation: For all indices i in nums, there exists some index j such that |i - j| <= k and nums[j] == key, so every index is a k-distant index.  Hence, we return [0,1,2,3,4].   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 1000 key is an integer from the array nums. 1 <= k <= nums.length",
        "1647": "There is an n x n 0-indexed grid with some artifacts buried in it. You are given the integer n and a 0-indexed 2D integer array artifacts describing the positions of the rectangular artifacts where artifacts[i] = [r1i, c1i, r2i, c2i] denotes that the ith artifact is buried in the subgrid where: (r1i, c1i) is the coordinate of the top-left cell of the ith artifact and (r2i, c2i) is the coordinate of the bottom-right cell of the ith artifact. You will excavate some cells of the grid and remove all the mud from them. If the cell has a part of an artifact buried underneath, it will be uncovered. If all the parts of an artifact are uncovered, you can extract it. Given a 0-indexed 2D integer array dig where dig[i] = [ri, ci] indicates that you will excavate the cell (ri, ci), return the number of artifacts that you can extract. The test cases are generated such that: No two artifacts overlap. Each artifact only covers at most 4 cells. The entries of dig are unique.   Example 1: Input: n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1]] Output: 1 Explanation:  The different colors represent different artifacts. Excavated cells are labeled with a 'D' in the grid. There is 1 artifact that can be extracted, namely the red artifact. The blue artifact has one part in cell (1,1) which remains uncovered, so we cannot extract it. Thus, we return 1. Example 2: Input: n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1],[1,1]] Output: 2 Explanation: Both the red and blue artifacts have all parts uncovered (labeled with a 'D') and can be extracted, so we return 2.    Constraints: 1 <= n <= 1000 1 <= artifacts.length, dig.length <= min(n2, 105) artifacts[i].length == 4 dig[i].length == 2 0 <= r1i, c1i, r2i, c2i, ri, ci <= n - 1 r1i <= r2i c1i <= c2i No two artifacts will overlap. The number of cells covered by an artifact is at most 4. The entries of dig are unique.",
        "1648": "You are given a 0-indexed integer array nums representing the contents of a pile, where nums[0] is the topmost element of the pile. In one move, you can perform either of the following: If the pile is not empty, remove the topmost element of the pile. If there are one or more removed elements, add any one of them back onto the pile. This element becomes the new topmost element. You are also given an integer k, which denotes the total number of moves to be made. Return the maximum value of the topmost element of the pile possible after exactly k moves. In case it is not possible to obtain a non-empty pile after k moves, return -1.   Example 1: Input: nums = [5,2,2,4,0,6], k = 4 Output: 5 Explanation: One of the ways we can end with 5 at the top of the pile after 4 moves is as follows: - Step 1: Remove the topmost element = 5. The pile becomes [2,2,4,0,6]. - Step 2: Remove the topmost element = 2. The pile becomes [2,4,0,6]. - Step 3: Remove the topmost element = 2. The pile becomes [4,0,6]. - Step 4: Add 5 back onto the pile. The pile becomes [5,4,0,6]. Note that this is not the only way to end with 5 at the top of the pile. It can be shown that 5 is the largest answer possible after 4 moves. Example 2: Input: nums = [2], k = 1 Output: -1 Explanation:  In the first move, our only option is to pop the topmost element of the pile. Since it is not possible to obtain a non-empty pile after one move, we return -1.   Constraints: 1 <= nums.length <= 105 0 <= nums[i], k <= 109",
        "1649": "You are given an integer n denoting the number of nodes of a weighted directed graph. The nodes are numbered from 0 to n - 1. You are also given a 2D integer array edges where edges[i] = [fromi, toi, weighti] denotes that there exists a directed edge from fromi to toi with weight weighti. Lastly, you are given three distinct integers src1, src2, and dest denoting three distinct nodes of the graph. Return the minimum weight of a subgraph of the graph such that it is possible to reach dest from both src1 and src2 via a set of edges of this subgraph. In case such a subgraph does not exist, return -1. A subgraph is a graph whose vertices and edges are subsets of the original graph. The weight of a subgraph is the sum of weights of its constituent edges.   Example 1: Input: n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5 Output: 9 Explanation: The above figure represents the input graph. The blue edges represent one of the subgraphs that yield the optimal answer. Note that the subgraph [[1,0,3],[0,5,6]] also yields the optimal answer. It is not possible to get a subgraph with less weight satisfying all the constraints. Example 2: Input: n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2 Output: -1 Explanation: The above figure represents the input graph. It can be seen that there does not exist any path from node 1 to node 2, hence there are no subgraphs satisfying all the constraints.   Constraints: 3 <= n <= 105 0 <= edges.length <= 105 edges[i].length == 3 0 <= fromi, toi, src1, src2, dest <= n - 1 fromi != toi src1, src2, and dest are pairwise distinct. 1 <= weight[i] <= 105",
        "1650": "You are given an integer array nums consisting of 2 * n integers. You need to divide nums into n pairs such that: Each element belongs to exactly one pair. The elements present in a pair are equal. Return true if nums can be divided into n pairs, otherwise return false.   Example 1: Input: nums = [3,2,3,2,2,2] Output: true Explanation:  There are 6 elements in nums, so they should be divided into 6 / 2 = 3 pairs. If nums is divided into the pairs (2, 2), (3, 3), and (2, 2), it will satisfy all the conditions. Example 2: Input: nums = [1,2,3,4] Output: false Explanation:  There is no way to divide nums into 4 / 2 = 2 pairs such that the pairs satisfy every condition.   Constraints: nums.length == 2 * n 1 <= n <= 500 1 <= nums[i] <= 500",
        "1651": "You are given a 0-indexed string text and another 0-indexed string pattern of length 2, both of which consist of only lowercase English letters. You can add either pattern[0] or pattern[1] anywhere in text exactly once. Note that the character can be added even at the beginning or at the end of text. Return the maximum number of times pattern can occur as a subsequence of the modified text. A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.   Example 1: Input: text = \"abdcdbc\", pattern = \"ac\" Output: 4 Explanation: If we add pattern[0] = 'a' in between text[1] and text[2], we get \"abadcdbc\". Now, the number of times \"ac\" occurs as a subsequence is 4. Some other strings which have 4 subsequences \"ac\" after adding a character to text are \"aabdcdbc\" and \"abdacdbc\". However, strings such as \"abdcadbc\", \"abdccdbc\", and \"abdcdbcc\", although obtainable, have only 3 subsequences \"ac\" and are thus suboptimal. It can be shown that it is not possible to get more than 4 subsequences \"ac\" by adding only one character. Example 2: Input: text = \"aabb\", pattern = \"ab\" Output: 6 Explanation: Some of the strings which can be obtained from text and have 6 subsequences \"ab\" are \"aaabb\", \"aaabb\", and \"aabbb\".   Constraints: 1 <= text.length <= 105 pattern.length == 2 text and pattern consist only of lowercase English letters.",
        "1652": "You are given an array nums of positive integers. In one operation, you can choose any number from nums and reduce it to exactly half the number. (Note that you may choose this reduced number in future operations.) Return the minimum number of operations to reduce the sum of nums by at least half.   Example 1: Input: nums = [5,19,8,1] Output: 3 Explanation: The initial sum of nums is equal to 5 + 19 + 8 + 1 = 33. The following is one of the ways to reduce the sum by at least half: Pick the number 19 and reduce it to 9.5. Pick the number 9.5 and reduce it to 4.75. Pick the number 8 and reduce it to 4. The final array is [5, 4.75, 4, 1] with a total sum of 5 + 4.75 + 4 + 1 = 14.75.  The sum of nums has been reduced by 33 - 14.75 = 18.25, which is at least half of the initial sum, 18.25 >= 33/2 = 16.5. Overall, 3 operations were used so we return 3. It can be shown that we cannot reduce the sum by at least half in less than 3 operations. Example 2: Input: nums = [3,8,20] Output: 3 Explanation: The initial sum of nums is equal to 3 + 8 + 20 = 31. The following is one of the ways to reduce the sum by at least half: Pick the number 20 and reduce it to 10. Pick the number 10 and reduce it to 5. Pick the number 3 and reduce it to 1.5. The final array is [1.5, 8, 5] with a total sum of 1.5 + 8 + 5 = 14.5.  The sum of nums has been reduced by 31 - 14.5 = 16.5, which is at least half of the initial sum, 16.5 >= 31/2 = 15.5. Overall, 3 operations were used so we return 3. It can be shown that we cannot reduce the sum by at least half in less than 3 operations.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 107",
        "1653": "You are given a 0-indexed binary string floor, which represents the colors of tiles on a floor: floor[i] = '0' denotes that the ith tile of the floor is colored black. On the other hand, floor[i] = '1' denotes that the ith tile of the floor is colored white. You are also given numCarpets and carpetLen. You have numCarpets black carpets, each of length carpetLen tiles. Cover the tiles with the given carpets such that the number of white tiles still visible is minimum. Carpets may overlap one another. Return the minimum number of white tiles still visible.   Example 1: Input: floor = \"10110101\", numCarpets = 2, carpetLen = 2 Output: 2 Explanation:  The figure above shows one way of covering the tiles with the carpets such that only 2 white tiles are visible. No other way of covering the tiles with the carpets can leave less than 2 white tiles visible. Example 2: Input: floor = \"11111\", numCarpets = 2, carpetLen = 3 Output: 0 Explanation:  The figure above shows one way of covering the tiles with the carpets such that no white tiles are visible. Note that the carpets are able to overlap one another.   Constraints: 1 <= carpetLen <= floor.length <= 1000 floor[i] is either '0' or '1'. 1 <= numCarpets <= 1000",
        "1654": "You are given a 0-indexed integer array nums. An index i is part of a hill in nums if the closest non-equal neighbors of i are smaller than nums[i]. Similarly, an index i is part of a valley in nums if the closest non-equal neighbors of i are larger than nums[i]. Adjacent indices i and j are part of the same hill or valley if nums[i] == nums[j]. Note that for an index to be part of a hill or valley, it must have a non-equal neighbor on both the left and right of the index. Return the number of hills and valleys in nums.   Example 1: Input: nums = [2,4,1,1,6,5] Output: 3 Explanation: At index 0: There is no non-equal neighbor of 2 on the left, so index 0 is neither a hill nor a valley. At index 1: The closest non-equal neighbors of 4 are 2 and 1. Since 4 > 2 and 4 > 1, index 1 is a hill.  At index 2: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 2 is a valley. At index 3: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 3 is a valley, but note that it is part of the same valley as index 2. At index 4: The closest non-equal neighbors of 6 are 1 and 5. Since 6 > 1 and 6 > 5, index 4 is a hill. At index 5: There is no non-equal neighbor of 5 on the right, so index 5 is neither a hill nor a valley.  There are 3 hills and valleys so we return 3. Example 2: Input: nums = [6,6,5,5,4,1] Output: 0 Explanation: At index 0: There is no non-equal neighbor of 6 on the left, so index 0 is neither a hill nor a valley. At index 1: There is no non-equal neighbor of 6 on the left, so index 1 is neither a hill nor a valley. At index 2: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 2 is neither a hill nor a valley. At index 3: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 3 is neither a hill nor a valley. At index 4: The closest non-equal neighbors of 4 are 5 and 1. Since 4 < 5 and 4 > 1, index 4 is neither a hill nor a valley. At index 5: There is no non-equal neighbor of 1 on the right, so index 5 is neither a hill nor a valley. There are 0 hills and valleys so we return 0.   Constraints: 3 <= nums.length <= 100 1 <= nums[i] <= 100",
        "1655": "There are n cars on an infinitely long road. The cars are numbered from 0 to n - 1 from left to right and each car is present at a unique point. You are given a 0-indexed string directions of length n. directions[i] can be either 'L', 'R', or 'S' denoting whether the ith car is moving towards the left, towards the right, or staying at its current point respectively. Each moving car has the same speed. The number of collisions can be calculated as follows: When two cars moving in opposite directions collide with each other, the number of collisions increases by 2. When a moving car collides with a stationary car, the number of collisions increases by 1. After a collision, the cars involved can no longer move and will stay at the point where they collided. Other than that, cars cannot change their state or direction of motion. Return the total number of collisions that will happen on the road.   Example 1: Input: directions = \"RLRSLL\" Output: 5 Explanation: The collisions that will happen on the road are: - Cars 0 and 1 will collide with each other. Since they are moving in opposite directions, the number of collisions becomes 0 + 2 = 2. - Cars 2 and 3 will collide with each other. Since car 3 is stationary, the number of collisions becomes 2 + 1 = 3. - Cars 3 and 4 will collide with each other. Since car 3 is stationary, the number of collisions becomes 3 + 1 = 4. - Cars 4 and 5 will collide with each other. After car 4 collides with car 3, it will stay at the point of collision and get hit by car 5. The number of collisions becomes 4 + 1 = 5. Thus, the total number of collisions that will happen on the road is 5.  Example 2: Input: directions = \"LLRR\" Output: 0 Explanation: No cars will collide with each other. Thus, the total number of collisions that will happen on the road is 0.   Constraints: 1 <= directions.length <= 105 directions[i] is either 'L', 'R', or 'S'.",
        "1656": "Alice and Bob are opponents in an archery competition. The competition has set the following rules: Alice first shoots numArrows arrows and then Bob shoots numArrows arrows. The points are then calculated as follows: The target has integer scoring sections ranging from 0 to 11 inclusive. For each section of the target with score k (in between 0 to 11), say Alice and Bob have shot ak and bk arrows on that section respectively. If ak >= bk, then Alice takes k points. If ak < bk, then Bob takes k points. However, if ak == bk == 0, then nobody takes k points. For example, if Alice and Bob both shot 2 arrows on the section with score 11, then Alice takes 11 points. On the other hand, if Alice shot 0 arrows on the section with score 11 and Bob shot 2 arrows on that same section, then Bob takes 11 points. You are given the integer numArrows and an integer array aliceArrows of size 12, which represents the number of arrows Alice shot on each scoring section from 0 to 11. Now, Bob wants to maximize the total number of points he can obtain. Return the array bobArrows which represents the number of arrows Bob shot on each scoring section from 0 to 11. The sum of the values in bobArrows should equal numArrows. If there are multiple ways for Bob to earn the maximum total points, return any one of them.   Example 1: Input: numArrows = 9, aliceArrows = [1,1,0,1,0,0,2,1,0,1,2,0] Output: [0,0,0,0,1,1,0,0,1,2,3,1] Explanation: The table above shows how the competition is scored.  Bob earns a total point of 4 + 5 + 8 + 9 + 10 + 11 = 47. It can be shown that Bob cannot obtain a score higher than 47 points. Example 2: Input: numArrows = 3, aliceArrows = [0,0,1,0,0,0,0,0,0,0,0,2] Output: [0,0,0,0,0,0,0,0,1,1,1,0] Explanation: The table above shows how the competition is scored. Bob earns a total point of 8 + 9 + 10 = 27. It can be shown that Bob cannot obtain a score higher than 27 points.   Constraints: 1 <= numArrows <= 105 aliceArrows.length == bobArrows.length == 12 0 <= aliceArrows[i], bobArrows[i] <= numArrows sum(aliceArrows[i]) == numArrows",
        "1657": "You are given a 0-indexed string s. You are also given a 0-indexed string queryCharacters of length k and a 0-indexed array of integer indices queryIndices of length k, both of which are used to describe k queries. The ith query updates the character in s at index queryIndices[i] to the character queryCharacters[i]. Return an array lengths of length k where lengths[i] is the length of the longest substring of s consisting of only one repeating character after the ith query is performed.   Example 1: Input: s = \"babacc\", queryCharacters = \"bcb\", queryIndices = [1,3,3] Output: [3,3,4] Explanation:  - 1st query updates s = \"bbbacc\". The longest substring consisting of one repeating character is \"bbb\" with length 3. - 2nd query updates s = \"bbbccc\".    The longest substring consisting of one repeating character can be \"bbb\" or \"ccc\" with length 3. - 3rd query updates s = \"bbbbcc\". The longest substring consisting of one repeating character is \"bbbb\" with length 4. Thus, we return [3,3,4]. Example 2: Input: s = \"abyzz\", queryCharacters = \"aa\", queryIndices = [2,1] Output: [2,3] Explanation: - 1st query updates s = \"abazz\". The longest substring consisting of one repeating character is \"zz\" with length 2. - 2nd query updates s = \"aaazz\". The longest substring consisting of one repeating character is \"aaa\" with length 3. Thus, we return [2,3].   Constraints: 1 <= s.length <= 105 s consists of lowercase English letters. k == queryCharacters.length == queryIndices.length 1 <= k <= 105 queryCharacters consists of lowercase English letters. 0 <= queryIndices[i] < s.length",
        "1658": "Given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where: answer[0] is a list of all distinct integers in nums1 which are not present in nums2. answer[1] is a list of all distinct integers in nums2 which are not present in nums1. Note that the integers in the lists may be returned in any order.   Example 1: Input: nums1 = [1,2,3], nums2 = [2,4,6] Output: [[1,3],[4,6]] Explanation: For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3]. For nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6]. Example 2: Input: nums1 = [1,2,3,3], nums2 = [1,1,2,2] Output: [[3],[]] Explanation: For nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3]. Every integer in nums2 is present in nums1. Therefore, answer[1] = [].   Constraints: 1 <= nums1.length, nums2.length <= 1000 -1000 <= nums1[i], nums2[i] <= 1000",
        "1659": "Given an integer array queries and a positive integer intLength, return an array answer where answer[i] is either the queries[i]th smallest positive palindrome of length intLength or -1 if no such palindrome exists. A palindrome is a number that reads the same backwards and forwards. Palindromes cannot have leading zeros.   Example 1: Input: queries = [1,2,3,4,5,90], intLength = 3 Output: [101,111,121,131,141,999] Explanation: The first few palindromes of length 3 are: 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, ... The 90th palindrome of length 3 is 999. Example 2: Input: queries = [2,4,6], intLength = 4 Output: [1111,1331,1551] Explanation: The first six palindromes of length 4 are: 1001, 1111, 1221, 1331, 1441, and 1551.   Constraints: 1 <= queries.length <= 5 * 104 1 <= queries[i] <= 109 1 <= intLength <= 15",
        "1660": "There are n piles of coins on a table. Each pile consists of a positive number of coins of assorted denominations. In one move, you can choose any coin on top of any pile, remove it, and add it to your wallet. Given a list piles, where piles[i] is a list of integers denoting the composition of the ith pile from top to bottom, and a positive integer k, return the maximum total value of coins you can have in your wallet if you choose exactly k coins optimally.   Example 1: Input: piles = [[1,100,3],[7,8,9]], k = 2 Output: 101 Explanation: The above diagram shows the different ways we can choose k coins. The maximum total we can obtain is 101. Example 2: Input: piles = [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k = 7 Output: 706 Explanation: The maximum total can be obtained if we choose all coins from the last pile.   Constraints: n == piles.length 1 <= n <= 1000 1 <= piles[i][j] <= 105 1 <= k <= sum(piles[i].length) <= 2000",
        "1661": "A bit flip of a number x is choosing a bit in the binary representation of x and flipping it from either 0 to 1 or 1 to 0. For example, for x = 7, the binary representation is 111 and we may choose any bit (including any leading zeros not shown) and flip it. We can flip the first bit from the right to get 110, flip the second bit from the right to get 101, flip the fifth bit from the right (a leading zero) to get 10111, etc. Given two integers start and goal, return the minimum number of bit flips to convert start to goal.   Example 1: Input: start = 10, goal = 7 Output: 3 Explanation: The binary representation of 10 and 7 are 1010 and 0111 respectively. We can convert 10 to 7 in 3 steps: - Flip the first bit from the right: 1010 -> 1011. - Flip the third bit from the right: 1011 -> 1111. - Flip the fourth bit from the right: 1111 -> 0111. It can be shown we cannot convert 10 to 7 in less than 3 steps. Hence, we return 3. Example 2: Input: start = 3, goal = 4 Output: 3 Explanation: The binary representation of 3 and 4 are 011 and 100 respectively. We can convert 3 to 4 in 3 steps: - Flip the first bit from the right: 011 -> 010. - Flip the second bit from the right: 010 -> 000. - Flip the third bit from the right: 000 -> 100. It can be shown we cannot convert 3 to 4 in less than 3 steps. Hence, we return 3.   Constraints: 0 <= start, goal <= 109   Note: This question is the same as 461: Hamming Distance.",
        "1662": "You are given a 0-indexed binary string s which represents the types of buildings along a street where: s[i] = '0' denotes that the ith building is an office and s[i] = '1' denotes that the ith building is a restaurant. As a city official, you would like to select 3 buildings for random inspection. However, to ensure variety, no two consecutive buildings out of the selected buildings can be of the same type. For example, given s = \"001101\", we cannot select the 1st, 3rd, and 5th buildings as that would form \"011\" which is not allowed due to having two consecutive buildings of the same type. Return the number of valid ways to select 3 buildings.   Example 1: Input: s = \"001101\" Output: 6 Explanation:  The following sets of indices selected are valid: - [0,2,4] from \"001101\" forms \"010\" - [0,3,4] from \"001101\" forms \"010\" - [1,2,4] from \"001101\" forms \"010\" - [1,3,4] from \"001101\" forms \"010\" - [2,4,5] from \"001101\" forms \"101\" - [3,4,5] from \"001101\" forms \"101\" No other selection is valid. Thus, there are 6 total ways. Example 2: Input: s = \"11100\" Output: 0 Explanation: It can be shown that there are no valid selections.   Constraints: 3 <= s.length <= 105 s[i] is either '0' or '1'.",
        "1663": "You are building a string s of length n one character at a time, prepending each new character to the front of the string. The strings are labeled from 1 to n, where the string with length i is labeled si. For example, for s = \"abaca\", s1 == \"a\", s2 == \"ca\", s3 == \"aca\", etc. The score of si is the length of the longest common prefix between si and sn (Note that s == sn). Given the final string s, return the sum of the score of every si.   Example 1: Input: s = \"babab\" Output: 9 Explanation: For s1 == \"b\", the longest common prefix is \"b\" which has a score of 1. For s2 == \"ab\", there is no common prefix so the score is 0. For s3 == \"bab\", the longest common prefix is \"bab\" which has a score of 3. For s4 == \"abab\", there is no common prefix so the score is 0. For s5 == \"babab\", the longest common prefix is \"babab\" which has a score of 5. The sum of the scores is 1 + 0 + 3 + 0 + 5 = 9, so we return 9. Example 2: Input: s = \"azbazbzaz\" Output: 14 Explanation:  For s2 == \"az\", the longest common prefix is \"az\" which has a score of 2. For s6 == \"azbzaz\", the longest common prefix is \"azb\" which has a score of 3. For s9 == \"azbazbzaz\", the longest common prefix is \"azbazbzaz\" which has a score of 9. For all other si, the score is 0. The sum of the scores is 2 + 3 + 9 = 14, so we return 14.   Constraints: 1 <= s.length <= 105 s consists of lowercase English letters.",
        "1664": "You are given two strings current and correct representing two 24-hour times. 24-hour times are formatted as \"HH:MM\", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59. In one operation you can increase the time current by 1, 5, 15, or 60 minutes. You can perform this operation any number of times. Return the minimum number of operations needed to convert current to correct.   Example 1: Input: current = \"02:30\", correct = \"04:35\" Output: 3 Explanation: We can convert current to correct in 3 operations as follows: - Add 60 minutes to current. current becomes \"03:30\". - Add 60 minutes to current. current becomes \"04:30\". - Add 5 minutes to current. current becomes \"04:35\". It can be proven that it is not possible to convert current to correct in fewer than 3 operations. Example 2: Input: current = \"11:00\", correct = \"11:01\" Output: 1 Explanation: We only have to add one minute to current, so the minimum number of operations needed is 1.   Constraints: current and correct are in the format \"HH:MM\" current <= correct",
        "1665": "You are given an integer array matches where matches[i] = [winneri, loseri] indicates that the player winneri defeated player loseri in a match. Return a list answer of size 2 where: answer[0] is a list of all players that have not lost any matches. answer[1] is a list of all players that have lost exactly one match. The values in the two lists should be returned in increasing order. Note: You should only consider the players that have played at least one match. The testcases will be generated such that no two matches will have the same outcome.   Example 1: Input: matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]] Output: [[1,2,10],[4,5,7,8]] Explanation: Players 1, 2, and 10 have not lost any matches. Players 4, 5, 7, and 8 each have lost one match. Players 3, 6, and 9 each have lost two matches. Thus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8]. Example 2: Input: matches = [[2,3],[1,3],[5,4],[6,4]] Output: [[1,2,5,6],[]] Explanation: Players 1, 2, 5, and 6 have not lost any matches. Players 3 and 4 each have lost two matches. Thus, answer[0] = [1,2,5,6] and answer[1] = [].   Constraints: 1 <= matches.length <= 105 matches[i].length == 2 1 <= winneri, loseri <= 105 winneri != loseri All matches[i] are unique.",
        "1666": "You are given a 0-indexed integer array candies. Each element in the array denotes a pile of candies of size candies[i]. You can divide each pile into any number of sub piles, but you cannot merge two piles together. You are also given an integer k. You should allocate piles of candies to k children such that each child gets the same number of candies. Each child can take at most one pile of candies and some piles of candies may go unused. Return the maximum number of candies each child can get.   Example 1: Input: candies = [5,8,6], k = 3 Output: 5 Explanation: We can divide candies[1] into 2 piles of size 5 and 3, and candies[2] into 2 piles of size 5 and 1. We now have five piles of candies of sizes 5, 5, 3, 5, and 1. We can allocate the 3 piles of size 5 to 3 children. It can be proven that each child cannot receive more than 5 candies. Example 2: Input: candies = [2,5], k = 11 Output: 0 Explanation: There are 11 children but only 7 candies in total, so it is impossible to ensure each child receives at least one candy. Thus, each child gets no candy and the answer is 0.   Constraints: 1 <= candies.length <= 105 1 <= candies[i] <= 107 1 <= k <= 1012",
        "1667": "You are given a character array keys containing unique characters and a string array values containing strings of length 2. You are also given another string array dictionary that contains all permitted original strings after decryption. You should implement a data structure that can encrypt or decrypt a 0-indexed string. A string is encrypted with the following process: For each character c in the string, we find the index i satisfying keys[i] == c in keys. Replace c with values[i] in the string. Note that in case a character of the string is not present in keys, the encryption process cannot be carried out, and an empty string \"\" is returned. A string is decrypted with the following process: For each substring s of length 2 occurring at an even index in the string, we find an i such that values[i] == s. If there are multiple valid i, we choose any one of them. This means a string could have multiple possible strings it can decrypt to. Replace s with keys[i] in the string. Implement the Encrypter class: Encrypter(char[] keys, String[] values, String[] dictionary) Initializes the Encrypter class with keys, values, and dictionary. String encrypt(String word1) Encrypts word1 with the encryption process described above and returns the encrypted string. int decrypt(String word2) Returns the number of possible strings word2 could decrypt to that also appear in dictionary.   Example 1: Input [\"Encrypter\", \"encrypt\", \"decrypt\"] [[['a', 'b', 'c', 'd'], [\"ei\", \"zf\", \"ei\", \"am\"], [\"abcd\", \"acbd\", \"adbc\", \"badc\", \"dacb\", \"cadb\", \"cbda\", \"abad\"]], [\"abcd\"], [\"eizfeiam\"]] Output [null, \"eizfeiam\", 2]  Explanation Encrypter encrypter = new Encrypter([['a', 'b', 'c', 'd'], [\"ei\", \"zf\", \"ei\", \"am\"], [\"abcd\", \"acbd\", \"adbc\", \"badc\", \"dacb\", \"cadb\", \"cbda\", \"abad\"]); encrypter.encrypt(\"abcd\"); // return \"eizfeiam\".                             // 'a' maps to \"ei\", 'b' maps to \"zf\", 'c' maps to \"ei\", and 'd' maps to \"am\". encrypter.decrypt(\"eizfeiam\"); // return 2.                                // \"ei\" can map to 'a' or 'c', \"zf\" maps to 'b', and \"am\" maps to 'd'.                                // Thus, the possible strings after decryption are \"abad\", \"cbad\", \"abcd\", and \"cbcd\".                                // 2 of those strings, \"abad\" and \"abcd\", appear in dictionary, so the answer is 2.   Constraints: 1 <= keys.length == values.length <= 26 values[i].length == 2 1 <= dictionary.length <= 100 1 <= dictionary[i].length <= 100 All keys[i] and dictionary[i] are unique. 1 <= word1.length <= 2000 1 <= word2.length <= 200 All word1[i] appear in keys. word2.length is even. keys, values[i], dictionary[i], word1, and word2 only contain lowercase English letters. At most 200 calls will be made to encrypt and decrypt in total.",
        "1668": "You are given a positive integer num. You may swap any two digits of num that have the same parity (i.e. both odd digits or both even digits). Return the largest possible value of num after any number of swaps.   Example 1: Input: num = 1234 Output: 3412 Explanation: Swap the digit 3 with the digit 1, this results in the number 3214. Swap the digit 2 with the digit 4, this results in the number 3412. Note that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number. Also note that we may not swap the digit 4 with the digit 1 since they are of different parities. Example 2: Input: num = 65875 Output: 87655 Explanation: Swap the digit 8 with the digit 6, this results in the number 85675. Swap the first digit 5 with the digit 7, this results in the number 87655. Note that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number.   Constraints: 1 <= num <= 109",
        "1669": "You are given a 0-indexed string expression of the form \"<num1>+<num2>\" where <num1> and <num2> represent positive integers. Add a pair of parentheses to expression such that after the addition of parentheses, expression is a valid mathematical expression and evaluates to the smallest possible value. The left parenthesis must be added to the left of '+' and the right parenthesis must be added to the right of '+'. Return expression after adding a pair of parentheses such that expression evaluates to the smallest possible value. If there are multiple answers that yield the same result, return any of them. The input has been generated such that the original value of expression, and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.   Example 1: Input: expression = \"247+38\" Output: \"2(47+38)\" Explanation: The expression evaluates to 2 * (47 + 38) = 2 * 85 = 170. Note that \"2(4)7+38\" is invalid because the right parenthesis must be to the right of the '+'. It can be shown that 170 is the smallest possible value. Example 2: Input: expression = \"12+34\" Output: \"1(2+3)4\" Explanation: The expression evaluates to 1 * (2 + 3) * 4 = 1 * 5 * 4 = 20. Example 3: Input: expression = \"999+999\" Output: \"(999+999)\" Explanation: The expression evaluates to 999 + 999 = 1998.   Constraints: 3 <= expression.length <= 10 expression consists of digits from '1' to '9' and '+'. expression starts and ends with digits. expression contains exactly one '+'. The original value of expression, and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.",
        "1670": "You are given an array of non-negative integers nums and an integer k. In one operation, you may choose any element from nums and increment it by 1. Return the maximum product of nums after at most k operations. Since the answer may be very large, return it modulo 109 + 7. Note that you should maximize the product before taking the modulo.    Example 1: Input: nums = [0,4], k = 5 Output: 20 Explanation: Increment the first number 5 times. Now nums = [5, 4], with a product of 5 * 4 = 20. It can be shown that 20 is maximum product possible, so we return 20. Note that there may be other ways to increment nums to have the maximum product. Example 2: Input: nums = [6,3,3,2], k = 2 Output: 216 Explanation: Increment the second number 1 time and increment the fourth number 1 time. Now nums = [6, 4, 3, 3], with a product of 6 * 4 * 3 * 3 = 216. It can be shown that 216 is maximum product possible, so we return 216. Note that there may be other ways to increment nums to have the maximum product.   Constraints: 1 <= nums.length, k <= 105 0 <= nums[i] <= 106",
        "1671": "Alice is a caretaker of n gardens and she wants to plant flowers to maximize the total beauty of all her gardens. You are given a 0-indexed integer array flowers of size n, where flowers[i] is the number of flowers already planted in the ith garden. Flowers that are already planted cannot be removed. You are then given another integer newFlowers, which is the maximum number of flowers that Alice can additionally plant. You are also given the integers target, full, and partial. A garden is considered complete if it has at least target flowers. The total beauty of the gardens is then determined as the sum of the following: The number of complete gardens multiplied by full. The minimum number of flowers in any of the incomplete gardens multiplied by partial. If there are no incomplete gardens, then this value will be 0. Return the maximum total beauty that Alice can obtain after planting at most newFlowers flowers.   Example 1: Input: flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1 Output: 14 Explanation: Alice can plant - 2 flowers in the 0th garden - 3 flowers in the 1st garden - 1 flower in the 2nd garden - 1 flower in the 3rd garden The gardens will then be [3,6,2,2]. She planted a total of 2 + 3 + 1 + 1 = 7 flowers. There is 1 garden that is complete. The minimum number of flowers in the incomplete gardens is 2. Thus, the total beauty is 1 * 12 + 2 * 1 = 12 + 2 = 14. No other way of planting flowers can obtain a total beauty higher than 14. Example 2: Input: flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6 Output: 30 Explanation: Alice can plant - 3 flowers in the 0th garden - 0 flowers in the 1st garden - 0 flowers in the 2nd garden - 2 flowers in the 3rd garden The gardens will then be [5,4,5,5]. She planted a total of 3 + 0 + 0 + 2 = 5 flowers. There are 3 gardens that are complete. The minimum number of flowers in the incomplete gardens is 4. Thus, the total beauty is 3 * 2 + 4 * 6 = 6 + 24 = 30. No other way of planting flowers can obtain a total beauty higher than 30. Note that Alice could make all the gardens complete but in this case, she would obtain a lower total beauty.   Constraints: 1 <= flowers.length <= 105 1 <= flowers[i], target <= 105 1 <= newFlowers <= 1010 1 <= full, partial <= 105",
        "1672": "Given two integers num1 and num2, return the sum of the two integers.   Example 1: Input: num1 = 12, num2 = 5 Output: 17 Explanation: num1 is 12, num2 is 5, and their sum is 12 + 5 = 17, so 17 is returned. Example 2: Input: num1 = -10, num2 = 4 Output: -6 Explanation: num1 + num2 = -6, so -6 is returned.   Constraints: -100 <= num1, num2 <= 100",
        "1673": "You are given the root of a binary tree that consists of exactly 3 nodes: the root, its left child, and its right child. Return true if the value of the root is equal to the sum of the values of its two children, or false otherwise.   Example 1: Input: root = [10,4,6] Output: true Explanation: The values of the root, its left child, and its right child are 10, 4, and 6, respectively. 10 is equal to 4 + 6, so we return true. Example 2: Input: root = [5,3,1] Output: false Explanation: The values of the root, its left child, and its right child are 5, 3, and 1, respectively. 5 is not equal to 3 + 1, so we return false.   Constraints: The tree consists only of the root, its left child, and its right child. -100 <= Node.val <= 100",
        "1674": "Given an integer array nums of size n, return the number with the value closest to 0 in nums. If there are multiple answers, return the number with the largest value.   Example 1: Input: nums = [-4,-2,1,4,8] Output: 1 Explanation: The distance from -4 to 0 is |-4| = 4. The distance from -2 to 0 is |-2| = 2. The distance from 1 to 0 is |1| = 1. The distance from 4 to 0 is |4| = 4. The distance from 8 to 0 is |8| = 8. Thus, the closest number to 0 in the array is 1. Example 2: Input: nums = [2,-1,1] Output: 1 Explanation: 1 and -1 are both the closest numbers to 0, so 1 being larger is returned.   Constraints: 1 <= n <= 1000 -105 <= nums[i] <= 105",
        "1675": "You are given an integer total indicating the amount of money you have. You are also given two integers cost1 and cost2 indicating the price of a pen and pencil respectively. You can spend part or all of your money to buy multiple quantities (or none) of each kind of writing utensil. Return the number of distinct ways you can buy some number of pens and pencils.   Example 1: Input: total = 20, cost1 = 10, cost2 = 5 Output: 9 Explanation: The price of a pen is 10 and the price of a pencil is 5. - If you buy 0 pens, you can buy 0, 1, 2, 3, or 4 pencils. - If you buy 1 pen, you can buy 0, 1, or 2 pencils. - If you buy 2 pens, you cannot buy any pencils. The total number of ways to buy pens and pencils is 5 + 3 + 1 = 9. Example 2: Input: total = 5, cost1 = 10, cost2 = 10 Output: 1 Explanation: The price of both pens and pencils are 10, which cost more than total, so you cannot buy any writing utensils. Therefore, there is only 1 way: buy 0 pens and 0 pencils.   Constraints: 1 <= total, cost1, cost2 <= 106",
        "1676": "There is an ATM machine that stores banknotes of 5 denominations: 20, 50, 100, 200, and 500 dollars. Initially the ATM is empty. The user can use the machine to deposit or withdraw any amount of money. When withdrawing, the machine prioritizes using banknotes of larger values. For example, if you want to withdraw $300 and there are 2 $50 banknotes, 1 $100 banknote, and 1 $200 banknote, then the machine will use the $100 and $200 banknotes. However, if you try to withdraw $600 and there are 3 $200 banknotes and 1 $500 banknote, then the withdraw request will be rejected because the machine will first try to use the $500 banknote and then be unable to use banknotes to complete the remaining $100. Note that the machine is not allowed to use the $200 banknotes instead of the $500 banknote. Implement the ATM class: ATM() Initializes the ATM object. void deposit(int[] banknotesCount) Deposits new banknotes in the order $20, $50, $100, $200, and $500. int[] withdraw(int amount) Returns an array of length 5 of the number of banknotes that will be handed to the user in the order $20, $50, $100, $200, and $500, and update the number of banknotes in the ATM after withdrawing. Returns [-1] if it is not possible (do not withdraw any banknotes in this case).   Example 1: Input [\"ATM\", \"deposit\", \"withdraw\", \"deposit\", \"withdraw\", \"withdraw\"] [[], [[0,0,1,2,1]], [600], [[0,1,0,1,1]], [600], [550]] Output [null, null, [0,0,1,0,1], null, [-1], [0,1,0,0,1]]  Explanation ATM atm = new ATM(); atm.deposit([0,0,1,2,1]); // Deposits 1 $100 banknote, 2 $200 banknotes,                           // and 1 $500 banknote. atm.withdraw(600);        // Returns [0,0,1,0,1]. The machine uses 1 $100 banknote                           // and 1 $500 banknote. The banknotes left over in the                           // machine are [0,0,0,2,0]. atm.deposit([0,1,0,1,1]); // Deposits 1 $50, $200, and $500 banknote.                           // The banknotes in the machine are now [0,1,0,3,1]. atm.withdraw(600);        // Returns [-1]. The machine will try to use a $500 banknote                           // and then be unable to complete the remaining $100,                           // so the withdraw request will be rejected.                           // Since the request is rejected, the number of banknotes                           // in the machine is not modified. atm.withdraw(550);        // Returns [0,1,0,0,1]. The machine uses 1 $50 banknote                           // and 1 $500 banknote.   Constraints: banknotesCount.length == 5 0 <= banknotesCount[i] <= 109 1 <= amount <= 109 At most 5000 calls in total will be made to withdraw and deposit. At least one call will be made to each function withdraw and deposit. Sum of banknotesCount[i] in all deposits doesn't exceed 109",
        "1677": "There is an undirected graph with n nodes, numbered from 0 to n - 1. You are given a 0-indexed integer array scores of length n where scores[i] denotes the score of node i. You are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi. A node sequence is valid if it meets the following conditions: There is an edge connecting every pair of adjacent nodes in the sequence. No node appears more than once in the sequence. The score of a node sequence is defined as the sum of the scores of the nodes in the sequence. Return the maximum score of a valid node sequence with a length of 4. If no such sequence exists, return -1.   Example 1: Input: scores = [5,2,9,8,4], edges = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]] Output: 24 Explanation: The figure above shows the graph and the chosen node sequence [0,1,2,3]. The score of the node sequence is 5 + 2 + 9 + 8 = 24. It can be shown that no other node sequence has a score of more than 24. Note that the sequences [3,1,2,0] and [1,0,2,3] are also valid and have a score of 24. The sequence [0,3,2,4] is not valid since no edge connects nodes 0 and 3. Example 2: Input: scores = [9,20,6,4,11,12], edges = [[0,3],[5,3],[2,4],[1,3]] Output: -1 Explanation: The figure above shows the graph. There are no valid node sequences of length 4, so we return -1.   Constraints: n == scores.length 4 <= n <= 5 * 104 1 <= scores[i] <= 108 0 <= edges.length <= 5 * 104 edges[i].length == 2 0 <= ai, bi <= n - 1 ai != bi There are no duplicate edges.",
        "1678": "You are given a string s consisting of digits and an integer k. A round can be completed if the length of s is greater than k. In one round, do the following: Divide s into consecutive groups of size k such that the first k characters are in the first group, the next k characters are in the second group, and so on. Note that the size of the last group can be smaller than k. Replace each group of s with a string representing the sum of all its digits. For example, \"346\" is replaced with \"13\" because 3 + 4 + 6 = 13. Merge consecutive groups together to form a new string. If the length of the string is greater than k, repeat from step 1. Return s after all rounds have been completed.   Example 1: Input: s = \"11111222223\", k = 3 Output: \"135\" Explanation:  - For the first round, we divide s into groups of size 3: \"111\", \"112\", \"222\", and \"23\".   Then we calculate the digit sum of each group: 1 + 1 + 1 = 3, 1 + 1 + 2 = 4, 2 + 2 + 2 = 6, and 2 + 3 = 5.    So, s becomes \"3\" + \"4\" + \"6\" + \"5\" = \"3465\" after the first round. - For the second round, we divide s into \"346\" and \"5\".   Then we calculate the digit sum of each group: 3 + 4 + 6 = 13, 5 = 5.    So, s becomes \"13\" + \"5\" = \"135\" after second round.  Now, s.length <= k, so we return \"135\" as the answer. Example 2: Input: s = \"00000000\", k = 3 Output: \"000\" Explanation:  We divide s into \"000\", \"000\", and \"00\". Then we calculate the digit sum of each group: 0 + 0 + 0 = 0, 0 + 0 + 0 = 0, and 0 + 0 = 0.  s becomes \"0\" + \"0\" + \"0\" = \"000\", whose length is equal to k, so we return \"000\".   Constraints: 1 <= s.length <= 100 2 <= k <= 100 s consists of digits only.",
        "1679": "You are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the same difficulty level. Return the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.   Example 1: Input: tasks = [2,2,3,3,2,4,4,4,4,4] Output: 4 Explanation: To complete all the tasks, a possible plan is: - In the first round, you complete 3 tasks of difficulty level 2.  - In the second round, you complete 2 tasks of difficulty level 3.  - In the third round, you complete 3 tasks of difficulty level 4.  - In the fourth round, you complete 2 tasks of difficulty level 4.   It can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4. Example 2: Input: tasks = [2,3,3] Output: -1 Explanation: There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you cannot complete all the tasks, and the answer is -1.   Constraints: 1 <= tasks.length <= 105 1 <= tasks[i] <= 109   Note: This question is the same as 2870: Minimum Number of Operations to Make Array Empty.",
        "1680": "You are given a 2D integer array grid of size m x n, where each cell contains a positive integer. A cornered path is defined as a set of adjacent cells with at most one turn. More specifically, the path should exclusively move either horizontally or vertically up to the turn (if there is one), without returning to a previously visited cell. After the turn, the path will then move exclusively in the alternate direction: move vertically if it moved horizontally, and vice versa, also without returning to a previously visited cell. The product of a path is defined as the product of all the values in the path. Return the maximum number of trailing zeros in the product of a cornered path found in grid. Note: Horizontal movement means moving in either the left or right direction. Vertical movement means moving in either the up or down direction.   Example 1: Input: grid = [[23,17,15,3,20],[8,1,20,27,11],[9,4,6,2,21],[40,9,1,10,6],[22,7,4,5,3]] Output: 3 Explanation: The grid on the left shows a valid cornered path. It has a product of 15 * 20 * 6 * 1 * 10 = 18000 which has 3 trailing zeros. It can be shown that this is the maximum trailing zeros in the product of a cornered path.  The grid in the middle is not a cornered path as it has more than one turn. The grid on the right is not a cornered path as it requires a return to a previously visited cell. Example 2: Input: grid = [[4,3,2],[7,6,1],[8,8,8]] Output: 0 Explanation: The grid is shown in the figure above. There are no cornered paths in the grid that result in a product with a trailing zero.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 105 1 <= m * n <= 105 1 <= grid[i][j] <= 1000",
        "1681": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1. You are also given a string s of length n, where s[i] is the character assigned to node i. Return the length of the longest path in the tree such that no pair of adjacent nodes on the path have the same character assigned to them.   Example 1: Input: parent = [-1,0,0,1,1,2], s = \"abacbe\" Output: 3 Explanation: The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -> 1 -> 3. The length of this path is 3, so 3 is returned. It can be proven that there is no longer path that satisfies the conditions.  Example 2: Input: parent = [-1,0,0,0], s = \"aabc\" Output: 3 Explanation: The longest path where each two adjacent nodes have different characters is the path: 2 -> 0 -> 3. The length of this path is 3, so 3 is returned.   Constraints: n == parent.length == s.length 1 <= n <= 105 0 <= parent[i] <= n - 1 for all i >= 1 parent[0] == -1 parent represents a valid tree. s consists of only lowercase English letters.",
        "1682": "Given a 2D integer array nums where nums[i] is a non-empty array of distinct positive integers, return the list of integers that are present in each array of nums sorted in ascending order.   Example 1: Input: nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]] Output: [3,4] Explanation:  The only integers present in each of nums[0] = [3,1,2,4,5], nums[1] = [1,2,3,4], and nums[2] = [3,4,5,6] are 3 and 4, so we return [3,4]. Example 2: Input: nums = [[1,2,3],[4,5,6]] Output: [] Explanation:  There does not exist any integer present both in nums[0] and nums[1], so we return an empty list [].   Constraints: 1 <= nums.length <= 1000 1 <= sum(nums[i].length) <= 1000 1 <= nums[i][j] <= 1000 All the values of nums[i] are unique.",
        "1683": "Given a 2D integer array circles where circles[i] = [xi, yi, ri] represents the center (xi, yi) and radius ri of the ith circle drawn on a grid, return the number of lattice points that are present inside at least one circle. Note: A lattice point is a point with integer coordinates. Points that lie on the circumference of a circle are also considered to be inside it.   Example 1: Input: circles = [[2,2,1]] Output: 5 Explanation: The figure above shows the given circle. The lattice points present inside the circle are (1, 2), (2, 1), (2, 2), (2, 3), and (3, 2) and are shown in green. Other points such as (1, 1) and (1, 3), which are shown in red, are not considered inside the circle. Hence, the number of lattice points present inside at least one circle is 5. Example 2: Input: circles = [[2,2,2],[3,4,1]] Output: 16 Explanation: The figure above shows the given circles. There are exactly 16 lattice points which are present inside at least one circle.  Some of them are (0, 2), (2, 0), (2, 4), (3, 2), and (4, 4).   Constraints: 1 <= circles.length <= 200 circles[i].length == 3 1 <= xi, yi <= 100 1 <= ri <= min(xi, yi)",
        "1684": "You are given a 2D integer array rectangles where rectangles[i] = [li, hi] indicates that ith rectangle has a length of li and a height of hi. You are also given a 2D integer array points where points[j] = [xj, yj] is a point with coordinates (xj, yj). The ith rectangle has its bottom-left corner point at the coordinates (0, 0) and its top-right corner point at (li, hi). Return an integer array count of length points.length where count[j] is the number of rectangles that contain the jth point. The ith rectangle contains the jth point if 0 <= xj <= li and 0 <= yj <= hi. Note that points that lie on the edges of a rectangle are also considered to be contained by that rectangle.   Example 1: Input: rectangles = [[1,2],[2,3],[2,5]], points = [[2,1],[1,4]] Output: [2,1] Explanation:  The first rectangle contains no points. The second rectangle contains only the point (2, 1). The third rectangle contains the points (2, 1) and (1, 4). The number of rectangles that contain the point (2, 1) is 2. The number of rectangles that contain the point (1, 4) is 1. Therefore, we return [2, 1]. Example 2: Input: rectangles = [[1,1],[2,2],[3,3]], points = [[1,3],[1,1]] Output: [1,3] Explanation: The first rectangle contains only the point (1, 1). The second rectangle contains only the point (1, 1). The third rectangle contains the points (1, 3) and (1, 1). The number of rectangles that contain the point (1, 3) is 1. The number of rectangles that contain the point (1, 1) is 3. Therefore, we return [1, 3].   Constraints: 1 <= rectangles.length, points.length <= 5 * 104 rectangles[i].length == points[j].length == 2 1 <= li, xj <= 109 1 <= hi, yj <= 100 All the rectangles are unique. All the points are unique.",
        "1685": "You are given a 0-indexed 2D integer array flowers, where flowers[i] = [starti, endi] means the ith flower will be in full bloom from starti to endi (inclusive). You are also given a 0-indexed integer array people of size n, where people[i] is the time that the ith person will arrive to see the flowers. Return an integer array answer of size n, where answer[i] is the number of flowers that are in full bloom when the ith person arrives.   Example 1: Input: flowers = [[1,6],[3,7],[9,12],[4,13]], people = [2,3,7,11] Output: [1,2,2,2] Explanation: The figure above shows the times when the flowers are in full bloom and when the people arrive. For each person, we return the number of flowers in full bloom during their arrival. Example 2: Input: flowers = [[1,10],[3,3]], people = [3,3,2] Output: [2,2,1] Explanation: The figure above shows the times when the flowers are in full bloom and when the people arrive. For each person, we return the number of flowers in full bloom during their arrival.   Constraints: 1 <= flowers.length <= 5 * 104 flowers[i].length == 2 1 <= starti <= endi <= 109 1 <= people.length <= 5 * 104 1 <= people[i] <= 109",
        "1686": "You are given a string array words and a string s, where words[i] and s comprise only of lowercase English letters. Return the number of strings in words that are a prefix of s. A prefix of a string is a substring that occurs at the beginning of the string. A substring is a contiguous sequence of characters within a string.   Example 1: Input: words = [\"a\",\"b\",\"c\",\"ab\",\"bc\",\"abc\"], s = \"abc\" Output: 3 Explanation: The strings in words which are a prefix of s = \"abc\" are: \"a\", \"ab\", and \"abc\". Thus the number of strings in words which are a prefix of s is 3. Example 2: Input: words = [\"a\",\"a\"], s = \"aa\" Output: 2 Explanation: Both of the strings are a prefix of s.  Note that the same string can occur multiple times in words, and it should be counted each time.   Constraints: 1 <= words.length <= 1000 1 <= words[i].length, s.length <= 10 words[i] and s consist of lowercase English letters only.",
        "1687": "You are given a 0-indexed integer array nums of length n. The average difference of the index i is the absolute difference between the average of the first i + 1 elements of nums and the average of the last n - i - 1 elements. Both averages should be rounded down to the nearest integer. Return the index with the minimum average difference. If there are multiple such indices, return the smallest one. Note: The absolute difference of two numbers is the absolute value of their difference. The average of n elements is the sum of the n elements divided (integer division) by n. The average of 0 elements is considered to be 0.   Example 1: Input: nums = [2,5,3,9,5,3] Output: 3 Explanation: - The average difference of index 0 is: |2 / 1 - (5 + 3 + 9 + 5 + 3) / 5| = |2 / 1 - 25 / 5| = |2 - 5| = 3. - The average difference of index 1 is: |(2 + 5) / 2 - (3 + 9 + 5 + 3) / 4| = |7 / 2 - 20 / 4| = |3 - 5| = 2. - The average difference of index 2 is: |(2 + 5 + 3) / 3 - (9 + 5 + 3) / 3| = |10 / 3 - 17 / 3| = |3 - 5| = 2. - The average difference of index 3 is: |(2 + 5 + 3 + 9) / 4 - (5 + 3) / 2| = |19 / 4 - 8 / 2| = |4 - 4| = 0. - The average difference of index 4 is: |(2 + 5 + 3 + 9 + 5) / 5 - 3 / 1| = |24 / 5 - 3 / 1| = |4 - 3| = 1. - The average difference of index 5 is: |(2 + 5 + 3 + 9 + 5 + 3) / 6 - 0| = |27 / 6 - 0| = |4 - 0| = 4. The average difference of index 3 is the minimum average difference so return 3. Example 2: Input: nums = [0] Output: 0 Explanation: The only index is 0 so return 0. The average difference of index 0 is: |0 / 1 - 0| = |0 - 0| = 0.   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 105",
        "1688": "You are given two integers m and n representing a 0-indexed m x n grid. You are also given two 2D integer arrays guards and walls where guards[i] = [rowi, coli] and walls[j] = [rowj, colj] represent the positions of the ith guard and jth wall respectively. A guard can see every cell in the four cardinal directions (north, east, south, or west) starting from their position unless obstructed by a wall or another guard. A cell is guarded if there is at least one guard that can see it. Return the number of unoccupied cells that are not guarded.   Example 1: Input: m = 4, n = 6, guards = [[0,0],[1,1],[2,3]], walls = [[0,1],[2,2],[1,4]] Output: 7 Explanation: The guarded and unguarded cells are shown in red and green respectively in the above diagram. There are a total of 7 unguarded cells, so we return 7. Example 2: Input: m = 3, n = 3, guards = [[1,1]], walls = [[0,1],[1,0],[2,1],[1,2]] Output: 4 Explanation: The unguarded cells are shown in green in the above diagram. There are a total of 4 unguarded cells, so we return 4.   Constraints: 1 <= m, n <= 105 2 <= m * n <= 105 1 <= guards.length, walls.length <= 5 * 104 2 <= guards.length + walls.length <= m * n guards[i].length == walls[j].length == 2 0 <= rowi, rowj < m 0 <= coli, colj < n All the positions in guards and walls are unique.",
        "1689": "You are given a 0-indexed 2D integer array grid of size m x n which represents a field. Each cell has one of three values: 0 represents grass, 1 represents fire, 2 represents a wall that you and fire cannot pass through. You are situated in the top-left cell, (0, 0), and you want to travel to the safehouse at the bottom-right cell, (m - 1, n - 1). Every minute, you may move to an adjacent grass cell. After your move, every fire cell will spread to all adjacent cells that are not walls. Return the maximum number of minutes that you can stay in your initial position before moving while still safely reaching the safehouse. If this is impossible, return -1. If you can always reach the safehouse regardless of the minutes stayed, return 109. Note that even if the fire spreads to the safehouse immediately after you have reached it, it will be counted as safely reaching the safehouse. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).   Example 1: Input: grid = [[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]] Output: 3 Explanation: The figure above shows the scenario where you stay in the initial position for 3 minutes. You will still be able to safely reach the safehouse. Staying for more than 3 minutes will not allow you to safely reach the safehouse. Example 2: Input: grid = [[0,0,0,0],[0,1,2,0],[0,2,0,0]] Output: -1 Explanation: The figure above shows the scenario where you immediately move towards the safehouse. Fire will spread to any cell you move towards and it is impossible to safely reach the safehouse. Thus, -1 is returned. Example 3: Input: grid = [[0,0,0],[2,2,0],[1,2,0]] Output: 1000000000 Explanation: The figure above shows the initial grid. Notice that the fire is contained by walls and you will always be able to safely reach the safehouse. Thus, 109 is returned.   Constraints: m == grid.length n == grid[i].length 2 <= m, n <= 300 4 <= m * n <= 2 * 104 grid[i][j] is either 0, 1, or 2. grid[0][0] == grid[m - 1][n - 1] == 0",
        "1690": "You are given a string number representing a positive integer and a character digit. Return the resulting string after removing exactly one occurrence of digit from number such that the value of the resulting string in decimal form is maximized. The test cases are generated such that digit occurs at least once in number.   Example 1: Input: number = \"123\", digit = \"3\" Output: \"12\" Explanation: There is only one '3' in \"123\". After removing '3', the result is \"12\". Example 2: Input: number = \"1231\", digit = \"1\" Output: \"231\" Explanation: We can remove the first '1' to get \"231\" or remove the second '1' to get \"123\". Since 231 > 123, we return \"231\". Example 3: Input: number = \"551\", digit = \"5\" Output: \"51\" Explanation: We can remove either the first or second '5' from \"551\". Both result in the string \"51\".   Constraints: 2 <= number.length <= 100 number consists of digits from '1' to '9'. digit is a digit from '1' to '9'. digit occurs at least once in number.",
        "1691": "You are given an integer array cards where cards[i] represents the value of the ith card. A pair of cards are matching if the cards have the same value. Return the minimum number of consecutive cards you have to pick up to have a pair of matching cards among the picked cards. If it is impossible to have matching cards, return -1.   Example 1: Input: cards = [3,4,2,3,4,7] Output: 4 Explanation: We can pick up the cards [3,4,2,3] which contain a matching pair of cards with value 3. Note that picking up the cards [4,2,3,4] is also optimal. Example 2: Input: cards = [1,0,5,3] Output: -1 Explanation: There is no way to pick up a set of consecutive cards that contain a pair of matching cards.   Constraints: 1 <= cards.length <= 105 0 <= cards[i] <= 106",
        "1692": "Given an integer array nums and two integers k and p, return the number of distinct subarrays, which have at most k elements that are divisible by p. Two arrays nums1 and nums2 are said to be distinct if: They are of different lengths, or There exists at least one index i where nums1[i] != nums2[i]. A subarray is defined as a non-empty contiguous sequence of elements in an array.   Example 1: Input: nums = [2,3,3,2,2], k = 2, p = 2 Output: 11 Explanation: The elements at indices 0, 3, and 4 are divisible by p = 2. The 11 distinct subarrays which have at most k = 2 elements divisible by 2 are: [2], [2,3], [2,3,3], [2,3,3,2], [3], [3,3], [3,3,2], [3,3,2,2], [3,2], [3,2,2], and [2,2]. Note that the subarrays [2] and [3] occur more than once in nums, but they should each be counted only once. The subarray [2,3,3,2,2] should not be counted because it has 3 elements that are divisible by 2. Example 2: Input: nums = [1,2,3,4], k = 4, p = 1 Output: 10 Explanation: All element of nums are divisible by p = 1. Also, every subarray of nums will have at most 4 elements that are divisible by 1. Since all subarrays are distinct, the total number of subarrays satisfying all the constraints is 10.   Constraints: 1 <= nums.length <= 200 1 <= nums[i], p <= 200 1 <= k <= nums.length   Follow up: Can you solve this problem in O(n2) time complexity?",
        "1693": "The appeal of a string is the number of distinct characters found in the string. For example, the appeal of \"abbca\" is 3 because it has 3 distinct characters: 'a', 'b', and 'c'. Given a string s, return the total appeal of all of its substrings. A substring is a contiguous sequence of characters within a string.   Example 1: Input: s = \"abbca\" Output: 28 Explanation: The following are the substrings of \"abbca\": - Substrings of length 1: \"a\", \"b\", \"b\", \"c\", \"a\" have an appeal of 1, 1, 1, 1, and 1 respectively. The sum is 5. - Substrings of length 2: \"ab\", \"bb\", \"bc\", \"ca\" have an appeal of 2, 1, 2, and 2 respectively. The sum is 7. - Substrings of length 3: \"abb\", \"bbc\", \"bca\" have an appeal of 2, 2, and 3 respectively. The sum is 7. - Substrings of length 4: \"abbc\", \"bbca\" have an appeal of 3 and 3 respectively. The sum is 6. - Substrings of length 5: \"abbca\" has an appeal of 3. The sum is 3. The total sum is 5 + 7 + 7 + 6 + 3 = 28. Example 2: Input: s = \"code\" Output: 20 Explanation: The following are the substrings of \"code\": - Substrings of length 1: \"c\", \"o\", \"d\", \"e\" have an appeal of 1, 1, 1, and 1 respectively. The sum is 4. - Substrings of length 2: \"co\", \"od\", \"de\" have an appeal of 2, 2, and 2 respectively. The sum is 6. - Substrings of length 3: \"cod\", \"ode\" have an appeal of 3 and 3 respectively. The sum is 6. - Substrings of length 4: \"code\" has an appeal of 4. The sum is 4. The total sum is 4 + 6 + 6 + 4 = 20.   Constraints: 1 <= s.length <= 105 s consists of lowercase English letters.",
        "1694": "You are given a string num representing a large integer. An integer is good if it meets the following conditions: It is a substring of num with length 3. It consists of only one unique digit. Return the maximum good integer as a string or an empty string \"\" if no such integer exists. Note: A substring is a contiguous sequence of characters within a string. There may be leading zeroes in num or a good integer.   Example 1: Input: num = \"6777133339\" Output: \"777\" Explanation: There are two distinct good integers: \"777\" and \"333\". \"777\" is the largest, so we return \"777\". Example 2: Input: num = \"2300019\" Output: \"000\" Explanation: \"000\" is the only good integer. Example 3: Input: num = \"42352338\" Output: \"\" Explanation: No substring of length 3 consists of only one unique digit. Therefore, there are no good integers.   Constraints: 3 <= num.length <= 1000 num only consists of digits.",
        "1695": "Alice is texting Bob using her phone. The mapping of digits to letters is shown in the figure below. In order to add a letter, Alice has to press the key of the corresponding digit i times, where i is the position of the letter in the key. For example, to add the letter 's', Alice has to press '7' four times. Similarly, to add the letter 'k', Alice has to press '5' twice. Note that the digits '0' and '1' do not map to any letters, so Alice does not use them. However, due to an error in transmission, Bob did not receive Alice's text message but received a string of pressed keys instead. For example, when Alice sent the message \"bob\", Bob received the string \"2266622\". Given a string pressedKeys representing the string received by Bob, return the total number of possible text messages Alice could have sent. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: pressedKeys = \"22233\" Output: 8 Explanation: The possible text messages Alice could have sent are: \"aaadd\", \"abdd\", \"badd\", \"cdd\", \"aaae\", \"abe\", \"bae\", and \"ce\". Since there are 8 possible messages, we return 8. Example 2: Input: pressedKeys = \"222222222222222222222222222222222222\" Output: 82876089 Explanation: There are 2082876103 possible text messages Alice could have sent. Since we need to return the answer modulo 109 + 7, we return 2082876103 % (109 + 7) = 82876089.   Constraints: 1 <= pressedKeys.length <= 105 pressedKeys only consists of digits from '2' - '9'.",
        "1696": "A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true: It is (). It can be written as AB (A concatenated with B), where A and B are valid parentheses strings. It can be written as (A), where A is a valid parentheses string. You are given an m x n matrix of parentheses grid. A valid parentheses string path in the grid is a path satisfying all of the following conditions: The path starts from the upper left cell (0, 0). The path ends at the bottom-right cell (m - 1, n - 1). The path only ever moves down or right. The resulting parentheses string formed by the path is valid. Return true if there exists a valid parentheses string path in the grid. Otherwise, return false.   Example 1: Input: grid = [[\"(\",\"(\",\"(\"],[\")\",\"(\",\")\"],[\"(\",\"(\",\")\"],[\"(\",\"(\",\")\"]] Output: true Explanation: The above diagram shows two possible paths that form valid parentheses strings. The first path shown results in the valid parentheses string \"()(())\". The second path shown results in the valid parentheses string \"((()))\". Note that there may be other valid parentheses string paths. Example 2: Input: grid = [[\")\",\")\"],[\"(\",\"(\"]] Output: false Explanation: The two possible paths form the parentheses strings \"))(\" and \")((\". Since neither of them are valid parentheses strings, we return false.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 100 grid[i][j] is either '(' or ')'.",
        "1697": "The k-beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions: It has a length of k. It is a divisor of num. Given integers num and k, return the k-beauty of num. Note: Leading zeros are allowed. 0 is not a divisor of any value. A substring is a contiguous sequence of characters in a string.   Example 1: Input: num = 240, k = 2 Output: 2 Explanation: The following are the substrings of num of length k: - \"24\" from \"240\": 24 is a divisor of 240. - \"40\" from \"240\": 40 is a divisor of 240. Therefore, the k-beauty is 2. Example 2: Input: num = 430043, k = 2 Output: 2 Explanation: The following are the substrings of num of length k: - \"43\" from \"430043\": 43 is a divisor of 430043. - \"30\" from \"430043\": 30 is not a divisor of 430043. - \"00\" from \"430043\": 0 is not a divisor of 430043. - \"04\" from \"430043\": 4 is not a divisor of 430043. - \"43\" from \"430043\": 43 is a divisor of 430043. Therefore, the k-beauty is 2.   Constraints: 1 <= num <= 109 1 <= k <= num.length (taking num as a string)",
        "1698": "You are given a 2D integer array tiles where tiles[i] = [li, ri] represents that every tile j in the range li <= j <= ri is colored white. You are also given an integer carpetLen, the length of a single carpet that can be placed anywhere. Return the maximum number of white tiles that can be covered by the carpet.   Example 1: Input: tiles = [[1,5],[10,11],[12,18],[20,25],[30,32]], carpetLen = 10 Output: 9 Explanation: Place the carpet starting on tile 10.  It covers 9 white tiles, so we return 9. Note that there may be other places where the carpet covers 9 white tiles. It can be shown that the carpet cannot cover more than 9 white tiles. Example 2: Input: tiles = [[10,11],[1,1]], carpetLen = 2 Output: 2 Explanation: Place the carpet starting on tile 10.  It covers 2 white tiles, so we return 2.   Constraints: 1 <= tiles.length <= 5 * 104 tiles[i].length == 2 1 <= li <= ri <= 109 1 <= carpetLen <= 109 The tiles are non-overlapping.",
        "1699": "The variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. Note the two characters may or may not be the same. Given a string s consisting of lowercase English letters only, return the largest variance possible among all substrings of s. A substring is a contiguous sequence of characters within a string.   Example 1: Input: s = \"aababbb\" Output: 3 Explanation: All possible variances along with their respective substrings are listed below: - Variance 0 for substrings \"a\", \"aa\", \"ab\", \"abab\", \"aababb\", \"ba\", \"b\", \"bb\", and \"bbb\". - Variance 1 for substrings \"aab\", \"aba\", \"abb\", \"aabab\", \"ababb\", \"aababbb\", and \"bab\". - Variance 2 for substrings \"aaba\", \"ababbb\", \"abbb\", and \"babb\". - Variance 3 for substring \"babbb\". Since the largest possible variance is 3, we return it. Example 2: Input: s = \"abcde\" Output: 0 Explanation: No letter occurs more than once in s, so the variance of every substring is 0.   Constraints: 1 <= s.length <= 104 s consists of lowercase English letters.",
        "1700": "You are given a 0-indexed string array words, where words[i] consists of lowercase English letters. In one operation, select any index i such that 0 < i < words.length and words[i - 1] and words[i] are anagrams, and delete words[i] from words. Keep performing this operation as long as you can select an index that satisfies the conditions. Return words after performing all operations. It can be shown that selecting the indices for each operation in any arbitrary order will lead to the same result. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. For example, \"dacb\" is an anagram of \"abdc\".   Example 1: Input: words = [\"abba\",\"baba\",\"bbaa\",\"cd\",\"cd\"] Output: [\"abba\",\"cd\"] Explanation: One of the ways we can obtain the resultant array is by using the following operations: - Since words[2] = \"bbaa\" and words[1] = \"baba\" are anagrams, we choose index 2 and delete words[2].   Now words = [\"abba\",\"baba\",\"cd\",\"cd\"]. - Since words[1] = \"baba\" and words[0] = \"abba\" are anagrams, we choose index 1 and delete words[1].   Now words = [\"abba\",\"cd\",\"cd\"]. - Since words[2] = \"cd\" and words[1] = \"cd\" are anagrams, we choose index 2 and delete words[2].   Now words = [\"abba\",\"cd\"]. We can no longer perform any operations, so [\"abba\",\"cd\"] is the final answer. Example 2: Input: words = [\"a\",\"b\",\"c\",\"d\",\"e\"] Output: [\"a\",\"b\",\"c\",\"d\",\"e\"] Explanation: No two adjacent strings in words are anagrams of each other, so no operations are performed.   Constraints: 1 <= words.length <= 100 1 <= words[i].length <= 10 words[i] consists of lowercase English letters.",
        "1701": "Alice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be special floors, used for relaxation only. You are given two integers bottom and top, which denote that Alice has rented all the floors from bottom to top (inclusive). You are also given the integer array special, where special[i] denotes a special floor that Alice has designated for relaxation. Return the maximum number of consecutive floors without a special floor.   Example 1: Input: bottom = 2, top = 9, special = [4,6] Output: 3 Explanation: The following are the ranges (inclusive) of consecutive floors without a special floor: - (2, 3) with a total amount of 2 floors. - (5, 5) with a total amount of 1 floor. - (7, 9) with a total amount of 3 floors. Therefore, we return the maximum number which is 3 floors. Example 2: Input: bottom = 6, top = 8, special = [7,6,8] Output: 0 Explanation: Every floor rented is a special floor, so we return 0.   Constraints: 1 <= special.length <= 105 1 <= bottom <= special[i] <= top <= 109 All the values of special are unique.",
        "1702": "The bitwise AND of an array nums is the bitwise AND of all integers in nums. For example, for nums = [1, 5, 3], the bitwise AND is equal to 1 & 5 & 3 = 1. Also, for nums = [7], the bitwise AND is 7. You are given an array of positive integers candidates. Evaluate the bitwise AND of every combination of numbers of candidates. Each number in candidates may only be used once in each combination. Return the size of the largest combination of candidates with a bitwise AND greater than 0.   Example 1: Input: candidates = [16,17,71,62,12,24,14] Output: 4 Explanation: The combination [16,17,62,24] has a bitwise AND of 16 & 17 & 62 & 24 = 16 > 0. The size of the combination is 4. It can be shown that no combination with a size greater than 4 has a bitwise AND greater than 0. Note that more than one combination may have the largest size. For example, the combination [62,12,24,14] has a bitwise AND of 62 & 12 & 24 & 14 = 8 > 0. Example 2: Input: candidates = [8,8] Output: 2 Explanation: The largest combination [8,8] has a bitwise AND of 8 & 8 = 8 > 0. The size of the combination is 2, so we return 2.   Constraints: 1 <= candidates.length <= 105 1 <= candidates[i] <= 107",
        "1703": "Given an empty set of intervals, implement a data structure that can: Add an interval to the set of intervals. Count the number of integers that are present in at least one interval. Implement the CountIntervals class: CountIntervals() Initializes the object with an empty set of intervals. void add(int left, int right) Adds the interval [left, right] to the set of intervals. int count() Returns the number of integers that are present in at least one interval. Note that an interval [left, right] denotes all the integers x where left <= x <= right.   Example 1: Input [\"CountIntervals\", \"add\", \"add\", \"count\", \"add\", \"count\"] [[], [2, 3], [7, 10], [], [5, 8], []] Output [null, null, null, 6, null, 8]  Explanation CountIntervals countIntervals = new CountIntervals(); // initialize the object with an empty set of intervals.  countIntervals.add(2, 3);  // add [2, 3] to the set of intervals. countIntervals.add(7, 10); // add [7, 10] to the set of intervals. countIntervals.count();    // return 6                            // the integers 2 and 3 are present in the interval [2, 3].                            // the integers 7, 8, 9, and 10 are present in the interval [7, 10]. countIntervals.add(5, 8);  // add [5, 8] to the set of intervals. countIntervals.count();    // return 8                            // the integers 2 and 3 are present in the interval [2, 3].                            // the integers 5 and 6 are present in the interval [5, 8].                            // the integers 7 and 8 are present in the intervals [5, 8] and [7, 10].                            // the integers 9 and 10 are present in the interval [7, 10].   Constraints: 1 <= left <= right <= 109 At most 105 calls in total will be made to add and count. At least one call will be made to count.",
        "1704": "You have n bags numbered from 0 to n - 1. You are given two 0-indexed integer arrays capacity and rocks. The ith bag can hold a maximum of capacity[i] rocks and currently contains rocks[i] rocks. You are also given an integer additionalRocks, the number of additional rocks you can place in any of the bags. Return the maximum number of bags that could have full capacity after placing the additional rocks in some bags.   Example 1: Input: capacity = [2,3,4,5], rocks = [1,2,4,4], additionalRocks = 2 Output: 3 Explanation: Place 1 rock in bag 0 and 1 rock in bag 1. The number of rocks in each bag are now [2,3,4,4]. Bags 0, 1, and 2 have full capacity. There are 3 bags at full capacity, so we return 3. It can be shown that it is not possible to have more than 3 bags at full capacity. Note that there may be other ways of placing the rocks that result in an answer of 3. Example 2: Input: capacity = [10,2,2], rocks = [2,2,0], additionalRocks = 100 Output: 3 Explanation: Place 8 rocks in bag 0 and 2 rocks in bag 2. The number of rocks in each bag are now [10,2,2]. Bags 0, 1, and 2 have full capacity. There are 3 bags at full capacity, so we return 3. It can be shown that it is not possible to have more than 3 bags at full capacity. Note that we did not use all of the additional rocks.   Constraints: n == capacity.length == rocks.length 1 <= n <= 5 * 104 1 <= capacity[i] <= 109 0 <= rocks[i] <= capacity[i] 1 <= additionalRocks <= 109",
        "1705": "You are given a 2D integer array stockPrices where stockPrices[i] = [dayi, pricei] indicates the price of the stock on day dayi is pricei. A line chart is created from the array by plotting the points on an XY plane with the X-axis representing the day and the Y-axis representing the price and connecting adjacent points. One such example is shown below: Return the minimum number of lines needed to represent the line chart.   Example 1: Input: stockPrices = [[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]] Output: 3 Explanation: The diagram above represents the input, with the X-axis representing the day and Y-axis representing the price. The following 3 lines can be drawn to represent the line chart: - Line 1 (in red) from (1,7) to (4,4) passing through (1,7), (2,6), (3,5), and (4,4). - Line 2 (in blue) from (4,4) to (5,4). - Line 3 (in green) from (5,4) to (8,1) passing through (5,4), (6,3), (7,2), and (8,1). It can be shown that it is not possible to represent the line chart using less than 3 lines. Example 2: Input: stockPrices = [[3,4],[1,2],[7,8],[2,3]] Output: 1 Explanation: As shown in the diagram above, the line chart can be represented with a single line.   Constraints: 1 <= stockPrices.length <= 105 stockPrices[i].length == 2 1 <= dayi, pricei <= 109 All dayi are distinct.",
        "1706": "As the ruler of a kingdom, you have an army of wizards at your command. You are given a 0-indexed integer array strength, where strength[i] denotes the strength of the ith wizard. For a contiguous group of wizards (i.e. the wizards' strengths form a subarray of strength), the total strength is defined as the product of the following two values: The strength of the weakest wizard in the group. The total of all the individual strengths of the wizards in the group. Return the sum of the total strengths of all contiguous groups of wizards. Since the answer may be very large, return it modulo 109 + 7. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: strength = [1,3,1,2] Output: 44 Explanation: The following are all the contiguous groups of wizards: - [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1 - [3] from [1,3,1,2] has a total strength of min([3]) * sum([3]) = 3 * 3 = 9 - [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1 - [2] from [1,3,1,2] has a total strength of min([2]) * sum([2]) = 2 * 2 = 4 - [1,3] from [1,3,1,2] has a total strength of min([1,3]) * sum([1,3]) = 1 * 4 = 4 - [3,1] from [1,3,1,2] has a total strength of min([3,1]) * sum([3,1]) = 1 * 4 = 4 - [1,2] from [1,3,1,2] has a total strength of min([1,2]) * sum([1,2]) = 1 * 3 = 3 - [1,3,1] from [1,3,1,2] has a total strength of min([1,3,1]) * sum([1,3,1]) = 1 * 5 = 5 - [3,1,2] from [1,3,1,2] has a total strength of min([3,1,2]) * sum([3,1,2]) = 1 * 6 = 6 - [1,3,1,2] from [1,3,1,2] has a total strength of min([1,3,1,2]) * sum([1,3,1,2]) = 1 * 7 = 7 The sum of all the total strengths is 1 + 9 + 1 + 4 + 4 + 4 + 3 + 5 + 6 + 7 = 44. Example 2: Input: strength = [5,4,6] Output: 213 Explanation: The following are all the contiguous groups of wizards:  - [5] from [5,4,6] has a total strength of min([5]) * sum([5]) = 5 * 5 = 25 - [4] from [5,4,6] has a total strength of min([4]) * sum([4]) = 4 * 4 = 16 - [6] from [5,4,6] has a total strength of min([6]) * sum([6]) = 6 * 6 = 36 - [5,4] from [5,4,6] has a total strength of min([5,4]) * sum([5,4]) = 4 * 9 = 36 - [4,6] from [5,4,6] has a total strength of min([4,6]) * sum([4,6]) = 4 * 10 = 40 - [5,4,6] from [5,4,6] has a total strength of min([5,4,6]) * sum([5,4,6]) = 4 * 15 = 60 The sum of all the total strengths is 25 + 16 + 36 + 36 + 40 + 60 = 213.   Constraints: 1 <= strength.length <= 105 1 <= strength[i] <= 109",
        "1707": "You are given a 0-indexed string num of length n consisting of digits. Return true if for every index i in the range 0 <= i < n, the digit i occurs num[i] times in num, otherwise return false.   Example 1: Input: num = \"1210\" Output: true Explanation: num[0] = '1'. The digit 0 occurs once in num. num[1] = '2'. The digit 1 occurs twice in num. num[2] = '1'. The digit 2 occurs once in num. num[3] = '0'. The digit 3 occurs zero times in num. The condition holds true for every index in \"1210\", so return true. Example 2: Input: num = \"030\" Output: false Explanation: num[0] = '0'. The digit 0 should occur zero times, but actually occurs twice in num. num[1] = '3'. The digit 1 should occur three times, but actually occurs zero times in num. num[2] = '0'. The digit 2 occurs zero times in num. The indices 0 and 1 both violate the condition, so return false.   Constraints: n == num.length 1 <= n <= 10 num consists of digits.",
        "1708": "You have a chat log of n messages. You are given two string arrays messages and senders where messages[i] is a message sent by senders[i]. A message is list of words that are separated by a single space with no leading or trailing spaces. The word count of a sender is the total number of words sent by the sender. Note that a sender may send more than one message. Return the sender with the largest word count. If there is more than one sender with the largest word count, return the one with the lexicographically largest name. Note: Uppercase letters come before lowercase letters in lexicographical order. \"Alice\" and \"alice\" are distinct.   Example 1: Input: messages = [\"Hello userTwooo\",\"Hi userThree\",\"Wonderful day Alice\",\"Nice day userThree\"], senders = [\"Alice\",\"userTwo\",\"userThree\",\"Alice\"] Output: \"Alice\" Explanation: Alice sends a total of 2 + 3 = 5 words. userTwo sends a total of 2 words. userThree sends a total of 3 words. Since Alice has the largest word count, we return \"Alice\". Example 2: Input: messages = [\"How is leetcode for everyone\",\"Leetcode is useful for practice\"], senders = [\"Bob\",\"Charlie\"] Output: \"Charlie\" Explanation: Bob sends a total of 5 words. Charlie sends a total of 5 words. Since there is a tie for the largest word count, we return the sender with the lexicographically larger name, Charlie.   Constraints: n == messages.length == senders.length 1 <= n <= 104 1 <= messages[i].length <= 100 1 <= senders[i].length <= 10 messages[i] consists of uppercase and lowercase English letters and ' '. All the words in messages[i] are separated by a single space. messages[i] does not have leading or trailing spaces. senders[i] consists of uppercase and lowercase English letters only.",
        "1709": "You are given an integer n denoting the number of cities in a country. The cities are numbered from 0 to n - 1. You are also given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi. You need to assign each city with an integer value from 1 to n, where each value can only be used once. The importance of a road is then defined as the sum of the values of the two cities it connects. Return the maximum total importance of all roads possible after assigning the values optimally.   Example 1: Input: n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]] Output: 43 Explanation: The figure above shows the country and the assigned values of [2,4,5,3,1]. - The road (0,1) has an importance of 2 + 4 = 6. - The road (1,2) has an importance of 4 + 5 = 9. - The road (2,3) has an importance of 5 + 3 = 8. - The road (0,2) has an importance of 2 + 5 = 7. - The road (1,3) has an importance of 4 + 3 = 7. - The road (2,4) has an importance of 5 + 1 = 6. The total importance of all roads is 6 + 9 + 8 + 7 + 7 + 6 = 43. It can be shown that we cannot obtain a greater total importance than 43. Example 2: Input: n = 5, roads = [[0,3],[2,4],[1,3]] Output: 20 Explanation: The figure above shows the country and the assigned values of [4,3,2,5,1]. - The road (0,3) has an importance of 4 + 5 = 9. - The road (2,4) has an importance of 2 + 1 = 3. - The road (1,3) has an importance of 3 + 5 = 8. The total importance of all roads is 9 + 3 + 8 = 20. It can be shown that we cannot obtain a greater total importance than 20.   Constraints: 2 <= n <= 5 * 104 1 <= roads.length <= 5 * 104 roads[i].length == 2 0 <= ai, bi <= n - 1 ai != bi There are no duplicate roads.",
        "1710": "A concert hall has n rows numbered from 0 to n - 1, each with m seats, numbered from 0 to m - 1. You need to design a ticketing system that can allocate seats in the following cases: If a group of k spectators can sit together in a row. If every member of a group of k spectators can get a seat. They may or may not sit together. Note that the spectators are very picky. Hence: They will book seats only if each member of their group can get a seat with row number less than or equal to maxRow. maxRow can vary from group to group. In case there are multiple rows to choose from, the row with the smallest number is chosen. If there are multiple seats to choose in the same row, the seat with the smallest number is chosen. Implement the BookMyShow class: BookMyShow(int n, int m) Initializes the object with n as number of rows and m as number of seats per row. int[] gather(int k, int maxRow) Returns an array of length 2 denoting the row and seat number (respectively) of the first seat being allocated to the k members of the group, who must sit together. In other words, it returns the smallest possible r and c such that all [c, c + k - 1] seats are valid and empty in row r, and r <= maxRow. Returns [] in case it is not possible to allocate seats to the group. boolean scatter(int k, int maxRow) Returns true if all k members of the group can be allocated seats in rows 0 to maxRow, who may or may not sit together. If the seats can be allocated, it allocates k seats to the group with the smallest row numbers, and the smallest possible seat numbers in each row. Otherwise, returns false.   Example 1: Input [\"BookMyShow\", \"gather\", \"gather\", \"scatter\", \"scatter\"] [[2, 5], [4, 0], [2, 0], [5, 1], [5, 1]] Output [null, [0, 0], [], true, false]  Explanation BookMyShow bms = new BookMyShow(2, 5); // There are 2 rows with 5 seats each  bms.gather(4, 0); // return [0, 0]                   // The group books seats [0, 3] of row 0.  bms.gather(2, 0); // return []                   // There is only 1 seat left in row 0,                   // so it is not possible to book 2 consecutive seats.  bms.scatter(5, 1); // return True                    // The group books seat 4 of row 0 and seats [0, 3] of row 1.  bms.scatter(5, 1); // return False                    // There is only one seat left in the hall.   Constraints: 1 <= n <= 5 * 104 1 <= m, k <= 109 0 <= maxRow <= n - 1 At most 5 * 104 calls in total will be made to gather and scatter.",
        "1711": "You are given two 0-indexed strings s and target. You can take some letters from s and rearrange them to form new strings. Return the maximum number of copies of target that can be formed by taking letters from s and rearranging them.   Example 1: Input: s = \"ilovecodingonleetcode\", target = \"code\" Output: 2 Explanation: For the first copy of \"code\", take the letters at indices 4, 5, 6, and 7. For the second copy of \"code\", take the letters at indices 17, 18, 19, and 20. The strings that are formed are \"ecod\" and \"code\" which can both be rearranged into \"code\". We can make at most two copies of \"code\", so we return 2. Example 2: Input: s = \"abcba\", target = \"abc\" Output: 1 Explanation: We can make one copy of \"abc\" by taking the letters at indices 0, 1, and 2. We can make at most one copy of \"abc\", so we return 1. Note that while there is an extra 'a' and 'b' at indices 3 and 4, we cannot reuse the letter 'c' at index 2, so we cannot make a second copy of \"abc\". Example 3: Input: s = \"abbaccaddaeea\", target = \"aaaaa\" Output: 1 Explanation: We can make one copy of \"aaaaa\" by taking the letters at indices 0, 3, 6, 9, and 12. We can make at most one copy of \"aaaaa\", so we return 1.   Constraints: 1 <= s.length <= 100 1 <= target.length <= 10 s and target consist of lowercase English letters.   Note: This question is the same as 1189: Maximum Number of Balloons.",
        "1712": "A sentence is a string of single-space separated words where each word can contain digits, lowercase letters, and the dollar sign '$'. A word represents a price if it is a sequence of digits preceded by a dollar sign. For example, \"$100\", \"$23\", and \"$6\" represent prices while \"100\", \"$\", and \"$1e5\" do not. You are given a string sentence representing a sentence and an integer discount. For each word representing a price, apply a discount of discount% on the price and update the word in the sentence. All updated prices should be represented with exactly two decimal places. Return a string representing the modified sentence. Note that all prices will contain at most 10 digits.   Example 1: Input: sentence = \"there are $1 $2 and 5$ candies in the shop\", discount = 50 Output: \"there are $0.50 $1.00 and 5$ candies in the shop\" Explanation:  The words which represent prices are \"$1\" and \"$2\".  - A 50% discount on \"$1\" yields \"$0.50\", so \"$1\" is replaced by \"$0.50\". - A 50% discount on \"$2\" yields \"$1\". Since we need to have exactly 2 decimal places after a price, we replace \"$2\" with \"$1.00\". Example 2: Input: sentence = \"1 2 $3 4 $5 $6 7 8$ $9 $10$\", discount = 100 Output: \"1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$\" Explanation:  Applying a 100% discount on any price will result in 0. The words representing prices are \"$3\", \"$5\", \"$6\", and \"$9\". Each of them is replaced by \"$0.00\".   Constraints: 1 <= sentence.length <= 105 sentence consists of lowercase English letters, digits, ' ', and '$'. sentence does not have leading or trailing spaces. All words in sentence are separated by a single space. All prices will be positive numbers without leading zeros. All prices will have at most 10 digits. 0 <= discount <= 100",
        "1713": "You are given a 0-indexed integer array nums. In one step, remove all elements nums[i] where nums[i - 1] > nums[i] for all 0 < i < nums.length. Return the number of steps performed until nums becomes a non-decreasing array.   Example 1: Input: nums = [5,3,4,4,7,3,6,11,8,5,11] Output: 3 Explanation: The following are the steps performed: - Step 1: [5,3,4,4,7,3,6,11,8,5,11] becomes [5,4,4,7,6,11,11] - Step 2: [5,4,4,7,6,11,11] becomes [5,4,7,11,11] - Step 3: [5,4,7,11,11] becomes [5,7,11,11] [5,7,11,11] is a non-decreasing array. Therefore, we return 3. Example 2: Input: nums = [4,5,7,7,13] Output: 0 Explanation: nums is already a non-decreasing array. Therefore, we return 0.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109",
        "1714": "You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values: 0 represents an empty cell, 1 represents an obstacle that may be removed. You can move up, down, left, or right from and to an empty cell. Return the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).   Example 1: Input: grid = [[0,1,1],[1,1,0],[1,1,0]] Output: 2 Explanation: We can remove the obstacles at (0, 1) and (0, 2) to create a path from (0, 0) to (2, 2). It can be shown that we need to remove at least 2 obstacles, so we return 2. Note that there may be other ways to remove 2 obstacles to create a path. Example 2: Input: grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]] Output: 0 Explanation: We can move from (0, 0) to (2, 4) without removing any obstacles, so we return 0.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 105 2 <= m * n <= 105 grid[i][j] is either 0 or 1. grid[0][0] == grid[m - 1][n - 1] == 0",
        "1715": "You are given an integer array nums and an integer k. You may partition nums into one or more subsequences such that each element in nums appears in exactly one of the subsequences. Return the minimum number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is at most k. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.   Example 1: Input: nums = [3,6,1,2,5], k = 2 Output: 2 Explanation: We can partition nums into the two subsequences [3,1,2] and [6,5]. The difference between the maximum and minimum value in the first subsequence is 3 - 1 = 2. The difference between the maximum and minimum value in the second subsequence is 6 - 5 = 1. Since two subsequences were created, we return 2. It can be shown that 2 is the minimum number of subsequences needed. Example 2: Input: nums = [1,2,3], k = 1 Output: 2 Explanation: We can partition nums into the two subsequences [1,2] and [3]. The difference between the maximum and minimum value in the first subsequence is 2 - 1 = 1. The difference between the maximum and minimum value in the second subsequence is 3 - 3 = 0. Since two subsequences were created, we return 2. Note that another optimal solution is to partition nums into the two subsequences [1] and [2,3]. Example 3: Input: nums = [2,2,4,5], k = 0 Output: 3 Explanation: We can partition nums into the three subsequences [2,2], [4], and [5]. The difference between the maximum and minimum value in the first subsequences is 2 - 2 = 0. The difference between the maximum and minimum value in the second subsequences is 4 - 4 = 0. The difference between the maximum and minimum value in the third subsequences is 5 - 5 = 0. Since three subsequences were created, we return 3. It can be shown that 3 is the minimum number of subsequences needed.   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 105 0 <= k <= 105",
        "1716": "You are given a 0-indexed array nums that consists of n distinct positive integers. Apply m operations to this array, where in the ith operation you replace the number operations[i][0] with operations[i][1]. It is guaranteed that in the ith operation: operations[i][0] exists in nums. operations[i][1] does not exist in nums. Return the array obtained after applying all the operations.   Example 1: Input: nums = [1,2,4,6], operations = [[1,3],[4,7],[6,1]] Output: [3,2,7,1] Explanation: We perform the following operations on nums: - Replace the number 1 with 3. nums becomes [3,2,4,6]. - Replace the number 4 with 7. nums becomes [3,2,7,6]. - Replace the number 6 with 1. nums becomes [3,2,7,1]. We return the final array [3,2,7,1]. Example 2: Input: nums = [1,2], operations = [[1,3],[2,1],[3,2]] Output: [2,1] Explanation: We perform the following operations to nums: - Replace the number 1 with 3. nums becomes [3,2]. - Replace the number 2 with 1. nums becomes [3,1]. - Replace the number 3 with 2. nums becomes [2,1]. We return the array [2,1].   Constraints: n == nums.length m == operations.length 1 <= n, m <= 105 All the values of nums are distinct. operations[i].length == 2 1 <= nums[i], operations[i][0], operations[i][1] <= 106 operations[i][0] will exist in nums when applying the ith operation. operations[i][1] will not exist in nums when applying the ith operation.",
        "1717": "Design a text editor with a cursor that can do the following: Add text to where the cursor is. Delete text from where the cursor is (simulating the backspace key). Move the cursor either left or right. When deleting text, only characters to the left of the cursor will be deleted. The cursor will also remain within the actual text and cannot be moved beyond it. More formally, we have that 0 <= cursor.position <= currentText.length always holds. Implement the TextEditor class: TextEditor() Initializes the object with empty text. void addText(string text) Appends text to where the cursor is. The cursor ends to the right of text. int deleteText(int k) Deletes k characters to the left of the cursor. Returns the number of characters actually deleted. string cursorLeft(int k) Moves the cursor to the left k times. Returns the last min(10, len) characters to the left of the cursor, where len is the number of characters to the left of the cursor. string cursorRight(int k) Moves the cursor to the right k times. Returns the last min(10, len) characters to the left of the cursor, where len is the number of characters to the left of the cursor.   Example 1: Input [\"TextEditor\", \"addText\", \"deleteText\", \"addText\", \"cursorRight\", \"cursorLeft\", \"deleteText\", \"cursorLeft\", \"cursorRight\"] [[], [\"leetcode\"], [4], [\"practice\"], [3], [8], [10], [2], [6]] Output [null, null, 4, null, \"etpractice\", \"leet\", 4, \"\", \"practi\"]  Explanation TextEditor textEditor = new TextEditor(); // The current text is \"|\". (The '|' character represents the cursor) textEditor.addText(\"leetcode\"); // The current text is \"leetcode|\". textEditor.deleteText(4); // return 4                           // The current text is \"leet|\".                            // 4 characters were deleted. textEditor.addText(\"practice\"); // The current text is \"leetpractice|\".  textEditor.cursorRight(3); // return \"etpractice\"                            // The current text is \"leetpractice|\".                             // The cursor cannot be moved beyond the actual text and thus did not move.                            // \"etpractice\" is the last 10 characters to the left of the cursor. textEditor.cursorLeft(8); // return \"leet\"                           // The current text is \"leet|practice\".                           // \"leet\" is the last min(10, 4) = 4 characters to the left of the cursor. textEditor.deleteText(10); // return 4                            // The current text is \"|practice\".                            // Only 4 characters were deleted. textEditor.cursorLeft(2); // return \"\"                           // The current text is \"|practice\".                           // The cursor cannot be moved beyond the actual text and thus did not move.                            // \"\" is the last min(10, 0) = 0 characters to the left of the cursor. textEditor.cursorRight(6); // return \"practi\"                            // The current text is \"practi|ce\".                            // \"practi\" is the last min(10, 6) = 6 characters to the left of the cursor.   Constraints: 1 <= text.length, k <= 40 text consists of lowercase English letters. At most 2 * 104 calls in total will be made to addText, deleteText, cursorLeft and cursorRight.   Follow-up: Could you find a solution with time complexity of O(k) per call?",
        "1718": "A password is said to be strong if it satisfies all the following criteria: It has at least 8 characters. It contains at least one lowercase letter. It contains at least one uppercase letter. It contains at least one digit. It contains at least one special character. The special characters are the characters in the following string: \"!@#$%^&*()-+\". It does not contain 2 of the same character in adjacent positions (i.e., \"aab\" violates this condition, but \"aba\" does not). Given a string password, return true if it is a strong password. Otherwise, return false.   Example 1: Input: password = \"IloveLe3tcode!\" Output: true Explanation: The password meets all the requirements. Therefore, we return true. Example 2: Input: password = \"Me+You--IsMyDream\" Output: false Explanation: The password does not contain a digit and also contains 2 of the same character in adjacent positions. Therefore, we return false. Example 3: Input: password = \"1aB!\" Output: false Explanation: The password does not meet the length requirement. Therefore, we return false.   Constraints: 1 <= password.length <= 100 password consists of letters, digits, and special characters: \"!@#$%^&*()-+\".",
        "1719": "You are given two positive integer arrays spells and potions, of length n and m respectively, where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion. You are also given an integer success. A spell and potion pair is considered successful if the product of their strengths is at least success. Return an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell.   Example 1: Input: spells = [5,1,3], potions = [1,2,3,4,5], success = 7 Output: [4,0,3] Explanation: - 0th spell: 5 * [1,2,3,4,5] = [5,10,15,20,25]. 4 pairs are successful. - 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful. - 2nd spell: 3 * [1,2,3,4,5] = [3,6,9,12,15]. 3 pairs are successful. Thus, [4,0,3] is returned. Example 2: Input: spells = [3,1,2], potions = [8,5,8], success = 16 Output: [2,0,2] Explanation: - 0th spell: 3 * [8,5,8] = [24,15,24]. 2 pairs are successful. - 1st spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful.  - 2nd spell: 2 * [8,5,8] = [16,10,16]. 2 pairs are successful.  Thus, [2,0,2] is returned.   Constraints: n == spells.length m == potions.length 1 <= n, m <= 105 1 <= spells[i], potions[i] <= 105 1 <= success <= 1010",
        "1720": "The score of an array is defined as the product of its sum and its length. For example, the score of [1, 2, 3, 4, 5] is (1 + 2 + 3 + 4 + 5) * 5 = 75. Given a positive integer array nums and an integer k, return the number of non-empty subarrays of nums whose score is strictly less than k. A subarray is a contiguous sequence of elements within an array.   Example 1: Input: nums = [2,1,4,3,5], k = 10 Output: 6 Explanation: The 6 subarrays having scores less than 10 are: - [2] with score 2 * 1 = 2. - [1] with score 1 * 1 = 1. - [4] with score 4 * 1 = 4. - [3] with score 3 * 1 = 3.  - [5] with score 5 * 1 = 5. - [2,1] with score (2 + 1) * 2 = 6. Note that subarrays such as [1,4] and [4,3,5] are not considered because their scores are 10 and 36 respectively, while we need scores strictly less than 10. Example 2: Input: nums = [1,1,1], k = 5 Output: 5 Explanation: Every subarray except [1,1,1] has a score less than 5. [1,1,1] has a score (1 + 1 + 1) * 3 = 9, which is greater than 5. Thus, there are 5 subarrays having scores less than 5.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105 1 <= k <= 1015",
        "1721": "You are given a 0-indexed 2D integer array brackets where brackets[i] = [upperi, percenti] means that the ith tax bracket has an upper bound of upperi and is taxed at a rate of percenti. The brackets are sorted by upper bound (i.e. upperi-1 < upperi for 0 < i < brackets.length). Tax is calculated as follows: The first upper0 dollars earned are taxed at a rate of percent0. The next upper1 - upper0 dollars earned are taxed at a rate of percent1. The next upper2 - upper1 dollars earned are taxed at a rate of percent2. And so on. You are given an integer income representing the amount of money you earned. Return the amount of money that you have to pay in taxes. Answers within 10-5 of the actual answer will be accepted.   Example 1: Input: brackets = [[3,50],[7,10],[12,25]], income = 10 Output: 2.65000 Explanation: Based on your income, you have 3 dollars in the 1st tax bracket, 4 dollars in the 2nd tax bracket, and 3 dollars in the 3rd tax bracket. The tax rate for the three tax brackets is 50%, 10%, and 25%, respectively. In total, you pay $3 * 50% + $4 * 10% + $3 * 25% = $2.65 in taxes. Example 2: Input: brackets = [[1,0],[4,25],[5,50]], income = 2 Output: 0.25000 Explanation: Based on your income, you have 1 dollar in the 1st tax bracket and 1 dollar in the 2nd tax bracket. The tax rate for the two tax brackets is 0% and 25%, respectively. In total, you pay $1 * 0% + $1 * 25% = $0.25 in taxes. Example 3: Input: brackets = [[2,50]], income = 0 Output: 0.00000 Explanation: You have no income to tax, so you have to pay a total of $0 in taxes.   Constraints: 1 <= brackets.length <= 100 1 <= upperi <= 1000 0 <= percenti <= 100 0 <= income <= 1000 upperi is sorted in ascending order. All the values of upperi are unique. The upper bound of the last tax bracket is greater than or equal to income.",
        "1722": "You are given a 0-indexed m x n integer matrix grid consisting of distinct integers from 0 to m * n - 1. You can move in this matrix from a cell to any other cell in the next row. That is, if you are in cell (x, y) such that x < m - 1, you can move to any of the cells (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1). Note that it is not possible to move from cells in the last row. Each possible move has a cost given by a 0-indexed 2D array moveCost of size (m * n) x n, where moveCost[i][j] is the cost of moving from a cell with value i to a cell in column j of the next row. The cost of moving from cells in the last row of grid can be ignored. The cost of a path in grid is the sum of all values of cells visited plus the sum of costs of all the moves made. Return the minimum cost of a path that starts from any cell in the first row and ends at any cell in the last row.   Example 1: Input: grid = [[5,3],[4,0],[2,1]], moveCost = [[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]] Output: 17 Explanation: The path with the minimum possible cost is the path 5 -> 0 -> 1. - The sum of the values of cells visited is 5 + 0 + 1 = 6. - The cost of moving from 5 to 0 is 3. - The cost of moving from 0 to 1 is 8. So the total cost of the path is 6 + 3 + 8 = 17. Example 2: Input: grid = [[5,1,2],[4,0,3]], moveCost = [[12,10,15],[20,23,8],[21,7,1],[8,1,13],[9,10,25],[5,3,2]] Output: 6 Explanation: The path with the minimum possible cost is the path 2 -> 3. - The sum of the values of cells visited is 2 + 3 = 5. - The cost of moving from 2 to 3 is 1. So the total cost of this path is 5 + 1 = 6.   Constraints: m == grid.length n == grid[i].length 2 <= m, n <= 50 grid consists of distinct integers from 0 to m * n - 1. moveCost.length == m * n moveCost[i].length == n 1 <= moveCost[i][j] <= 100",
        "1723": "You are given an integer array cookies, where cookies[i] denotes the number of cookies in the ith bag. You are also given an integer k that denotes the number of children to distribute all the bags of cookies to. All the cookies in the same bag must go to the same child and cannot be split up. The unfairness of a distribution is defined as the maximum total cookies obtained by a single child in the distribution. Return the minimum unfairness of all distributions.   Example 1: Input: cookies = [8,15,10,20,8], k = 2 Output: 31 Explanation: One optimal distribution is [8,15,8] and [10,20] - The 1st child receives [8,15,8] which has a total of 8 + 15 + 8 = 31 cookies. - The 2nd child receives [10,20] which has a total of 10 + 20 = 30 cookies. The unfairness of the distribution is max(31,30) = 31. It can be shown that there is no distribution with an unfairness less than 31. Example 2: Input: cookies = [6,1,3,2,2,4,1,2], k = 3 Output: 7 Explanation: One optimal distribution is [6,1], [3,2,2], and [4,1,2] - The 1st child receives [6,1] which has a total of 6 + 1 = 7 cookies. - The 2nd child receives [3,2,2] which has a total of 3 + 2 + 2 = 7 cookies. - The 3rd child receives [4,1,2] which has a total of 4 + 1 + 2 = 7 cookies. The unfairness of the distribution is max(7,7,7) = 7. It can be shown that there is no distribution with an unfairness less than 7.   Constraints: 2 <= cookies.length <= 8 1 <= cookies[i] <= 105 2 <= k <= cookies.length",
        "1724": "You are given an array of strings ideas that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows: Choose 2 distinct names from ideas, call them ideaA and ideaB. Swap the first letters of ideaA and ideaB with each other. If both of the new names are not found in the original ideas, then the name ideaA ideaB (the concatenation of ideaA and ideaB, separated by a space) is a valid company name. Otherwise, it is not a valid name. Return the number of distinct valid names for the company.   Example 1: Input: ideas = [\"coffee\",\"donuts\",\"time\",\"toffee\"] Output: 6 Explanation: The following selections are valid: - (\"coffee\", \"donuts\"): The company name created is \"doffee conuts\". - (\"donuts\", \"coffee\"): The company name created is \"conuts doffee\". - (\"donuts\", \"time\"): The company name created is \"tonuts dime\". - (\"donuts\", \"toffee\"): The company name created is \"tonuts doffee\". - (\"time\", \"donuts\"): The company name created is \"dime tonuts\". - (\"toffee\", \"donuts\"): The company name created is \"doffee tonuts\". Therefore, there are a total of 6 distinct company names.  The following are some examples of invalid selections: - (\"coffee\", \"time\"): The name \"toffee\" formed after swapping already exists in the original array. - (\"time\", \"toffee\"): Both names are still the same after swapping and exist in the original array. - (\"coffee\", \"toffee\"): Both names formed after swapping already exist in the original array. Example 2: Input: ideas = [\"lack\",\"back\"] Output: 0 Explanation: There are no valid selections. Therefore, 0 is returned.   Constraints: 2 <= ideas.length <= 5 * 104 1 <= ideas[i].length <= 10 ideas[i] consists of lowercase English letters. All the strings in ideas are unique.",
        "1725": "Given two integers num and k, consider a set of positive integers with the following properties: The units digit of each integer is k. The sum of the integers is num. Return the minimum possible size of such a set, or -1 if no such set exists. Note: The set can contain multiple instances of the same integer, and the sum of an empty set is considered 0. The units digit of a number is the rightmost digit of the number.   Example 1: Input: num = 58, k = 9 Output: 2 Explanation: One valid set is [9,49], as the sum is 58 and each integer has a units digit of 9. Another valid set is [19,39]. It can be shown that 2 is the minimum possible size of a valid set. Example 2: Input: num = 37, k = 2 Output: -1 Explanation: It is not possible to obtain a sum of 37 using only integers that have a units digit of 2. Example 3: Input: num = 0, k = 7 Output: 0 Explanation: The sum of an empty set is considered 0.   Constraints: 0 <= num <= 3000 0 <= k <= 9",
        "1726": "You are given a binary string s and a positive integer k. Return the length of the longest subsequence of s that makes up a binary number less than or equal to k. Note: The subsequence can contain leading zeroes. The empty string is considered to be equal to 0. A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.   Example 1: Input: s = \"1001010\", k = 5 Output: 5 Explanation: The longest subsequence of s that makes up a binary number less than or equal to 5 is \"00010\", as this number is equal to 2 in decimal. Note that \"00100\" and \"00101\" are also possible, which are equal to 4 and 5 in decimal, respectively. The length of this subsequence is 5, so 5 is returned. Example 2: Input: s = \"00101001\", k = 1 Output: 6 Explanation: \"000001\" is the longest subsequence of s that makes up a binary number less than or equal to 1, as this number is equal to 1 in decimal. The length of this subsequence is 6, so 6 is returned.   Constraints: 1 <= s.length <= 1000 s[i] is either '0' or '1'. 1 <= k <= 109",
        "1727": "You are given two integers m and n that represent the height and width of a rectangular piece of wood. You are also given a 2D integer array prices, where prices[i] = [hi, wi, pricei] indicates you can sell a rectangular piece of wood of height hi and width wi for pricei dollars. To cut a piece of wood, you must make a vertical or horizontal cut across the entire height or width of the piece to split it into two smaller pieces. After cutting a piece of wood into some number of smaller pieces, you can sell pieces according to prices. You may sell multiple pieces of the same shape, and you do not have to sell all the shapes. The grain of the wood makes a difference, so you cannot rotate a piece to swap its height and width. Return the maximum money you can earn after cutting an m x n piece of wood. Note that you can cut the piece of wood as many times as you want.   Example 1: Input: m = 3, n = 5, prices = [[1,4,2],[2,2,7],[2,1,3]] Output: 19 Explanation: The diagram above shows a possible scenario. It consists of: - 2 pieces of wood shaped 2 x 2, selling for a price of 2 * 7 = 14. - 1 piece of wood shaped 2 x 1, selling for a price of 1 * 3 = 3. - 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2. This obtains a total of 14 + 3 + 2 = 19 money earned. It can be shown that 19 is the maximum amount of money that can be earned. Example 2: Input: m = 4, n = 6, prices = [[3,2,10],[1,4,2],[4,1,3]] Output: 32 Explanation: The diagram above shows a possible scenario. It consists of: - 3 pieces of wood shaped 3 x 2, selling for a price of 3 * 10 = 30. - 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2. This obtains a total of 30 + 2 = 32 money earned. It can be shown that 32 is the maximum amount of money that can be earned. Notice that we cannot rotate the 1 x 4 piece of wood to obtain a 4 x 1 piece of wood.   Constraints: 1 <= m, n <= 200 1 <= prices.length <= 2 * 104 prices[i].length == 3 1 <= hi <= m 1 <= wi <= n 1 <= pricei <= 106 All the shapes of wood (hi, wi) are pairwise distinct.",
        "1728": "You are given a string s, where every two consecutive vertical bars '|' are grouped into a pair. In other words, the 1st and 2nd '|' make a pair, the 3rd and 4th '|' make a pair, and so forth. Return the number of '*' in s, excluding the '*' between each pair of '|'. Note that each '|' will belong to exactly one pair.   Example 1: Input: s = \"l|*e*et|c**o|*de|\" Output: 2 Explanation: The considered characters are underlined: \"l|*e*et|c**o|*de|\". The characters between the first and second '|' are excluded from the answer. Also, the characters between the third and fourth '|' are excluded from the answer. There are 2 asterisks considered. Therefore, we return 2. Example 2: Input: s = \"iamprogrammer\" Output: 0 Explanation: In this example, there are no asterisks in s. Therefore, we return 0. Example 3: Input: s = \"yo|uar|e**|b|e***au|tifu|l\" Output: 5 Explanation: The considered characters are underlined: \"yo|uar|e**|b|e***au|tifu|l\". There are 5 asterisks considered. Therefore, we return 5.   Constraints: 1 <= s.length <= 1000 s consists of lowercase English letters, vertical bars '|', and asterisks '*'. s contains an even number of vertical bars '|'.",
        "1729": "You are given a 0-indexed integer array nums. In one operation, select any non-negative integer x and an index i, then update nums[i] to be equal to nums[i] AND (nums[i] XOR x). Note that AND is the bitwise AND operation and XOR is the bitwise XOR operation. Return the maximum possible bitwise XOR of all elements of nums after applying the operation any number of times.   Example 1: Input: nums = [3,2,4,6] Output: 7 Explanation: Apply the operation with x = 4 and i = 3, num[3] = 6 AND (6 XOR 4) = 6 AND 2 = 2. Now, nums = [3, 2, 4, 2] and the bitwise XOR of all the elements = 3 XOR 2 XOR 4 XOR 2 = 7. It can be shown that 7 is the maximum possible bitwise XOR. Note that other operations may be used to achieve a bitwise XOR of 7. Example 2: Input: nums = [1,2,3,9,2] Output: 11 Explanation: Apply the operation zero times. The bitwise XOR of all the elements = 1 XOR 2 XOR 3 XOR 9 XOR 2 = 11. It can be shown that 11 is the maximum possible bitwise XOR.   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 108",
        "1730": "You are given an integer n. You roll a fair 6-sided dice n times. Determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied: The greatest common divisor of any adjacent values in the sequence is equal to 1. There is at least a gap of 2 rolls between equal valued rolls. More formally, if the value of the ith roll is equal to the value of the jth roll, then abs(i - j) > 2. Return the total number of distinct sequences possible. Since the answer may be very large, return it modulo 109 + 7. Two sequences are considered distinct if at least one element is different.   Example 1: Input: n = 4 Output: 184 Explanation: Some of the possible sequences are (1, 2, 3, 4), (6, 1, 2, 3), (1, 2, 3, 1), etc. Some invalid sequences are (1, 2, 1, 3), (1, 2, 3, 6). (1, 2, 1, 3) is invalid since the first and third roll have an equal value and abs(1 - 3) = 2 (i and j are 1-indexed). (1, 2, 3, 6) is invalid since the greatest common divisor of 3 and 6 = 3. There are a total of 184 distinct sequences possible, so we return 184. Example 2: Input: n = 2 Output: 22 Explanation: Some of the possible sequences are (1, 2), (2, 1), (3, 2). Some invalid sequences are (3, 6), (2, 4) since the greatest common divisor is not equal to 1. There are a total of 22 distinct sequences possible, so we return 22.   Constraints: 1 <= n <= 104",
        "1731": "A square matrix is said to be an X-Matrix if both of the following conditions hold: All the elements in the diagonals of the matrix are non-zero. All other elements are 0. Given a 2D integer array grid of size n x n representing a square matrix, return true if grid is an X-Matrix. Otherwise, return false.   Example 1: Input: grid = [[2,0,0,1],[0,3,1,0],[0,5,2,0],[4,0,0,2]] Output: true Explanation: Refer to the diagram above.  An X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0. Thus, grid is an X-Matrix. Example 2: Input: grid = [[5,7,0],[0,3,1],[0,5,0]] Output: false Explanation: Refer to the diagram above. An X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0. Thus, grid is not an X-Matrix.   Constraints: n == grid.length == grid[i].length 3 <= n <= 100 0 <= grid[i][j] <= 105",
        "1732": "There is a street with n * 2 plots, where there are n plots on each side of the street. The plots on each side are numbered from 1 to n. On each plot, a house can be placed. Return the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street. Since the answer may be very large, return it modulo 109 + 7. Note that if a house is placed on the ith plot on one side of the street, a house can also be placed on the ith plot on the other side of the street.   Example 1: Input: n = 1 Output: 4 Explanation:  Possible arrangements: 1. All plots are empty. 2. A house is placed on one side of the street. 3. A house is placed on the other side of the street. 4. Two houses are placed, one on each side of the street. Example 2: Input: n = 2 Output: 9 Explanation: The 9 possible arrangements are shown in the diagram above.   Constraints: 1 <= n <= 104",
        "1733": "You are given two 0-indexed integer arrays nums1 and nums2, both of length n. You can choose two integers left and right where 0 <= left <= right < n and swap the subarray nums1[left...right] with the subarray nums2[left...right]. For example, if nums1 = [1,2,3,4,5] and nums2 = [11,12,13,14,15] and you choose left = 1 and right = 2, nums1 becomes [1,12,13,4,5] and nums2 becomes [11,2,3,14,15]. You may choose to apply the mentioned operation once or not do anything. The score of the arrays is the maximum of sum(nums1) and sum(nums2), where sum(arr) is the sum of all the elements in the array arr. Return the maximum possible score. A subarray is a contiguous sequence of elements within an array. arr[left...right] denotes the subarray that contains the elements of nums between indices left and right (inclusive).   Example 1: Input: nums1 = [60,60,60], nums2 = [10,90,10] Output: 210 Explanation: Choosing left = 1 and right = 1, we have nums1 = [60,90,60] and nums2 = [10,60,10]. The score is max(sum(nums1), sum(nums2)) = max(210, 80) = 210. Example 2: Input: nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20] Output: 220 Explanation: Choosing left = 3, right = 4, we have nums1 = [20,40,20,40,20] and nums2 = [50,20,50,70,30]. The score is max(sum(nums1), sum(nums2)) = max(140, 220) = 220. Example 3: Input: nums1 = [7,11,13], nums2 = [1,1,1] Output: 31 Explanation: We choose not to swap any subarray. The score is max(sum(nums1), sum(nums2)) = max(31, 3) = 31.   Constraints: n == nums1.length == nums2.length 1 <= n <= 105 1 <= nums1[i], nums2[i] <= 104",
        "1734": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges. You are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. Remove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined: Get the XOR of all the values of the nodes for each of the three components respectively. The difference between the largest XOR value and the smallest XOR value is the score of the pair. For example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. The three XOR values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. The largest XOR value is 8 and the smallest XOR value is 3. The score is then 8 - 3 = 5. Return the minimum score of any possible pair of edge removals on the given tree.   Example 1: Input: nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]] Output: 9 Explanation: The diagram above shows a way to make a pair of removals. - The 1st component has nodes [1,3,4] with values [5,4,11]. Its XOR value is 5 ^ 4 ^ 11 = 10. - The 2nd component has node [0] with value [1]. Its XOR value is 1 = 1. - The 3rd component has node [2] with value [5]. Its XOR value is 5 = 5. The score is the difference between the largest and smallest XOR value which is 10 - 1 = 9. It can be shown that no other pair of removals will obtain a smaller score than 9. Example 2: Input: nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]] Output: 0 Explanation: The diagram above shows a way to make a pair of removals. - The 1st component has nodes [3,4] with values [4,4]. Its XOR value is 4 ^ 4 = 0. - The 2nd component has nodes [1,0] with values [5,5]. Its XOR value is 5 ^ 5 = 0. - The 3rd component has nodes [2,5] with values [2,2]. Its XOR value is 2 ^ 2 = 0. The score is the difference between the largest and smallest XOR value which is 0 - 0 = 0. We cannot obtain a smaller score than 0.   Constraints: n == nums.length 3 <= n <= 1000 1 <= nums[i] <= 108 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n ai != bi edges represents a valid tree.",
        "1735": "You are given the strings key and message, which represent a cipher key and a secret message, respectively. The steps to decode message are as follows: Use the first appearance of all 26 lowercase English letters in key as the order of the substitution table. Align the substitution table with the regular English alphabet. Each letter in message is then substituted using the table. Spaces ' ' are transformed to themselves. For example, given key = \"happy boy\" (actual key would have at least one instance of each letter in the alphabet), we have the partial substitution table of ('h' -> 'a', 'a' -> 'b', 'p' -> 'c', 'y' -> 'd', 'b' -> 'e', 'o' -> 'f'). Return the decoded message.   Example 1: Input: key = \"the quick brown fox jumps over the lazy dog\", message = \"vkbs bs t suepuv\" Output: \"this is a secret\" Explanation: The diagram above shows the substitution table. It is obtained by taking the first appearance of each letter in \"the quick brown fox jumps over the lazy dog\". Example 2: Input: key = \"eljuxhpwnyrdgtqkviszcfmabo\", message = \"zwx hnfx lqantp mnoeius ycgk vcnjrdb\" Output: \"the five boxing wizards jump quickly\" Explanation: The diagram above shows the substitution table. It is obtained by taking the first appearance of each letter in \"eljuxhpwnyrdgtqkviszcfmabo\".   Constraints: 26 <= key.length <= 2000 key consists of lowercase English letters and ' '. key contains every letter in the English alphabet ('a' to 'z') at least once. 1 <= message.length <= 2000 message consists of lowercase English letters and ' '.",
        "1736": "On day 1, one person discovers a secret. You are given an integer delay, which means that each person will share the secret with a new person every day, starting from delay days after discovering the secret. You are also given an integer forget, which means that each person will forget the secret forget days after discovering it. A person cannot share the secret on the same day they forgot it, or on any day afterwards. Given an integer n, return the number of people who know the secret at the end of day n. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: n = 6, delay = 2, forget = 4 Output: 5 Explanation: Day 1: Suppose the first person is named A. (1 person) Day 2: A is the only person who knows the secret. (1 person) Day 3: A shares the secret with a new person, B. (2 people) Day 4: A shares the secret with a new person, C. (3 people) Day 5: A forgets the secret, and B shares the secret with a new person, D. (3 people) Day 6: B shares the secret with E, and C shares the secret with F. (5 people) Example 2: Input: n = 4, delay = 1, forget = 3 Output: 6 Explanation: Day 1: The first person is named A. (1 person) Day 2: A shares the secret with B. (2 people) Day 3: A and B share the secret with 2 new people, C and D. (4 people) Day 4: A forgets the secret. B, C, and D share the secret with 3 new people. (6 people)   Constraints: 2 <= n <= 1000 1 <= delay < forget <= n",
        "1737": "You are given an m x n integer matrix grid, where you can move from a cell to any adjacent cell in all 4 directions. Return the number of strictly increasing paths in the grid such that you can start from any cell and end at any cell. Since the answer may be very large, return it modulo 109 + 7. Two paths are considered different if they do not have exactly the same sequence of visited cells.   Example 1: Input: grid = [[1,1],[3,4]] Output: 8 Explanation: The strictly increasing paths are: - Paths with length 1: [1], [1], [3], [4]. - Paths with length 2: [1 -> 3], [1 -> 4], [3 -> 4]. - Paths with length 3: [1 -> 3 -> 4]. The total number of paths is 4 + 3 + 1 = 8. Example 2: Input: grid = [[1],[2]] Output: 3 Explanation: The strictly increasing paths are: - Paths with length 1: [1], [2]. - Paths with length 2: [1 -> 2]. The total number of paths is 2 + 1 = 3.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 1000 1 <= m * n <= 105 1 <= grid[i][j] <= 105",
        "1738": "You are given the root of a full binary tree with the following properties: Leaf nodes have either the value 0 or 1, where 0 represents False and 1 represents True. Non-leaf nodes have either the value 2 or 3, where 2 represents the boolean OR and 3 represents the boolean AND. The evaluation of a node is as follows: If the node is a leaf node, the evaluation is the value of the node, i.e. True or False. Otherwise, evaluate the node's two children and apply the boolean operation of its value with the children's evaluations. Return the boolean result of evaluating the root node. A full binary tree is a binary tree where each node has either 0 or 2 children. A leaf node is a node that has zero children.   Example 1: Input: root = [2,1,3,null,null,0,1] Output: true Explanation: The above diagram illustrates the evaluation process. The AND node evaluates to False AND True = False. The OR node evaluates to True OR False = True. The root node evaluates to True, so we return true. Example 2: Input: root = [0] Output: false Explanation: The root node is a leaf node and it evaluates to false, so we return false.   Constraints: The number of nodes in the tree is in the range [1, 1000]. 0 <= Node.val <= 3 Every node has either 0 or 2 children. Leaf nodes have a value of 0 or 1. Non-leaf nodes have a value of 2 or 3.",
        "1739": "You are given a 0-indexed integer array buses of length n, where buses[i] represents the departure time of the ith bus. You are also given a 0-indexed integer array passengers of length m, where passengers[j] represents the arrival time of the jth passenger. All bus departure times are unique. All passenger arrival times are unique. You are given an integer capacity, which represents the maximum number of passengers that can get on each bus. When a passenger arrives, they will wait in line for the next available bus. You can get on a bus that departs at x minutes if you arrive at y minutes where y <= x, and the bus is not full. Passengers with the earliest arrival times get on the bus first. More formally when a bus arrives, either: If capacity or fewer passengers are waiting for a bus, they will all get on the bus, or The capacity passengers with the earliest arrival times will get on the bus. Return the latest time you may arrive at the bus station to catch a bus. You cannot arrive at the same time as another passenger. Note: The arrays buses and passengers are not necessarily sorted.   Example 1: Input: buses = [10,20], passengers = [2,17,18,19], capacity = 2 Output: 16 Explanation: Suppose you arrive at time 16. At time 10, the first bus departs with the 0th passenger.  At time 20, the second bus departs with you and the 1st passenger. Note that you may not arrive at the same time as another passenger, which is why you must arrive before the 1st passenger to catch the bus. Example 2: Input: buses = [20,30,10], passengers = [19,13,26,4,25,11,21], capacity = 2 Output: 20 Explanation: Suppose you arrive at time 20. At time 10, the first bus departs with the 3rd passenger.  At time 20, the second bus departs with the 5th and 1st passengers. At time 30, the third bus departs with the 0th passenger and you. Notice if you had arrived any later, then the 6th passenger would have taken your seat on the third bus.   Constraints: n == buses.length m == passengers.length 1 <= n, m, capacity <= 105 2 <= buses[i], passengers[i] <= 109 Each element in buses is unique. Each element in passengers is unique.",
        "1740": "You are given two positive 0-indexed integer arrays nums1 and nums2, both of length n. The sum of squared difference of arrays nums1 and nums2 is defined as the sum of (nums1[i] - nums2[i])2 for each 0 <= i < n. You are also given two positive integers k1 and k2. You can modify any of the elements of nums1 by +1 or -1 at most k1 times. Similarly, you can modify any of the elements of nums2 by +1 or -1 at most k2 times. Return the minimum sum of squared difference after modifying array nums1 at most k1 times and modifying array nums2 at most k2 times. Note: You are allowed to modify the array elements to become negative integers.   Example 1: Input: nums1 = [1,2,3,4], nums2 = [2,10,20,19], k1 = 0, k2 = 0 Output: 579 Explanation: The elements in nums1 and nums2 cannot be modified because k1 = 0 and k2 = 0.  The sum of square difference will be: (1 - 2)2 + (2 - 10)2 + (3 - 20)2 + (4 - 19)2 = 579. Example 2: Input: nums1 = [1,4,10,12], nums2 = [5,8,6,9], k1 = 1, k2 = 1 Output: 43 Explanation: One way to obtain the minimum sum of square difference is:  - Increase nums1[0] once. - Increase nums2[2] once. The minimum of the sum of square difference will be:  (2 - 5)2 + (4 - 8)2 + (10 - 7)2 + (12 - 9)2 = 43. Note that, there are other ways to obtain the minimum of the sum of square difference, but there is no way to obtain a sum smaller than 43.   Constraints: n == nums1.length == nums2.length 1 <= n <= 105 0 <= nums1[i], nums2[i] <= 105 0 <= k1, k2 <= 109",
        "1741": "You are given an integer array nums and an integer threshold. Find any subarray of nums of length k such that every element in the subarray is greater than threshold / k. Return the size of any such subarray. If there is no such subarray, return -1. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [1,3,4,3,1], threshold = 6 Output: 3 Explanation: The subarray [3,4,3] has a size of 3, and every element is greater than 6 / 3 = 2. Note that this is the only valid subarray. Example 2: Input: nums = [6,5,6,5,8], threshold = 7 Output: 1 Explanation: The subarray [8] has a size of 1, and 8 > 7 / 1 = 7. So 1 is returned. Note that the subarray [6,5] has a size of 2, and every element is greater than 7 / 2 = 3.5.  Similarly, the subarrays [6,5,6], [6,5,6,5], [6,5,6,5,8] also satisfy the given conditions. Therefore, 2, 3, 4, or 5 may also be returned.   Constraints: 1 <= nums.length <= 105 1 <= nums[i], threshold <= 109",
        "1742": "You have a water dispenser that can dispense cold, warm, and hot water. Every second, you can either fill up 2 cups with different types of water, or 1 cup of any type of water. You are given a 0-indexed integer array amount of length 3 where amount[0], amount[1], and amount[2] denote the number of cold, warm, and hot water cups you need to fill respectively. Return the minimum number of seconds needed to fill up all the cups.   Example 1: Input: amount = [1,4,2] Output: 4 Explanation: One way to fill up the cups is: Second 1: Fill up a cold cup and a warm cup. Second 2: Fill up a warm cup and a hot cup. Second 3: Fill up a warm cup and a hot cup. Second 4: Fill up a warm cup. It can be proven that 4 is the minimum number of seconds needed. Example 2: Input: amount = [5,4,4] Output: 7 Explanation: One way to fill up the cups is: Second 1: Fill up a cold cup, and a hot cup. Second 2: Fill up a cold cup, and a warm cup. Second 3: Fill up a cold cup, and a warm cup. Second 4: Fill up a warm cup, and a hot cup. Second 5: Fill up a cold cup, and a hot cup. Second 6: Fill up a cold cup, and a warm cup. Second 7: Fill up a hot cup. Example 3: Input: amount = [5,0,0] Output: 5 Explanation: Every second, we fill up a cold cup.   Constraints: amount.length == 3 0 <= amount[i] <= 100",
        "1743": "You have a set which contains all positive integers [1, 2, 3, 4, 5, ...]. Implement the SmallestInfiniteSet class: SmallestInfiniteSet() Initializes the SmallestInfiniteSet object to contain all positive integers. int popSmallest() Removes and returns the smallest integer contained in the infinite set. void addBack(int num) Adds a positive integer num back into the infinite set, if it is not already in the infinite set.   Example 1: Input [\"SmallestInfiniteSet\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\"] [[], [2], [], [], [], [1], [], [], []] Output [null, null, 1, 2, 3, null, 1, 4, 5]  Explanation SmallestInfiniteSet smallestInfiniteSet = new SmallestInfiniteSet(); smallestInfiniteSet.addBack(2);    // 2 is already in the set, so no change is made. smallestInfiniteSet.popSmallest(); // return 1, since 1 is the smallest number, and remove it from the set. smallestInfiniteSet.popSmallest(); // return 2, and remove it from the set. smallestInfiniteSet.popSmallest(); // return 3, and remove it from the set. smallestInfiniteSet.addBack(1);    // 1 is added back to the set. smallestInfiniteSet.popSmallest(); // return 1, since 1 was added back to the set and                                    // is the smallest number, and remove it from the set. smallestInfiniteSet.popSmallest(); // return 4, and remove it from the set. smallestInfiniteSet.popSmallest(); // return 5, and remove it from the set.   Constraints: 1 <= num <= 1000 At most 1000 calls will be made in total to popSmallest and addBack.",
        "1744": "You are given two strings start and target, both of length n. Each string consists only of the characters 'L', 'R', and '_' where: The characters 'L' and 'R' represent pieces, where a piece 'L' can move to the left only if there is a blank space directly to its left, and a piece 'R' can move to the right only if there is a blank space directly to its right. The character '_' represents a blank space that can be occupied by any of the 'L' or 'R' pieces. Return true if it is possible to obtain the string target by moving the pieces of the string start any number of times. Otherwise, return false.   Example 1: Input: start = \"_L__R__R_\", target = \"L______RR\" Output: true Explanation: We can obtain the string target from start by doing the following moves: - Move the first piece one step to the left, start becomes equal to \"L___R__R_\". - Move the last piece one step to the right, start becomes equal to \"L___R___R\". - Move the second piece three steps to the right, start becomes equal to \"L______RR\". Since it is possible to get the string target from start, we return true. Example 2: Input: start = \"R_L_\", target = \"__LR\" Output: false Explanation: The 'R' piece in the string start can move one step to the right to obtain \"_RL_\". After that, no pieces can move anymore, so it is impossible to obtain the string target from start. Example 3: Input: start = \"_R\", target = \"R_\" Output: false Explanation: The piece in the string start can move only to the right, so it is impossible to obtain the string target from start.   Constraints: n == start.length == target.length 1 <= n <= 105 start and target consist of the characters 'L', 'R', and '_'.",
        "1745": "You are given two integers n and maxValue, which are used to describe an ideal array. A 0-indexed integer array arr of length n is considered ideal if the following conditions hold: Every arr[i] is a value from 1 to maxValue, for 0 <= i < n. Every arr[i] is divisible by arr[i - 1], for 0 < i < n. Return the number of distinct ideal arrays of length n. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: n = 2, maxValue = 5 Output: 10 Explanation: The following are the possible ideal arrays: - Arrays starting with the value 1 (5 arrays): [1,1], [1,2], [1,3], [1,4], [1,5] - Arrays starting with the value 2 (2 arrays): [2,2], [2,4] - Arrays starting with the value 3 (1 array): [3,3] - Arrays starting with the value 4 (1 array): [4,4] - Arrays starting with the value 5 (1 array): [5,5] There are a total of 5 + 2 + 1 + 1 + 1 = 10 distinct ideal arrays. Example 2: Input: n = 5, maxValue = 3 Output: 11 Explanation: The following are the possible ideal arrays: - Arrays starting with the value 1 (9 arrays):     - With no other distinct values (1 array): [1,1,1,1,1]     - With 2nd distinct value 2 (4 arrays): [1,1,1,1,2], [1,1,1,2,2], [1,1,2,2,2], [1,2,2,2,2]    - With 2nd distinct value 3 (4 arrays): [1,1,1,1,3], [1,1,1,3,3], [1,1,3,3,3], [1,3,3,3,3] - Arrays starting with the value 2 (1 array): [2,2,2,2,2] - Arrays starting with the value 3 (1 array): [3,3,3,3,3] There are a total of 9 + 1 + 1 = 11 distinct ideal arrays.   Constraints: 2 <= n <= 104 1 <= maxValue <= 104",
        "1746": "You are given a 0-indexed integer array nums. In one operation, you may do the following: Choose two integers in nums that are equal. Remove both integers from nums, forming a pair. The operation is done on nums as many times as possible. Return a 0-indexed integer array answer of size 2 where answer[0] is the number of pairs that are formed and answer[1] is the number of leftover integers in nums after doing the operation as many times as possible.   Example 1: Input: nums = [1,3,2,1,3,2,2] Output: [3,1] Explanation: Form a pair with nums[0] and nums[3] and remove them from nums. Now, nums = [3,2,3,2,2]. Form a pair with nums[0] and nums[2] and remove them from nums. Now, nums = [2,2,2]. Form a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [2]. No more pairs can be formed. A total of 3 pairs have been formed, and there is 1 number leftover in nums. Example 2: Input: nums = [1,1] Output: [1,0] Explanation: Form a pair with nums[0] and nums[1] and remove them from nums. Now, nums = []. No more pairs can be formed. A total of 1 pair has been formed, and there are 0 numbers leftover in nums. Example 3: Input: nums = [0] Output: [0,1] Explanation: No pairs can be formed, and there is 1 number leftover in nums.   Constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 100",
        "1747": "You are given a 0-indexed array nums consisting of positive integers. You can choose two indices i and j, such that i != j, and the sum of digits of the number nums[i] is equal to that of nums[j]. Return the maximum value of nums[i] + nums[j] that you can obtain over all possible indices i and j that satisfy the conditions.   Example 1: Input: nums = [18,43,36,13,7] Output: 54 Explanation: The pairs (i, j) that satisfy the conditions are: - (0, 2), both numbers have a sum of digits equal to 9, and their sum is 18 + 36 = 54. - (1, 4), both numbers have a sum of digits equal to 7, and their sum is 43 + 7 = 50. So the maximum sum that we can obtain is 54. Example 2: Input: nums = [10,12,19,14] Output: -1 Explanation: There are no two numbers that satisfy the conditions, so we return -1.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109",
        "1748": "You are given two positive integer arrays nums and numsDivide. You can delete any number of elements from nums. Return the minimum number of deletions such that the smallest element in nums divides all the elements of numsDivide. If this is not possible, return -1. Note that an integer x divides y if y % x == 0.   Example 1: Input: nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15] Output: 2 Explanation:  The smallest element in [2,3,2,4,3] is 2, which does not divide all the elements of numsDivide. We use 2 deletions to delete the elements in nums that are equal to 2 which makes nums = [3,4,3]. The smallest element in [3,4,3] is 3, which divides all the elements of numsDivide. It can be shown that 2 is the minimum number of deletions needed. Example 2: Input: nums = [4,3,6], numsDivide = [8,2,6,10] Output: -1 Explanation:  We want the smallest element in nums to divide all the elements of numsDivide. There is no way to delete elements from nums to allow this.   Constraints: 1 <= nums.length, numsDivide.length <= 105 1 <= nums[i], numsDivide[i] <= 109",
        "1749": "You are given an integer array ranks and a character array suits. You have 5 cards where the ith card has a rank of ranks[i] and a suit of suits[i]. The following are the types of poker hands you can make from best to worst: \"Flush\": Five cards of the same suit. \"Three of a Kind\": Three cards of the same rank. \"Pair\": Two cards of the same rank. \"High Card\": Any single card. Return a string representing the best type of poker hand you can make with the given cards. Note that the return values are case-sensitive.   Example 1: Input: ranks = [13,2,3,1,9], suits = [\"a\",\"a\",\"a\",\"a\",\"a\"] Output: \"Flush\" Explanation: The hand with all the cards consists of 5 cards with the same suit, so we have a \"Flush\". Example 2: Input: ranks = [4,4,2,4,4], suits = [\"d\",\"a\",\"a\",\"b\",\"c\"] Output: \"Three of a Kind\" Explanation: The hand with the first, second, and fourth card consists of 3 cards with the same rank, so we have a \"Three of a Kind\". Note that we could also make a \"Pair\" hand but \"Three of a Kind\" is a better hand. Also note that other cards could be used to make the \"Three of a Kind\" hand. Example 3: Input: ranks = [10,10,2,12,9], suits = [\"a\",\"b\",\"c\",\"a\",\"d\"] Output: \"Pair\" Explanation: The hand with the first and second card consists of 2 cards with the same rank, so we have a \"Pair\". Note that we cannot make a \"Flush\" or a \"Three of a Kind\".   Constraints: ranks.length == suits.length == 5 1 <= ranks[i] <= 13 'a' <= suits[i] <= 'd' No two cards have the same rank and suit.",
        "1750": "Given an integer array nums, return the number of subarrays filled with 0. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [1,3,0,0,2,0,0,4] Output: 6 Explanation:  There are 4 occurrences of [0] as a subarray. There are 2 occurrences of [0,0] as a subarray. There is no occurrence of a subarray with a size more than 2 filled with 0. Therefore, we return 6. Example 2: Input: nums = [0,0,0,2,0,0] Output: 9 Explanation: There are 5 occurrences of [0] as a subarray. There are 3 occurrences of [0,0] as a subarray. There is 1 occurrence of [0,0,0] as a subarray. There is no occurrence of a subarray with a size more than 3 filled with 0. Therefore, we return 9. Example 3: Input: nums = [2,10,2019] Output: 0 Explanation: There is no subarray filled with 0. Therefore, we return 0.   Constraints: 1 <= nums.length <= 105 -109 <= nums[i] <= 109",
        "1751": "Design a number container system that can do the following: Insert or Replace a number at the given index in the system. Return the smallest index for the given number in the system. Implement the NumberContainers class: NumberContainers() Initializes the number container system. void change(int index, int number) Fills the container at index with the number. If there is already a number at that index, replace it. int find(int number) Returns the smallest index for the given number, or -1 if there is no index that is filled by number in the system.   Example 1: Input [\"NumberContainers\", \"find\", \"change\", \"change\", \"change\", \"change\", \"find\", \"change\", \"find\"] [[], [10], [2, 10], [1, 10], [3, 10], [5, 10], [10], [1, 20], [10]] Output [null, -1, null, null, null, null, 1, null, 2]  Explanation NumberContainers nc = new NumberContainers(); nc.find(10); // There is no index that is filled with number 10. Therefore, we return -1. nc.change(2, 10); // Your container at index 2 will be filled with number 10. nc.change(1, 10); // Your container at index 1 will be filled with number 10. nc.change(3, 10); // Your container at index 3 will be filled with number 10. nc.change(5, 10); // Your container at index 5 will be filled with number 10. nc.find(10); // Number 10 is at the indices 1, 2, 3, and 5. Since the smallest index that is filled with 10 is 1, we return 1. nc.change(1, 20); // Your container at index 1 will be filled with number 20. Note that index 1 was filled with 10 and then replaced with 20.  nc.find(10); // Number 10 is at the indices 2, 3, and 5. The smallest index that is filled with 10 is 2. Therefore, we return 2.   Constraints: 1 <= index, number <= 109 At most 105 calls will be made in total to change and find.",
        "1752": "You are given an integer array rolls of length n and an integer k. You roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i]. Return the length of the shortest sequence of rolls so that there's no such subsequence in rolls. A sequence of rolls of length len is the result of rolling a k sided dice len times.   Example 1: Input: rolls = [4,2,1,2,3,3,2,4,1], k = 4 Output: 3 Explanation: Every sequence of rolls of length 1, [1], [2], [3], [4], can be taken from rolls. Every sequence of rolls of length 2, [1, 1], [1, 2], ..., [4, 4], can be taken from rolls. The sequence [1, 4, 2] cannot be taken from rolls, so we return 3. Note that there are other sequences that cannot be taken from rolls. Example 2: Input: rolls = [1,1,2,2], k = 2 Output: 2 Explanation: Every sequence of rolls of length 1, [1], [2], can be taken from rolls. The sequence [2, 1] cannot be taken from rolls, so we return 2. Note that there are other sequences that cannot be taken from rolls but [2, 1] is the shortest. Example 3: Input: rolls = [1,1,3,2,2,2,3,3], k = 4 Output: 1 Explanation: The sequence [4] cannot be taken from rolls, so we return 1. Note that there are other sequences that cannot be taken from rolls but [4] is the shortest.   Constraints: n == rolls.length 1 <= n <= 105 1 <= rolls[i] <= k <= 105",
        "1753": "Given a 0-indexed n x n integer matrix grid, return the number of pairs (ri, cj) such that row ri and column cj are equal. A row and column pair is considered equal if they contain the same elements in the same order (i.e., an equal array).   Example 1: Input: grid = [[3,2,1],[1,7,6],[2,7,7]] Output: 1 Explanation: There is 1 equal row and column pair: - (Row 2, Column 1): [2,7,7] Example 2: Input: grid = [[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]] Output: 3 Explanation: There are 3 equal row and column pairs: - (Row 0, Column 0): [3,1,2,2] - (Row 2, Column 2): [2,4,2,2] - (Row 3, Column 2): [2,4,2,2]   Constraints: n == grid.length == grid[i].length 1 <= n <= 200 1 <= grid[i][j] <= 105",
        "1754": "",
        "1755": "You are given a 0-indexed positive integer array nums and a positive integer k. A pair of numbers (num1, num2) is called excellent if the following conditions are satisfied: Both the numbers num1 and num2 exist in the array nums. The sum of the number of set bits in num1 OR num2 and num1 AND num2 is greater than or equal to k, where OR is the bitwise OR operation and AND is the bitwise AND operation. Return the number of distinct excellent pairs. Two pairs (a, b) and (c, d) are considered distinct if either a != c or b != d. For example, (1, 2) and (2, 1) are distinct. Note that a pair (num1, num2) such that num1 == num2 can also be excellent if you have at least one occurrence of num1 in the array.   Example 1: Input: nums = [1,2,3,1], k = 3 Output: 5 Explanation: The excellent pairs are the following: - (3, 3). (3 AND 3) and (3 OR 3) are both equal to (11) in binary. The total number of set bits is 2 + 2 = 4, which is greater than or equal to k = 3. - (2, 3) and (3, 2). (2 AND 3) is equal to (10) in binary, and (2 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3. - (1, 3) and (3, 1). (1 AND 3) is equal to (01) in binary, and (1 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3. So the number of excellent pairs is 5. Example 2: Input: nums = [5,1,1], k = 10 Output: 0 Explanation: There are no excellent pairs for this array.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 1 <= k <= 60",
        "1756": "SQL Schema Pandas Schema",
        "1757": "You are given a non-negative integer array nums. In one operation, you must: Choose a positive integer x such that x is less than or equal to the smallest non-zero element in nums. Subtract x from every positive element in nums. Return the minimum number of operations to make every element in nums equal to 0.   Example 1: Input: nums = [1,5,0,3,5] Output: 3 Explanation: In the first operation, choose x = 1. Now, nums = [0,4,0,2,4]. In the second operation, choose x = 2. Now, nums = [0,2,0,0,2]. In the third operation, choose x = 2. Now, nums = [0,0,0,0,0]. Example 2: Input: nums = [0] Output: 0 Explanation: Each element in nums is already 0 so no operations are needed.   Constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 100",
        "1758": "You are given a positive integer array grades which represents the grades of students in a university. You would like to enter all these students into a competition in ordered non-empty groups, such that the ordering meets the following conditions: The sum of the grades of students in the ith group is less than the sum of the grades of students in the (i + 1)th group, for all groups (except the last). The total number of students in the ith group is less than the total number of students in the (i + 1)th group, for all groups (except the last). Return the maximum number of groups that can be formed.   Example 1: Input: grades = [10,6,12,7,3,5] Output: 3 Explanation: The following is a possible way to form 3 groups of students: - 1st group has the students with grades = [12]. Sum of grades: 12. Student count: 1 - 2nd group has the students with grades = [6,7]. Sum of grades: 6 + 7 = 13. Student count: 2 - 3rd group has the students with grades = [10,3,5]. Sum of grades: 10 + 3 + 5 = 18. Student count: 3 It can be shown that it is not possible to form more than 3 groups. Example 2: Input: grades = [8,8] Output: 1 Explanation: We can only form 1 group, since forming 2 groups would lead to an equal number of students in both groups.   Constraints: 1 <= grades.length <= 105 1 <= grades[i] <= 105",
        "1759": "You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge. The graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from i, then edges[i] == -1. You are also given two integers node1 and node2. Return the index of the node that can be reached from both node1 and node2, such that the maximum between the distance from node1 to that node, and from node2 to that node is minimized. If there are multiple answers, return the node with the smallest index, and if no possible answer exists, return -1. Note that edges may contain cycles.   Example 1: Input: edges = [2,2,3,-1], node1 = 0, node2 = 1 Output: 2 Explanation: The distance from node 0 to node 2 is 1, and the distance from node 1 to node 2 is 1. The maximum of those two distances is 1. It can be proven that we cannot get a node with a smaller maximum distance than 1, so we return node 2. Example 2: Input: edges = [1,2,-1], node1 = 0, node2 = 2 Output: 2 Explanation: The distance from node 0 to node 2 is 2, and the distance from node 2 to itself is 0. The maximum of those two distances is 2. It can be proven that we cannot get a node with a smaller maximum distance than 2, so we return node 2.   Constraints: n == edges.length 2 <= n <= 105 -1 <= edges[i] < n edges[i] != i 0 <= node1, node2 < n",
        "1760": "You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge. The graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from node i, then edges[i] == -1. Return the length of the longest cycle in the graph. If no cycle exists, return -1. A cycle is a path that starts and ends at the same node.   Example 1: Input: edges = [3,3,4,2,3] Output: 3 Explanation: The longest cycle in the graph is the cycle: 2 -> 4 -> 3 -> 2. The length of this cycle is 3, so 3 is returned. Example 2: Input: edges = [2,-1,3,1] Output: -1 Explanation: There are no cycles in this graph.   Constraints: n == edges.length 2 <= n <= 105 -1 <= edges[i] < n edges[i] != i",
        "1761": "You are given two 2D integer arrays, items1 and items2, representing two sets of items. Each array items has the following properties: items[i] = [valuei, weighti] where valuei represents the value and weighti represents the weight of the ith item. The value of each item in items is unique. Return a 2D integer array ret where ret[i] = [valuei, weighti], with weighti being the sum of weights of all items with value valuei. Note: ret should be returned in ascending order by value.   Example 1: Input: items1 = [[1,1],[4,5],[3,8]], items2 = [[3,1],[1,5]] Output: [[1,6],[3,9],[4,5]] Explanation:  The item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 5, total weight = 1 + 5 = 6. The item with value = 3 occurs in items1 with weight = 8 and in items2 with weight = 1, total weight = 8 + 1 = 9. The item with value = 4 occurs in items1 with weight = 5, total weight = 5.   Therefore, we return [[1,6],[3,9],[4,5]]. Example 2: Input: items1 = [[1,1],[3,2],[2,3]], items2 = [[2,1],[3,2],[1,3]] Output: [[1,4],[2,4],[3,4]] Explanation:  The item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 3, total weight = 1 + 3 = 4. The item with value = 2 occurs in items1 with weight = 3 and in items2 with weight = 1, total weight = 3 + 1 = 4. The item with value = 3 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4. Therefore, we return [[1,4],[2,4],[3,4]]. Example 3: Input: items1 = [[1,3],[2,2]], items2 = [[7,1],[2,2],[1,4]] Output: [[1,7],[2,4],[7,1]] Explanation: The item with value = 1 occurs in items1 with weight = 3 and in items2 with weight = 4, total weight = 3 + 4 = 7.  The item with value = 2 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4.  The item with value = 7 occurs in items2 with weight = 1, total weight = 1. Therefore, we return [[1,7],[2,4],[7,1]].   Constraints: 1 <= items1.length, items2.length <= 1000 items1[i].length == items2[i].length == 2 1 <= valuei, weighti <= 1000 Each valuei in items1 is unique. Each valuei in items2 is unique.",
        "1762": "You are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i]. Return the total number of bad pairs in nums.   Example 1: Input: nums = [4,1,3,3] Output: 5 Explanation: The pair (0, 1) is a bad pair since 1 - 0 != 1 - 4. The pair (0, 2) is a bad pair since 2 - 0 != 3 - 4, 2 != -1. The pair (0, 3) is a bad pair since 3 - 0 != 3 - 4, 3 != -1. The pair (1, 2) is a bad pair since 2 - 1 != 3 - 1, 1 != 2. The pair (2, 3) is a bad pair since 3 - 2 != 3 - 3, 1 != 0. There are a total of 5 bad pairs, so we return 5. Example 2: Input: nums = [1,2,3,4,5] Output: 0 Explanation: There are no bad pairs.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109",
        "1763": "You are given a 0-indexed array of positive integers tasks, representing tasks that need to be completed in order, where tasks[i] represents the type of the ith task. You are also given a positive integer space, which represents the minimum number of days that must pass after the completion of a task before another task of the same type can be performed. Each day, until all tasks have been completed, you must either: Complete the next task from tasks, or Take a break. Return the minimum number of days needed to complete all tasks.   Example 1: Input: tasks = [1,2,1,2,3,1], space = 3 Output: 9 Explanation: One way to complete all tasks in 9 days is as follows: Day 1: Complete the 0th task. Day 2: Complete the 1st task. Day 3: Take a break. Day 4: Take a break. Day 5: Complete the 2nd task. Day 6: Complete the 3rd task. Day 7: Take a break. Day 8: Complete the 4th task. Day 9: Complete the 5th task. It can be shown that the tasks cannot be completed in less than 9 days. Example 2: Input: tasks = [5,8,8,5], space = 2 Output: 6 Explanation: One way to complete all tasks in 6 days is as follows: Day 1: Complete the 0th task. Day 2: Complete the 1st task. Day 3: Take a break. Day 4: Take a break. Day 5: Complete the 2nd task. Day 6: Complete the 3rd task. It can be shown that the tasks cannot be completed in less than 6 days.   Constraints: 1 <= tasks.length <= 105 1 <= tasks[i] <= 109 1 <= space <= tasks.length",
        "1764": "You are given a 0-indexed, strictly increasing integer array nums and a positive integer diff. A triplet (i, j, k) is an arithmetic triplet if the following conditions are met: i < j < k, nums[j] - nums[i] == diff, and nums[k] - nums[j] == diff. Return the number of unique arithmetic triplets.   Example 1: Input: nums = [0,1,4,6,7,10], diff = 3 Output: 2 Explanation: (1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3. (2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3.  Example 2: Input: nums = [4,5,6,7,8,9], diff = 2 Output: 2 Explanation: (0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2. (1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2.   Constraints: 3 <= nums.length <= 200 0 <= nums[i] <= 200 1 <= diff <= 50 nums is strictly increasing.",
        "1765": "There is an undirected tree with n nodes labeled from 0 to n - 1 and n - 1 edges. You are given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given an integer array restricted which represents restricted nodes. Return the maximum number of nodes you can reach from node 0 without visiting a restricted node. Note that node 0 will not be a restricted node.   Example 1: Input: n = 7, edges = [[0,1],[1,2],[3,1],[4,0],[0,5],[5,6]], restricted = [4,5] Output: 4 Explanation: The diagram above shows the tree. We have that [0,1,2,3] are the only nodes that can be reached from node 0 without visiting a restricted node. Example 2: Input: n = 7, edges = [[0,1],[0,2],[0,5],[0,4],[3,2],[6,5]], restricted = [4,2,1] Output: 3 Explanation: The diagram above shows the tree. We have that [0,5,6] are the only nodes that can be reached from node 0 without visiting a restricted node.   Constraints: 2 <= n <= 105 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n ai != bi edges represents a valid tree. 1 <= restricted.length < n 1 <= restricted[i] < n All the values of restricted are unique.",
        "1766": "You are given a 0-indexed integer array nums. You have to partition the array into one or more contiguous subarrays. We call a partition of the array valid if each of the obtained subarrays satisfies one of the following conditions: The subarray consists of exactly 2, equal elements. For example, the subarray [2,2] is good. The subarray consists of exactly 3, equal elements. For example, the subarray [4,4,4] is good. The subarray consists of exactly 3 consecutive increasing elements, that is, the difference between adjacent elements is 1. For example, the subarray [3,4,5] is good, but the subarray [1,3,5] is not. Return true if the array has at least one valid partition. Otherwise, return false.   Example 1: Input: nums = [4,4,4,5,6] Output: true Explanation: The array can be partitioned into the subarrays [4,4] and [4,5,6]. This partition is valid, so we return true. Example 2: Input: nums = [1,1,1,2] Output: false Explanation: There is no valid partition for this array.   Constraints: 2 <= nums.length <= 105 1 <= nums[i] <= 106",
        "1767": "You are given a string s consisting of lowercase letters and an integer k. We call a string t ideal if the following conditions are satisfied: t is a subsequence of the string s. The absolute difference in the alphabet order of every two adjacent letters in t is less than or equal to k. Return the length of the longest ideal string. A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. Note that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of 'a' and 'z' is 25, not 1.   Example 1: Input: s = \"acfgbd\", k = 2 Output: 4 Explanation: The longest ideal string is \"acbd\". The length of this string is 4, so 4 is returned. Note that \"acfgbd\" is not ideal because 'c' and 'f' have a difference of 3 in alphabet order. Example 2: Input: s = \"abcd\", k = 3 Output: 4 Explanation: The longest ideal string is \"abcd\". The length of this string is 4, so 4 is returned.   Constraints: 1 <= s.length <= 105 0 <= k <= 25 s consists of lowercase English letters.",
        "1768": "You are given an n x n integer matrix grid. Generate an integer matrix maxLocal of size (n - 2) x (n - 2) such that: maxLocal[i][j] is equal to the largest value of the 3 x 3 matrix in grid centered around row i + 1 and column j + 1. In other words, we want to find the largest value in every contiguous 3 x 3 matrix in grid. Return the generated matrix.   Example 1: Input: grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]] Output: [[9,9],[8,6]] Explanation: The diagram above shows the original matrix and the generated matrix. Notice that each value in the generated matrix corresponds to the largest value of a contiguous 3 x 3 matrix in grid. Example 2: Input: grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]] Output: [[2,2,2],[2,2,2],[2,2,2]] Explanation: Notice that the 2 is contained within every contiguous 3 x 3 matrix in grid.   Constraints: n == grid.length == grid[i].length 3 <= n <= 100 1 <= grid[i][j] <= 100",
        "1769": "You are given a directed graph with n nodes labeled from 0 to n - 1, where each node has exactly one outgoing edge. The graph is represented by a given 0-indexed integer array edges of length n, where edges[i] indicates that there is a directed edge from node i to node edges[i]. The edge score of a node i is defined as the sum of the labels of all the nodes that have an edge pointing to i. Return the node with the highest edge score. If multiple nodes have the same edge score, return the node with the smallest index.   Example 1: Input: edges = [1,0,0,0,0,7,7,5] Output: 7 Explanation: - The nodes 1, 2, 3 and 4 have an edge pointing to node 0. The edge score of node 0 is 1 + 2 + 3 + 4 = 10. - The node 0 has an edge pointing to node 1. The edge score of node 1 is 0. - The node 7 has an edge pointing to node 5. The edge score of node 5 is 7. - The nodes 5 and 6 have an edge pointing to node 7. The edge score of node 7 is 5 + 6 = 11. Node 7 has the highest edge score so return 7. Example 2: Input: edges = [2,0,0,2] Output: 0 Explanation: - The nodes 1 and 2 have an edge pointing to node 0. The edge score of node 0 is 1 + 2 = 3. - The nodes 0 and 3 have an edge pointing to node 2. The edge score of node 2 is 0 + 3 = 3. Nodes 0 and 2 both have an edge score of 3. Since node 0 has a smaller index, we return 0.   Constraints: n == edges.length 2 <= n <= 105 0 <= edges[i] < n edges[i] != i",
        "1770": "You are given a 0-indexed string pattern of length n consisting of the characters 'I' meaning increasing and 'D' meaning decreasing. A 0-indexed string num of length n + 1 is created using the following conditions: num consists of the digits '1' to '9', where each digit is used at most once. If pattern[i] == 'I', then num[i] < num[i + 1]. If pattern[i] == 'D', then num[i] > num[i + 1]. Return the lexicographically smallest possible string num that meets the conditions.   Example 1: Input: pattern = \"IIIDIDDD\" Output: \"123549876\" Explanation: At indices 0, 1, 2, and 4 we must have that num[i] < num[i+1]. At indices 3, 5, 6, and 7 we must have that num[i] > num[i+1]. Some possible values of num are \"245639871\", \"135749862\", and \"123849765\". It can be proven that \"123549876\" is the smallest possible num that meets the conditions. Note that \"123414321\" is not possible because the digit '1' is used more than once. Example 2: Input: pattern = \"DDD\" Output: \"4321\" Explanation: Some possible values of num are \"9876\", \"7321\", and \"8742\". It can be proven that \"4321\" is the smallest possible num that meets the conditions.   Constraints: 1 <= pattern.length <= 8 pattern consists of only the letters 'I' and 'D'.",
        "1771": "We call a positive integer special if all of its digits are distinct. Given a positive integer n, return the number of special integers that belong to the interval [1, n].   Example 1: Input: n = 20 Output: 19 Explanation: All the integers from 1 to 20, except 11, are special. Thus, there are 19 special integers. Example 2: Input: n = 5 Output: 5 Explanation: All the integers from 1 to 5 are special. Example 3: Input: n = 135 Output: 110 Explanation: There are 110 integers from 1 to 135 that are special. Some of the integers that are not special are: 22, 114, and 131.   Constraints: 1 <= n <= 2 * 109",
        "1772": "You are given a 0-indexed string blocks of length n, where blocks[i] is either 'W' or 'B', representing the color of the ith block. The characters 'W' and 'B' denote the colors white and black, respectively. You are also given an integer k, which is the desired number of consecutive black blocks. In one operation, you can recolor a white block such that it becomes a black block. Return the minimum number of operations needed such that there is at least one occurrence of k consecutive black blocks.   Example 1: Input: blocks = \"WBBWWBBWBW\", k = 7 Output: 3 Explanation: One way to achieve 7 consecutive black blocks is to recolor the 0th, 3rd, and 4th blocks so that blocks = \"BBBBBBBWBW\".  It can be shown that there is no way to achieve 7 consecutive black blocks in less than 3 operations. Therefore, we return 3. Example 2: Input: blocks = \"WBWBBBW\", k = 2 Output: 0 Explanation: No changes need to be made, since 2 consecutive black blocks already exist. Therefore, we return 0.   Constraints: n == blocks.length 1 <= n <= 100 blocks[i] is either 'W' or 'B'. 1 <= k <= n",
        "1773": "You are given a binary string s. In one second, all occurrences of \"01\" are simultaneously replaced with \"10\". This process repeats until no occurrences of \"01\" exist. Return the number of seconds needed to complete this process.   Example 1: Input: s = \"0110101\" Output: 4 Explanation:  After one second, s becomes \"1011010\". After another second, s becomes \"1101100\". After the third second, s becomes \"1110100\". After the fourth second, s becomes \"1111000\". No occurrence of \"01\" exists any longer, and the process needed 4 seconds to complete, so we return 4. Example 2: Input: s = \"11100\" Output: 0 Explanation: No occurrence of \"01\" exists in s, and the processes needed 0 seconds to complete, so we return 0.   Constraints: 1 <= s.length <= 1000 s[i] is either '0' or '1'.   Follow up: Can you solve this problem in O(n) time complexity?",
        "1774": "You are given a string s of lowercase English letters and a 2D integer array shifts where shifts[i] = [starti, endi, directioni]. For every i, shift the characters in s from the index starti to the index endi (inclusive) forward if directioni = 1, or shift the characters backward if directioni = 0. Shifting a character forward means replacing it with the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Similarly, shifting a character backward means replacing it with the previous letter in the alphabet (wrapping around so that 'a' becomes 'z'). Return the final string after all such shifts to s are applied.   Example 1: Input: s = \"abc\", shifts = [[0,1,0],[1,2,1],[0,2,1]] Output: \"ace\" Explanation: Firstly, shift the characters from index 0 to index 1 backward. Now s = \"zac\". Secondly, shift the characters from index 1 to index 2 forward. Now s = \"zbd\". Finally, shift the characters from index 0 to index 2 forward. Now s = \"ace\". Example 2: Input: s = \"dztz\", shifts = [[0,0,0],[1,1,1]] Output: \"catz\" Explanation: Firstly, shift the characters from index 0 to index 0 backward. Now s = \"cztz\". Finally, shift the characters from index 1 to index 1 forward. Now s = \"catz\".   Constraints: 1 <= s.length, shifts.length <= 5 * 104 shifts[i].length == 3 0 <= starti <= endi < s.length 0 <= directioni <= 1 s consists of lowercase English letters.",
        "1775": "You are entering a competition, and are given two positive integers initialEnergy and initialExperience denoting your initial energy and initial experience respectively. You are also given two 0-indexed integer arrays energy and experience, both of length n. You will face n opponents in order. The energy and experience of the ith opponent is denoted by energy[i] and experience[i] respectively. When you face an opponent, you need to have both strictly greater experience and energy to defeat them and move to the next opponent if available. Defeating the ith opponent increases your experience by experience[i], but decreases your energy by energy[i]. Before starting the competition, you can train for some number of hours. After each hour of training, you can either choose to increase your initial experience by one, or increase your initial energy by one. Return the minimum number of training hours required to defeat all n opponents.   Example 1: Input: initialEnergy = 5, initialExperience = 3, energy = [1,4,3,2], experience = [2,6,3,1] Output: 8 Explanation: You can increase your energy to 11 after 6 hours of training, and your experience to 5 after 2 hours of training. You face the opponents in the following order: - You have more energy and experience than the 0th opponent so you win.   Your energy becomes 11 - 1 = 10, and your experience becomes 5 + 2 = 7. - You have more energy and experience than the 1st opponent so you win.   Your energy becomes 10 - 4 = 6, and your experience becomes 7 + 6 = 13. - You have more energy and experience than the 2nd opponent so you win.   Your energy becomes 6 - 3 = 3, and your experience becomes 13 + 3 = 16. - You have more energy and experience than the 3rd opponent so you win.   Your energy becomes 3 - 2 = 1, and your experience becomes 16 + 1 = 17. You did a total of 6 + 2 = 8 hours of training before the competition, so we return 8. It can be proven that no smaller answer exists. Example 2: Input: initialEnergy = 2, initialExperience = 4, energy = [1], experience = [3] Output: 0 Explanation: You do not need any additional energy or experience to win the competition, so we return 0.   Constraints: n == energy.length == experience.length 1 <= n <= 100 1 <= initialEnergy, initialExperience, energy[i], experience[i] <= 100",
        "1776": "You are given a string num consisting of digits only. Return the largest palindromic integer (in the form of a string) that can be formed using digits taken from num. It should not contain leading zeroes. Notes: You do not need to use all the digits of num, but you must use at least one digit. The digits can be reordered.   Example 1: Input: num = \"444947137\" Output: \"7449447\" Explanation:  Use the digits \"4449477\" from \"444947137\" to form the palindromic integer \"7449447\". It can be shown that \"7449447\" is the largest palindromic integer that can be formed. Example 2: Input: num = \"00009\" Output: \"9\" Explanation:  It can be shown that \"9\" is the largest palindromic integer that can be formed. Note that the integer returned should not contain leading zeroes.   Constraints: 1 <= num.length <= 105 num consists of digits.",
        "1777": "You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start. Each minute, a node becomes infected if: The node is currently uninfected. The node is adjacent to an infected node. Return the number of minutes needed for the entire tree to be infected.   Example 1: Input: root = [1,5,3,null,4,10,6,9,2], start = 3 Output: 4 Explanation: The following nodes are infected during: - Minute 0: Node 3 - Minute 1: Nodes 1, 10 and 6 - Minute 2: Node 5 - Minute 3: Node 4 - Minute 4: Nodes 9 and 2 It takes 4 minutes for the whole tree to be infected so we return 4. Example 2: Input: root = [1], start = 1 Output: 0 Explanation: At minute 0, the only node in the tree is infected so we return 0.   Constraints: The number of nodes in the tree is in the range [1, 105]. 1 <= Node.val <= 105 Each node has a unique value. A node with a value of start exists in the tree.",
        "1778": "You are given an integer array nums and a positive integer k. You can choose any subsequence of the array and sum all of its elements together. We define the K-Sum of the array as the kth largest subsequence sum that can be obtained (not necessarily distinct). Return the K-Sum of the array. A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements. Note that the empty subsequence is considered to have a sum of 0.   Example 1: Input: nums = [2,4,-2], k = 5 Output: 2 Explanation: All the possible subsequence sums that we can obtain are the following sorted in decreasing order: - 6, 4, 4, 2, 2, 0, 0, -2. The 5-Sum of the array is 2. Example 2: Input: nums = [1,-2,3,4,-10,12], k = 16 Output: 10 Explanation: The 16-Sum of the array is 10.   Constraints: n == nums.length 1 <= n <= 105 -109 <= nums[i] <= 109 1 <= k <= min(2000, 2n)",
        "1779": "You are given an integer array nums of length n, and an integer array queries of length m. Return an array answer of length m where answer[i] is the maximum size of a subsequence that you can take from nums such that the sum of its elements is less than or equal to queries[i]. A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.   Example 1: Input: nums = [4,5,2,1], queries = [3,10,21] Output: [2,3,4] Explanation: We answer the queries as follows: - The subsequence [2,1] has a sum less than or equal to 3. It can be proven that 2 is the maximum size of such a subsequence, so answer[0] = 2. - The subsequence [4,5,1] has a sum less than or equal to 10. It can be proven that 3 is the maximum size of such a subsequence, so answer[1] = 3. - The subsequence [4,5,2,1] has a sum less than or equal to 21. It can be proven that 4 is the maximum size of such a subsequence, so answer[2] = 4. Example 2: Input: nums = [2,3,4,5], queries = [1] Output: [0] Explanation: The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer[0] = 0.   Constraints: n == nums.length m == queries.length 1 <= n, m <= 1000 1 <= nums[i], queries[i] <= 106",
        "1780": "You are given a string s, which contains stars *. In one operation, you can: Choose a star in s. Remove the closest non-star character to its left, as well as remove the star itself. Return the string after all stars have been removed. Note: The input will be generated such that the operation is always possible. It can be shown that the resulting string will always be unique.   Example 1: Input: s = \"leet**cod*e\" Output: \"lecoe\" Explanation: Performing the removals from left to right: - The closest character to the 1st star is 't' in \"leet**cod*e\". s becomes \"lee*cod*e\". - The closest character to the 2nd star is 'e' in \"lee*cod*e\". s becomes \"lecod*e\". - The closest character to the 3rd star is 'd' in \"lecod*e\". s becomes \"lecoe\". There are no more stars, so we return \"lecoe\". Example 2: Input: s = \"erase*****\" Output: \"\" Explanation: The entire string is removed, so we return an empty string.   Constraints: 1 <= s.length <= 105 s consists of lowercase English letters and stars *. The operation above can be performed on s.",
        "1781": "You are given a 0-indexed array of strings garbage where garbage[i] represents the assortment of garbage at the ith house. garbage[i] consists only of the characters 'M', 'P' and 'G' representing one unit of metal, paper and glass garbage respectively. Picking up one unit of any type of garbage takes 1 minute. You are also given a 0-indexed integer array travel where travel[i] is the number of minutes needed to go from house i to house i + 1. There are three garbage trucks in the city, each responsible for picking up one type of garbage. Each garbage truck starts at house 0 and must visit each house in order; however, they do not need to visit every house. Only one garbage truck may be used at any given moment. While one truck is driving or picking up garbage, the other two trucks cannot do anything. Return the minimum number of minutes needed to pick up all the garbage.   Example 1: Input: garbage = [\"G\",\"P\",\"GP\",\"GG\"], travel = [2,4,3] Output: 21 Explanation: The paper garbage truck: 1. Travels from house 0 to house 1 2. Collects the paper garbage at house 1 3. Travels from house 1 to house 2 4. Collects the paper garbage at house 2 Altogether, it takes 8 minutes to pick up all the paper garbage. The glass garbage truck: 1. Collects the glass garbage at house 0 2. Travels from house 0 to house 1 3. Travels from house 1 to house 2 4. Collects the glass garbage at house 2 5. Travels from house 2 to house 3 6. Collects the glass garbage at house 3 Altogether, it takes 13 minutes to pick up all the glass garbage. Since there is no metal garbage, we do not need to consider the metal garbage truck. Therefore, it takes a total of 8 + 13 = 21 minutes to collect all the garbage. Example 2: Input: garbage = [\"MMM\",\"PGM\",\"GP\"], travel = [3,10] Output: 37 Explanation: The metal garbage truck takes 7 minutes to pick up all the metal garbage. The paper garbage truck takes 15 minutes to pick up all the paper garbage. The glass garbage truck takes 15 minutes to pick up all the glass garbage. It takes a total of 7 + 15 + 15 = 37 minutes to collect all the garbage.   Constraints: 2 <= garbage.length <= 105 garbage[i] consists of only the letters 'M', 'P', and 'G'. 1 <= garbage[i].length <= 10 travel.length == garbage.length - 1 1 <= travel[i] <= 100",
        "1782": "You are given a positive integer k. You are also given: a 2D integer array rowConditions of size n where rowConditions[i] = [abovei, belowi], and a 2D integer array colConditions of size m where colConditions[i] = [lefti, righti]. The two arrays contain integers from 1 to k. You have to build a k x k matrix that contains each of the numbers from 1 to k exactly once. The remaining cells should have the value 0. The matrix should also satisfy the following conditions: The number abovei should appear in a row that is strictly above the row at which the number belowi appears for all i from 0 to n - 1. The number lefti should appear in a column that is strictly left of the column at which the number righti appears for all i from 0 to m - 1. Return any matrix that satisfies the conditions. If no answer exists, return an empty matrix.   Example 1: Input: k = 3, rowConditions = [[1,2],[3,2]], colConditions = [[2,1],[3,2]] Output: [[3,0,0],[0,0,1],[0,2,0]] Explanation: The diagram above shows a valid example of a matrix that satisfies all the conditions. The row conditions are the following: - Number 1 is in row 1, and number 2 is in row 2, so 1 is above 2 in the matrix. - Number 3 is in row 0, and number 2 is in row 2, so 3 is above 2 in the matrix. The column conditions are the following: - Number 2 is in column 1, and number 1 is in column 2, so 2 is left of 1 in the matrix. - Number 3 is in column 0, and number 2 is in column 1, so 3 is left of 2 in the matrix. Note that there may be multiple correct answers. Example 2: Input: k = 3, rowConditions = [[1,2],[2,3],[3,1],[2,3]], colConditions = [[2,1]] Output: [] Explanation: From the first two conditions, 3 has to be below 1 but the third conditions needs 3 to be above 1 to be satisfied. No matrix can satisfy all the conditions, so we return the empty matrix.   Constraints: 2 <= k <= 400 1 <= rowConditions.length, colConditions.length <= 104 rowConditions[i].length == colConditions[i].length == 2 1 <= abovei, belowi, lefti, righti <= k abovei != belowi lefti != righti",
        "1783": "Given a 0-indexed integer array nums, determine whether there exist two subarrays of length 2 with equal sum. Note that the two subarrays must begin at different indices. Return true if these subarrays exist, and false otherwise. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [4,2,4] Output: true Explanation: The subarrays with elements [4,2] and [2,4] have the same sum of 6. Example 2: Input: nums = [1,2,3,4,5] Output: false Explanation: No two subarrays of size 2 have the same sum. Example 3: Input: nums = [0,0,0] Output: true Explanation: The subarrays [nums[0],nums[1]] and [nums[1],nums[2]] have the same sum of 0.  Note that even though the subarrays have the same content, the two subarrays are considered different because they are in different positions in the original array.   Constraints: 2 <= nums.length <= 1000 -109 <= nums[i] <= 109",
        "1784": "An integer n is strictly palindromic if, for every base b between 2 and n - 2 (inclusive), the string representation of the integer n in base b is palindromic. Given an integer n, return true if n is strictly palindromic and false otherwise. A string is palindromic if it reads the same forward and backward.   Example 1: Input: n = 9 Output: false Explanation: In base 2: 9 = 1001 (base 2), which is palindromic. In base 3: 9 = 100 (base 3), which is not palindromic. Therefore, 9 is not strictly palindromic so we return false. Note that in bases 4, 5, 6, and 7, n = 9 is also not palindromic. Example 2: Input: n = 4 Output: false Explanation: We only consider base 2: 4 = 100 (base 2), which is not palindromic. Therefore, we return false.   Constraints: 4 <= n <= 105",
        "1785": "You are given an m x n binary matrix matrix and an integer numSelect. Your goal is to select exactly numSelect distinct columns from matrix such that you cover as many rows as possible. A row is considered covered if all the 1's in that row are also part of a column that you have selected. If a row does not have any 1s, it is also considered covered. More formally, let us consider selected = {c1, c2, ...., cnumSelect} as the set of columns selected by you. A row i is covered by selected if: For each cell where matrix[i][j] == 1, the column j is in selected. Or, no cell in row i has a value of 1. Return the maximum number of rows that can be covered by a set of numSelect columns.   Example 1: Input: matrix = [[0,0,0],[1,0,1],[0,1,1],[0,0,1]], numSelect = 2 Output: 3 Explanation: One possible way to cover 3 rows is shown in the diagram above. We choose s = {0, 2}. - Row 0 is covered because it has no occurrences of 1. - Row 1 is covered because the columns with value 1, i.e. 0 and 2 are present in s. - Row 2 is not covered because matrix[2][1] == 1 but 1 is not present in s. - Row 3 is covered because matrix[2][2] == 1 and 2 is present in s. Thus, we can cover three rows. Note that s = {1, 2} will also cover 3 rows, but it can be shown that no more than three rows can be covered. Example 2: Input: matrix = [[1],[0]], numSelect = 1 Output: 2 Explanation: Selecting the only column will result in both rows being covered since the entire matrix is selected.   Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 12 matrix[i][j] is either 0 or 1. 1 <= numSelect <= n",
        "1786": "You have n robots. You are given two 0-indexed integer arrays, chargeTimes and runningCosts, both of length n. The ith robot costs chargeTimes[i] units to charge and costs runningCosts[i] units to run. You are also given an integer budget. The total cost of running k chosen robots is equal to max(chargeTimes) + k * sum(runningCosts), where max(chargeTimes) is the largest charge cost among the k robots and sum(runningCosts) is the sum of running costs among the k robots. Return the maximum number of consecutive robots you can run such that the total cost does not exceed budget.   Example 1: Input: chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25 Output: 3 Explanation:  It is possible to run all individual and consecutive pairs of robots within budget. To obtain answer 3, consider the first 3 robots. The total cost will be max(3,6,1) + 3 * sum(2,1,3) = 6 + 3 * 6 = 24 which is less than 25. It can be shown that it is not possible to run more than 3 consecutive robots within budget, so we return 3. Example 2: Input: chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19 Output: 0 Explanation: No robot can be run that does not exceed the budget, so we return 0.   Constraints: chargeTimes.length == runningCosts.length == n 1 <= n <= 5 * 104 1 <= chargeTimes[i], runningCosts[i] <= 105 1 <= budget <= 1015",
        "1787": "You are given a 0-indexed string s consisting of only lowercase English letters, where each letter in s appears exactly twice. You are also given a 0-indexed integer array distance of length 26. Each letter in the alphabet is numbered from 0 to 25 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, ... , 'z' -> 25). In a well-spaced string, the number of letters between the two occurrences of the ith letter is distance[i]. If the ith letter does not appear in s, then distance[i] can be ignored. Return true if s is a well-spaced string, otherwise return false.   Example 1: Input: s = \"abaccb\", distance = [1,3,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] Output: true Explanation: - 'a' appears at indices 0 and 2 so it satisfies distance[0] = 1. - 'b' appears at indices 1 and 5 so it satisfies distance[1] = 3. - 'c' appears at indices 3 and 4 so it satisfies distance[2] = 0. Note that distance[3] = 5, but since 'd' does not appear in s, it can be ignored. Return true because s is a well-spaced string. Example 2: Input: s = \"aa\", distance = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] Output: false Explanation: - 'a' appears at indices 0 and 1 so there are zero letters between them. Because distance[0] = 1, s is not a well-spaced string.   Constraints: 2 <= s.length <= 52 s consists only of lowercase English letters. Each letter appears in s exactly twice. distance.length == 26 0 <= distance[i] <= 50",
        "1788": "You are given two positive integers startPos and endPos. Initially, you are standing at position startPos on an infinite number line. With one step, you can move either one position to the left, or one position to the right. Given a positive integer k, return the number of different ways to reach the position endPos starting from startPos, such that you perform exactly k steps. Since the answer may be very large, return it modulo 109 + 7. Two ways are considered different if the order of the steps made is not exactly the same. Note that the number line includes negative integers.   Example 1: Input: startPos = 1, endPos = 2, k = 3 Output: 3 Explanation: We can reach position 2 from 1 in exactly 3 steps in three ways: - 1 -> 2 -> 3 -> 2. - 1 -> 2 -> 1 -> 2. - 1 -> 0 -> 1 -> 2. It can be proven that no other way is possible, so we return 3. Example 2: Input: startPos = 2, endPos = 5, k = 10 Output: 0 Explanation: It is impossible to reach position 5 from position 2 in exactly 10 steps.   Constraints: 1 <= startPos, endPos, k <= 1000",
        "1789": "You are given an integer n. There are n rooms numbered from 0 to n - 1. You are given a 2D integer array meetings where meetings[i] = [starti, endi] means that a meeting will be held during the half-closed time interval [starti, endi). All the values of starti are unique. Meetings are allocated to rooms in the following manner: Each meeting will take place in the unused room with the lowest number. If there are no available rooms, the meeting will be delayed until a room becomes free. The delayed meeting should have the same duration as the original meeting. When a room becomes unused, meetings that have an earlier original start time should be given the room. Return the number of the room that held the most meetings. If there are multiple rooms, return the room with the lowest number. A half-closed interval [a, b) is the interval between a and b including a and not including b.   Example 1: Input: n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]] Output: 0 Explanation: - At time 0, both rooms are not being used. The first meeting starts in room 0. - At time 1, only room 1 is not being used. The second meeting starts in room 1. - At time 2, both rooms are being used. The third meeting is delayed. - At time 3, both rooms are being used. The fourth meeting is delayed. - At time 5, the meeting in room 1 finishes. The third meeting starts in room 1 for the time period [5,10). - At time 10, the meetings in both rooms finish. The fourth meeting starts in room 0 for the time period [10,11). Both rooms 0 and 1 held 2 meetings, so we return 0.  Example 2: Input: n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]] Output: 1 Explanation: - At time 1, all three rooms are not being used. The first meeting starts in room 0. - At time 2, rooms 1 and 2 are not being used. The second meeting starts in room 1. - At time 3, only room 2 is not being used. The third meeting starts in room 2. - At time 4, all three rooms are being used. The fourth meeting is delayed. - At time 5, the meeting in room 2 finishes. The fourth meeting starts in room 2 for the time period [5,10). - At time 6, all three rooms are being used. The fifth meeting is delayed. - At time 10, the meetings in rooms 1 and 2 finish. The fifth meeting starts in room 1 for the time period [10,12). Room 0 held 1 meeting while rooms 1 and 2 each held 2 meetings, so we return 1.    Constraints: 1 <= n <= 100 1 <= meetings.length <= 105 meetings[i].length == 2 0 <= starti < endi <= 5 * 105 All the values of starti are unique.",
        "1790": "Given a string s, partition the string into one or more substrings such that the characters in each substring are unique. That is, no letter appears in a single substring more than once. Return the minimum number of substrings in such a partition. Note that each character should belong to exactly one substring in a partition.   Example 1: Input: s = \"abacaba\" Output: 4 Explanation: Two possible partitions are (\"a\",\"ba\",\"cab\",\"a\") and (\"ab\",\"a\",\"ca\",\"ba\"). It can be shown that 4 is the minimum number of substrings needed. Example 2: Input: s = \"ssssss\" Output: 6 Explanation: The only valid partition is (\"s\",\"s\",\"s\",\"s\",\"s\",\"s\").   Constraints: 1 <= s.length <= 105 s consists of only English lowercase letters.",
        "1791": "You are given a 2D integer array intervals where intervals[i] = [lefti, righti] represents the inclusive interval [lefti, righti]. You have to divide the intervals into one or more groups such that each interval is in exactly one group, and no two intervals that are in the same group intersect each other. Return the minimum number of groups you need to make. Two intervals intersect if there is at least one common number between them. For example, the intervals [1, 5] and [5, 8] intersect.   Example 1: Input: intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]] Output: 3 Explanation: We can divide the intervals into the following groups: - Group 1: [1, 5], [6, 8]. - Group 2: [2, 3], [5, 10]. - Group 3: [1, 10]. It can be proven that it is not possible to divide the intervals into fewer than 3 groups. Example 2: Input: intervals = [[1,3],[5,6],[8,10],[11,13]] Output: 1 Explanation: None of the intervals overlap, so we can put all of them in one group.   Constraints: 1 <= intervals.length <= 105 intervals[i].length == 2 1 <= lefti <= righti <= 106",
        "1792": "You are given an integer array nums and an integer k. Find the longest subsequence of nums that meets the following requirements: The subsequence is strictly increasing and The difference between adjacent elements in the subsequence is at most k. Return the length of the longest subsequence that meets the requirements. A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.   Example 1: Input: nums = [4,2,1,4,3,4,5,8,15], k = 3 Output: 5 Explanation: The longest subsequence that meets the requirements is [1,3,4,5,8]. The subsequence has a length of 5, so we return 5. Note that the subsequence [1,3,4,5,8,15] does not meet the requirements because 15 - 8 = 7 is larger than 3. Example 2: Input: nums = [7,4,5,1,8,12,4,7], k = 5 Output: 4 Explanation: The longest subsequence that meets the requirements is [4,5,8,12]. The subsequence has a length of 4, so we return 4. Example 3: Input: nums = [1,5], k = 1 Output: 1 Explanation: The longest subsequence that meets the requirements is [1]. The subsequence has a length of 1, so we return 1.   Constraints: 1 <= nums.length <= 105 1 <= nums[i], k <= 105",
        "1793": "Alice and Bob are traveling to Rome for separate business meetings. You are given 4 strings arriveAlice, leaveAlice, arriveBob, and leaveBob. Alice will be in the city from the dates arriveAlice to leaveAlice (inclusive), while Bob will be in the city from the dates arriveBob to leaveBob (inclusive). Each will be a 5-character string in the format \"MM-DD\", corresponding to the month and day of the date. Return the total number of days that Alice and Bob are in Rome together. You can assume that all dates occur in the same calendar year, which is not a leap year. Note that the number of days per month can be represented as: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31].   Example 1: Input: arriveAlice = \"08-15\", leaveAlice = \"08-18\", arriveBob = \"08-16\", leaveBob = \"08-19\" Output: 3 Explanation: Alice will be in Rome from August 15 to August 18. Bob will be in Rome from August 16 to August 19. They are both in Rome together on August 16th, 17th, and 18th, so the answer is 3. Example 2: Input: arriveAlice = \"10-01\", leaveAlice = \"10-31\", arriveBob = \"11-01\", leaveBob = \"12-31\" Output: 0 Explanation: There is no day when Alice and Bob are in Rome together, so we return 0.   Constraints: All dates are provided in the format \"MM-DD\". Alice and Bob's arrival dates are earlier than or equal to their leaving dates. The given dates are valid dates of a non-leap year.",
        "1794": "You are given a 0-indexed integer array players, where players[i] represents the ability of the ith player. You are also given a 0-indexed integer array trainers, where trainers[j] represents the training capacity of the jth trainer. The ith player can match with the jth trainer if the player's ability is less than or equal to the trainer's training capacity. Additionally, the ith player can be matched with at most one trainer, and the jth trainer can be matched with at most one player. Return the maximum number of matchings between players and trainers that satisfy these conditions.   Example 1: Input: players = [4,7,9], trainers = [8,2,5,8] Output: 2 Explanation: One of the ways we can form two matchings is as follows: - players[0] can be matched with trainers[0] since 4 <= 8. - players[1] can be matched with trainers[3] since 7 <= 8. It can be proven that 2 is the maximum number of matchings that can be formed. Example 2: Input: players = [1,1,1], trainers = [10] Output: 1 Explanation: The trainer can be matched with any of the 3 players. Each player can only be matched with one trainer, so the maximum answer is 1.   Constraints: 1 <= players.length, trainers.length <= 105 1 <= players[i], trainers[j] <= 109   Note: This question is the same as 445: Assign Cookies.",
        "1795": "You are given a 0-indexed array nums of length n, consisting of non-negative integers. For each index i from 0 to n - 1, you must determine the size of the minimum sized non-empty subarray of nums starting at i (inclusive) that has the maximum possible bitwise OR. In other words, let Bij be the bitwise OR of the subarray nums[i...j]. You need to find the smallest subarray starting at i, such that bitwise OR of this subarray is equal to max(Bik) where i <= k <= n - 1. The bitwise OR of an array is the bitwise OR of all the numbers in it. Return an integer array answer of size n where answer[i] is the length of the minimum sized subarray starting at i with maximum bitwise OR. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [1,0,2,1,3] Output: [3,3,2,2,1] Explanation: The maximum possible bitwise OR starting at any index is 3.  - Starting at index 0, the shortest subarray that yields it is [1,0,2]. - Starting at index 1, the shortest subarray that yields the maximum bitwise OR is [0,2,1]. - Starting at index 2, the shortest subarray that yields the maximum bitwise OR is [2,1]. - Starting at index 3, the shortest subarray that yields the maximum bitwise OR is [1,3]. - Starting at index 4, the shortest subarray that yields the maximum bitwise OR is [3]. Therefore, we return [3,3,2,2,1].  Example 2: Input: nums = [1,2] Output: [2,1] Explanation: Starting at index 0, the shortest subarray that yields the maximum bitwise OR is of length 2. Starting at index 1, the shortest subarray that yields the maximum bitwise OR is of length 1. Therefore, we return [2,1].   Constraints: n == nums.length 1 <= n <= 105 0 <= nums[i] <= 109",
        "1796": "You are given a 0-indexed 2D integer array transactions, where transactions[i] = [costi, cashbacki]. The array describes transactions, where each transaction must be completed exactly once in some order. At any given moment, you have a certain amount of money. In order to complete transaction i, money >= costi must hold true. After performing a transaction, money becomes money - costi + cashbacki. Return the minimum amount of money required before any transaction so that all of the transactions can be completed regardless of the order of the transactions.   Example 1: Input: transactions = [[2,1],[5,0],[4,2]] Output: 10 Explanation: Starting with money = 10, the transactions can be performed in any order. It can be shown that starting with money < 10 will fail to complete all transactions in some order. Example 2: Input: transactions = [[3,0],[0,3]] Output: 3 Explanation: - If transactions are in the order [[3,0],[0,3]], the minimum money required to complete the transactions is 3. - If transactions are in the order [[0,3],[3,0]], the minimum money required to complete the transactions is 0. Thus, starting with money = 3, the transactions can be performed in any order.   Constraints: 1 <= transactions.length <= 105 transactions[i].length == 2 0 <= costi, cashbacki <= 109",
        "1797": "Given a positive integer n, return the smallest positive integer that is a multiple of both 2 and n.   Example 1: Input: n = 5 Output: 10 Explanation: The smallest multiple of both 5 and 2 is 10. Example 2: Input: n = 6 Output: 6 Explanation: The smallest multiple of both 6 and 2 is 6. Note that a number is a multiple of itself.   Constraints: 1 <= n <= 150",
        "1798": "An alphabetical continuous string is a string consisting of consecutive letters in the alphabet. In other words, it is any substring of the string \"abcdefghijklmnopqrstuvwxyz\". For example, \"abc\" is an alphabetical continuous string, while \"acb\" and \"za\" are not. Given a string s consisting of lowercase letters only, return the length of the longest alphabetical continuous substring.   Example 1: Input: s = \"abacaba\" Output: 2 Explanation: There are 4 distinct continuous substrings: \"a\", \"b\", \"c\" and \"ab\". \"ab\" is the longest continuous substring. Example 2: Input: s = \"abcde\" Output: 5 Explanation: \"abcde\" is the longest continuous substring.   Constraints: 1 <= s.length <= 105 s consists of only English lowercase letters.",
        "1799": "Given the root of a perfect binary tree, reverse the node values at each odd level of the tree. For example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2]. Return the root of the reversed tree. A binary tree is perfect if all parent nodes have two children and all leaves are on the same level. The level of a node is the number of edges along the path between it and the root node.   Example 1: Input: root = [2,3,5,8,13,21,34] Output: [2,5,3,8,13,21,34] Explanation:  The tree has only one odd level. The nodes at level 1 are 3, 5 respectively, which are reversed and become 5, 3. Example 2: Input: root = [7,13,11] Output: [7,11,13] Explanation:  The nodes at level 1 are 13, 11, which are reversed and become 11, 13. Example 3: Input: root = [0,1,2,0,0,0,0,1,1,1,1,2,2,2,2] Output: [0,2,1,0,0,0,0,2,2,2,2,1,1,1,1] Explanation:  The odd levels have non-zero values. The nodes at level 1 were 1, 2, and are 2, 1 after the reversal. The nodes at level 3 were 1, 1, 1, 1, 2, 2, 2, 2, and are 2, 2, 2, 2, 1, 1, 1, 1 after the reversal.   Constraints: The number of nodes in the tree is in the range [1, 214]. 0 <= Node.val <= 105 root is a perfect binary tree.",
        "1800": "You are given an array words of size n consisting of non-empty strings. We define the score of a string term as the number of strings words[i] such that term is a prefix of words[i]. For example, if words = [\"a\", \"ab\", \"abc\", \"cab\"], then the score of \"ab\" is 2, since \"ab\" is a prefix of both \"ab\" and \"abc\". Return an array answer of size n where answer[i] is the sum of scores of every non-empty prefix of words[i]. Note that a string is considered as a prefix of itself.   Example 1: Input: words = [\"abc\",\"ab\",\"bc\",\"b\"] Output: [5,4,3,2] Explanation: The answer for each string is the following: - \"abc\" has 3 prefixes: \"a\", \"ab\", and \"abc\". - There are 2 strings with the prefix \"a\", 2 strings with the prefix \"ab\", and 1 string with the prefix \"abc\". The total is answer[0] = 2 + 2 + 1 = 5. - \"ab\" has 2 prefixes: \"a\" and \"ab\". - There are 2 strings with the prefix \"a\", and 2 strings with the prefix \"ab\". The total is answer[1] = 2 + 2 = 4. - \"bc\" has 2 prefixes: \"b\" and \"bc\". - There are 2 strings with the prefix \"b\", and 1 string with the prefix \"bc\". The total is answer[2] = 2 + 1 = 3. - \"b\" has 1 prefix: \"b\". - There are 2 strings with the prefix \"b\". The total is answer[3] = 2. Example 2: Input: words = [\"abcd\"] Output: [4] Explanation: \"abcd\" has 4 prefixes: \"a\", \"ab\", \"abc\", and \"abcd\". Each prefix has a score of one, so the total is answer[0] = 1 + 1 + 1 + 1 = 4.   Constraints: 1 <= words.length <= 1000 1 <= words[i].length <= 1000 words[i] consists of lowercase English letters.",
        "1801": "You are given an array of strings names, and an array heights that consists of distinct positive integers. Both arrays are of length n. For each index i, names[i] and heights[i] denote the name and height of the ith person. Return names sorted in descending order by the people's heights.   Example 1: Input: names = [\"Mary\",\"John\",\"Emma\"], heights = [180,165,170] Output: [\"Mary\",\"Emma\",\"John\"] Explanation: Mary is the tallest, followed by Emma and John. Example 2: Input: names = [\"Alice\",\"Bob\",\"Bob\"], heights = [155,185,150] Output: [\"Bob\",\"Alice\",\"Bob\"] Explanation: The first Bob is the tallest, followed by Alice and the second Bob.   Constraints: n == names.length == heights.length 1 <= n <= 103 1 <= names[i].length <= 20 1 <= heights[i] <= 105 names[i] consists of lower and upper case English letters. All the values of heights are distinct.",
        "1802": "You are given an integer array nums of size n. Consider a non-empty subarray from nums that has the maximum possible bitwise AND. In other words, let k be the maximum value of the bitwise AND of any subarray of nums. Then, only subarrays with a bitwise AND equal to k should be considered. Return the length of the longest such subarray. The bitwise AND of an array is the bitwise AND of all the numbers in it. A subarray is a contiguous sequence of elements within an array.   Example 1: Input: nums = [1,2,3,3,2,2] Output: 2 Explanation: The maximum possible bitwise AND of a subarray is 3. The longest subarray with that value is [3,3], so we return 2. Example 2: Input: nums = [1,2,3,4] Output: 1 Explanation: The maximum possible bitwise AND of a subarray is 4. The longest subarray with that value is [4], so we return 1.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 106",
        "1803": "You are given a 0-indexed integer array nums of size n and a positive integer k. We call an index i in the range k <= i < n - k good if the following conditions are satisfied: The k elements that are just before the index i are in non-increasing order. The k elements that are just after the index i are in non-decreasing order. Return an array of all good indices sorted in increasing order.   Example 1: Input: nums = [2,1,1,1,3,4,1], k = 2 Output: [2,3] Explanation: There are two good indices in the array: - Index 2. The subarray [2,1] is in non-increasing order, and the subarray [1,3] is in non-decreasing order. - Index 3. The subarray [1,1] is in non-increasing order, and the subarray [3,4] is in non-decreasing order. Note that the index 4 is not good because [4,1] is not non-decreasing. Example 2: Input: nums = [2,1,1,2], k = 2 Output: [] Explanation: There are no good indices in this array.   Constraints: n == nums.length 3 <= n <= 105 1 <= nums[i] <= 106 1 <= k <= n / 2",
        "1804": "There is a tree (i.e. a connected, undirected graph with no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. You are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node. You are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi. A good path is a simple path that satisfies the following conditions: The starting node and the ending node have the same value. All nodes between the starting node and the ending node have values less than or equal to the starting node (i.e. the starting node's value should be the maximum value along the path). Return the number of distinct good paths. Note that a path and its reverse are counted as the same path. For example, 0 -> 1 is considered to be the same as 1 -> 0. A single node is also considered as a valid path.   Example 1: Input: vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]] Output: 6 Explanation: There are 5 good paths consisting of a single node. There is 1 additional good path: 1 -> 0 -> 2 -> 4. (The reverse path 4 -> 2 -> 0 -> 1 is treated as the same as 1 -> 0 -> 2 -> 4.) Note that 0 -> 2 -> 3 is not a good path because vals[2] > vals[0]. Example 2: Input: vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]] Output: 7 Explanation: There are 5 good paths consisting of a single node. There are 2 additional good paths: 0 -> 1 and 2 -> 3. Example 3: Input: vals = [1], edges = [] Output: 1 Explanation: The tree consists of only one node, so there is one good path.   Constraints: n == vals.length 1 <= n <= 3 * 104 0 <= vals[i] <= 105 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n ai != bi edges represents a valid tree.",
        "1805": "You are given a 0-indexed string word, consisting of lowercase English letters. You need to select one index and remove the letter at that index from word so that the frequency of every letter present in word is equal. Return true if it is possible to remove one letter so that the frequency of all letters in word are equal, and false otherwise. Note: The frequency of a letter x is the number of times it occurs in the string. You must remove exactly one letter and cannot choose to do nothing.   Example 1: Input: word = \"abcc\" Output: true Explanation: Select index 3 and delete it: word becomes \"abc\" and each character has a frequency of 1. Example 2: Input: word = \"aazz\" Output: false Explanation: We must delete a character, so either the frequency of \"a\" is 1 and the frequency of \"z\" is 2, or vice versa. It is impossible to make all present letters have equal frequency.   Constraints: 2 <= word.length <= 100 word consists of lowercase English letters only.",
        "1806": "You are given a stream of n videos, each represented by a distinct number from 1 to n that you need to \"upload\" to a server. You need to implement a data structure that calculates the length of the longest uploaded prefix at various points in the upload process. We consider i to be an uploaded prefix if all videos in the range 1 to i (inclusive) have been uploaded to the server. The longest uploaded prefix is the maximum value of i that satisfies this definition.  Implement the LUPrefix class: LUPrefix(int n) Initializes the object for a stream of n videos. void upload(int video) Uploads video to the server. int longest() Returns the length of the longest uploaded prefix defined above.   Example 1: Input [\"LUPrefix\", \"upload\", \"longest\", \"upload\", \"longest\", \"upload\", \"longest\"] [[4], [3], [], [1], [], [2], []] Output [null, null, 0, null, 1, null, 3]  Explanation LUPrefix server = new LUPrefix(4);   // Initialize a stream of 4 videos. server.upload(3);                    // Upload video 3. server.longest();                    // Since video 1 has not been uploaded yet, there is no prefix.                                      // So, we return 0. server.upload(1);                    // Upload video 1. server.longest();                    // The prefix [1] is the longest uploaded prefix, so we return 1. server.upload(2);                    // Upload video 2. server.longest();                    // The prefix [1,2,3] is the longest uploaded prefix, so we return 3.   Constraints: 1 <= n <= 105 1 <= video <= n All values of video are distinct. At most 2 * 105 calls in total will be made to upload and longest. At least one call will be made to longest.",
        "1807": "You are given two 0-indexed arrays, nums1 and nums2, consisting of non-negative integers. There exists another array, nums3, which contains the bitwise XOR of all pairings of integers between nums1 and nums2 (every integer in nums1 is paired with every integer in nums2 exactly once). Return the bitwise XOR of all integers in nums3.   Example 1: Input: nums1 = [2,1,3], nums2 = [10,2,5,0] Output: 13 Explanation: A possible nums3 array is [8,0,7,2,11,3,4,1,9,1,6,3]. The bitwise XOR of all these numbers is 13, so we return 13. Example 2: Input: nums1 = [1,2], nums2 = [3,4] Output: 0 Explanation: All possible pairs of bitwise XORs are nums1[0] ^ nums2[0], nums1[0] ^ nums2[1], nums1[1] ^ nums2[0], and nums1[1] ^ nums2[1]. Thus, one possible nums3 array is [2,5,1,6]. 2 ^ 5 ^ 1 ^ 6 = 0, so we return 0.   Constraints: 1 <= nums1.length, nums2.length <= 105 0 <= nums1[i], nums2[j] <= 109",
        "1808": "You are given two 0-indexed integer arrays nums1 and nums2, each of size n, and an integer diff. Find the number of pairs (i, j) such that: 0 <= i < j <= n - 1 and nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff. Return the number of pairs that satisfy the conditions.   Example 1: Input: nums1 = [3,2,5], nums2 = [2,2,1], diff = 1 Output: 3 Explanation: There are 3 pairs that satisfy the conditions: 1. i = 0, j = 1: 3 - 2 <= 2 - 2 + 1. Since i < j and 1 <= 1, this pair satisfies the conditions. 2. i = 0, j = 2: 3 - 5 <= 2 - 1 + 1. Since i < j and -2 <= 2, this pair satisfies the conditions. 3. i = 1, j = 2: 2 - 5 <= 2 - 1 + 1. Since i < j and -3 <= 2, this pair satisfies the conditions. Therefore, we return 3. Example 2: Input: nums1 = [3,-1], nums2 = [-2,2], diff = -1 Output: 0 Explanation: Since there does not exist any pair that satisfies the conditions, we return 0.   Constraints: n == nums1.length == nums2.length 2 <= n <= 105 -104 <= nums1[i], nums2[i] <= 104 -104 <= diff <= 104",
        "1809": "Given two positive integers a and b, return the number of common factors of a and b. An integer x is a common factor of a and b if x divides both a and b.   Example 1: Input: a = 12, b = 6 Output: 4 Explanation: The common factors of 12 and 6 are 1, 2, 3, 6. Example 2: Input: a = 25, b = 30 Output: 2 Explanation: The common factors of 25 and 30 are 1, 5.   Constraints: 1 <= a, b <= 1000",
        "1810": "You are given an m x n integer matrix grid. We define an hourglass as a part of the matrix with the following form: Return the maximum sum of the elements of an hourglass. Note that an hourglass cannot be rotated and must be entirely contained within the matrix.   Example 1: Input: grid = [[6,2,1,3],[4,2,1,5],[9,2,8,7],[4,1,2,9]] Output: 30 Explanation: The cells shown above represent the hourglass with the maximum sum: 6 + 2 + 1 + 2 + 9 + 2 + 8 = 30. Example 2: Input: grid = [[1,2,3],[4,5,6],[7,8,9]] Output: 35 Explanation: There is only one hourglass in the matrix, with the sum: 1 + 2 + 3 + 5 + 7 + 8 + 9 = 35.   Constraints: m == grid.length n == grid[i].length 3 <= m, n <= 150 0 <= grid[i][j] <= 106",
        "1811": "Given two positive integers num1 and num2, find the positive integer x such that: x has the same number of set bits as num2, and The value x XOR num1 is minimal. Note that XOR is the bitwise XOR operation. Return the integer x. The test cases are generated such that x is uniquely determined. The number of set bits of an integer is the number of 1's in its binary representation.   Example 1: Input: num1 = 3, num2 = 5 Output: 3 Explanation: The binary representations of num1 and num2 are 0011 and 0101, respectively. The integer 3 has the same number of set bits as num2, and the value 3 XOR 3 = 0 is minimal. Example 2: Input: num1 = 1, num2 = 12 Output: 3 Explanation: The binary representations of num1 and num2 are 0001 and 1100, respectively. The integer 3 has the same number of set bits as num2, and the value 3 XOR 1 = 2 is minimal.   Constraints: 1 <= num1, num2 <= 109",
        "1812": "You are given a string s consisting of only lowercase English letters. In one operation, you can: Delete the entire string s, or Delete the first i letters of s if the first i letters of s are equal to the following i letters in s, for any i in the range 1 <= i <= s.length / 2. For example, if s = \"ababc\", then in one operation, you could delete the first two letters of s to get \"abc\", since the first two letters of s and the following two letters of s are both equal to \"ab\". Return the maximum number of operations needed to delete all of s.   Example 1: Input: s = \"abcabcdabc\" Output: 2 Explanation: - Delete the first 3 letters (\"abc\") since the next 3 letters are equal. Now, s = \"abcdabc\". - Delete all the letters. We used 2 operations so return 2. It can be proven that 2 is the maximum number of operations needed. Note that in the second operation we cannot delete \"abc\" again because the next occurrence of \"abc\" does not happen in the next 3 letters. Example 2: Input: s = \"aaabaab\" Output: 4 Explanation: - Delete the first letter (\"a\") since the next letter is equal. Now, s = \"aabaab\". - Delete the first 3 letters (\"aab\") since the next 3 letters are equal. Now, s = \"aab\". - Delete the first letter (\"a\") since the next letter is equal. Now, s = \"ab\". - Delete all the letters. We used 4 operations so return 4. It can be proven that 4 is the maximum number of operations needed. Example 3: Input: s = \"aaaaa\" Output: 5 Explanation: In each operation, we can delete the first letter of s.   Constraints: 1 <= s.length <= 4000 s consists only of lowercase English letters.",
        "1813": "There are n employees, each with a unique id from 0 to n - 1. You are given a 2D integer array logs where logs[i] = [idi, leaveTimei] where: idi is the id of the employee that worked on the ith task, and leaveTimei is the time at which the employee finished the ith task. All the values leaveTimei are unique. Note that the ith task starts the moment right after the (i - 1)th task ends, and the 0th task starts at time 0. Return the id of the employee that worked the task with the longest time. If there is a tie between two or more employees, return the smallest id among them.   Example 1: Input: n = 10, logs = [[0,3],[2,5],[0,9],[1,15]] Output: 1 Explanation:  Task 0 started at 0 and ended at 3 with 3 units of times. Task 1 started at 3 and ended at 5 with 2 units of times. Task 2 started at 5 and ended at 9 with 4 units of times. Task 3 started at 9 and ended at 15 with 6 units of times. The task with the longest time is task 3 and the employee with id 1 is the one that worked on it, so we return 1. Example 2: Input: n = 26, logs = [[1,1],[3,7],[2,12],[7,17]] Output: 3 Explanation:  Task 0 started at 0 and ended at 1 with 1 unit of times. Task 1 started at 1 and ended at 7 with 6 units of times. Task 2 started at 7 and ended at 12 with 5 units of times. Task 3 started at 12 and ended at 17 with 5 units of times. The tasks with the longest time is task 1. The employee that worked on it is 3, so we return 3. Example 3: Input: n = 2, logs = [[0,10],[1,20]] Output: 0 Explanation:  Task 0 started at 0 and ended at 10 with 10 units of times. Task 1 started at 10 and ended at 20 with 10 units of times. The tasks with the longest time are tasks 0 and 1. The employees that worked on them are 0 and 1, so we return the smallest id 0.   Constraints: 2 <= n <= 500 1 <= logs.length <= 500 logs[i].length == 2 0 <= idi <= n - 1 1 <= leaveTimei <= 500 idi != idi+1 leaveTimei are sorted in a strictly increasing order.",
        "1814": "You are given an integer array pref of size n. Find and return the array arr of size n that satisfies: pref[i] = arr[0] ^ arr[1] ^ ... ^ arr[i]. Note that ^ denotes the bitwise-xor operation. It can be proven that the answer is unique.   Example 1: Input: pref = [5,2,0,3,1] Output: [5,7,2,3,2] Explanation: From the array [5,7,2,3,2] we have the following: - pref[0] = 5. - pref[1] = 5 ^ 7 = 2. - pref[2] = 5 ^ 7 ^ 2 = 0. - pref[3] = 5 ^ 7 ^ 2 ^ 3 = 3. - pref[4] = 5 ^ 7 ^ 2 ^ 3 ^ 2 = 1. Example 2: Input: pref = [13] Output: [13] Explanation: We have pref[0] = arr[0] = 13.   Constraints: 1 <= pref.length <= 105 0 <= pref[i] <= 106",
        "1815": "You are given a string s and a robot that currently holds an empty string t. Apply one of the following operations until s and t are both empty: Remove the first character of a string s and give it to the robot. The robot will append this character to the string t. Remove the last character of a string t and give it to the robot. The robot will write this character on paper. Return the lexicographically smallest string that can be written on the paper.   Example 1: Input: s = \"zza\" Output: \"azz\" Explanation: Let p denote the written string. Initially p=\"\", s=\"zza\", t=\"\". Perform first operation three times p=\"\", s=\"\", t=\"zza\". Perform second operation three times p=\"azz\", s=\"\", t=\"\". Example 2: Input: s = \"bac\" Output: \"abc\" Explanation: Let p denote the written string. Perform first operation twice p=\"\", s=\"c\", t=\"ba\".  Perform second operation twice p=\"ab\", s=\"c\", t=\"\".  Perform first operation p=\"ab\", s=\"\", t=\"c\".  Perform second operation p=\"abc\", s=\"\", t=\"\". Example 3: Input: s = \"bdda\" Output: \"addb\" Explanation: Let p denote the written string. Initially p=\"\", s=\"bdda\", t=\"\". Perform first operation four times p=\"\", s=\"\", t=\"bdda\". Perform second operation four times p=\"addb\", s=\"\", t=\"\".   Constraints: 1 <= s.length <= 105 s consists of only English lowercase letters.",
        "1816": "You are given a 0-indexed m x n integer matrix grid and an integer k. You are currently at position (0, 0) and you want to reach position (m - 1, n - 1) moving only down or right. Return the number of paths where the sum of the elements on the path is divisible by k. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3 Output: 2 Explanation: There are two paths where the sum of the elements on the path is divisible by k. The first path highlighted in red has a sum of 5 + 2 + 4 + 5 + 2 = 18 which is divisible by 3. The second path highlighted in blue has a sum of 5 + 3 + 0 + 5 + 2 = 15 which is divisible by 3. Example 2: Input: grid = [[0,0]], k = 5 Output: 1 Explanation: The path highlighted in red has a sum of 0 + 0 = 0 which is divisible by 5. Example 3: Input: grid = [[7,3,4,9],[2,3,6,2],[2,3,7,0]], k = 1 Output: 10 Explanation: Every integer is divisible by 1 so the sum of the elements on every possible path is divisible by k.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 5 * 104 1 <= m * n <= 5 * 104 0 <= grid[i][j] <= 100 1 <= k <= 50",
        "1817": "Given a positive integer n, there exists a 0-indexed array called powers, composed of the minimum number of powers of 2 that sum to n. The array is sorted in non-decreasing order, and there is only one way to form the array. You are also given a 0-indexed 2D integer array queries, where queries[i] = [lefti, righti]. Each queries[i] represents a query where you have to find the product of all powers[j] with lefti <= j <= righti. Return an array answers, equal in length to queries, where answers[i] is the answer to the ith query. Since the answer to the ith query may be too large, each answers[i] should be returned modulo 109 + 7.   Example 1: Input: n = 15, queries = [[0,1],[2,2],[0,3]] Output: [2,4,64] Explanation: For n = 15, powers = [1,2,4,8]. It can be shown that powers cannot be a smaller size. Answer to 1st query: powers[0] * powers[1] = 1 * 2 = 2. Answer to 2nd query: powers[2] = 4. Answer to 3rd query: powers[0] * powers[1] * powers[2] * powers[3] = 1 * 2 * 4 * 8 = 64. Each answer modulo 109 + 7 yields the same answer, so [2,4,64] is returned. Example 2: Input: n = 2, queries = [[0,0]] Output: [2] Explanation: For n = 2, powers = [2]. The answer to the only query is powers[0] = 2. The answer modulo 109 + 7 is the same, so [2] is returned.   Constraints: 1 <= n <= 109 1 <= queries.length <= 105 0 <= starti <= endi < powers.length",
        "1818": "You are given a 0-indexed array nums comprising of n non-negative integers. In one operation, you must: Choose an integer i such that 1 <= i < n and nums[i] > 0. Decrease nums[i] by 1. Increase nums[i - 1] by 1. Return the minimum possible value of the maximum integer of nums after performing any number of operations.   Example 1: Input: nums = [3,7,1,6] Output: 5 Explanation: One set of optimal operations is as follows: 1. Choose i = 1, and nums becomes [4,6,1,6]. 2. Choose i = 3, and nums becomes [4,6,2,5]. 3. Choose i = 1, and nums becomes [5,5,2,5]. The maximum integer of nums is 5. It can be shown that the maximum number cannot be less than 5. Therefore, we return 5. Example 2: Input: nums = [10,1] Output: 10 Explanation: It is optimal to leave nums as is, and since 10 is the maximum value, we return 10.   Constraints: n == nums.length 2 <= n <= 105 0 <= nums[i] <= 109",
        "1819": "There is an undirected tree with n nodes labeled from 0 to n - 1. You are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are allowed to delete some edges, splitting the tree into multiple connected components. Let the value of a component be the sum of all nums[i] for which node i is in the component. Return the maximum number of edges you can delete, such that every connected component in the tree has the same value.   Example 1: Input: nums = [6,2,2,2,6], edges = [[0,1],[1,2],[1,3],[3,4]]  Output: 2  Explanation: The above figure shows how we can delete the edges [0,1] and [3,4]. The created components are nodes [0], [1,2,3] and [4]. The sum of the values in each component equals 6. It can be proven that no better deletion exists, so the answer is 2. Example 2: Input: nums = [2], edges = [] Output: 0 Explanation: There are no edges to be deleted.   Constraints: 1 <= n <= 2 * 104 nums.length == n 1 <= nums[i] <= 50 edges.length == n - 1 edges[i].length == 2 0 <= edges[i][0], edges[i][1] <= n - 1 edges represents a valid tree.",
        "1820": "Given an integer array nums that does not contain any zeros, find the largest positive integer k such that -k also exists in the array. Return the positive integer k. If there is no such integer, return -1.   Example 1: Input: nums = [-1,2,-3,3] Output: 3 Explanation: 3 is the only valid k we can find in the array. Example 2: Input: nums = [-1,10,6,7,-7,1] Output: 7 Explanation: Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value. Example 3: Input: nums = [-10,8,6,7,-2,-3] Output: -1 Explanation: There is no a single valid k, we return -1.   Constraints: 1 <= nums.length <= 1000 -1000 <= nums[i] <= 1000 nums[i] != 0",
        "1821": "You are given an array nums consisting of positive integers. You have to take each integer in the array, reverse its digits, and add it to the end of the array. You should apply this operation to the original integers in nums. Return the number of distinct integers in the final array.   Example 1: Input: nums = [1,13,10,12,31] Output: 6 Explanation: After including the reverse of each number, the resulting array is [1,13,10,12,31,1,31,1,21,13]. The reversed integers that were added to the end of the array are underlined. Note that for the integer 10, after reversing it, it becomes 01 which is just 1. The number of distinct integers in this array is 6 (The numbers 1, 10, 12, 13, 21, and 31). Example 2: Input: nums = [2,2,2] Output: 1 Explanation: After including the reverse of each number, the resulting array is [2,2,2,2,2,2]. The number of distinct integers in this array is 1 (The number 2).   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 106",
        "1822": "Given a non-negative integer num, return true if num can be expressed as the sum of any non-negative integer and its reverse, or false otherwise.   Example 1: Input: num = 443 Output: true Explanation: 172 + 271 = 443 so we return true. Example 2: Input: num = 63 Output: false Explanation: 63 cannot be expressed as the sum of a non-negative integer and its reverse so we return false. Example 3: Input: num = 181 Output: true Explanation: 140 + 041 = 181 so we return true. Note that when a number is reversed, there may be leading zeros.   Constraints: 0 <= num <= 105",
        "1823": "You are given an integer array nums and two integers minK and maxK. A fixed-bound subarray of nums is a subarray that satisfies the following conditions: The minimum value in the subarray is equal to minK. The maximum value in the subarray is equal to maxK. Return the number of fixed-bound subarrays. A subarray is a contiguous part of an array.   Example 1: Input: nums = [1,3,5,2,7,5], minK = 1, maxK = 5 Output: 2 Explanation: The fixed-bound subarrays are [1,3,5] and [1,3,5,2]. Example 2: Input: nums = [1,1,1,1], minK = 1, maxK = 1 Output: 10 Explanation: Every subarray of nums is a fixed-bound subarray. There are 10 possible subarrays.   Constraints: 2 <= nums.length <= 105 1 <= nums[i], minK, maxK <= 106",
        "1824": "You are given two arrays of strings that represent two inclusive events that happened on the same day, event1 and event2, where: event1 = [startTime1, endTime1] and event2 = [startTime2, endTime2]. Event times are valid 24 hours format in the form of HH:MM. A conflict happens when two events have some non-empty intersection (i.e., some moment is common to both events). Return true if there is a conflict between two events. Otherwise, return false.   Example 1: Input: event1 = [\"01:15\",\"02:00\"], event2 = [\"02:00\",\"03:00\"] Output: true Explanation: The two events intersect at time 2:00. Example 2: Input: event1 = [\"01:00\",\"02:00\"], event2 = [\"01:20\",\"03:00\"] Output: true Explanation: The two events intersect starting from 01:20 to 02:00. Example 3: Input: event1 = [\"10:00\",\"11:00\"], event2 = [\"14:00\",\"15:00\"] Output: false Explanation: The two events do not intersect.   Constraints: event1.length == event2.length == 2 event1[i].length == event2[i].length == 5 startTime1 <= endTime1 startTime2 <= endTime2 All the event times follow the HH:MM format.",
        "1825": "Given an integer array nums and an integer k, return the number of subarrays of nums where the greatest common divisor of the subarray's elements is k. A subarray is a contiguous non-empty sequence of elements within an array. The greatest common divisor of an array is the largest integer that evenly divides all the array elements.   Example 1: Input: nums = [9,3,1,2,6,3], k = 3 Output: 4 Explanation: The subarrays of nums where 3 is the greatest common divisor of all the subarray's elements are: - [9,3,1,2,6,3] - [9,3,1,2,6,3] - [9,3,1,2,6,3] - [9,3,1,2,6,3] Example 2: Input: nums = [4], k = 7 Output: 0 Explanation: There are no subarrays of nums where 7 is the greatest common divisor of all the subarray's elements.   Constraints: 1 <= nums.length <= 1000 1 <= nums[i], k <= 109",
        "1826": "You are given two 0-indexed arrays nums and cost consisting each of n positive integers. You can do the following operation any number of times: Increase or decrease any element of the array nums by 1. The cost of doing one operation on the ith element is cost[i]. Return the minimum total cost such that all the elements of the array nums become equal.   Example 1: Input: nums = [1,3,5,2], cost = [2,3,1,14] Output: 8 Explanation: We can make all the elements equal to 2 in the following way: - Increase the 0th element one time. The cost is 2. - Decrease the 1st element one time. The cost is 3. - Decrease the 2nd element three times. The cost is 1 + 1 + 1 = 3. The total cost is 2 + 3 + 3 = 8. It can be shown that we cannot make the array equal with a smaller cost. Example 2: Input: nums = [2,2,2,2,2], cost = [4,2,8,1,3] Output: 0 Explanation: All the elements are already equal, so no operations are needed.   Constraints: n == nums.length == cost.length 1 <= n <= 105 1 <= nums[i], cost[i] <= 106 Test cases are generated in a way that the output doesn't exceed 253-1",
        "1827": "You are given two positive integer arrays nums and target, of the same length. In one operation, you can choose any two distinct indices i and j where 0 <= i, j < nums.length and: set nums[i] = nums[i] + 2 and set nums[j] = nums[j] - 2. Two arrays are considered to be similar if the frequency of each element is the same. Return the minimum number of operations required to make nums similar to target. The test cases are generated such that nums can always be similar to target.   Example 1: Input: nums = [8,12,6], target = [2,14,10] Output: 2 Explanation: It is possible to make nums similar to target in two operations: - Choose i = 0 and j = 2, nums = [10,12,4]. - Choose i = 1 and j = 2, nums = [10,14,2]. It can be shown that 2 is the minimum number of operations needed. Example 2: Input: nums = [1,2,5], target = [4,1,3] Output: 1 Explanation: We can make nums similar to target in one operation: - Choose i = 1 and j = 2, nums = [1,4,3]. Example 3: Input: nums = [1,1,1,1,1], target = [1,1,1,1,1] Output: 0 Explanation: The array nums is already similiar to target.   Constraints: n == nums.length == target.length 1 <= n <= 105 1 <= nums[i], target[i] <= 106 It is possible to make nums similar to target.",
        "1828": "You are given an array of equal-length strings words. Assume that the length of each string is n. Each string words[i] can be converted into a difference integer array difference[i] of length n - 1 where difference[i][j] = words[i][j+1] - words[i][j] where 0 <= j <= n - 2. Note that the difference between two letters is the difference between their positions in the alphabet i.e. the position of 'a' is 0, 'b' is 1, and 'z' is 25. For example, for the string \"acb\", the difference integer array is [2 - 0, 1 - 2] = [2, -1]. All the strings in words have the same difference integer array, except one. You should find that string. Return the string in words that has different difference integer array.   Example 1: Input: words = [\"adc\",\"wzy\",\"abc\"] Output: \"abc\" Explanation:  - The difference integer array of \"adc\" is [3 - 0, 2 - 3] = [3, -1]. - The difference integer array of \"wzy\" is [25 - 22, 24 - 25]= [3, -1]. - The difference integer array of \"abc\" is [1 - 0, 2 - 1] = [1, 1].  The odd array out is [1, 1], so we return the corresponding string, \"abc\". Example 2: Input: words = [\"aaa\",\"bob\",\"ccc\",\"ddd\"] Output: \"bob\" Explanation: All the integer arrays are [0, 0] except for \"bob\", which corresponds to [13, -13].   Constraints: 3 <= words.length <= 100 n == words[i].length 2 <= n <= 20 words[i] consists of lowercase English letters.",
        "1829": "You are given two string arrays, queries and dictionary. All words in each array comprise of lowercase English letters and have the same length. In one edit you can take a word from queries, and change any letter in it to any other letter. Find all words from queries that, after a maximum of two edits, equal some word from dictionary. Return a list of all words from queries, that match with some word from dictionary after a maximum of two edits. Return the words in the same order they appear in queries.   Example 1: Input: queries = [\"word\",\"note\",\"ants\",\"wood\"], dictionary = [\"wood\",\"joke\",\"moat\"] Output: [\"word\",\"note\",\"wood\"] Explanation: - Changing the 'r' in \"word\" to 'o' allows it to equal the dictionary word \"wood\". - Changing the 'n' to 'j' and the 't' to 'k' in \"note\" changes it to \"joke\". - It would take more than 2 edits for \"ants\" to equal a dictionary word. - \"wood\" can remain unchanged (0 edits) and match the corresponding dictionary word. Thus, we return [\"word\",\"note\",\"wood\"]. Example 2: Input: queries = [\"yes\"], dictionary = [\"not\"] Output: [] Explanation: Applying any two edits to \"yes\" cannot make it equal to \"not\". Thus, we return an empty array.   Constraints: 1 <= queries.length, dictionary.length <= 100 n == queries[i].length == dictionary[j].length 1 <= n <= 100 All queries[i] and dictionary[j] are composed of lowercase English letters.",
        "1830": "You are given a 0-indexed array nums consisting of positive integers, representing targets on a number line. You are also given an integer space. You have a machine which can destroy targets. Seeding the machine with some nums[i] allows it to destroy all targets with values that can be represented as nums[i] + c * space, where c is any non-negative integer. You want to destroy the maximum number of targets in nums. Return the minimum value of nums[i] you can seed the machine with to destroy the maximum number of targets.   Example 1: Input: nums = [3,7,8,1,1,5], space = 2 Output: 1 Explanation: If we seed the machine with nums[3], then we destroy all targets equal to 1,3,5,7,9,...  In this case, we would destroy 5 total targets (all except for nums[2]).  It is impossible to destroy more than 5 targets, so we return nums[3]. Example 2: Input: nums = [1,3,5,2,4,6], space = 2 Output: 1 Explanation: Seeding the machine with nums[0], or nums[3] destroys 3 targets.  It is not possible to destroy more than 3 targets. Since nums[0] is the minimal integer that can destroy 3 targets, we return 1. Example 3: Input: nums = [6,2,5], space = 100 Output: 2 Explanation: Whatever initial seed we select, we can only destroy 1 target. The minimal seed is nums[1].   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 1 <= space <= 109",
        "1831": "You are given a 0-indexed array of non-negative integers nums. For each integer in nums, you must find its respective second greater integer. The second greater integer of nums[i] is nums[j] such that: j > i nums[j] > nums[i] There exists exactly one index k such that nums[k] > nums[i] and i < k < j. If there is no such nums[j], the second greater integer is considered to be -1. For example, in the array [1, 2, 4, 3], the second greater integer of 1 is 4, 2 is 3, and that of 3 and 4 is -1. Return an integer array answer, where answer[i] is the second greater integer of nums[i].   Example 1: Input: nums = [2,4,0,9,6] Output: [9,6,6,-1,-1] Explanation: 0th index: 4 is the first integer greater than 2, and 9 is the second integer greater than 2, to the right of 2. 1st index: 9 is the first, and 6 is the second integer greater than 4, to the right of 4. 2nd index: 9 is the first, and 6 is the second integer greater than 0, to the right of 0. 3rd index: There is no integer greater than 9 to its right, so the second greater integer is considered to be -1. 4th index: There is no integer greater than 6 to its right, so the second greater integer is considered to be -1. Thus, we return [9,6,6,-1,-1]. Example 2: Input: nums = [3,3] Output: [-1,-1] Explanation: We return [-1,-1] since neither integer has any integer greater than it.   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109",
        "1832": "Given an integer array nums of positive integers, return the average value of all even integers that are divisible by 3. Note that the average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.   Example 1: Input: nums = [1,3,6,10,12,15] Output: 9 Explanation: 6 and 12 are even numbers that are divisible by 3. (6 + 12) / 2 = 9. Example 2: Input: nums = [1,2,4,7,10] Output: 0 Explanation: There is no single number that satisfies the requirement, so return 0.   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 1000",
        "1833": "You are given two string arrays creators and ids, and an integer array views, all of length n. The ith video on a platform was created by creators[i], has an id of ids[i], and has views[i] views. The popularity of a creator is the sum of the number of views on all of the creator's videos. Find the creator with the highest popularity and the id of their most viewed video. If multiple creators have the highest popularity, find all of them. If multiple videos have the highest view count for a creator, find the lexicographically smallest id. Note: It is possible for different videos to have the same id, meaning that ids do not uniquely identify a video. For example, two videos with the same ID are considered as distinct videos with their own viewcount. Return a 2D array of strings answer where answer[i] = [creatorsi, idi] means that creatorsi has the highest popularity and idi is the id of their most popular video. The answer can be returned in any order.   Example 1: Input: creators = [\"alice\",\"bob\",\"alice\",\"chris\"], ids = [\"one\",\"two\",\"three\",\"four\"], views = [5,10,5,4] Output: [[\"alice\",\"one\"],[\"bob\",\"two\"]] Explanation: The popularity of alice is 5 + 5 = 10. The popularity of bob is 10. The popularity of chris is 4. alice and bob are the most popular creators. For bob, the video with the highest view count is \"two\". For alice, the videos with the highest view count are \"one\" and \"three\". Since \"one\" is lexicographically smaller than \"three\", it is included in the answer. Example 2: Input: creators = [\"alice\",\"alice\",\"alice\"], ids = [\"a\",\"b\",\"c\"], views = [1,2,2] Output: [[\"alice\",\"b\"]] Explanation: The videos with id \"b\" and \"c\" have the highest view count. Since \"b\" is lexicographically smaller than \"c\", it is included in the answer.   Constraints: n == creators.length == ids.length == views.length 1 <= n <= 105 1 <= creators[i].length, ids[i].length <= 5 creators[i] and ids[i] consist only of lowercase English letters. 0 <= views[i] <= 105",
        "1834": "You are given two positive integers n and target. An integer is considered beautiful if the sum of its digits is less than or equal to target. Return the minimum non-negative integer x such that n + x is beautiful. The input will be generated such that it is always possible to make n beautiful.   Example 1: Input: n = 16, target = 6 Output: 4 Explanation: Initially n is 16 and its digit sum is 1 + 6 = 7. After adding 4, n becomes 20 and digit sum becomes 2 + 0 = 2. It can be shown that we can not make n beautiful with adding non-negative integer less than 4. Example 2: Input: n = 467, target = 6 Output: 33 Explanation: Initially n is 467 and its digit sum is 4 + 6 + 7 = 17. After adding 33, n becomes 500 and digit sum becomes 5 + 0 + 0 = 5. It can be shown that we can not make n beautiful with adding non-negative integer less than 33. Example 3: Input: n = 1, target = 1 Output: 0 Explanation: Initially n is 1 and its digit sum is 1, which is already smaller than or equal to target.   Constraints: 1 <= n <= 1012 1 <= target <= 150 The input will be generated such that it is always possible to make n beautiful.",
        "1835": "You are given the root of a binary tree with n nodes. Each node is assigned a unique value from 1 to n. You are also given an array queries of size m. You have to perform m independent queries on the tree where in the ith query you do the following: Remove the subtree rooted at the node with the value queries[i] from the tree. It is guaranteed that queries[i] will not be equal to the value of the root. Return an array answer of size m where answer[i] is the height of the tree after performing the ith query. Note: The queries are independent, so the tree returns to its initial state after each query. The height of a tree is the number of edges in the longest simple path from the root to some node in the tree.   Example 1: Input: root = [1,3,4,2,null,6,5,null,null,null,null,null,7], queries = [4] Output: [2] Explanation: The diagram above shows the tree after removing the subtree rooted at node with value 4. The height of the tree is 2 (The path 1 -> 3 -> 2). Example 2: Input: root = [5,8,9,2,1,3,7,4,6], queries = [3,2,4,8] Output: [3,2,3,2] Explanation: We have the following queries: - Removing the subtree rooted at node with value 3. The height of the tree becomes 3 (The path 5 -> 8 -> 2 -> 4). - Removing the subtree rooted at node with value 2. The height of the tree becomes 2 (The path 5 -> 8 -> 1). - Removing the subtree rooted at node with value 4. The height of the tree becomes 3 (The path 5 -> 8 -> 2 -> 6). - Removing the subtree rooted at node with value 8. The height of the tree becomes 2 (The path 5 -> 9 -> 3).   Constraints: The number of nodes in the tree is n. 2 <= n <= 105 1 <= Node.val <= n All the values in the tree are unique. m == queries.length 1 <= m <= min(n, 104) 1 <= queries[i] <= n queries[i] != root.val",
        "1836": "You are given a 0-indexed array nums of size n consisting of non-negative integers. You need to apply n - 1 operations to this array where, in the ith operation (0-indexed), you will apply the following on the ith element of nums: If nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0. Otherwise, you skip this operation. After performing all the operations, shift all the 0's to the end of the array. For example, the array [1,0,2,0,0,1] after shifting all its 0's to the end, is [1,2,1,0,0,0]. Return the resulting array. Note that the operations are applied sequentially, not all at once.   Example 1: Input: nums = [1,2,2,1,1,0] Output: [1,4,2,0,0,0] Explanation: We do the following operations: - i = 0: nums[0] and nums[1] are not equal, so we skip this operation. - i = 1: nums[1] and nums[2] are equal, we multiply nums[1] by 2 and change nums[2] to 0. The array becomes [1,4,0,1,1,0]. - i = 2: nums[2] and nums[3] are not equal, so we skip this operation. - i = 3: nums[3] and nums[4] are equal, we multiply nums[3] by 2 and change nums[4] to 0. The array becomes [1,4,0,2,0,0]. - i = 4: nums[4] and nums[5] are equal, we multiply nums[4] by 2 and change nums[5] to 0. The array becomes [1,4,0,2,0,0]. After that, we shift the 0's to the end, which gives the array [1,4,2,0,0,0]. Example 2: Input: nums = [0,1] Output: [1,0] Explanation: No operation can be applied, we just shift the 0 to the end.   Constraints: 2 <= nums.length <= 2000 0 <= nums[i] <= 1000",
        "1837": "You are given an integer array nums and an integer k. Find the maximum subarray sum of all the subarrays of nums that meet the following conditions: The length of the subarray is k, and All the elements of the subarray are distinct. Return the maximum subarray sum of all the subarrays that meet the conditions. If no subarray meets the conditions, return 0. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [1,5,4,2,9,9,9], k = 3 Output: 15 Explanation: The subarrays of nums with length 3 are: - [1,5,4] which meets the requirements and has a sum of 10. - [5,4,2] which meets the requirements and has a sum of 11. - [4,2,9] which meets the requirements and has a sum of 15. - [2,9,9] which does not meet the requirements because the element 9 is repeated. - [9,9,9] which does not meet the requirements because the element 9 is repeated. We return 15 because it is the maximum subarray sum of all the subarrays that meet the conditions Example 2: Input: nums = [4,4,4], k = 3 Output: 0 Explanation: The subarrays of nums with length 3 are: - [4,4,4] which does not meet the requirements because the element 4 is repeated. We return 0 because no subarrays meet the conditions.   Constraints: 1 <= k <= nums.length <= 105 1 <= nums[i] <= 105",
        "1838": "You are given a 0-indexed integer array costs where costs[i] is the cost of hiring the ith worker. You are also given two integers k and candidates. We want to hire exactly k workers according to the following rules: You will run k sessions and hire exactly one worker in each session. In each hiring session, choose the worker with the lowest cost from either the first candidates workers or the last candidates workers. Break the tie by the smallest index. For example, if costs = [3,2,7,7,1,2] and candidates = 2, then in the first hiring session, we will choose the 4th worker because they have the lowest cost [3,2,7,7,1,2]. In the second hiring session, we will choose 1st worker because they have the same lowest cost as 4th worker but they have the smallest index [3,2,7,7,2]. Please note that the indexing may be changed in the process. If there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index. A worker can only be chosen once. Return the total cost to hire exactly k workers.   Example 1: Input: costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4 Output: 11 Explanation: We hire 3 workers in total. The total cost is initially 0. - In the first hiring round we choose the worker from [17,12,10,2,7,2,11,20,8]. The lowest cost is 2, and we break the tie by the smallest index, which is 3. The total cost = 0 + 2 = 2. - In the second hiring round we choose the worker from [17,12,10,7,2,11,20,8]. The lowest cost is 2 (index 4). The total cost = 2 + 2 = 4. - In the third hiring round we choose the worker from [17,12,10,7,11,20,8]. The lowest cost is 7 (index 3). The total cost = 4 + 7 = 11. Notice that the worker with index 3 was common in the first and last four workers. The total hiring cost is 11. Example 2: Input: costs = [1,2,4,1], k = 3, candidates = 3 Output: 4 Explanation: We hire 3 workers in total. The total cost is initially 0. - In the first hiring round we choose the worker from [1,2,4,1]. The lowest cost is 1, and we break the tie by the smallest index, which is 0. The total cost = 0 + 1 = 1. Notice that workers with index 1 and 2 are common in the first and last 3 workers. - In the second hiring round we choose the worker from [2,4,1]. The lowest cost is 1 (index 2). The total cost = 1 + 1 = 2. - In the third hiring round there are less than three candidates. We choose the worker from the remaining workers [2,4]. The lowest cost is 2 (index 0). The total cost = 2 + 2 = 4. The total hiring cost is 4.   Constraints: 1 <= costs.length <= 105  1 <= costs[i] <= 105 1 <= k, candidates <= costs.length",
        "1839": "There are some robots and factories on the X-axis. You are given an integer array robot where robot[i] is the position of the ith robot. You are also given a 2D integer array factory where factory[j] = [positionj, limitj] indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots. The positions of each robot are unique. The positions of each factory are also unique. Note that a robot can be in the same position as a factory initially. All the robots are initially broken; they keep moving in one direction. The direction could be the negative or the positive direction of the X-axis. When a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving. At any moment, you can set the initial direction of moving for some robot. Your target is to minimize the total distance traveled by all the robots. Return the minimum total distance traveled by all the robots. The test cases are generated such that all the robots can be repaired. Note that All robots move at the same speed. If two robots move in the same direction, they will never collide. If two robots move in opposite directions and they meet at some point, they do not collide. They cross each other. If a robot passes by a factory that reached its limits, it crosses it as if it does not exist. If the robot moved from a position x to a position y, the distance it moved is |y - x|.   Example 1: Input: robot = [0,4,6], factory = [[2,2],[6,2]] Output: 4 Explanation: As shown in the figure: - The first robot at position 0 moves in the positive direction. It will be repaired at the first factory. - The second robot at position 4 moves in the negative direction. It will be repaired at the first factory. - The third robot at position 6 will be repaired at the second factory. It does not need to move. The limit of the first factory is 2, and it fixed 2 robots. The limit of the second factory is 2, and it fixed 1 robot. The total distance is |2 - 0| + |2 - 4| + |6 - 6| = 4. It can be shown that we cannot achieve a better total distance than 4. Example 2: Input: robot = [1,-1], factory = [[-2,1],[2,1]] Output: 2 Explanation: As shown in the figure: - The first robot at position 1 moves in the positive direction. It will be repaired at the second factory. - The second robot at position -1 moves in the negative direction. It will be repaired at the first factory. The limit of the first factory is 1, and it fixed 1 robot. The limit of the second factory is 1, and it fixed 1 robot. The total distance is |2 - 1| + |(-2) - (-1)| = 2. It can be shown that we cannot achieve a better total distance than 2.   Constraints: 1 <= robot.length, factory.length <= 100 factory[j].length == 2 -109 <= robot[i], positionj <= 109 0 <= limitj <= robot.length The input will be generated such that it is always possible to repair every robot.",
        "1840": "You are given a 0-indexed integer array nums of even length. As long as nums is not empty, you must repetitively: Find the minimum number in nums and remove it. Find the maximum number in nums and remove it. Calculate the average of the two removed numbers. The average of two numbers a and b is (a + b) / 2. For example, the average of 2 and 3 is (2 + 3) / 2 = 2.5. Return the number of distinct averages calculated using the above process. Note that when there is a tie for a minimum or maximum number, any can be removed.   Example 1: Input: nums = [4,1,4,0,3,5] Output: 2 Explanation: 1. Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3]. 2. Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3]. 3. Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5. Since there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2. Example 2: Input: nums = [1,100] Output: 1 Explanation: There is only one average to be calculated after removing 1 and 100, so we return 1.   Constraints: 2 <= nums.length <= 100 nums.length is even. 0 <= nums[i] <= 100",
        "1841": "Given the integers zero, one, low, and high, we can construct a string by starting with an empty string, and then at each step perform either of the following: Append the character '0' zero times. Append the character '1' one times. This can be performed any number of times. A good string is a string constructed by the above process having a length between low and high (inclusive). Return the number of different good strings that can be constructed satisfying these properties. Since the answer can be large, return it modulo 109 + 7.   Example 1: Input: low = 3, high = 3, zero = 1, one = 1 Output: 8 Explanation:  One possible valid good string is \"011\".  It can be constructed as follows: \"\" -> \"0\" -> \"01\" -> \"011\".  All binary strings from \"000\" to \"111\" are good strings in this example. Example 2: Input: low = 2, high = 3, zero = 1, one = 2 Output: 5 Explanation: The good strings are \"00\", \"11\", \"000\", \"110\", and \"011\".   Constraints: 1 <= low <= high <= 105 1 <= zero, one <= low",
        "1842": "There is an undirected tree with n nodes labeled from 0 to n - 1, rooted at node 0. You are given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. At every node i, there is a gate. You are also given an array of even integers amount, where amount[i] represents: the price needed to open the gate at node i, if amount[i] is negative, or, the cash reward obtained on opening the gate at node i, otherwise. The game goes on as follows: Initially, Alice is at node 0 and Bob is at node bob. At every second, Alice and Bob each move to an adjacent node. Alice moves towards some leaf node, while Bob moves towards node 0. For every node along their path, Alice and Bob either spend money to open the gate at that node, or accept the reward. Note that: If the gate is already open, no price will be required, nor will there be any cash reward. If Alice and Bob reach the node simultaneously, they share the price/reward for opening the gate there. In other words, if the price to open the gate is c, then both Alice and Bob pay c / 2 each. Similarly, if the reward at the gate is c, both of them receive c / 2 each. If Alice reaches a leaf node, she stops moving. Similarly, if Bob reaches node 0, he stops moving. Note that these events are independent of each other. Return the maximum net income Alice can have if she travels towards the optimal leaf node.   Example 1: Input: edges = [[0,1],[1,2],[1,3],[3,4]], bob = 3, amount = [-2,4,2,-4,6] Output: 6 Explanation:  The above diagram represents the given tree. The game goes as follows: - Alice is initially on node 0, Bob on node 3. They open the gates of their respective nodes.   Alice's net income is now -2. - Both Alice and Bob move to node 1.    Since they reach here simultaneously, they open the gate together and share the reward.   Alice's net income becomes -2 + (4 / 2) = 0. - Alice moves on to node 3. Since Bob already opened its gate, Alice's income remains unchanged.   Bob moves on to node 0, and stops moving. - Alice moves on to node 4 and opens the gate there. Her net income becomes 0 + 6 = 6. Now, neither Alice nor Bob can make any further moves, and the game ends. It is not possible for Alice to get a higher net income. Example 2: Input: edges = [[0,1]], bob = 1, amount = [-7280,2350] Output: -7280 Explanation:  Alice follows the path 0->1 whereas Bob follows the path 1->0. Thus, Alice opens the gate at node 0 only. Hence, her net income is -7280.    Constraints: 2 <= n <= 105 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n ai != bi edges represents a valid tree. 1 <= bob < n amount.length == n amount[i] is an even integer in the range [-104, 104].",
        "1843": "You are given a non-negative floating point number rounded to two decimal places celsius, that denotes the temperature in Celsius. You should convert Celsius into Kelvin and Fahrenheit and return it as an array ans = [kelvin, fahrenheit]. Return the array ans. Answers within 10-5 of the actual answer will be accepted. Note that: Kelvin = Celsius + 273.15 Fahrenheit = Celsius * 1.80 + 32.00   Example 1: Input: celsius = 36.50 Output: [309.65000,97.70000] Explanation: Temperature at 36.50 Celsius converted in Kelvin is 309.65 and converted in Fahrenheit is 97.70. Example 2: Input: celsius = 122.11 Output: [395.26000,251.79800] Explanation: Temperature at 122.11 Celsius converted in Kelvin is 395.26 and converted in Fahrenheit is 251.798.   Constraints: 0 <= celsius <= 1000",
        "1844": "Given an integer array nums and an integer k, return the number of subarrays of nums where the least common multiple of the subarray's elements is k. A subarray is a contiguous non-empty sequence of elements within an array. The least common multiple of an array is the smallest positive integer that is divisible by all the array elements.   Example 1: Input: nums = [3,6,2,7,1], k = 6 Output: 4 Explanation: The subarrays of nums where 6 is the least common multiple of all the subarray's elements are: - [3,6,2,7,1] - [3,6,2,7,1] - [3,6,2,7,1] - [3,6,2,7,1] Example 2: Input: nums = [3], k = 2 Output: 0 Explanation: There are no subarrays of nums where 2 is the least common multiple of all the subarray's elements.   Constraints: 1 <= nums.length <= 1000 1 <= nums[i], k <= 1000",
        "1845": "You are given the root of a binary tree with unique values. In one operation, you can choose any two nodes at the same level and swap their values. Return the minimum number of operations needed to make the values at each level sorted in a strictly increasing order. The level of a node is the number of edges along the path between it and the root node.   Example 1: Input: root = [1,4,3,7,6,8,5,null,null,null,null,9,null,10] Output: 3 Explanation: - Swap 4 and 3. The 2nd level becomes [3,4]. - Swap 7 and 5. The 3rd level becomes [5,6,8,7]. - Swap 8 and 7. The 3rd level becomes [5,6,7,8]. We used 3 operations so return 3. It can be proven that 3 is the minimum number of operations needed. Example 2: Input: root = [1,3,2,7,6,5,4] Output: 3 Explanation: - Swap 3 and 2. The 2nd level becomes [2,3]. - Swap 7 and 4. The 3rd level becomes [4,6,5,7]. - Swap 6 and 5. The 3rd level becomes [4,5,6,7]. We used 3 operations so return 3. It can be proven that 3 is the minimum number of operations needed. Example 3: Input: root = [1,2,3,4,5,6] Output: 0 Explanation: Each level is already sorted in increasing order so return 0.   Constraints: The number of nodes in the tree is in the range [1, 105]. 1 <= Node.val <= 105 All the values of the tree are unique.",
        "1846": "You are given a string s and a positive integer k. Select a set of non-overlapping substrings from the string s that satisfy the following conditions: The length of each substring is at least k. Each substring is a palindrome. Return the maximum number of substrings in an optimal selection. A substring is a contiguous sequence of characters within a string.   Example 1: Input: s = \"abaccdbbd\", k = 3 Output: 2 Explanation: We can select the substrings underlined in s = \"abaccdbbd\". Both \"aba\" and \"dbbd\" are palindromes and have a length of at least k = 3. It can be shown that we cannot find a selection with more than two valid substrings. Example 2: Input: s = \"adbcda\", k = 2 Output: 0 Explanation: There is no palindrome substring of length at least 2 in the string.   Constraints: 1 <= k <= s.length <= 2000 s consists of lowercase English letters.",
        "1847": "You are given a 0-indexed array of positive integers nums. Find the number of triplets (i, j, k) that meet the following conditions: 0 <= i < j < k < nums.length nums[i], nums[j], and nums[k] are pairwise distinct. In other words, nums[i] != nums[j], nums[i] != nums[k], and nums[j] != nums[k]. Return the number of triplets that meet the conditions.   Example 1: Input: nums = [4,4,2,4,3] Output: 3 Explanation: The following triplets meet the conditions: - (0, 2, 4) because 4 != 2 != 3 - (1, 2, 4) because 4 != 2 != 3 - (2, 3, 4) because 2 != 4 != 3 Since there are 3 triplets, we return 3. Note that (2, 0, 4) is not a valid triplet because 2 > 0. Example 2: Input: nums = [1,1,1,1,1] Output: 0 Explanation: No triplets meet the conditions so we return 0.   Constraints: 3 <= nums.length <= 100 1 <= nums[i] <= 1000",
        "1848": "You are given the root of a binary search tree and an array queries of size n consisting of positive integers. Find a 2D array answer of size n where answer[i] = [mini, maxi]: mini is the largest value in the tree that is smaller than or equal to queries[i]. If a such value does not exist, add -1 instead. maxi is the smallest value in the tree that is greater than or equal to queries[i]. If a such value does not exist, add -1 instead. Return the array answer.   Example 1: Input: root = [6,2,13,1,4,9,15,null,null,null,null,null,null,14], queries = [2,5,16] Output: [[2,2],[4,6],[15,-1]] Explanation: We answer the queries in the following way: - The largest number that is smaller or equal than 2 in the tree is 2, and the smallest number that is greater or equal than 2 is still 2. So the answer for the first query is [2,2]. - The largest number that is smaller or equal than 5 in the tree is 4, and the smallest number that is greater or equal than 5 is 6. So the answer for the second query is [4,6]. - The largest number that is smaller or equal than 16 in the tree is 15, and the smallest number that is greater or equal than 16 does not exist. So the answer for the third query is [15,-1]. Example 2: Input: root = [4,null,9], queries = [3] Output: [[-1,4]] Explanation: The largest number that is smaller or equal to 3 in the tree does not exist, and the smallest number that is greater or equal to 3 is 4. So the answer for the query is [-1,4].   Constraints: The number of nodes in the tree is in the range [2, 105]. 1 <= Node.val <= 106 n == queries.length 1 <= n <= 105 1 <= queries[i] <= 106",
        "1849": "There is a tree (i.e., a connected, undirected graph with no cycles) structure country network consisting of n cities numbered from 0 to n - 1 and exactly n - 1 roads. The capital city is city 0. You are given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi. There is a meeting for the representatives of each city. The meeting is in the capital city. There is a car in each city. You are given an integer seats that indicates the number of seats in each car. A representative can use the car in their city to travel or change the car and ride with another representative. The cost of traveling between two cities is one liter of fuel. Return the minimum number of liters of fuel to reach the capital city.   Example 1: Input: roads = [[0,1],[0,2],[0,3]], seats = 5 Output: 3 Explanation:  - Representative1 goes directly to the capital with 1 liter of fuel. - Representative2 goes directly to the capital with 1 liter of fuel. - Representative3 goes directly to the capital with 1 liter of fuel. It costs 3 liters of fuel at minimum.  It can be proven that 3 is the minimum number of liters of fuel needed. Example 2: Input: roads = [[3,1],[3,2],[1,0],[0,4],[0,5],[4,6]], seats = 2 Output: 7 Explanation:  - Representative2 goes directly to city 3 with 1 liter of fuel. - Representative2 and representative3 go together to city 1 with 1 liter of fuel. - Representative2 and representative3 go together to the capital with 1 liter of fuel. - Representative1 goes directly to the capital with 1 liter of fuel. - Representative5 goes directly to the capital with 1 liter of fuel. - Representative6 goes directly to city 4 with 1 liter of fuel. - Representative4 and representative6 go together to the capital with 1 liter of fuel. It costs 7 liters of fuel at minimum.  It can be proven that 7 is the minimum number of liters of fuel needed. Example 3: Input: roads = [], seats = 1 Output: 0 Explanation: No representatives need to travel to the capital city.   Constraints: 1 <= n <= 105 roads.length == n - 1 roads[i].length == 2 0 <= ai, bi < n ai != bi roads represents a valid tree. 1 <= seats <= 105",
        "1850": "You are given a string s that consists of the digits '1' to '9' and two integers k and minLength. A partition of s is called beautiful if: s is partitioned into k non-intersecting substrings. Each substring has a length of at least minLength. Each substring starts with a prime digit and ends with a non-prime digit. Prime digits are '2', '3', '5', and '7', and the rest of the digits are non-prime. Return the number of beautiful partitions of s. Since the answer may be very large, return it modulo 109 + 7. A substring is a contiguous sequence of characters within a string.   Example 1: Input: s = \"23542185131\", k = 3, minLength = 2 Output: 3 Explanation: There exists three ways to create a beautiful partition: \"2354 | 218 | 5131\" \"2354 | 21851 | 31\" \"2354218 | 51 | 31\" Example 2: Input: s = \"23542185131\", k = 3, minLength = 3 Output: 1 Explanation: There exists one way to create a beautiful partition: \"2354 | 218 | 5131\". Example 3: Input: s = \"3312958\", k = 3, minLength = 1 Output: 1 Explanation: There exists one way to create a beautiful partition: \"331 | 29 | 58\".   Constraints: 1 <= k, minLength <= s.length <= 1000 s consists of the digits '1' to '9'.",
        "1851": "A valid cut in a circle can be: A cut that is represented by a straight line that touches two points on the edge of the circle and passes through its center, or A cut that is represented by a straight line that touches one point on the edge of the circle and its center. Some valid and invalid cuts are shown in the figures below. Given the integer n, return the minimum number of cuts needed to divide a circle into n equal slices.   Example 1: Input: n = 4 Output: 2 Explanation:  The above figure shows how cutting the circle twice through the middle divides it into 4 equal slices. Example 2: Input: n = 3 Output: 3 Explanation: At least 3 cuts are needed to divide the circle into 3 equal slices.  It can be shown that less than 3 cuts cannot result in 3 slices of equal size and shape. Also note that the first cut will not divide the circle into distinct parts.   Constraints: 1 <= n <= 100",
        "1852": "You are given a 0-indexed m x n binary matrix grid. A 0-indexed m x n difference matrix diff is created with the following procedure: Let the number of ones in the ith row be onesRowi. Let the number of ones in the jth column be onesColj. Let the number of zeros in the ith row be zerosRowi. Let the number of zeros in the jth column be zerosColj. diff[i][j] = onesRowi + onesColj - zerosRowi - zerosColj Return the difference matrix diff.   Example 1: Input: grid = [[0,1,1],[1,0,1],[0,0,1]] Output: [[0,0,4],[0,0,4],[-2,-2,2]] Explanation: - diff[0][0] = onesRow0 + onesCol0 - zerosRow0 - zerosCol0 = 2 + 1 - 1 - 2 = 0  - diff[0][1] = onesRow0 + onesCol1 - zerosRow0 - zerosCol1 = 2 + 1 - 1 - 2 = 0  - diff[0][2] = onesRow0 + onesCol2 - zerosRow0 - zerosCol2 = 2 + 3 - 1 - 0 = 4  - diff[1][0] = onesRow1 + onesCol0 - zerosRow1 - zerosCol0 = 2 + 1 - 1 - 2 = 0  - diff[1][1] = onesRow1 + onesCol1 - zerosRow1 - zerosCol1 = 2 + 1 - 1 - 2 = 0  - diff[1][2] = onesRow1 + onesCol2 - zerosRow1 - zerosCol2 = 2 + 3 - 1 - 0 = 4  - diff[2][0] = onesRow2 + onesCol0 - zerosRow2 - zerosCol0 = 1 + 1 - 2 - 2 = -2 - diff[2][1] = onesRow2 + onesCol1 - zerosRow2 - zerosCol1 = 1 + 1 - 2 - 2 = -2 - diff[2][2] = onesRow2 + onesCol2 - zerosRow2 - zerosCol2 = 1 + 3 - 2 - 0 = 2 Example 2: Input: grid = [[1,1,1],[1,1,1]] Output: [[5,5,5],[5,5,5]] Explanation: - diff[0][0] = onesRow0 + onesCol0 - zerosRow0 - zerosCol0 = 3 + 2 - 0 - 0 = 5 - diff[0][1] = onesRow0 + onesCol1 - zerosRow0 - zerosCol1 = 3 + 2 - 0 - 0 = 5 - diff[0][2] = onesRow0 + onesCol2 - zerosRow0 - zerosCol2 = 3 + 2 - 0 - 0 = 5 - diff[1][0] = onesRow1 + onesCol0 - zerosRow1 - zerosCol0 = 3 + 2 - 0 - 0 = 5 - diff[1][1] = onesRow1 + onesCol1 - zerosRow1 - zerosCol1 = 3 + 2 - 0 - 0 = 5 - diff[1][2] = onesRow1 + onesCol2 - zerosRow1 - zerosCol2 = 3 + 2 - 0 - 0 = 5   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 105 1 <= m * n <= 105 grid[i][j] is either 0 or 1.",
        "1853": "Given a string of digits s, return the number of palindromic subsequences of s having length 5. Since the answer may be very large, return it modulo 109 + 7. Note: A string is palindromic if it reads the same forward and backward. A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.   Example 1: Input: s = \"103301\" Output: 2 Explanation:  There are 6 possible subsequences of length 5: \"10330\",\"10331\",\"10301\",\"10301\",\"13301\",\"03301\".  Two of them (both equal to \"10301\") are palindromic. Example 2: Input: s = \"0000000\" Output: 21 Explanation: All 21 subsequences are \"00000\", which is palindromic. Example 3: Input: s = \"9999900000\" Output: 2 Explanation: The only two palindromic subsequences are \"99999\" and \"00000\".   Constraints: 1 <= s.length <= 104 s consists of digits.",
        "1854": "Given a positive integer n, find the pivot integer x such that: The sum of all elements between 1 and x inclusively equals the sum of all elements between x and n inclusively. Return the pivot integer x. If no such integer exists, return -1. It is guaranteed that there will be at most one pivot index for the given input.   Example 1: Input: n = 8 Output: 6 Explanation: 6 is the pivot integer since: 1 + 2 + 3 + 4 + 5 + 6 = 6 + 7 + 8 = 21. Example 2: Input: n = 1 Output: 1 Explanation: 1 is the pivot integer since: 1 = 1. Example 3: Input: n = 4 Output: -1 Explanation: It can be proved that no such integer exist.   Constraints: 1 <= n <= 1000",
        "1855": "You are given two strings s and t consisting of only lowercase English letters. Return the minimum number of characters that need to be appended to the end of s so that t becomes a subsequence of s. A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.   Example 1: Input: s = \"coaching\", t = \"coding\" Output: 4 Explanation: Append the characters \"ding\" to the end of s so that s = \"coachingding\". Now, t is a subsequence of s (\"coachingding\"). It can be shown that appending any 3 characters to the end of s will never make t a subsequence. Example 2: Input: s = \"abcde\", t = \"a\" Output: 0 Explanation: t is already a subsequence of s (\"abcde\"). Example 3: Input: s = \"z\", t = \"abcde\" Output: 5 Explanation: Append the characters \"abcde\" to the end of s so that s = \"zabcde\". Now, t is a subsequence of s (\"zabcde\"). It can be shown that appending any 4 characters to the end of s will never make t a subsequence.   Constraints: 1 <= s.length, t.length <= 105 s and t consist only of lowercase English letters.",
        "1856": "You are given the head of a linked list. Remove every node which has a node with a greater value anywhere to the right side of it. Return the head of the modified linked list.   Example 1: Input: head = [5,2,13,3,8] Output: [13,8] Explanation: The nodes that should be removed are 5, 2 and 3. - Node 13 is to the right of node 5. - Node 13 is to the right of node 2. - Node 8 is to the right of node 3. Example 2: Input: head = [1,1,1,1] Output: [1,1,1,1] Explanation: Every node has value 1, so no nodes are removed.   Constraints: The number of the nodes in the given list is in the range [1, 105]. 1 <= Node.val <= 105",
        "1857": "You are given an array nums of size n consisting of distinct integers from 1 to n and a positive integer k. Return the number of non-empty subarrays in nums that have a median equal to k. Note: The median of an array is the middle element after sorting the array in ascending order. If the array is of even length, the median is the left middle element. For example, the median of [2,3,1,4] is 2, and the median of [8,4,3,5,1] is 4. A subarray is a contiguous part of an array.   Example 1: Input: nums = [3,2,1,4,5], k = 4 Output: 3 Explanation: The subarrays that have a median equal to 4 are: [4], [4,5] and [1,4,5]. Example 2: Input: nums = [2,3,1], k = 3 Output: 1 Explanation: [3] is the only subarray that has a median equal to 3.   Constraints: n == nums.length 1 <= n <= 105 1 <= nums[i], k <= n The integers in nums are distinct.",
        "1858": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, \"Hello World\", \"HELLO\", \"hello world hello world\" are all sentences. Words consist of only uppercase and lowercase English letters. Uppercase and lowercase English letters are considered different. A sentence is circular if: The last character of a word is equal to the first character of the next word. The last character of the last word is equal to the first character of the first word. For example, \"leetcode exercises sound delightful\", \"eetcode\", \"leetcode eats soul\" are all circular sentences. However, \"Leetcode is cool\", \"happy Leetcode\", \"Leetcode\" and \"I like Leetcode\" are not circular sentences. Given a string sentence, return true if it is circular. Otherwise, return false.   Example 1: Input: sentence = \"leetcode exercises sound delightful\" Output: true Explanation: The words in sentence are [\"leetcode\", \"exercises\", \"sound\", \"delightful\"]. - leetcode's last character is equal to exercises's first character. - exercises's last character is equal to sound's first character. - sound's last character is equal to delightful's first character. - delightful's last character is equal to leetcode's first character. The sentence is circular. Example 2: Input: sentence = \"eetcode\" Output: true Explanation: The words in sentence are [\"eetcode\"]. - eetcode's last character is equal to eetcode's first character. The sentence is circular. Example 3: Input: sentence = \"Leetcode is cool\" Output: false Explanation: The words in sentence are [\"Leetcode\", \"is\", \"cool\"]. - Leetcode's last character is not equal to is's first character. The sentence is not circular.   Constraints: 1 <= sentence.length <= 500 sentence consist of only lowercase and uppercase English letters and spaces. The words in sentence are separated by a single space. There are no leading or trailing spaces.",
        "1859": "You are given a positive integer array skill of even length n where skill[i] denotes the skill of the ith player. Divide the players into n / 2 teams of size 2 such that the total skill of each team is equal. The chemistry of a team is equal to the product of the skills of the players on that team. Return the sum of the chemistry of all the teams, or return -1 if there is no way to divide the players into teams such that the total skill of each team is equal.   Example 1: Input: skill = [3,2,5,1,3,4] Output: 22 Explanation:  Divide the players into the following teams: (1, 5), (2, 4), (3, 3), where each team has a total skill of 6. The sum of the chemistry of all the teams is: 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22. Example 2: Input: skill = [3,4] Output: 12 Explanation:  The two players form a team with a total skill of 7. The chemistry of the team is 3 * 4 = 12. Example 3: Input: skill = [1,1,2,3] Output: -1 Explanation:  There is no way to divide the players into teams such that the total skill of each team is equal.   Constraints: 2 <= skill.length <= 105 skill.length is even. 1 <= skill[i] <= 1000",
        "1860": "You are given a positive integer n representing the number of nodes in an undirected graph. The nodes are labeled from 1 to n. You are also given a 2D integer array edges, where edges[i] = [ai, bi] indicates that there is a bidirectional edge between nodes ai and bi. Notice that the given graph may be disconnected. Divide the nodes of the graph into m groups (1-indexed) such that: Each node in the graph belongs to exactly one group. For every pair of nodes in the graph that are connected by an edge [ai, bi], if ai belongs to the group with index x, and bi belongs to the group with index y, then |y - x| = 1. Return the maximum number of groups (i.e., maximum m) into which you can divide the nodes. Return -1 if it is impossible to group the nodes with the given conditions.   Example 1: Input: n = 6, edges = [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]] Output: 4 Explanation: As shown in the image we: - Add node 5 to the first group. - Add node 1 to the second group. - Add nodes 2 and 4 to the third group. - Add nodes 3 and 6 to the fourth group. We can see that every edge is satisfied. It can be shown that that if we create a fifth group and move any node from the third or fourth group to it, at least on of the edges will not be satisfied. Example 2: Input: n = 3, edges = [[1,2],[2,3],[3,1]] Output: -1 Explanation: If we add node 1 to the first group, node 2 to the second group, and node 3 to the third group to satisfy the first two edges, we can see that the third edge will not be satisfied. It can be shown that no grouping is possible.   Constraints: 1 <= n <= 500 1 <= edges.length <= 104 edges[i].length == 2 1 <= ai, bi <= n ai != bi There is at most one edge between any pair of vertices.",
        "1861": "The value of an alphanumeric string can be defined as: The numeric representation of the string in base 10, if it comprises of digits only. The length of the string, otherwise. Given an array strs of alphanumeric strings, return the maximum value of any string in strs.   Example 1: Input: strs = [\"alic3\",\"bob\",\"3\",\"4\",\"00000\"] Output: 5 Explanation:  - \"alic3\" consists of both letters and digits, so its value is its length, i.e. 5. - \"bob\" consists only of letters, so its value is also its length, i.e. 3. - \"3\" consists only of digits, so its value is its numeric equivalent, i.e. 3. - \"4\" also consists only of digits, so its value is 4. - \"00000\" consists only of digits, so its value is 0. Hence, the maximum value is 5, of \"alic3\". Example 2: Input: strs = [\"1\",\"01\",\"001\",\"0001\"] Output: 1 Explanation:  Each string in the array has value 1. Hence, we return 1.   Constraints: 1 <= strs.length <= 100 1 <= strs[i].length <= 9 strs[i] consists of only lowercase English letters and digits.",
        "1862": "There is an undirected graph consisting of n nodes numbered from 0 to n - 1. You are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node. You are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi. A star graph is a subgraph of the given graph having a center node containing 0 or more neighbors. In other words, it is a subset of edges of the given graph such that there exists a common node for all edges. The image below shows star graphs with 3 and 4 neighbors respectively, centered at the blue node. The star sum is the sum of the values of all the nodes present in the star graph. Given an integer k, return the maximum star sum of a star graph containing at most k edges.   Example 1: Input: vals = [1,2,3,4,10,-10,-20], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6]], k = 2 Output: 16 Explanation: The above diagram represents the input graph. The star graph with the maximum star sum is denoted by blue. It is centered at 3 and includes its neighbors 1 and 4. It can be shown it is not possible to get a star graph with a sum greater than 16. Example 2: Input: vals = [-5], edges = [], k = 0 Output: -5 Explanation: There is only one possible star graph, which is node 0 itself. Hence, we return -5.   Constraints: n == vals.length 1 <= n <= 105 -104 <= vals[i] <= 104 0 <= edges.length <= min(n * (n - 1) / 2, 105) edges[i].length == 2 0 <= ai, bi <= n - 1 ai != bi 0 <= k <= n - 1",
        "1863": "You are given a 0-indexed integer array stones sorted in strictly increasing order representing the positions of stones in a river. A frog, initially on the first stone, wants to travel to the last stone and then return to the first stone. However, it can jump to any stone at most once. The length of a jump is the absolute difference between the position of the stone the frog is currently on and the position of the stone to which the frog jumps. More formally, if the frog is at stones[i] and is jumping to stones[j], the length of the jump is |stones[i] - stones[j]|. The cost of a path is the maximum length of a jump among all jumps in the path. Return the minimum cost of a path for the frog.   Example 1: Input: stones = [0,2,5,6,7] Output: 5 Explanation: The above figure represents one of the optimal paths the frog can take. The cost of this path is 5, which is the maximum length of a jump. Since it is not possible to achieve a cost of less than 5, we return it. Example 2: Input: stones = [0,3,9] Output: 9 Explanation:  The frog can jump directly to the last stone and come back to the first stone.  In this case, the length of each jump will be 9. The cost for the path will be max(9, 9) = 9. It can be shown that this is the minimum achievable cost.   Constraints: 2 <= stones.length <= 105 0 <= stones[i] <= 109 stones[0] == 0 stones is sorted in a strictly increasing order.",
        "1864": "You are given two 0-indexed integer arrays nums1 and nums2, of equal length n. In one operation, you can swap the values of any two indices of nums1. The cost of this operation is the sum of the indices. Find the minimum total cost of performing the given operation any number of times such that nums1[i] != nums2[i] for all 0 <= i <= n - 1 after performing all the operations. Return the minimum total cost such that nums1 and nums2 satisfy the above condition. In case it is not possible, return -1.   Example 1: Input: nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5] Output: 10 Explanation:  One of the ways we can perform the operations is: - Swap values at indices 0 and 3, incurring cost = 0 + 3 = 3. Now, nums1 = [4,2,3,1,5] - Swap values at indices 1 and 2, incurring cost = 1 + 2 = 3. Now, nums1 = [4,3,2,1,5]. - Swap values at indices 0 and 4, incurring cost = 0 + 4 = 4. Now, nums1 =[5,3,2,1,4]. We can see that for each index i, nums1[i] != nums2[i]. The cost required here is 10. Note that there are other ways to swap values, but it can be proven that it is not possible to obtain a cost less than 10. Example 2: Input: nums1 = [2,2,2,1,3], nums2 = [1,2,2,3,3] Output: 10 Explanation:  One of the ways we can perform the operations is: - Swap values at indices 2 and 3, incurring cost = 2 + 3 = 5. Now, nums1 = [2,2,1,2,3]. - Swap values at indices 1 and 4, incurring cost = 1 + 4 = 5. Now, nums1 = [2,3,1,2,2]. The total cost needed here is 10, which is the minimum possible. Example 3: Input: nums1 = [1,2,2], nums2 = [1,2,2] Output: -1 Explanation:  It can be shown that it is not possible to satisfy the given conditions irrespective of the number of operations we perform. Hence, we return -1.   Constraints: n == nums1.length == nums2.length 1 <= n <= 105 1 <= nums1[i], nums2[i] <= n",
        "1865": "You are given an m x n matrix grid consisting of positive integers. Perform the following operation until grid becomes empty: Delete the element with the greatest value from each row. If multiple such elements exist, delete any of them. Add the maximum of deleted elements to the answer. Note that the number of columns decreases by one after each operation. Return the answer after performing the operations described above.   Example 1: Input: grid = [[1,2,4],[3,3,1]] Output: 8 Explanation: The diagram above shows the removed values in each step. - In the first operation, we remove 4 from the first row and 3 from the second row (notice that, there are two cells with value 3 and we can remove any of them). We add 4 to the answer. - In the second operation, we remove 2 from the first row and 3 from the second row. We add 3 to the answer. - In the third operation, we remove 1 from the first row and 1 from the second row. We add 1 to the answer. The final answer = 4 + 3 + 1 = 8. Example 2: Input: grid = [[10]] Output: 10 Explanation: The diagram above shows the removed values in each step. - In the first operation, we remove 10 from the first row. We add 10 to the answer. The final answer = 10.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 50 1 <= grid[i][j] <= 100",
        "1866": "You are given an integer array nums. A subsequence of nums is called a square streak if: The length of the subsequence is at least 2, and after sorting the subsequence, each element (except the first element) is the square of the previous number. Return the length of the longest square streak in nums, or return -1 if there is no square streak. A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.   Example 1: Input: nums = [4,3,6,16,8,2] Output: 3 Explanation: Choose the subsequence [4,16,2]. After sorting it, it becomes [2,4,16]. - 4 = 2 * 2. - 16 = 4 * 4. Therefore, [4,16,2] is a square streak. It can be shown that every subsequence of length 4 is not a square streak. Example 2: Input: nums = [2,3,5,6,7] Output: -1 Explanation: There is no square streak in nums so return -1.   Constraints: 2 <= nums.length <= 105 2 <= nums[i] <= 105",
        "1867": "You are given an integer n representing the size of a 0-indexed memory array. All memory units are initially free. You have a memory allocator with the following functionalities: Allocate a block of size consecutive free memory units and assign it the id mID. Free all memory units with the given id mID. Note that: Multiple blocks can be allocated to the same mID. You should free all the memory units with mID, even if they were allocated in different blocks. Implement the Allocator class: Allocator(int n) Initializes an Allocator object with a memory array of size n. int allocate(int size, int mID) Find the leftmost block of size consecutive free memory units and allocate it with the id mID. Return the block's first index. If such a block does not exist, return -1. int free(int mID) Free all memory units with the id mID. Return the number of memory units you have freed.   Example 1: Input [\"Allocator\", \"allocate\", \"allocate\", \"allocate\", \"free\", \"allocate\", \"allocate\", \"allocate\", \"free\", \"allocate\", \"free\"] [[10], [1, 1], [1, 2], [1, 3], [2], [3, 4], [1, 1], [1, 1], [1], [10, 2], [7]] Output [null, 0, 1, 2, 1, 3, 1, 6, 3, -1, 0]  Explanation Allocator loc = new Allocator(10); // Initialize a memory array of size 10. All memory units are initially free. loc.allocate(1, 1); // The leftmost block's first index is 0. The memory array becomes [1,_,_,_,_,_,_,_,_,_]. We return 0. loc.allocate(1, 2); // The leftmost block's first index is 1. The memory array becomes [1,2,_,_,_,_,_,_,_,_]. We return 1. loc.allocate(1, 3); // The leftmost block's first index is 2. The memory array becomes [1,2,3,_,_,_,_,_,_,_]. We return 2. loc.free(2); // Free all memory units with mID 2. The memory array becomes [1,_, 3,_,_,_,_,_,_,_]. We return 1 since there is only 1 unit with mID 2. loc.allocate(3, 4); // The leftmost block's first index is 3. The memory array becomes [1,_,3,4,4,4,_,_,_,_]. We return 3. loc.allocate(1, 1); // The leftmost block's first index is 1. The memory array becomes [1,1,3,4,4,4,_,_,_,_]. We return 1. loc.allocate(1, 1); // The leftmost block's first index is 6. The memory array becomes [1,1,3,4,4,4,1,_,_,_]. We return 6. loc.free(1); // Free all memory units with mID 1. The memory array becomes [_,_,3,4,4,4,_,_,_,_]. We return 3 since there are 3 units with mID 1. loc.allocate(10, 2); // We can not find any free block with 10 consecutive free memory units, so we return -1. loc.free(7); // Free all memory units with mID 7. The memory array remains the same since there is no memory unit with mID 7. We return 0.   Constraints: 1 <= n, size, mID <= 1000 At most 1000 calls will be made to allocate and free.",
        "1868": "You are given an m x n integer matrix grid and an array queries of size k. Find an array answer of size k such that for each integer queries[i] you start in the top left cell of the matrix and repeat the following process: If queries[i] is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all 4 directions: up, down, left, and right. Otherwise, you do not get any points, and you end this process. After the process, answer[i] is the maximum number of points you can get. Note that for each query you are allowed to visit the same cell multiple times. Return the resulting array answer.   Example 1: Input: grid = [[1,2,3],[2,5,7],[3,5,1]], queries = [5,6,2] Output: [5,8,1] Explanation: The diagrams above show which cells we visit to get points for each query. Example 2: Input: grid = [[5,2,1],[1,1,2]], queries = [3] Output: [0] Explanation: We can not get any points because the value of the top left cell is already greater than or equal to 3.   Constraints: m == grid.length n == grid[i].length 2 <= m, n <= 1000 4 <= m * n <= 105 k == queries.length 1 <= k <= 104 1 <= grid[i][j], queries[i] <= 106",
        "1869": "You are given a 0-indexed string array words. Two strings are similar if they consist of the same characters. For example, \"abca\" and \"cba\" are similar since both consist of characters 'a', 'b', and 'c'. However, \"abacba\" and \"bcfd\" are not similar since they do not consist of the same characters. Return the number of pairs (i, j) such that 0 <= i < j <= word.length - 1 and the two strings words[i] and words[j] are similar.   Example 1: Input: words = [\"aba\",\"aabb\",\"abcd\",\"bac\",\"aabc\"] Output: 2 Explanation: There are 2 pairs that satisfy the conditions: - i = 0 and j = 1 : both words[0] and words[1] only consist of characters 'a' and 'b'.  - i = 3 and j = 4 : both words[3] and words[4] only consist of characters 'a', 'b', and 'c'.  Example 2: Input: words = [\"aabb\",\"ab\",\"ba\"] Output: 3 Explanation: There are 3 pairs that satisfy the conditions: - i = 0 and j = 1 : both words[0] and words[1] only consist of characters 'a' and 'b'.  - i = 0 and j = 2 : both words[0] and words[2] only consist of characters 'a' and 'b'. - i = 1 and j = 2 : both words[1] and words[2] only consist of characters 'a' and 'b'. Example 3: Input: words = [\"nba\",\"cba\",\"dba\"] Output: 0 Explanation: Since there does not exist any pair that satisfies the conditions, we return 0.   Constraints: 1 <= words.length <= 100 1 <= words[i].length <= 100 words[i] consist of only lowercase English letters.",
        "1870": "You are given a positive integer n. Continuously replace n with the sum of its prime factors. Note that if a prime factor divides n multiple times, it should be included in the sum as many times as it divides n. Return the smallest value n will take on.   Example 1: Input: n = 15 Output: 5 Explanation: Initially, n = 15. 15 = 3 * 5, so replace n with 3 + 5 = 8. 8 = 2 * 2 * 2, so replace n with 2 + 2 + 2 = 6. 6 = 2 * 3, so replace n with 2 + 3 = 5. 5 is the smallest value n will take on. Example 2: Input: n = 3 Output: 3 Explanation: Initially, n = 3. 3 is the smallest value n will take on.   Constraints: 2 <= n <= 105",
        "1871": "There is an undirected graph consisting of n nodes numbered from 1 to n. You are given the integer n and a 2D array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi. The graph can be disconnected. You can add at most two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops. Return true if it is possible to make the degree of each node in the graph even, otherwise return false. The degree of a node is the number of edges connected to it.   Example 1: Input: n = 5, edges = [[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]] Output: true Explanation: The above diagram shows a valid way of adding an edge. Every node in the resulting graph is connected to an even number of edges. Example 2: Input: n = 4, edges = [[1,2],[3,4]] Output: true Explanation: The above diagram shows a valid way of adding two edges. Example 3: Input: n = 4, edges = [[1,2],[1,3],[1,4]] Output: false Explanation: It is not possible to obtain a valid graph with adding at most 2 edges.   Constraints: 3 <= n <= 105 2 <= edges.length <= 105 edges[i].length == 2 1 <= ai, bi <= n ai != bi There are no repeated edges.",
        "1872": "You are given an integer n. There is a complete binary tree with 2n - 1 nodes. The root of that tree is the node with the value 1, and every node with a value val in the range [1, 2n - 1 - 1] has two children where: The left node has the value 2 * val, and The right node has the value 2 * val + 1. You are also given a 2D integer array queries of length m, where queries[i] = [ai, bi]. For each query, solve the following problem: Add an edge between the nodes with values ai and bi. Find the length of the cycle in the graph. Remove the added edge between nodes with values ai and bi. Note that: A cycle is a path that starts and ends at the same node, and each edge in the path is visited only once. The length of a cycle is the number of edges visited in the cycle. There could be multiple edges between two nodes in the tree after adding the edge of the query. Return an array answer of length m where answer[i] is the answer to the ith query.   Example 1: Input: n = 3, queries = [[5,3],[4,7],[2,3]] Output: [4,5,3] Explanation: The diagrams above show the tree of 23 - 1 nodes. Nodes colored in red describe the nodes in the cycle after adding the edge. - After adding the edge between nodes 3 and 5, the graph contains a cycle of nodes [5,2,1,3]. Thus answer to the first query is 4. We delete the added edge and process the next query. - After adding the edge between nodes 4 and 7, the graph contains a cycle of nodes [4,2,1,3,7]. Thus answer to the second query is 5. We delete the added edge and process the next query. - After adding the edge between nodes 2 and 3, the graph contains a cycle of nodes [2,1,3]. Thus answer to the third query is 3. We delete the added edge. Example 2: Input: n = 2, queries = [[1,2]] Output: [2] Explanation: The diagram above shows the tree of 22 - 1 nodes. Nodes colored in red describe the nodes in the cycle after adding the edge. - After adding the edge between nodes 1 and 2, the graph contains a cycle of nodes [2,1]. Thus answer for the first query is 2. We delete the added edge.   Constraints: 2 <= n <= 30 m == queries.length 1 <= m <= 105 queries[i].length == 2 1 <= ai, bi <= 2n - 1 ai != bi",
        "1873": "You are given a 0-indexed integer array forts of length n representing the positions of several forts. forts[i] can be -1, 0, or 1 where: -1 represents there is no fort at the ith position. 0 indicates there is an enemy fort at the ith position. 1 indicates the fort at the ith the position is under your command. Now you have decided to move your army from one of your forts at position i to an empty position j such that: 0 <= i, j <= n - 1 The army travels over enemy forts only. Formally, for all k where min(i,j) < k < max(i,j), forts[k] == 0. While moving the army, all the enemy forts that come in the way are captured. Return the maximum number of enemy forts that can be captured. In case it is impossible to move your army, or you do not have any fort under your command, return 0.   Example 1: Input: forts = [1,0,0,-1,0,0,0,0,1] Output: 4 Explanation: - Moving the army from position 0 to position 3 captures 2 enemy forts, at 1 and 2. - Moving the army from position 8 to position 3 captures 4 enemy forts. Since 4 is the maximum number of enemy forts that can be captured, we return 4. Example 2: Input: forts = [0,0,1,-1] Output: 0 Explanation: Since no enemy fort can be captured, 0 is returned.   Constraints: 1 <= forts.length <= 1000 -1 <= forts[i] <= 1",
        "1874": "You are given two string arrays positive_feedback and negative_feedback, containing the words denoting positive and negative feedback, respectively. Note that no word is both positive and negative. Initially every student has 0 points. Each positive word in a feedback report increases the points of a student by 3, whereas each negative word decreases the points by 1. You are given n feedback reports, represented by a 0-indexed string array report and a 0-indexed integer array student_id, where student_id[i] represents the ID of the student who has received the feedback report report[i]. The ID of each student is unique. Given an integer k, return the top k students after ranking them in non-increasing order by their points. In case more than one student has the same points, the one with the lower ID ranks higher.   Example 1: Input: positive_feedback = [\"smart\",\"brilliant\",\"studious\"], negative_feedback = [\"not\"], report = [\"this student is studious\",\"the student is smart\"], student_id = [1,2], k = 2 Output: [1,2] Explanation:  Both the students have 1 positive feedback and 3 points but since student 1 has a lower ID he ranks higher. Example 2: Input: positive_feedback = [\"smart\",\"brilliant\",\"studious\"], negative_feedback = [\"not\"], report = [\"this student is not studious\",\"the student is smart\"], student_id = [1,2], k = 2 Output: [2,1] Explanation:  - The student with ID 1 has 1 positive feedback and 1 negative feedback, so he has 3-1=2 points.  - The student with ID 2 has 1 positive feedback, so he has 3 points.  Since student 2 has more points, [2,1] is returned.   Constraints: 1 <= positive_feedback.length, negative_feedback.length <= 104 1 <= positive_feedback[i].length, negative_feedback[j].length <= 100 Both positive_feedback[i] and negative_feedback[j] consists of lowercase English letters. No word is present in both positive_feedback and negative_feedback. n == report.length == student_id.length 1 <= n <= 104 report[i] consists of lowercase English letters and spaces ' '. There is a single space between consecutive words of report[i]. 1 <= report[i].length <= 100 1 <= student_id[i] <= 109 All the values of student_id[i] are unique. 1 <= k <= n",
        "1875": "We have two arrays arr1 and arr2 which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions: arr1 contains uniqueCnt1 distinct positive integers, each of which is not divisible by divisor1. arr2 contains uniqueCnt2 distinct positive integers, each of which is not divisible by divisor2. No integer is present in both arr1 and arr2. Given divisor1, divisor2, uniqueCnt1, and uniqueCnt2, return the minimum possible maximum integer that can be present in either array.   Example 1: Input: divisor1 = 2, divisor2 = 7, uniqueCnt1 = 1, uniqueCnt2 = 3 Output: 4 Explanation:  We can distribute the first 4 natural numbers into arr1 and arr2. arr1 = [1] and arr2 = [2,3,4]. We can see that both arrays satisfy all the conditions. Since the maximum value is 4, we return it. Example 2: Input: divisor1 = 3, divisor2 = 5, uniqueCnt1 = 2, uniqueCnt2 = 1 Output: 3 Explanation:  Here arr1 = [1,2], and arr2 = [3] satisfy all conditions. Since the maximum value is 3, we return it. Example 3: Input: divisor1 = 2, divisor2 = 4, uniqueCnt1 = 8, uniqueCnt2 = 2 Output: 15 Explanation:  Here, the final possible arrays can be arr1 = [1,3,5,7,9,11,13,15], and arr2 = [2,6]. It can be shown that it is not possible to obtain a lower maximum satisfying all conditions.    Constraints: 2 <= divisor1, divisor2 <= 105 1 <= uniqueCnt1, uniqueCnt2 < 109 2 <= uniqueCnt1 + uniqueCnt2 <= 109",
        "1876": "You are given a string s containing one or more words. Every consecutive pair of words is separated by a single space ' '. A string t is an anagram of string s if the ith word of t is a permutation of the ith word of s. For example, \"acb dfe\" is an anagram of \"abc def\", but \"def cab\" and \"adc bef\" are not. Return the number of distinct anagrams of s. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: s = \"too hot\" Output: 18 Explanation: Some of the anagrams of the given string are \"too hot\", \"oot hot\", \"oto toh\", \"too toh\", and \"too oht\". Example 2: Input: s = \"aa\" Output: 1 Explanation: There is only one anagram possible for the given string.   Constraints: 1 <= s.length <= 105 s consists of lowercase English letters and spaces ' '. There is single space between consecutive words.",
        "1877": "You are given a 0-indexed circular string array words and a string target. A circular array means that the array's end connects to the array's beginning. Formally, the next element of words[i] is words[(i + 1) % n] and the previous element of words[i] is words[(i - 1 + n) % n], where n is the length of words. Starting from startIndex, you can move to either the next word or the previous word with 1 step at a time. Return the shortest distance needed to reach the string target. If the string target does not exist in words, return -1.   Example 1: Input: words = [\"hello\",\"i\",\"am\",\"leetcode\",\"hello\"], target = \"hello\", startIndex = 1 Output: 1 Explanation: We start from index 1 and can reach \"hello\" by - moving 3 units to the right to reach index 4. - moving 2 units to the left to reach index 4. - moving 4 units to the right to reach index 0. - moving 1 unit to the left to reach index 0. The shortest distance to reach \"hello\" is 1. Example 2: Input: words = [\"a\",\"b\",\"leetcode\"], target = \"leetcode\", startIndex = 0 Output: 1 Explanation: We start from index 0 and can reach \"leetcode\" by - moving 2 units to the right to reach index 3. - moving 1 unit to the left to reach index 3. The shortest distance to reach \"leetcode\" is 1. Example 3: Input: words = [\"i\",\"eat\",\"leetcode\"], target = \"ate\", startIndex = 0 Output: -1 Explanation: Since \"ate\" does not exist in words, we return -1.   Constraints: 1 <= words.length <= 100 1 <= words[i].length <= 100 words[i] and target consist of only lowercase English letters. 0 <= startIndex < words.length",
        "1878": "You are given a string s consisting of the characters 'a', 'b', and 'c' and a non-negative integer k. Each minute, you may take either the leftmost character of s, or the rightmost character of s. Return the minimum number of minutes needed for you to take at least k of each character, or return -1 if it is not possible to take k of each character.   Example 1: Input: s = \"aabaaaacaabc\", k = 2 Output: 8 Explanation:  Take three characters from the left of s. You now have two 'a' characters, and one 'b' character. Take five characters from the right of s. You now have four 'a' characters, two 'b' characters, and two 'c' characters. A total of 3 + 5 = 8 minutes is needed. It can be proven that 8 is the minimum number of minutes needed. Example 2: Input: s = \"a\", k = 1 Output: -1 Explanation: It is not possible to take one 'b' or 'c' so return -1.   Constraints: 1 <= s.length <= 105 s consists of only the letters 'a', 'b', and 'c'. 0 <= k <= s.length",
        "1879": "You are given an array of positive integers price where price[i] denotes the price of the ith candy and a positive integer k. The store sells baskets of k distinct candies. The tastiness of a candy basket is the smallest absolute difference of the prices of any two candies in the basket. Return the maximum tastiness of a candy basket.   Example 1: Input: price = [13,5,1,8,21,2], k = 3 Output: 8 Explanation: Choose the candies with the prices [13,5,21]. The tastiness of the candy basket is: min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8. It can be proven that 8 is the maximum tastiness that can be achieved. Example 2: Input: price = [1,3,1], k = 2 Output: 2 Explanation: Choose the candies with the prices [1,3]. The tastiness of the candy basket is: min(|1 - 3|) = min(2) = 2. It can be proven that 2 is the maximum tastiness that can be achieved. Example 3: Input: price = [7,7,7,7], k = 2 Output: 0 Explanation: Choosing any two distinct candies from the candies we have will result in a tastiness of 0.   Constraints: 2 <= k <= price.length <= 105 1 <= price[i] <= 109",
        "1880": "You are given an array nums consisting of positive integers and an integer k. Partition the array into two ordered groups such that each element is in exactly one group. A partition is called great if the sum of elements of each group is greater than or equal to k. Return the number of distinct great partitions. Since the answer may be too large, return it modulo 109 + 7. Two partitions are considered distinct if some element nums[i] is in different groups in the two partitions.   Example 1: Input: nums = [1,2,3,4], k = 4 Output: 6 Explanation: The great partitions are: ([1,2,3], [4]), ([1,3], [2,4]), ([1,4], [2,3]), ([2,3], [1,4]), ([2,4], [1,3]) and ([4], [1,2,3]). Example 2: Input: nums = [3,3,3], k = 4 Output: 0 Explanation: There are no great partitions for this array. Example 3: Input: nums = [6,6], k = 2 Output: 2 Explanation: We can either put nums[0] in the first partition or in the second partition. The great partitions will be ([6], [6]) and ([6], [6]).   Constraints: 1 <= nums.length, k <= 1000 1 <= nums[i] <= 109",
        "1881": "Given an integer num, return the number of digits in num that divide num. An integer val divides nums if nums % val == 0.   Example 1: Input: num = 7 Output: 1 Explanation: 7 divides itself, hence the answer is 1. Example 2: Input: num = 121 Output: 2 Explanation: 121 is divisible by 1, but not 2. Since 1 occurs twice as a digit, we return 2. Example 3: Input: num = 1248 Output: 4 Explanation: 1248 is divisible by all of its digits, hence the answer is 4.   Constraints: 1 <= num <= 109 num does not contain 0 as one of its digits.",
        "1882": "Given an array of positive integers nums, return the number of distinct prime factors in the product of the elements of nums. Note that: A number greater than 1 is called prime if it is divisible by only 1 and itself. An integer val1 is a factor of another integer val2 if val2 / val1 is an integer.   Example 1: Input: nums = [2,4,3,7,10,6] Output: 4 Explanation: The product of all the elements in nums is: 2 * 4 * 3 * 7 * 10 * 6 = 10080 = 25 * 32 * 5 * 7. There are 4 distinct prime factors so we return 4. Example 2: Input: nums = [2,4,8,16] Output: 1 Explanation: The product of all the elements in nums is: 2 * 4 * 8 * 16 = 1024 = 210. There is 1 distinct prime factor so we return 1.   Constraints: 1 <= nums.length <= 104 2 <= nums[i] <= 1000",
        "1883": "You are given a string s consisting of digits from 1 to 9 and an integer k. A partition of a string s is called good if: Each digit of s is part of exactly one substring. The value of each substring is less than or equal to k. Return the minimum number of substrings in a good partition of s. If no good partition of s exists, return -1. Note that: The value of a string is its result when interpreted as an integer. For example, the value of \"123\" is 123 and the value of \"1\" is 1. A substring is a contiguous sequence of characters within a string.   Example 1: Input: s = \"165462\", k = 60 Output: 4 Explanation: We can partition the string into substrings \"16\", \"54\", \"6\", and \"2\". Each substring has a value less than or equal to k = 60. It can be shown that we cannot partition the string into less than 4 substrings. Example 2: Input: s = \"238182\", k = 5 Output: -1 Explanation: There is no good partition for this string.   Constraints: 1 <= s.length <= 105 s[i] is a digit from '1' to '9'. 1 <= k <= 109  ",
        "1884": "Given two positive integers left and right, find the two integers num1 and num2 such that: left <= num1 < num2 <= right . num1 and num2 are both prime numbers. num2 - num1 is the minimum amongst all other pairs satisfying the above conditions. Return the positive integer array ans = [num1, num2]. If there are multiple pairs satisfying these conditions, return the one with the minimum num1 value or [-1, -1] if such numbers do not exist. A number greater than 1 is called prime if it is only divisible by 1 and itself.   Example 1: Input: left = 10, right = 19 Output: [11,13] Explanation: The prime numbers between 10 and 19 are 11, 13, 17, and 19. The closest gap between any pair is 2, which can be achieved by [11,13] or [17,19]. Since 11 is smaller than 17, we return the first pair. Example 2: Input: left = 4, right = 6 Output: [-1,-1] Explanation: There exists only one prime number in the given range, so the conditions cannot be satisfied.   Constraints: 1 <= left <= right <= 106  ",
        "1885": "Given four integers length, width, height, and mass, representing the dimensions and mass of a box, respectively, return a string representing the category of the box. The box is \"Bulky\" if: Any of the dimensions of the box is greater or equal to 104. Or, the volume of the box is greater or equal to 109. If the mass of the box is greater or equal to 100, it is \"Heavy\". If the box is both \"Bulky\" and \"Heavy\", then its category is \"Both\". If the box is neither \"Bulky\" nor \"Heavy\", then its category is \"Neither\". If the box is \"Bulky\" but not \"Heavy\", then its category is \"Bulky\". If the box is \"Heavy\" but not \"Bulky\", then its category is \"Heavy\". Note that the volume of the box is the product of its length, width and height.   Example 1: Input: length = 1000, width = 35, height = 700, mass = 300 Output: \"Heavy\" Explanation:  None of the dimensions of the box is greater or equal to 104.  Its volume = 24500000 <= 109. So it cannot be categorized as \"Bulky\". However mass >= 100, so the box is \"Heavy\". Since the box is not \"Bulky\" but \"Heavy\", we return \"Heavy\". Example 2: Input: length = 200, width = 50, height = 800, mass = 50 Output: \"Neither\" Explanation:  None of the dimensions of the box is greater or equal to 104. Its volume = 8 * 106 <= 109. So it cannot be categorized as \"Bulky\". Its mass is also less than 100, so it cannot be categorized as \"Heavy\" either.  Since its neither of the two above categories, we return \"Neither\".   Constraints: 1 <= length, width, height <= 105 1 <= mass <= 103",
        "1886": "For a stream of integers, implement a data structure that checks if the last k integers parsed in the stream are equal to value. Implement the DataStream class: DataStream(int value, int k) Initializes the object with an empty integer stream and the two integers value and k. boolean consec(int num) Adds num to the stream of integers. Returns true if the last k integers are equal to value, and false otherwise. If there are less than k integers, the condition does not hold true, so returns false.   Example 1: Input [\"DataStream\", \"consec\", \"consec\", \"consec\", \"consec\"] [[4, 3], [4], [4], [4], [3]] Output [null, false, false, true, false]  Explanation DataStream dataStream = new DataStream(4, 3); //value = 4, k = 3  dataStream.consec(4); // Only 1 integer is parsed, so returns False.  dataStream.consec(4); // Only 2 integers are parsed.                       // Since 2 is less than k, returns False.  dataStream.consec(4); // The 3 integers parsed are all equal to value, so returns True.  dataStream.consec(3); // The last k integers parsed in the stream are [4,4,3].                       // Since 3 is not equal to value, it returns False.   Constraints: 1 <= value, num <= 109 1 <= k <= 105 At most 105 calls will be made to consec.",
        "1887": "You are given a 0-indexed integer array nums. The effective value of three indices i, j, and k is defined as ((nums[i] | nums[j]) & nums[k]). The xor-beauty of the array is the XORing of the effective values of all the possible triplets of indices (i, j, k) where 0 <= i, j, k < n. Return the xor-beauty of nums. Note that: val1 | val2 is bitwise OR of val1 and val2. val1 & val2 is bitwise AND of val1 and val2.   Example 1: Input: nums = [1,4] Output: 5 Explanation:  The triplets and their corresponding effective values are listed below: - (0,0,0) with effective value ((1 | 1) & 1) = 1 - (0,0,1) with effective value ((1 | 1) & 4) = 0 - (0,1,0) with effective value ((1 | 4) & 1) = 1 - (0,1,1) with effective value ((1 | 4) & 4) = 4 - (1,0,0) with effective value ((4 | 1) & 1) = 1 - (1,0,1) with effective value ((4 | 1) & 4) = 4 - (1,1,0) with effective value ((4 | 4) & 1) = 0 - (1,1,1) with effective value ((4 | 4) & 4) = 4  Xor-beauty of array will be bitwise XOR of all beauties = 1 ^ 0 ^ 1 ^ 4 ^ 1 ^ 4 ^ 0 ^ 4 = 5. Example 2: Input: nums = [15,45,20,2,34,35,5,44,32,30] Output: 34 Explanation: The xor-beauty of the given array is 34.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109",
        "1888": "You are given a 0-indexed integer array stations of length n, where stations[i] represents the number of power stations in the ith city. Each power station can provide power to every city in a fixed range. In other words, if the range is denoted by r, then a power station at city i can provide power to all cities j such that |i - j| <= r and 0 <= i, j <= n - 1. Note that |x| denotes absolute value. For example, |7 - 5| = 2 and |3 - 10| = 7. The power of a city is the total number of power stations it is being provided power from. The government has sanctioned building k more power stations, each of which can be built in any city, and have the same range as the pre-existing ones. Given the two integers r and k, return the maximum possible minimum power of a city, if the additional power stations are built optimally. Note that you can build the k power stations in multiple cities.   Example 1: Input: stations = [1,2,4,5,0], r = 1, k = 2 Output: 5 Explanation:  One of the optimal ways is to install both the power stations at city 1.  So stations will become [1,4,4,5,0]. - City 0 is provided by 1 + 4 = 5 power stations. - City 1 is provided by 1 + 4 + 4 = 9 power stations. - City 2 is provided by 4 + 4 + 5 = 13 power stations. - City 3 is provided by 5 + 4 = 9 power stations. - City 4 is provided by 5 + 0 = 5 power stations. So the minimum power of a city is 5. Since it is not possible to obtain a larger power, we return 5. Example 2: Input: stations = [4,4,4,4], r = 0, k = 3 Output: 4 Explanation:  It can be proved that we cannot make the minimum power of a city greater than 4.   Constraints: n == stations.length 1 <= n <= 105 0 <= stations[i] <= 105 0 <= r <= n - 1 0 <= k <= 109",
        "1889": "Given an array nums sorted in non-decreasing order, return the maximum between the number of positive integers and the number of negative integers. In other words, if the number of positive integers in nums is pos and the number of negative integers is neg, then return the maximum of pos and neg. Note that 0 is neither positive nor negative.   Example 1: Input: nums = [-2,-1,-1,1,2,3] Output: 3 Explanation: There are 3 positive integers and 3 negative integers. The maximum count among them is 3. Example 2: Input: nums = [-3,-2,-1,0,0,1,2] Output: 3 Explanation: There are 2 positive integers and 3 negative integers. The maximum count among them is 3. Example 3: Input: nums = [5,20,66,1314] Output: 4 Explanation: There are 4 positive integers and 0 negative integers. The maximum count among them is 4.   Constraints: 1 <= nums.length <= 2000 -2000 <= nums[i] <= 2000 nums is sorted in a non-decreasing order.   Follow up: Can you solve the problem in O(log(n)) time complexity?",
        "1890": "You are given a 0-indexed integer array nums and an integer k. You have a starting score of 0. In one operation: choose an index i such that 0 <= i < nums.length, increase your score by nums[i], and replace nums[i] with ceil(nums[i] / 3). Return the maximum possible score you can attain after applying exactly k operations. The ceiling function ceil(val) is the least integer greater than or equal to val.   Example 1: Input: nums = [10,10,10,10,10], k = 5 Output: 50 Explanation: Apply the operation to each array element exactly once. The final score is 10 + 10 + 10 + 10 + 10 = 50. Example 2: Input: nums = [1,10,3,3,3], k = 3 Output: 17 Explanation: You can do the following operations: Operation 1: Select i = 1, so nums becomes [1,4,3,3,3]. Your score increases by 10. Operation 2: Select i = 1, so nums becomes [1,2,3,3,3]. Your score increases by 4. Operation 3: Select i = 2, so nums becomes [1,1,1,3,3]. Your score increases by 3. The final score is 10 + 4 + 3 = 17.   Constraints: 1 <= nums.length, k <= 105 1 <= nums[i] <= 109",
        "1891": "You are given two 0-indexed strings word1 and word2. A move consists of choosing two indices i and j such that 0 <= i < word1.length and 0 <= j < word2.length and swapping word1[i] with word2[j]. Return true if it is possible to get the number of distinct characters in word1 and word2 to be equal with exactly one move. Return false otherwise.   Example 1: Input: word1 = \"ac\", word2 = \"b\" Output: false Explanation: Any pair of swaps would yield two distinct characters in the first string, and one in the second string. Example 2: Input: word1 = \"abcc\", word2 = \"aab\" Output: true Explanation: We swap index 2 of the first string with index 0 of the second string. The resulting strings are word1 = \"abac\" and word2 = \"cab\", which both have 3 distinct characters. Example 3: Input: word1 = \"abcde\", word2 = \"fghij\" Output: true Explanation: Both resulting strings will have 5 distinct characters, regardless of which indices we swap.   Constraints: 1 <= word1.length, word2.length <= 105 word1 and word2 consist of only lowercase English letters.",
        "1892": "There are k workers who want to move n boxes from the right (old) warehouse to the left (new) warehouse. You are given the two integers n and k, and a 2D integer array time of size k x 4 where time[i] = [righti, picki, lefti, puti]. The warehouses are separated by a river and connected by a bridge. Initially, all k workers are waiting on the left side of the bridge. To move the boxes, the ith worker can do the following: Cross the bridge to the right side in righti minutes. Pick a box from the right warehouse in picki minutes. Cross the bridge to the left side in lefti minutes. Put the box into the left warehouse in puti minutes. The ith worker is less efficient than the jth worker if either condition is met: lefti + righti > leftj + rightj lefti + righti == leftj + rightj and i > j The following rules regulate the movement of the workers through the bridge: Only one worker can use the bridge at a time. When the bridge is unused prioritize the least efficient worker on the right side to cross. If there are no workers on the right side, prioritize the least efficient worker on the left side to cross. If enough workers have already been dispatched from the left side to pick up all the remaining boxes, no more workers will be sent from the left side. Return the elapsed minutes at which the last box reaches the left side of the bridge.   Example 1: Input: n = 1, k = 3, time = [[1,1,2,1],[1,1,3,1],[1,1,4,1]] Output: 6 Explanation: From 0 to 1 minutes: worker 2 crosses the bridge to the right. From 1 to 2 minutes: worker 2 picks up a box from the right warehouse. From 2 to 6 minutes: worker 2 crosses the bridge to the left. From 6 to 7 minutes: worker 2 puts a box at the left warehouse. The whole process ends after 7 minutes. We return 6 because the problem asks for the instance of time at which the last worker reaches the left side of the bridge. Example 2: Input: n = 3, k = 2, time = [[1,9,1,8],[10,10,10,10]] Output: 50 Explanation: From 0  to 10: worker 1 crosses the bridge to the right. From 10 to 20: worker 1 picks up a box from the right warehouse. From 10 to 11: worker 0 crosses the bridge to the right. From 11 to 20: worker 0 picks up a box from the right warehouse. From 20 to 30: worker 1 crosses the bridge to the left. From 30 to 40: worker 1 puts a box at the left warehouse. From 30 to 31: worker 0 crosses the bridge to the left. From 31 to 39: worker 0 puts a box at the left warehouse. From 39 to 40: worker 0 crosses the bridge to the right. From 40 to 49: worker 0 picks up a box from the right warehouse. From 49 to 50: worker 0 crosses the bridge to the left.   Constraints: 1 <= n, k <= 104 time.length == k time[i].length == 4 1 <= leftToRighti, pickOldi, rightToLefti, putNewi <= 1000",
        "1893": "You are given a positive integer array nums. The element sum is the sum of all the elements in nums. The digit sum is the sum of all the digits (not necessarily distinct) that appear in nums. Return the absolute difference between the element sum and digit sum of nums. Note that the absolute difference between two integers x and y is defined as |x - y|.   Example 1: Input: nums = [1,15,6,3] Output: 9 Explanation:  The element sum of nums is 1 + 15 + 6 + 3 = 25. The digit sum of nums is 1 + 1 + 5 + 6 + 3 = 16. The absolute difference between the element sum and digit sum is |25 - 16| = 9. Example 2: Input: nums = [1,2,3,4] Output: 0 Explanation: The element sum of nums is 1 + 2 + 3 + 4 = 10. The digit sum of nums is 1 + 2 + 3 + 4 = 10. The absolute difference between the element sum and digit sum is |10 - 10| = 0.   Constraints: 1 <= nums.length <= 2000 1 <= nums[i] <= 2000",
        "1894": "You are given a positive integer n, indicating that we initially have an n x n 0-indexed integer matrix mat filled with zeroes. You are also given a 2D integer array query. For each query[i] = [row1i, col1i, row2i, col2i], you should do the following operation: Add 1 to every element in the submatrix with the top left corner (row1i, col1i) and the bottom right corner (row2i, col2i). That is, add 1 to mat[x][y] for all row1i <= x <= row2i and col1i <= y <= col2i. Return the matrix mat after performing every query.   Example 1: Input: n = 3, queries = [[1,1,2,2],[0,0,1,1]] Output: [[1,1,0],[1,2,1],[0,1,1]] Explanation: The diagram above shows the initial matrix, the matrix after the first query, and the matrix after the second query. - In the first query, we add 1 to every element in the submatrix with the top left corner (1, 1) and bottom right corner (2, 2). - In the second query, we add 1 to every element in the submatrix with the top left corner (0, 0) and bottom right corner (1, 1). Example 2: Input: n = 2, queries = [[0,0,1,1]] Output: [[1,1],[1,1]] Explanation: The diagram above shows the initial matrix and the matrix after the first query. - In the first query we add 1 to every element in the matrix.   Constraints: 1 <= n <= 500 1 <= queries.length <= 104 0 <= row1i <= row2i < n 0 <= col1i <= col2i < n",
        "1895": "Given an integer array nums and an integer k, return the number of good subarrays of nums. A subarray arr is good if it there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j]. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [1,1,1,1,1], k = 10 Output: 1 Explanation: The only good subarray is the array nums itself. Example 2: Input: nums = [3,1,4,3,2,2,4], k = 2 Output: 4 Explanation: There are 4 different good subarrays: - [3,1,4,3,2,2] that has 2 pairs. - [3,1,4,3,2,2,4] that has 3 pairs. - [1,4,3,2,2,4] that has 2 pairs. - [4,3,2,2,4] that has 2 pairs.   Constraints: 1 <= nums.length <= 105 1 <= nums[i], k <= 109",
        "1896": "There exists an undirected and initially unrooted tree with n nodes indexed from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. Each node has an associated price. You are given an integer array price, where price[i] is the price of the ith node. The price sum of a given path is the sum of the prices of all nodes lying on that path. The tree can be rooted at any node root of your choice. The incurred cost after choosing root is the difference between the maximum and minimum price sum amongst all paths starting at root. Return the maximum possible cost amongst all possible root choices.   Example 1: Input: n = 6, edges = [[0,1],[1,2],[1,3],[3,4],[3,5]], price = [9,8,7,6,10,5] Output: 24 Explanation: The diagram above denotes the tree after rooting it at node 2. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum. - The first path contains nodes [2,1,3,4]: the prices are [7,8,6,10], and the sum of the prices is 31. - The second path contains the node [2] with the price [7]. The difference between the maximum and minimum price sum is 24. It can be proved that 24 is the maximum cost. Example 2: Input: n = 3, edges = [[0,1],[1,2]], price = [1,1,1] Output: 2 Explanation: The diagram above denotes the tree after rooting it at node 0. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum. - The first path contains nodes [0,1,2]: the prices are [1,1,1], and the sum of the prices is 3. - The second path contains node [0] with a price [1]. The difference between the maximum and minimum price sum is 2. It can be proved that 2 is the maximum cost.   Constraints: 1 <= n <= 105 edges.length == n - 1 0 <= ai, bi <= n - 1 edges represents a valid tree. price.length == n 1 <= price[i] <= 105",
        "1897": "Given two integer arrays nums1 and nums2, sorted in non-decreasing order, return the minimum integer common to both arrays. If there is no common integer amongst nums1 and nums2, return -1. Note that an integer is said to be common to nums1 and nums2 if both arrays have at least one occurrence of that integer.   Example 1: Input: nums1 = [1,2,3], nums2 = [2,4] Output: 2 Explanation: The smallest element common to both arrays is 2, so we return 2. Example 2: Input: nums1 = [1,2,3,6], nums2 = [2,3,4,5] Output: 2 Explanation: There are two common elements in the array 2 and 3 out of which 2 is the smallest, so 2 is returned.   Constraints: 1 <= nums1.length, nums2.length <= 105 1 <= nums1[i], nums2[j] <= 109 Both nums1 and nums2 are sorted in non-decreasing order.",
        "1898": "You are given two integer arrays nums1 and nums2 of equal length n and an integer k. You can perform the following operation on nums1: Choose two indexes i and j and increment nums1[i] by k and decrement nums1[j] by k. In other words, nums1[i] = nums1[i] + k and nums1[j] = nums1[j] - k. nums1 is said to be equal to nums2 if for all indices i such that 0 <= i < n, nums1[i] == nums2[i]. Return the minimum number of operations required to make nums1 equal to nums2. If it is impossible to make them equal, return -1.   Example 1: Input: nums1 = [4,3,1,4], nums2 = [1,3,7,1], k = 3 Output: 2 Explanation: In 2 operations, we can transform nums1 to nums2. 1st operation: i = 2, j = 0. After applying the operation, nums1 = [1,3,4,4]. 2nd operation: i = 2, j = 3. After applying the operation, nums1 = [1,3,7,1]. One can prove that it is impossible to make arrays equal in fewer operations. Example 2: Input: nums1 = [3,8,5,2], nums2 = [2,4,1,6], k = 1 Output: -1 Explanation: It can be proved that it is impossible to make the two arrays equal.   Constraints: n == nums1.length == nums2.length 2 <= n <= 105 0 <= nums1[i], nums2[j] <= 109 0 <= k <= 105",
        "1899": "You are given two 0-indexed integer arrays nums1 and nums2 of equal length n and a positive integer k. You must choose a subsequence of indices from nums1 of length k. For chosen indices i0, i1, ..., ik - 1, your score is defined as: The sum of the selected elements from nums1 multiplied with the minimum of the selected elements from nums2. It can defined simply as: (nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1]). Return the maximum possible score. A subsequence of indices of an array is a set that can be derived from the set {0, 1, ..., n-1} by deleting some or no elements.   Example 1: Input: nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3 Output: 12 Explanation:  The four possible subsequence scores are: - We choose the indices 0, 1, and 2 with score = (1+3+3) * min(2,1,3) = 7. - We choose the indices 0, 1, and 3 with score = (1+3+2) * min(2,1,4) = 6.  - We choose the indices 0, 2, and 3 with score = (1+3+2) * min(2,3,4) = 12.  - We choose the indices 1, 2, and 3 with score = (3+3+2) * min(1,3,4) = 8. Therefore, we return the max score, which is 12. Example 2: Input: nums1 = [4,2,3,1,1], nums2 = [7,5,10,9,6], k = 1 Output: 30 Explanation:  Choosing index 2 is optimal: nums1[2] * nums2[2] = 3 * 10 = 30 is the maximum possible score.   Constraints: n == nums1.length == nums2.length 1 <= n <= 105 0 <= nums1[i], nums2[j] <= 105 1 <= k <= n",
        "1900": "There exists an infinitely large grid. You are currently at point (1, 1), and you need to reach the point (targetX, targetY) using a finite number of steps. In one step, you can move from point (x, y) to any one of the following points: (x, y - x) (x - y, y) (2 * x, y) (x, 2 * y) Given two integers targetX and targetY representing the X-coordinate and Y-coordinate of your final position, return true if you can reach the point from (1, 1) using some number of steps, and false otherwise.   Example 1: Input: targetX = 6, targetY = 9 Output: false Explanation: It is impossible to reach (6,9) from (1,1) using any sequence of moves, so false is returned. Example 2: Input: targetX = 4, targetY = 7 Output: true Explanation: You can follow the path (1,1) -> (1,2) -> (1,4) -> (1,8) -> (1,7) -> (2,7) -> (4,7).   Constraints: 1 <= targetX, targetY <= 109",
        "1901": "You are given a positive integer n. Each digit of n has a sign according to the following rules: The most significant digit is assigned a positive sign. Each other digit has an opposite sign to its adjacent digits. Return the sum of all digits with their corresponding sign.   Example 1: Input: n = 521 Output: 4 Explanation: (+5) + (-2) + (+1) = 4. Example 2: Input: n = 111 Output: 1 Explanation: (+1) + (-1) + (+1) = 1. Example 3: Input: n = 886996 Output: 0 Explanation: (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0.   Constraints: 1 <= n <= 109  ",
        "1902": "There is a class with m students and n exams. You are given a 0-indexed m x n integer matrix score, where each row represents one student and score[i][j] denotes the score the ith student got in the jth exam. The matrix score contains distinct integers only. You are also given an integer k. Sort the students (i.e., the rows of the matrix) by their scores in the kth (0-indexed) exam from the highest to the lowest. Return the matrix after sorting it.   Example 1: Input: score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2 Output: [[7,5,11,2],[10,6,9,1],[4,8,3,15]] Explanation: In the above diagram, S denotes the student, while E denotes the exam. - The student with index 1 scored 11 in exam 2, which is the highest score, so they got first place. - The student with index 0 scored 9 in exam 2, which is the second highest score, so they got second place. - The student with index 2 scored 3 in exam 2, which is the lowest score, so they got third place. Example 2: Input: score = [[3,4],[5,6]], k = 0 Output: [[5,6],[3,4]] Explanation: In the above diagram, S denotes the student, while E denotes the exam. - The student with index 1 scored 5 in exam 0, which is the highest score, so they got first place. - The student with index 0 scored 3 in exam 0, which is the lowest score, so they got second place.   Constraints: m == score.length n == score[i].length 1 <= m, n <= 250 1 <= score[i][j] <= 105 score consists of distinct integers. 0 <= k < n",
        "1903": "You are given two 0-indexed binary strings s and target of the same length n. You can do the following operation on s any number of times: Choose two different indices i and j where 0 <= i, j < n. Simultaneously, replace s[i] with (s[i] OR s[j]) and s[j] with (s[i] XOR s[j]). For example, if s = \"0110\", you can choose i = 0 and j = 2, then simultaneously replace s[0] with (s[0] OR s[2] = 0 OR 1 = 1), and s[2] with (s[0] XOR s[2] = 0 XOR 1 = 1), so we will have s = \"1110\". Return true if you can make the string s equal to target, or false otherwise.   Example 1: Input: s = \"1010\", target = \"0110\" Output: true Explanation: We can do the following operations: - Choose i = 2 and j = 0. We have now s = \"0010\". - Choose i = 2 and j = 1. We have now s = \"0110\". Since we can make s equal to target, we return true. Example 2: Input: s = \"11\", target = \"00\" Output: false Explanation: It is not possible to make s equal to target with any number of operations.   Constraints: n == s.length == target.length 2 <= n <= 105 s and target consist of only the digits 0 and 1.",
        "1904": "You are given an integer array nums and an integer k. Split the array into some number of non-empty subarrays. The cost of a split is the sum of the importance value of each subarray in the split. Let trimmed(subarray) be the version of the subarray where all numbers which appear only once are removed. For example, trimmed([3,1,2,4,3,4]) = [3,4,3,4]. The importance value of a subarray is k + trimmed(subarray).length. For example, if a subarray is [1,2,3,3,3,4,4], then trimmed([1,2,3,3,3,4,4]) = [3,3,3,4,4].The importance value of this subarray will be k + 5. Return the minimum possible cost of a split of nums. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [1,2,1,2,1,3,3], k = 2 Output: 8 Explanation: We split nums to have two subarrays: [1,2], [1,2,1,3,3]. The importance value of [1,2] is 2 + (0) = 2. The importance value of [1,2,1,3,3] is 2 + (2 + 2) = 6. The cost of the split is 2 + 6 = 8. It can be shown that this is the minimum possible cost among all the possible splits. Example 2: Input: nums = [1,2,1,2,1], k = 2 Output: 6 Explanation: We split nums to have two subarrays: [1,2], [1,2,1]. The importance value of [1,2] is 2 + (0) = 2. The importance value of [1,2,1] is 2 + (2) = 4. The cost of the split is 2 + 4 = 6. It can be shown that this is the minimum possible cost among all the possible splits. Example 3: Input: nums = [1,2,1,2,1], k = 5 Output: 10 Explanation: We split nums to have one subarray: [1,2,1,2,1]. The importance value of [1,2,1,2,1] is 5 + (3 + 2) = 10. The cost of the split is 10. It can be shown that this is the minimum possible cost among all the possible splits.   Constraints: 1 <= nums.length <= 1000 0 <= nums[i] < nums.length 1 <= k <= 109  ",
        "1905": "You are given a positive integer n, that is initially placed on a board. Every day, for 109 days, you perform the following procedure: For each number x present on the board, find all numbers 1 <= i <= n such that x % i == 1. Then, place those numbers on the board. Return the number of distinct integers present on the board after 109 days have elapsed. Note: Once a number is placed on the board, it will remain on it until the end. % stands for the modulo operation. For example, 14 % 3 is 2.   Example 1: Input: n = 5 Output: 4 Explanation: Initially, 5 is present on the board.  The next day, 2 and 4 will be added since 5 % 2 == 1 and 5 % 4 == 1.  After that day, 3 will be added to the board because 4 % 3 == 1.  At the end of a billion days, the distinct numbers on the board will be 2, 3, 4, and 5.  Example 2: Input: n = 3 Output: 2 Explanation:  Since 3 % 2 == 1, 2 will be added to the board.  After a billion days, the only two distinct numbers on the board are 2 and 3.    Constraints: 1 <= n <= 100",
        "1906": "There is a regular convex polygon with n vertices. The vertices are labeled from 0 to n - 1 in a clockwise direction, and each vertex has exactly one monkey. The following figure shows a convex polygon of 6 vertices. Simultaneously, each monkey moves to a neighboring vertex. A collision happens if at least two monkeys reside on the same vertex after the movement or intersect on an edge. Return the number of ways the monkeys can move so that at least one collision happens. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: n = 3 Output: 6 Explanation: There are 8 total possible movements. Two ways such that they collide at some point are: Monkey 1 moves in a clockwise direction; monkey 2 moves in an anticlockwise direction; monkey 3 moves in a clockwise direction. Monkeys 1 and 2 collide. Monkey 1 moves in an anticlockwise direction; monkey 2 moves in an anticlockwise direction; monkey 3 moves in a clockwise direction. Monkeys 1 and 3 collide. Example 2: Input: n = 4 Output: 14   Constraints: 3 <= n <= 109",
        "1907": "You have k bags. You are given a 0-indexed integer array weights where weights[i] is the weight of the ith marble. You are also given the integer k. Divide the marbles into the k bags according to the following rules: No bag is empty. If the ith marble and jth marble are in a bag, then all marbles with an index between the ith and jth indices should also be in that same bag. If a bag consists of all the marbles with an index from i to j inclusively, then the cost of the bag is weights[i] + weights[j]. The score after distributing the marbles is the sum of the costs of all the k bags. Return the difference between the maximum and minimum scores among marble distributions.   Example 1: Input: weights = [1,3,5,1], k = 2 Output: 4 Explanation:  The distribution [1],[3,5,1] results in the minimal score of (1+1) + (3+1) = 6.  The distribution [1,3],[5,1], results in the maximal score of (1+3) + (5+1) = 10.  Thus, we return their difference 10 - 6 = 4. Example 2: Input: weights = [1, 3], k = 2 Output: 0 Explanation: The only distribution possible is [1],[3].  Since both the maximal and minimal score are the same, we return 0.   Constraints: 1 <= k <= weights.length <= 105 1 <= weights[i] <= 109",
        "1908": "Given a 0-indexed integer array nums of size n containing all numbers from 1 to n, return the number of increasing quadruplets. A quadruplet (i, j, k, l) is increasing if: 0 <= i < j < k < l < n, and nums[i] < nums[k] < nums[j] < nums[l].   Example 1: Input: nums = [1,3,2,4,5] Output: 2 Explanation:  - When i = 0, j = 1, k = 2, and l = 3, nums[i] < nums[k] < nums[j] < nums[l]. - When i = 0, j = 1, k = 2, and l = 4, nums[i] < nums[k] < nums[j] < nums[l].  There are no other quadruplets, so we return 2. Example 2: Input: nums = [1,2,3,4] Output: 0 Explanation: There exists only one quadruplet with i = 0, j = 1, k = 2, l = 3, but since nums[j] < nums[k], we return 0.   Constraints: 4 <= nums.length <= 4000 1 <= nums[i] <= nums.length All the integers of nums are unique. nums is a permutation.",
        "1909": "Given an array of positive integers nums, return an array answer that consists of the digits of each integer in nums after separating them in the same order they appear in nums. To separate the digits of an integer is to get all the digits it has in the same order. For example, for the integer 10921, the separation of its digits is [1,0,9,2,1].   Example 1: Input: nums = [13,25,83,77] Output: [1,3,2,5,8,3,7,7] Explanation:  - The separation of 13 is [1,3]. - The separation of 25 is [2,5]. - The separation of 83 is [8,3]. - The separation of 77 is [7,7]. answer = [1,3,2,5,8,3,7,7]. Note that answer contains the separations in the same order. Example 2: Input: nums = [7,1,3,9] Output: [7,1,3,9] Explanation: The separation of each integer in nums is itself. answer = [7,1,3,9].   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 105",
        "1910": "You are given an integer array banned and two integers n and maxSum. You are choosing some number of integers following the below rules: The chosen integers have to be in the range [1, n]. Each integer can be chosen at most once. The chosen integers should not be in the array banned. The sum of the chosen integers should not exceed maxSum. Return the maximum number of integers you can choose following the mentioned rules.   Example 1: Input: banned = [1,6,5], n = 5, maxSum = 6 Output: 2 Explanation: You can choose the integers 2 and 4. 2 and 4 are from the range [1, 5], both did not appear in banned, and their sum is 6, which did not exceed maxSum. Example 2: Input: banned = [1,2,3,4,5,6,7], n = 8, maxSum = 1 Output: 0 Explanation: You cannot choose any integer while following the mentioned conditions. Example 3: Input: banned = [11], n = 7, maxSum = 50 Output: 7 Explanation: You can choose the integers 1, 2, 3, 4, 5, 6, and 7. They are from the range [1, 7], all did not appear in banned, and their sum is 28, which did not exceed maxSum.   Constraints: 1 <= banned.length <= 104 1 <= banned[i], n <= 104 1 <= maxSum <= 109",
        "1911": "There are some prizes on the X-axis. You are given an integer array prizePositions that is sorted in non-decreasing order, where prizePositions[i] is the position of the ith prize. There could be different prizes at the same position on the line. You are also given an integer k. You are allowed to select two segments with integer endpoints. The length of each segment must be k. You will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). The two selected segments may intersect. For example if k = 2, you can choose segments [1, 3] and [2, 4], and you will win any prize i that satisfies 1 <= prizePositions[i] <= 3 or 2 <= prizePositions[i] <= 4. Return the maximum number of prizes you can win if you choose the two segments optimally.   Example 1: Input: prizePositions = [1,1,2,2,3,3,5], k = 2 Output: 7 Explanation: In this example, you can win all 7 prizes by selecting two segments [1, 3] and [3, 5]. Example 2: Input: prizePositions = [1,2,3,4], k = 0 Output: 2 Explanation: For this example, one choice for the segments is [3, 3] and [4, 4], and you will be able to get 2 prizes.    Constraints: 1 <= prizePositions.length <= 105 1 <= prizePositions[i] <= 109 0 <= k <= 109  prizePositions is sorted in non-decreasing order.  ",
        "1912": "You are given a 0-indexed m x n binary matrix grid. You can move from a cell (row, col) to any of the cells (row + 1, col) or (row, col + 1) that has the value 1. The matrix is disconnected if there is no path from (0, 0) to (m - 1, n - 1). You can flip the value of at most one (possibly none) cell. You cannot flip the cells (0, 0) and (m - 1, n - 1). Return true if it is possible to make the matrix disconnect or false otherwise. Note that flipping a cell changes its value from 0 to 1 or from 1 to 0.   Example 1: Input: grid = [[1,1,1],[1,0,0],[1,1,1]] Output: true Explanation: We can change the cell shown in the diagram above. There is no path from (0, 0) to (2, 2) in the resulting grid. Example 2: Input: grid = [[1,1,1],[1,0,1],[1,1,1]] Output: false Explanation: It is not possible to change at most one cell such that there is not path from (0, 0) to (2, 2).   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 1000 1 <= m * n <= 105 grid[i][j] is either 0 or 1. grid[0][0] == grid[m - 1][n - 1] == 1",
        "1913": "You are given an integer array gifts denoting the number of gifts in various piles. Every second, you do the following: Choose the pile with the maximum number of gifts. If there is more than one pile with the maximum number of gifts, choose any. Leave behind the floor of the square root of the number of gifts in the pile. Take the rest of the gifts. Return the number of gifts remaining after k seconds.   Example 1: Input: gifts = [25,64,9,4,100], k = 4 Output: 29 Explanation:  The gifts are taken in the following way: - In the first second, the last pile is chosen and 10 gifts are left behind. - Then the second pile is chosen and 8 gifts are left behind. - After that the first pile is chosen and 5 gifts are left behind. - Finally, the last pile is chosen again and 3 gifts are left behind. The final remaining gifts are [5,8,9,4,3], so the total number of gifts remaining is 29. Example 2: Input: gifts = [1,1,1,1], k = 4 Output: 4 Explanation:  In this case, regardless which pile you choose, you have to leave behind 1 gift in each pile.  That is, you can't take any pile with you.  So, the total gifts remaining are 4.   Constraints: 1 <= gifts.length <= 103 1 <= gifts[i] <= 109 1 <= k <= 103",
        "1914": "You are given a 0-indexed array of strings words and a 2D array of integers queries. Each query queries[i] = [li, ri] asks us to find the number of strings present in the range li to ri (both inclusive) of words that start and end with a vowel. Return an array ans of size queries.length, where ans[i] is the answer to the ith query. Note that the vowel letters are 'a', 'e', 'i', 'o', and 'u'.   Example 1: Input: words = [\"aba\",\"bcb\",\"ece\",\"aa\",\"e\"], queries = [[0,2],[1,4],[1,1]] Output: [2,3,0] Explanation: The strings starting and ending with a vowel are \"aba\", \"ece\", \"aa\" and \"e\". The answer to the query [0,2] is 2 (strings \"aba\" and \"ece\"). to query [1,4] is 3 (strings \"ece\", \"aa\", \"e\"). to query [1,1] is 0. We return [2,3,0]. Example 2: Input: words = [\"a\",\"e\",\"i\"], queries = [[0,2],[0,1],[2,2]] Output: [3,2,1] Explanation: Every string satisfies the conditions, so we return [3,2,1].   Constraints: 1 <= words.length <= 105 1 <= words[i].length <= 40 words[i] consists only of lowercase English letters. sum(words[i].length) <= 3 * 105 1 <= queries.length <= 105 0 <= li <= ri < words.length",
        "1915": "There are several consecutive houses along a street, each of which has some money inside. There is also a robber, who wants to steal money from the homes, but he refuses to steal from adjacent homes. The capability of the robber is the maximum amount of money he steals from one house of all the houses he robbed. You are given an integer array nums representing how much money is stashed in each house. More formally, the ith house from the left has nums[i] dollars. You are also given an integer k, representing the minimum number of houses the robber will steal from. It is always possible to steal at least k houses. Return the minimum capability of the robber out of all the possible ways to steal at least k houses.   Example 1: Input: nums = [2,3,5,9], k = 2 Output: 5 Explanation:  There are three ways to rob at least 2 houses: - Rob the houses at indices 0 and 2. Capability is max(nums[0], nums[2]) = 5. - Rob the houses at indices 0 and 3. Capability is max(nums[0], nums[3]) = 9. - Rob the houses at indices 1 and 3. Capability is max(nums[1], nums[3]) = 9. Therefore, we return min(5, 9, 9) = 5. Example 2: Input: nums = [2,7,9,3,1], k = 2 Output: 2 Explanation: There are 7 ways to rob the houses. The way which leads to minimum capability is to rob the house at index 0 and 4. Return max(nums[0], nums[4]) = 2.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 1 <= k <= (nums.length + 1)/2",
        "1916": "You have two fruit baskets containing n fruits each. You are given two 0-indexed integer arrays basket1 and basket2 representing the cost of fruit in each basket. You want to make both baskets equal. To do so, you can use the following operation as many times as you want: Chose two indices i and j, and swap the ith fruit of basket1 with the jth fruit of basket2. The cost of the swap is min(basket1[i],basket2[j]). Two baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets. Return the minimum cost to make both the baskets equal or -1 if impossible.   Example 1: Input: basket1 = [4,2,2,2], basket2 = [1,4,1,2] Output: 1 Explanation: Swap index 1 of basket1 with index 0 of basket2, which has cost 1. Now basket1 = [4,1,2,2] and basket2 = [2,4,1,2]. Rearranging both the arrays makes them equal. Example 2: Input: basket1 = [2,3,4,1], basket2 = [3,2,5,1] Output: -1 Explanation: It can be shown that it is impossible to make both the baskets equal.   Constraints: basket1.length == basket2.length 1 <= basket1.length <= 105 1 <= basket1[i],basket2[i] <= 109",
        "1917": "You are given a 0-indexed integer array nums. The concatenation of two numbers is the number formed by concatenating their numerals. For example, the concatenation of 15, 49 is 1549. The concatenation value of nums is initially equal to 0. Perform this operation until nums becomes empty: If there exists more than one number in nums, pick the first element and last element in nums respectively and add the value of their concatenation to the concatenation value of nums, then delete the first and last element from nums. If one element exists, add its value to the concatenation value of nums, then delete it. Return the concatenation value of the nums.   Example 1: Input: nums = [7,52,2,4] Output: 596 Explanation: Before performing any operation, nums is [7,52,2,4] and concatenation value is 0.  - In the first operation: We pick the first element, 7, and the last element, 4. Their concatenation is 74, and we add it to the concatenation value, so it becomes equal to 74. Then we delete them from nums, so nums becomes equal to [52,2].  - In the second operation: We pick the first element, 52, and the last element, 2. Their concatenation is 522, and we add it to the concatenation value, so it becomes equal to 596. Then we delete them from the nums, so nums becomes empty. Since the concatenation value is 596 so the answer is 596. Example 2: Input: nums = [5,14,13,8,12] Output: 673 Explanation: Before performing any operation, nums is [5,14,13,8,12] and concatenation value is 0.  - In the first operation: We pick the first element, 5, and the last element, 12. Their concatenation is 512, and we add it to the concatenation value, so it becomes equal to 512. Then we delete them from the nums, so nums becomes equal to [14,13,8].  - In the second operation: We pick the first element, 14, and the last element, 8. Their concatenation is 148, and we add it to the concatenation value, so it becomes equal to 660. Then we delete them from the nums, so nums becomes equal to [13].  - In the third operation: nums has only one element, so we pick 13 and add it to the concatenation value, so it becomes equal to 673. Then we delete it from nums, so nums become empty. Since the concatenation value is 673 so the answer is 673.   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 104  ",
        "1918": "Given a 0-indexed integer array nums of size n and two integers lower and upper, return the number of fair pairs. A pair (i, j) is fair if: 0 <= i < j < n, and lower <= nums[i] + nums[j] <= upper   Example 1: Input: nums = [0,1,7,4,4,5], lower = 3, upper = 6 Output: 6 Explanation: There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5). Example 2: Input: nums = [1,7,9,2,5], lower = 11, upper = 11 Output: 1 Explanation: There is a single fair pair: (2,3).   Constraints: 1 <= nums.length <= 105 nums.length == n -109 <= nums[i] <= 109 -109 <= lower <= upper <= 109",
        "1919": "You are given a binary string s, and a 2D integer array queries where queries[i] = [firsti, secondi]. For the ith query, find the shortest substring of s whose decimal value, val, yields secondi when bitwise XORed with firsti. In other words, val ^ firsti == secondi. The answer to the ith query is the endpoints (0-indexed) of the substring [lefti, righti] or [-1, -1] if no such substring exists. If there are multiple answers, choose the one with the minimum lefti. Return an array ans where ans[i] = [lefti, righti] is the answer to the ith query. A substring is a contiguous non-empty sequence of characters within a string.   Example 1: Input: s = \"101101\", queries = [[0,5],[1,2]] Output: [[0,2],[2,3]] Explanation: For the first query the substring in range [0,2] is \"101\" which has a decimal value of 5, and 5 ^ 0 = 5, hence the answer to the first query is [0,2]. In the second query, the substring in range [2,3] is \"11\", and has a decimal value of 3, and 3 ^ 1 = 2. So, [2,3] is returned for the second query.  Example 2: Input: s = \"0101\", queries = [[12,8]] Output: [[-1,-1]] Explanation: In this example there is no substring that answers the query, hence [-1,-1] is returned. Example 3: Input: s = \"1\", queries = [[4,5]] Output: [[0,0]] Explanation: For this example, the substring in range [0,0] has a decimal value of 1, and 1 ^ 4 = 5. So, the answer is [0,0].   Constraints: 1 <= s.length <= 104 s[i] is either '0' or '1'. 1 <= queries.length <= 105 0 <= firsti, secondi <= 109",
        "1920": "You are given two strings s and t. You are allowed to remove any number of characters from the string t. The score of the string is 0 if no characters are removed from the string t, otherwise: Let left be the minimum index among all removed characters. Let right be the maximum index among all removed characters. Then the score of the string is right - left + 1. Return the minimum possible score to make t a subsequence of s. A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).   Example 1: Input: s = \"abacaba\", t = \"bzaa\" Output: 1 Explanation: In this example, we remove the character \"z\" at index 1 (0-indexed). The string t becomes \"baa\" which is a subsequence of the string \"abacaba\" and the score is 1 - 1 + 1 = 1. It can be proven that 1 is the minimum score that we can achieve. Example 2: Input: s = \"cde\", t = \"xyz\" Output: 3 Explanation: In this example, we remove characters \"x\", \"y\" and \"z\" at indices 0, 1, and 2 (0-indexed). The string t becomes \"\" which is a subsequence of the string \"cde\" and the score is 2 - 0 + 1 = 3. It can be proven that 3 is the minimum score that we can achieve.   Constraints: 1 <= s.length, t.length <= 105 s and t consist of only lowercase English letters.",
        "1921": "You are given an integer num. You know that Bob will sneakily remap one of the 10 possible digits (0 to 9) to another digit. Return the difference between the maximum and minimum values Bob can make by remapping exactly one digit in num. Notes: When Bob remaps a digit d1 to another digit d2, Bob replaces all occurrences of d1 in num with d2. Bob can remap a digit to itself, in which case num does not change. Bob can remap different digits for obtaining minimum and maximum values respectively. The resulting number after remapping can contain leading zeroes.   Example 1: Input: num = 11891 Output: 99009 Explanation:  To achieve the maximum value, Bob can remap the digit 1 to the digit 9 to yield 99899. To achieve the minimum value, Bob can remap the digit 1 to the digit 0, yielding 890. The difference between these two numbers is 99009. Example 2: Input: num = 90 Output: 99 Explanation: The maximum value that can be returned by the function is 99 (if 0 is replaced by 9) and the minimum value that can be returned by the function is 0 (if 9 is replaced by 0). Thus, we return 99.   Constraints: 1 <= num <= 108",
        "1922": "You are given an integer array nums. The low score of nums is the minimum absolute difference between any two integers. The high score of nums is the maximum absolute difference between any two integers. The score of nums is the sum of the high and low scores. Return the minimum score after changing two elements of nums.   Example 1: Input: nums = [1,4,7,8,5] Output: 3 Explanation: Change nums[0] and nums[1] to be 6 so that nums becomes [6,6,7,8,5]. The low score is the minimum absolute difference: |6 - 6| = 0. The high score is the maximum absolute difference: |8 - 5| = 3. The sum of high and low score is 3. Example 2: Input: nums = [1,4,3] Output: 0 Explanation: Change nums[1] and nums[2] to 1 so that nums becomes [1,1,1]. The sum of maximum absolute difference and minimum absolute difference is 0.   Constraints: 3 <= nums.length <= 105 1 <= nums[i] <= 109",
        "1923": "You are given a 0-indexed integer array nums. We say that an integer x is expressible from nums if there exist some integers 0 <= index1 < index2 < ... < indexk < nums.length for which nums[index1] | nums[index2] | ... | nums[indexk] = x. In other words, an integer is expressible if it can be written as the bitwise OR of some subsequence of nums. Return the minimum positive non-zero integer that is not expressible from nums.   Example 1: Input: nums = [2,1] Output: 4 Explanation: 1 and 2 are already present in the array. We know that 3 is expressible, since nums[0] | nums[1] = 2 | 1 = 3. Since 4 is not expressible, we return 4. Example 2: Input: nums = [5,3,2] Output: 1 Explanation: We can show that 1 is the smallest number that is not expressible.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109",
        "1924": "You are given two 0-indexed arrays nums1 and nums2 and a 2D array queries of queries. There are three types of queries: For a query of type 1, queries[i] = [1, l, r]. Flip the values from 0 to 1 and from 1 to 0 in nums1 from index l to index r. Both l and r are 0-indexed. For a query of type 2, queries[i] = [2, p, 0]. For every index 0 <= i < n, set nums2[i] = nums2[i] + nums1[i] * p. For a query of type 3, queries[i] = [3, 0, 0]. Find the sum of the elements in nums2. Return an array containing all the answers to the third type queries.   Example 1: Input: nums1 = [1,0,1], nums2 = [0,0,0], queries = [[1,1,1],[2,1,0],[3,0,0]] Output: [3] Explanation: After the first query nums1 becomes [1,1,1]. After the second query, nums2 becomes [1,1,1], so the answer to the third query is 3. Thus, [3] is returned. Example 2: Input: nums1 = [1], nums2 = [5], queries = [[2,0,0],[3,0,0]] Output: [5] Explanation: After the first query, nums2 remains [5], so the answer to the second query is 5. Thus, [5] is returned.   Constraints: 1 <= nums1.length,nums2.length <= 105 nums1.length = nums2.length 1 <= queries.length <= 105 queries[i].length = 3 0 <= l <= r <= nums1.length - 1 0 <= p <= 106 0 <= nums1[i] <= 1 0 <= nums2[i] <= 109",
        "1925": "You are given two 2D integer arrays nums1 and nums2. nums1[i] = [idi, vali] indicate that the number with the id idi has a value equal to vali. nums2[i] = [idi, vali] indicate that the number with the id idi has a value equal to vali. Each array contains unique ids and is sorted in ascending order by id. Merge the two arrays into one array that is sorted in ascending order by id, respecting the following conditions: Only ids that appear in at least one of the two arrays should be included in the resulting array. Each id should be included only once and its value should be the sum of the values of this id in the two arrays. If the id does not exist in one of the two arrays then its value in that array is considered to be 0. Return the resulting array. The returned array must be sorted in ascending order by id.   Example 1: Input: nums1 = [[1,2],[2,3],[4,5]], nums2 = [[1,4],[3,2],[4,1]] Output: [[1,6],[2,3],[3,2],[4,6]] Explanation: The resulting array contains the following: - id = 1, the value of this id is 2 + 4 = 6. - id = 2, the value of this id is 3. - id = 3, the value of this id is 2. - id = 4, the value of this id is 5 + 1 = 6. Example 2: Input: nums1 = [[2,4],[3,6],[5,5]], nums2 = [[1,3],[4,3]] Output: [[1,3],[2,4],[3,6],[4,3],[5,5]] Explanation: There are no common ids, so we just include each id with its value in the resulting list.   Constraints: 1 <= nums1.length, nums2.length <= 200 nums1[i].length == nums2[j].length == 2 1 <= idi, vali <= 1000 Both arrays contain unique ids. Both arrays are in strictly ascending order by id.",
        "1926": "You are given a positive integer n, you can do the following operation any number of times: Add or subtract a power of 2 from n. Return the minimum number of operations to make n equal to 0. A number x is power of 2 if x == 2i where i >= 0.   Example 1: Input: n = 39 Output: 3 Explanation: We can do the following operations: - Add 20 = 1 to n, so now n = 40. - Subtract 23 = 8 from n, so now n = 32. - Subtract 25 = 32 from n, so now n = 0. It can be shown that 3 is the minimum number of operations we need to make n equal to 0. Example 2: Input: n = 54 Output: 3 Explanation: We can do the following operations: - Add 21 = 2 to n, so now n = 56. - Add 23 = 8 to n, so now n = 64. - Subtract 26 = 64 from n, so now n = 0. So the minimum number of operations is 3.   Constraints: 1 <= n <= 105",
        "1927": "You are given a positive integer 0-indexed array nums. A subset of the array nums is square-free if the product of its elements is a square-free integer. A square-free integer is an integer that is divisible by no square number other than 1. Return the number of square-free non-empty subsets of the array nums. Since the answer may be too large, return it modulo 109 + 7. A non-empty subset of nums is an array that can be obtained by deleting some (possibly none but not all) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.   Example 1: Input: nums = [3,4,4,5] Output: 3 Explanation: There are 3 square-free subsets in this example: - The subset consisting of the 0th element [3]. The product of its elements is 3, which is a square-free integer. - The subset consisting of the 3rd element [5]. The product of its elements is 5, which is a square-free integer. - The subset consisting of 0th and 3rd elements [3,5]. The product of its elements is 15, which is a square-free integer. It can be proven that there are no more than 3 square-free subsets in the given array. Example 2: Input: nums = [1] Output: 1 Explanation: There is 1 square-free subset in this example: - The subset consisting of the 0th element [1]. The product of its elements is 1, which is a square-free integer. It can be proven that there is no more than 1 square-free subset in the given array.   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 30",
        "1928": "We define the lcp matrix of any 0-indexed string word of n lowercase English letters as an n x n grid such that: lcp[i][j] is equal to the length of the longest common prefix between the substrings word[i,n-1] and word[j,n-1]. Given an n x n matrix lcp, return the alphabetically smallest string word that corresponds to lcp. If there is no such string, return an empty string. A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"aabd\" is lexicographically smaller than \"aaca\" because the first position they differ is at the third letter, and 'b' comes before 'c'.   Example 1: Input: lcp = [[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]] Output: \"abab\" Explanation: lcp corresponds to any 4 letter string with two alternating letters. The lexicographically smallest of them is \"abab\". Example 2: Input: lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]] Output: \"aaaa\" Explanation: lcp corresponds to any 4 letter string with a single distinct letter. The lexicographically smallest of them is \"aaaa\".  Example 3: Input: lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]] Output: \"\" Explanation: lcp[3][3] cannot be equal to 3 since word[3,...,3] consists of only a single letter; Thus, no answer exists.   Constraints: 1 <= n == lcp.length == lcp[i].length <= 1000 0 <= lcp[i][j] <= n",
        "1929": "Given a 0-indexed integer array nums, find a 0-indexed integer array answer where: answer.length == nums.length. answer[i] = |leftSum[i] - rightSum[i]|. Where: leftSum[i] is the sum of elements to the left of the index i in the array nums. If there is no such element, leftSum[i] = 0. rightSum[i] is the sum of elements to the right of the index i in the array nums. If there is no such element, rightSum[i] = 0. Return the array answer.   Example 1: Input: nums = [10,4,8,3] Output: [15,1,11,22] Explanation: The array leftSum is [0,10,14,22] and the array rightSum is [15,11,3,0]. The array answer is [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22]. Example 2: Input: nums = [1] Output: [0] Explanation: The array leftSum is [0] and the array rightSum is [0]. The array answer is [|0 - 0|] = [0].   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 105",
        "1930": "You are given a 0-indexed string word of length n consisting of digits, and a positive integer m. The divisibility array div of word is an integer array of length n such that: div[i] = 1 if the numeric value of word[0,...,i] is divisible by m, or div[i] = 0 otherwise. Return the divisibility array of word.   Example 1: Input: word = \"998244353\", m = 3 Output: [1,1,0,0,0,1,1,0,0] Explanation: There are only 4 prefixes that are divisible by 3: \"9\", \"99\", \"998244\", and \"9982443\". Example 2: Input: word = \"1010\", m = 10 Output: [0,1,0,1] Explanation: There are only 2 prefixes that are divisible by 10: \"10\", and \"1010\".   Constraints: 1 <= n <= 105 word.length == n word consists of digits from 0 to 9 1 <= m <= 109",
        "1931": "You are given a 0-indexed integer array nums. Initially, all of the indices are unmarked. You are allowed to make this operation any number of times: Pick two different unmarked indices i and j such that 2 * nums[i] <= nums[j], then mark i and j. Return the maximum possible number of marked indices in nums using the above operation any number of times.   Example 1: Input: nums = [3,5,2,4] Output: 2 Explanation: In the first operation: pick i = 2 and j = 1, the operation is allowed because 2 * nums[2] <= nums[1]. Then mark index 2 and 1. It can be shown that there's no other valid operation so the answer is 2. Example 2: Input: nums = [9,2,5,4] Output: 4 Explanation: In the first operation: pick i = 3 and j = 0, the operation is allowed because 2 * nums[3] <= nums[0]. Then mark index 3 and 0. In the second operation: pick i = 1 and j = 2, the operation is allowed because 2 * nums[1] <= nums[2]. Then mark index 1 and 2. Since there is no other operation, the answer is 4. Example 3: Input: nums = [7,6,8] Output: 0 Explanation: There is no valid operation to do, so the answer is 0.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109  ",
        "1932": "You are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col]. You are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second. Return the minimum time required in which you can visit the bottom-right cell of the matrix. If you cannot visit the bottom-right cell, then return -1.   Example 1: Input: grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]] Output: 7 Explanation: One of the paths that we can take is the following: - at t = 0, we are on the cell (0,0). - at t = 1, we move to the cell (0,1). It is possible because grid[0][1] <= 1. - at t = 2, we move to the cell (1,1). It is possible because grid[1][1] <= 2. - at t = 3, we move to the cell (1,2). It is possible because grid[1][2] <= 3. - at t = 4, we move to the cell (1,1). It is possible because grid[1][1] <= 4. - at t = 5, we move to the cell (1,2). It is possible because grid[1][2] <= 5. - at t = 6, we move to the cell (1,3). It is possible because grid[1][3] <= 6. - at t = 7, we move to the cell (2,3). It is possible because grid[2][3] <= 7. The final time is 7. It can be shown that it is the minimum time possible. Example 2: Input: grid = [[0,2,4],[3,2,1],[1,0,4]] Output: -1 Explanation: There is no path from the top left to the bottom-right cell.   Constraints: m == grid.length n == grid[i].length 2 <= m, n <= 1000 4 <= m * n <= 105 0 <= grid[i][j] <= 105 grid[0][0] == 0  ",
        "1933": "Given a positive integer num, split it into two non-negative integers num1 and num2 such that: The concatenation of num1 and num2 is a permutation of num. In other words, the sum of the number of occurrences of each digit in num1 and num2 is equal to the number of occurrences of that digit in num. num1 and num2 can contain leading zeros. Return the minimum possible sum of num1 and num2. Notes: It is guaranteed that num does not contain any leading zeros. The order of occurrence of the digits in num1 and num2 may differ from the order of occurrence of num.   Example 1: Input: num = 4325 Output: 59 Explanation: We can split 4325 so that num1 is 24 and num2 is 35, giving a sum of 59. We can prove that 59 is indeed the minimal possible sum. Example 2: Input: num = 687 Output: 75 Explanation: We can split 687 so that num1 is 68 and num2 is 7, which would give an optimal sum of 75.   Constraints: 10 <= num <= 109",
        "1934": "There exists an infinitely large two-dimensional grid of uncolored unit cells. You are given a positive integer n, indicating that you must do the following routine for n minutes: At the first minute, color any arbitrary unit cell blue. Every minute thereafter, color blue every uncolored cell that touches a blue cell. Below is a pictorial representation of the state of the grid after minutes 1, 2, and 3. Return the number of colored cells at the end of n minutes.   Example 1: Input: n = 1 Output: 1 Explanation: After 1 minute, there is only 1 blue cell, so we return 1. Example 2: Input: n = 2 Output: 5 Explanation: After 2 minutes, there are 4 colored cells on the boundary and 1 in the center, so we return 5.    Constraints: 1 <= n <= 105",
        "1935": "You are given a 2D integer array ranges where ranges[i] = [starti, endi] denotes that all integers between starti and endi (both inclusive) are contained in the ith range. You are to split ranges into two (possibly empty) groups such that: Each range belongs to exactly one group. Any two overlapping ranges must belong to the same group. Two ranges are said to be overlapping if there exists at least one integer that is present in both ranges. For example, [1, 3] and [2, 5] are overlapping because 2 and 3 occur in both ranges. Return the total number of ways to split ranges into two groups. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: ranges = [[6,10],[5,15]] Output: 2 Explanation:  The two ranges are overlapping, so they must be in the same group. Thus, there are two possible ways: - Put both the ranges together in group 1. - Put both the ranges together in group 2. Example 2: Input: ranges = [[1,3],[10,20],[2,5],[4,8]] Output: 4 Explanation:  Ranges [1,3], and [2,5] are overlapping. So, they must be in the same group. Again, ranges [2,5] and [4,8] are also overlapping. So, they must also be in the same group.  Thus, there are four possible ways to group them: - All the ranges in group 1. - All the ranges in group 2. - Ranges [1,3], [2,5], and [4,8] in group 1 and [10,20] in group 2. - Ranges [1,3], [2,5], and [4,8] in group 2 and [10,20] in group 1.   Constraints: 1 <= ranges.length <= 105 ranges[i].length == 2 0 <= starti <= endi <= 109",
        "1936": "Alice has an undirected tree with n nodes labeled from 0 to n - 1. The tree is represented as a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. Alice wants Bob to find the root of the tree. She allows Bob to make several guesses about her tree. In one guess, he does the following: Chooses two distinct integers u and v such that there exists an edge [u, v] in the tree. He tells Alice that u is the parent of v in the tree. Bob's guesses are represented by a 2D integer array guesses where guesses[j] = [uj, vj] indicates Bob guessed uj to be the parent of vj. Alice being lazy, does not reply to each of Bob's guesses, but just says that at least k of his guesses are true. Given the 2D integer arrays edges, guesses and the integer k, return the number of possible nodes that can be the root of Alice's tree. If there is no such tree, return 0.   Example 1: Input: edges = [[0,1],[1,2],[1,3],[4,2]], guesses = [[1,3],[0,1],[1,0],[2,4]], k = 3 Output: 3 Explanation:  Root = 0, correct guesses = [1,3], [0,1], [2,4] Root = 1, correct guesses = [1,3], [1,0], [2,4] Root = 2, correct guesses = [1,3], [1,0], [2,4] Root = 3, correct guesses = [1,0], [2,4] Root = 4, correct guesses = [1,3], [1,0] Considering 0, 1, or 2 as root node leads to 3 correct guesses. Example 2: Input: edges = [[0,1],[1,2],[2,3],[3,4]], guesses = [[1,0],[3,4],[2,1],[3,2]], k = 1 Output: 5 Explanation:  Root = 0, correct guesses = [3,4] Root = 1, correct guesses = [1,0], [3,4] Root = 2, correct guesses = [1,0], [2,1], [3,4] Root = 3, correct guesses = [1,0], [2,1], [3,2], [3,4] Root = 4, correct guesses = [1,0], [2,1], [3,2] Considering any node as root will give at least 1 correct guess.    Constraints: edges.length == n - 1 2 <= n <= 105 1 <= guesses.length <= 105 0 <= ai, bi, uj, vj <= n - 1 ai != bi uj != vj edges represents a valid tree. guesses[j] is an edge of the tree. guesses is unique. 0 <= k <= guesses.length",
        "1937": "There are n people standing in a line labeled from 1 to n. The first person in the line is holding a pillow initially. Every second, the person holding the pillow passes it to the next person standing in the line. Once the pillow reaches the end of the line, the direction changes, and people continue passing the pillow in the opposite direction. For example, once the pillow reaches the nth person they pass it to the n - 1th person, then to the n - 2th person and so on. Given the two positive integers n and time, return the index of the person holding the pillow after time seconds.   Example 1: Input: n = 4, time = 5 Output: 2 Explanation: People pass the pillow in the following way: 1 -> 2 -> 3 -> 4 -> 3 -> 2. After five seconds, the 2nd person is holding the pillow. Example 2: Input: n = 3, time = 2 Output: 3 Explanation: People pass the pillow in the following way: 1 -> 2 -> 3. After two seconds, the 3rd person is holding the pillow.   Constraints: 2 <= n <= 1000 1 <= time <= 1000   Note: This question is the same as 3178: Find the Child Who Has the Ball After K Seconds.",
        "1938": "You are given the root of a binary tree and a positive integer k. The level sum in the tree is the sum of the values of the nodes that are on the same level. Return the kth largest level sum in the tree (not necessarily distinct). If there are fewer than k levels in the tree, return -1. Note that two nodes are on the same level if they have the same distance from the root.   Example 1: Input: root = [5,8,9,2,1,3,7,4,6], k = 2 Output: 13 Explanation: The level sums are the following: - Level 1: 5. - Level 2: 8 + 9 = 17. - Level 3: 2 + 1 + 3 + 7 = 13. - Level 4: 4 + 6 = 10. The 2nd largest level sum is 13. Example 2: Input: root = [1,2,null,3], k = 1 Output: 3 Explanation: The largest level sum is 3.   Constraints: The number of nodes in the tree is n. 2 <= n <= 105 1 <= Node.val <= 106 1 <= k <= n",
        "1939": "You are given a 0-indexed integer array nums of length n. A split at an index i where 0 <= i <= n - 2 is called valid if the product of the first i + 1 elements and the product of the remaining elements are coprime. For example, if nums = [2, 3, 3], then a split at the index i = 0 is valid because 2 and 9 are coprime, while a split at the index i = 1 is not valid because 6 and 3 are not coprime. A split at the index i = 2 is not valid because i == n - 1. Return the smallest index i at which the array can be split validly or -1 if there is no such split. Two values val1 and val2 are coprime if gcd(val1, val2) == 1 where gcd(val1, val2) is the greatest common divisor of val1 and val2.   Example 1: Input: nums = [4,7,8,15,3,5] Output: 2 Explanation: The table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i. The only valid split is at index 2. Example 2: Input: nums = [4,7,15,8,3,5] Output: -1 Explanation: The table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i. There is no valid split.   Constraints: n == nums.length 1 <= n <= 104 1 <= nums[i] <= 106",
        "1940": "There is a test that has n types of questions. You are given an integer target and a 0-indexed 2D integer array types where types[i] = [counti, marksi] indicates that there are counti questions of the ith type, and each one of them is worth marksi points. Return the number of ways you can earn exactly target points in the exam. Since the answer may be too large, return it modulo 109 + 7. Note that questions of the same type are indistinguishable. For example, if there are 3 questions of the same type, then solving the 1st and 2nd questions is the same as solving the 1st and 3rd questions, or the 2nd and 3rd questions.   Example 1: Input: target = 6, types = [[6,1],[3,2],[2,3]] Output: 7 Explanation: You can earn 6 points in one of the seven ways: - Solve 6 questions of the 0th type: 1 + 1 + 1 + 1 + 1 + 1 = 6 - Solve 4 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 1 + 2 = 6 - Solve 2 questions of the 0th type and 2 questions of the 1st type: 1 + 1 + 2 + 2 = 6 - Solve 3 questions of the 0th type and 1 question of the 2nd type: 1 + 1 + 1 + 3 = 6 - Solve 1 question of the 0th type, 1 question of the 1st type and 1 question of the 2nd type: 1 + 2 + 3 = 6 - Solve 3 questions of the 1st type: 2 + 2 + 2 = 6 - Solve 2 questions of the 2nd type: 3 + 3 = 6 Example 2: Input: target = 5, types = [[50,1],[50,2],[50,5]] Output: 4 Explanation: You can earn 5 points in one of the four ways: - Solve 5 questions of the 0th type: 1 + 1 + 1 + 1 + 1 = 5 - Solve 3 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 2 = 5 - Solve 1 questions of the 0th type and 2 questions of the 1st type: 1 + 2 + 2 = 5 - Solve 1 question of the 2nd type: 5 Example 3: Input: target = 18, types = [[6,1],[3,2],[2,3]] Output: 1 Explanation: You can only earn 18 points by answering all questions.   Constraints: 1 <= target <= 1000 n == types.length 1 <= n <= 50 types[i].length == 2 1 <= counti, marksi <= 50",
        "1941": "You are given a 0-indexed array of string words and two integers left and right. A string is called a vowel string if it starts with a vowel character and ends with a vowel character where vowel characters are 'a', 'e', 'i', 'o', and 'u'. Return the number of vowel strings words[i] where i belongs to the inclusive range [left, right].   Example 1: Input: words = [\"are\",\"amy\",\"u\"], left = 0, right = 2 Output: 2 Explanation:  - \"are\" is a vowel string because it starts with 'a' and ends with 'e'. - \"amy\" is not a vowel string because it does not end with a vowel. - \"u\" is a vowel string because it starts with 'u' and ends with 'u'. The number of vowel strings in the mentioned range is 2. Example 2: Input: words = [\"hey\",\"aeo\",\"mu\",\"ooo\",\"artro\"], left = 1, right = 4 Output: 3 Explanation:  - \"aeo\" is a vowel string because it starts with 'a' and ends with 'o'. - \"mu\" is not a vowel string because it does not start with a vowel. - \"ooo\" is a vowel string because it starts with 'o' and ends with 'o'. - \"artro\" is a vowel string because it starts with 'a' and ends with 'o'. The number of vowel strings in the mentioned range is 3.   Constraints: 1 <= words.length <= 1000 1 <= words[i].length <= 10 words[i] consists of only lowercase English letters. 0 <= left <= right < words.length",
        "1942": "You are given a 0-indexed integer array nums. You can rearrange the elements of nums to any order (including the given order). Let prefix be the array containing the prefix sums of nums after rearranging it. In other words, prefix[i] is the sum of the elements from 0 to i in nums after rearranging it. The score of nums is the number of positive integers in the array prefix. Return the maximum score you can achieve.   Example 1: Input: nums = [2,-1,0,1,-3,3,-3] Output: 6 Explanation: We can rearrange the array into nums = [2,3,1,-1,-3,0,-3]. prefix = [2,5,6,5,2,2,-1], so the score is 6. It can be shown that 6 is the maximum score we can obtain. Example 2: Input: nums = [-2,-3,0] Output: 0 Explanation: Any rearrangement of the array will result in a score of 0.   Constraints: 1 <= nums.length <= 105 -106 <= nums[i] <= 106",
        "1943": "You are given a 0-indexed integer array nums. In one operation, you can: Choose two different indices i and j such that 0 <= i, j < nums.length. Choose a non-negative integer k such that the kth bit (0-indexed) in the binary representation of nums[i] and nums[j] is 1. Subtract 2k from nums[i] and nums[j]. A subarray is beautiful if it is possible to make all of its elements equal to 0 after applying the above operation any number of times. Return the number of beautiful subarrays in the array nums. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [4,3,1,2,4] Output: 2 Explanation: There are 2 beautiful subarrays in nums: [4,3,1,2,4] and [4,3,1,2,4]. - We can make all elements in the subarray [3,1,2] equal to 0 in the following way:   - Choose [3, 1, 2] and k = 1. Subtract 21 from both numbers. The subarray becomes [1, 1, 0].   - Choose [1, 1, 0] and k = 0. Subtract 20 from both numbers. The subarray becomes [0, 0, 0]. - We can make all elements in the subarray [4,3,1,2,4] equal to 0 in the following way:   - Choose [4, 3, 1, 2, 4] and k = 2. Subtract 22 from both numbers. The subarray becomes [0, 3, 1, 2, 0].   - Choose [0, 3, 1, 2, 0] and k = 0. Subtract 20 from both numbers. The subarray becomes [0, 2, 0, 2, 0].   - Choose [0, 2, 0, 2, 0] and k = 1. Subtract 21 from both numbers. The subarray becomes [0, 0, 0, 0, 0]. Example 2: Input: nums = [1,10,4] Output: 0 Explanation: There are no beautiful subarrays in nums.   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 106",
        "1944": "There is a computer that can run an unlimited number of tasks at the same time. You are given a 2D integer array tasks where tasks[i] = [starti, endi, durationi] indicates that the ith task should run for a total of durationi seconds (not necessarily continuous) within the inclusive time range [starti, endi]. You may turn on the computer only when it needs to run a task. You can also turn it off if it is idle. Return the minimum time during which the computer should be turned on to complete all tasks.   Example 1: Input: tasks = [[2,3,1],[4,5,1],[1,5,2]] Output: 2 Explanation:  - The first task can be run in the inclusive time range [2, 2]. - The second task can be run in the inclusive time range [5, 5]. - The third task can be run in the two inclusive time ranges [2, 2] and [5, 5]. The computer will be on for a total of 2 seconds. Example 2: Input: tasks = [[1,3,2],[2,5,3],[5,6,2]] Output: 4 Explanation:  - The first task can be run in the inclusive time range [2, 3]. - The second task can be run in the inclusive time ranges [2, 3] and [5, 5]. - The third task can be run in the two inclusive time range [5, 6]. The computer will be on for a total of 4 seconds.   Constraints: 1 <= tasks.length <= 2000 tasks[i].length == 3 1 <= starti, endi <= 2000 1 <= durationi <= endi - starti + 1 ",
        "1945": "You are given an integer money denoting the amount of money (in dollars) that you have and another integer children denoting the number of children that you must distribute the money to. You have to distribute the money according to the following rules: All money must be distributed. Everyone must receive at least 1 dollar. Nobody receives 4 dollars. Return the maximum number of children who may receive exactly 8 dollars if you distribute the money according to the aforementioned rules. If there is no way to distribute the money, return -1.   Example 1: Input: money = 20, children = 3 Output: 1 Explanation:  The maximum number of children with 8 dollars will be 1. One of the ways to distribute the money is: - 8 dollars to the first child. - 9 dollars to the second child.  - 3 dollars to the third child. It can be proven that no distribution exists such that number of children getting 8 dollars is greater than 1. Example 2: Input: money = 16, children = 2 Output: 2 Explanation: Each child can be given 8 dollars.   Constraints: 1 <= money <= 200 2 <= children <= 30",
        "1946": "You are given a 0-indexed integer array nums. You are allowed to permute nums into a new array perm of your choosing. We define the greatness of nums be the number of indices 0 <= i < nums.length for which perm[i] > nums[i]. Return the maximum possible greatness you can achieve after permuting nums.   Example 1: Input: nums = [1,3,5,2,1,3,1] Output: 4 Explanation: One of the optimal rearrangements is perm = [2,5,1,3,3,1,1]. At indices = 0, 1, 3, and 4, perm[i] > nums[i]. Hence, we return 4. Example 2: Input: nums = [1,2,3,4] Output: 3 Explanation: We can prove the optimal perm is [2,3,4,1]. At indices = 0, 1, and 2, perm[i] > nums[i]. Hence, we return 3.   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109",
        "1947": "You are given an array nums consisting of positive integers. Starting with score = 0, apply the following algorithm: Choose the smallest integer of the array that is not marked. If there is a tie, choose the one with the smallest index. Add the value of the chosen integer to score. Mark the chosen element and its two adjacent elements if they exist. Repeat until all the array elements are marked. Return the score you get after applying the above algorithm.   Example 1: Input: nums = [2,1,3,4,5,2] Output: 7 Explanation: We mark the elements as follows: - 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,1,3,4,5,2]. - 2 is the smallest unmarked element, so we mark it and its left adjacent element: [2,1,3,4,5,2]. - 4 is the only remaining unmarked element, so we mark it: [2,1,3,4,5,2]. Our score is 1 + 2 + 4 = 7. Example 2: Input: nums = [2,3,5,1,3,2] Output: 5 Explanation: We mark the elements as follows: - 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,3,5,1,3,2]. - 2 is the smallest unmarked element, since there are two of them, we choose the left-most one, so we mark the one at index 0 and its right adjacent element: [2,3,5,1,3,2]. - 2 is the only remaining unmarked element, so we mark it: [2,3,5,1,3,2]. Our score is 1 + 2 + 2 = 5.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 106",
        "1948": "You are given an integer array ranks representing the ranks of some mechanics. ranksi is the rank of the ith mechanic. A mechanic with a rank r can repair n cars in r * n2 minutes. You are also given an integer cars representing the total number of cars waiting in the garage to be repaired. Return the minimum time taken to repair all the cars. Note: All the mechanics can repair the cars simultaneously.   Example 1: Input: ranks = [4,2,3,1], cars = 10 Output: 16 Explanation:  - The first mechanic will repair two cars. The time required is 4 * 2 * 2 = 16 minutes. - The second mechanic will repair two cars. The time required is 2 * 2 * 2 = 8 minutes. - The third mechanic will repair two cars. The time required is 3 * 2 * 2 = 12 minutes. - The fourth mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes. It can be proved that the cars cannot be repaired in less than 16 minutes. Example 2: Input: ranks = [5,1,8], cars = 6 Output: 16 Explanation:  - The first mechanic will repair one car. The time required is 5 * 1 * 1 = 5 minutes. - The second mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes. - The third mechanic will repair one car. The time required is 8 * 1 * 1 = 8 minutes. It can be proved that the cars cannot be repaired in less than 16 minutes.   Constraints: 1 <= ranks.length <= 105 1 <= ranks[i] <= 100 1 <= cars <= 106",
        "1949": "You are given a positive integer n. Let even denote the number of even indices in the binary representation of n with value 1. Let odd denote the number of odd indices in the binary representation of n with value 1. Note that bits are indexed from right to left in the binary representation of a number. Return the array [even, odd].   Example 1: Input: n = 50 Output: [1,2] Explanation: The binary representation of 50 is 110010. It contains 1 on indices 1, 4, and 5. Example 2: Input: n = 2 Output: [0,1] Explanation: The binary representation of 2 is 10. It contains 1 only on index 1.   Constraints: 1 <= n <= 1000",
        "1950": "There is a knight on an n x n chessboard. In a valid configuration, the knight starts at the top-left cell of the board and visits every cell on the board exactly once. You are given an n x n integer matrix grid consisting of distinct integers from the range [0, n * n - 1] where grid[row][col] indicates that the cell (row, col) is the grid[row][col]th cell that the knight visited. The moves are 0-indexed. Return true if grid represents a valid configuration of the knight's movements or false otherwise. Note that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. The figure below illustrates all the possible eight moves of a knight from some cell.   Example 1: Input: grid = [[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]] Output: true Explanation: The above diagram represents the grid. It can be shown that it is a valid configuration. Example 2: Input: grid = [[0,3,6],[5,8,1],[2,7,4]] Output: false Explanation: The above diagram represents the grid. The 8th move of the knight is not valid considering its position after the 7th move.   Constraints: n == grid.length == grid[i].length 3 <= n <= 7 0 <= grid[row][col] < n * n All integers in grid are unique.",
        "1951": "You are given an array nums of positive integers and a positive integer k. A subset of nums is beautiful if it does not contain two integers with an absolute difference equal to k. Return the number of non-empty beautiful subsets of the array nums. A subset of nums is an array that can be obtained by deleting some (possibly none) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.   Example 1: Input: nums = [2,4,6], k = 2 Output: 4 Explanation: The beautiful subsets of the array nums are: [2], [4], [6], [2, 6]. It can be proved that there are only 4 beautiful subsets in the array [2,4,6]. Example 2: Input: nums = [1], k = 1 Output: 1 Explanation: The beautiful subset of the array nums is [1]. It can be proved that there is only 1 beautiful subset in the array [1].   Constraints: 1 <= nums.length <= 20 1 <= nums[i], k <= 1000",
        "1952": "There is a bag that consists of items, each item has a number 1, 0, or -1 written on it. You are given four non-negative integers numOnes, numZeros, numNegOnes, and k. The bag initially contains: numOnes items with 1s written on them. numZeroes items with 0s written on them. numNegOnes items with -1s written on them. We want to pick exactly k items among the available items. Return the maximum possible sum of numbers written on the items.   Example 1: Input: numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2 Output: 2 Explanation: We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 2 items with 1 written on them and get a sum in a total of 2. It can be proven that 2 is the maximum possible sum. Example 2: Input: numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4 Output: 3 Explanation: We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 3 items with 1 written on them, and 1 item with 0 written on it, and get a sum in a total of 3. It can be proven that 3 is the maximum possible sum.   Constraints: 0 <= numOnes, numZeros, numNegOnes <= 50 0 <= k <= numOnes + numZeros + numNegOnes",
        "1953": "You are given an array nums consisting of positive integers. You are also given an integer array queries of size m. For the ith query, you want to make all of the elements of nums equal to queries[i]. You can perform the following operation on the array any number of times: Increase or decrease an element of the array by 1. Return an array answer of size m where answer[i] is the minimum number of operations to make all elements of nums equal to queries[i]. Note that after each query the array is reset to its original state.   Example 1: Input: nums = [3,1,6,8], queries = [1,5] Output: [14,10] Explanation: For the first query we can do the following operations: - Decrease nums[0] 2 times, so that nums = [1,1,6,8]. - Decrease nums[2] 5 times, so that nums = [1,1,1,8]. - Decrease nums[3] 7 times, so that nums = [1,1,1,1]. So the total number of operations for the first query is 2 + 5 + 7 = 14. For the second query we can do the following operations: - Increase nums[0] 2 times, so that nums = [5,1,6,8]. - Increase nums[1] 4 times, so that nums = [5,5,6,8]. - Decrease nums[2] 1 time, so that nums = [5,5,5,8]. - Decrease nums[3] 3 times, so that nums = [5,5,5,5]. So the total number of operations for the second query is 2 + 4 + 1 + 3 = 10. Example 2: Input: nums = [2,9,6,3], queries = [10] Output: [20] Explanation: We can increase each value in the array to 10. The total number of operations will be 8 + 1 + 4 + 7 = 20.   Constraints: n == nums.length m == queries.length 1 <= n, m <= 105 1 <= nums[i], queries[i] <= 109",
        "1954": "There exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. You are given an integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given an array coins of size n where coins[i] can be either 0 or 1, where 1 indicates the presence of a coin in the vertex i. Initially, you choose to start at any vertex in the tree. Then, you can perform the following operations any number of times:  Collect all the coins that are at a distance of at most 2 from the current vertex, or Move to any adjacent vertex in the tree. Find the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex. Note that if you pass an edge several times, you need to count it into the answer several times.   Example 1: Input: coins = [1,0,0,0,0,1], edges = [[0,1],[1,2],[2,3],[3,4],[4,5]] Output: 2 Explanation: Start at vertex 2, collect the coin at vertex 0, move to vertex 3, collect the coin at vertex 5 then move back to vertex 2. Example 2: Input: coins = [0,0,0,1,1,0,0,1], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]] Output: 2 Explanation: Start at vertex 0, collect the coins at vertices 4 and 3, move to vertex 2,  collect the coin at vertex 7, then move back to vertex 0.   Constraints: n == coins.length 1 <= n <= 3 * 104 0 <= coins[i] <= 1 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n ai != bi edges represents a valid tree.",
        "1955": "Given two arrays of unique digits nums1 and nums2, return the smallest number that contains at least one digit from each array.   Example 1: Input: nums1 = [4,1,3], nums2 = [5,7] Output: 15 Explanation: The number 15 contains the digit 1 from nums1 and the digit 5 from nums2. It can be proven that 15 is the smallest number we can have. Example 2: Input: nums1 = [3,5,2,6], nums2 = [3,1,7] Output: 3 Explanation: The number 3 contains the digit 3 which exists in both arrays.   Constraints: 1 <= nums1.length, nums2.length <= 9 1 <= nums1[i], nums2[i] <= 9 All digits in each array are unique.",
        "1956": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. Return the length of the shortest cycle in the graph. If no cycle exists, return -1. A cycle is a path that starts and ends at the same node, and each edge in the path is used only once.   Example 1: Input: n = 7, edges = [[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]] Output: 3 Explanation: The cycle with the smallest length is : 0 -> 1 -> 2 -> 0  Example 2: Input: n = 4, edges = [[0,1],[0,2]] Output: -1 Explanation: There are no cycles in this graph.   Constraints: 2 <= n <= 1000 1 <= edges.length <= 1000 edges[i].length == 2 0 <= ui, vi < n ui != vi There are no repeated edges.",
        "1957": "You are given a binary string s consisting only of zeroes and ones. A substring of s is considered balanced if all zeroes are before ones and the number of zeroes is equal to the number of ones inside the substring. Notice that the empty substring is considered a balanced substring. Return the length of the longest balanced substring of s. A substring is a contiguous sequence of characters within a string.   Example 1: Input: s = \"01000111\" Output: 6 Explanation: The longest balanced substring is \"000111\", which has length 6. Example 2: Input: s = \"00111\" Output: 4 Explanation: The longest balanced substring is \"0011\", which has length 4.  Example 3: Input: s = \"111\" Output: 0 Explanation: There is no balanced substring except the empty substring, so the answer is 0.   Constraints: 1 <= s.length <= 50 '0' <= s[i] <= '1'",
        "1958": "You are given an integer array nums. You need to create a 2D array from nums satisfying the following conditions: The 2D array should contain only the elements of the array nums. Each row in the 2D array contains distinct integers. The number of rows in the 2D array should be minimal. Return the resulting array. If there are multiple answers, return any of them. Note that the 2D array can have a different number of elements on each row.   Example 1: Input: nums = [1,3,4,1,2,3,1] Output: [[1,3,4,2],[1,3],[1]] Explanation: We can create a 2D array that contains the following rows: - 1,3,4,2 - 1,3 - 1 All elements of nums were used, and each row of the 2D array contains distinct integers, so it is a valid answer. It can be shown that we cannot have less than 3 rows in a valid array. Example 2: Input: nums = [1,2,3,4] Output: [[4,3,2,1]] Explanation: All elements of the array are distinct, so we can keep all of them in the first row of the 2D array.   Constraints: 1 <= nums.length <= 200 1 <= nums[i] <= nums.length",
        "1959": "There are two mice and n different types of cheese, each type of cheese should be eaten by exactly one mouse. A point of the cheese with index i (0-indexed) is: reward1[i] if the first mouse eats it. reward2[i] if the second mouse eats it. You are given a positive integer array reward1, a positive integer array reward2, and a non-negative integer k. Return the maximum points the mice can achieve if the first mouse eats exactly k types of cheese.   Example 1: Input: reward1 = [1,1,3,4], reward2 = [4,4,1,1], k = 2 Output: 15 Explanation: In this example, the first mouse eats the 2nd (0-indexed) and the 3rd types of cheese, and the second mouse eats the 0th and the 1st types of cheese. The total points are 4 + 4 + 3 + 4 = 15. It can be proven that 15 is the maximum total points that the mice can achieve. Example 2: Input: reward1 = [1,1], reward2 = [1,1], k = 2 Output: 2 Explanation: In this example, the first mouse eats the 0th (0-indexed) and 1st types of cheese, and the second mouse does not eat any cheese. The total points are 1 + 1 = 2. It can be proven that 2 is the maximum total points that the mice can achieve.   Constraints: 1 <= n == reward1.length == reward2.length <= 105 1 <= reward1[i], reward2[i] <= 1000 0 <= k <= n",
        "1960": "You are given an integer n and an integer p representing an array arr of length n where all elements are set to 0's, except position p which is set to 1. You are also given an integer array banned containing restricted positions. Perform the following operation on arr: Reverse a subarray with size k if the single 1 is not set to a position in banned. Return an integer array answer with n results where the ith result is the minimum number of operations needed to bring the single 1 to position i in arr, or -1 if it is impossible.   Example 1: Input: n = 4, p = 0, banned = [1,2], k = 4 Output: [0,-1,-1,1] Explanation: Initially 1 is placed at position 0 so the number of operations we need for position 0 is 0. We can never place 1 on the banned positions, so the answer for positions 1 and 2 is -1. Perform the operation of size 4 to reverse the whole array. After a single operation 1 is at position 3 so the answer for position 3 is 1. Example 2: Input: n = 5, p = 0, banned = [2,4], k = 3 Output: [0,-1,-1,-1,-1] Explanation: Initially 1 is placed at position 0 so the number of operations we need for position 0 is 0. We cannot perform the operation on the subarray positions [0, 2] because position 2 is in banned. Because 1 cannot be set at position 2, it is impossible to set 1 at other positions in more operations. Example 3: Input: n = 4, p = 2, banned = [0,1,3], k = 1 Output: [-1,-1,0,-1] Explanation: Perform operations of size 1 and 1 never changes its position.   Constraints: 1 <= n <= 105 0 <= p <= n - 1 0 <= banned.length <= n - 1 0 <= banned[i] <= n - 1 1 <= k <= n  banned[i] != p all values in banned are unique ",
        "1961": "You are given a 0-indexed integer array nums. There exists an array arr of length nums.length, where arr[i] is the sum of |i - j| over all j such that nums[j] == nums[i] and j != i. If there is no such j, set arr[i] to be 0. Return the array arr.   Example 1: Input: nums = [1,3,1,1,2] Output: [5,0,3,4,0] Explanation:  When i = 0, nums[0] == nums[2] and nums[0] == nums[3]. Therefore, arr[0] = |0 - 2| + |0 - 3| = 5.  When i = 1, arr[1] = 0 because there is no other index with value 3. When i = 2, nums[2] == nums[0] and nums[2] == nums[3]. Therefore, arr[2] = |2 - 0| + |2 - 3| = 3.  When i = 3, nums[3] == nums[0] and nums[3] == nums[2]. Therefore, arr[3] = |3 - 0| + |3 - 2| = 4.  When i = 4, arr[4] = 0 because there is no other index with value 2.  Example 2: Input: nums = [0,5,3] Output: [0,0,0] Explanation: Since each element in nums is distinct, arr[i] = 0 for all i.   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109   Note: This question is the same as 2121: Intervals Between Identical Elements.",
        "1962": "You are given a 0-indexed m x n integer matrix grid. Your initial position is at the top-left cell (0, 0). Starting from the cell (i, j), you can move to one of the following cells: Cells (i, k) with j < k <= grid[i][j] + j (rightward movement), or Cells (k, j) with i < k <= grid[i][j] + i (downward movement). Return the minimum number of cells you need to visit to reach the bottom-right cell (m - 1, n - 1). If there is no valid path, return -1.   Example 1: Input: grid = [[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]] Output: 4 Explanation: The image above shows one of the paths that visits exactly 4 cells. Example 2: Input: grid = [[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]] Output: 3 Explanation: The image above shows one of the paths that visits exactly 3 cells. Example 3: Input: grid = [[2,1,0],[1,0,0]] Output: -1 Explanation: It can be proven that no path exists.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 105 1 <= m * n <= 105 0 <= grid[i][j] < m * n grid[m - 1][n - 1] == 0",
        "1963": "Write a function that checks if a given value is an instance of a given class or superclass. For this problem, an object is considered an instance of a given class if that object has access to that class's methods. There are no constraints on the data types that can be passed to the function. For example, the value or the class could be undefined.   Example 1: Input: func = () => checkIfInstanceOf(new Date(), Date) Output: true Explanation: The object returned by the Date constructor is, by definition, an instance of Date. Example 2: Input: func = () => { class Animal {}; class Dog extends Animal {}; return checkIfInstanceOf(new Dog(), Animal); } Output: true Explanation: class Animal {}; class Dog extends Animal {}; checkIfInstanceOf(new Dog(), Animal); // true  Dog is a subclass of Animal. Therefore, a Dog object is an instance of both Dog and Animal. Example 3: Input: func = () => checkIfInstanceOf(Date, Date) Output: false Explanation: A date constructor cannot logically be an instance of itself. Example 4: Input: func = () => checkIfInstanceOf(5, Number) Output: true Explanation: 5 is a Number. Note that the \"instanceof\" keyword would return false. However, it is still considered an instance of Number because it accesses the Number methods. For example \"toFixed()\".",
        "1964": "Write code that enhances all arrays such that you can call the array.last() method on any array and it will return the last element. If there are no elements in the array, it should return -1. You may assume the array is the output of JSON.parse.   Example 1: Input: nums = [null, {}, 3] Output: 3 Explanation: Calling nums.last() should return the last element: 3. Example 2: Input: nums = [] Output: -1 Explanation: Because there are no elements, return -1.   Constraints: arr is a valid JSON array 0 <= arr.length <= 1000",
        "1965": "Given an integer n, return a counter function. This counter function initially returns n and then returns 1 more than the previous value every subsequent time it is called (n, n + 1, n + 2, etc).   Example 1: Input:  n = 10  [\"call\",\"call\",\"call\"] Output: [10,11,12] Explanation:  counter() = 10 // The first time counter() is called, it returns n. counter() = 11 // Returns 1 more than the previous time. counter() = 12 // Returns 1 more than the previous time. Example 2: Input:  n = -2 [\"call\",\"call\",\"call\",\"call\",\"call\"] Output: [-2,-1,0,1,2] Explanation: counter() initially returns -2. Then increases after each sebsequent call.   Constraints: -1000 <= n <= 1000 0 <= calls.length <= 1000 calls[i] === \"call\"",
        "1966": "Given a positive integer millis, write an asynchronous function that sleeps for millis milliseconds. It can resolve any value.   Example 1: Input: millis = 100 Output: 100 Explanation: It should return a promise that resolves after 100ms. let t = Date.now(); sleep(100).then(() => {   console.log(Date.now() - t); // 100 }); Example 2: Input: millis = 200 Output: 200 Explanation: It should return a promise that resolves after 200ms.   Constraints: 1 <= millis <= 1000",
        "1967": "Write a class that allows getting and setting key-value pairs, however a time until expiration is associated with each key. The class has three public methods: set(key, value, duration): accepts an integer key, an integer value, and a duration in milliseconds. Once the duration has elapsed, the key should be inaccessible. The method should return true if the same un-expired key already exists and false otherwise. Both the value and duration should be overwritten if the key already exists. get(key): if an un-expired key exists, it should return the associated value. Otherwise it should return -1. count(): returns the count of un-expired keys.   Example 1: Input:  actions = [\"TimeLimitedCache\", \"set\", \"get\", \"count\", \"get\"] values = [[], [1, 42, 100], [1], [], [1]] timeDelays = [0, 0, 50, 50, 150] Output: [null, false, 42, 1, -1] Explanation: At t=0, the cache is constructed. At t=0, a key-value pair (1: 42) is added with a time limit of 100ms. The value doesn't exist so false is returned. At t=50, key=1 is requested and the value of 42 is returned. At t=50, count() is called and there is one active key in the cache. At t=100, key=1 expires. At t=150, get(1) is called but -1 is returned because the cache is empty. Example 2: Input:  actions = [\"TimeLimitedCache\", \"set\", \"set\", \"get\", \"get\", \"get\", \"count\"] values = [[], [1, 42, 50], [1, 50, 100], [1], [1], [1], []] timeDelays = [0, 0, 40, 50, 120, 200, 250] Output: [null, false, true, 50, 50, -1, 0] Explanation: At t=0, the cache is constructed. At t=0, a key-value pair (1: 42) is added with a time limit of 50ms. The value doesn't exist so false is returned. At t=40, a key-value pair (1: 50) is added with a time limit of 100ms. A non-expired value already existed so true is returned and the old value was overwritten. At t=50, get(1) is called which returned 50. At t=120, get(1) is called which returned 50. At t=140, key=1 expires. At t=200, get(1) is called but the cache is empty so -1 is returned. At t=250, count() returns 0 because the cache is empty.   Constraints: 0 <= key, value <= 109 0 <= duration <= 1000 1 <= actions.length <= 100 actions.length === values.length actions.length === timeDelays.length 0 <= timeDelays[i] <= 1450 actions[i] is one of \"TimeLimitedCache\", \"set\", \"get\" and \"count\" First action is always \"TimeLimitedCache\" and must be executed immediately, with a 0-millisecond delay",
        "1968": "Given a function fn, return a memoized version of that function. A memoized function is a function that will never be called twice with the same inputs. Instead it will return a cached value. You can assume there are 3 possible input functions: sum, fib, and factorial. sum accepts two integers a and b and returns a + b. Assume that if a value has already been cached for the arguments (b, a) where a != b, it cannot be used for the arguments (a, b). For example, if the arguments are (3, 2) and (2, 3), two separate calls should be made. fib accepts a single integer n and returns 1 if n <= 1 or fib(n - 1) + fib(n - 2) otherwise. factorial accepts a single integer n and returns 1 if n <= 1 or factorial(n - 1) * n otherwise.   Example 1: Input: fnName = \"sum\" actions = [\"call\",\"call\",\"getCallCount\",\"call\",\"getCallCount\"] values = [[2,2],[2,2],[],[1,2],[]] Output: [4,4,1,3,2] Explanation: const sum = (a, b) => a + b; const memoizedSum = memoize(sum); memoizedSum(2, 2); // \"call\" - returns 4. sum() was called as (2, 2) was not seen before. memoizedSum(2, 2); // \"call\" - returns 4. However sum() was not called because the same inputs were seen before. // \"getCallCount\" - total call count: 1 memoizedSum(1, 2); // \"call\" - returns 3. sum() was called as (1, 2) was not seen before. // \"getCallCount\" - total call count: 2 Example 2: Input: fnName = \"factorial\" actions = [\"call\",\"call\",\"call\",\"getCallCount\",\"call\",\"getCallCount\"] values = [[2],[3],[2],[],[3],[]] Output: [2,6,2,2,6,2] Explanation: const factorial = (n) => (n <= 1) ? 1 : (n * factorial(n - 1)); const memoFactorial = memoize(factorial); memoFactorial(2); // \"call\" - returns 2. memoFactorial(3); // \"call\" - returns 6. memoFactorial(2); // \"call\" - returns 2. However factorial was not called because 2 was seen before. // \"getCallCount\" - total call count: 2 memoFactorial(3); // \"call\" - returns 6. However factorial was not called because 3 was seen before. // \"getCallCount\" - total call count: 2 Example 3: Input: fnName = \"fib\" actions = [\"call\",\"getCallCount\"] values = [[5],[]] Output: [8,1] Explanation: fib(5) = 8 // \"call\" // \"getCallCount\" - total call count: 1   Constraints: 0 <= a, b <= 105 1 <= n <= 10 0 <= actions.length <= 105 actions.length === values.length actions[i] is one of \"call\" and \"getCallCount\" fnName is one of \"sum\", \"factorial\" and \"fib\"",
        "1969": "Write code that enhances all arrays such that you can call the snail(rowsCount, colsCount) method that transforms the 1D array into a 2D array organised in the pattern known as snail traversal order. Invalid input values should output an empty array. If rowsCount * colsCount !== nums.length, the input is considered invalid. Snail traversal order starts at the top left cell with the first value of the current array. It then moves through the entire first column from top to bottom, followed by moving to the next column on the right and traversing it from bottom to top. This pattern continues, alternating the direction of traversal with each column, until the entire current array is covered. For example, when given the input array [19, 10, 3, 7, 9, 8, 5, 2, 1, 17, 16, 14, 12, 18, 6, 13, 11, 20, 4, 15] with rowsCount = 5 and colsCount = 4, the desired output matrix is shown below. Note that iterating the matrix following the arrows corresponds to the order of numbers in the original array.     Example 1: Input:  nums = [19, 10, 3, 7, 9, 8, 5, 2, 1, 17, 16, 14, 12, 18, 6, 13, 11, 20, 4, 15] rowsCount = 5 colsCount = 4 Output:  [  [19,17,16,15],  [10,1,14,4],  [3,2,12,20],  [7,5,18,11],  [9,8,6,13] ] Example 2: Input:  nums = [1,2,3,4] rowsCount = 1 colsCount = 4 Output: [[1, 2, 3, 4]] Example 3: Input:  nums = [1,3] rowsCount = 2 colsCount = 2 Output: [] Explanation: 2 multiplied by 2 is 4, and the original array [1,3] has a length of 2; therefore, the input is invalid.   Constraints: 0 <= nums.length <= 250 1 <= nums[i] <= 1000 1 <= rowsCount <= 250 1 <= colsCount <= 250  ",
        "1970": "Given a multi-dimensional array arr and a depth n, return a flattened version of that array. A multi-dimensional array is a recursive data structure that contains integers or other multi-dimensional arrays. A flattened array is a version of that array with some or all of the sub-arrays removed and replaced with the actual elements in that sub-array. This flattening operation should only be done if the current depth of nesting is less than n. The depth of the elements in the first array are considered to be 0. Please solve it without the built-in Array.flat method.   Example 1: Input arr = [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]] n = 0 Output [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]]  Explanation Passing a depth of n=0 will always result in the original array. This is because the smallest possible depth of a subarray (0) is not less than n=0. Thus, no subarray should be flattened.  Example 2: Input arr = [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]] n = 1 Output [1, 2, 3, 4, 5, 6, 7, 8, [9, 10, 11], 12, 13, 14, 15]  Explanation The subarrays starting with 4, 7, and 13 are all flattened. This is because their depth of 0 is less than 1. However [9, 10, 11] remains unflattened because its depth is 1. Example 3: Input arr = [[1, 2, 3], [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]] n = 2 Output [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]  Explanation The maximum depth of any subarray is 1. Thus, all of them are flattened.   Constraints: 0 <= count of numbers in arr <= 105 0 <= count of subarrays in arr <= 105 maxDepth <= 1000 -1000 <= each number <= 1000 0 <= n <= 1000",
        "1971": "Given an integer array nums, a reducer function fn, and an initial value init, return the final result obtained by executing the fn function on each element of the array, sequentially, passing in the return value from the calculation on the preceding element. This result is achieved through the following operations: val = fn(init, nums[0]), val = fn(val, nums[1]), val = fn(val, nums[2]), ... until every element in the array has been processed. The ultimate value of val is then returned. If the length of the array is 0, the function should return init. Please solve it without using the built-in Array.reduce method.   Example 1: Input:  nums = [1,2,3,4] fn = function sum(accum, curr) { return accum + curr; } init = 0 Output: 10 Explanation: initially, the value is init=0. (0) + nums[0] = 1 (1) + nums[1] = 3 (3) + nums[2] = 6 (6) + nums[3] = 10 The final answer is 10. Example 2: Input:  nums = [1,2,3,4] fn = function sum(accum, curr) { return accum + curr * curr; } init = 100 Output: 130 Explanation: initially, the value is init=100. (100) + nums[0] * nums[0] = 101 (101) + nums[1] * nums[1] = 105 (105) + nums[2] * nums[2] = 114 (114) + nums[3] * nums[3] = 130 The final answer is 130. Example 3: Input:  nums = [] fn = function sum(accum, curr) { return 0; } init = 25 Output: 25 Explanation: For empty arrays, the answer is always init.   Constraints: 0 <= nums.length <= 1000 0 <= nums[i] <= 1000 0 <= init <= 1000",
        "1972": "Given a function fn and a time in milliseconds t, return a debounced version of that function. A debounced function is a function whose execution is delayed by t milliseconds and whose execution is cancelled if it is called again within that window of time. The debounced function should also receive the passed parameters. For example, let's say t = 50ms, and the function was called at 30ms, 60ms, and 100ms. The first 2 function calls would be cancelled, and the 3rd function call would be executed at 150ms. If instead t = 35ms, The 1st call would be cancelled, the 2nd would be executed at 95ms, and the 3rd would be executed at 135ms. The above diagram shows how debounce will transform events. Each rectangle represents 100ms and the debounce time is 400ms. Each color represents a different set of inputs. Please solve it without using lodash's _.debounce() function.   Example 1: Input:  t = 50 calls = [   {\"t\": 50, inputs: [1]},   {\"t\": 75, inputs: [2]} ] Output: [{\"t\": 125, inputs: [2]}] Explanation: let start = Date.now(); function log(...inputs) {    console.log([Date.now() - start, inputs ]) } const dlog = debounce(log, 50); setTimeout(() => dlog(1), 50); setTimeout(() => dlog(2), 75);  The 1st call is cancelled by the 2nd call because the 2nd call occurred before 100ms The 2nd call is delayed by 50ms and executed at 125ms. The inputs were (2). Example 2: Input:  t = 20 calls = [   {\"t\": 50, inputs: [1]},   {\"t\": 100, inputs: [2]} ] Output: [{\"t\": 70, inputs: [1]}, {\"t\": 120, inputs: [2]}] Explanation: The 1st call is delayed until 70ms. The inputs were (1). The 2nd call is delayed until 120ms. The inputs were (2). Example 3: Input:  t = 150 calls = [   {\"t\": 50, inputs: [1, 2]},   {\"t\": 300, inputs: [3, 4]},   {\"t\": 300, inputs: [5, 6]} ] Output: [{\"t\": 200, inputs: [1,2]}, {\"t\": 450, inputs: [5, 6]}] Explanation: The 1st call is delayed by 150ms and ran at 200ms. The inputs were (1, 2). The 2nd call is cancelled by the 3rd call The 3rd call is delayed by 150ms and ran at 450ms. The inputs were (5, 6).   Constraints: 0 <= t <= 1000 1 <= calls.length <= 10 0 <= calls[i].t <= 1000 0 <= calls[i].inputs.length <= 10",
        "1973": "Given an array of functions [f1, f2, f3, ..., fn], return a new function fn that is the function composition of the array of functions. The function composition of [f(x), g(x), h(x)] is fn(x) = f(g(h(x))). The function composition of an empty list of functions is the identity function f(x) = x. You may assume each function in the array accepts one integer as input and returns one integer as output.   Example 1: Input: functions = [x => x + 1, x => x * x, x => 2 * x], x = 4 Output: 65 Explanation: Evaluating from right to left ... Starting with x = 4. 2 * (4) = 8 (8) * (8) = 64 (64) + 1 = 65 Example 2: Input: functions = [x => 10 * x, x => 10 * x, x => 10 * x], x = 1 Output: 1000 Explanation: Evaluating from right to left ... 10 * (1) = 10 10 * (10) = 100 10 * (100) = 1000 Example 3: Input: functions = [], x = 42 Output: 42 Explanation: The composition of zero functions is the identity function   Constraints: -1000 <= x <= 1000 0 <= functions.length <= 1000 all functions accept and return a single integer",
        "1974": "Given a function fn, return a memoized version of that function. A memoized function is a function that will never be called twice with the same inputs. Instead it will return a cached value. fn can be any function and there are no constraints on what type of values it accepts. Inputs are considered identical if they are === to each other.   Example 1: Input:  getInputs = () => [[2,2],[2,2],[1,2]] fn = function (a, b) { return a + b; } Output: [{\"val\":4,\"calls\":1},{\"val\":4,\"calls\":1},{\"val\":3,\"calls\":2}] Explanation: const inputs = getInputs(); const memoized = memoize(fn); for (const arr of inputs) {   memoized(...arr); }  For the inputs of (2, 2): 2 + 2 = 4, and it required a call to fn(). For the inputs of (2, 2): 2 + 2 = 4, but those inputs were seen before so no call to fn() was required. For the inputs of (1, 2): 1 + 2 = 3, and it required another call to fn() for a total of 2. Example 2: Input:  getInputs = () => [[{},{}],[{},{}],[{},{}]]  fn = function (a, b) { return ({...a, ...b}); } Output: [{\"val\":{},\"calls\":1},{\"val\":{},\"calls\":2},{\"val\":{},\"calls\":3}] Explanation: Merging two empty objects will always result in an empty object. It may seem like there should only be 1 call to fn() because of cache-hits, however none of those objects are === to each other. Example 3: Input:  getInputs = () => { const o = {}; return [[o,o],[o,o],[o,o]]; } fn = function (a, b) { return ({...a, ...b}); } Output: [{\"val\":{},\"calls\":1},{\"val\":{},\"calls\":1},{\"val\":{},\"calls\":1}] Explanation: Merging two empty objects will always result in an empty object. The 2nd and 3rd third function calls result in a cache-hit. This is because every object passed in is identical.   Constraints: 1 <= inputs.length <= 105 0 <= inputs.flat().length <= 105 inputs[i][j] != NaN",
        "1975": "Write code that enhances all arrays such that you can call the array.groupBy(fn) method on any array and it will return a grouped version of the array. A grouped array is an object where each key is the output of fn(arr[i]) and each value is an array containing all items in the original array which generate that key. The provided callback fn will accept an item in the array and return a string key. The order of each value list should be the order the items appear in the array. Any order of keys is acceptable. Please solve it without lodash's _.groupBy function.   Example 1: Input:  array = [   {\"id\":\"1\"},   {\"id\":\"1\"},   {\"id\":\"2\"} ],  fn = function (item) {    return item.id;  } Output:  {    \"1\": [{\"id\": \"1\"}, {\"id\": \"1\"}],      \"2\": [{\"id\": \"2\"}]  } Explanation: Output is from array.groupBy(fn). The selector function gets the \"id\" out of each item in the array. There are two objects with an \"id\" of 1. Both of those objects are put in the first array. There is one object with an \"id\" of 2. That object is put in the second array. Example 2: Input:  array = [   [1, 2, 3],   [1, 3, 5],   [1, 5, 9] ] fn = function (list) {    return String(list[0]);  } Output:  {    \"1\": [[1, 2, 3], [1, 3, 5], [1, 5, 9]]  } Explanation: The array can be of any type. In this case, the selector function defines the key as being the first element in the array.  All the arrays have 1 as their first element so they are grouped together. {   \"1\": [[1, 2, 3], [1, 3, 5], [1, 5, 9]] } Example 3: Input:  array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] fn = function (n) {    return String(n > 5); } Output: {   \"true\": [6, 7, 8, 9, 10],   \"false\": [1, 2, 3, 4, 5] } Explanation: The selector function splits the array by whether each number is greater than 5.   Constraints: 0 <= array.length <= 105 fn returns a string",
        "1976": "Given an integer array arr and a filtering function fn, return a filtered array filteredArr. The fn function takes one or two arguments: arr[i] - number from the arr i - index of arr[i] filteredArr should only contain the elements from the arr for which the expression fn(arr[i], i) evaluates to a truthy value. A truthy value is a value where Boolean(value) returns true. Please solve it without the built-in Array.filter method.   Example 1: Input: arr = [0,10,20,30], fn = function greaterThan10(n) { return n > 10; } Output: [20,30] Explanation: const newArray = filter(arr, fn); // [20, 30] The function filters out values that are not greater than 10 Example 2: Input: arr = [1,2,3], fn = function firstIndex(n, i) { return i === 0; } Output: [1] Explanation: fn can also accept the index of each element In this case, the function removes elements not at index 0 Example 3: Input: arr = [-2,-1,0,1,2], fn = function plusOne(n) { return n + 1 } Output: [-2,0,1,2] Explanation: Falsey values such as 0 should be filtered out   Constraints: 0 <= arr.length <= 1000 -109 <= arr[i] <= 109",
        "1977": "Given an integer array arr and a mapping function fn, return a new array with a transformation applied to each element. The returned array should be created such that returnedArray[i] = fn(arr[i], i). Please solve it without the built-in Array.map method.   Example 1: Input: arr = [1,2,3], fn = function plusone(n) { return n + 1; } Output: [2,3,4] Explanation: const newArray = map(arr, plusone); // [2,3,4] The function increases each value in the array by one.  Example 2: Input: arr = [1,2,3], fn = function plusI(n, i) { return n + i; } Output: [1,3,5] Explanation: The function increases each value by the index it resides in. Example 3: Input: arr = [10,20,30], fn = function constant() { return 42; } Output: [42,42,42] Explanation: The function always returns 42.   Constraints: 0 <= arr.length <= 1000 -109 <= arr[i] <= 109 fn returns a number",
        "1978": "Given an asynchronous function fn and a time t in milliseconds, return a new time limited version of the input function. fn takes arguments provided to the time limited function. The time limited function should follow these rules: If the fn completes within the time limit of t milliseconds, the time limited function should resolve with the result. If the execution of the fn exceeds the time limit, the time limited function should reject with the string \"Time Limit Exceeded\".   Example 1: Input:  fn = async (n) => {    await new Promise(res => setTimeout(res, 100));    return n * n;  } inputs = [5] t = 50 Output: {\"rejected\":\"Time Limit Exceeded\",\"time\":50} Explanation: const limited = timeLimit(fn, t) const start = performance.now() let result; try {    const res = await limited(...inputs)    result = {\"resolved\": res, \"time\": Math.floor(performance.now() - start)}; } catch (err) {    result = {\"rejected\": err, \"time\": Math.floor(performance.now() - start)}; } console.log(result) // Output  The provided function is set to resolve after 100ms. However, the time limit is set to 50ms. It rejects at t=50ms because the time limit was reached. Example 2: Input:  fn = async (n) => {    await new Promise(res => setTimeout(res, 100));    return n * n;  } inputs = [5] t = 150 Output: {\"resolved\":25,\"time\":100} Explanation: The function resolved 5 * 5 = 25 at t=100ms. The time limit is never reached. Example 3: Input:  fn = async (a, b) => {    await new Promise(res => setTimeout(res, 120));    return a + b;  } inputs = [5,10] t = 150 Output: {\"resolved\":15,\"time\":120} Explanation: The function resolved 5 + 10 = 15 at t=120ms. The time limit is never reached. Example 4: Input:  fn = async () => {    throw \"Error\"; } inputs = [] t = 1000 Output: {\"rejected\":\"Error\",\"time\":0} Explanation: The function immediately throws an error.   Constraints: 0 <= inputs.length <= 10 0 <= t <= 1000 fn returns a promise",
        "1979": "You are given a 0-indexed m x n integer matrix grid. The width of a column is the maximum length of its integers. For example, if grid = [[-10], [3], [12]], the width of the only column is 3 since -10 is of length 3. Return an integer array ans of size n where ans[i] is the width of the ith column. The length of an integer x with len digits is equal to len if x is non-negative, and len + 1 otherwise.   Example 1: Input: grid = [[1],[22],[333]] Output: [3] Explanation: In the 0th column, 333 is of length 3. Example 2: Input: grid = [[-15,1,3],[15,7,12],[5,6,-2]] Output: [3,1,2] Explanation:  In the 0th column, only -15 is of length 3. In the 1st column, all integers are of length 1.  In the 2nd column, both 12 and -2 are of length 2.   Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 100  -109 <= grid[r][c] <= 109",
        "1980": "We define the conversion array conver of an array arr as follows: conver[i] = arr[i] + max(arr[0..i]) where max(arr[0..i]) is the maximum value of arr[j] over 0 <= j <= i. We also define the score of an array arr as the sum of the values of the conversion array of arr. Given a 0-indexed integer array nums of length n, return an array ans of length n where ans[i] is the score of the prefix nums[0..i].   Example 1: Input: nums = [2,3,7,5,10] Output: [4,10,24,36,56] Explanation:  For the prefix [2], the conversion array is [4] hence the score is 4 For the prefix [2, 3], the conversion array is [4, 6] hence the score is 10 For the prefix [2, 3, 7], the conversion array is [4, 6, 14] hence the score is 24 For the prefix [2, 3, 7, 5], the conversion array is [4, 6, 14, 12] hence the score is 36 For the prefix [2, 3, 7, 5, 10], the conversion array is [4, 6, 14, 12, 20] hence the score is 56 Example 2: Input: nums = [1,1,2,4,8,16] Output: [2,4,8,16,32,64] Explanation:  For the prefix [1], the conversion array is [2] hence the score is 2 For the prefix [1, 1], the conversion array is [2, 2] hence the score is 4 For the prefix [1, 1, 2], the conversion array is [2, 2, 4] hence the score is 8 For the prefix [1, 1, 2, 4], the conversion array is [2, 2, 4, 8] hence the score is 16 For the prefix [1, 1, 2, 4, 8], the conversion array is [2, 2, 4, 8, 16] hence the score is 32 For the prefix [1, 1, 2, 4, 8, 16], the conversion array is [2, 2, 4, 8, 16, 32] hence the score is 64   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109",
        "1981": "Given the root of a binary tree, replace the value of each node in the tree with the sum of all its cousins' values. Two nodes of a binary tree are cousins if they have the same depth with different parents. Return the root of the modified tree. Note that the depth of a node is the number of edges in the path from the root node to it.   Example 1: Input: root = [5,4,9,1,10,null,7] Output: [0,0,0,7,7,null,11] Explanation: The diagram above shows the initial binary tree and the binary tree after changing the value of each node. - Node with value 5 does not have any cousins so its sum is 0. - Node with value 4 does not have any cousins so its sum is 0. - Node with value 9 does not have any cousins so its sum is 0. - Node with value 1 has a cousin with value 7 so its sum is 7. - Node with value 10 has a cousin with value 7 so its sum is 7. - Node with value 7 has cousins with values 1 and 10 so its sum is 11. Example 2: Input: root = [3,1,2] Output: [0,0,0] Explanation: The diagram above shows the initial binary tree and the binary tree after changing the value of each node. - Node with value 3 does not have any cousins so its sum is 0. - Node with value 1 does not have any cousins so its sum is 0. - Node with value 2 does not have any cousins so its sum is 0.   Constraints: The number of nodes in the tree is in the range [1, 105]. 1 <= Node.val <= 104",
        "1982": "There is a directed weighted graph that consists of n nodes numbered from 0 to n - 1. The edges of the graph are initially represented by the given array edges where edges[i] = [fromi, toi, edgeCosti] meaning that there is an edge from fromi to toi with the cost edgeCosti. Implement the Graph class: Graph(int n, int[][] edges) initializes the object with n nodes and the given edges. addEdge(int[] edge) adds an edge to the list of edges where edge = [from, to, edgeCost]. It is guaranteed that there is no edge between the two nodes before adding this one. int shortestPath(int node1, int node2) returns the minimum cost of a path from node1 to node2. If no path exists, return -1. The cost of a path is the sum of the costs of the edges in the path.   Example 1: Input [\"Graph\", \"shortestPath\", \"shortestPath\", \"addEdge\", \"shortestPath\"] [[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1, 3, 4]], [0, 3]] Output [null, 6, -1, null, 6]  Explanation Graph g = new Graph(4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]); g.shortestPath(3, 2); // return 6. The shortest path from 3 to 2 in the first diagram above is 3 -> 0 -> 1 -> 2 with a total cost of 3 + 2 + 1 = 6. g.shortestPath(0, 3); // return -1. There is no path from 0 to 3. g.addEdge([1, 3, 4]); // We add an edge from node 1 to node 3, and we get the second diagram above. g.shortestPath(0, 3); // return 6. The shortest path from 0 to 3 now is 0 -> 1 -> 3 with a total cost of 2 + 4 = 6.   Constraints: 1 <= n <= 100 0 <= edges.length <= n * (n - 1) edges[i].length == edge.length == 3 0 <= fromi, toi, from, to, node1, node2 <= n - 1 1 <= edgeCosti, edgeCost <= 106 There are no repeated edges and no self-loops in the graph at any point. At most 100 calls will be made for addEdge. At most 100 calls will be made for shortestPath.",
        "1983": "Given a m x n binary matrix mat, find the 0-indexed position of the row that contains the maximum count of ones, and the number of ones in that row. In case there are multiple rows that have the maximum count of ones, the row with the smallest row number should be selected. Return an array containing the index of the row, and the number of ones in it.   Example 1: Input: mat = [[0,1],[1,0]] Output: [0,1] Explanation: Both rows have the same number of 1's. So we return the index of the smaller row, 0, and the maximum count of ones (1). So, the answer is [0,1].  Example 2: Input: mat = [[0,0,0],[0,1,1]] Output: [1,2] Explanation: The row indexed 1 has the maximum count of ones (2). So we return its index, 1, and the count. So, the answer is [1,2]. Example 3: Input: mat = [[0,0],[1,1],[0,0]] Output: [1,2] Explanation: The row indexed 1 has the maximum count of ones (2). So the answer is [1,2].   Constraints: m == mat.length  n == mat[i].length  1 <= m, n <= 100  mat[i][j] is either 0 or 1.",
        "1984": "You are given two integer arrays nums and divisors. The divisibility score of divisors[i] is the number of indices j such that nums[j] is divisible by divisors[i]. Return the integer divisors[i] with the maximum divisibility score. If multiple integers have the maximum score, return the smallest one.   Example 1: Input: nums = [2,9,15,50], divisors = [5,3,7,2] Output: 2 Explanation: The divisibility score of divisors[0] is 2 since nums[2] and nums[3] are divisible by 5. The divisibility score of divisors[1] is 2 since nums[1] and nums[2] are divisible by 3. The divisibility score of divisors[2] is 0 since none of the numbers in nums is divisible by 7. The divisibility score of divisors[3] is 2 since nums[0] and nums[3] are divisible by 2. As divisors[0], divisors[1], and divisors[3] have the same divisibility score, we return the smaller one which is divisors[3]. Example 2: Input: nums = [4,7,9,3,9], divisors = [5,2,3] Output: 3 Explanation: The divisibility score of divisors[0] is 0 since none of numbers in nums is divisible by 5. The divisibility score of divisors[1] is 1 since only nums[0] is divisible by 2. The divisibility score of divisors[2] is 3 since nums[2], nums[3] and nums[4] are divisible by 3. Example 3: Input: nums = [20,14,21,10], divisors = [10,16,20] Output: 10 Explanation: The divisibility score of divisors[0] is 2 since nums[0] and nums[3] are divisible by 10. The divisibility score of divisors[1] is 0 since none of the numbers in nums is divisible by 16. The divisibility score of divisors[2] is 1 since nums[0] is divisible by 20.   Constraints: 1 <= nums.length, divisors.length <= 1000 1 <= nums[i], divisors[i] <= 109",
        "1985": "Given a string word to which you can insert letters \"a\", \"b\" or \"c\" anywhere and any number of times, return the minimum number of letters that must be inserted so that word becomes valid. A string is called valid if it can be formed by concatenating the string \"abc\" several times.   Example 1: Input: word = \"b\" Output: 2 Explanation: Insert the letter \"a\" right before \"b\", and the letter \"c\" right next to \"b\" to obtain the valid string \"abc\". Example 2: Input: word = \"aaa\" Output: 6 Explanation: Insert letters \"b\" and \"c\" next to each \"a\" to obtain the valid string \"abcabcabc\". Example 3: Input: word = \"abc\" Output: 0 Explanation: word is already valid. No modifications are needed.    Constraints: 1 <= word.length <= 50 word consists of letters \"a\", \"b\" and \"c\" only. ",
        "1986": "There exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. Each node has an associated price. You are given an integer array price, where price[i] is the price of the ith node. The price sum of a given path is the sum of the prices of all nodes lying on that path. Additionally, you are given a 2D integer array trips, where trips[i] = [starti, endi] indicates that you start the ith trip from the node starti and travel to the node endi by any path you like. Before performing your first trip, you can choose some non-adjacent nodes and halve the prices. Return the minimum total price sum to perform all the given trips.   Example 1: Input: n = 4, edges = [[0,1],[1,2],[1,3]], price = [2,2,10,6], trips = [[0,3],[2,1],[2,3]] Output: 23 Explanation: The diagram above denotes the tree after rooting it at node 2. The first part shows the initial tree and the second part shows the tree after choosing nodes 0, 2, and 3, and making their price half. For the 1st trip, we choose path [0,1,3]. The price sum of that path is 1 + 2 + 3 = 6. For the 2nd trip, we choose path [2,1]. The price sum of that path is 2 + 5 = 7. For the 3rd trip, we choose path [2,1,3]. The price sum of that path is 5 + 2 + 3 = 10. The total price sum of all trips is 6 + 7 + 10 = 23. It can be proven, that 23 is the minimum answer that we can achieve. Example 2: Input: n = 2, edges = [[0,1]], price = [2,2], trips = [[0,0]] Output: 1 Explanation: The diagram above denotes the tree after rooting it at node 0. The first part shows the initial tree and the second part shows the tree after choosing node 0, and making its price half. For the 1st trip, we choose path [0]. The price sum of that path is 1. The total price sum of all trips is 1. It can be proven, that 1 is the minimum answer that we can achieve.   Constraints: 1 <= n <= 50 edges.length == n - 1 0 <= ai, bi <= n - 1 edges represents a valid tree. price.length == n price[i] is an even integer. 1 <= price[i] <= 1000 1 <= trips.length <= 100 0 <= starti, endi <= n - 1",
        "1987": "Write a generator function that returns a generator object which yields the fibonacci sequence. The fibonacci sequence is defined by the relation Xn = Xn-1 + Xn-2. The first few numbers of the series are 0, 1, 1, 2, 3, 5, 8, 13.   Example 1: Input: callCount = 5 Output: [0,1,1,2,3] Explanation: const gen = fibGenerator(); gen.next().value; // 0 gen.next().value; // 1 gen.next().value; // 1 gen.next().value; // 2 gen.next().value; // 3 Example 2: Input: callCount = 0 Output: [] Explanation: gen.next() is never called so nothing is outputted   Constraints: 0 <= callCount <= 50",
        "1988": "Sometimes you have a long running task, and you may wish to cancel it before it completes. To help with this goal, write a function cancellable that accepts a generator object and returns an array of two values: a cancel function and a promise. You may assume the generator function will only yield promises. It is your function's responsibility to pass the values resolved by the promise back to the generator. If the promise rejects, your function should throw that error back to the generator. If the cancel callback is called before the generator is done, your function should throw an error back to the generator. That error should be the string \"Cancelled\" (Not an Error object). If the error was caught, the returned promise should resolve with the next value that was yielded or returned. Otherwise, the promise should reject with the thrown error. No more code should be executed. When the generator is done, the promise your function returned should resolve the value the generator returned. If, however, the generator throws an error, the returned promise should reject with the error. An example of how your code would be used: function* tasks() {   const val = yield new Promise(resolve => resolve(2 + 2));   yield new Promise(resolve => setTimeout(resolve, 100));   return val + 1; // calculation shouldn't be done. } const [cancel, promise] = cancellable(tasks()); setTimeout(cancel, 50); promise.catch(console.log); // logs \"Cancelled\" at t=50ms If instead cancel() was not called or was called after t=100ms, the promise would have resolved 5.   Example 1: Input:  generatorFunction = function*() {    return 42;  } cancelledAt = 100 Output: {\"resolved\": 42} Explanation: const generator = generatorFunction(); const [cancel, promise] = cancellable(generator); setTimeout(cancel, 100); promise.then(console.log); // resolves 42 at t=0ms  The generator immediately yields 42 and finishes. Because of that, the returned promise immediately resolves 42. Note that cancelling a finished generator does nothing. Example 2: Input: generatorFunction = function*() {    const msg = yield new Promise(res => res(\"Hello\"));    throw `Error: ${msg}`;  } cancelledAt = null Output: {\"rejected\": \"Error: Hello\"} Explanation: A promise is yielded. The function handles this by waiting for it to resolve and then passes the resolved value back to the generator. Then an error is thrown which has the effect of causing the promise to reject with the same thrown error. Example 3: Input:  generatorFunction = function*() {    yield new Promise(res => setTimeout(res, 200));    return \"Success\";  } cancelledAt = 100 Output: {\"rejected\": \"Cancelled\"} Explanation: While the function is waiting for the yielded promise to resolve, cancel() is called. This causes an error message to be sent back to the generator. Since this error is uncaught, the returned promise rejected with this error. Example 4: Input: generatorFunction = function*() {    let result = 0;    yield new Promise(res => setTimeout(res, 100));   result += yield new Promise(res => res(1));    yield new Promise(res => setTimeout(res, 100));    result += yield new Promise(res => res(1));    return result; } cancelledAt = null Output: {\"resolved\": 2} Explanation: 4 promises are yielded. Two of those promises have their values added to the result. After 200ms, the generator finishes with a value of 2, and that value is resolved by the returned promise. Example 5: Input:  generatorFunction = function*() {    let result = 0;    try {      yield new Promise(res => setTimeout(res, 100));      result += yield new Promise(res => res(1));      yield new Promise(res => setTimeout(res, 100));      result += yield new Promise(res => res(1));    } catch(e) {      return result;    }    return result;  } cancelledAt = 150 Output: {\"resolved\": 1} Explanation: The first two yielded promises resolve and cause the result to increment. However, at t=150ms, the generator is cancelled. The error sent to the generator is caught and the result is returned and finally resolved by the returned promise. Example 6: Input:  generatorFunction = function*() {    try {      yield new Promise((resolve, reject) => reject(\"Promise Rejected\"));    } catch(e) {      let a = yield new Promise(resolve => resolve(2));     let b = yield new Promise(resolve => resolve(2));      return a + b;    };  } cancelledAt = null Output: {\"resolved\": 4} Explanation: The first yielded promise immediately rejects. This error is caught. Because the generator hasn't been cancelled, execution continues as usual. It ends up resolving 2 + 2 = 4.   Constraints: cancelledAt == null or 0 <= cancelledAt <= 1000 generatorFunction returns a generator object",
        "1989": "You are given a positive integer arrivalTime denoting the arrival time of a train in hours, and another positive integer delayedTime denoting the amount of delay in hours. Return the time when the train will arrive at the station. Note that the time in this problem is in 24-hours format.   Example 1: Input: arrivalTime = 15, delayedTime = 5  Output: 20  Explanation: Arrival time of the train was 15:00 hours. It is delayed by 5 hours. Now it will reach at 15+5 = 20 (20:00 hours). Example 2: Input: arrivalTime = 13, delayedTime = 11 Output: 0 Explanation: Arrival time of the train was 13:00 hours. It is delayed by 11 hours. Now it will reach at 13+11=24 (Which is denoted by 00:00 in 24 hours format so return 0).   Constraints: 1 <= arrivaltime < 24 1 <= delayedTime <= 24",
        "1990": "Given a positive integer n, find the sum of all integers in the range [1, n] inclusive that are divisible by 3, 5, or 7. Return an integer denoting the sum of all numbers in the given range satisfying the constraint.   Example 1: Input: n = 7 Output: 21 Explanation: Numbers in the range [1, 7] that are divisible by 3, 5, or 7 are 3, 5, 6, 7. The sum of these numbers is 21. Example 2: Input: n = 10 Output: 40 Explanation: Numbers in the range [1, 10] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9, 10. The sum of these numbers is 40. Example 3: Input: n = 9 Output: 30 Explanation: Numbers in the range [1, 9] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9. The sum of these numbers is 30.   Constraints: 1 <= n <= 103",
        "1991": "Given an integer array nums containing n integers, find the beauty of each subarray of size k. The beauty of a subarray is the xth smallest integer in the subarray if it is negative, or 0 if there are fewer than x negative integers. Return an integer array containing n - k + 1 integers, which denote the beauty of the subarrays in order from the first index in the array. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [1,-1,-3,-2,3], k = 3, x = 2 Output: [-1,-2,-2] Explanation: There are 3 subarrays with size k = 3.  The first subarray is [1, -1, -3] and the 2nd smallest negative integer is -1.  The second subarray is [-1, -3, -2] and the 2nd smallest negative integer is -2.  The third subarray is [-3, -2, 3] and the 2nd smallest negative integer is -2. Example 2: Input: nums = [-1,-2,-3,-4,-5], k = 2, x = 2 Output: [-1,-2,-3,-4] Explanation: There are 4 subarrays with size k = 2. For [-1, -2], the 2nd smallest negative integer is -1. For [-2, -3], the 2nd smallest negative integer is -2. For [-3, -4], the 2nd smallest negative integer is -3. For [-4, -5], the 2nd smallest negative integer is -4.  Example 3: Input: nums = [-3,1,2,-3,0,-3], k = 2, x = 1 Output: [-3,0,-3,-3,-3] Explanation: There are 5 subarrays with size k = 2. For [-3, 1], the 1st smallest negative integer is -3. For [1, 2], there is no negative integer so the beauty is 0. For [2, -3], the 1st smallest negative integer is -3. For [-3, 0], the 1st smallest negative integer is -3. For [0, -3], the 1st smallest negative integer is -3.   Constraints: n == nums.length  1 <= n <= 105 1 <= k <= n 1 <= x <= k  -50 <= nums[i] <= 50 ",
        "1992": "You are given a 0-indexed array nums consisiting of positive integers. You can do the following operation on the array any number of times: Select an index i such that 0 <= i < n - 1 and replace either of nums[i] or nums[i+1] with their gcd value. Return the minimum number of operations to make all elements of nums equal to 1. If it is impossible, return -1. The gcd of two integers is the greatest common divisor of the two integers.   Example 1: Input: nums = [2,6,3,4] Output: 4 Explanation: We can do the following operations: - Choose index i = 2 and replace nums[2] with gcd(3,4) = 1. Now we have nums = [2,6,1,4]. - Choose index i = 1 and replace nums[1] with gcd(6,1) = 1. Now we have nums = [2,1,1,4]. - Choose index i = 0 and replace nums[0] with gcd(2,1) = 1. Now we have nums = [1,1,1,4]. - Choose index i = 2 and replace nums[3] with gcd(1,4) = 1. Now we have nums = [1,1,1,1]. Example 2: Input: nums = [2,10,6,14] Output: -1 Explanation: It can be shown that it is impossible to make all the elements equal to 1.   Constraints: 2 <= nums.length <= 50 1 <= nums[i] <= 106",
        "1993": "You are given a 0-indexed integer array nums and an integer k. Your task is to perform the following operation exactly k times in order to maximize your score: Select an element m from nums. Remove the selected element m from the array. Add a new element with a value of m + 1 to the array. Increase your score by m. Return the maximum score you can achieve after performing the operation exactly k times.   Example 1: Input: nums = [1,2,3,4,5], k = 3 Output: 18 Explanation: We need to choose exactly 3 elements from nums to maximize the sum. For the first iteration, we choose 5. Then sum is 5 and nums = [1,2,3,4,6] For the second iteration, we choose 6. Then sum is 5 + 6 and nums = [1,2,3,4,7] For the third iteration, we choose 7. Then sum is 5 + 6 + 7 = 18 and nums = [1,2,3,4,8] So, we will return 18. It can be proven, that 18 is the maximum answer that we can achieve. Example 2: Input: nums = [5,5,5], k = 2 Output: 11 Explanation: We need to choose exactly 2 elements from nums to maximize the sum. For the first iteration, we choose 5. Then sum is 5 and nums = [5,5,6] For the second iteration, we choose 6. Then sum is 5 + 6 = 11 and nums = [5,5,7] So, we will return 11. It can be proven, that 11 is the maximum answer that we can achieve.   Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100 1 <= k <= 100  ",
        "1994": "You are given two 0-indexed integer permutations A and B of length n. A prefix common array of A and B is an array C such that C[i] is equal to the count of numbers that are present at or before the index i in both A and B. Return the prefix common array of A and B. A sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once.   Example 1: Input: A = [1,3,2,4], B = [3,1,2,4] Output: [0,2,3,4] Explanation: At i = 0: no number is common, so C[0] = 0. At i = 1: 1 and 3 are common in A and B, so C[1] = 2. At i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3. At i = 3: 1, 2, 3, and 4 are common in A and B, so C[3] = 4. Example 2: Input: A = [2,3,1], B = [3,1,2] Output: [0,1,3] Explanation: At i = 0: no number is common, so C[0] = 0. At i = 1: only 3 is common in A and B, so C[1] = 1. At i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3.   Constraints: 1 <= A.length == B.length == n <= 50 1 <= A[i], B[i] <= n It is guaranteed that A and B are both a permutation of n integers.",
        "1995": "You are given a 0-indexed 2D matrix grid of size m x n, where (r, c) represents: A land cell if grid[r][c] = 0, or A water cell containing grid[r][c] fish, if grid[r][c] > 0. A fisher can start at any water cell (r, c) and can do the following operations any number of times: Catch all the fish at cell (r, c), or Move to any adjacent water cell. Return the maximum number of fish the fisher can catch if he chooses his starting cell optimally, or 0 if no water cell exists. An adjacent cell of the cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) or (r - 1, c) if it exists.   Example 1: Input: grid = [[0,2,1,0],[4,0,0,3],[1,0,0,4],[0,3,2,0]] Output: 7 Explanation: The fisher can start at cell (1,3) and collect 3 fish, then move to cell (2,3) and collect 4 fish. Example 2: Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1]] Output: 1 Explanation: The fisher can start at cells (0,0) or (3,3) and collect a single fish.    Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 10 0 <= grid[i][j] <= 10",
        "1996": "You are given an integer array nums containing distinct numbers, and you can perform the following operations until the array is empty: If the first element has the smallest value, remove it Otherwise, put the first element at the end of the array. Return an integer denoting the number of operations it takes to make nums empty.   Example 1: Input: nums = [3,4,-1] Output: 5 Operation Array 1 [4, -1, 3] 2 [-1, 3, 4] 3 [3, 4] 4 [4] 5 [] Example 2: Input: nums = [1,2,4,3] Output: 5 Operation Array 1 [2, 4, 3] 2 [4, 3] 3 [3, 4] 4 [4] 5 [] Example 3: Input: nums = [1,2,3] Output: 3 Operation Array 1 [2, 3] 2 [3] 3 []   Constraints: 1 <= nums.length <= 105 -109 <= nums[i] <= 109 All values in nums are distinct.",
        "1997": "You are given two 0-indexed integer arrays player1 and player2, representing the number of pins that player 1 and player 2 hit in a bowling game, respectively. The bowling game consists of n turns, and the number of pins in each turn is exactly 10. Assume a player hits xi pins in the ith turn. The value of the ith turn for the player is: 2xi if the player hits 10 pins in either (i - 1)th or (i - 2)th turn. Otherwise, it is xi. The score of the player is the sum of the values of their n turns. Return 1 if the score of player 1 is more than the score of player 2, 2 if the score of player 2 is more than the score of player 1, and 0 in case of a draw.   Example 1: Input: player1 = [5,10,3,2], player2 = [6,5,7,3] Output: 1 Explanation: The score of player 1 is 5 + 10 + 2*3 + 2*2 = 25. The score of player 2 is 6 + 5 + 7 + 3 = 21. Example 2: Input: player1 = [3,5,7,6], player2 = [8,10,10,2] Output: 2 Explanation: The score of player 1 is 3 + 5 + 7 + 6 = 21. The score of player 2 is 8 + 10 + 2*10 + 2*2 = 42. Example 3: Input: player1 = [2,3], player2 = [4,1] Output: 0 Explanation: The score of player1 is 2 + 3 = 5. The score of player2 is 4 + 1 = 5. Example 4: Input: player1 = [1,1,1,10,10,10,10], player2 = [10,10,10,10,1,1,1] Output: 2 Explanation: The score of player1 is 1 + 1 + 1 + 10 + 2*10 + 2*10 + 2*10 = 73. The score of player2 is 10 + 2*10 + 2*10 + 2*10 + 2*1 + 2*1 + 1 = 75.   Constraints: n == player1.length == player2.length 1 <= n <= 1000 0 <= player1[i], player2[i] <= 10",
        "1998": "You are given a 0-indexed integer array arr, and an m x n integer matrix mat. arr and mat both contain all the integers in the range [1, m * n]. Go through each index i in arr starting from index 0 and paint the cell in mat containing the integer arr[i]. Return the smallest index i at which either a row or a column will be completely painted in mat.   Example 1: Input: arr = [1,3,4,2], mat = [[1,4],[2,3]] Output: 2 Explanation: The moves are shown in order, and both the first row and second column of the matrix become fully painted at arr[2]. Example 2: Input: arr = [2,8,7,4,1,3,5,6,9], mat = [[3,2,5],[1,4,6],[8,7,9]] Output: 3 Explanation: The second column becomes fully painted at arr[3].   Constraints: m == mat.length n = mat[i].length arr.length == m * n 1 <= m, n <= 105 1 <= m * n <= 105 1 <= arr[i], mat[r][c] <= m * n All the integers of arr are unique. All the integers of mat are unique.",
        "1999": "You are given an array start where start = [startX, startY] represents your initial position (startX, startY) in a 2D space. You are also given the array target where target = [targetX, targetY] represents your target position (targetX, targetY). The cost of going from a position (x1, y1) to any other position in the space (x2, y2) is |x2 - x1| + |y2 - y1|. There are also some special roads. You are given a 2D array specialRoads where specialRoads[i] = [x1i, y1i, x2i, y2i, costi] indicates that the ith special road goes in one direction from (x1i, y1i) to (x2i, y2i) with a cost equal to costi. You can use each special road any number of times. Return the minimum cost required to go from (startX, startY) to (targetX, targetY).   Example 1: Input: start = [1,1], target = [4,5], specialRoads = [[1,2,3,3,2],[3,4,4,5,1]] Output: 5 Explanation: (1,1) to (1,2) with a cost of |1 - 1| + |2 - 1| = 1. (1,2) to (3,3). Use specialRoads[0] with the cost 2. (3,3) to (3,4) with a cost of |3 - 3| + |4 - 3| = 1. (3,4) to (4,5). Use specialRoads[1] with the cost 1. So the total cost is 1 + 2 + 1 + 1 = 5. Example 2: Input: start = [3,2], target = [5,7], specialRoads = [[5,7,3,2,1],[3,2,3,4,4],[3,3,5,5,5],[3,4,5,6,6]] Output: 7 Explanation: It is optimal not to use any special edges and go directly from the starting to the ending position with a cost |5 - 3| + |7 - 2| = 7. Note that the specialRoads[0] is directed from (5,7) to (3,2). Example 3: Input: start = [1,1], target = [10,4], specialRoads = [[4,2,1,1,3],[1,2,7,4,4],[10,3,6,1,2],[6,1,1,2,3]] Output: 8 Explanation: (1,1) to (1,2) with a cost of |1 - 1| + |2 - 1| = 1. (1,2) to (7,4). Use specialRoads[1] with the cost 4. (7,4) to (10,4) with a cost of |10 - 7| + |4 - 4| = 3.   Constraints: start.length == target.length == 2 1 <= startX <= targetX <= 105 1 <= startY <= targetY <= 105 1 <= specialRoads.length <= 200 specialRoads[i].length == 5 startX <= x1i, x2i <= targetX startY <= y1i, y2i <= targetY 1 <= costi <= 105",
        "2000": "A string is beautiful if: It consists of the first k letters of the English lowercase alphabet. It does not contain any substring of length 2 or more which is a palindrome. You are given a beautiful string s of length n and a positive integer k. Return the lexicographically smallest string of length n, which is larger than s and is beautiful. If there is no such string, return an empty string. A string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. For example, \"abcd\" is lexicographically larger than \"abcc\" because the first position they differ is at the fourth character, and d is greater than c.   Example 1: Input: s = \"abcz\", k = 26 Output: \"abda\" Explanation: The string \"abda\" is beautiful and lexicographically larger than the string \"abcz\". It can be proven that there is no string that is lexicographically larger than the string \"abcz\", beautiful, and lexicographically smaller than the string \"abda\". Example 2: Input: s = \"dc\", k = 4 Output: \"\" Explanation: It can be proven that there is no string that is lexicographically larger than the string \"dc\" and is beautiful.   Constraints: 1 <= n == s.length <= 105 4 <= k <= 26 s is a beautiful string.",
        "2001": "Write a function createCounter. It should accept an initial integer init. It should return an object with three functions. The three functions are: increment() increases the current value by 1 and then returns it. decrement() reduces the current value by 1 and then returns it. reset() sets the current value to init and then returns it.   Example 1: Input: init = 5, calls = [\"increment\",\"reset\",\"decrement\"] Output: [6,5,4] Explanation: const counter = createCounter(5); counter.increment(); // 6 counter.reset(); // 5 counter.decrement(); // 4 Example 2: Input: init = 0, calls = [\"increment\",\"increment\",\"decrement\",\"reset\",\"reset\"] Output: [1,2,1,0,0] Explanation: const counter = createCounter(0); counter.increment(); // 1 counter.increment(); // 2 counter.decrement(); // 1 counter.reset(); // 0 counter.reset(); // 0   Constraints: -1000 <= init <= 1000 0 <= calls.length <= 1000 calls[i] is one of \"increment\", \"decrement\" and \"reset\"",
        "2002": "Given a function fn, return a new function that is identical to the original function except that it ensures fn is called at most once. The first time the returned function is called, it should return the same result as fn. Every subsequent time it is called, it should return undefined.   Example 1: Input: fn = (a,b,c) => (a + b + c), calls = [[1,2,3],[2,3,6]] Output: [{\"calls\":1,\"value\":6}] Explanation: const onceFn = once(fn); onceFn(1, 2, 3); // 6 onceFn(2, 3, 6); // undefined, fn was not called Example 2: Input: fn = (a,b,c) => (a * b * c), calls = [[5,7,4],[2,3,6],[4,6,8]] Output: [{\"calls\":1,\"value\":140}] Explanation: const onceFn = once(fn); onceFn(5, 7, 4); // 140 onceFn(2, 3, 6); // undefined, fn was not called onceFn(4, 6, 8); // undefined, fn was not called   Constraints: calls is a valid JSON array 1 <= calls.length <= 10 1 <= calls[i].length <= 100 2 <= JSON.stringify(calls).length <= 1000",
        "2003": "Write a function createHelloWorld. It should return a new function that always returns \"Hello World\".   Example 1: Input: args = [] Output: \"Hello World\" Explanation: const f = createHelloWorld(); f(); // \"Hello World\"  The function returned by createHelloWorld should always return \"Hello World\". Example 2: Input: args = [{},null,42] Output: \"Hello World\" Explanation: const f = createHelloWorld(); f({}, null, 42); // \"Hello World\"  Any arguments could be passed to the function but it should still always return \"Hello World\".   Constraints: 0 <= args.length <= 10",
        "2004": "You are given a 0-indexed array nums of length n. The distinct difference array of nums is an array diff of length n such that diff[i] is equal to the number of distinct elements in the suffix nums[i + 1, ..., n - 1] subtracted from the number of distinct elements in the prefix nums[0, ..., i]. Return the distinct difference array of nums. Note that nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j inclusive. Particularly, if i > j then nums[i, ..., j] denotes an empty subarray.   Example 1: Input: nums = [1,2,3,4,5] Output: [-3,-1,1,3,5] Explanation: For index i = 0, there is 1 element in the prefix and 4 distinct elements in the suffix. Thus, diff[0] = 1 - 4 = -3. For index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1. For index i = 2, there are 3 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 3 - 2 = 1. For index i = 3, there are 4 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 4 - 1 = 3. For index i = 4, there are 5 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 5 - 0 = 5. Example 2: Input: nums = [3,2,3,4,2] Output: [-2,-1,0,2,3] Explanation: For index i = 0, there is 1 element in the prefix and 3 distinct elements in the suffix. Thus, diff[0] = 1 - 3 = -2. For index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1. For index i = 2, there are 2 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 2 - 2 = 0. For index i = 3, there are 3 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 3 - 1 = 2. For index i = 4, there are 3 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 3 - 0 = 3.   Constraints: 1 <= n == nums.length <= 50 1 <= nums[i] <= 50",
        "2005": "Design a data structure that keeps track of the values in it and answers some queries regarding their frequencies. Implement the FrequencyTracker class. FrequencyTracker(): Initializes the FrequencyTracker object with an empty array initially. void add(int number): Adds number to the data structure. void deleteOne(int number): Deletes one occurrence of number from the data structure. The data structure may not contain number, and in this case nothing is deleted. bool hasFrequency(int frequency): Returns true if there is a number in the data structure that occurs frequency number of times, otherwise, it returns false.   Example 1: Input [\"FrequencyTracker\", \"add\", \"add\", \"hasFrequency\"] [[], [3], [3], [2]] Output [null, null, null, true]  Explanation FrequencyTracker frequencyTracker = new FrequencyTracker(); frequencyTracker.add(3); // The data structure now contains [3] frequencyTracker.add(3); // The data structure now contains [3, 3] frequencyTracker.hasFrequency(2); // Returns true, because 3 occurs twice Example 2: Input [\"FrequencyTracker\", \"add\", \"deleteOne\", \"hasFrequency\"] [[], [1], [1], [1]] Output [null, null, null, false]  Explanation FrequencyTracker frequencyTracker = new FrequencyTracker(); frequencyTracker.add(1); // The data structure now contains [1] frequencyTracker.deleteOne(1); // The data structure becomes empty [] frequencyTracker.hasFrequency(1); // Returns false, because the data structure is empty Example 3: Input [\"FrequencyTracker\", \"hasFrequency\", \"add\", \"hasFrequency\"] [[], [2], [3], [1]] Output [null, false, null, true]  Explanation FrequencyTracker frequencyTracker = new FrequencyTracker(); frequencyTracker.hasFrequency(2); // Returns false, because the data structure is empty frequencyTracker.add(3); // The data structure now contains [3] frequencyTracker.hasFrequency(1); // Returns true, because 3 occurs once   Constraints: 1 <= number <= 105 1 <= frequency <= 105 At most, 2 * 105 calls will be made to add, deleteOne, and hasFrequency in total.",
        "2006": "You are given an integer n representing an array colors of length n where all elements are set to 0's meaning uncolored. You are also given a 2D integer array queries where queries[i] = [indexi, colori]. For the ith query: Set colors[indexi] to colori. Count adjacent pairs in colors set to the same color (regardless of colori). Return an array answer of the same length as queries where answer[i] is the answer to the ith query.   Example 1: Input: n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]] Output: [0,1,1,0,2] Explanation: Initially array colors = [0,0,0,0], where 0 denotes uncolored elements of the array. After the 1st query colors = [2,0,0,0]. The count of adjacent pairs with the same color is 0. After the 2nd query colors = [2,2,0,0]. The count of adjacent pairs with the same color is 1. After the 3rd query colors = [2,2,0,1]. The count of adjacent pairs with the same color is 1. After the 4th query colors = [2,1,0,1]. The count of adjacent pairs with the same color is 0. After the 5th query colors = [2,1,1,1]. The count of adjacent pairs with the same color is 2. Example 2: Input: n = 1, queries = [[0,100000]] Output: [0] Explanation: After the 1st query colors = [100000]. The count of adjacent pairs with the same color is 0.   Constraints: 1 <= n <= 105 1 <= queries.length <= 105 queries[i].length == 2 0 <= indexi <= n - 1 1 <=  colori <= 105",
        "2007": "You are given an integer n representing the number of nodes in a perfect binary tree consisting of nodes numbered from 1 to n. The root of the tree is node 1 and each node i in the tree has two children where the left child is the node 2 * i and the right child is 2 * i + 1. Each node in the tree also has a cost represented by a given 0-indexed integer array cost of size n where cost[i] is the cost of node i + 1. You are allowed to increment the cost of any node by 1 any number of times. Return the minimum number of increments you need to make the cost of paths from the root to each leaf node equal. Note: A perfect binary tree is a tree where each node, except the leaf nodes, has exactly 2 children. The cost of a path is the sum of costs of nodes in the path.   Example 1: Input: n = 7, cost = [1,5,2,2,3,3,1] Output: 6 Explanation: We can do the following increments: - Increase the cost of node 4 one time. - Increase the cost of node 3 three times. - Increase the cost of node 7 two times. Each path from the root to a leaf will have a total cost of 9. The total increments we did is 1 + 3 + 2 = 6. It can be shown that this is the minimum answer we can achieve. Example 2: Input: n = 3, cost = [5,3,3] Output: 0 Explanation: The two paths already have equal total costs, so no increments are needed.   Constraints: 3 <= n <= 105 n + 1 is a power of 2 cost.length == n 1 <= cost[i] <= 104",
        "2008": "You are given a 0-indexed array of strings details. Each element of details provides information about a given passenger compressed into a string of length 15. The system is such that: The first ten characters consist of the phone number of passengers. The next character denotes the gender of the person. The following two characters are used to indicate the age of the person. The last two characters determine the seat allotted to that person. Return the number of passengers who are strictly more than 60 years old.   Example 1: Input: details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"] Output: 2 Explanation: The passengers at indices 0, 1, and 2 have ages 75, 92, and 40. Thus, there are 2 people who are over 60 years old. Example 2: Input: details = [\"1313579440F2036\",\"2921522980M5644\"] Output: 0 Explanation: None of the passengers are older than 60.   Constraints: 1 <= details.length <= 100 details[i].length == 15 details[i] consists of digits from '0' to '9'. details[i][10] is either 'M' or 'F' or 'O'. The phone numbers and seat numbers of the passengers are distinct.",
        "2009": "You are given a 0-indexed 2D integer array nums. Initially, your score is 0. Perform the following operations until the matrix becomes empty: From each row in the matrix, select the largest number and remove it. In the case of a tie, it does not matter which number is chosen. Identify the highest number amongst all those removed in step 1. Add that number to your score. Return the final score.   Example 1: Input: nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]] Output: 15 Explanation: In the first operation, we remove 7, 6, 6, and 3. We then add 7 to our score. Next, we remove 2, 4, 5, and 2. We add 5 to our score. Lastly, we remove 1, 2, 3, and 1. We add 3 to our score. Thus, our final score is 7 + 5 + 3 = 15. Example 2: Input: nums = [[1]] Output: 1 Explanation: We remove 1 and add it to the answer. We return 1.   Constraints: 1 <= nums.length <= 300 1 <= nums[i].length <= 500 0 <= nums[i][j] <= 103",
        "2010": "You are given a 0-indexed integer array nums of length n and an integer k. In an operation, you can choose an element and multiply it by 2. Return the maximum possible value of nums[0] | nums[1] | ... | nums[n - 1] that can be obtained after applying the operation on nums at most k times. Note that a | b denotes the bitwise or between two integers a and b.   Example 1: Input: nums = [12,9], k = 1 Output: 30 Explanation: If we apply the operation to index 1, our new array nums will be equal to [12,18]. Thus, we return the bitwise or of 12 and 18, which is 30. Example 2: Input: nums = [8,1,2], k = 2 Output: 35 Explanation: If we apply the operation twice on index 0, we yield a new array of [32,1,2]. Thus, we return 32|1|2 = 35.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 1 <= k <= 15",
        "2011": "You are given a 0-indexed integer array nums representing the strength of some heroes. The power of a group of heroes is defined as follows: Let i0, i1, ... ,ik be the indices of the heroes in a group. Then, the power of this group is max(nums[i0], nums[i1], ... ,nums[ik])2 * min(nums[i0], nums[i1], ... ,nums[ik]). Return the sum of the power of all non-empty groups of heroes possible. Since the sum could be very large, return it modulo 109 + 7.   Example 1: Input: nums = [2,1,4] Output: 141 Explanation:  1st group: [2] has power = 22 * 2 = 8. 2nd group: [1] has power = 12 * 1 = 1.  3rd group: [4] has power = 42 * 4 = 64.  4th group: [2,1] has power = 22 * 1 = 4.  5th group: [2,4] has power = 42 * 2 = 32.  6th group: [1,4] has power = 42 * 1 = 16.  7th group: [2,1,4] has power = 42 * 1 = 16.  The sum of powers of all groups is 8 + 1 + 64 + 4 + 32 + 16 + 16 = 141. Example 2: Input: nums = [1,1,1] Output: 7 Explanation: A total of 7 groups are possible, and the power of each group will be 1. Therefore, the sum of the powers of all groups is 7.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109",
        "2012": "There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend. The rules of the game are as follows: 1st friend receives the ball. After that, 1st friend passes it to the friend who is k steps away from them in the clockwise direction. After that, the friend who receives the ball should pass it to the friend who is 2 * k steps away from them in the clockwise direction. After that, the friend who receives the ball should pass it to the friend who is 3 * k steps away from them in the clockwise direction, and so on and so forth. In other words, on the ith turn, the friend holding the ball should pass it to the friend who is i * k steps away from them in the clockwise direction. The game is finished when some friend receives the ball for the second time. The losers of the game are friends who did not receive the ball in the entire game. Given the number of friends, n, and an integer k, return the array answer, which contains the losers of the game in the ascending order.   Example 1: Input: n = 5, k = 2 Output: [4,5] Explanation: The game goes as follows: 1) Start at 1st friend and pass the ball to the friend who is 2 steps away from them - 3rd friend. 2) 3rd friend passes the ball to the friend who is 4 steps away from them - 2nd friend. 3) 2nd friend passes the ball to the friend who is 6 steps away from them  - 3rd friend. 4) The game ends as 3rd friend receives the ball for the second time. Example 2: Input: n = 4, k = 4 Output: [2,3,4] Explanation: The game goes as follows: 1) Start at the 1st friend and pass the ball to the friend who is 4 steps away from them - 1st friend. 2) The game ends as 1st friend receives the ball for the second time.   Constraints: 1 <= k <= n <= 50",
        "2013": "A 0-indexed array derived with length n is derived by computing the bitwise XOR (⊕) of adjacent values in a binary array original of length n. Specifically, for each index i in the range [0, n - 1]: If i = n - 1, then derived[i] = original[i] ⊕ original[0]. Otherwise, derived[i] = original[i] ⊕ original[i + 1]. Given an array derived, your task is to determine whether there exists a valid binary array original that could have formed derived. Return true if such an array exists or false otherwise. A binary array is an array containing only 0's and 1's   Example 1: Input: derived = [1,1,0] Output: true Explanation: A valid original array that gives derived is [0,1,0]. derived[0] = original[0] ⊕ original[1] = 0 ⊕ 1 = 1  derived[1] = original[1] ⊕ original[2] = 1 ⊕ 0 = 1 derived[2] = original[2] ⊕ original[0] = 0 ⊕ 0 = 0 Example 2: Input: derived = [1,1] Output: true Explanation: A valid original array that gives derived is [0,1]. derived[0] = original[0] ⊕ original[1] = 1 derived[1] = original[1] ⊕ original[0] = 1 Example 3: Input: derived = [1,0] Output: false Explanation: There is no valid original array that gives derived.   Constraints: n == derived.length 1 <= n <= 105 The values in derived are either 0's or 1's",
        "2014": "You are given a 0-indexed m x n matrix grid consisting of positive integers. You can start at any cell in the first column of the matrix, and traverse the grid in the following way: From a cell (row, col), you can move to any of the cells: (row - 1, col + 1), (row, col + 1) and (row + 1, col + 1) such that the value of the cell you move to, should be strictly bigger than the value of the current cell. Return the maximum number of moves that you can perform.   Example 1: Input: grid = [[2,4,3,5],[5,4,9,3],[3,4,2,11],[10,9,13,15]] Output: 3 Explanation: We can start at the cell (0, 0) and make the following moves: - (0, 0) -> (0, 1). - (0, 1) -> (1, 2). - (1, 2) -> (2, 3). It can be shown that it is the maximum number of moves that can be made. Example 2: Input: grid = [[3,2,4],[2,1,9],[1,1,7]] Output: 0 Explanation: Starting from any cell in the first column we cannot perform any moves.   Constraints: m == grid.length n == grid[i].length 2 <= m, n <= 1000 4 <= m * n <= 105 1 <= grid[i][j] <= 106",
        "2015": "You are given an integer n. There is an undirected graph with n vertices, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting vertices ai and bi. Return the number of complete connected components of the graph. A connected component is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph. A connected component is said to be complete if there exists an edge between every pair of its vertices.   Example 1: Input: n = 6, edges = [[0,1],[0,2],[1,2],[3,4]] Output: 3 Explanation: From the picture above, one can see that all of the components of this graph are complete. Example 2: Input: n = 6, edges = [[0,1],[0,2],[1,2],[3,4],[3,5]] Output: 1 Explanation: The component containing vertices 0, 1, and 2 is complete since there is an edge between every pair of two vertices. On the other hand, the component containing vertices 3, 4, and 5 is not complete since there is no edge between vertices 4 and 5. Thus, the number of complete components in this graph is 1.   Constraints: 1 <= n <= 50 0 <= edges.length <= n * (n - 1) / 2 edges[i].length == 2 0 <= ai, bi <= n - 1 ai != bi There are no repeated edges.",
        "2016": "Enhance all functions to have the callPolyfill method. The method accepts an object obj as it's first parameter and any number of additional arguments. The obj becomes the this context for the function. The additional arguments are passed to the function (that the callPolyfill method belongs on). For example if you had the function: function tax(price, taxRate) {   const totalCost = price * (1 + taxRate);   console.log(`The cost of ${this.item} is ${totalCost}`); } Calling this function like tax(10, 0.1) will log \"The cost of undefined is 11\". This is because the this context was not defined. However, calling the function like tax.callPolyfill({item: \"salad\"}, 10, 0.1) will log \"The cost of salad is 11\". The this context was appropriately set, and the function logged an appropriate output. Please solve this without using the built-in Function.call method.   Example 1: Input: fn = function add(b) {   return this.a + b; } args = [{\"a\": 5}, 7] Output: 12 Explanation: fn.callPolyfill({\"a\": 5}, 7); // 12 callPolyfill sets the \"this\" context to {\"a\": 5}. 7 is passed as an argument. Example 2: Input:  fn = function tax(price, taxRate) {   return `The cost of the ${this.item} is ${price * taxRate}`;  } args = [{\"item\": \"burger\"}, 10, 1.1] Output: \"The cost of the burger is 11\" Explanation: callPolyfill sets the \"this\" context to {\"item\": \"burger\"}. 10 and 1.1 are passed as additional arguments.   Constraints: typeof args[0] == 'object' and args[0] != null 1 <= args.length <= 100 2 <= JSON.stringify(args[0]).length <= 105",
        "2017": "Design an EventEmitter class. This interface is similar (but with some differences) to the one found in Node.js or the Event Target interface of the DOM. The EventEmitter should allow for subscribing to events and emitting them. Your EventEmitter class should have the following two methods: subscribe - This method takes in two arguments: the name of an event as a string and a callback function. This callback function will later be called when the event is emitted. An event should be able to have multiple listeners for the same event. When emitting an event with multiple callbacks, each should be called in the order in which they were subscribed. An array of results should be returned. You can assume no callbacks passed to subscribe are referentially identical. The subscribe method should also return an object with an unsubscribe method that enables the user to unsubscribe. When it is called, the callback should be removed from the list of subscriptions and undefined should be returned. emit - This method takes in two arguments: the name of an event as a string and an optional array of arguments that will be passed to the callback(s). If there are no callbacks subscribed to the given event, return an empty array. Otherwise, return an array of the results of all callback calls in the order they were subscribed.   Example 1: Input:  actions = [\"EventEmitter\", \"emit\", \"subscribe\", \"subscribe\", \"emit\"],  values = [[], [\"firstEvent\"], [\"firstEvent\", \"function cb1() { return 5; }\"],  [\"firstEvent\", \"function cb1() { return 6; }\"], [\"firstEvent\"]] Output: [[],[\"emitted\",[]],[\"subscribed\"],[\"subscribed\"],[\"emitted\",[5,6]]] Explanation:  const emitter = new EventEmitter(); emitter.emit(\"firstEvent\"); // [], no callback are subscribed yet emitter.subscribe(\"firstEvent\", function cb1() { return 5; }); emitter.subscribe(\"firstEvent\", function cb2() { return 6; }); emitter.emit(\"firstEvent\"); // [5, 6], returns the output of cb1 and cb2 Example 2: Input:  actions = [\"EventEmitter\", \"subscribe\", \"emit\", \"emit\"],  values = [[], [\"firstEvent\", \"function cb1(...args) { return args.join(','); }\"], [\"firstEvent\", [1,2,3]], [\"firstEvent\", [3,4,6]]] Output: [[],[\"subscribed\"],[\"emitted\",[\"1,2,3\"]],[\"emitted\",[\"3,4,6\"]]] Explanation: Note that the emit method should be able to accept an OPTIONAL array of arguments.  const emitter = new EventEmitter(); emitter.subscribe(\"firstEvent, function cb1(...args) { return args.join(','); }); emitter.emit(\"firstEvent\", [1, 2, 3]); // [\"1,2,3\"] emitter.emit(\"firstEvent\", [3, 4, 6]); // [\"3,4,6\"] Example 3: Input:  actions = [\"EventEmitter\", \"subscribe\", \"emit\", \"unsubscribe\", \"emit\"],  values = [[], [\"firstEvent\", \"(...args) => args.join(',')\"], [\"firstEvent\", [1,2,3]], [0], [\"firstEvent\", [4,5,6]]] Output: [[],[\"subscribed\"],[\"emitted\",[\"1,2,3\"]],[\"unsubscribed\",0],[\"emitted\",[]]] Explanation: const emitter = new EventEmitter(); const sub = emitter.subscribe(\"firstEvent\", (...args) => args.join(',')); emitter.emit(\"firstEvent\", [1, 2, 3]); // [\"1,2,3\"] sub.unsubscribe(); // undefined emitter.emit(\"firstEvent\", [4, 5, 6]); // [], there are no subscriptions Example 4: Input:  actions = [\"EventEmitter\", \"subscribe\", \"subscribe\", \"unsubscribe\", \"emit\"],  values = [[], [\"firstEvent\", \"x => x + 1\"], [\"firstEvent\", \"x => x + 2\"], [0], [\"firstEvent\", [5]]] Output: [[],[\"subscribed\"],[\"emitted\",[\"1,2,3\"]],[\"unsubscribed\",0],[\"emitted\",[7]]] Explanation: const emitter = new EventEmitter(); const sub1 = emitter.subscribe(\"firstEvent\", x => x + 1); const sub2 = emitter.subscribe(\"firstEvent\", x => x + 2); sub1.unsubscribe(); // undefined emitter.emit(\"firstEvent\", [5]); // [7]   Constraints: 1 <= actions.length <= 10 values.length === actions.length All test cases are valid, e.g. you don't need to handle scenarios when unsubscribing from a non-existing subscription. There are only 4 different actions: EventEmitter, emit, subscribe, and unsubscribe. The EventEmitter action doesn't take any arguments. The emit action takes between either 1 or 2 arguments. The first argument is the name of the event we want to emit, and the 2nd argument is passed to the callback functions. The subscribe action takes 2 arguments, where the first one is the event name and the second is the callback function. The unsubscribe action takes one argument, which is the 0-indexed order of the subscription made before.",
        "2018": "Create a class ArrayWrapper that accepts an array of integers in its constructor. This class should have two features: When two instances of this class are added together with the + operator, the resulting value is the sum of all the elements in both arrays. When the String() function is called on the instance, it will return a comma separated string surrounded by brackets. For example, [1,2,3].   Example 1: Input: nums = [[1,2],[3,4]], operation = \"Add\" Output: 10 Explanation: const obj1 = new ArrayWrapper([1,2]); const obj2 = new ArrayWrapper([3,4]); obj1 + obj2; // 10 Example 2: Input: nums = [[23,98,42,70]], operation = \"String\" Output: \"[23,98,42,70]\" Explanation: const obj = new ArrayWrapper([23,98,42,70]); String(obj); // \"[23,98,42,70]\" Example 3: Input: nums = [[],[]], operation = \"Add\" Output: 0 Explanation: const obj1 = new ArrayWrapper([]); const obj2 = new ArrayWrapper([]); obj1 + obj2; // 0   Constraints: 0 <= nums.length <= 1000 0 <= nums[i] <= 1000 Note: nums is the array passed to the constructor",
        "2019": "You are given a string s consisting only of uppercase English letters. You can apply some operations to this string where, in one operation, you can remove any occurrence of one of the substrings \"AB\" or \"CD\" from s. Return the minimum possible length of the resulting string that you can obtain. Note that the string concatenates after removing the substring and could produce new \"AB\" or \"CD\" substrings.   Example 1: Input: s = \"ABFCACDB\" Output: 2 Explanation: We can do the following operations: - Remove the substring \"ABFCACDB\", so s = \"FCACDB\". - Remove the substring \"FCACDB\", so s = \"FCAB\". - Remove the substring \"FCAB\", so s = \"FC\". So the resulting length of the string is 2. It can be shown that it is the minimum length that we can obtain. Example 2: Input: s = \"ACBBD\" Output: 5 Explanation: We cannot do any operations on the string so the length remains the same.   Constraints: 1 <= s.length <= 100 s consists only of uppercase English letters.",
        "2020": "You are given a string s consisting of lowercase English letters, and you are allowed to perform operations on it. In one operation, you can replace a character in s with another lowercase English letter. Your task is to make s a palindrome with the minimum number of operations possible. If there are multiple palindromes that can be made using the minimum number of operations, make the lexicographically smallest one. A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. Return the resulting palindrome string.   Example 1: Input: s = \"egcfe\" Output: \"efcfe\" Explanation: The minimum number of operations to make \"egcfe\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"efcfe\", by changing 'g'. Example 2: Input: s = \"abcd\" Output: \"abba\" Explanation: The minimum number of operations to make \"abcd\" a palindrome is 2, and the lexicographically smallest palindrome string we can get by modifying two characters is \"abba\". Example 3: Input: s = \"seven\" Output: \"neven\" Explanation: The minimum number of operations to make \"seven\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"neven\".   Constraints: 1 <= s.length <= 1000 s consists of only lowercase English letters.",
        "2021": "Given a positive integer n, return the punishment number of n. The punishment number of n is defined as the sum of the squares of all integers i such that: 1 <= i <= n The decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.   Example 1: Input: n = 10 Output: 182 Explanation: There are exactly 3 integers i that satisfy the conditions in the statement: - 1 since 1 * 1 = 1 - 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1. - 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0. Hence, the punishment number of 10 is 1 + 81 + 100 = 182 Example 2: Input: n = 37 Output: 1478 Explanation: There are exactly 4 integers i that satisfy the conditions in the statement: - 1 since 1 * 1 = 1.  - 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1.  - 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0.  - 36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6. Hence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478   Constraints: 1 <= n <= 1000",
        "2022": "You are given an undirected weighted connected graph containing n nodes labeled from 0 to n - 1, and an integer array edges where edges[i] = [ai, bi, wi] indicates that there is an edge between nodes ai and bi with weight wi. Some edges have a weight of -1 (wi = -1), while others have a positive weight (wi > 0). Your task is to modify all edges with a weight of -1 by assigning them positive integer values in the range [1, 2 * 109] so that the shortest distance between the nodes source and destination becomes equal to an integer target. If there are multiple modifications that make the shortest distance between source and destination equal to target, any of them will be considered correct. Return an array containing all edges (even unmodified ones) in any order if it is possible to make the shortest distance from source to destination equal to target, or an empty array if it's impossible. Note: You are not allowed to modify the weights of edges with initial positive weights.   Example 1: Input: n = 5, edges = [[4,1,-1],[2,0,-1],[0,3,-1],[4,3,-1]], source = 0, destination = 1, target = 5 Output: [[4,1,1],[2,0,1],[0,3,3],[4,3,1]] Explanation: The graph above shows a possible modification to the edges, making the distance from 0 to 1 equal to 5. Example 2: Input: n = 3, edges = [[0,1,-1],[0,2,5]], source = 0, destination = 2, target = 6 Output: [] Explanation: The graph above contains the initial edges. It is not possible to make the distance from 0 to 2 equal to 6 by modifying the edge with weight -1. So, an empty array is returned. Example 3: Input: n = 4, edges = [[1,0,4],[1,2,3],[2,3,5],[0,3,-1]], source = 0, destination = 2, target = 6 Output: [[1,0,4],[1,2,3],[2,3,5],[0,3,1]] Explanation: The graph above shows a modified graph having the shortest distance from 0 to 2 as 6.   Constraints: 1 <= n <= 100 1 <= edges.length <= n * (n - 1) / 2 edges[i].length == 3 0 <= ai, bi < n wi = -1 or 1 <= wi <= 107 ai != bi 0 <= source, destination < n source != destination 1 <= target <= 109 The graph is connected, and there are no self-loops or repeated edges",
        "2023": "Write a function argumentsLength that returns the count of arguments passed to it.   Example 1: Input: args = [5] Output: 1 Explanation: argumentsLength(5); // 1  One value was passed to the function so it should return 1. Example 2: Input: args = [{}, null, \"3\"] Output: 3 Explanation:  argumentsLength({}, null, \"3\"); // 3  Three values were passed to the function so it should return 3.   Constraints: args is a valid JSON array 0 <= args.length <= 100",
        "2024": "Write a function expect that helps developers test their code. It should take in any value val and return an object with the following two functions. toBe(val) accepts another value and returns true if the two values === each other. If they are not equal, it should throw an error \"Not Equal\". notToBe(val) accepts another value and returns true if the two values !== each other. If they are equal, it should throw an error \"Equal\".   Example 1: Input: func = () => expect(5).toBe(5) Output: {\"value\": true} Explanation: 5 === 5 so this expression returns true. Example 2: Input: func = () => expect(5).toBe(null) Output: {\"error\": \"Not Equal\"} Explanation: 5 !== null so this expression throw the error \"Not Equal\". Example 3: Input: func = () => expect(5).notToBe(null) Output: {\"value\": true} Explanation: 5 !== null so this expression returns true.",
        "2025": "Given an object or array obj, return a compact object. A compact object is the same as the original object, except with keys containing falsy values removed. This operation applies to the object and any nested objects. Arrays are considered objects where the indices are keys. A value is considered falsy when Boolean(value) returns false. You may assume the obj is the output of JSON.parse. In other words, it is valid JSON.   Example 1: Input: obj = [null, 0, false, 1] Output: [1] Explanation: All falsy values have been removed from the array. Example 2: Input: obj = {\"a\": null, \"b\": [false, 1]} Output: {\"b\": [1]} Explanation: obj[\"a\"] and obj[\"b\"][0] had falsy values and were removed. Example 3: Input: obj = [null, 0, 5, [0], [false, 16]] Output: [5, [], [16]] Explanation: obj[0], obj[1], obj[3][0], and obj[4][0] were falsy and removed.   Constraints: obj is a valid JSON object 2 <= JSON.stringify(obj).length <= 106",
        "2026": "You are given an integer array prices representing the prices of various chocolates in a store. You are also given a single integer money, which represents your initial amount of money. You must buy exactly two chocolates in such a way that you still have some non-negative leftover money. You would like to minimize the sum of the prices of the two chocolates you buy. Return the amount of money you will have leftover after buying the two chocolates. If there is no way for you to buy two chocolates without ending up in debt, return money. Note that the leftover must be non-negative.   Example 1: Input: prices = [1,2,2], money = 3 Output: 0 Explanation: Purchase the chocolates priced at 1 and 2 units respectively. You will have 3 - 3 = 0 units of money afterwards. Thus, we return 0. Example 2: Input: prices = [3,2,3], money = 3 Output: 3 Explanation: You cannot buy 2 chocolates without going in debt, so we return 3.   Constraints: 2 <= prices.length <= 50 1 <= prices[i] <= 100 1 <= money <= 100",
        "2027": "You are given a 0-indexed string s and a dictionary of words dictionary. You have to break s into one or more non-overlapping substrings such that each substring is present in dictionary. There may be some extra characters in s which are not present in any of the substrings. Return the minimum number of extra characters left over if you break up s optimally.   Example 1: Input: s = \"leetscode\", dictionary = [\"leet\",\"code\",\"leetcode\"] Output: 1 Explanation: We can break s in two substrings: \"leet\" from index 0 to 3 and \"code\" from index 5 to 8. There is only 1 unused character (at index 4), so we return 1. Example 2: Input: s = \"sayhelloworld\", dictionary = [\"hello\",\"world\"] Output: 3 Explanation: We can break s in two substrings: \"hello\" from index 3 to 7 and \"world\" from index 8 to 12. The characters at indices 0, 1, 2 are not used in any substring and thus are considered as extra characters. Hence, we return 3.   Constraints: 1 <= s.length <= 50 1 <= dictionary.length <= 50 1 <= dictionary[i].length <= 50 dictionary[i] and s consists of only lowercase English letters dictionary contains distinct words",
        "2028": "You are given a 0-indexed integer array nums representing the score of students in an exam. The teacher would like to form one non-empty group of students with maximal strength, where the strength of a group of students of indices i0, i1, i2, ... , ik is defined as nums[i0] * nums[i1] * nums[i2] * ... * nums[ik]. Return the maximum strength of a group the teacher can create.   Example 1: Input: nums = [3,-1,-5,2,5,-9] Output: 1350 Explanation: One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal. Example 2: Input: nums = [-4,-5,-4] Output: 20 Explanation: Group the students at indices [0, 1] . Then, we’ll have a resulting strength of 20. We cannot achieve greater strength.   Constraints: 1 <= nums.length <= 13 -9 <= nums[i] <= 9",
        "2029": "Given a positive integer num represented as a string, return the integer num without trailing zeros as a string.   Example 1: Input: num = \"51230100\" Output: \"512301\" Explanation: Integer \"51230100\" has 2 trailing zeros, we remove them and return integer \"512301\". Example 2: Input: num = \"123\" Output: \"123\" Explanation: Integer \"123\" has no trailing zeros, we return integer \"123\".   Constraints: 1 <= num.length <= 1000 num consists of only digits. num doesn't have any leading zeros.",
        "2030": "Given a 2D grid of size m x n, you should find the matrix answer of size m x n. The cell answer[r][c] is calculated by looking at the diagonal values of the cell grid[r][c]: Let leftAbove[r][c] be the number of distinct values on the diagonal to the left and above the cell grid[r][c] not including the cell grid[r][c] itself. Let rightBelow[r][c] be the number of distinct values on the diagonal to the right and below the cell grid[r][c], not including the cell grid[r][c] itself. Then answer[r][c] = |leftAbove[r][c] - rightBelow[r][c]|. A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until the end of the matrix is reached. For example, in the below diagram the diagonal is highlighted using the cell with indices (2, 3) colored gray: Red-colored cells are left and above the cell. Blue-colored cells are right and below the cell. Return the matrix answer.   Example 1: Input: grid = [[1,2,3],[3,1,5],[3,2,1]] Output: Output: [[1,1,0],[1,0,1],[0,1,1]] Explanation: To calculate the answer cells: answer left-above elements leftAbove right-below elements rightBelow |leftAbove - rightBelow| [0][0] [] 0 [grid[1][1], grid[2][2]] |{1, 1}| = 1 1 [0][1] [] 0 [grid[1][2]] |{5}| = 1 1 [0][2] [] 0 [] 0 0 [1][0] [] 0 [grid[2][1]] |{2}| = 1 1 [1][1] [grid[0][0]] |{1}| = 1 [grid[2][2]] |{1}| = 1 0 [1][2] [grid[0][1]] |{2}| = 1 [] 0 1 [2][0] [] 0 [] 0 0 [2][1] [grid[1][0]] |{3}| = 1 [] 0 1 [2][2] [grid[0][0], grid[1][1]] |{1, 1}| = 1 [] 0 1 Example 2: Input: grid = [[1]] Output: Output: [[0]]   Constraints: m == grid.length n == grid[i].length 1 <= m, n, grid[i][j] <= 50",
        "2031": "You are given a 0-indexed binary string s of length n on which you can apply two types of operations: Choose an index i and invert all characters from index 0 to index i (both inclusive), with a cost of i + 1 Choose an index i and invert all characters from index i to index n - 1 (both inclusive), with a cost of n - i Return the minimum cost to make all characters of the string equal. Invert a character means if its value is '0' it becomes '1' and vice-versa.   Example 1: Input: s = \"0011\" Output: 2 Explanation: Apply the second operation with i = 2 to obtain s = \"0000\" for a cost of 2. It can be shown that 2 is the minimum cost to make all characters equal. Example 2: Input: s = \"010101\" Output: 9 Explanation: Apply the first operation with i = 2 to obtain s = \"101101\" for a cost of 3. Apply the first operation with i = 1 to obtain s = \"011101\" for a cost of 2.  Apply the first operation with i = 0 to obtain s = \"111101\" for a cost of 1.  Apply the second operation with i = 4 to obtain s = \"111110\" for a cost of 2. Apply the second operation with i = 5 to obtain s = \"111111\" for a cost of 1.  The total cost to make all characters equal is 9. It can be shown that 9 is the minimum cost to make all characters equal.   Constraints: 1 <= s.length == n <= 105 s[i] is either '0' or '1'",
        "2032": "Given a 1-indexed m x n integer matrix mat, you can select any cell in the matrix as your starting cell. From the starting cell, you can move to any other cell in the same row or column, but only if the value of the destination cell is strictly greater than the value of the current cell. You can repeat this process as many times as possible, moving from cell to cell until you can no longer make any moves. Your task is to find the maximum number of cells that you can visit in the matrix by starting from some cell. Return an integer denoting the maximum number of cells that can be visited.   Example 1: Input: mat = [[3,1],[3,4]] Output: 2 Explanation: The image shows how we can visit 2 cells starting from row 1, column 2. It can be shown that we cannot visit more than 2 cells no matter where we start from, so the answer is 2.  Example 2: Input: mat = [[1,1],[1,1]] Output: 1 Explanation: Since the cells must be strictly increasing, we can only visit one cell in this example.  Example 3: Input: mat = [[3,1,6],[-9,5,7]] Output: 4 Explanation: The image above shows how we can visit 4 cells starting from row 2, column 1. It can be shown that we cannot visit more than 4 cells no matter where we start from, so the answer is 4.    Constraints: m == mat.length  n == mat[i].length  1 <= m, n <= 105 1 <= m * n <= 105 -105 <= mat[i][j] <= 105",
        "2033": "Given a function fn, an array of arguments args, and a timeout t in milliseconds, return a cancel function cancelFn. After a delay of cancelTimeMs, the returned cancel function cancelFn will be invoked. setTimeout(cancelFn, cancelTimeMs) Initially, the execution of the function fn should be delayed by t milliseconds. If, before the delay of t milliseconds, the function cancelFn is invoked, it should cancel the delayed execution of fn. Otherwise, if cancelFn is not invoked within the specified delay t, fn should be executed with the provided args as arguments.   Example 1: Input: fn = (x) => x * 5, args = [2], t = 20 Output: [{\"time\": 20, \"returned\": 10}] Explanation:  const cancelTimeMs = 50; const cancelFn = cancellable((x) => x * 5, [2], 20); setTimeout(cancelFn, cancelTimeMs);  The cancellation was scheduled to occur after a delay of cancelTimeMs (50ms), which happened after the execution of fn(2) at 20ms. Example 2: Input: fn = (x) => x**2, args = [2], t = 100 Output: [] Explanation:  const cancelTimeMs = 50; const cancelFn = cancellable((x) => x**2, [2], 100); setTimeout(cancelFn, cancelTimeMs);  The cancellation was scheduled to occur after a delay of cancelTimeMs (50ms), which happened before the execution of fn(2) at 100ms, resulting in fn(2) never being called. Example 3: Input: fn = (x1, x2) => x1 * x2, args = [2,4], t = 30 Output: [{\"time\": 30, \"returned\": 8}] Explanation:  const cancelTimeMs = 100; const cancelFn = cancellable((x1, x2) => x1 * x2, [2,4], 30); setTimeout(cancelFn, cancelTimeMs);  The cancellation was scheduled to occur after a delay of cancelTimeMs (100ms), which happened after the execution of fn(2,4) at 30ms.   Constraints: fn is a function args is a valid JSON array 1 <= args.length <= 10 20 <= t <= 1000 10 <= cancelTimeMs <= 1000",
        "2034": "Given a string s, you have two types of operation: Choose an index i in the string, and let c be the character in position i. Delete the closest occurrence of c to the left of i (if exists). Choose an index i in the string, and let c be the character in position i. Delete the closest occurrence of c to the right of i (if exists). Your task is to minimize the length of s by performing the above operations zero or more times. Return an integer denoting the length of the minimized string.   Example 1: Input: s = \"aaabc\" Output: 3 Explanation: Operation 2: we choose i = 1 so c is 'a', then we remove s[2] as it is closest 'a' character to the right of s[1]. s becomes \"aabc\" after this. Operation 1: we choose i = 1 so c is 'a', then we remove s[0] as it is closest 'a' character to the left of s[1]. s becomes \"abc\" after this. Example 2: Input: s = \"cbbd\" Output: 3 Explanation: Operation 1: we choose i = 2 so c is 'b', then we remove s[1] as it is closest 'b' character to the left of s[1]. s becomes \"cbd\" after this. Example 3: Input: s = \"baadccab\" Output: 4 Explanation: Operation 1: we choose i = 6 so c is 'a', then we remove s[2] as it is closest 'a' character to the left of s[6]. s becomes \"badccab\" after this. Operation 2: we choose i = 0 so c is 'b', then we remove s[6] as it is closest 'b' character to the right of s[0]. s becomes \"badcca\" fter this. Operation 2: we choose i = 3 so c is 'c', then we remove s[4] as it is closest 'c' character to the right of s[3]. s becomes \"badca\" after this. Operation 1: we choose i = 4 so c is 'a', then we remove s[1] as it is closest 'a' character to the left of s[4]. s becomes \"bdca\" after this.   Constraints: 1 <= s.length <= 100 s contains only lowercase English letters",
        "2035": "You are given a 0-indexed permutation of n integers nums. A permutation is called semi-ordered if the first number equals 1 and the last number equals n. You can perform the below operation as many times as you want until you make nums a semi-ordered permutation: Pick two adjacent elements in nums, then swap them. Return the minimum number of operations to make nums a semi-ordered permutation. A permutation is a sequence of integers from 1 to n of length n containing each number exactly once.   Example 1: Input: nums = [2,1,4,3] Output: 2 Explanation: We can make the permutation semi-ordered using these sequence of operations:  1 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3]. 2 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4]. It can be proved that there is no sequence of less than two operations that make nums a semi-ordered permutation.  Example 2: Input: nums = [2,4,1,3] Output: 3 Explanation: We can make the permutation semi-ordered using these sequence of operations: 1 - swap i = 1 and j = 2. The permutation becomes [2,1,4,3]. 2 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3]. 3 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4]. It can be proved that there is no sequence of less than three operations that make nums a semi-ordered permutation. Example 3: Input: nums = [1,3,4,2,5] Output: 0 Explanation: The permutation is already a semi-ordered permutation.   Constraints: 2 <= nums.length == n <= 50 1 <= nums[i] <= 50 nums is a permutation.",
        "2036": "You are given an integer n and a 0-indexed 2D array queries where queries[i] = [typei, indexi, vali]. Initially, there is a 0-indexed n x n matrix filled with 0's. For each query, you must apply one of the following changes: if typei == 0, set the values in the row with indexi to vali, overwriting any previous values. if typei == 1, set the values in the column with indexi to vali, overwriting any previous values. Return the sum of integers in the matrix after all queries are applied.   Example 1: Input: n = 3, queries = [[0,0,1],[1,2,2],[0,2,3],[1,0,4]] Output: 23 Explanation: The image above describes the matrix after each query. The sum of the matrix after all queries are applied is 23.  Example 2: Input: n = 3, queries = [[0,0,4],[0,1,2],[1,0,1],[0,2,3],[1,2,1]] Output: 17 Explanation: The image above describes the matrix after each query. The sum of the matrix after all queries are applied is 17.   Constraints: 1 <= n <= 104 1 <= queries.length <= 5 * 104 queries[i].length == 3 0 <= typei <= 1 0 <= indexi < n 0 <= vali <= 105",
        "2037": "You are given two numeric strings num1 and num2 and two integers max_sum and min_sum. We denote an integer x to be good if: num1 <= x <= num2 min_sum <= digit_sum(x) <= max_sum. Return the number of good integers. Since the answer may be large, return it modulo 109 + 7. Note that digit_sum(x) denotes the sum of the digits of x.   Example 1: Input: num1 = \"1\", num2 = \"12\", min_sum = 1, max_sum = 8 Output: 11 Explanation: There are 11 integers whose sum of digits lies between 1 and 8 are 1,2,3,4,5,6,7,8,10,11, and 12. Thus, we return 11. Example 2: Input: num1 = \"1\", num2 = \"5\", min_sum = 1, max_sum = 5 Output: 5 Explanation: The 5 integers whose sum of digits lies between 1 and 5 are 1,2,3,4, and 5. Thus, we return 5.   Constraints: 1 <= num1 <= num2 <= 1022 1 <= min_sum <= max_sum <= 400",
        "2038": "Given an array of asynchronous functions functions, return a new promise promise. Each function in the array accepts no arguments and returns a promise. All the promises should be executed in parallel. promise resolves: When all the promises returned from functions were resolved successfully in parallel. The resolved value of promise should be an array of all the resolved values of promises in the same order as they were in the functions. The promise should resolve when all the asynchronous functions in the array have completed execution in parallel. promise rejects: When any of the promises returned from functions were rejected. promise should also reject with the reason of the first rejection. Please solve it without using the built-in Promise.all function.   Example 1: Input: functions = [   () => new Promise(resolve => setTimeout(() => resolve(5), 200)) ] Output: {\"t\": 200, \"resolved\": [5]} Explanation:  promiseAll(functions).then(console.log); // [5]  The single function was resolved at 200ms with a value of 5. Example 2: Input: functions = [     () => new Promise(resolve => setTimeout(() => resolve(1), 200)),      () => new Promise((resolve, reject) => setTimeout(() => reject(\"Error\"), 100)) ] Output: {\"t\": 100, \"rejected\": \"Error\"} Explanation: Since one of the promises rejected, the returned promise also rejected with the same error at the same time. Example 3: Input: functions = [     () => new Promise(resolve => setTimeout(() => resolve(4), 50)),      () => new Promise(resolve => setTimeout(() => resolve(10), 150)),      () => new Promise(resolve => setTimeout(() => resolve(16), 100)) ] Output: {\"t\": 150, \"resolved\": [4, 10, 16]} Explanation: All the promises resolved with a value. The returned promise resolved when the last promise resolved.   Constraints: functions is an array of functions that returns promises 1 <= functions.length <= 10",
        "2039": "Given two arrays arr1 and arr2, return a new array joinedArray. All the objects in each of the two inputs arrays will contain an id field that has an integer value.  joinedArray is an array formed by merging arr1 and arr2 based on their id key. The length of joinedArray should be the length of unique values of id. The returned array should be sorted in ascending order based on the id key. If a given id exists in one array but not the other, the single object with that id should be included in the result array without modification. If two objects share an id, their properties should be merged into a single object: If a key only exists in one object, that single key-value pair should be included in the object. If a key is included in both objects, the value in the object from arr2 should override the value from arr1.   Example 1: Input:  arr1 = [     {\"id\": 1, \"x\": 1},     {\"id\": 2, \"x\": 9} ],  arr2 = [     {\"id\": 3, \"x\": 5} ] Output:  [     {\"id\": 1, \"x\": 1},     {\"id\": 2, \"x\": 9},     {\"id\": 3, \"x\": 5} ] Explanation: There are no duplicate ids so arr1 is simply concatenated with arr2. Example 2: Input:  arr1 = [     {\"id\": 1, \"x\": 2, \"y\": 3},     {\"id\": 2, \"x\": 3, \"y\": 6} ],  arr2 = [     {\"id\": 2, \"x\": 10, \"y\": 20},     {\"id\": 3, \"x\": 0, \"y\": 0} ] Output:  [     {\"id\": 1, \"x\": 2, \"y\": 3},     {\"id\": 2, \"x\": 10, \"y\": 20},     {\"id\": 3, \"x\": 0, \"y\": 0} ] Explanation: The two objects with id=1 and id=3 are included in the result array without modifiction. The two objects with id=2 are merged together. The keys from arr2 override the values in arr1. Example 3: Input:  arr1 = [     {\"id\": 1, \"b\": {\"b\": 94},\"v\": [4, 3], \"y\": 48} ] arr2 = [     {\"id\": 1, \"b\": {\"c\": 84}, \"v\": [1, 3]} ] Output: [     {\"id\": 1, \"b\": {\"c\": 84}, \"v\": [1, 3], \"y\": 48} ] Explanation: The two objects with id=1 are merged together. For the keys \"b\" and \"v\" the values from arr2 are used. Since the key \"y\" only exists in arr1, that value is taken form arr1.   Constraints: arr1 and arr2 are valid JSON arrays Each object in arr1 and arr2 has a unique integer id key 2 <= JSON.stringify(arr1).length <= 106 2 <= JSON.stringify(arr2).length <= 106",
        "2040": "Given two promises promise1 and promise2, return a new promise. promise1 and promise2 will both resolve with a number. The returned promise should resolve with the sum of the two numbers.   Example 1: Input:  promise1 = new Promise(resolve => setTimeout(() => resolve(2), 20)),  promise2 = new Promise(resolve => setTimeout(() => resolve(5), 60)) Output: 7 Explanation: The two input promises resolve with the values of 2 and 5 respectively. The returned promise should resolve with a value of 2 + 5 = 7. The time the returned promise resolves is not judged for this problem. Example 2: Input:  promise1 = new Promise(resolve => setTimeout(() => resolve(10), 50)),  promise2 = new Promise(resolve => setTimeout(() => resolve(-12), 30)) Output: -2 Explanation: The two input promises resolve with the values of 10 and -12 respectively. The returned promise should resolve with a value of 10 + -12 = -2.   Constraints: promise1 and promise2 are promises that resolve with a number",
        "2041": "Given an array arr and a function fn, return a sorted array sortedArr. You can assume fn only returns numbers and those numbers determine the sort order of sortedArr. sortedArr must be sorted in ascending order by fn output. You may assume that fn will never duplicate numbers for a given array.   Example 1: Input: arr = [5, 4, 1, 2, 3], fn = (x) => x Output: [1, 2, 3, 4, 5] Explanation: fn simply returns the number passed to it so the array is sorted in ascending order. Example 2: Input: arr = [{\"x\": 1}, {\"x\": 0}, {\"x\": -1}], fn = (d) => d.x Output: [{\"x\": -1}, {\"x\": 0}, {\"x\": 1}] Explanation: fn returns the value for the \"x\" key. So the array is sorted based on that value. Example 3: Input: arr = [[3, 4], [5, 2], [10, 1]], fn = (x) => x[1] Output: [[10, 1], [5, 2], [3, 4]] Explanation: arr is sorted in ascending order by number at index=1.    Constraints: arr is a valid JSON array fn is a function that returns a number 1 <= arr.length <= 5 * 105",
        "2042": "Given a function fn, an array of arguments args, and an interval time t, return a cancel function cancelFn. After a delay of cancelTimeMs, the returned cancel function cancelFn will be invoked. setTimeout(cancelFn, cancelTimeMs) The function fn should be called with args immediately and then called again every t milliseconds until cancelFn is called at cancelTimeMs ms.   Example 1: Input: fn = (x) => x * 2, args = [4], t = 35 Output:  [    {\"time\": 0, \"returned\": 8},    {\"time\": 35, \"returned\": 8},    {\"time\": 70, \"returned\": 8},    {\"time\": 105, \"returned\": 8},    {\"time\": 140, \"returned\": 8},    {\"time\": 175, \"returned\": 8} ] Explanation:  const cancelTimeMs = 190; const cancelFn = cancellable((x) => x * 2, [4], 35); setTimeout(cancelFn, cancelTimeMs);  Every 35ms, fn(4) is called. Until t=190ms, then it is cancelled. 1st fn call is at 0ms. fn(4) returns 8. 2nd fn call is at 35ms. fn(4) returns 8. 3rd fn call is at 70ms. fn(4) returns 8. 4th fn call is at 105ms. fn(4) returns 8. 5th fn call is at 140ms. fn(4) returns 8. 6th fn call is at 175ms. fn(4) returns 8. Cancelled at 190ms Example 2: Input: fn = (x1, x2) => (x1 * x2), args = [2, 5], t = 30 Output:  [    {\"time\": 0, \"returned\": 10},    {\"time\": 30, \"returned\": 10},    {\"time\": 60, \"returned\": 10},    {\"time\": 90, \"returned\": 10},    {\"time\": 120, \"returned\": 10},    {\"time\": 150, \"returned\": 10} ] Explanation:  const cancelTimeMs = 165;  const cancelFn = cancellable((x1, x2) => (x1 * x2), [2, 5], 30)  setTimeout(cancelFn, cancelTimeMs)  Every 30ms, fn(2, 5) is called. Until t=165ms, then it is cancelled. 1st fn call is at 0ms  2nd fn call is at 30ms  3rd fn call is at 60ms  4th fn call is at 90ms  5th fn call is at 120ms  6th fn call is at 150ms Cancelled at 165ms Example 3: Input: fn = (x1, x2, x3) => (x1 + x2 + x3), args = [5, 1, 3], t = 50 Output:  [    {\"time\": 0, \"returned\": 9},    {\"time\": 50, \"returned\": 9},    {\"time\": 100, \"returned\": 9},    {\"time\": 150, \"returned\": 9} ] Explanation:  const cancelTimeMs = 180; const cancelFn = cancellable((x1, x2, x3) => (x1 + x2 + x3), [5, 1, 3], 50) setTimeout(cancelFn, cancelTimeMs)  Every 50ms, fn(5, 1, 3) is called. Until t=180ms, then it is cancelled.  1st fn call is at 0ms 2nd fn call is at 50ms 3rd fn call is at 100ms 4th fn call is at 150ms Cancelled at 180ms   Constraints: fn is a function args is a valid JSON array 1 <= args.length <= 10 30 <= t <= 100 10 <= cancelTimeMs <= 500",
        "2043": "Design a Calculator class. The class should provide the mathematical operations of addition, subtraction, multiplication, division, and exponentiation. It should also allow consecutive operations to be performed using method chaining. The Calculator class constructor should accept a number which serves as the initial value of result. Your Calculator class should have the following methods: add - This method adds the given number value to the result and returns the updated Calculator. subtract - This method subtracts the given number value from the result and returns the updated Calculator. multiply - This method multiplies the result  by the given number value and returns the updated Calculator. divide - This method divides the result by the given number value and returns the updated Calculator. If the passed value is 0, an error \"Division by zero is not allowed\" should be thrown. power - This method raises the result to the power of the given number value and returns the updated Calculator. getResult - This method returns the result. Solutions within 10-5 of the actual result are considered correct.   Example 1: Input:  actions = [\"Calculator\", \"add\", \"subtract\", \"getResult\"],  values = [10, 5, 7] Output: 8 Explanation:  new Calculator(10).add(5).subtract(7).getResult() // 10 + 5 - 7 = 8 Example 2: Input:  actions = [\"Calculator\", \"multiply\", \"power\", \"getResult\"],  values = [2, 5, 2] Output: 100 Explanation:  new Calculator(2).multiply(5).power(2).getResult() // (2 * 5) ^ 2 = 100 Example 3: Input:  actions = [\"Calculator\", \"divide\", \"getResult\"],  values = [20, 0] Output: \"Division by zero is not allowed\" Explanation:  new Calculator(20).divide(0).getResult() // 20 / 0   The error should be thrown because we cannot divide by zero.   Constraints: actions is a valid JSON array of strings values is a valid JSON array of numbers 2 <= actions.length <= 2 * 104 1 <= values.length <= 2 * 104 - 1 actions[i] is one of \"Calculator\", \"add\", \"subtract\", \"multiply\", \"divide\", \"power\", and \"getResult\" First action is always \"Calculator\" Last action is always \"getResult\"",
        "2044": "Given an object or an array, return if it is empty. An empty object contains no key-value pairs. An empty array contains no elements. You may assume the object or array is the output of JSON.parse.   Example 1: Input: obj = {\"x\": 5, \"y\": 42} Output: false Explanation: The object has 2 key-value pairs so it is not empty. Example 2: Input: obj = {} Output: true Explanation: The object doesn't have any key-value pairs so it is empty. Example 3: Input: obj = [null, false, 0] Output: false Explanation: The array has 3 elements so it is not empty.   Constraints: obj is a valid JSON object or array 2 <= JSON.stringify(obj).length <= 105   Can you solve it in O(1) time?",
        "2045": "You are given an integer n that consists of exactly 3 digits. We call the number n fascinating if, after the following modification, the resulting number contains all the digits from 1 to 9 exactly once and does not contain any 0's: Concatenate n with the numbers 2 * n and 3 * n. Return true if n is fascinating, or false otherwise. Concatenating two numbers means joining them together. For example, the concatenation of 121 and 371 is 121371.   Example 1: Input: n = 192 Output: true Explanation: We concatenate the numbers n = 192 and 2 * n = 384 and 3 * n = 576. The resulting number is 192384576. This number contains all the digits from 1 to 9 exactly once. Example 2: Input: n = 100 Output: false Explanation: We concatenate the numbers n = 100 and 2 * n = 200 and 3 * n = 300. The resulting number is 100200300. This number does not satisfy any of the conditions.   Constraints: 100 <= n <= 999",
        "2046": "You are given a digit string s that consists of digits from 0 to 9. A string is called semi-repetitive if there is at most one adjacent pair of the same digit. For example, \"0010\", \"002020\", \"0123\", \"2002\", and \"54944\" are semi-repetitive while the following are not: \"00101022\" (adjacent same digit pairs are 00 and 22), and \"1101234883\" (adjacent same digit pairs are 11 and 88). Return the length of the longest semi-repetitive substring of s.   Example 1: Input: s = \"52233\" Output: 4 Explanation: The longest semi-repetitive substring is \"5223\". Picking the whole string \"52233\" has two adjacent same digit pairs 22 and 33, but at most one is allowed. Example 2: Input: s = \"5494\" Output: 4 Explanation: s is a semi-repetitive string. Example 3: Input: s = \"1111111\" Output: 2 Explanation: The longest semi-repetitive substring is \"11\". Picking the substring \"111\" has two adjacent same digit pairs, but at most one is allowed.   Constraints: 1 <= s.length <= 50 '0' <= s[i] <= '9'",
        "2047": "Some robots are standing on an infinite number line with their initial coordinates given by a 0-indexed integer array nums and will start moving once given the command to move. The robots will move a unit distance each second. You are given a string s denoting the direction in which robots will move on command. 'L' means the robot will move towards the left side or negative side of the number line, whereas 'R' means the robot will move towards the right side or positive side of the number line. If two robots collide, they will start moving in opposite directions. Return the sum of distances between all the pairs of robots d seconds after the command. Since the sum can be very large, return it modulo 109 + 7. Note: For two robots at the index i and j, pair (i,j) and pair (j,i) are considered the same pair. When robots collide, they instantly change their directions without wasting any time. Collision happens when two robots share the same place in a moment. For example, if a robot is positioned in 0 going to the right and another is positioned in 2 going to the left, the next second they'll be both in 1 and they will change direction and the next second the first one will be in 0, heading left, and another will be in 2, heading right. For example, if a robot is positioned in 0 going to the right and another is positioned in 1 going to the left, the next second the first one will be in 0, heading left, and another will be in 1, heading right.   Example 1: Input: nums = [-2,0,2], s = \"RLL\", d = 3 Output: 8 Explanation:  After 1 second, the positions are [-1,-1,1]. Now, the robot at index 0 will move left, and the robot at index 1 will move right. After 2 seconds, the positions are [-2,0,0]. Now, the robot at index 1 will move left, and the robot at index 2 will move right. After 3 seconds, the positions are [-3,-1,1]. The distance between the robot at index 0 and 1 is abs(-3 - (-1)) = 2. The distance between the robot at index 0 and 2 is abs(-3 - 1) = 4. The distance between the robot at index 1 and 2 is abs(-1 - 1) = 2. The sum of the pairs of all distances = 2 + 4 + 2 = 8. Example 2: Input: nums = [1,0], s = \"RL\", d = 2 Output: 5 Explanation:  After 1 second, the positions are [2,-1]. After 2 seconds, the positions are [3,-2]. The distance between the two robots is abs(-2 - 3) = 5.   Constraints: 2 <= nums.length <= 105 -2 * 109 <= nums[i] <= 2 * 109 0 <= d <= 109 nums.length == s.length  s consists of 'L' and 'R' only nums[i] will be unique.",
        "2048": "You are given a 0-indexed m x n binary matrix grid. Let us call a non-empty subset of rows good if the sum of each column of the subset is at most half of the length of the subset. More formally, if the length of the chosen subset of rows is k, then the sum of each column should be at most floor(k / 2). Return an integer array that contains row indices of a good subset sorted in ascending order. If there are multiple good subsets, you can return any of them. If there are no good subsets, return an empty array. A subset of rows of the matrix grid is any matrix that can be obtained by deleting some (possibly none or all) rows from grid.   Example 1: Input: grid = [[0,1,1,0],[0,0,0,1],[1,1,1,1]] Output: [0,1] Explanation: We can choose the 0th and 1st rows to create a good subset of rows. The length of the chosen subset is 2. - The sum of the 0th column is 0 + 0 = 0, which is at most half of the length of the subset. - The sum of the 1st column is 1 + 0 = 1, which is at most half of the length of the subset. - The sum of the 2nd column is 1 + 0 = 1, which is at most half of the length of the subset. - The sum of the 3rd column is 0 + 1 = 1, which is at most half of the length of the subset. Example 2: Input: grid = [[0]] Output: [0] Explanation: We can choose the 0th row to create a good subset of rows. The length of the chosen subset is 1. - The sum of the 0th column is 0, which is at most half of the length of the subset. Example 3: Input: grid = [[1,1,1],[1,1,1]] Output: [] Explanation: It is impossible to choose any subset of rows to create a good subset.   Constraints: m == grid.length n == grid[i].length 1 <= m <= 104 1 <= n <= 5 grid[i][j] is either 0 or 1.",
        "2049": "Given an integer array nums containing distinct positive integers, find and return any number from the array that is neither the minimum nor the maximum value in the array, or -1 if there is no such number. Return the selected integer.   Example 1: Input: nums = [3,2,1,4] Output: 2 Explanation: In this example, the minimum value is 1 and the maximum value is 4. Therefore, either 2 or 3 can be valid answers. Example 2: Input: nums = [1,2] Output: -1 Explanation: Since there is no number in nums that is neither the maximum nor the minimum, we cannot select a number that satisfies the given condition. Therefore, there is no answer. Example 3: Input: nums = [2,1,3] Output: 2 Explanation: Since 2 is neither the maximum nor the minimum value in nums, it is the only valid answer.    Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100 All values in nums are distinct",
        "2050": "You are given a 0-indexed integer array nums of size n representing the cost of collecting different chocolates. The cost of collecting the chocolate at the index i is nums[i]. Each chocolate is of a different type, and initially, the chocolate at the index i is of ith type. In one operation, you can do the following with an incurred cost of x: Simultaneously change the chocolate of ith type to ((i + 1) mod n)th type for all chocolates. Return the minimum cost to collect chocolates of all types, given that you can perform as many operations as you would like.   Example 1: Input: nums = [20,1,15], x = 5 Output: 13 Explanation: Initially, the chocolate types are [0,1,2]. We will buy the 1st type of chocolate at a cost of 1. Now, we will perform the operation at a cost of 5, and the types of chocolates will become [1,2,0]. We will buy the 2nd type of chocolate at a cost of 1. Now, we will again perform the operation at a cost of 5, and the chocolate types will become [2,0,1]. We will buy the 0th type of chocolate at a cost of 1.  Thus, the total cost will become (1 + 5 + 1 + 5 + 1) = 13. We can prove that this is optimal. Example 2: Input: nums = [1,2,3], x = 4 Output: 6 Explanation: We will collect all three types of chocolates at their own price without performing any operations. Therefore, the total cost is 1 + 2 + 3 = 6.   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 109 1 <= x <= 109",
        "2051": "You are given two 0-indexed integer arrays nums1 and nums2, each of length n, and a 1-indexed 2D array queries where queries[i] = [xi, yi]. For the ith query, find the maximum value of nums1[j] + nums2[j] among all indices j (0 <= j < n), where nums1[j] >= xi and nums2[j] >= yi, or -1 if there is no j satisfying the constraints. Return an array answer where answer[i] is the answer to the ith query.   Example 1: Input: nums1 = [4,3,1,2], nums2 = [2,4,9,5], queries = [[4,1],[1,3],[2,5]] Output: [6,10,7] Explanation:  For the 1st query xi = 4 and yi = 1, we can select index j = 0 since nums1[j] >= 4 and nums2[j] >= 1. The sum nums1[j] + nums2[j] is 6, and we can show that 6 is the maximum we can obtain.  For the 2nd query xi = 1 and yi = 3, we can select index j = 2 since nums1[j] >= 1 and nums2[j] >= 3. The sum nums1[j] + nums2[j] is 10, and we can show that 10 is the maximum we can obtain.   For the 3rd query xi = 2 and yi = 5, we can select index j = 3 since nums1[j] >= 2 and nums2[j] >= 5. The sum nums1[j] + nums2[j] is 7, and we can show that 7 is the maximum we can obtain.  Therefore, we return [6,10,7]. Example 2: Input: nums1 = [3,2,5], nums2 = [2,3,4], queries = [[4,4],[3,2],[1,1]] Output: [9,9,9] Explanation: For this example, we can use index j = 2 for all the queries since it satisfies the constraints for each query. Example 3: Input: nums1 = [2,1], nums2 = [2,3], queries = [[3,3]] Output: [-1] Explanation: There is one query in this example with xi = 3 and yi = 3. For every index, j, either nums1[j] < xi or nums2[j] < yi. Hence, there is no solution.    Constraints: nums1.length == nums2.length  n == nums1.length  1 <= n <= 105 1 <= nums1[i], nums2[i] <= 109  1 <= queries.length <= 105 queries[i].length == 2 xi == queries[i][1] yi == queries[i][2] 1 <= xi, yi <= 109",
        "2052": "A truck has two fuel tanks. You are given two integers, mainTank representing the fuel present in the main tank in liters and additionalTank representing the fuel present in the additional tank in liters. The truck has a mileage of 10 km per liter. Whenever 5 liters of fuel get used up in the main tank, if the additional tank has at least 1 liters of fuel, 1 liters of fuel will be transferred from the additional tank to the main tank. Return the maximum distance which can be traveled. Note: Injection from the additional tank is not continuous. It happens suddenly and immediately for every 5 liters consumed.   Example 1: Input: mainTank = 5, additionalTank = 10 Output: 60 Explanation:  After spending 5 litre of fuel, fuel remaining is (5 - 5 + 1) = 1 litre and distance traveled is 50km. After spending another 1 litre of fuel, no fuel gets injected in the main tank and the main tank becomes empty. Total distance traveled is 60km. Example 2: Input: mainTank = 1, additionalTank = 2 Output: 10 Explanation:  After spending 1 litre of fuel, the main tank becomes empty. Total distance traveled is 10km.   Constraints: 1 <= mainTank, additionalTank <= 100",
        "2053": "You are given a positive integer array nums. Partition nums into two arrays, nums1 and nums2, such that: Each element of the array nums belongs to either the array nums1 or the array nums2. Both arrays are non-empty. The value of the partition is minimized. The value of the partition is |max(nums1) - min(nums2)|. Here, max(nums1) denotes the maximum element of the array nums1, and min(nums2) denotes the minimum element of the array nums2. Return the integer denoting the value of such partition.   Example 1: Input: nums = [1,3,2,4] Output: 1 Explanation: We can partition the array nums into nums1 = [1,2] and nums2 = [3,4]. - The maximum element of the array nums1 is equal to 2. - The minimum element of the array nums2 is equal to 3. The value of the partition is |2 - 3| = 1.  It can be proven that 1 is the minimum value out of all partitions. Example 2: Input: nums = [100,1,10] Output: 9 Explanation: We can partition the array nums into nums1 = [10] and nums2 = [100,1]. - The maximum element of the array nums1 is equal to 10. - The minimum element of the array nums2 is equal to 1. The value of the partition is |10 - 1| = 9. It can be proven that 9 is the minimum value out of all partitions.   Constraints: 2 <= nums.length <= 105 1 <= nums[i] <= 109",
        "2054": "You are given a 0-indexed integer array nums containing n distinct positive integers. A permutation of nums is called special if: For all indexes 0 <= i < n - 1, either nums[i] % nums[i+1] == 0 or nums[i+1] % nums[i] == 0. Return the total number of special permutations. As the answer could be large, return it modulo 109 + 7.   Example 1: Input: nums = [2,3,6] Output: 2 Explanation: [3,6,2] and [2,6,3] are the two special permutations of nums. Example 2: Input: nums = [1,4,3] Output: 2 Explanation: [3,1,4] and [4,1,3] are the two special permutations of nums.   Constraints: 2 <= nums.length <= 14 1 <= nums[i] <= 109",
        "2055": "You are given a 0-indexed array words consisting of distinct strings. The string words[i] can be paired with the string words[j] if: The string words[i] is equal to the reversed string of words[j]. 0 <= i < j < words.length. Return the maximum number of pairs that can be formed from the array words. Note that each string can belong in at most one pair.   Example 1: Input: words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"] Output: 2 Explanation: In this example, we can form 2 pair of strings in the following way: - We pair the 0th string with the 2nd string, as the reversed string of word[0] is \"dc\" and is equal to words[2]. - We pair the 1st string with the 3rd string, as the reversed string of word[1] is \"ca\" and is equal to words[3]. It can be proven that 2 is the maximum number of pairs that can be formed. Example 2: Input: words = [\"ab\",\"ba\",\"cc\"] Output: 1 Explanation: In this example, we can form 1 pair of strings in the following way: - We pair the 0th string with the 1st string, as the reversed string of words[1] is \"ab\" and is equal to words[0]. It can be proven that 1 is the maximum number of pairs that can be formed. Example 3: Input: words = [\"aa\",\"ab\"] Output: 0 Explanation: In this example, we are unable to form any pair of strings.   Constraints: 1 <= words.length <= 50 words[i].length == 2 words consists of distinct strings. words[i] contains only lowercase English letters.",
        "2056": "You are given three integers x, y, and z. You have x strings equal to \"AA\", y strings equal to \"BB\", and z strings equal to \"AB\". You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain \"AAA\" or \"BBB\" as a substring. Return the maximum possible length of the new string. A substring is a contiguous non-empty sequence of characters within a string.   Example 1: Input: x = 2, y = 5, z = 1 Output: 12 Explanation: We can concactenate the strings \"BB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AB\" in that order. Then, our new string is \"BBAABBAABBAB\".  That string has length 12, and we can show that it is impossible to construct a string of longer length. Example 2: Input: x = 3, y = 2, z = 2 Output: 14 Explanation: We can concactenate the strings \"AB\", \"AB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AA\" in that order. Then, our new string is \"ABABAABBAABBAA\".  That string has length 14, and we can show that it is impossible to construct a string of longer length.   Constraints: 1 <= x, y, z <= 50",
        "2057": "You are given a 0-indexed array words containing n strings. Let's define a join operation join(x, y) between two strings x and y as concatenating them into xy. However, if the last character of x is equal to the first character of y, one of them is deleted. For example join(\"ab\", \"ba\") = \"aba\" and join(\"ab\", \"cde\") = \"abcde\". You are to perform n - 1 join operations. Let str0 = words[0]. Starting from i = 1 up to i = n - 1, for the ith operation, you can do one of the following: Make stri = join(stri - 1, words[i]) Make stri = join(words[i], stri - 1) Your task is to minimize the length of strn - 1. Return an integer denoting the minimum possible length of strn - 1.   Example 1: Input: words = [\"aa\",\"ab\",\"bc\"] Output: 4 Explanation: In this example, we can perform join operations in the following order to minimize the length of str2:  str0 = \"aa\" str1 = join(str0, \"ab\") = \"aab\" str2 = join(str1, \"bc\") = \"aabc\"  It can be shown that the minimum possible length of str2 is 4. Example 2: Input: words = [\"ab\",\"b\"] Output: 2 Explanation: In this example, str0 = \"ab\", there are two ways to get str1:  join(str0, \"b\") = \"ab\" or join(\"b\", str0) = \"bab\".  The first string, \"ab\", has the minimum length. Hence, the answer is 2. Example 3: Input: words = [\"aaa\",\"c\",\"aba\"] Output: 6 Explanation: In this example, we can perform join operations in the following order to minimize the length of str2:  str0 = \"aaa\" str1 = join(str0, \"c\") = \"aaac\" str2 = join(\"aba\", str1) = \"abaaac\" It can be shown that the minimum possible length of str2 is 6.     Constraints: 1 <= words.length <= 1000 1 <= words[i].length <= 50 Each character in words[i] is an English lowercase letter",
        "2058": "You are given an integer n denoting the total number of servers and a 2D 0-indexed integer array logs, where logs[i] = [server_id, time] denotes that the server with id server_id received a request at time time. You are also given an integer x and a 0-indexed integer array queries. Return a 0-indexed integer array arr of length queries.length where arr[i] represents the number of servers that did not receive any requests during the time interval [queries[i] - x, queries[i]]. Note that the time intervals are inclusive.   Example 1: Input: n = 3, logs = [[1,3],[2,6],[1,5]], x = 5, queries = [10,11] Output: [1,2] Explanation:  For queries[0]: The servers with ids 1 and 2 get requests in the duration of [5, 10]. Hence, only server 3 gets zero requests. For queries[1]: Only the server with id 2 gets a request in duration of [6,11]. Hence, the servers with ids 1 and 3 are the only servers that do not receive any requests during that time period. Example 2: Input: n = 3, logs = [[2,4],[2,1],[1,2],[3,1]], x = 2, queries = [3,4] Output: [0,1] Explanation:  For queries[0]: All servers get at least one request in the duration of [1, 3]. For queries[1]: Only server with id 3 gets no request in the duration [2,4].   Constraints: 1 <= n <= 105 1 <= logs.length <= 105 1 <= queries.length <= 105 logs[i].length == 2 1 <= logs[i][0] <= n 1 <= logs[i][1] <= 106 1 <= x <= 105 x < queries[i] <= 106",
        "2059": "You are given a 0-indexed integer array nums. A pair of indices i, j where 0 <= i < j < nums.length is called beautiful if the first digit of nums[i] and the last digit of nums[j] are coprime. Return the total number of beautiful pairs in nums. Two integers x and y are coprime if there is no integer greater than 1 that divides both of them. In other words, x and y are coprime if gcd(x, y) == 1, where gcd(x, y) is the greatest common divisor of x and y.   Example 1: Input: nums = [2,5,1,4] Output: 5 Explanation: There are 5 beautiful pairs in nums: When i = 0 and j = 1: the first digit of nums[0] is 2, and the last digit of nums[1] is 5. We can confirm that 2 and 5 are coprime, since gcd(2,5) == 1. When i = 0 and j = 2: the first digit of nums[0] is 2, and the last digit of nums[2] is 1. Indeed, gcd(2,1) == 1. When i = 1 and j = 2: the first digit of nums[1] is 5, and the last digit of nums[2] is 1. Indeed, gcd(5,1) == 1. When i = 1 and j = 3: the first digit of nums[1] is 5, and the last digit of nums[3] is 4. Indeed, gcd(5,4) == 1. When i = 2 and j = 3: the first digit of nums[2] is 1, and the last digit of nums[3] is 4. Indeed, gcd(1,4) == 1. Thus, we return 5. Example 2: Input: nums = [11,21,12] Output: 2 Explanation: There are 2 beautiful pairs: When i = 0 and j = 1: the first digit of nums[0] is 1, and the last digit of nums[1] is 1. Indeed, gcd(1,1) == 1. When i = 0 and j = 2: the first digit of nums[0] is 1, and the last digit of nums[2] is 2. Indeed, gcd(1,2) == 1. Thus, we return 2.   Constraints: 2 <= nums.length <= 100 1 <= nums[i] <= 9999 nums[i] % 10 != 0",
        "2060": "You are given two integers num1 and num2. In one operation, you can choose integer i in the range [0, 60] and subtract 2i + num2 from num1. Return the integer denoting the minimum number of operations needed to make num1 equal to 0. If it is impossible to make num1 equal to 0, return -1.   Example 1: Input: num1 = 3, num2 = -2 Output: 3 Explanation: We can make 3 equal to 0 with the following operations: - We choose i = 2 and substract 22 + (-2) from 3, 3 - (4 + (-2)) = 1. - We choose i = 2 and substract 22 + (-2) from 1, 1 - (4 + (-2)) = -1. - We choose i = 0 and substract 20 + (-2) from -1, (-1) - (1 + (-2)) = 0. It can be proven, that 3 is the minimum number of operations that we need to perform. Example 2: Input: num1 = 5, num2 = 7 Output: -1 Explanation: It can be proven, that it is impossible to make 5 equal to 0 with the given operation.   Constraints: 1 <= num1 <= 109 -109 <= num2 <= 109",
        "2061": "You are given a binary array nums. A subarray of an array is good if it contains exactly one element with the value 1. Return an integer denoting the number of ways to split the array nums into good subarrays. As the number may be too large, return it modulo 109 + 7. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [0,1,0,0,1] Output: 3 Explanation: There are 3 ways to split nums into good subarrays: - [0,1] [0,0,1] - [0,1,0] [0,1] - [0,1,0,0] [1] Example 2: Input: nums = [0,1,0] Output: 1 Explanation: There is 1 way to split nums into good subarrays: - [0,1,0]   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 1",
        "2062": "There are n 1-indexed robots, each having a position on a line, health, and movement direction. You are given 0-indexed integer arrays positions, healths, and a string directions (directions[i] is either 'L' for left or 'R' for right). All integers in positions are unique. All robots start moving on the line simultaneously at the same speed in their given directions. If two robots ever share the same position while moving, they will collide. If two robots collide, the robot with lower health is removed from the line, and the health of the other robot decreases by one. The surviving robot continues in the same direction it was going. If both robots have the same health, they are both removed from the line. Your task is to determine the health of the robots that survive the collisions, in the same order that the robots were given, i.e. final health of robot 1 (if survived), final health of robot 2 (if survived), and so on. If there are no survivors, return an empty array. Return an array containing the health of the remaining robots (in the order they were given in the input), after no further collisions can occur. Note: The positions may be unsorted.     Example 1: Input: positions = [5,4,3,2,1], healths = [2,17,9,15,10], directions = \"RRRRR\" Output: [2,17,9,15,10] Explanation: No collision occurs in this example, since all robots are moving in the same direction. So, the health of the robots in order from the first robot is returned, [2, 17, 9, 15, 10]. Example 2: Input: positions = [3,5,2,6], healths = [10,10,15,12], directions = \"RLRL\" Output: [14] Explanation: There are 2 collisions in this example. Firstly, robot 1 and robot 2 will collide, and since both have the same health, they will be removed from the line. Next, robot 3 and robot 4 will collide and since robot 4's health is smaller, it gets removed, and robot 3's health becomes 15 - 1 = 14. Only robot 3 remains, so we return [14]. Example 3: Input: positions = [1,2,5,6], healths = [10,10,11,11], directions = \"RLRL\" Output: [] Explanation: Robot 1 and robot 2 will collide and since both have the same health, they are both removed. Robot 3 and 4 will collide and since both have the same health, they are both removed. So, we return an empty array, [].   Constraints: 1 <= positions.length == healths.length == directions.length == n <= 105 1 <= positions[i], healths[i] <= 109 directions[i] == 'L' or directions[i] == 'R' All values in positions are distinct",
        "2063": "You are given a 0-indexed integer array nums and an integer threshold. Find the length of the longest subarray of nums starting at index l and ending at index r (0 <= l <= r < nums.length) that satisfies the following conditions: nums[l] % 2 == 0 For all indices i in the range [l, r - 1], nums[i] % 2 != nums[i + 1] % 2 For all indices i in the range [l, r], nums[i] <= threshold Return an integer denoting the length of the longest such subarray. Note: A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [3,2,5,4], threshold = 5 Output: 3 Explanation: In this example, we can select the subarray that starts at l = 1 and ends at r = 3 => [2,5,4]. This subarray satisfies the conditions. Hence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length. Example 2: Input: nums = [1,2], threshold = 2 Output: 1 Explanation: In this example, we can select the subarray that starts at l = 1 and ends at r = 1 => [2].  It satisfies all the conditions and we can show that 1 is the maximum possible achievable length. Example 3: Input: nums = [2,3,4,5], threshold = 4 Output: 3 Explanation: In this example, we can select the subarray that starts at l = 0 and ends at r = 2 => [2,3,4].  It satisfies all the conditions. Hence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.   Constraints: 1 <= nums.length <= 100  1 <= nums[i] <= 100  1 <= threshold <= 100",
        "2064": "You are given an integer n. We say that two integers x and y form a prime number pair if: 1 <= x <= y <= n x + y == n x and y are prime numbers Return the 2D sorted list of prime number pairs [xi, yi]. The list should be sorted in increasing order of xi. If there are no prime number pairs at all, return an empty array. Note: A prime number is a natural number greater than 1 with only two factors, itself and 1.   Example 1: Input: n = 10 Output: [[3,7],[5,5]] Explanation: In this example, there are two prime pairs that satisfy the criteria.  These pairs are [3,7] and [5,5], and we return them in the sorted order as described in the problem statement. Example 2: Input: n = 2 Output: [] Explanation: We can show that there is no prime number pair that gives a sum of 2, so we return an empty array.    Constraints: 1 <= n <= 106",
        "2065": "You are given a 0-indexed integer array nums. A subarray of nums is called continuous if: Let i, i + 1, ..., j be the indices in the subarray. Then, for each pair of indices i <= i1, i2 <= j, 0 <= |nums[i1] - nums[i2]| <= 2. Return the total number of continuous subarrays. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [5,4,2,4] Output: 8 Explanation:  Continuous subarray of size 1: [5], [4], [2], [4]. Continuous subarray of size 2: [5,4], [4,2], [2,4]. Continuous subarray of size 3: [4,2,4]. Thereare no subarrys of size 4. Total continuous subarrays = 4 + 3 + 1 = 8. It can be shown that there are no more continuous subarrays.   Example 2: Input: nums = [1,2,3] Output: 6 Explanation:  Continuous subarray of size 1: [1], [2], [3]. Continuous subarray of size 2: [1,2], [2,3]. Continuous subarray of size 3: [1,2,3]. Total continuous subarrays = 3 + 2 + 1 = 6.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109",
        "2066": "You are given a 0-indexed integer array nums. A subarray s of length m is called alternating if: m is greater than 1. s1 = s0 + 1. The 0-indexed subarray s looks like [s0, s1, s0, s1,...,s(m-1) % 2]. In other words, s1 - s0 = 1, s2 - s1 = -1, s3 - s2 = 1, s4 - s3 = -1, and so on up to s[m - 1] - s[m - 2] = (-1)m. Return the maximum length of all alternating subarrays present in nums or -1 if no such subarray exists. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [2,3,4,3,4] Output: 4 Explanation: The alternating subarrays are [2, 3], [3,4], [3,4,3], and [3,4,3,4]. The longest of these is [3,4,3,4], which is of length 4. Example 2: Input: nums = [4,5,6] Output: 2 Explanation: [4,5] and [5,6] are the only two alternating subarrays. They are both of length 2.   Constraints: 2 <= nums.length <= 100 1 <= nums[i] <= 104",
        "2067": "You are given a 0-indexed integer array nums representing the initial positions of some marbles. You are also given two 0-indexed integer arrays moveFrom and moveTo of equal length. Throughout moveFrom.length steps, you will change the positions of the marbles. On the ith step, you will move all marbles at position moveFrom[i] to position moveTo[i]. After completing all the steps, return the sorted list of occupied positions. Notes: We call a position occupied if there is at least one marble in that position. There may be multiple marbles in a single position.   Example 1: Input: nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5] Output: [5,6,8,9] Explanation: Initially, the marbles are at positions 1,6,7,8. At the i = 0th step, we move the marbles at position 1 to position 2. Then, positions 2,6,7,8 are occupied. At the i = 1st step, we move the marbles at position 7 to position 9. Then, positions 2,6,8,9 are occupied. At the i = 2nd step, we move the marbles at position 2 to position 5. Then, positions 5,6,8,9 are occupied. At the end, the final positions containing at least one marbles are [5,6,8,9]. Example 2: Input: nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2] Output: [2] Explanation: Initially, the marbles are at positions [1,1,3,3]. At the i = 0th step, we move all the marbles at position 1 to position 2. Then, the marbles are at positions [2,2,3,3]. At the i = 1st step, we move all the marbles at position 3 to position 2. Then, the marbles are at positions [2,2,2,2]. Since 2 is the only occupied position, we return [2].   Constraints: 1 <= nums.length <= 105 1 <= moveFrom.length <= 105 moveFrom.length == moveTo.length 1 <= nums[i], moveFrom[i], moveTo[i] <= 109 The test cases are generated such that there is at least a marble in moveFrom[i] at the moment we want to apply the ith move.",
        "2068": "Given a binary string s, partition the string into one or more substrings such that each substring is beautiful. A string is beautiful if: It doesn't contain leading zeros. It's the binary representation of a number that is a power of 5. Return the minimum number of substrings in such partition. If it is impossible to partition the string s into beautiful substrings, return -1. A substring is a contiguous sequence of characters in a string.   Example 1: Input: s = \"1011\" Output: 2 Explanation: We can paritition the given string into [\"101\", \"1\"]. - The string \"101\" does not contain leading zeros and is the binary representation of integer 51 = 5. - The string \"1\" does not contain leading zeros and is the binary representation of integer 50 = 1. It can be shown that 2 is the minimum number of beautiful substrings that s can be partitioned into. Example 2: Input: s = \"111\" Output: 3 Explanation: We can paritition the given string into [\"1\", \"1\", \"1\"]. - The string \"1\" does not contain leading zeros and is the binary representation of integer 50 = 1. It can be shown that 3 is the minimum number of beautiful substrings that s can be partitioned into. Example 3: Input: s = \"0\" Output: -1 Explanation: We can not partition the given string into beautiful substrings.   Constraints: 1 <= s.length <= 15 s[i] is either '0' or '1'.",
        "2069": "You are given two integers m and n representing the dimensions of a 0-indexed m x n grid. You are also given a 0-indexed 2D integer matrix coordinates, where coordinates[i] = [x, y] indicates that the cell with coordinates [x, y] is colored black. All cells in the grid that do not appear in coordinates are white. A block is defined as a 2 x 2 submatrix of the grid. More formally, a block with cell [x, y] as its top-left corner where 0 <= x < m - 1 and 0 <= y < n - 1 contains the coordinates [x, y], [x + 1, y], [x, y + 1], and [x + 1, y + 1]. Return a 0-indexed integer array arr of size 5 such that arr[i] is the number of blocks that contains exactly i black cells.   Example 1: Input: m = 3, n = 3, coordinates = [[0,0]] Output: [3,1,0,0,0] Explanation: The grid looks like this: There is only 1 block with one black cell, and it is the block starting with cell [0,0]. The other 3 blocks start with cells [0,1], [1,0] and [1,1]. They all have zero black cells.  Thus, we return [3,1,0,0,0].  Example 2: Input: m = 3, n = 3, coordinates = [[0,0],[1,1],[0,2]] Output: [0,2,2,0,0] Explanation: The grid looks like this: There are 2 blocks with two black cells (the ones starting with cell coordinates [0,0] and [0,1]). The other 2 blocks have starting cell coordinates of [1,0] and [1,1]. They both have 1 black cell. Therefore, we return [0,2,2,0,0].   Constraints: 2 <= m <= 105 2 <= n <= 105 0 <= coordinates.length <= 104 coordinates[i].length == 2 0 <= coordinates[i][0] < m 0 <= coordinates[i][1] < n It is guaranteed that coordinates contains pairwise distinct coordinates.",
        "2070": "Given two integers, num and t. A number is achievable if it can become equal to num after applying the following operation: Increase or decrease the number by 1, and simultaneously increase or decrease num by 1. Return the maximum achievable number after applying the operation at most t times.   Example 1: Input: num = 4, t = 1 Output: 6 Explanation: Apply the following operation once to make the maximum achievable number equal to num: Decrease the maximum achievable number by 1, and increase num by 1. Example 2: Input: num = 3, t = 2 Output: 7 Explanation: Apply the following operation twice to make the maximum achievable number equal to num: Decrease the maximum achievable number by 1, and increase num by 1.   Constraints: 1 <= num, t <= 50",
        "2071": "You are given a 0-indexed array nums of n integers and an integer target. You are initially positioned at index 0. In one step, you can jump from index i to any index j such that: 0 <= i < j < n -target <= nums[j] - nums[i] <= target Return the maximum number of jumps you can make to reach index n - 1. If there is no way to reach index n - 1, return -1.   Example 1: Input: nums = [1,3,6,4,1,2], target = 2 Output: 3 Explanation: To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence: - Jump from index 0 to index 1.  - Jump from index 1 to index 3. - Jump from index 3 to index 5. It can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 3 jumps. Hence, the answer is 3.  Example 2: Input: nums = [1,3,6,4,1,2], target = 3 Output: 5 Explanation: To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence: - Jump from index 0 to index 1. - Jump from index 1 to index 2. - Jump from index 2 to index 3. - Jump from index 3 to index 4. - Jump from index 4 to index 5. It can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 5 jumps. Hence, the answer is 5.  Example 3: Input: nums = [1,3,6,4,1,2], target = 0 Output: -1 Explanation: It can be proven that there is no jumping sequence that goes from 0 to n - 1. Hence, the answer is -1.    Constraints: 2 <= nums.length == n <= 1000 -109 <= nums[i] <= 109 0 <= target <= 2 * 109",
        "2072": "You are given two 0-indexed integer arrays nums1 and nums2 of length n. Let's define another 0-indexed integer array, nums3, of length n. For each index i in the range [0, n - 1], you can assign either nums1[i] or nums2[i] to nums3[i]. Your task is to maximize the length of the longest non-decreasing subarray in nums3 by choosing its values optimally. Return an integer representing the length of the longest non-decreasing subarray in nums3. Note: A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums1 = [2,3,1], nums2 = [1,2,1] Output: 2 Explanation: One way to construct nums3 is:  nums3 = [nums1[0], nums2[1], nums2[2]] => [2,2,1].  The subarray starting from index 0 and ending at index 1, [2,2], forms a non-decreasing subarray of length 2.  We can show that 2 is the maximum achievable length. Example 2: Input: nums1 = [1,3,2,1], nums2 = [2,2,3,4] Output: 4 Explanation: One way to construct nums3 is:  nums3 = [nums1[0], nums2[1], nums2[2], nums2[3]] => [1,2,3,4].  The entire array forms a non-decreasing subarray of length 4, making it the maximum achievable length. Example 3: Input: nums1 = [1,1], nums2 = [2,2] Output: 2 Explanation: One way to construct nums3 is:  nums3 = [nums1[0], nums1[1]] => [1,1].  The entire array forms a non-decreasing subarray of length 2, making it the maximum achievable length.   Constraints: 1 <= nums1.length == nums2.length == n <= 105 1 <= nums1[i], nums2[i] <= 109",
        "2073": "You are given a 1-indexed integer array nums of length n. An element nums[i] of nums is called special if i divides n, i.e. n % i == 0. Return the sum of the squares of all special elements of nums.   Example 1: Input: nums = [1,2,3,4] Output: 21 Explanation: There are exactly 3 special elements in nums: nums[1] since 1 divides 4, nums[2] since 2 divides 4, and nums[4] since 4 divides 4.  Hence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[4] * nums[4] = 1 * 1 + 2 * 2 + 4 * 4 = 21.   Example 2: Input: nums = [2,7,1,19,18,3] Output: 63 Explanation: There are exactly 4 special elements in nums: nums[1] since 1 divides 6, nums[2] since 2 divides 6, nums[3] since 3 divides 6, and nums[6] since 6 divides 6.  Hence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[3] * nums[3] + nums[6] * nums[6] = 2 * 2 + 7 * 7 + 1 * 1 + 3 * 3 = 63.    Constraints: 1 <= nums.length == n <= 50 1 <= nums[i] <= 50",
        "2074": "You are given a 0-indexed array nums and a non-negative integer k. In one operation, you can do the following: Choose an index i that hasn't been chosen before from the range [0, nums.length - 1]. Replace nums[i] with any integer from the range [nums[i] - k, nums[i] + k]. The beauty of the array is the length of the longest subsequence consisting of equal elements. Return the maximum possible beauty of the array nums after applying the operation any number of times. Note that you can apply the operation to each index only once. A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.   Example 1: Input: nums = [4,6,1,2], k = 2 Output: 3 Explanation: In this example, we apply the following operations: - Choose index 1, replace it with 4 (from range [4,8]), nums = [4,4,1,2]. - Choose index 3, replace it with 4 (from range [0,4]), nums = [4,4,1,4]. After the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3). It can be proven that 3 is the maximum possible length we can achieve. Example 2: Input: nums = [1,1,1,1], k = 10 Output: 4 Explanation: In this example we don't have to apply any operations. The beauty of the array nums is 4 (whole array).   Constraints: 1 <= nums.length <= 105 0 <= nums[i], k <= 105",
        "2075": "An element x of an integer array arr of length m is dominant if freq(x) * 2 > m, where freq(x) is the number of occurrences of x in arr. Note that this definition implies that arr can have at most one dominant element. You are given a 0-indexed integer array nums of length n with one dominant element. You can split nums at an index i into two arrays nums[0, ..., i] and nums[i + 1, ..., n - 1], but the split is only valid if: 0 <= i < n - 1 nums[0, ..., i], and nums[i + 1, ..., n - 1] have the same dominant element. Here, nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j, both ends being inclusive. Particularly, if j < i then nums[i, ..., j] denotes an empty subarray. Return the minimum index of a valid split. If no valid split exists, return -1.   Example 1: Input: nums = [1,2,2,2] Output: 2 Explanation: We can split the array at index 2 to obtain arrays [1,2,2] and [2].  In array [1,2,2], element 2 is dominant since it occurs twice in the array and 2 * 2 > 3.  In array [2], element 2 is dominant since it occurs once in the array and 1 * 2 > 1. Both [1,2,2] and [2] have the same dominant element as nums, so this is a valid split.  It can be shown that index 2 is the minimum index of a valid split.  Example 2: Input: nums = [2,1,3,1,1,1,7,1,2,1] Output: 4 Explanation: We can split the array at index 4 to obtain arrays [2,1,3,1,1] and [1,7,1,2,1]. In array [2,1,3,1,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5. In array [1,7,1,2,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5. Both [2,1,3,1,1] and [1,7,1,2,1] have the same dominant element as nums, so this is a valid split. It can be shown that index 4 is the minimum index of a valid split. Example 3: Input: nums = [3,3,3,3,7,2,2] Output: -1 Explanation: It can be shown that there is no valid split.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 nums has exactly one dominant element.",
        "2076": "You are given a string word and an array of strings forbidden. A string is called valid if none of its substrings are present in forbidden. Return the length of the longest valid substring of the string word. A substring is a contiguous sequence of characters in a string, possibly empty.   Example 1: Input: word = \"cbaaaabc\", forbidden = [\"aaa\",\"cb\"] Output: 4 Explanation: There are 11 valid substrings in word: \"c\", \"b\", \"a\", \"ba\", \"aa\", \"bc\", \"baa\", \"aab\", \"ab\", \"abc\" and \"aabc\". The length of the longest valid substring is 4.  It can be shown that all other substrings contain either \"aaa\" or \"cb\" as a substring.  Example 2: Input: word = \"leetcode\", forbidden = [\"de\",\"le\",\"e\"] Output: 4 Explanation: There are 11 valid substrings in word: \"l\", \"t\", \"c\", \"o\", \"d\", \"tc\", \"co\", \"od\", \"tco\", \"cod\", and \"tcod\". The length of the longest valid substring is 4. It can be shown that all other substrings contain either \"de\", \"le\", or \"e\" as a substring.    Constraints: 1 <= word.length <= 105 word consists only of lowercase English letters. 1 <= forbidden.length <= 105 1 <= forbidden[i].length <= 10 forbidden[i] consists only of lowercase English letters.",
        "2077": "You are given an integer array nums. We consider an array good if it is a permutation of an array base[n]. base[n] = [1, 2, ..., n - 1, n, n] (in other words, it is an array of length n + 1 which contains 1 to n - 1 exactly once, plus two occurrences of n). For example, base[1] = [1, 1] and base[3] = [1, 2, 3, 3]. Return true if the given array is good, otherwise return false. Note: A permutation of integers represents an arrangement of these numbers.   Example 1: Input: nums = [2, 1, 3] Output: false Explanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. However, base[3] has four elements but array nums has three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false. Example 2: Input: nums = [1, 3, 3, 2] Output: true Explanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. It can be seen that nums is a permutation of base[3] = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we reach base[3]). Therefore, the answer is true. Example 3: Input: nums = [1, 1] Output: true Explanation: Since the maximum element of the array is 1, the only candidate n for which this array could be a permutation of base[n], is n = 1. It can be seen that nums is a permutation of base[1] = [1, 1]. Therefore, the answer is true. Example 4: Input: nums = [3, 4, 4, 1, 2, 1] Output: false Explanation: Since the maximum element of the array is 4, the only candidate n for which this array could be a permutation of base[n], is n = 4. However, base[4] has five elements but array nums has six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4, 4]. So the answer is false.   Constraints: 1 <= nums.length <= 100 1 <= num[i] <= 200",
        "2078": "Given a 0-indexed string s, permute s to get a new string t such that: All consonants remain in their original places. More formally, if there is an index i with 0 <= i < s.length such that s[i] is a consonant, then t[i] = s[i]. The vowels must be sorted in the nondecreasing order of their ASCII values. More formally, for pairs of indices i, j with 0 <= i < j < s.length such that s[i] and s[j] are vowels, then t[i] must not have a higher ASCII value than t[j]. Return the resulting string. The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.   Example 1: Input: s = \"lEetcOde\" Output: \"lEOtcede\" Explanation: 'E', 'O', and 'e' are the vowels in s; 'l', 't', 'c', and 'd' are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places. Example 2: Input: s = \"lYmpH\" Output: \"lYmpH\" Explanation: There are no vowels in s (all characters in s are consonants), so we return \"lYmpH\".   Constraints: 1 <= s.length <= 105 s consists only of letters of the English alphabet in uppercase and lowercase.",
        "2079": "You are given a 0-indexed integer array nums and a positive integer x. You are initially at position 0 in the array and you can visit other positions according to the following rules: If you are currently in position i, then you can move to any position j such that i < j. For each position i that you visit, you get a score of nums[i]. If you move from a position i to a position j and the parities of nums[i] and nums[j] differ, then you lose a score of x. Return the maximum total score you can get. Note that initially you have nums[0] points.   Example 1: Input: nums = [2,3,6,1,9,2], x = 5 Output: 13 Explanation: We can visit the following positions in the array: 0 -> 2 -> 3 -> 4. The corresponding values are 2, 6, 1 and 9. Since the integers 6 and 1 have different parities, the move 2 -> 3 will make you lose a score of x = 5. The total score will be: 2 + 6 + 1 + 9 - 5 = 13. Example 2: Input: nums = [2,4,6,8], x = 3 Output: 20 Explanation: All the integers in the array have the same parities, so we can visit all of them without losing any score. The total score is: 2 + 4 + 6 + 8 = 20.   Constraints: 2 <= nums.length <= 105 1 <= nums[i], x <= 106",
        "2080": "Given two positive integers n and x. Return the number of ways n can be expressed as the sum of the xth power of unique positive integers, in other words, the number of sets of unique integers [n1, n2, ..., nk] where n = n1x + n2x + ... + nkx. Since the result can be very large, return it modulo 109 + 7. For example, if n = 160 and x = 3, one way to express n is n = 23 + 33 + 53.   Example 1: Input: n = 10, x = 2 Output: 1 Explanation: We can express n as the following: n = 32 + 12 = 10. It can be shown that it is the only way to express 10 as the sum of the 2nd power of unique integers. Example 2: Input: n = 4, x = 1 Output: 2 Explanation: We can express n in the following ways: - n = 41 = 4. - n = 31 + 11 = 4.   Constraints: 1 <= n <= 300 1 <= x <= 5",
        "2081": "Given an array of strings words and a character separator, split each string in words by separator. Return an array of strings containing the new strings formed after the splits, excluding empty strings. Notes separator is used to determine where the split should occur, but it is not included as part of the resulting strings. A split may result in more than two strings. The resulting strings must maintain the same order as they were initially given.   Example 1: Input: words = [\"one.two.three\",\"four.five\",\"six\"], separator = \".\" Output: [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"] Explanation: In this example we split as follows:  \"one.two.three\" splits into \"one\", \"two\", \"three\" \"four.five\" splits into \"four\", \"five\" \"six\" splits into \"six\"   Hence, the resulting array is [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"]. Example 2: Input: words = [\"$easy$\",\"$problem$\"], separator = \"$\" Output: [\"easy\",\"problem\"] Explanation: In this example we split as follows:   \"$easy$\" splits into \"easy\" (excluding empty strings) \"$problem$\" splits into \"problem\" (excluding empty strings)  Hence, the resulting array is [\"easy\",\"problem\"]. Example 3: Input: words = [\"|||\"], separator = \"|\" Output: [] Explanation: In this example the resulting split of \"|||\" will contain only empty strings, so we return an empty array [].    Constraints: 1 <= words.length <= 100 1 <= words[i].length <= 20 characters in words[i] are either lowercase English letters or characters from the string \".,|$#@\" (excluding the quotes) separator is a character from the string \".,|$#@\" (excluding the quotes)",
        "2082": "You are given a 0-indexed array nums consisting of positive integers. You can do the following operation on the array any number of times: Choose an integer i such that 0 <= i < nums.length - 1 and nums[i] <= nums[i + 1]. Replace the element nums[i + 1] with nums[i] + nums[i + 1] and delete the element nums[i] from the array. Return the value of the largest element that you can possibly obtain in the final array.   Example 1: Input: nums = [2,3,7,9,3] Output: 21 Explanation: We can apply the following operations on the array: - Choose i = 0. The resulting array will be nums = [5,7,9,3]. - Choose i = 1. The resulting array will be nums = [5,16,3]. - Choose i = 0. The resulting array will be nums = [21,3]. The largest element in the final array is 21. It can be shown that we cannot obtain a larger element. Example 2: Input: nums = [5,3,3] Output: 11 Explanation: We can do the following operations on the array: - Choose i = 1. The resulting array will be nums = [5,6]. - Choose i = 0. The resulting array will be nums = [11]. There is only one element in the final array, which is 11.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 106",
        "2083": "You are given a 0-indexed array usageLimits of length n. Your task is to create groups using numbers from 0 to n - 1, ensuring that each number, i, is used no more than usageLimits[i] times in total across all groups. You must also satisfy the following conditions: Each group must consist of distinct numbers, meaning that no duplicate numbers are allowed within a single group. Each group (except the first one) must have a length strictly greater than the previous group. Return an integer denoting the maximum number of groups you can create while satisfying these conditions.   Example 1: Input: usageLimits = [1,2,5] Output: 3 Explanation: In this example, we can use 0 at most once, 1 at most twice, and 2 at most five times. One way of creating the maximum number of groups while satisfying the conditions is:  Group 1 contains the number [2]. Group 2 contains the numbers [1,2]. Group 3 contains the numbers [0,1,2].  It can be shown that the maximum number of groups is 3.  So, the output is 3.  Example 2: Input: usageLimits = [2,1,2] Output: 2 Explanation: In this example, we can use 0 at most twice, 1 at most once, and 2 at most twice. One way of creating the maximum number of groups while satisfying the conditions is: Group 1 contains the number [0]. Group 2 contains the numbers [1,2]. It can be shown that the maximum number of groups is 2. So, the output is 2.  Example 3: Input: usageLimits = [1,1] Output: 1 Explanation: In this example, we can use both 0 and 1 at most once. One way of creating the maximum number of groups while satisfying the conditions is: Group 1 contains the number [0]. It can be shown that the maximum number of groups is 1. So, the output is 1.    Constraints: 1 <= usageLimits.length <= 105 1 <= usageLimits[i] <= 109",
        "2084": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1. You are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored. Return the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome. A string is a palindrome when it reads the same backwards as forwards.   Example 1: Input: parent = [-1,0,0,1,1,2], s = \"acaabc\" Output: 8 Explanation: The valid pairs are: - All the pairs (0,1), (0,2), (1,3), (1,4) and (2,5) result in one character which is always a palindrome. - The pair (2,3) result in the string \"aca\" which is a palindrome. - The pair (1,5) result in the string \"cac\" which is a palindrome. - The pair (3,5) result in the string \"acac\" which can be rearranged into the palindrome \"acca\". Example 2: Input: parent = [-1,0,0,0,0], s = \"aaaaa\" Output: 10 Explanation: Any pair of nodes (u,v) where u < v is valid.   Constraints: n == parent.length == s.length 1 <= n <= 105 0 <= parent[i] <= n - 1 for all i >= 1 parent[0] == -1 parent represents a valid tree. s consists of only lowercase English letters.",
        "2085": "There are n employees in a company, numbered from 0 to n - 1. Each employee i has worked for hours[i] hours in the company. The company requires each employee to work for at least target hours. You are given a 0-indexed array of non-negative integers hours of length n and a non-negative integer target. Return the integer denoting the number of employees who worked at least target hours.   Example 1: Input: hours = [0,1,2,3,4], target = 2 Output: 3 Explanation: The company wants each employee to work for at least 2 hours. - Employee 0 worked for 0 hours and didn't meet the target. - Employee 1 worked for 1 hours and didn't meet the target. - Employee 2 worked for 2 hours and met the target. - Employee 3 worked for 3 hours and met the target. - Employee 4 worked for 4 hours and met the target. There are 3 employees who met the target. Example 2: Input: hours = [5,1,4,2,2], target = 6 Output: 0 Explanation: The company wants each employee to work for at least 6 hours. There are 0 employees who met the target.   Constraints: 1 <= n == hours.length <= 50 0 <= hours[i], target <= 105",
        "2086": "You are given an array nums consisting of positive integers. We call a subarray of an array complete if the following condition is satisfied: The number of distinct elements in the subarray is equal to the number of distinct elements in the whole array. Return the number of complete subarrays. A subarray is a contiguous non-empty part of an array.   Example 1: Input: nums = [1,3,1,2,2] Output: 4 Explanation: The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2]. Example 2: Input: nums = [5,5,5,5] Output: 10 Explanation: The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10.   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 2000",
        "2087": "Given three strings a, b, and c, your task is to find a string that has the minimum length and contains all three strings as substrings. If there are multiple such strings, return the lexicographically smallest one. Return a string denoting the answer to the problem. Notes A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. A substring is a contiguous sequence of characters within a string.   Example 1: Input: a = \"abc\", b = \"bca\", c = \"aaa\" Output: \"aaabca\" Explanation:  We show that \"aaabca\" contains all the given strings: a = ans[2...4], b = ans[3..5], c = ans[0..2]. It can be shown that the length of the resulting string would be at least 6 and \"aaabca\" is the lexicographically smallest one. Example 2: Input: a = \"ab\", b = \"ba\", c = \"aba\" Output: \"aba\" Explanation: We show that the string \"aba\" contains all the given strings: a = ans[0..1], b = ans[1..2], c = ans[0..2]. Since the length of c is 3, the length of the resulting string would be at least 3. It can be shown that \"aba\" is the lexicographically smallest one.   Constraints: 1 <= a.length, b.length, c.length <= 100 a, b, c consist only of lowercase English letters.",
        "2088": "Given two positive integers low and high represented as strings, find the count of stepping numbers in the inclusive range [low, high]. A stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly 1. Return an integer denoting the count of stepping numbers in the inclusive range [low, high]. Since the answer may be very large, return it modulo 109 + 7. Note: A stepping number should not have a leading zero.   Example 1: Input: low = \"1\", high = \"11\" Output: 10 Explanation: The stepping numbers in the range [1,11] are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. There are a total of 10 stepping numbers in the range. Hence, the output is 10. Example 2: Input: low = \"90\", high = \"101\" Output: 2 Explanation: The stepping numbers in the range [90,101] are 98 and 101. There are a total of 2 stepping numbers in the range. Hence, the output is 2.    Constraints: 1 <= int(low) <= int(high) < 10100 1 <= low.length, high.length <= 100 low and high consist of only digits. low and high don't have any leading zeros.",
        "2089": "Initially, you have a bank account balance of 100 dollars. You are given an integer purchaseAmount representing the amount you will spend on a purchase in dollars, in other words, its price. When making the purchase, first the purchaseAmount is rounded to the nearest multiple of 10. Let us call this value roundedAmount. Then, roundedAmount dollars are removed from your bank account. Return an integer denoting your final bank account balance after this purchase. Notes: 0 is considered to be a multiple of 10 in this problem. When rounding, 5 is rounded upward (5 is rounded to 10, 15 is rounded to 20, 25 to 30, and so on).   Example 1: Input: purchaseAmount = 9 Output: 90 Explanation: The nearest multiple of 10 to 9 is 10. So your account balance becomes 100 - 10 = 90. Example 2: Input: purchaseAmount = 15 Output: 80 Explanation: The nearest multiple of 10 to 15 is 20. So your account balance becomes 100 - 20 = 80. Example 3: Input: purchaseAmount = 10 Output: 90 Explanation: 10 is a multiple of 10 itself. So your account balance becomes 100 - 10 = 90.   Constraints: 0 <= purchaseAmount <= 100",
        "2090": "Given the head of a linked list head, in which each node contains an integer value. Between every pair of adjacent nodes, insert a new node with a value equal to the greatest common divisor of them. Return the linked list after insertion. The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.   Example 1: Input: head = [18,6,10,3] Output: [18,6,6,2,10,1,3] Explanation: The 1st diagram denotes the initial linked list and the 2nd diagram denotes the linked list after inserting the new nodes (nodes in blue are the inserted nodes). - We insert the greatest common divisor of 18 and 6 = 6 between the 1st and the 2nd nodes. - We insert the greatest common divisor of 6 and 10 = 2 between the 2nd and the 3rd nodes. - We insert the greatest common divisor of 10 and 3 = 1 between the 3rd and the 4th nodes. There are no more adjacent nodes, so we return the linked list. Example 2: Input: head = [7] Output: [7] Explanation: The 1st diagram denotes the initial linked list and the 2nd diagram denotes the linked list after inserting the new nodes. There are no pairs of adjacent nodes, so we return the initial linked list.   Constraints: The number of nodes in the list is in the range [1, 5000]. 1 <= Node.val <= 1000",
        "2091": "You are given a 0-indexed array nums containing n integers. At each second, you perform the following operation on the array: For every index i in the range [0, n - 1], replace nums[i] with either nums[i], nums[(i - 1 + n) % n], or nums[(i + 1) % n]. Note that all the elements get replaced simultaneously. Return the minimum number of seconds needed to make all elements in the array nums equal.   Example 1: Input: nums = [1,2,1,2] Output: 1 Explanation: We can equalize the array in 1 second in the following way: - At 1st second, replace values at each index with [nums[3],nums[1],nums[3],nums[3]]. After replacement, nums = [2,2,2,2]. It can be proven that 1 second is the minimum amount of seconds needed for equalizing the array. Example 2: Input: nums = [2,1,3,3,2] Output: 2 Explanation: We can equalize the array in 2 seconds in the following way: - At 1st second, replace values at each index with [nums[0],nums[2],nums[2],nums[2],nums[3]]. After replacement, nums = [2,3,3,3,3]. - At 2nd second, replace values at each index with [nums[1],nums[1],nums[2],nums[3],nums[4]]. After replacement, nums = [3,3,3,3,3]. It can be proven that 2 seconds is the minimum amount of seconds needed for equalizing the array. Example 3: Input: nums = [5,5,5,5] Output: 0 Explanation: We don't need to perform any operations as all elements in the initial array are the same.   Constraints: 1 <= n == nums.length <= 105 1 <= nums[i] <= 109",
        "2092": "You are given two 0-indexed integer arrays nums1 and nums2 of equal length. Every second, for all indices 0 <= i < nums1.length, value of nums1[i] is incremented by nums2[i]. After this is done, you can do the following operation: Choose an index 0 <= i < nums1.length and make nums1[i] = 0. You are also given an integer x. Return the minimum time in which you can make the sum of all elements of nums1 to be less than or equal to x, or -1 if this is not possible.   Example 1: Input: nums1 = [1,2,3], nums2 = [1,2,3], x = 4 Output: 3 Explanation:  For the 1st second, we apply the operation on i = 0. Therefore nums1 = [0,2+2,3+3] = [0,4,6].  For the 2nd second, we apply the operation on i = 1. Therefore nums1 = [0+1,0,6+3] = [1,0,9].  For the 3rd second, we apply the operation on i = 2. Therefore nums1 = [1+1,0+2,0] = [2,2,0].  Now sum of nums1 = 4. It can be shown that these operations are optimal, so we return 3. Example 2: Input: nums1 = [1,2,3], nums2 = [3,3,3], x = 4 Output: -1 Explanation: It can be shown that the sum of nums1 will always be greater than x, no matter which operations are performed.   Constraints: 1 <= nums1.length <= 103 1 <= nums1[i] <= 103 0 <= nums2[i] <= 103 nums1.length == nums2.length 0 <= x <= 106",
        "2093": "Your laptop keyboard is faulty, and whenever you type a character 'i' on it, it reverses the string that you have written. Typing other characters works as expected. You are given a 0-indexed string s, and you type each character of s using your faulty keyboard. Return the final string that will be present on your laptop screen.   Example 1: Input: s = \"string\" Output: \"rtsng\" Explanation:  After typing first character, the text on the screen is \"s\". After the second character, the text is \"st\".  After the third character, the text is \"str\". Since the fourth character is an 'i', the text gets reversed and becomes \"rts\". After the fifth character, the text is \"rtsn\".  After the sixth character, the text is \"rtsng\".  Therefore, we return \"rtsng\". Example 2: Input: s = \"poiinter\" Output: \"ponter\" Explanation:  After the first character, the text on the screen is \"p\". After the second character, the text is \"po\".  Since the third character you type is an 'i', the text gets reversed and becomes \"op\".  Since the fourth character you type is an 'i', the text gets reversed and becomes \"po\". After the fifth character, the text is \"pon\". After the sixth character, the text is \"pont\".  After the seventh character, the text is \"ponte\".  After the eighth character, the text is \"ponter\".  Therefore, we return \"ponter\".   Constraints: 1 <= s.length <= 100 s consists of lowercase English letters. s[0] != 'i'",
        "2094": "You are given an array nums of length n and an integer m. You need to determine if it is possible to split the array into n arrays of size 1 by performing a series of steps. An array is called good if: The length of the array is one, or The sum of the elements of the array is greater than or equal to m. In each step, you can select an existing array (which may be the result of previous steps) with a length of at least two and split it into two arrays, if both resulting arrays are good. Return true if you can split the given array into n arrays, otherwise return false.   Example 1: Input: nums = [2, 2, 1], m = 4 Output: true Explanation: Split [2, 2, 1] to [2, 2] and [1]. The array [1] has a length of one, and the array [2, 2] has the sum of its elements equal to 4 >= m, so both are good arrays. Split [2, 2] to [2] and [2]. both arrays have the length of one, so both are good arrays. Example 2: Input: nums = [2, 1, 3], m = 5 Output: false Explanation: The first move has to be either of the following: Split [2, 1, 3] to [2, 1] and [3]. The array [2, 1] has neither length of one nor sum of elements greater than or equal to m. Split [2, 1, 3] to [2] and [1, 3]. The array [1, 3] has neither length of one nor sum of elements greater than or equal to m. So as both moves are invalid (they do not divide the array into two good arrays), we are unable to split nums into n arrays of size 1. Example 3: Input: nums = [2, 3, 3, 2, 3], m = 6 Output: true Explanation: Split [2, 3, 3, 2, 3] to [2] and [3, 3, 2, 3]. Split [3, 3, 2, 3] to [3, 3, 2] and [3]. Split [3, 3, 2] to [3, 3] and [2]. Split [3, 3] to [3] and [3].   Constraints: 1 <= n == nums.length <= 100 1 <= nums[i] <= 100 1 <= m <= 200",
        "2095": "You are given a 0-indexed 2D matrix grid of size n x n, where (r, c) represents: A cell containing a thief if grid[r][c] = 1 An empty cell if grid[r][c] = 0 You are initially positioned at cell (0, 0). In one move, you can move to any adjacent cell in the grid, including cells containing thieves. The safeness factor of a path on the grid is defined as the minimum manhattan distance from any cell in the path to any thief in the grid. Return the maximum safeness factor of all paths leading to cell (n - 1, n - 1). An adjacent cell of cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) and (r - 1, c) if it exists. The Manhattan distance between two cells (a, b) and (x, y) is equal to |a - x| + |b - y|, where |val| denotes the absolute value of val.   Example 1: Input: grid = [[1,0,0],[0,0,0],[0,0,1]] Output: 0 Explanation: All paths from (0, 0) to (n - 1, n - 1) go through the thieves in cells (0, 0) and (n - 1, n - 1). Example 2: Input: grid = [[0,0,1],[0,0,0],[0,0,0]] Output: 2 Explanation: The path depicted in the picture above has a safeness factor of 2 since: - The closest cell of the path to the thief at cell (0, 2) is cell (0, 0). The distance between them is | 0 - 0 | + | 0 - 2 | = 2. It can be shown that there are no other paths with a higher safeness factor. Example 3: Input: grid = [[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]] Output: 2 Explanation: The path depicted in the picture above has a safeness factor of 2 since: - The closest cell of the path to the thief at cell (0, 3) is cell (1, 2). The distance between them is | 0 - 1 | + | 3 - 2 | = 2. - The closest cell of the path to the thief at cell (3, 0) is cell (3, 2). The distance between them is | 3 - 3 | + | 0 - 2 | = 2. It can be shown that there are no other paths with a higher safeness factor.   Constraints: 1 <= grid.length == n <= 400 grid[i].length == n grid[i][j] is either 0 or 1. There is at least one thief in the grid.",
        "2096": "You are given a 0-indexed 2D integer array items of length n and an integer k. items[i] = [profiti, categoryi], where profiti and categoryi denote the profit and category of the ith item respectively. Let's define the elegance of a subsequence of items as total_profit + distinct_categories2, where total_profit is the sum of all profits in the subsequence, and distinct_categories is the number of distinct categories from all the categories in the selected subsequence. Your task is to find the maximum elegance from all subsequences of size k in items. Return an integer denoting the maximum elegance of a subsequence of items with size exactly k. Note: A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.   Example 1: Input: items = [[3,2],[5,1],[10,1]], k = 2 Output: 17 Explanation: In this example, we have to select a subsequence of size 2. We can select items[0] = [3,2] and items[2] = [10,1]. The total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2,1]. Hence, the elegance is 13 + 22 = 17, and we can show that it is the maximum achievable elegance.  Example 2: Input: items = [[3,1],[3,1],[2,2],[5,3]], k = 3 Output: 19 Explanation: In this example, we have to select a subsequence of size 3.  We can select items[0] = [3,1], items[2] = [2,2], and items[3] = [5,3].  The total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1,2,3].  Hence, the elegance is 10 + 32 = 19, and we can show that it is the maximum achievable elegance. Example 3: Input: items = [[1,1],[2,1],[3,1]], k = 3 Output: 7 Explanation: In this example, we have to select a subsequence of size 3.  We should select all the items.  The total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1].  Hence, the maximum elegance is 6 + 12 = 7.     Constraints: 1 <= items.length == n <= 105 items[i].length == 2 items[i][0] == profiti items[i][1] == categoryi 1 <= profiti <= 109 1 <= categoryi <= n  1 <= k <= n",
        "2097": "You are given an integer array nums. You have to find the maximum sum of a pair of numbers from nums such that the largest digit in both numbers is equal. For example, 2373 is made up of three distinct digits: 2, 3, and 7, where 7 is the largest among them. Return the maximum sum or -1 if no such pair exists.   Example 1: Input: nums = [112,131,411] Output: -1 Explanation: Each numbers largest digit in order is [2,3,4]. Example 2: Input: nums = [2536,1613,3366,162] Output: 5902 Explanation: All the numbers have 6 as their largest digit, so the answer is 2536 + 3366 = 5902. Example 3: Input: nums = [51,71,17,24,42] Output: 88 Explanation: Each number's largest digit in order is [5,7,7,4,4]. So we have only two possible pairs, 71 + 17 = 88 and 24 + 42 = 66.   Constraints: 2 <= nums.length <= 100 1 <= nums[i] <= 104",
        "2098": "You are given the head of a non-empty linked list representing a non-negative integer without leading zeroes. Return the head of the linked list after doubling it.   Example 1: Input: head = [1,8,9] Output: [3,7,8] Explanation: The figure above corresponds to the given linked list which represents the number 189. Hence, the returned linked list represents the number 189 * 2 = 378. Example 2: Input: head = [9,9,9] Output: [1,9,9,8] Explanation: The figure above corresponds to the given linked list which represents the number 999. Hence, the returned linked list reprersents the number 999 * 2 = 1998.    Constraints: The number of nodes in the list is in the range [1, 104] 0 <= Node.val <= 9 The input is generated such that the list represents a number that does not have leading zeros, except the number 0 itself.",
        "2099": "You are given a 0-indexed integer array nums and an integer x. Find the minimum absolute difference between two elements in the array that are at least x indices apart. In other words, find two indices i and j such that abs(i - j) >= x and abs(nums[i] - nums[j]) is minimized. Return an integer denoting the minimum absolute difference between two elements that are at least x indices apart.   Example 1: Input: nums = [4,3,2,4], x = 2 Output: 0 Explanation: We can select nums[0] = 4 and nums[3] = 4.  They are at least 2 indices apart, and their absolute difference is the minimum, 0.  It can be shown that 0 is the optimal answer. Example 2: Input: nums = [5,3,2,10,15], x = 1 Output: 1 Explanation: We can select nums[1] = 3 and nums[2] = 2. They are at least 1 index apart, and their absolute difference is the minimum, 1. It can be shown that 1 is the optimal answer. Example 3: Input: nums = [1,2,3,4], x = 3 Output: 3 Explanation: We can select nums[0] = 1 and nums[3] = 4. They are at least 3 indices apart, and their absolute difference is the minimum, 3. It can be shown that 3 is the optimal answer.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 0 <= x < nums.length",
        "2100": "You are given an array nums of n positive integers and an integer k. Initially, you start with a score of 1. You have to maximize your score by applying the following operation at most k times: Choose any non-empty subarray nums[l, ..., r] that you haven't chosen previously. Choose an element x of nums[l, ..., r] with the highest prime score. If multiple such elements exist, choose the one with the smallest index. Multiply your score by x. Here, nums[l, ..., r] denotes the subarray of nums starting at index l and ending at the index r, both ends being inclusive. The prime score of an integer x is equal to the number of distinct prime factors of x. For example, the prime score of 300 is 3 since 300 = 2 * 2 * 3 * 5 * 5. Return the maximum possible score after applying at most k operations. Since the answer may be large, return it modulo 109 + 7.   Example 1: Input: nums = [8,3,9,3,8], k = 2 Output: 81 Explanation: To get a score of 81, we can apply the following operations: - Choose subarray nums[2, ..., 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9. - Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81. It can be proven that 81 is the highest score one can obtain. Example 2: Input: nums = [19,12,14,6,10,18], k = 3 Output: 4788 Explanation: To get a score of 4788, we can apply the following operations:  - Choose subarray nums[0, ..., 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19. - Choose subarray nums[5, ..., 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342. - Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788. It can be proven that 4788 is the highest score one can obtain.   Constraints: 1 <= nums.length == n <= 105 1 <= nums[i] <= 105 1 <= k <= min(n * (n + 1) / 2, 109)",
        "2101": "Given a 0-indexed integer array nums of length n and an integer target, return the number of pairs (i, j) where 0 <= i < j < n and nums[i] + nums[j] < target.   Example 1: Input: nums = [-1,1,2,3,1], target = 2 Output: 3 Explanation: There are 3 pairs of indices that satisfy the conditions in the statement: - (0, 1) since 0 < 1 and nums[0] + nums[1] = 0 < target - (0, 2) since 0 < 2 and nums[0] + nums[2] = 1 < target  - (0, 4) since 0 < 4 and nums[0] + nums[4] = 0 < target Note that (0, 3) is not counted since nums[0] + nums[3] is not strictly less than the target. Example 2: Input: nums = [-6,2,5,-2,-7,-1,3], target = -2 Output: 10 Explanation: There are 10 pairs of indices that satisfy the conditions in the statement: - (0, 1) since 0 < 1 and nums[0] + nums[1] = -4 < target - (0, 3) since 0 < 3 and nums[0] + nums[3] = -8 < target - (0, 4) since 0 < 4 and nums[0] + nums[4] = -13 < target - (0, 5) since 0 < 5 and nums[0] + nums[5] = -7 < target - (0, 6) since 0 < 6 and nums[0] + nums[6] = -3 < target - (1, 4) since 1 < 4 and nums[1] + nums[4] = -5 < target - (3, 4) since 3 < 4 and nums[3] + nums[4] = -9 < target - (3, 5) since 3 < 5 and nums[3] + nums[5] = -3 < target - (4, 5) since 4 < 5 and nums[4] + nums[5] = -8 < target - (4, 6) since 4 < 6 and nums[4] + nums[6] = -4 < target   Constraints: 1 <= nums.length == n <= 50 -50 <= nums[i], target <= 50",
        "2102": "You are given two 0-indexed strings str1 and str2. In an operation, you select a set of indices in str1, and for each index i in the set, increment str1[i] to the next character cyclically. That is 'a' becomes 'b', 'b' becomes 'c', and so on, and 'z' becomes 'a'. Return true if it is possible to make str2 a subsequence of str1 by performing the operation at most once, and false otherwise. Note: A subsequence of a string is a new string that is formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.   Example 1: Input: str1 = \"abc\", str2 = \"ad\" Output: true Explanation: Select index 2 in str1. Increment str1[2] to become 'd'.  Hence, str1 becomes \"abd\" and str2 is now a subsequence. Therefore, true is returned. Example 2: Input: str1 = \"zc\", str2 = \"ad\" Output: true Explanation: Select indices 0 and 1 in str1.  Increment str1[0] to become 'a'.  Increment str1[1] to become 'd'.  Hence, str1 becomes \"ad\" and str2 is now a subsequence. Therefore, true is returned. Example 3: Input: str1 = \"ab\", str2 = \"d\" Output: false Explanation: In this example, it can be shown that it is impossible to make str2 a subsequence of str1 using the operation at most once.  Therefore, false is returned.   Constraints: 1 <= str1.length <= 105 1 <= str2.length <= 105 str1 and str2 consist of only lowercase English letters.",
        "2103": "You are given an integer array nums. Each element in nums is 1, 2 or 3. In each operation, you can remove an element from nums. Return the minimum number of operations to make nums non-decreasing.   Example 1: Input: nums = [2,1,3,2,1] Output: 3 Explanation: One of the optimal solutions is to remove nums[0], nums[2] and nums[3]. Example 2: Input: nums = [1,3,2,1,3,3] Output: 2 Explanation: One of the optimal solutions is to remove nums[1] and nums[2]. Example 3: Input: nums = [2,2,2,2,3,3] Output: 0 Explanation: nums is already non-decreasing.   Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 3   Follow-up: Can you come up with an algorithm that runs in O(n) time complexity?",
        "2104": "You are given positive integers low, high, and k. A number is beautiful if it meets both of the following conditions: The count of even digits in the number is equal to the count of odd digits. The number is divisible by k. Return the number of beautiful integers in the range [low, high].   Example 1: Input: low = 10, high = 20, k = 3 Output: 2 Explanation: There are 2 beautiful integers in the given range: [12,18].  - 12 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3. - 18 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3. Additionally we can see that: - 16 is not beautiful because it is not divisible by k = 3. - 15 is not beautiful because it does not contain equal counts even and odd digits. It can be shown that there are only 2 beautiful integers in the given range. Example 2: Input: low = 1, high = 10, k = 1 Output: 1 Explanation: There is 1 beautiful integer in the given range: [10]. - 10 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 1. It can be shown that there is only 1 beautiful integer in the given range. Example 3: Input: low = 5, high = 5, k = 2 Output: 0 Explanation: There are 0 beautiful integers in the given range. - 5 is not beautiful because it is not divisible by k = 2 and it does not contain equal even and odd digits.   Constraints: 0 < low <= high <= 109 0 < k <= 20",
        "2105": "Given an array of strings words and a string s, determine if s is an acronym of words. The string s is considered an acronym of words if it can be formed by concatenating the first character of each string in words in order. For example, \"ab\" can be formed from [\"apple\", \"banana\"], but it can't be formed from [\"bear\", \"aardvark\"]. Return true if s is an acronym of words, and false otherwise.   Example 1: Input: words = [\"alice\",\"bob\",\"charlie\"], s = \"abc\" Output: true Explanation: The first character in the words \"alice\", \"bob\", and \"charlie\" are 'a', 'b', and 'c', respectively. Hence, s = \"abc\" is the acronym.  Example 2: Input: words = [\"an\",\"apple\"], s = \"a\" Output: false Explanation: The first character in the words \"an\" and \"apple\" are 'a' and 'a', respectively.  The acronym formed by concatenating these characters is \"aa\".  Hence, s = \"a\" is not the acronym. Example 3: Input: words = [\"never\",\"gonna\",\"give\",\"up\",\"on\",\"you\"], s = \"ngguoy\" Output: true Explanation: By concatenating the first character of the words in the array, we get the string \"ngguoy\".  Hence, s = \"ngguoy\" is the acronym.   Constraints: 1 <= words.length <= 100 1 <= words[i].length <= 10 1 <= s.length <= 100 words[i] and s consist of lowercase English letters.",
        "2106": "You are given two integers, n and k. An array of distinct positive integers is called a k-avoiding array if there does not exist any pair of distinct elements that sum to k. Return the minimum possible sum of a k-avoiding array of length n.   Example 1: Input: n = 5, k = 4 Output: 18 Explanation: Consider the k-avoiding array [1,2,4,5,6], which has a sum of 18. It can be proven that there is no k-avoiding array with a sum less than 18. Example 2: Input: n = 2, k = 6 Output: 3 Explanation: We can construct the array [1,2], which has a sum of 3. It can be proven that there is no k-avoiding array with a sum less than 3.   Constraints: 1 <= n, k <= 50",
        "2107": "You are given an integer n representing the number of houses on a number line, numbered from 0 to n - 1. Additionally, you are given a 2D integer array offers where offers[i] = [starti, endi, goldi], indicating that ith buyer wants to buy all the houses from starti to endi for goldi amount of gold. As a salesman, your goal is to maximize your earnings by strategically selecting and selling houses to buyers. Return the maximum amount of gold you can earn. Note that different buyers can't buy the same house, and some houses may remain unsold.   Example 1: Input: n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]] Output: 3 Explanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers. We sell houses in the range [0,0] to 1st buyer for 1 gold and houses in the range [1,3] to 3rd buyer for 2 golds. It can be proven that 3 is the maximum amount of gold we can achieve. Example 2: Input: n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]] Output: 10 Explanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers. We sell houses in the range [0,2] to 2nd buyer for 10 golds. It can be proven that 10 is the maximum amount of gold we can achieve.   Constraints: 1 <= n <= 105 1 <= offers.length <= 105 offers[i].length == 3 0 <= starti <= endi <= n - 1 1 <= goldi <= 103",
        "2108": "You are given a 0-indexed integer array nums and an integer k. A subarray is called equal if all of its elements are equal. Note that the empty subarray is an equal subarray. Return the length of the longest possible equal subarray after deleting at most k elements from nums. A subarray is a contiguous, possibly empty sequence of elements within an array.   Example 1: Input: nums = [1,3,2,3,1,3], k = 3 Output: 3 Explanation: It's optimal to delete the elements at index 2 and index 4. After deleting them, nums becomes equal to [1, 3, 3, 3]. The longest equal subarray starts at i = 1 and ends at j = 3 with length equal to 3. It can be proven that no longer equal subarrays can be created. Example 2: Input: nums = [1,1,2,2,1,1], k = 2 Output: 4 Explanation: It's optimal to delete the elements at index 2 and index 3. After deleting them, nums becomes equal to [1, 1, 1, 1]. The array itself is an equal subarray, so the answer is 4. It can be proven that no longer equal subarrays can be created.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= nums.length 0 <= k <= nums.length",
        "2109": "You are given a string moves of length n consisting only of characters 'L', 'R', and '_'. The string represents your movement on a number line starting from the origin 0. In the ith move, you can choose one of the following directions: move to the left if moves[i] = 'L' or moves[i] = '_' move to the right if moves[i] = 'R' or moves[i] = '_' Return the distance from the origin of the furthest point you can get to after n moves.   Example 1: Input: moves = \"L_RL__R\" Output: 3 Explanation: The furthest point we can reach from the origin 0 is point -3 through the following sequence of moves \"LLRLLLR\". Example 2: Input: moves = \"_R__LL_\" Output: 5 Explanation: The furthest point we can reach from the origin 0 is point -5 through the following sequence of moves \"LRLLLLL\". Example 3: Input: moves = \"_______\" Output: 7 Explanation: The furthest point we can reach from the origin 0 is point 7 through the following sequence of moves \"RRRRRRR\".   Constraints: 1 <= moves.length == n <= 50 moves consists only of characters 'L', 'R' and '_'.",
        "2110": "You are given positive integers n and target. An array nums is beautiful if it meets the following conditions: nums.length == n. nums consists of pairwise distinct positive integers. There doesn't exist two distinct indices, i and j, in the range [0, n - 1], such that nums[i] + nums[j] == target. Return the minimum possible sum that a beautiful array could have modulo 109 + 7.   Example 1: Input: n = 2, target = 3 Output: 4 Explanation: We can see that nums = [1,3] is beautiful. - The array nums has length n = 2. - The array nums consists of pairwise distinct positive integers. - There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3. It can be proven that 4 is the minimum possible sum that a beautiful array could have. Example 2: Input: n = 3, target = 3 Output: 8 Explanation: We can see that nums = [1,3,4] is beautiful. - The array nums has length n = 3. - The array nums consists of pairwise distinct positive integers. - There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3. It can be proven that 8 is the minimum possible sum that a beautiful array could have. Example 3: Input: n = 1, target = 1 Output: 1 Explanation: We can see, that nums = [1] is beautiful.   Constraints: 1 <= n <= 109 1 <= target <= 109",
        "2111": "You are given a 0-indexed array nums consisting of non-negative powers of 2, and an integer target. In one operation, you must apply the following changes to the array: Choose any element of the array nums[i] such that nums[i] > 1. Remove nums[i] from the array. Add two occurrences of nums[i] / 2 to the end of nums. Return the minimum number of operations you need to perform so that nums contains a subsequence whose elements sum to target. If it is impossible to obtain such a subsequence, return -1. A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.   Example 1: Input: nums = [1,2,8], target = 7 Output: 1 Explanation: In the first operation, we choose element nums[2]. The array becomes equal to nums = [1,2,4,4]. At this stage, nums contains the subsequence [1,2,4] which sums up to 7. It can be shown that there is no shorter sequence of operations that results in a subsequnce that sums up to 7. Example 2: Input: nums = [1,32,1,2], target = 12 Output: 2 Explanation: In the first operation, we choose element nums[1]. The array becomes equal to nums = [1,1,2,16,16]. In the second operation, we choose element nums[3]. The array becomes equal to nums = [1,1,2,16,8,8] At this stage, nums contains the subsequence [1,1,2,8] which sums up to 12. It can be shown that there is no shorter sequence of operations that results in a subsequence that sums up to 12. Example 3: Input: nums = [1,32,1], target = 35 Output: -1 Explanation: It can be shown that no sequence of operations results in a subsequence that sums up to 35.   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 230 nums consists only of non-negative powers of two. 1 <= target < 231",
        "2112": "You are given an integer array receiver of length n and an integer k. n players are playing a ball-passing game. You choose the starting player, i. The game proceeds as follows: player i passes the ball to player receiver[i], who then passes it to receiver[receiver[i]], and so on, for k passes in total. The game's score is the sum of the indices of the players who touched the ball, including repetitions, i.e. i + receiver[i] + receiver[receiver[i]] + ... + receiver(k)[i]. Return the maximum possible score. Notes: receiver may contain duplicates. receiver[i] may be equal to i.   Example 1: Input: receiver = [2,0,1], k = 4 Output: 6 Explanation: Starting with player i = 2 the initial score is 2: Pass Sender Index Receiver Index Score 1 2 1 3 2 1 0 3 3 0 2 5 4 2 1 6 Example 2: Input: receiver = [1,1,1,2,3], k = 3 Output: 10 Explanation: Starting with player i = 4 the initial score is 4: Pass Sender Index Receiver Index Score 1 4 3 7 2 3 2 9 3 2 1 10   Constraints: 1 <= receiver.length == n <= 105 0 <= receiver[i] <= n - 1 1 <= k <= 1010",
        "2113": "You are given two strings s1 and s2, both of length 4, consisting of lowercase English letters. You can apply the following operation on any of the two strings any number of times: Choose any two indices i and j such that j - i = 2, then swap the two characters at those indices in the string. Return true if you can make the strings s1 and s2 equal, and false otherwise.   Example 1: Input: s1 = \"abcd\", s2 = \"cdab\" Output: true Explanation: We can do the following operations on s1: - Choose the indices i = 0, j = 2. The resulting string is s1 = \"cbad\". - Choose the indices i = 1, j = 3. The resulting string is s1 = \"cdab\" = s2. Example 2: Input: s1 = \"abcd\", s2 = \"dacb\" Output: false Explanation: It is not possible to make the two strings equal.   Constraints: s1.length == s2.length == 4 s1 and s2 consist only of lowercase English letters.",
        "2114": "",
        "2115": "You are given an integer array nums and two positive integers m and k. Return the maximum sum out of all almost unique subarrays of length k of nums. If no such subarray exists, return 0. A subarray of nums is almost unique if it contains at least m distinct elements. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [2,6,7,3,1,7], m = 3, k = 4 Output: 18 Explanation: There are 3 almost unique subarrays of size k = 4. These subarrays are [2, 6, 7, 3], [6, 7, 3, 1], and [7, 3, 1, 7]. Among these subarrays, the one with the maximum sum is [2, 6, 7, 3] which has a sum of 18. Example 2: Input: nums = [5,9,9,2,4,5,4], m = 1, k = 3 Output: 23 Explanation: There are 5 almost unique subarrays of size k. These subarrays are [5, 9, 9], [9, 9, 2], [9, 2, 4], [2, 4, 5], and [4, 5, 4]. Among these subarrays, the one with the maximum sum is [5, 9, 9] which has a sum of 23. Example 3: Input: nums = [1,2,1,2,1,2,1], m = 3, k = 3 Output: 0 Explanation: There are no subarrays of size k = 3 that contain at least m = 3 distinct elements in the given array [1,2,1,2,1,2,1]. Therefore, no almost unique subarrays exist, and the maximum sum is 0.   Constraints: 1 <= nums.length <= 2 * 104 1 <= m <= k <= nums.length 1 <= nums[i] <= 109",
        "2116": "You are given a string s and an integer k. A k-subsequence is a subsequence of s, having length k, and all its characters are unique, i.e., every character occurs once. Let f(c) denote the number of times the character c occurs in s. The beauty of a k-subsequence is the sum of f(c) for every character c in the k-subsequence. For example, consider s = \"abbbdd\" and k = 2: f('a') = 1, f('b') = 3, f('d') = 2 Some k-subsequences of s are: \"abbbdd\" -> \"ab\" having a beauty of f('a') + f('b') = 4 \"abbbdd\" -> \"ad\" having a beauty of f('a') + f('d') = 3 \"abbbdd\" -> \"bd\" having a beauty of f('b') + f('d') = 5 Return an integer denoting the number of k-subsequences whose beauty is the maximum among all k-subsequences. Since the answer may be too large, return it modulo 109 + 7. A subsequence of a string is a new string formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters. Notes f(c) is the number of times a character c occurs in s, not a k-subsequence. Two k-subsequences are considered different if one is formed by an index that is not present in the other. So, two k-subsequences may form the same string.   Example 1: Input: s = \"bcca\", k = 2 Output: 4 Explanation: From s we have f('a') = 1, f('b') = 1, and f('c') = 2. The k-subsequences of s are:  bcca having a beauty of f('b') + f('c') = 3  bcca having a beauty of f('b') + f('c') = 3  bcca having a beauty of f('b') + f('a') = 2  bcca having a beauty of f('c') + f('a') = 3 bcca having a beauty of f('c') + f('a') = 3  There are 4 k-subsequences that have the maximum beauty, 3.  Hence, the answer is 4.  Example 2: Input: s = \"abbcd\", k = 4 Output: 2 Explanation: From s we have f('a') = 1, f('b') = 2, f('c') = 1, and f('d') = 1.  The k-subsequences of s are:  abbcd having a beauty of f('a') + f('b') + f('c') + f('d') = 5 abbcd having a beauty of f('a') + f('b') + f('c') + f('d') = 5  There are 2 k-subsequences that have the maximum beauty, 5.  Hence, the answer is 2.    Constraints: 1 <= s.length <= 2 * 105 1 <= k <= s.length s consists only of lowercase English letters.",
        "2117": "You are given two positive integers low and high. An integer x consisting of 2 * n digits is symmetric if the sum of the first n digits of x is equal to the sum of the last n digits of x. Numbers with an odd number of digits are never symmetric. Return the number of symmetric integers in the range [low, high].   Example 1: Input: low = 1, high = 100 Output: 9 Explanation: There are 9 symmetric integers between 1 and 100: 11, 22, 33, 44, 55, 66, 77, 88, and 99. Example 2: Input: low = 1200, high = 1230 Output: 4 Explanation: There are 4 symmetric integers between 1200 and 1230: 1203, 1212, 1221, and 1230.   Constraints: 1 <= low <= high <= 104",
        "2118": "You are given a 0-indexed integer array nums, an integer modulo, and an integer k. Your task is to find the count of subarrays that are interesting. A subarray nums[l..r] is interesting if the following condition holds: Let cnt be the number of indices i in the range [l, r] such that nums[i] % modulo == k. Then, cnt % modulo == k. Return an integer denoting the count of interesting subarrays. Note: A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [3,2,4], modulo = 2, k = 1 Output: 3 Explanation: In this example the interesting subarrays are:  The subarray nums[0..0] which is [3].  - There is only one index, i = 0, in the range [0, 0] that satisfies nums[i] % modulo == k.  - Hence, cnt = 1 and cnt % modulo == k.   The subarray nums[0..1] which is [3,2]. - There is only one index, i = 0, in the range [0, 1] that satisfies nums[i] % modulo == k.   - Hence, cnt = 1 and cnt % modulo == k. The subarray nums[0..2] which is [3,2,4].  - There is only one index, i = 0, in the range [0, 2] that satisfies nums[i] % modulo == k.  - Hence, cnt = 1 and cnt % modulo == k.  It can be shown that there are no other interesting subarrays. So, the answer is 3. Example 2: Input: nums = [3,1,9,6], modulo = 3, k = 0 Output: 2 Explanation: In this example the interesting subarrays are:  The subarray nums[0..3] which is [3,1,9,6].  - There are three indices, i = 0, 2, 3, in the range [0, 3] that satisfy nums[i] % modulo == k.  - Hence, cnt = 3 and cnt % modulo == k.  The subarray nums[1..1] which is [1].  - There is no index, i, in the range [1, 1] that satisfies nums[i] % modulo == k.  - Hence, cnt = 0 and cnt % modulo == k.  It can be shown that there are no other interesting subarrays. So, the answer is 2.   Constraints: 1 <= nums.length <= 105  1 <= nums[i] <= 109 1 <= modulo <= 109 0 <= k < modulo",
        "2119": "There is an undirected tree with n nodes labeled from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ui, vi, wi] indicates that there is an edge between nodes ui and vi with weight wi in the tree. You are also given a 2D integer array queries of length m, where queries[i] = [ai, bi]. For each query, find the minimum number of operations required to make the weight of every edge on the path from ai to bi equal. In one operation, you can choose any edge of the tree and change its weight to any value. Note that: Queries are independent of each other, meaning that the tree returns to its initial state on each new query. The path from ai to bi is a sequence of distinct nodes starting with node ai and ending with node bi such that every two adjacent nodes in the sequence share an edge in the tree. Return an array answer of length m where answer[i] is the answer to the ith query.   Example 1: Input: n = 7, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,2],[4,5,2],[5,6,2]], queries = [[0,3],[3,6],[2,6],[0,6]] Output: [0,0,1,3] Explanation: In the first query, all the edges in the path from 0 to 3 have a weight of 1. Hence, the answer is 0. In the second query, all the edges in the path from 3 to 6 have a weight of 2. Hence, the answer is 0. In the third query, we change the weight of edge [2,3] to 2. After this operation, all the edges in the path from 2 to 6 have a weight of 2. Hence, the answer is 1. In the fourth query, we change the weights of edges [0,1], [1,2] and [2,3] to 2. After these operations, all the edges in the path from 0 to 6 have a weight of 2. Hence, the answer is 3. For each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from ai to bi. Example 2: Input: n = 8, edges = [[1,2,6],[1,3,4],[2,4,6],[2,5,3],[3,6,6],[3,0,8],[7,0,2]], queries = [[4,6],[0,4],[6,5],[7,4]] Output: [1,2,2,3] Explanation: In the first query, we change the weight of edge [1,3] to 6. After this operation, all the edges in the path from 4 to 6 have a weight of 6. Hence, the answer is 1. In the second query, we change the weight of edges [0,3] and [3,1] to 6. After these operations, all the edges in the path from 0 to 4 have a weight of 6. Hence, the answer is 2. In the third query, we change the weight of edges [1,3] and [5,2] to 6. After these operations, all the edges in the path from 6 to 5 have a weight of 6. Hence, the answer is 2. In the fourth query, we change the weights of edges [0,7], [0,3] and [1,3] to 6. After these operations, all the edges in the path from 7 to 4 have a weight of 6. Hence, the answer is 3. For each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from ai to bi.   Constraints: 1 <= n <= 104 edges.length == n - 1 edges[i].length == 3 0 <= ui, vi < n 1 <= wi <= 26 The input is generated such that edges represents a valid tree. 1 <= queries.length == m <= 2 * 104 queries[i].length == 2 0 <= ai, bi < n",
        "2120": "You are given a 0-indexed 2D integer array nums representing the coordinates of the cars parking on a number line. For any index i, nums[i] = [starti, endi] where starti is the starting point of the ith car and endi is the ending point of the ith car. Return the number of integer points on the line that are covered with any part of a car.   Example 1: Input: nums = [[3,6],[1,5],[4,7]] Output: 7 Explanation: All the points from 1 to 7 intersect at least one car, therefore the answer would be 7. Example 2: Input: nums = [[1,3],[5,8]] Output: 7 Explanation: Points intersecting at least one car are 1, 2, 3, 5, 6, 7, 8. There are a total of 7 points, therefore the answer would be 7.   Constraints: 1 <= nums.length <= 100 nums[i].length == 2 1 <= starti <= endi <= 100",
        "2121": "You are given four integers sx, sy, fx, fy, and a non-negative integer t. In an infinite 2D grid, you start at the cell (sx, sy). Each second, you must move to any of its adjacent cells. Return true if you can reach cell (fx, fy) after exactly t seconds, or false otherwise. A cell's adjacent cells are the 8 cells around it that share at least one corner with it. You can visit the same cell several times.   Example 1: Input: sx = 2, sy = 4, fx = 7, fy = 7, t = 6 Output: true Explanation: Starting at cell (2, 4), we can reach cell (7, 7) in exactly 6 seconds by going through the cells depicted in the picture above.  Example 2: Input: sx = 3, sy = 1, fx = 7, fy = 3, t = 3 Output: false Explanation: Starting at cell (3, 1), it takes at least 4 seconds to reach cell (7, 3) by going through the cells depicted in the picture above. Hence, we cannot reach cell (7, 3) at the third second.   Constraints: 1 <= sx, sy, fx, fy <= 109 0 <= t <= 109",
        "2122": "You are given a 0-indexed 2D integer matrix grid of size 3 * 3, representing the number of stones in each cell. The grid contains exactly 9 stones, and there can be multiple stones in a single cell. In one move, you can move a single stone from its current cell to any other cell if the two cells share a side. Return the minimum number of moves required to place one stone in each cell.   Example 1: Input: grid = [[1,1,0],[1,1,1],[1,2,1]] Output: 3 Explanation: One possible sequence of moves to place one stone in each cell is:  1- Move one stone from cell (2,1) to cell (2,2). 2- Move one stone from cell (2,2) to cell (1,2). 3- Move one stone from cell (1,2) to cell (0,2). In total, it takes 3 moves to place one stone in each cell of the grid. It can be shown that 3 is the minimum number of moves required to place one stone in each cell. Example 2: Input: grid = [[1,3,0],[1,0,0],[1,0,3]] Output: 4 Explanation: One possible sequence of moves to place one stone in each cell is: 1- Move one stone from cell (0,1) to cell (0,2). 2- Move one stone from cell (0,1) to cell (1,1). 3- Move one stone from cell (2,2) to cell (1,2). 4- Move one stone from cell (2,2) to cell (2,1). In total, it takes 4 moves to place one stone in each cell of the grid. It can be shown that 4 is the minimum number of moves required to place one stone in each cell.   Constraints: grid.length == grid[i].length == 3 0 <= grid[i][j] <= 9 Sum of grid is equal to 9.",
        "2123": "You are given two strings s and t of equal length n. You can perform the following operation on the string s: Remove a suffix of s of length l where 0 < l < n and append it at the start of s. For example, let s = 'abcd' then in one operation you can remove the suffix 'cd' and append it in front of s making s = 'cdab'. You are also given an integer k. Return the number of ways in which s can be transformed into t in exactly k operations. Since the answer can be large, return it modulo 109 + 7.   Example 1: Input: s = \"abcd\", t = \"cdab\", k = 2 Output: 2 Explanation:  First way: In first operation, choose suffix from index = 3, so resulting s = \"dabc\". In second operation, choose suffix from index = 3, so resulting s = \"cdab\".  Second way: In first operation, choose suffix from index = 1, so resulting s = \"bcda\". In second operation, choose suffix from index = 1, so resulting s = \"cdab\". Example 2: Input: s = \"ababab\", t = \"ababab\", k = 1 Output: 2 Explanation:  First way: Choose suffix from index = 2, so resulting s = \"ababab\".  Second way: Choose suffix from index = 4, so resulting s = \"ababab\".   Constraints: 2 <= s.length <= 5 * 105 1 <= k <= 1015 s.length == t.length s and t consist of only lowercase English alphabets.",
        "2124": "You are given a 0-indexed array nums of length n containing distinct positive integers. Return the minimum number of right shifts required to sort nums and -1 if this is not possible. A right shift is defined as shifting the element at index i to index (i + 1) % n, for all indices.   Example 1: Input: nums = [3,4,5,1,2] Output: 2 Explanation:  After the first right shift, nums = [2,3,4,5,1]. After the second right shift, nums = [1,2,3,4,5]. Now nums is sorted; therefore the answer is 2. Example 2: Input: nums = [1,3,5] Output: 0 Explanation: nums is already sorted therefore, the answer is 0. Example 3: Input: nums = [2,1,4] Output: -1 Explanation: It's impossible to sort the array using right shifts.   Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100 nums contains distinct integers.",
        "2125": "Given an integer array num sorted in non-decreasing order. You can perform the following operation any number of times: Choose two indices, i and j, where nums[i] < nums[j]. Then, remove the elements at indices i and j from nums. The remaining elements retain their original order, and the array is re-indexed. Return the minimum length of nums after applying the operation zero or more times.   Example 1: Input: nums = [1,2,3,4] Output: 0 Explanation: Example 2: Input: nums = [1,1,2,2,3,3] Output: 0 Explanation: Example 3: Input: nums = [1000000000,1000000000] Output: 2 Explanation: Since both numbers are equal, they cannot be removed. Example 4: Input: nums = [2,3,4,4,4] Output: 1 Explanation:   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 nums is sorted in non-decreasing order.",
        "2126": "You are given a 2D integer array coordinates and an integer k, where coordinates[i] = [xi, yi] are the coordinates of the ith point in a 2D plane. We define the distance between two points (x1, y1) and (x2, y2) as (x1 XOR x2) + (y1 XOR y2) where XOR is the bitwise XOR operation. Return the number of pairs (i, j) such that i < j and the distance between points i and j is equal to k.   Example 1: Input: coordinates = [[1,2],[4,2],[1,3],[5,2]], k = 5 Output: 2 Explanation: We can choose the following pairs: - (0,1): Because we have (1 XOR 4) + (2 XOR 2) = 5. - (2,3): Because we have (1 XOR 5) + (3 XOR 2) = 5. Example 2: Input: coordinates = [[1,3],[1,3],[1,3],[1,3],[1,3]], k = 0 Output: 10 Explanation: Any two chosen pairs will have a distance of 0. There are 10 ways to choose two pairs.   Constraints: 2 <= coordinates.length <= 50000 0 <= xi, yi <= 106 0 <= k <= 100",
        "2127": "You are given a 0-indexed integer array nums of length n where n is the total number of students in the class. The class teacher tries to select a group of students so that all the students remain happy. The ith student will become happy if one of these two conditions is met: The student is selected and the total number of selected students is strictly greater than nums[i]. The student is not selected and the total number of selected students is strictly less than nums[i]. Return the number of ways to select a group of students so that everyone remains happy.   Example 1: Input: nums = [1,1] Output: 2 Explanation:  The two possible ways are: The class teacher selects no student. The class teacher selects both students to form the group.  If the class teacher selects just one student to form a group then the both students will not be happy. Therefore, there are only two possible ways. Example 2: Input: nums = [6,0,3,3,6,7,2,7] Output: 3 Explanation:  The three possible ways are: The class teacher selects the student with index = 1 to form the group. The class teacher selects the students with index = 1, 2, 3, 6 to form the group. The class teacher selects all the students to form the group.   Constraints: 1 <= nums.length <= 105 0 <= nums[i] < nums.length",
        "2128": "You are the owner of a company that creates alloys using various types of metals. There are n different types of metals available, and you have access to k machines that can be used to create alloys. Each machine requires a specific amount of each metal type to create an alloy. For the ith machine to create an alloy, it needs composition[i][j] units of metal of type j. Initially, you have stock[i] units of metal type i, and purchasing one unit of metal type i costs cost[i] coins. Given integers n, k, budget, a 1-indexed 2D array composition, and 1-indexed arrays stock and cost, your goal is to maximize the number of alloys the company can create while staying within the budget of budget coins. All alloys must be created with the same machine. Return the maximum number of alloys that the company can create.   Example 1: Input: n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,0], cost = [1,2,3] Output: 2 Explanation: It is optimal to use the 1st machine to create alloys. To create 2 alloys we need to buy the: - 2 units of metal of the 1st type. - 2 units of metal of the 2nd type. - 2 units of metal of the 3rd type. In total, we need 2 * 1 + 2 * 2 + 2 * 3 = 12 coins, which is smaller than or equal to budget = 15. Notice that we have 0 units of metal of each type and we have to buy all the required units of metal. It can be proven that we can create at most 2 alloys. Example 2: Input: n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,100], cost = [1,2,3] Output: 5 Explanation: It is optimal to use the 2nd machine to create alloys. To create 5 alloys we need to buy: - 5 units of metal of the 1st type. - 5 units of metal of the 2nd type. - 0 units of metal of the 3rd type. In total, we need 5 * 1 + 5 * 2 + 0 * 3 = 15 coins, which is smaller than or equal to budget = 15. It can be proven that we can create at most 5 alloys. Example 3: Input: n = 2, k = 3, budget = 10, composition = [[2,1],[1,2],[1,1]], stock = [1,1], cost = [5,5] Output: 2 Explanation: It is optimal to use the 3rd machine to create alloys. To create 2 alloys we need to buy the: - 1 unit of metal of the 1st type. - 1 unit of metal of the 2nd type. In total, we need 1 * 5 + 1 * 5 = 10 coins, which is smaller than or equal to budget = 10. It can be proven that we can create at most 2 alloys.   Constraints: 1 <= n, k <= 100 0 <= budget <= 108 composition.length == k composition[i].length == n 1 <= composition[i][j] <= 100 stock.length == cost.length == n 0 <= stock[i] <= 108 1 <= cost[i] <= 100",
        "2129": "You are given a 1-indexed array nums. Your task is to select a complete subset from nums where every pair of selected indices multiplied is a perfect square, . i. e. if you select ai and aj, i * j must be a perfect square. Return the sum of the complete subset with the maximum sum.   Example 1: Input: nums = [8,7,3,5,7,2,4,9] Output: 16 Explanation: We select elements at indices 2 and 8 and 2 * 8 is a perfect square. Example 2: Input: nums = [8,10,3,8,1,13,7,9,4] Output: 20 Explanation: We select elements at indices 1, 4, and 9. 1 * 4, 1 * 9, 4 * 9 are perfect squares.   Constraints: 1 <= n == nums.length <= 104 1 <= nums[i] <= 109",
        "2130": "You are given a binary string s that contains at least one '1'. You have to rearrange the bits in such a way that the resulting binary number is the maximum odd binary number that can be created from this combination. Return a string representing the maximum odd binary number that can be created from the given combination. Note that the resulting string can have leading zeros.   Example 1: Input: s = \"010\" Output: \"001\" Explanation: Because there is just one '1', it must be in the last position. So the answer is \"001\". Example 2: Input: s = \"0101\" Output: \"1001\" Explanation: One of the '1's must be in the last position. The maximum number that can be made with the remaining digits is \"100\". So the answer is \"1001\".   Constraints: 1 <= s.length <= 100 s consists only of '0' and '1'. s contains at least one '1'.",
        "2131": "You are given an array heights of n integers representing the number of bricks in n consecutive towers. Your task is to remove some bricks to form a mountain-shaped tower arrangement. In this arrangement, the tower heights are non-decreasing, reaching a maximum peak value with one or multiple consecutive towers and then non-increasing. Return the maximum possible sum of heights of a mountain-shaped tower arrangement.   Example 1: Input: heights = [5,3,4,1,1] Output: 13 Explanation: We remove some bricks to make heights = [5,3,3,1,1], the peak is at index 0. Example 2: Input: heights = [6,5,3,9,2,7] Output: 22 Explanation: We remove some bricks to make heights = [3,3,3,9,2,2], the peak is at index 3. Example 3: Input: heights = [3,2,5,5,2,3] Output: 18 Explanation: We remove some bricks to make heights = [2,2,5,5,2,2], the peak is at index 2 or 3.   Constraints: 1 <= n == heights.length <= 103 1 <= heights[i] <= 109",
        "2132": "You are given a 0-indexed array maxHeights of n integers. You are tasked with building n towers in the coordinate line. The ith tower is built at coordinate i and has a height of heights[i]. A configuration of towers is beautiful if the following conditions hold: 1 <= heights[i] <= maxHeights[i] heights is a mountain array. Array heights is a mountain if there exists an index i such that: For all 0 < j <= i, heights[j - 1] <= heights[j] For all i <= k < n - 1, heights[k + 1] <= heights[k] Return the maximum possible sum of heights of a beautiful configuration of towers.   Example 1: Input: maxHeights = [5,3,4,1,1] Output: 13 Explanation: One beautiful configuration with a maximum sum is heights = [5,3,3,1,1]. This configuration is beautiful since: - 1 <= heights[i] <= maxHeights[i]   - heights is a mountain of peak i = 0. It can be shown that there exists no other beautiful configuration with a sum of heights greater than 13. Example 2: Input: maxHeights = [6,5,3,9,2,7] Output: 22 Explanation: One beautiful configuration with a maximum sum is heights = [3,3,3,9,2,2]. This configuration is beautiful since: - 1 <= heights[i] <= maxHeights[i] - heights is a mountain of peak i = 3. It can be shown that there exists no other beautiful configuration with a sum of heights greater than 22. Example 3: Input: maxHeights = [3,2,5,5,2,3] Output: 18 Explanation: One beautiful configuration with a maximum sum is heights = [2,2,5,5,2,2]. This configuration is beautiful since: - 1 <= heights[i] <= maxHeights[i] - heights is a mountain of peak i = 2.  Note that, for this configuration, i = 3 can also be considered a peak. It can be shown that there exists no other beautiful configuration with a sum of heights greater than 18.   Constraints: 1 <= n == maxHeights.length <= 105 1 <= maxHeights[i] <= 109",
        "2133": "There is an undirected tree with n nodes labeled from 1 to n. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the tree. Return the number of valid paths in the tree. A path (a, b) is valid if there exists exactly one prime number among the node labels in the path from a to b. Note that: The path (a, b) is a sequence of distinct nodes starting with node a and ending with node b such that every two adjacent nodes in the sequence share an edge in the tree. Path (a, b) and path (b, a) are considered the same and counted only once.   Example 1: Input: n = 5, edges = [[1,2],[1,3],[2,4],[2,5]] Output: 4 Explanation: The pairs with exactly one prime number on the path between them are:  - (1, 2) since the path from 1 to 2 contains prime number 2.  - (1, 3) since the path from 1 to 3 contains prime number 3. - (1, 4) since the path from 1 to 4 contains prime number 2. - (2, 4) since the path from 2 to 4 contains prime number 2. It can be shown that there are only 4 valid paths. Example 2: Input: n = 6, edges = [[1,2],[1,3],[2,4],[3,5],[3,6]] Output: 6 Explanation: The pairs with exactly one prime number on the path between them are:  - (1, 2) since the path from 1 to 2 contains prime number 2. - (1, 3) since the path from 1 to 3 contains prime number 3. - (1, 4) since the path from 1 to 4 contains prime number 2. - (1, 6) since the path from 1 to 6 contains prime number 3. - (2, 4) since the path from 2 to 4 contains prime number 2. - (3, 6) since the path from 3 to 6 contains prime number 3. It can be shown that there are only 6 valid paths.   Constraints: 1 <= n <= 105 edges.length == n - 1 edges[i].length == 2 1 <= ui, vi <= n The input is generated such that edges represent a valid tree.",
        "2134": "You are given an array nums of positive integers and an integer k. In one operation, you can remove the last element of the array and add it to your collection. Return the minimum number of operations needed to collect elements 1, 2, ..., k.   Example 1: Input: nums = [3,1,5,4,2], k = 2 Output: 4 Explanation: After 4 operations, we collect elements 2, 4, 5, and 1, in this order. Our collection contains elements 1 and 2. Hence, the answer is 4. Example 2: Input: nums = [3,1,5,4,2], k = 5 Output: 5 Explanation: After 5 operations, we collect elements 2, 4, 5, 1, and 3, in this order. Our collection contains elements 1 through 5. Hence, the answer is 5. Example 3: Input: nums = [3,2,5,3,1], k = 3 Output: 4 Explanation: After 4 operations, we collect elements 1, 3, 5, and 2, in this order. Our collection contains elements 1 through 3. Hence, the answer is 4.   Constraints: 1 <= nums.length <= 50 1 <= nums[i] <= nums.length 1 <= k <= nums.length The input is generated such that you can collect elements 1, 2, ..., k.",
        "2135": "You are given a 0-indexed array nums consisting of positive integers. There are two types of operations that you can apply on the array any number of times: Choose two elements with equal values and delete them from the array. Choose three elements with equal values and delete them from the array. Return the minimum number of operations required to make the array empty, or -1 if it is not possible.   Example 1: Input: nums = [2,3,3,2,2,4,2,3,4] Output: 4 Explanation: We can apply the following operations to make the array empty: - Apply the first operation on the elements at indices 0 and 3. The resulting array is nums = [3,3,2,4,2,3,4]. - Apply the first operation on the elements at indices 2 and 4. The resulting array is nums = [3,3,4,3,4]. - Apply the second operation on the elements at indices 0, 1, and 3. The resulting array is nums = [4,4]. - Apply the first operation on the elements at indices 0 and 1. The resulting array is nums = []. It can be shown that we cannot make the array empty in less than 4 operations. Example 2: Input: nums = [2,1,2,2,3,3] Output: -1 Explanation: It is impossible to empty the array.   Constraints: 2 <= nums.length <= 105 1 <= nums[i] <= 106   Note: This question is the same as 2244: Minimum Rounds to Complete All Tasks.",
        "2136": "You are given an array nums consisting of non-negative integers. We define the score of subarray nums[l..r] such that l <= r as nums[l] AND nums[l + 1] AND ... AND nums[r] where AND is the bitwise AND operation. Consider splitting the array into one or more subarrays such that the following conditions are satisfied: Each element of the array belongs to exactly one subarray. The sum of scores of the subarrays is the minimum possible. Return the maximum number of subarrays in a split that satisfies the conditions above. A subarray is a contiguous part of an array.   Example 1: Input: nums = [1,0,2,0,1,2] Output: 3 Explanation: We can split the array into the following subarrays: - [1,0]. The score of this subarray is 1 AND 0 = 0. - [2,0]. The score of this subarray is 2 AND 0 = 0. - [1,2]. The score of this subarray is 1 AND 2 = 0. The sum of scores is 0 + 0 + 0 = 0, which is the minimum possible score that we can obtain. It can be shown that we cannot split the array into more than 3 subarrays with a total score of 0. So we return 3. Example 2: Input: nums = [5,7,1,3] Output: 1 Explanation: We can split the array into one subarray: [5,7,1,3] with a score of 1, which is the minimum possible score that we can obtain. It can be shown that we cannot split the array into more than 1 subarray with a total score of 1. So we return 1.   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 106",
        "2137": "There is an undirected tree with n nodes labeled from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given a 0-indexed integer array values of length n, where values[i] is the value associated with the ith node, and an integer k. A valid split of the tree is obtained by removing any set of edges, possibly empty, from the tree such that the resulting components all have values that are divisible by k, where the value of a connected component is the sum of the values of its nodes. Return the maximum number of components in any valid split.   Example 1: Input: n = 5, edges = [[0,2],[1,2],[1,3],[2,4]], values = [1,8,1,4,4], k = 6 Output: 2 Explanation: We remove the edge connecting node 1 with 2. The resulting split is valid because: - The value of the component containing nodes 1 and 3 is values[1] + values[3] = 12. - The value of the component containing nodes 0, 2, and 4 is values[0] + values[2] + values[4] = 6. It can be shown that no other valid split has more than 2 connected components. Example 2: Input: n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [3,0,6,1,5,2,1], k = 3 Output: 3 Explanation: We remove the edge connecting node 0 with 2, and the edge connecting node 0 with 1. The resulting split is valid because: - The value of the component containing node 0 is values[0] = 3. - The value of the component containing nodes 2, 5, and 6 is values[2] + values[5] + values[6] = 9. - The value of the component containing nodes 1, 3, and 4 is values[1] + values[3] + values[4] = 6. It can be shown that no other valid split has more than 3 connected components.   Constraints: 1 <= n <= 3 * 104 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n values.length == n 0 <= values[i] <= 109 1 <= k <= 109 Sum of values is divisible by k. The input is generated such that edges represents a valid tree.",
        "2138": "You are given a 0-indexed integer array nums. Return the maximum value over all triplets of indices (i, j, k) such that i < j < k. If all such triplets have a negative value, return 0. The value of a triplet of indices (i, j, k) is equal to (nums[i] - nums[j]) * nums[k].   Example 1: Input: nums = [12,6,1,2,7] Output: 77 Explanation: The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77. It can be shown that there are no ordered triplets of indices with a value greater than 77.  Example 2: Input: nums = [1,10,3,4,19] Output: 133 Explanation: The value of the triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133. It can be shown that there are no ordered triplets of indices with a value greater than 133. Example 3: Input: nums = [1,2,3] Output: 0 Explanation: The only ordered triplet of indices (0, 1, 2) has a negative value of (nums[0] - nums[1]) * nums[2] = -3. Hence, the answer would be 0.   Constraints: 3 <= nums.length <= 100 1 <= nums[i] <= 106",
        "2139": "You are given a 0-indexed integer array nums. Return the maximum value over all triplets of indices (i, j, k) such that i < j < k. If all such triplets have a negative value, return 0. The value of a triplet of indices (i, j, k) is equal to (nums[i] - nums[j]) * nums[k].   Example 1: Input: nums = [12,6,1,2,7] Output: 77 Explanation: The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77. It can be shown that there are no ordered triplets of indices with a value greater than 77.  Example 2: Input: nums = [1,10,3,4,19] Output: 133 Explanation: The value of the triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133. It can be shown that there are no ordered triplets of indices with a value greater than 133. Example 3: Input: nums = [1,2,3] Output: 0 Explanation: The only ordered triplet of indices (0, 1, 2) has a negative value of (nums[0] - nums[1]) * nums[2] = -3. Hence, the answer would be 0.   Constraints: 3 <= nums.length <= 105 1 <= nums[i] <= 106",
        "2140": "You are given a 0-indexed array nums and an integer target. A 0-indexed array infinite_nums is generated by infinitely appending the elements of nums to itself. Return the length of the shortest subarray of the array infinite_nums with a sum equal to target. If there is no such subarray return -1.   Example 1: Input: nums = [1,2,3], target = 5 Output: 2 Explanation: In this example infinite_nums = [1,2,3,1,2,3,1,2,...]. The subarray in the range [1,2], has the sum equal to target = 5 and length = 2. It can be proven that 2 is the shortest length of a subarray with sum equal to target = 5. Example 2: Input: nums = [1,1,1,2,3], target = 4 Output: 2 Explanation: In this example infinite_nums = [1,1,1,2,3,1,1,1,2,3,1,1,...]. The subarray in the range [4,5], has the sum equal to target = 4 and length = 2. It can be proven that 2 is the shortest length of a subarray with sum equal to target = 4. Example 3: Input: nums = [2,4,6,8], target = 3 Output: -1 Explanation: In this example infinite_nums = [2,4,6,8,2,4,6,8,...]. It can be proven that there is no subarray with sum equal to target = 3.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105 1 <= target <= 109",
        "2141": "There is a directed graph consisting of n nodes numbered from 0 to n - 1 and n directed edges. You are given a 0-indexed array edges where edges[i] indicates that there is an edge from node i to node edges[i]. Consider the following process on the graph: You start from a node x and keep visiting other nodes through edges until you reach a node that you have already visited before on this same process. Return an array answer where answer[i] is the number of different nodes that you will visit if you perform the process starting from node i.   Example 1: Input: edges = [1,2,0,0] Output: [3,3,3,4] Explanation: We perform the process starting from each node in the following way: - Starting from node 0, we visit the nodes 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 3. - Starting from node 1, we visit the nodes 1 -> 2 -> 0 -> 1. The number of different nodes we visit is 3. - Starting from node 2, we visit the nodes 2 -> 0 -> 1 -> 2. The number of different nodes we visit is 3. - Starting from node 3, we visit the nodes 3 -> 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 4. Example 2: Input: edges = [1,2,3,4,0] Output: [5,5,5,5,5] Explanation: Starting from any node we can visit every node in the graph in the process.   Constraints: n == edges.length 2 <= n <= 105 0 <= edges[i] <= n - 1 edges[i] != i",
        "2142": "Write a solution to create a DataFrame from a 2D list called student_data. This 2D list contains the IDs and ages of some students. The DataFrame should have two columns, student_id and age, and be in the same order as the original 2D list. The result format is in the following example.   Example 1: Input: student_data: [   [1, 15],   [2, 11],   [3, 11],   [4, 20] ] Output: +------------+-----+ | student_id | age | +------------+-----+ | 1          | 15  | | 2          | 11  | | 3          | 11  | | 4          | 20  | +------------+-----+ Explanation: A DataFrame was created on top of student_data, with two columns named student_id and age.",
        "2143": "DataFrame players: +-------------+--------+ | Column Name | Type   | +-------------+--------+ | player_id   | int    | | name        | object | | age         | int    | | position    | object | | ...         | ...    | +-------------+--------+ Write a solution to calculate and display the number of rows and columns of players. Return the result as an array: [number of rows, number of columns] The result format is in the following example.   Example 1: Input: +-----------+----------+-----+-------------+--------------------+ | player_id | name     | age | position    | team               | +-----------+----------+-----+-------------+--------------------+ | 846       | Mason    | 21  | Forward     | RealMadrid         | | 749       | Riley    | 30  | Winger      | Barcelona          | | 155       | Bob      | 28  | Striker     | ManchesterUnited   | | 583       | Isabella | 32  | Goalkeeper  | Liverpool          | | 388       | Zachary  | 24  | Midfielder  | BayernMunich       | | 883       | Ava      | 23  | Defender    | Chelsea            | | 355       | Violet   | 18  | Striker     | Juventus           | | 247       | Thomas   | 27  | Striker     | ParisSaint-Germain | | 761       | Jack     | 33  | Midfielder  | ManchesterCity     | | 642       | Charlie  | 36  | Center-back | Arsenal            | +-----------+----------+-----+-------------+--------------------+ Output: [10, 5] Explanation: This DataFrame contains 10 rows and 5 columns.",
        "2144": "DataFrame: employees +-------------+--------+ | Column Name | Type   | +-------------+--------+ | employee_id | int    | | name        | object | | department  | object | | salary      | int    | +-------------+--------+ Write a solution to display the first 3 rows of this DataFrame.   Example 1: Input: DataFrame employees +-------------+-----------+-----------------------+--------+ | employee_id | name      | department            | salary | +-------------+-----------+-----------------------+--------+ | 3           | Bob       | Operations            | 48675  | | 90          | Alice     | Sales                 | 11096  | | 9           | Tatiana   | Engineering           | 33805  | | 60          | Annabelle | InformationTechnology | 37678  | | 49          | Jonathan  | HumanResources        | 23793  | | 43          | Khaled    | Administration        | 40454  | +-------------+-----------+-----------------------+--------+ Output: +-------------+---------+-------------+--------+ | employee_id | name    | department  | salary | +-------------+---------+-------------+--------+ | 3           | Bob     | Operations  | 48675  | | 90          | Alice   | Sales       | 11096  | | 9           | Tatiana | Engineering | 33805  | +-------------+---------+-------------+--------+ Explanation:  Only the first 3 rows are displayed.",
        "2145": "DataFrame students +-------------+--------+ | Column Name | Type   | +-------------+--------+ | student_id  | int    | | name        | object | | age         | int    | +-------------+--------+ Write a solution to select the name and age of the student with student_id = 101. The result format is in the following example.   Example 1: Input: +------------+---------+-----+ | student_id | name    | age | +------------+---------+-----+ | 101        | Ulysses | 13  | | 53         | William | 10  | | 128        | Henry   | 6   | | 3          | Henry   | 11  | +------------+---------+-----+ Output: +---------+-----+ | name    | age |  +---------+-----+ | Ulysses | 13  | +---------+-----+ Explanation: Student Ulysses has student_id = 101, we select the name and age.",
        "2146": "DataFrame employees +-------------+--------+ | Column Name | Type.  | +-------------+--------+ | name        | object | | salary      | int.   | +-------------+--------+ A company plans to provide its employees with a bonus. Write a solution to create a new column name bonus that contains the doubled values of the salary column. The result format is in the following example.   Example 1: Input: DataFrame employees +---------+--------+ | name    | salary | +---------+--------+ | Piper   | 4548   | | Grace   | 28150  | | Georgia | 1103   | | Willow  | 6593   | | Finn    | 74576  | | Thomas  | 24433  | +---------+--------+ Output: +---------+--------+--------+ | name    | salary | bonus  | +---------+--------+--------+ | Piper   | 4548   | 9096   | | Grace   | 28150  | 56300  | | Georgia | 1103   | 2206   | | Willow  | 6593   | 13186  | | Finn    | 74576  | 149152 | | Thomas  | 24433  | 48866  | +---------+--------+--------+ Explanation:  A new column bonus is created by doubling the value in the column salary.",
        "2147": "DataFrame customers +-------------+--------+ | Column Name | Type   | +-------------+--------+ | customer_id | int    | | name        | object | | email       | object | +-------------+--------+ There are some duplicate rows in the DataFrame based on the email column. Write a solution to remove these duplicate rows and keep only the first occurrence. The result format is in the following example.   Example 1: Input: +-------------+---------+---------------------+ | customer_id | name    | email               | +-------------+---------+---------------------+ | 1           | Ella    | emily@example.com   | | 2           | David   | michael@example.com | | 3           | Zachary | sarah@example.com   | | 4           | Alice   | john@example.com    | | 5           | Finn    | john@example.com    | | 6           | Violet  | alice@example.com   | +-------------+---------+---------------------+ Output:   +-------------+---------+---------------------+ | customer_id | name    | email               | +-------------+---------+---------------------+ | 1           | Ella    | emily@example.com   | | 2           | David   | michael@example.com | | 3           | Zachary | sarah@example.com   | | 4           | Alice   | john@example.com    | | 6           | Violet  | alice@example.com   | +-------------+---------+---------------------+ Explanation: Alic (customer_id = 4) and Finn (customer_id = 5) both use john@example.com, so only the first occurrence of this email is retained.",
        "2148": "DataFrame students +-------------+--------+ | Column Name | Type   | +-------------+--------+ | student_id  | int    | | name        | object | | age         | int    | +-------------+--------+ There are some rows having missing values in the name column. Write a solution to remove the rows with missing values. The result format is in the following example.   Example 1: Input: +------------+---------+-----+ | student_id | name    | age | +------------+---------+-----+ | 32         | Piper   | 5   | | 217        | None    | 19  | | 779        | Georgia | 20  | | 849        | Willow  | 14  | +------------+---------+-----+ Output: +------------+---------+-----+ | student_id | name    | age | +------------+---------+-----+ | 32         | Piper   | 5   | | 779        | Georgia | 20  |  | 849        | Willow  | 14  |  +------------+---------+-----+ Explanation:  Student with id 217 havs empty value in the name column, so it will be removed.",
        "2149": "DataFrame employees +-------------+--------+ | Column Name | Type   | +-------------+--------+ | name        | object | | salary      | int    | +-------------+--------+ A company intends to give its employees a pay rise. Write a solution to modify the salary column by multiplying each salary by 2. The result format is in the following example.   Example 1: Input: DataFrame employees +---------+--------+ | name    | salary | +---------+--------+ | Jack    | 19666  | | Piper   | 74754  | | Mia     | 62509  | | Ulysses | 54866  | +---------+--------+ Output: +---------+--------+ | name    | salary | +---------+--------+ | Jack    | 39332  | | Piper   | 149508 | | Mia     | 125018 | | Ulysses | 109732 | +---------+--------+ Explanation: Every salary has been doubled.",
        "2150": "DataFrame students +-------------+--------+ | Column Name | Type   | +-------------+--------+ | id          | int    | | first       | object | | last        | object | | age         | int    | +-------------+--------+ Write a solution to rename the columns as follows: id to student_id first to first_name last to last_name age to age_in_years The result format is in the following example.   Example 1: Input: +----+---------+----------+-----+ | id | first   | last     | age | +----+---------+----------+-----+ | 1  | Mason   | King     | 6   | | 2  | Ava     | Wright   | 7   | | 3  | Taylor  | Hall     | 16  | | 4  | Georgia | Thompson | 18  | | 5  | Thomas  | Moore    | 10  | +----+---------+----------+-----+ Output: +------------+------------+-----------+--------------+ | student_id | first_name | last_name | age_in_years | +------------+------------+-----------+--------------+ | 1          | Mason      | King      | 6            | | 2          | Ava        | Wright    | 7            | | 3          | Taylor     | Hall      | 16           | | 4          | Georgia    | Thompson  | 18           | | 5          | Thomas     | Moore     | 10           | +------------+------------+-----------+--------------+ Explanation:  The column names are changed accordingly.",
        "2151": "DataFrame students +-------------+--------+ | Column Name | Type   | +-------------+--------+ | student_id  | int    | | name        | object | | age         | int    | | grade       | float  | +-------------+--------+ Write a solution to correct the errors: The grade column is stored as floats, convert it to integers. The result format is in the following example.   Example 1: Input: DataFrame students: +------------+------+-----+-------+ | student_id | name | age | grade | +------------+------+-----+-------+ | 1          | Ava  | 6   | 73.0  | | 2          | Kate | 15  | 87.0  | +------------+------+-----+-------+ Output: +------------+------+-----+-------+ | student_id | name | age | grade | +------------+------+-----+-------+ | 1          | Ava  | 6   | 73    | | 2          | Kate | 15  | 87    | +------------+------+-----+-------+ Explanation:  The data types of the column grade is converted to int.",
        "2152": "DataFrame products +-------------+--------+ | Column Name | Type   | +-------------+--------+ | name        | object | | quantity    | int    | | price       | int    | +-------------+--------+ Write a solution to fill in the missing value as 0 in the quantity column. The result format is in the following example.   Example 1: Input:+-----------------+----------+-------+ | name            | quantity | price | +-----------------+----------+-------+ | Wristwatch      | None     | 135   | | WirelessEarbuds | None     | 821   | | GolfClubs       | 779      | 9319  | | Printer         | 849      | 3051  | +-----------------+----------+-------+ Output: +-----------------+----------+-------+ | name            | quantity | price | +-----------------+----------+-------+ | Wristwatch      | 0        | 135   | | WirelessEarbuds | 0        | 821   | | GolfClubs       | 779      | 9319  | | Printer         | 849      | 3051  | +-----------------+----------+-------+ Explanation:  The quantity for Wristwatch and WirelessEarbuds are filled by 0.",
        "2153": "DataFrame df1 +-------------+--------+ | Column Name | Type   | +-------------+--------+ | student_id  | int    | | name        | object | | age         | int    | +-------------+--------+  DataFrame df2 +-------------+--------+ | Column Name | Type   | +-------------+--------+ | student_id  | int    | | name        | object | | age         | int    | +-------------+--------+ Write a solution to concatenate these two DataFrames vertically into one DataFrame. The result format is in the following example.   Example 1: Input: df1 +------------+---------+-----+ | student_id | name    | age | +------------+---------+-----+ | 1          | Mason   | 8   | | 2          | Ava     | 6   | | 3          | Taylor  | 15  | | 4          | Georgia | 17  | +------------+---------+-----+ df2 +------------+------+-----+ | student_id | name | age | +------------+------+-----+ | 5          | Leo  | 7   | | 6          | Alex | 7   | +------------+------+-----+ Output: +------------+---------+-----+ | student_id | name    | age | +------------+---------+-----+ | 1          | Mason   | 8   | | 2          | Ava     | 6   | | 3          | Taylor  | 15  | | 4          | Georgia | 17  | | 5          | Leo     | 7   | | 6          | Alex    | 7   | +------------+---------+-----+ Explanation: The two DataFramess are stacked vertically, and their rows are combined.",
        "2154": "DataFrame weather +-------------+--------+ | Column Name | Type   | +-------------+--------+ | city        | object | | month       | object | | temperature | int    | +-------------+--------+ Write a solution to pivot the data so that each row represents temperatures for a specific month, and each city is a separate column. The result format is in the following example.   Example 1: Input: +--------------+----------+-------------+ | city         | month    | temperature | +--------------+----------+-------------+ | Jacksonville | January  | 13          | | Jacksonville | February | 23          | | Jacksonville | March    | 38          | | Jacksonville | April    | 5           | | Jacksonville | May      | 34          | | ElPaso       | January  | 20          | | ElPaso       | February | 6           | | ElPaso       | March    | 26          | | ElPaso       | April    | 2           | | ElPaso       | May      | 43          | +--------------+----------+-------------+ Output: +----------+--------+--------------+ | month    | ElPaso | Jacksonville | +----------+--------+--------------+ | April    | 2      | 5            | | February | 6      | 23           | | January  | 20     | 13           | | March    | 26     | 38           | | May      | 43     | 34           | +----------+--------+--------------+ Explanation: The table is pivoted, each column represents a city, and each row represents a specific month.",
        "2155": "DataFrame report +-------------+--------+ | Column Name | Type   | +-------------+--------+ | product     | object | | quarter_1   | int    | | quarter_2   | int    | | quarter_3   | int    | | quarter_4   | int    | +-------------+--------+ Write a solution to reshape the data so that each row represents sales data for a product in a specific quarter. The result format is in the following example.   Example 1: Input: +-------------+-----------+-----------+-----------+-----------+ | product     | quarter_1 | quarter_2 | quarter_3 | quarter_4 | +-------------+-----------+-----------+-----------+-----------+ | Umbrella    | 417       | 224       | 379       | 611       | | SleepingBag | 800       | 936       | 93        | 875       | +-------------+-----------+-----------+-----------+-----------+ Output: +-------------+-----------+-------+ | product     | quarter   | sales | +-------------+-----------+-------+ | Umbrella    | quarter_1 | 417   | | SleepingBag | quarter_1 | 800   | | Umbrella    | quarter_2 | 224   | | SleepingBag | quarter_2 | 936   | | Umbrella    | quarter_3 | 379   | | SleepingBag | quarter_3 | 93    | | Umbrella    | quarter_4 | 611   | | SleepingBag | quarter_4 | 875   | +-------------+-----------+-------+ Explanation: The DataFrame is reshaped from wide to long format. Each row represents the sales of a product in a quarter.",
        "2156": "DataFrame animals +-------------+--------+ | Column Name | Type   | +-------------+--------+ | name        | object | | species     | object | | age         | int    | | weight      | int    | +-------------+--------+ Write a solution to list the names of animals that weigh strictly more than 100 kilograms. Return the animals sorted by weight in descending order. The result format is in the following example.   Example 1: Input:  DataFrame animals: +----------+---------+-----+--------+ | name     | species | age | weight | +----------+---------+-----+--------+ | Tatiana  | Snake   | 98  | 464    | | Khaled   | Giraffe | 50  | 41     | | Alex     | Leopard | 6   | 328    | | Jonathan | Monkey  | 45  | 463    | | Stefan   | Bear    | 100 | 50     | | Tommy    | Panda   | 26  | 349    | +----------+---------+-----+--------+ Output:  +----------+ | name     | +----------+ | Tatiana  | | Jonathan | | Tommy    | | Alex     | +----------+ Explanation:  All animals weighing more than 100 should be included in the results table. Tatiana's weight is 464, Jonathan's weight is 463, Tommy's weight is 349, and Alex's weight is 328. The results should be sorted in descending order of weight.   In Pandas, method chaining enables us to perform operations on a DataFrame without breaking up each operation into a separate line or creating multiple temporary variables.  Can you complete this task in just one line of code using method chaining?",
        "2157": "You are given positive integers n and m. Define two integers as follows: num1: The sum of all integers in the range [1, n] (both inclusive) that are not divisible by m. num2: The sum of all integers in the range [1, n] (both inclusive) that are divisible by m. Return the integer num1 - num2.   Example 1: Input: n = 10, m = 3 Output: 19 Explanation: In the given example: - Integers in the range [1, 10] that are not divisible by 3 are [1,2,4,5,7,8,10], num1 is the sum of those integers = 37. - Integers in the range [1, 10] that are divisible by 3 are [3,6,9], num2 is the sum of those integers = 18. We return 37 - 18 = 19 as the answer. Example 2: Input: n = 5, m = 6 Output: 15 Explanation: In the given example: - Integers in the range [1, 5] that are not divisible by 6 are [1,2,3,4,5], num1 is the sum of those integers = 15. - Integers in the range [1, 5] that are divisible by 6 are [], num2 is the sum of those integers = 0. We return 15 - 0 = 15 as the answer. Example 3: Input: n = 5, m = 1 Output: -15 Explanation: In the given example: - Integers in the range [1, 5] that are not divisible by 1 are [], num1 is the sum of those integers = 0. - Integers in the range [1, 5] that are divisible by 1 are [1,2,3,4,5], num2 is the sum of those integers = 15. We return 0 - 15 = -15 as the answer.   Constraints: 1 <= n, m <= 1000",
        "2158": "You have a certain number of processors, each having 4 cores. The number of tasks to be executed is four times the number of processors. Each task must be assigned to a unique core, and each core can only be used once. You are given an array processorTime representing the time each processor becomes available and an array tasks representing how long each task takes to complete. Return the minimum time needed to complete all tasks.   Example 1: Input: processorTime = [8,10], tasks = [2,2,3,1,8,7,4,5] Output: 16 Explanation: Assign the tasks at indices 4, 5, 6, 7 to the first processor which becomes available at time = 8, and the tasks at indices 0, 1, 2, 3 to the second processor which becomes available at time = 10.  The time taken by the first processor to finish the execution of all tasks is max(8 + 8, 8 + 7, 8 + 4, 8 + 5) = 16. The time taken by the second processor to finish the execution of all tasks is max(10 + 2, 10 + 2, 10 + 3, 10 + 1) = 13. Example 2: Input: processorTime = [10,20], tasks = [2,3,1,2,5,8,4,3] Output: 23 Explanation: Assign the tasks at indices 1, 4, 5, 6 to the first processor and the others to the second processor. The time taken by the first processor to finish the execution of all tasks is max(10 + 3, 10 + 5, 10 + 8, 10 + 4) = 18. The time taken by the second processor to finish the execution of all tasks is max(20 + 2, 20 + 1, 20 + 2, 20 + 3) = 23.   Constraints: 1 <= n == processorTime.length <= 25000 1 <= tasks.length <= 105 0 <= processorTime[i] <= 109 1 <= tasks[i] <= 109 tasks.length == 4 * n",
        "2159": "You are given a 0-indexed integer array nums and a positive integer k. You can do the following operation on the array any number of times: Choose any two distinct indices i and j and simultaneously update the values of nums[i] to (nums[i] AND nums[j]) and nums[j] to (nums[i] OR nums[j]). Here, OR denotes the bitwise OR operation, and AND denotes the bitwise AND operation. You have to choose k elements from the final array and calculate the sum of their squares. Return the maximum sum of squares you can achieve. Since the answer can be very large, return it modulo 109 + 7.   Example 1: Input: nums = [2,6,5,8], k = 2 Output: 261 Explanation: We can do the following operations on the array: - Choose i = 0 and j = 3, then change nums[0] to (2 AND 8) = 0 and nums[3] to (2 OR 8) = 10. The resulting array is nums = [0,6,5,10]. - Choose i = 2 and j = 3, then change nums[2] to (5 AND 10) = 0 and nums[3] to (5 OR 10) = 15. The resulting array is nums = [0,6,0,15]. We can choose the elements 15 and 6 from the final array. The sum of squares is 152 + 62 = 261. It can be shown that this is the maximum value we can get. Example 2: Input: nums = [4,5,4,7], k = 3 Output: 90 Explanation: We do not need to apply any operations. We can choose the elements 7, 5, and 4 with a sum of squares: 72 + 52 + 42 = 90. It can be shown that this is the maximum value we can get.   Constraints: 1 <= k <= nums.length <= 105 1 <= nums[i] <= 109",
        "2160": "Given an integer array nums where nums[i] is either a positive integer or -1. We need to find for each -1 the respective positive integer, which we call the last visited integer. To achieve this goal, let's define two empty arrays: seen and ans. Start iterating from the beginning of the array nums. If a positive integer is encountered, prepend it to the front of seen. If -1 is encountered, let k be the number of consecutive -1s seen so far (including the current -1), If k is less than or equal to the length of seen, append the k-th element of seen to ans. If k is strictly greater than the length of seen, append -1 to ans. Return the array ans.   Example 1: Input: nums = [1,2,-1,-1,-1] Output: [2,1,-1] Explanation: Start with seen = [] and ans = []. Process nums[0]: The first element in nums is 1. We prepend it to the front of seen. Now, seen == [1]. Process nums[1]: The next element is 2. We prepend it to the front of seen. Now, seen == [2, 1]. Process nums[2]: The next element is -1. This is the first occurrence of -1, so k == 1. We look for the first element in seen. We append 2 to ans. Now, ans == [2]. Process nums[3]: Another -1. This is the second consecutive -1, so k == 2. The second element in seen is 1, so we append 1 to ans. Now, ans == [2, 1]. Process nums[4]: Another -1, the third in a row, making k = 3. However, seen only has two elements ([2, 1]). Since k is greater than the number of elements in seen, we append -1 to ans. Finally, ans == [2, 1, -1]. Example 2: Input: nums = [1,-1,2,-1,-1] Output: [1,2,1] Explanation: Start with seen = [] and ans = []. Process nums[0]: The first element in nums is 1. We prepend it to the front of seen. Now, seen == [1]. Process nums[1]: The next element is -1. This is the first occurrence of -1, so k == 1. We look for the first element in seen, which is 1. Append 1 to ans. Now, ans == [1]. Process nums[2]: The next element is 2. Prepend this to the front of seen. Now, seen == [2, 1]. Process nums[3]: The next element is -1. This -1 is not consecutive to the first -1 since 2 was in between. Thus, k resets to 1. The first element in seen is 2, so append 2 to ans. Now, ans == [1, 2]. Process nums[4]: Another -1. This is consecutive to the previous -1, so k == 2. The second element in seen is 1, append 1 to ans. Finally, ans == [1, 2, 1].   Constraints: 1 <= nums.length <= 100 nums[i] == -1 or 1 <= nums[i] <= 100",
        "2161": "You are given a string array words and a binary array groups both of length n, where words[i] is associated with groups[i]. Your task is to select the longest alternating subsequence from words. A subsequence of words is alternating if for any two consecutive strings in the sequence, their corresponding elements in the binary array groups differ. Essentially, you are to choose strings such that adjacent elements have non-matching corresponding bits in the groups array. Formally, you need to find the longest subsequence of an array of indices [0, 1, ..., n - 1] denoted as [i0, i1, ..., ik-1], such that groups[ij] != groups[ij+1] for each 0 <= j < k - 1 and then find the words corresponding to these indices. Return the selected subsequence. If there are multiple answers, return any of them. Note: The elements in words are distinct.   Example 1: Input: words = [\"e\",\"a\",\"b\"], groups = [0,0,1] Output: [\"e\",\"b\"] Explanation: A subsequence that can be selected is [\"e\",\"b\"] because groups[0] != groups[2]. Another subsequence that can be selected is [\"a\",\"b\"] because groups[1] != groups[2]. It can be demonstrated that the length of the longest subsequence of indices that satisfies the condition is 2. Example 2: Input: words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,0,1,1] Output: [\"a\",\"b\",\"c\"] Explanation: A subsequence that can be selected is [\"a\",\"b\",\"c\"] because groups[0] != groups[1] and groups[1] != groups[2]. Another subsequence that can be selected is [\"a\",\"b\",\"d\"] because groups[0] != groups[1] and groups[1] != groups[3]. It can be shown that the length of the longest subsequence of indices that satisfies the condition is 3.   Constraints: 1 <= n == words.length == groups.length <= 100 1 <= words[i].length <= 10 groups[i] is either 0 or 1. words consists of distinct strings. words[i] consists of lowercase English letters.",
        "2162": "You are given a string array words, and an array groups, both arrays having length n. The hamming distance between two strings of equal length is the number of positions at which the corresponding characters are different. You need to select the longest subsequence from an array of indices [0, 1, ..., n - 1], such that for the subsequence denoted as [i0, i1, ..., ik-1] having length k, the following holds: For adjacent indices in the subsequence, their corresponding groups are unequal, i.e., groups[ij] != groups[ij+1], for each j where 0 < j + 1 < k. words[ij] and words[ij+1] are equal in length, and the hamming distance between them is 1, where 0 < j + 1 < k, for all indices in the subsequence. Return a string array containing the words corresponding to the indices (in order) in the selected subsequence. If there are multiple answers, return any of them. Note: strings in words may be unequal in length.   Example 1: Input: words = [\"bab\",\"dab\",\"cab\"], groups = [1,2,2] Output: [\"bab\",\"cab\"] Explanation: A subsequence that can be selected is [0,2]. groups[0] != groups[2] words[0].length == words[2].length, and the hamming distance between them is 1. So, a valid answer is [words[0],words[2]] = [\"bab\",\"cab\"]. Another subsequence that can be selected is [0,1]. groups[0] != groups[1] words[0].length == words[1].length, and the hamming distance between them is 1. So, another valid answer is [words[0],words[1]] = [\"bab\",\"dab\"]. It can be shown that the length of the longest subsequence of indices that satisfies the conditions is 2. Example 2: Input: words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,2,3,4] Output: [\"a\",\"b\",\"c\",\"d\"] Explanation: We can select the subsequence [0,1,2,3]. It satisfies both conditions. Hence, the answer is [words[0],words[1],words[2],words[3]] = [\"a\",\"b\",\"c\",\"d\"]. It has the longest length among all subsequences of indices that satisfy the conditions. Hence, it is the only answer.   Constraints: 1 <= n == words.length == groups.length <= 1000 1 <= words[i].length <= 10 1 <= groups[i] <= n words consists of distinct strings. words[i] consists of lowercase English letters.",
        "2163": "You are given a 0-indexed array nums of non-negative integers, and two integers l and r. Return the count of sub-multisets within nums where the sum of elements in each subset falls within the inclusive range of [l, r]. Since the answer may be large, return it modulo 109 + 7. A sub-multiset is an unordered collection of elements of the array in which a given value x can occur 0, 1, ..., occ[x] times, where occ[x] is the number of occurrences of x in the array. Note that: Two sub-multisets are the same if sorting both sub-multisets results in identical multisets. The sum of an empty multiset is 0.   Example 1: Input: nums = [1,2,2,3], l = 6, r = 6 Output: 1 Explanation: The only subset of nums that has a sum of 6 is {1, 2, 3}. Example 2: Input: nums = [2,1,4,2,7], l = 1, r = 5 Output: 7 Explanation: The subsets of nums that have a sum within the range [1, 5] are {1}, {2}, {4}, {2, 2}, {1, 2}, {1, 4}, and {1, 2, 2}. Example 3: Input: nums = [1,2,1,3,5,2], l = 3, r = 5 Output: 9 Explanation: The subsets of nums that have a sum within the range [3, 5] are {3}, {5}, {1, 2}, {1, 3}, {2, 2}, {2, 3}, {1, 1, 2}, {1, 1, 3}, and {1, 2, 2}.   Constraints: 1 <= nums.length <= 2 * 104 0 <= nums[i] <= 2 * 104 Sum of nums does not exceed 2 * 104. 0 <= l <= r <= 2 * 104",
        "2164": "You are given a 0-indexed integer array nums having length n, an integer indexDifference, and an integer valueDifference. Your task is to find two indices i and j, both in the range [0, n - 1], that satisfy the following conditions: abs(i - j) >= indexDifference, and abs(nums[i] - nums[j]) >= valueDifference Return an integer array answer, where answer = [i, j] if there are two such indices, and answer = [-1, -1] otherwise. If there are multiple choices for the two indices, return any of them. Note: i and j may be equal.   Example 1: Input: nums = [5,1,4,1], indexDifference = 2, valueDifference = 4 Output: [0,3] Explanation: In this example, i = 0 and j = 3 can be selected. abs(0 - 3) >= 2 and abs(nums[0] - nums[3]) >= 4. Hence, a valid answer is [0,3]. [3,0] is also a valid answer. Example 2: Input: nums = [2,1], indexDifference = 0, valueDifference = 0 Output: [0,0] Explanation: In this example, i = 0 and j = 0 can be selected. abs(0 - 0) >= 0 and abs(nums[0] - nums[0]) >= 0. Hence, a valid answer is [0,0]. Other valid answers are [0,1], [1,0], and [1,1]. Example 3: Input: nums = [1,2,3], indexDifference = 2, valueDifference = 4 Output: [-1,-1] Explanation: In this example, it can be shown that it is impossible to find two indices that satisfy both conditions. Hence, [-1,-1] is returned.   Constraints: 1 <= n == nums.length <= 100 0 <= nums[i] <= 50 0 <= indexDifference <= 100 0 <= valueDifference <= 50",
        "2165": "You are given a binary string s and a positive integer k. A substring of s is beautiful if the number of 1's in it is exactly k. Let len be the length of the shortest beautiful substring. Return the lexicographically smallest beautiful substring of string s with length equal to len. If s doesn't contain a beautiful substring, return an empty string. A string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. For example, \"abcd\" is lexicographically larger than \"abcc\" because the first position they differ is at the fourth character, and d is greater than c.   Example 1: Input: s = \"100011001\", k = 3 Output: \"11001\" Explanation: There are 7 beautiful substrings in this example: 1. The substring \"100011001\". 2. The substring \"100011001\". 3. The substring \"100011001\". 4. The substring \"100011001\". 5. The substring \"100011001\". 6. The substring \"100011001\". 7. The substring \"100011001\". The length of the shortest beautiful substring is 5. The lexicographically smallest beautiful substring with length 5 is the substring \"11001\". Example 2: Input: s = \"1011\", k = 2 Output: \"11\" Explanation: There are 3 beautiful substrings in this example: 1. The substring \"1011\". 2. The substring \"1011\". 3. The substring \"1011\". The length of the shortest beautiful substring is 2. The lexicographically smallest beautiful substring with length 2 is the substring \"11\". Example 3: Input: s = \"000\", k = 1 Output: \"\" Explanation: There are no beautiful substrings in this example.   Constraints: 1 <= s.length <= 100 1 <= k <= s.length",
        "2166": "You are given a 0-indexed integer array nums having length n, an integer indexDifference, and an integer valueDifference. Your task is to find two indices i and j, both in the range [0, n - 1], that satisfy the following conditions: abs(i - j) >= indexDifference, and abs(nums[i] - nums[j]) >= valueDifference Return an integer array answer, where answer = [i, j] if there are two such indices, and answer = [-1, -1] otherwise. If there are multiple choices for the two indices, return any of them. Note: i and j may be equal.   Example 1: Input: nums = [5,1,4,1], indexDifference = 2, valueDifference = 4 Output: [0,3] Explanation: In this example, i = 0 and j = 3 can be selected. abs(0 - 3) >= 2 and abs(nums[0] - nums[3]) >= 4. Hence, a valid answer is [0,3]. [3,0] is also a valid answer. Example 2: Input: nums = [2,1], indexDifference = 0, valueDifference = 0 Output: [0,0] Explanation: In this example, i = 0 and j = 0 can be selected. abs(0 - 0) >= 0 and abs(nums[0] - nums[0]) >= 0. Hence, a valid answer is [0,0]. Other valid answers are [0,1], [1,0], and [1,1]. Example 3: Input: nums = [1,2,3], indexDifference = 2, valueDifference = 4 Output: [-1,-1] Explanation: In this example, it can be shown that it is impossible to find two indices that satisfy both conditions. Hence, [-1,-1] is returned.   Constraints: 1 <= n == nums.length <= 105 0 <= nums[i] <= 109 0 <= indexDifference <= 105 0 <= valueDifference <= 109",
        "2167": "Given a 0-indexed 2D integer matrix grid of size n * m, we define a 0-indexed 2D matrix p of size n * m as the product matrix of grid if the following condition is met: Each element p[i][j] is calculated as the product of all elements in grid except for the element grid[i][j]. This product is then taken modulo 12345. Return the product matrix of grid.   Example 1: Input: grid = [[1,2],[3,4]] Output: [[24,12],[8,6]] Explanation: p[0][0] = grid[0][1] * grid[1][0] * grid[1][1] = 2 * 3 * 4 = 24 p[0][1] = grid[0][0] * grid[1][0] * grid[1][1] = 1 * 3 * 4 = 12 p[1][0] = grid[0][0] * grid[0][1] * grid[1][1] = 1 * 2 * 4 = 8 p[1][1] = grid[0][0] * grid[0][1] * grid[1][0] = 1 * 2 * 3 = 6 So the answer is [[24,12],[8,6]]. Example 2: Input: grid = [[12345],[2],[1]] Output: [[2],[0],[0]] Explanation: p[0][0] = grid[0][1] * grid[0][2] = 2 * 1 = 2. p[0][1] = grid[0][0] * grid[0][2] = 12345 * 1 = 12345. 12345 % 12345 = 0. So p[0][1] = 0. p[0][2] = grid[0][0] * grid[0][1] = 12345 * 2 = 24690. 24690 % 12345 = 0. So p[0][2] = 0. So the answer is [[2],[0],[0]].   Constraints: 1 <= n == grid.length <= 105 1 <= m == grid[i].length <= 105 2 <= n * m <= 105 1 <= grid[i][j] <= 109",
        "2168": "You are given a 0-indexed array nums of integers. A triplet of indices (i, j, k) is a mountain if: i < j < k nums[i] < nums[j] and nums[k] < nums[j] Return the minimum possible sum of a mountain triplet of nums. If no such triplet exists, return -1.   Example 1: Input: nums = [8,6,1,5,3] Output: 9 Explanation: Triplet (2, 3, 4) is a mountain triplet of sum 9 since:  - 2 < 3 < 4 - nums[2] < nums[3] and nums[4] < nums[3] And the sum of this triplet is nums[2] + nums[3] + nums[4] = 9. It can be shown that there are no mountain triplets with a sum of less than 9. Example 2: Input: nums = [5,4,8,7,10,2] Output: 13 Explanation: Triplet (1, 3, 5) is a mountain triplet of sum 13 since:  - 1 < 3 < 5 - nums[1] < nums[3] and nums[5] < nums[3] And the sum of this triplet is nums[1] + nums[3] + nums[5] = 13. It can be shown that there are no mountain triplets with a sum of less than 13. Example 3: Input: nums = [6,5,4,3,4,5] Output: -1 Explanation: It can be shown that there are no mountain triplets in nums.   Constraints: 3 <= nums.length <= 50 1 <= nums[i] <= 50",
        "2169": "You are given a collection of numbered balls and instructed to sort them into boxes for a nearly balanced distribution. There are two rules you must follow: Balls with the same box must have the same value. But, if you have more than one ball with the same number, you can put them in different boxes. The biggest box can only have one more ball than the smallest box. Return the fewest number of boxes to sort these balls following these rules.   Example 1: Input: balls = [3,2,3,2,3] Output: 2 Explanation: We can sort balls into boxes as follows: [3,3,3] [2,2] The size difference between the two boxes doesn't exceed one. Example 2: Input: balls = [10,10,10,3,1,1] Output: 4 Explanation: We can sort balls into boxes as follows: [10] [10,10] [3] [1,1] You can't use fewer than four boxes while still following the rules. For example, putting all three balls numbered 10 in one box would break the rule about the maximum size difference between boxes.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109",
        "2170": "Given a string s and an integer k, partition s into k substrings such that the letter changes needed to make each substring a semi-palindrome are minimized. Return the minimum number of letter changes required. A semi-palindrome is a special type of string that can be divided into palindromes based on a repeating pattern. To check if a string is a semi-palindrome: Choose a positive divisor d of the string's length. d can range from 1 up to, but not including, the string's length. For a string of length 1, it does not have a valid divisor as per this definition, since the only divisor is its length, which is not allowed. For a given divisor d, divide the string into groups where each group contains characters from the string that follow a repeating pattern of length d. Specifically, the first group consists of characters at positions 1, 1 + d, 1 + 2d, and so on; the second group includes characters at positions 2, 2 + d, 2 + 2d, etc. The string is considered a semi-palindrome if each of these groups forms a palindrome. Consider the string \"abcabc\": The length of \"abcabc\" is 6. Valid divisors are 1, 2, and 3. For d = 1: The entire string \"abcabc\" forms one group. Not a palindrome. For d = 2: Group 1 (positions 1, 3, 5): \"acb\" Group 2 (positions 2, 4, 6): \"bac\" Neither group forms a palindrome. For d = 3: Group 1 (positions 1, 4): \"aa\" Group 2 (positions 2, 5): \"bb\" Group 3 (positions 3, 6): \"cc\" All groups form palindromes. Therefore, \"abcabc\" is a semi-palindrome.   Example 1: Input: s = \"abcac\", k = 2 Output: 1 Explanation: Divide s into \"ab\" and \"cac\". \"cac\" is already semi-palindrome. Change \"ab\" to \"aa\", it becomes semi-palindrome with d = 1. Example 2: Input: s = \"abcdef\", k = 2 Output: 2 Explanation: Divide s into substrings \"abc\" and \"def\". Each needs one change to become semi-palindrome. Example 3: Input: s = \"aabbaa\", k = 3 Output: 0 Explanation: Divide s into substrings \"aa\", \"bb\" and \"aa\". All are already semi-palindromes.   Constraints: 2 <= s.length <= 200 1 <= k <= s.length / 2 s contains only lowercase English letters.",
        "2171": "You are given a 0-indexed integer array nums. The distinct count of a subarray of nums is defined as: Let nums[i..j] be a subarray of nums consisting of all the indices from i to j such that 0 <= i <= j < nums.length. Then the number of distinct values in nums[i..j] is called the distinct count of nums[i..j]. Return the sum of the squares of distinct counts of all subarrays of nums. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [1,2,1] Output: 15 Explanation: Six possible subarrays are: [1]: 1 distinct value [2]: 1 distinct value [1]: 1 distinct value [1,2]: 2 distinct values [2,1]: 2 distinct values [1,2,1]: 2 distinct values The sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15. Example 2: Input: nums = [1,1] Output: 3 Explanation: Three possible subarrays are: [1]: 1 distinct value [1]: 1 distinct value [1,1]: 1 distinct value The sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3.   Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100",
        "2172": "You are given a 0-indexed binary string s having an even length. A string is beautiful if it's possible to partition it into one or more substrings such that: Each substring has an even length. Each substring contains only 1's or only 0's. You can change any character in s to 0 or 1. Return the minimum number of changes required to make the string s beautiful.   Example 1: Input: s = \"1001\" Output: 2 Explanation: We change s[1] to 1 and s[3] to 0 to get string \"1100\". It can be seen that the string \"1100\" is beautiful because we can partition it into \"11|00\". It can be proven that 2 is the minimum number of changes needed to make the string beautiful. Example 2: Input: s = \"10\" Output: 1 Explanation: We change s[1] to 1 to get string \"11\". It can be seen that the string \"11\" is beautiful because we can partition it into \"11\". It can be proven that 1 is the minimum number of changes needed to make the string beautiful. Example 3: Input: s = \"0000\" Output: 0 Explanation: We don't need to make any changes as the string \"0000\" is beautiful already.   Constraints: 2 <= s.length <= 105 s has an even length. s[i] is either '0' or '1'.",
        "2173": "You are given a 0-indexed array of integers nums, and an integer target. Return the length of the longest subsequence of nums that sums up to target. If no such subsequence exists, return -1. A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.   Example 1: Input: nums = [1,2,3,4,5], target = 9 Output: 3 Explanation: There are 3 subsequences with a sum equal to 9: [4,5], [1,3,5], and [2,3,4]. The longest subsequences are [1,3,5], and [2,3,4]. Hence, the answer is 3. Example 2: Input: nums = [4,1,3,2,1,5], target = 7 Output: 4 Explanation: There are 5 subsequences with a sum equal to 7: [4,3], [4,1,2], [4,2,1], [1,1,5], and [1,3,2,1]. The longest subsequence is [1,3,2,1]. Hence, the answer is 4. Example 3: Input: nums = [1,1,5,4,5], target = 3 Output: -1 Explanation: It can be shown that nums has no subsequence that sums up to 3.   Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 1000 1 <= target <= 1000",
        "2174": "You are given a 0-indexed integer array nums. The distinct count of a subarray of nums is defined as: Let nums[i..j] be a subarray of nums consisting of all the indices from i to j such that 0 <= i <= j < nums.length. Then the number of distinct values in nums[i..j] is called the distinct count of nums[i..j]. Return the sum of the squares of distinct counts of all subarrays of nums. Since the answer may be very large, return it modulo 109 + 7. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [1,2,1] Output: 15 Explanation: Six possible subarrays are: [1]: 1 distinct value [2]: 1 distinct value [1]: 1 distinct value [1,2]: 2 distinct values [2,1]: 2 distinct values [1,2,1]: 2 distinct values The sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15. Example 2: Input: nums = [2,2] Output: 3 Explanation: Three possible subarrays are: [2]: 1 distinct value [2]: 1 distinct value [2,2]: 1 distinct value The sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105",
        "2175": "You are given a 0-indexed integer array nums having length n, and an integer k. You can perform the following increment operation any number of times (including zero): Choose an index i in the range [0, n - 1], and increase nums[i] by 1. An array is considered beautiful if, for any subarray with a size of 3 or more, its maximum element is greater than or equal to k. Return an integer denoting the minimum number of increment operations needed to make nums beautiful. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [2,3,0,0,2], k = 4 Output: 3 Explanation: We can perform the following increment operations to make nums beautiful: Choose index i = 1 and increase nums[1] by 1 -> [2,4,0,0,2]. Choose index i = 4 and increase nums[4] by 1 -> [2,4,0,0,3]. Choose index i = 4 and increase nums[4] by 1 -> [2,4,0,0,4]. The subarrays with a size of 3 or more are: [2,4,0], [4,0,0], [0,0,4], [2,4,0,0], [4,0,0,4], [2,4,0,0,4]. In all the subarrays, the maximum element is equal to k = 4, so nums is now beautiful. It can be shown that nums cannot be made beautiful with fewer than 3 increment operations. Hence, the answer is 3. Example 2: Input: nums = [0,1,3,3], k = 5 Output: 2 Explanation: We can perform the following increment operations to make nums beautiful: Choose index i = 2 and increase nums[2] by 1 -> [0,1,4,3]. Choose index i = 2 and increase nums[2] by 1 -> [0,1,5,3]. The subarrays with a size of 3 or more are: [0,1,5], [1,5,3], [0,1,5,3]. In all the subarrays, the maximum element is equal to k = 5, so nums is now beautiful. It can be shown that nums cannot be made beautiful with fewer than 2 increment operations. Hence, the answer is 2. Example 3: Input: nums = [1,1,2], k = 1 Output: 0 Explanation: The only subarray with a size of 3 or more in this example is [1,1,2]. The maximum element, 2, is already greater than k = 1, so we don't need any increment operation. Hence, the answer is 0.   Constraints: 3 <= n == nums.length <= 105 0 <= nums[i] <= 109 0 <= k <= 109",
        "2176": "There exists an undirected tree rooted at node 0 with n nodes labeled from 0 to n - 1. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given a 0-indexed array coins of size n where coins[i] indicates the number of coins in the vertex i, and an integer k. Starting from the root, you have to collect all the coins such that the coins at a node can only be collected if the coins of its ancestors have been already collected. Coins at nodei can be collected in one of the following ways: Collect all the coins, but you will get coins[i] - k points. If coins[i] - k is negative then you will lose abs(coins[i] - k) points. Collect all the coins, but you will get floor(coins[i] / 2) points. If this way is used, then for all the nodej present in the subtree of nodei, coins[j] will get reduced to floor(coins[j] / 2). Return the maximum points you can get after collecting the coins from all the tree nodes.   Example 1: Input: edges = [[0,1],[1,2],[2,3]], coins = [10,10,3,3], k = 5 Output: 11                         Explanation:  Collect all the coins from node 0 using the first way. Total points = 10 - 5 = 5. Collect all the coins from node 1 using the first way. Total points = 5 + (10 - 5) = 10. Collect all the coins from node 2 using the second way so coins left at node 3 will be floor(3 / 2) = 1. Total points = 10 + floor(3 / 2) = 11. Collect all the coins from node 3 using the second way. Total points = 11 + floor(1 / 2) = 11. It can be shown that the maximum points we can get after collecting coins from all the nodes is 11.  Example 2: Input: edges = [[0,1],[0,2]], coins = [8,4,4], k = 0 Output: 16 Explanation:  Coins will be collected from all the nodes using the first way. Therefore, total points = (8 - 0) + (4 - 0) + (4 - 0) = 16.   Constraints: n == coins.length 2 <= n <= 105 0 <= coins[i] <= 104 edges.length == n - 1 0 <= edges[i][0], edges[i][1] < n 0 <= k <= 104",
        "2177": "There are n teams numbered from 0 to n - 1 in a tournament. Given a 0-indexed 2D boolean matrix grid of size n * n. For all i, j that 0 <= i, j <= n - 1 and i != j team i is stronger than team j if grid[i][j] == 1, otherwise, team j is stronger than team i. Team a will be the champion of the tournament if there is no team b that is stronger than team a. Return the team that will be the champion of the tournament.   Example 1: Input: grid = [[0,1],[0,0]] Output: 0 Explanation: There are two teams in this tournament. grid[0][1] == 1 means that team 0 is stronger than team 1. So team 0 will be the champion. Example 2: Input: grid = [[0,0,1],[1,0,1],[0,0,0]] Output: 1 Explanation: There are three teams in this tournament. grid[1][0] == 1 means that team 1 is stronger than team 0. grid[1][2] == 1 means that team 1 is stronger than team 2. So team 1 will be the champion.   Constraints: n == grid.length n == grid[i].length 2 <= n <= 100 grid[i][j] is either 0 or 1. For all i grid[i][i] is 0. For all i, j that i != j, grid[i][j] != grid[j][i]. The input is generated such that if team a is stronger than team b and team b is stronger than team c, then team a is stronger than team c.",
        "2178": "There are n teams numbered from 0 to n - 1 in a tournament; each team is also a node in a DAG. You are given the integer n and a 0-indexed 2D integer array edges of length m representing the DAG, where edges[i] = [ui, vi] indicates that there is a directed edge from team ui to team vi in the graph. A directed edge from a to b in the graph means that team a is stronger than team b and team b is weaker than team a. Team a will be the champion of the tournament if there is no team b that is stronger than team a. Return the team that will be the champion of the tournament if there is a unique champion, otherwise, return -1. Notes A cycle is a series of nodes a1, a2, ..., an, an+1 such that node a1 is the same node as node an+1, the nodes a1, a2, ..., an are distinct, and there is a directed edge from the node ai to node ai+1 for every i in the range [1, n]. A DAG is a directed graph that does not have any cycle.   Example 1: Input: n = 3, edges = [[0,1],[1,2]] Output: 0 Explanation: Team 1 is weaker than team 0. Team 2 is weaker than team 1. So the champion is team 0. Example 2: Input: n = 4, edges = [[0,2],[1,3],[1,2]] Output: -1 Explanation: Team 2 is weaker than team 0 and team 1. Team 3 is weaker than team 1. But team 1 and team 0 are not weaker than any other teams. So the answer is -1.   Constraints: 1 <= n <= 100 m == edges.length 0 <= m <= n * (n - 1) / 2 edges[i].length == 2 0 <= edge[i][j] <= n - 1 edges[i][0] != edges[i][1] The input is generated such that if team a is stronger than team b, team b is not stronger than team a. The input is generated such that if team a is stronger than team b and team b is stronger than team c, then team a is stronger than team c.",
        "2179": "There is an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given a 0-indexed integer array values of length n, where values[i] is the value associated with the ith node. You start with a score of 0. In one operation, you can: Pick any node i. Add values[i] to your score. Set values[i] to 0. A tree is healthy if the sum of values on the path from the root to any leaf node is different than zero. Return the maximum score you can obtain after performing these operations on the tree any number of times so that it remains healthy.   Example 1: Input: edges = [[0,1],[0,2],[0,3],[2,4],[4,5]], values = [5,2,5,2,1,1] Output: 11 Explanation: We can choose nodes 1, 2, 3, 4, and 5. The value of the root is non-zero. Hence, the sum of values on the path from the root to any leaf is different than zero. Therefore, the tree is healthy and the score is values[1] + values[2] + values[3] + values[4] + values[5] = 11. It can be shown that 11 is the maximum score obtainable after any number of operations on the tree. Example 2: Input: edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [20,10,9,7,4,3,5] Output: 40 Explanation: We can choose nodes 0, 2, 3, and 4. - The sum of values on the path from 0 to 4 is equal to 10. - The sum of values on the path from 0 to 3 is equal to 10. - The sum of values on the path from 0 to 5 is equal to 3. - The sum of values on the path from 0 to 6 is equal to 5. Therefore, the tree is healthy and the score is values[0] + values[2] + values[3] + values[4] = 40. It can be shown that 40 is the maximum score obtainable after any number of operations on the tree.   Constraints: 2 <= n <= 2 * 104 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n values.length == n 1 <= values[i] <= 109 The input is generated such that edges represents a valid tree.",
        "2180": "You are given a 0-indexed integer array nums. A subsequence of nums having length k and consisting of indices i0 < i1 < ... < ik-1 is balanced if the following holds: nums[ij] - nums[ij-1] >= ij - ij-1, for every j in the range [1, k - 1]. A subsequence of nums having length 1 is considered balanced. Return an integer denoting the maximum possible sum of elements in a balanced subsequence of nums. A subsequence of an array is a new non-empty array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.   Example 1: Input: nums = [3,3,5,6] Output: 14 Explanation: In this example, the subsequence [3,5,6] consisting of indices 0, 2, and 3 can be selected. nums[2] - nums[0] >= 2 - 0. nums[3] - nums[2] >= 3 - 2. Hence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums. The subsequence consisting of indices 1, 2, and 3 is also valid. It can be shown that it is not possible to get a balanced subsequence with a sum greater than 14. Example 2: Input: nums = [5,-1,-3,8] Output: 13 Explanation: In this example, the subsequence [5,8] consisting of indices 0 and 3 can be selected. nums[3] - nums[0] >= 3 - 0. Hence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums. It can be shown that it is not possible to get a balanced subsequence with a sum greater than 13. Example 3: Input: nums = [-2,-1] Output: -1 Explanation: In this example, the subsequence [-1] can be selected. It is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.   Constraints: 1 <= nums.length <= 105 -109 <= nums[i] <= 109",
        "2181": "You are given two positive integers n and limit. Return the total number of ways to distribute n candies among 3 children such that no child gets more than limit candies.   Example 1: Input: n = 5, limit = 2 Output: 3 Explanation: There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1). Example 2: Input: n = 3, limit = 3 Output: 10 Explanation: There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0).   Constraints: 1 <= n <= 50 1 <= limit <= 50",
        "2182": "You are given two positive integers n and limit. Return the total number of ways to distribute n candies among 3 children such that no child gets more than limit candies.   Example 1: Input: n = 5, limit = 2 Output: 3 Explanation: There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1). Example 2: Input: n = 3, limit = 3 Output: 10 Explanation: There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0).   Constraints: 1 <= n <= 106 1 <= limit <= 106",
        "2183": "You are given an integer n. A string s is called good if it contains only lowercase English characters and it is possible to rearrange the characters of s such that the new string contains \"leet\" as a substring. For example: The string \"lteer\" is good because we can rearrange it to form \"leetr\" . \"letl\" is not good because we cannot rearrange it to contain \"leet\" as a substring. Return the total number of good strings of length n. Since the answer may be large, return it modulo 109 + 7. A substring is a contiguous sequence of characters within a string.     Example 1: Input: n = 4 Output: 12 Explanation: The 12 strings which can be rearranged to have \"leet\" as a substring are: \"eelt\", \"eetl\", \"elet\", \"elte\", \"etel\", \"etle\", \"leet\", \"lete\", \"ltee\", \"teel\", \"tele\", and \"tlee\". Example 2: Input: n = 10 Output: 83943898 Explanation: The number of strings with length 10 which can be rearranged to have \"leet\" as a substring is 526083947580. Hence the answer is 526083947580 % (109 + 7) = 83943898.   Constraints: 1 <= n <= 105",
        "2184": "You are given a 0-indexed m * n integer matrix values, representing the values of m * n different items in m different shops. Each shop has n items where the jth item in the ith shop has a value of values[i][j]. Additionally, the items in the ith shop are sorted in non-increasing order of value. That is, values[i][j] >= values[i][j + 1] for all 0 <= j < n - 1. On each day, you would like to buy a single item from one of the shops. Specifically, On the dth day you can: Pick any shop i. Buy the rightmost available item j for the price of values[i][j] * d. That is, find the greatest index j such that item j was never bought before, and buy it for the price of values[i][j] * d. Note that all items are pairwise different. For example, if you have bought item 0 from shop 1, you can still buy item 0 from any other shop. Return the maximum amount of money that can be spent on buying all m * n products.   Example 1: Input: values = [[8,5,2],[6,4,1],[9,7,3]] Output: 285 Explanation: On the first day, we buy product 2 from shop 1 for a price of values[1][2] * 1 = 1. On the second day, we buy product 2 from shop 0 for a price of values[0][2] * 2 = 4. On the third day, we buy product 2 from shop 2 for a price of values[2][2] * 3 = 9. On the fourth day, we buy product 1 from shop 1 for a price of values[1][1] * 4 = 16. On the fifth day, we buy product 1 from shop 0 for a price of values[0][1] * 5 = 25. On the sixth day, we buy product 0 from shop 1 for a price of values[1][0] * 6 = 36. On the seventh day, we buy product 1 from shop 2 for a price of values[2][1] * 7 = 49. On the eighth day, we buy product 0 from shop 0 for a price of values[0][0] * 8 = 64. On the ninth day, we buy product 0 from shop 2 for a price of values[2][0] * 9 = 81. Hence, our total spending is equal to 285. It can be shown that 285 is the maximum amount of money that can be spent buying all m * n products.  Example 2: Input: values = [[10,8,6,4,2],[9,7,5,3,2]] Output: 386 Explanation: On the first day, we buy product 4 from shop 0 for a price of values[0][4] * 1 = 2. On the second day, we buy product 4 from shop 1 for a price of values[1][4] * 2 = 4. On the third day, we buy product 3 from shop 1 for a price of values[1][3] * 3 = 9. On the fourth day, we buy product 3 from shop 0 for a price of values[0][3] * 4 = 16. On the fifth day, we buy product 2 from shop 1 for a price of values[1][2] * 5 = 25. On the sixth day, we buy product 2 from shop 0 for a price of values[0][2] * 6 = 36. On the seventh day, we buy product 1 from shop 1 for a price of values[1][1] * 7 = 49. On the eighth day, we buy product 1 from shop 0 for a price of values[0][1] * 8 = 64 On the ninth day, we buy product 0 from shop 1 for a price of values[1][0] * 9 = 81. On the tenth day, we buy product 0 from shop 0 for a price of values[0][0] * 10 = 100. Hence, our total spending is equal to 386. It can be shown that 386 is the maximum amount of money that can be spent buying all m * n products.   Constraints: 1 <= m == values.length <= 10 1 <= n == values[i].length <= 104 1 <= values[i][j] <= 106 values[i] are sorted in non-increasing order.",
        "2185": "You are given a 0-indexed integer array nums. A pair of integers x and y is called a strong pair if it satisfies the condition: |x - y| <= min(x, y) You need to select two integers from nums such that they form a strong pair and their bitwise XOR is the maximum among all strong pairs in the array. Return the maximum XOR value out of all possible strong pairs in the array nums. Note that you can pick the same integer twice to form a pair.   Example 1: Input: nums = [1,2,3,4,5] Output: 7 Explanation: There are 11 strong pairs in the array nums: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) and (5, 5). The maximum XOR possible from these pairs is 3 XOR 4 = 7. Example 2: Input: nums = [10,100] Output: 0 Explanation: There are 2 strong pairs in the array nums: (10, 10) and (100, 100). The maximum XOR possible from these pairs is 10 XOR 10 = 0 since the pair (100, 100) also gives 100 XOR 100 = 0. Example 3: Input: nums = [5,6,25,30] Output: 7 Explanation: There are 6 strong pairs in the array nums: (5, 5), (5, 6), (6, 6), (25, 25), (25, 30) and (30, 30). The maximum XOR possible from these pairs is 25 XOR 30 = 7 since the only other non-zero XOR value is 5 XOR 6 = 3.   Constraints: 1 <= nums.length <= 50 1 <= nums[i] <= 100",
        "2186": "You are given a 2D 0-indexed array of strings, access_times, with size n. For each i where 0 <= i <= n - 1, access_times[i][0] represents the name of an employee, and access_times[i][1] represents the access time of that employee. All entries in access_times are within the same day. The access time is represented as four digits using a 24-hour time format, for example, \"0800\" or \"2250\". An employee is said to be high-access if he has accessed the system three or more times within a one-hour period. Times with exactly one hour of difference are not considered part of the same one-hour period. For example, \"0815\" and \"0915\" are not part of the same one-hour period. Access times at the start and end of the day are not counted within the same one-hour period. For example, \"0005\" and \"2350\" are not part of the same one-hour period. Return a list that contains the names of high-access employees with any order you want.   Example 1: Input: access_times = [[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]] Output: [\"a\"] Explanation: \"a\" has three access times in the one-hour period of [05:32, 06:31] which are 05:32, 05:49, and 06:21. But \"b\" does not have more than two access times at all. So the answer is [\"a\"]. Example 2: Input: access_times = [[\"d\",\"0002\"],[\"c\",\"0808\"],[\"c\",\"0829\"],[\"e\",\"0215\"],[\"d\",\"1508\"],[\"d\",\"1444\"],[\"d\",\"1410\"],[\"c\",\"0809\"]] Output: [\"c\",\"d\"] Explanation: \"c\" has three access times in the one-hour period of [08:08, 09:07] which are 08:08, 08:09, and 08:29. \"d\" has also three access times in the one-hour period of [14:10, 15:09] which are 14:10, 14:44, and 15:08. However, \"e\" has just one access time, so it can not be in the answer and the final answer is [\"c\",\"d\"]. Example 3: Input: access_times = [[\"cd\",\"1025\"],[\"ab\",\"1025\"],[\"cd\",\"1046\"],[\"cd\",\"1055\"],[\"ab\",\"1124\"],[\"ab\",\"1120\"]] Output: [\"ab\",\"cd\"] Explanation: \"ab\" has three access times in the one-hour period of [10:25, 11:24] which are 10:25, 11:20, and 11:24. \"cd\" has also three access times in the one-hour period of [10:25, 11:24] which are 10:25, 10:46, and 10:55. So the answer is [\"ab\",\"cd\"].   Constraints: 1 <= access_times.length <= 100 access_times[i].length == 2 1 <= access_times[i][0].length <= 10 access_times[i][0] consists only of English small letters. access_times[i][1].length == 4 access_times[i][1] is in 24-hour time format. access_times[i][1] consists only of '0' to '9'.",
        "2187": "You are given two 0-indexed integer arrays, nums1 and nums2, both having length n. You are allowed to perform a series of operations (possibly none). In an operation, you select an index i in the range [0, n - 1] and swap the values of nums1[i] and nums2[i]. Your task is to find the minimum number of operations required to satisfy the following conditions: nums1[n - 1] is equal to the maximum value among all elements of nums1, i.e., nums1[n - 1] = max(nums1[0], nums1[1], ..., nums1[n - 1]). nums2[n - 1] is equal to the maximum value among all elements of nums2, i.e., nums2[n - 1] = max(nums2[0], nums2[1], ..., nums2[n - 1]). Return an integer denoting the minimum number of operations needed to meet both conditions, or -1 if it is impossible to satisfy both conditions.   Example 1: Input: nums1 = [1,2,7], nums2 = [4,5,3] Output: 1 Explanation: In this example, an operation can be performed using index i = 2. When nums1[2] and nums2[2] are swapped, nums1 becomes [1,2,3] and nums2 becomes [4,5,7]. Both conditions are now satisfied. It can be shown that the minimum number of operations needed to be performed is 1. So, the answer is 1. Example 2: Input: nums1 = [2,3,4,5,9], nums2 = [8,8,4,4,4] Output: 2 Explanation: In this example, the following operations can be performed: First operation using index i = 4. When nums1[4] and nums2[4] are swapped, nums1 becomes [2,3,4,5,4], and nums2 becomes [8,8,4,4,9]. Another operation using index i = 3. When nums1[3] and nums2[3] are swapped, nums1 becomes [2,3,4,4,4], and nums2 becomes [8,8,4,5,9]. Both conditions are now satisfied. It can be shown that the minimum number of operations needed to be performed is 2. So, the answer is 2.    Example 3: Input: nums1 = [1,5,4], nums2 = [2,5,3] Output: -1 Explanation: In this example, it is not possible to satisfy both conditions.  So, the answer is -1.   Constraints: 1 <= n == nums1.length == nums2.length <= 1000 1 <= nums1[i] <= 109 1 <= nums2[i] <= 109",
        "2188": "You are given a 0-indexed integer array nums. A pair of integers x and y is called a strong pair if it satisfies the condition: |x - y| <= min(x, y) You need to select two integers from nums such that they form a strong pair and their bitwise XOR is the maximum among all strong pairs in the array. Return the maximum XOR value out of all possible strong pairs in the array nums. Note that you can pick the same integer twice to form a pair.   Example 1: Input: nums = [1,2,3,4,5] Output: 7 Explanation: There are 11 strong pairs in the array nums: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) and (5, 5). The maximum XOR possible from these pairs is 3 XOR 4 = 7. Example 2: Input: nums = [10,100] Output: 0 Explanation: There are 2 strong pairs in the array nums: (10, 10) and (100, 100). The maximum XOR possible from these pairs is 10 XOR 10 = 0 since the pair (100, 100) also gives 100 XOR 100 = 0. Example 3: Input: nums = [500,520,2500,3000] Output: 1020 Explanation: There are 6 strong pairs in the array nums: (500, 500), (500, 520), (520, 520), (2500, 2500), (2500, 3000) and (3000, 3000). The maximum XOR possible from these pairs is 500 XOR 520 = 1020 since the only other non-zero XOR value is 2500 XOR 3000 = 636.   Constraints: 1 <= nums.length <= 5 * 104 1 <= nums[i] <= 220 - 1",
        "2189": "You are given three strings: s1, s2, and s3. In one operation you can choose one of these strings and delete its rightmost character. Note that you cannot completely empty a string. Return the minimum number of operations required to make the strings equal. If it is impossible to make them equal, return -1.   Example 1: Input: s1 = \"abc\", s2 = \"abb\", s3 = \"ab\" Output: 2 Explanation: Deleting the rightmost character from both s1 and s2 will result in three equal strings. Example 2: Input: s1 = \"dac\", s2 = \"bac\", s3 = \"cac\" Output: -1 Explanation: Since the first letters of s1 and s2 differ, they cannot be made equal.   Constraints: 1 <= s1.length, s2.length, s3.length <= 100 s1, s2 and s3 consist only of lowercase English letters.",
        "2190": "There are n balls on a table, each ball has a color black or white. You are given a 0-indexed binary string s of length n, where 1 and 0 represent black and white balls, respectively. In each step, you can choose two adjacent balls and swap them. Return the minimum number of steps to group all the black balls to the right and all the white balls to the left.   Example 1: Input: s = \"101\" Output: 1 Explanation: We can group all the black balls to the right in the following way: - Swap s[0] and s[1], s = \"011\". Initially, 1s are not grouped together, requiring at least 1 step to group them to the right. Example 2: Input: s = \"100\" Output: 2 Explanation: We can group all the black balls to the right in the following way: - Swap s[0] and s[1], s = \"010\". - Swap s[1] and s[2], s = \"001\". It can be proven that the minimum number of steps needed is 2. Example 3: Input: s = \"0111\" Output: 0 Explanation: All the black balls are already grouped to the right.   Constraints: 1 <= n == s.length <= 105 s[i] is either '0' or '1'.",
        "2191": "Given three integers a, b, and n, return the maximum value of (a XOR x) * (b XOR x) where 0 <= x < 2n. Since the answer may be too large, return it modulo 109 + 7. Note that XOR is the bitwise XOR operation.   Example 1: Input: a = 12, b = 5, n = 4 Output: 98 Explanation: For x = 2, (a XOR x) = 14 and (b XOR x) = 7. Hence, (a XOR x) * (b XOR x) = 98.  It can be shown that 98 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n. Example 2: Input: a = 6, b = 7 , n = 5 Output: 930 Explanation: For x = 25, (a XOR x) = 31 and (b XOR x) = 30. Hence, (a XOR x) * (b XOR x) = 930. It can be shown that 930 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n. Example 3: Input: a = 1, b = 6, n = 3 Output: 12 Explanation: For x = 5, (a XOR x) = 4 and (b XOR x) = 3. Hence, (a XOR x) * (b XOR x) = 12. It can be shown that 12 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.   Constraints: 0 <= a, b < 250 0 <= n <= 50",
        "2192": "You are given a 0-indexed array heights of positive integers, where heights[i] represents the height of the ith building. If a person is in building i, they can move to any other building j if and only if i < j and heights[i] < heights[j]. You are also given another array queries where queries[i] = [ai, bi]. On the ith query, Alice is in building ai while Bob is in building bi. Return an array ans where ans[i] is the index of the leftmost building where Alice and Bob can meet on the ith query. If Alice and Bob cannot move to a common building on query i, set ans[i] to -1.   Example 1: Input: heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]] Output: [2,5,-1,5,2] Explanation: In the first query, Alice and Bob can move to building 2 since heights[0] < heights[2] and heights[1] < heights[2].  In the second query, Alice and Bob can move to building 5 since heights[0] < heights[5] and heights[3] < heights[5].  In the third query, Alice cannot meet Bob since Alice cannot move to any other building. In the fourth query, Alice and Bob can move to building 5 since heights[3] < heights[5] and heights[4] < heights[5]. In the fifth query, Alice and Bob are already in the same building.   For ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet. For ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet. Example 2: Input: heights = [5,3,8,2,6,1,4,6], queries = [[0,7],[3,5],[5,2],[3,0],[1,6]] Output: [7,6,-1,4,6] Explanation: In the first query, Alice can directly move to Bob's building since heights[0] < heights[7]. In the second query, Alice and Bob can move to building 6 since heights[3] < heights[6] and heights[5] < heights[6]. In the third query, Alice cannot meet Bob since Bob cannot move to any other building. In the fourth query, Alice and Bob can move to building 4 since heights[3] < heights[4] and heights[0] < heights[4]. In the fifth query, Alice can directly move to Bob's building since heights[1] < heights[6]. For ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet. For ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.   Constraints: 1 <= heights.length <= 5 * 104 1 <= heights[i] <= 109 1 <= queries.length <= 5 * 104 queries[i] = [ai, bi] 0 <= ai, bi <= heights.length - 1",
        "2193": "You are given a 0-indexed array of strings words and a character x. Return an array of indices representing the words that contain the character x. Note that the returned array may be in any order.   Example 1: Input: words = [\"leet\",\"code\"], x = \"e\" Output: [0,1] Explanation: \"e\" occurs in both words: \"leet\", and \"code\". Hence, we return indices 0 and 1. Example 2: Input: words = [\"abc\",\"bcd\",\"aaaa\",\"cbc\"], x = \"a\" Output: [0,2] Explanation: \"a\" occurs in \"abc\", and \"aaaa\". Hence, we return indices 0 and 2. Example 3: Input: words = [\"abc\",\"bcd\",\"aaaa\",\"cbc\"], x = \"z\" Output: [] Explanation: \"z\" does not occur in any of the words. Hence, we return an empty array.   Constraints: 1 <= words.length <= 50 1 <= words[i].length <= 50 x is a lowercase English letter. words[i] consists only of lowercase English letters.",
        "2194": "You are given the two integers, n and m and two integer arrays, hBars and vBars. The grid has n + 2 horizontal and m + 2 vertical bars, creating 1 x 1 unit cells. The bars are indexed starting from 1. You can remove some of the bars in hBars from horizontal bars and some of the bars in vBars from vertical bars. Note that other bars are fixed and cannot be removed. Return an integer denoting the maximum area of a square-shaped hole in the grid, after removing some bars (possibly none).   Example 1: Input: n = 2, m = 1, hBars = [2,3], vBars = [2] Output: 4 Explanation: The left image shows the initial grid formed by the bars. The horizontal bars are [1,2,3,4], and the vertical bars are [1,2,3]. One way to get the maximum square-shaped hole is by removing horizontal bar 2 and vertical bar 2. Example 2: Input: n = 1, m = 1, hBars = [2], vBars = [2] Output: 4 Explanation: To get the maximum square-shaped hole, we remove horizontal bar 2 and vertical bar 2. Example 3: Input: n = 2, m = 3, hBars = [2,3], vBars = [2,4] Output: 4 Explanation: One way to get the maximum square-shaped hole is by removing horizontal bar 3, and vertical bar 4.   Constraints: 1 <= n <= 109 1 <= m <= 109 1 <= hBars.length <= 100 2 <= hBars[i] <= n + 1 1 <= vBars.length <= 100 2 <= vBars[i] <= m + 1 All values in hBars are distinct. All values in vBars are distinct.",
        "2195": "You are given an integer array prices where prices[i] denotes the number of coins needed to purchase the ith fruit. The fruit market has the following reward for each fruit: If you purchase the ith fruit at prices[i] coins, you can get any number of the next (i + 1) fruits for free. Note that even if you can take fruit j for free, you can still purchase it for prices[j] coins to receive its reward. Return the minimum number of coins needed to acquire all the fruits.   Example 1: Input: prices = [3,1,2] Output: 4 Explanation: Purchase the 1st fruit with prices[0] = 3 coins, you are allowed to take the 2nd fruit for free. Purchase the 2nd fruit with prices[1] = 1 coin, you are allowed to take the 3rd fruit for free. Take the 3rd fruit for free. Note that even though you could take the 2nd fruit for free as a reward of buying 1st fruit, you purchase it to receive its reward, which is more optimal. Example 2: Input: prices = [1,10,1,1] Output: 2 Explanation: Purchase the 1st fruit with prices[0] = 1 coin, you are allowed to take the 2nd fruit for free. Take the 2nd fruit for free. Purchase the 3rd fruit for prices[2] = 1 coin, you are allowed to take the 4th fruit for free. Take the 4th fruit for free. Example 3: Input: prices = [26,18,6,12,49,7,45,45] Output: 39 Explanation: Purchase the 1st fruit with prices[0] = 26 coin, you are allowed to take the 2nd fruit for free. Take the 2nd fruit for free. Purchase the 3rd fruit for prices[2] = 6 coin, you are allowed to take the 4th, 5th and 6th (the next three) fruits for free. Take the 4th fruit for free. Take the 5th fruit for free. Purchase the 6th fruit with prices[5] = 7 coin, you are allowed to take the 8th and 9th fruit for free. Take the 7th fruit for free. Take the 8th fruit for free. Note that even though you could take the 6th fruit for free as a reward of buying 3rd fruit, you purchase it to receive its reward, which is more optimal.   Constraints: 1 <= prices.length <= 1000 1 <= prices[i] <= 105",
        "2196": "You are given a 0-indexed integer array nums. You can perform any number of operations, where each operation involves selecting a subarray of the array and replacing it with the sum of its elements. For example, if the given array is [1,3,5,6] and you select subarray [3,5] the array will convert to [1,8,6]. Return the maximum length of a non-decreasing array that can be made after applying operations. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [5,2,2] Output: 1 Explanation: This array with length 3 is not non-decreasing. We have two ways to make the array length two. First, choosing subarray [2,2] converts the array to [5,4]. Second, choosing subarray [5,2] converts the array to [7,2]. In these two ways the array is not non-decreasing. And if we choose subarray [5,2,2] and replace it with [9] it becomes non-decreasing.  So the answer is 1. Example 2: Input: nums = [1,2,3,4] Output: 4 Explanation: The array is non-decreasing. So the answer is 4. Example 3: Input: nums = [4,3,2,6] Output: 3 Explanation: Replacing [3,2] with [5] converts the given array to [4,5,6] that is non-decreasing. Because the given array is not non-decreasing, the maximum possible answer is 3.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105",
        "2197": "You are given an m x n integer matrix mat and an integer k. The matrix rows are 0-indexed. The following proccess happens k times: Even-indexed rows (0, 2, 4, ...) are cyclically shifted to the left. Odd-indexed rows (1, 3, 5, ...) are cyclically shifted to the right. Return true if the final modified matrix after k steps is identical to the original matrix, and false otherwise.   Example 1: Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 4 Output: false Explanation: In each step left shift is applied to rows 0 and 2 (even indices), and right shift to row 1 (odd index). Example 2: Input: mat = [[1,2,1,2],[5,5,5,5],[6,3,6,3]], k = 2 Output: true Explanation: Example 3: Input: mat = [[2,2],[2,2]], k = 3 Output: true Explanation: As all the values are equal in the matrix, even after performing cyclic shifts the matrix will remain the same.   Constraints: 1 <= mat.length <= 25 1 <= mat[i].length <= 25 1 <= mat[i][j] <= 25 1 <= k <= 50",
        "2198": "You are given a string s and a positive integer k. Let vowels and consonants be the number of vowels and consonants in a string. A string is beautiful if: vowels == consonants. (vowels * consonants) % k == 0, in other terms the multiplication of vowels and consonants is divisible by k. Return the number of non-empty beautiful substrings in the given string s. A substring is a contiguous sequence of characters in a string. Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'. Consonant letters in English are every letter except vowels.   Example 1: Input: s = \"baeyh\", k = 2 Output: 2 Explanation: There are 2 beautiful substrings in the given string. - Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"y\",\"h\"]). You can see that string \"aeyh\" is beautiful as vowels == consonants and vowels * consonants % k == 0. - Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"b\",\"y\"]).  You can see that string \"baey\" is beautiful as vowels == consonants and vowels * consonants % k == 0. It can be shown that there are only 2 beautiful substrings in the given string. Example 2: Input: s = \"abba\", k = 1 Output: 3 Explanation: There are 3 beautiful substrings in the given string. - Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]).  - Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]). - Substring \"abba\", vowels = 2 ([\"a\",\"a\"]), consonants = 2 ([\"b\",\"b\"]). It can be shown that there are only 3 beautiful substrings in the given string. Example 3: Input: s = \"bcdf\", k = 1 Output: 0 Explanation: There are no beautiful substrings in the given string.   Constraints: 1 <= s.length <= 1000 1 <= k <= 1000 s consists of only English lowercase letters.",
        "2199": "You are given a 0-indexed array of positive integers nums and a positive integer limit. In one operation, you can choose any two indices i and j and swap nums[i] and nums[j] if |nums[i] - nums[j]| <= limit. Return the lexicographically smallest array that can be obtained by performing the operation any number of times. An array a is lexicographically smaller than an array b if in the first position where a and b differ, array a has an element that is less than the corresponding element in b. For example, the array [2,10,3] is lexicographically smaller than the array [10,2,3] because they differ at index 0 and 2 < 10.   Example 1: Input: nums = [1,5,3,9,8], limit = 2 Output: [1,3,5,8,9] Explanation: Apply the operation 2 times: - Swap nums[1] with nums[2]. The array becomes [1,3,5,9,8] - Swap nums[3] with nums[4]. The array becomes [1,3,5,8,9] We cannot obtain a lexicographically smaller array by applying any more operations. Note that it may be possible to get the same result by doing different operations. Example 2: Input: nums = [1,7,6,18,2,1], limit = 3 Output: [1,6,7,18,1,2] Explanation: Apply the operation 3 times: - Swap nums[1] with nums[2]. The array becomes [1,6,7,18,2,1] - Swap nums[0] with nums[4]. The array becomes [2,6,7,18,1,1] - Swap nums[0] with nums[5]. The array becomes [1,6,7,18,1,2] We cannot obtain a lexicographically smaller array by applying any more operations. Example 3: Input: nums = [1,7,28,19,10], limit = 3 Output: [1,7,28,19,10] Explanation: [1,7,28,19,10] is the lexicographically smallest array we can obtain because we cannot apply the operation on any two indices.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 1 <= limit <= 109",
        "2200": "You are given a string s and a positive integer k. Let vowels and consonants be the number of vowels and consonants in a string. A string is beautiful if: vowels == consonants. (vowels * consonants) % k == 0, in other terms the multiplication of vowels and consonants is divisible by k. Return the number of non-empty beautiful substrings in the given string s. A substring is a contiguous sequence of characters in a string. Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'. Consonant letters in English are every letter except vowels.   Example 1: Input: s = \"baeyh\", k = 2 Output: 2 Explanation: There are 2 beautiful substrings in the given string. - Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"y\",\"h\"]). You can see that string \"aeyh\" is beautiful as vowels == consonants and vowels * consonants % k == 0. - Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"b\",\"y\"]). You can see that string \"baey\" is beautiful as vowels == consonants and vowels * consonants % k == 0. It can be shown that there are only 2 beautiful substrings in the given string. Example 2: Input: s = \"abba\", k = 1 Output: 3 Explanation: There are 3 beautiful substrings in the given string. - Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]). - Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]). - Substring \"abba\", vowels = 2 ([\"a\",\"a\"]), consonants = 2 ([\"b\",\"b\"]). It can be shown that there are only 3 beautiful substrings in the given string. Example 3: Input: s = \"bcdf\", k = 1 Output: 0 Explanation: There are no beautiful substrings in the given string.   Constraints: 1 <= s.length <= 5 * 104 1 <= k <= 1000 s consists of only English lowercase letters.",
        "2201": "You are given a 0-indexed array mountain. Your task is to find all the peaks in the mountain array. Return an array that consists of indices of peaks in the given array in any order. Notes: A peak is defined as an element that is strictly greater than its neighboring elements. The first and last elements of the array are not a peak.   Example 1: Input: mountain = [2,4,4] Output: [] Explanation: mountain[0] and mountain[2] can not be a peak because they are first and last elements of the array. mountain[1] also can not be a peak because it is not strictly greater than mountain[2]. So the answer is []. Example 2: Input: mountain = [1,4,3,8,5] Output: [1,3] Explanation: mountain[0] and mountain[4] can not be a peak because they are first and last elements of the array. mountain[2] also can not be a peak because it is not strictly greater than mountain[3] and mountain[1]. But mountain [1] and mountain[3] are strictly greater than their neighboring elements. So the answer is [1,3].   Constraints: 3 <= mountain.length <= 100 1 <= mountain[i] <= 100",
        "2202": "You are given a 0-indexed integer array coins, representing the values of the coins available, and an integer target. An integer x is obtainable if there exists a subsequence of coins that sums to x. Return the minimum number of coins of any value that need to be added to the array so that every integer in the range [1, target] is obtainable. A subsequence of an array is a new non-empty array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.   Example 1: Input: coins = [1,4,10], target = 19 Output: 2 Explanation: We need to add coins 2 and 8. The resulting array will be [1,2,4,8,10]. It can be shown that all integers from 1 to 19 are obtainable from the resulting array, and that 2 is the minimum number of coins that need to be added to the array.  Example 2: Input: coins = [1,4,10,5,7,19], target = 19 Output: 1 Explanation: We only need to add the coin 2. The resulting array will be [1,2,4,5,7,10,19]. It can be shown that all integers from 1 to 19 are obtainable from the resulting array, and that 1 is the minimum number of coins that need to be added to the array.  Example 3: Input: coins = [1,1,1], target = 20 Output: 3 Explanation: We need to add coins 4, 8, and 16. The resulting array will be [1,1,1,4,8,16]. It can be shown that all integers from 1 to 20 are obtainable from the resulting array, and that 3 is the minimum number of coins that need to be added to the array.   Constraints: 1 <= target <= 105 1 <= coins.length <= 105 1 <= coins[i] <= target",
        "2203": "You are given a string word and an integer k. A substring s of word is complete if: Each character in s occurs exactly k times. The difference between two adjacent characters is at most 2. That is, for any two adjacent characters c1 and c2 in s, the absolute difference in their positions in the alphabet is at most 2. Return the number of complete substrings of word. A substring is a non-empty contiguous sequence of characters in a string.   Example 1: Input: word = \"igigee\", k = 2 Output: 3 Explanation: The complete substrings where each character appears exactly twice and the difference between adjacent characters is at most 2 are: igigee, igigee, igigee. Example 2: Input: word = \"aaabbbccc\", k = 3 Output: 6 Explanation: The complete substrings where each character appears exactly three times and the difference between adjacent characters is at most 2 are: aaabbbccc, aaabbbccc, aaabbbccc, aaabbbccc, aaabbbccc, aaabbbccc.   Constraints: 1 <= word.length <= 105 word consists only of lowercase English letters. 1 <= k <= word.length",
        "2204": "You are given an integer n and an array sick sorted in increasing order, representing positions of infected people in a line of n people. At each step, one uninfected person adjacent to an infected person gets infected. This process continues until everyone is infected. An infection sequence is the order in which uninfected people become infected, excluding those initially infected. Return the number of different infection sequences possible, modulo 109+7.   Example 1: Input: n = 5, sick = [0,4] Output: 4 Explanation: There is a total of 6 different sequences overall. Valid infection sequences are [1,2,3], [1,3,2], [3,2,1] and [3,1,2]. [2,3,1] and [2,1,3] are not valid infection sequences because the person at index 2 cannot be infected at the first step. Example 2: Input: n = 4, sick = [1] Output: 3 Explanation: There is a total of 6 different sequences overall. Valid infection sequences are [0,2,3], [2,0,3] and [2,3,0]. [3,2,0], [3,0,2], and [0,3,2] are not valid infection sequences because the infection starts at the person at index 1, then the order of infection is 2, then 3, and hence 3 cannot be infected earlier than 2.   Constraints: 2 <= n <= 105 1 <= sick.length <= n - 1 0 <= sick[i] <= n - 1 sick is sorted in increasing order.",
        "2205": "You are given two integer arrays nums1 and nums2 of sizes n and m, respectively. Calculate the following values: answer1 : the number of indices i such that nums1[i] exists in nums2. answer2 : the number of indices i such that nums2[i] exists in nums1. Return [answer1,answer2].   Example 1: Input: nums1 = [2,3,2], nums2 = [1,2] Output: [2,1] Explanation: Example 2: Input: nums1 = [4,3,2,3,1], nums2 = [2,2,5,2,3,6] Output: [3,4] Explanation: The elements at indices 1, 2, and 3 in nums1 exist in nums2 as well. So answer1 is 3. The elements at indices 0, 1, 3, and 4 in nums2 exist in nums1. So answer2 is 4. Example 3: Input: nums1 = [3,4,2,3], nums2 = [1,5] Output: [0,0] Explanation: No numbers are common between nums1 and nums2, so answer is [0,0].   Constraints: n == nums1.length m == nums2.length 1 <= n, m <= 100 1 <= nums1[i], nums2[i] <= 100",
        "2206": "You are given a 0-indexed string word. In one operation, you can pick any index i of word and change word[i] to any lowercase English letter. Return the minimum number of operations needed to remove all adjacent almost-equal characters from word. Two characters a and b are almost-equal if a == b or a and b are adjacent in the alphabet.   Example 1: Input: word = \"aaaaa\" Output: 2 Explanation: We can change word into \"acaca\" which does not have any adjacent almost-equal characters. It can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2. Example 2: Input: word = \"abddez\" Output: 2 Explanation: We can change word into \"ybdoez\" which does not have any adjacent almost-equal characters. It can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2. Example 3: Input: word = \"zyxyxyz\" Output: 3 Explanation: We can change word into \"zaxaxaz\" which does not have any adjacent almost-equal characters.  It can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 3.   Constraints: 1 <= word.length <= 100 word consists only of lowercase English letters.",
        "2207": "You are given an integer array nums and an integer k. The frequency of an element x is the number of times it occurs in an array. An array is called good if the frequency of each element in this array is less than or equal to k. Return the length of the longest good subarray of nums. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [1,2,3,1,2,3,1,2], k = 2 Output: 6 Explanation: The longest possible good subarray is [1,2,3,1,2,3] since the values 1, 2, and 3 occur at most twice in this subarray. Note that the subarrays [2,3,1,2,3,1] and [3,1,2,3,1,2] are also good. It can be shown that there are no good subarrays with length more than 6. Example 2: Input: nums = [1,2,1,2,1,2,1,2], k = 1 Output: 2 Explanation: The longest possible good subarray is [1,2] since the values 1 and 2 occur at most once in this subarray. Note that the subarray [2,1] is also good. It can be shown that there are no good subarrays with length more than 2. Example 3: Input: nums = [5,5,5,5,5,5,5], k = 4 Output: 4 Explanation: The longest possible good subarray is [5,5,5,5] since the value 5 occurs 4 times in this subarray. It can be shown that there are no good subarrays with length more than 4.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 1 <= k <= nums.length",
        "2208": "There is a company with n branches across the country, some of which are connected by roads. Initially, all branches are reachable from each other by traveling some roads. The company has realized that they are spending an excessive amount of time traveling between their branches. As a result, they have decided to close down some of these branches (possibly none). However, they want to ensure that the remaining branches have a distance of at most maxDistance from each other. The distance between two branches is the minimum total traveled length needed to reach one branch from another. You are given integers n, maxDistance, and a 0-indexed 2D array roads, where roads[i] = [ui, vi, wi] represents the undirected road between branches ui and vi with length wi. Return the number of possible sets of closing branches, so that any branch has a distance of at most maxDistance from any other. Note that, after closing a branch, the company will no longer have access to any roads connected to it. Note that, multiple roads are allowed.   Example 1: Input: n = 3, maxDistance = 5, roads = [[0,1,2],[1,2,10],[0,2,10]] Output: 5 Explanation: The possible sets of closing branches are: - The set [2], after closing, active branches are [0,1] and they are reachable to each other within distance 2. - The set [0,1], after closing, the active branch is [2]. - The set [1,2], after closing, the active branch is [0]. - The set [0,2], after closing, the active branch is [1]. - The set [0,1,2], after closing, there are no active branches. It can be proven, that there are only 5 possible sets of closing branches. Example 2: Input: n = 3, maxDistance = 5, roads = [[0,1,20],[0,1,10],[1,2,2],[0,2,2]] Output: 7 Explanation: The possible sets of closing branches are: - The set [], after closing, active branches are [0,1,2] and they are reachable to each other within distance 4. - The set [0], after closing, active branches are [1,2] and they are reachable to each other within distance 2. - The set [1], after closing, active branches are [0,2] and they are reachable to each other within distance 2. - The set [0,1], after closing, the active branch is [2]. - The set [1,2], after closing, the active branch is [0]. - The set [0,2], after closing, the active branch is [1]. - The set [0,1,2], after closing, there are no active branches. It can be proven, that there are only 7 possible sets of closing branches. Example 3: Input: n = 1, maxDistance = 10, roads = [] Output: 2 Explanation: The possible sets of closing branches are: - The set [], after closing, the active branch is [0]. - The set [0], after closing, there are no active branches. It can be proven, that there are only 2 possible sets of closing branches.   Constraints: 1 <= n <= 10 1 <= maxDistance <= 105 0 <= roads.length <= 1000 roads[i].length == 3 0 <= ui, vi <= n - 1 ui != vi 1 <= wi <= 1000 All branches are reachable from each other by traveling some roads.",
        "2209": "You are given a 0-indexed integer array batteryPercentages having length n, denoting the battery percentages of n 0-indexed devices. Your task is to test each device i in order from 0 to n - 1, by performing the following test operations: If batteryPercentages[i] is greater than 0: Increment the count of tested devices. Decrease the battery percentage of all devices with indices j in the range [i + 1, n - 1] by 1, ensuring their battery percentage never goes below 0, i.e, batteryPercentages[j] = max(0, batteryPercentages[j] - 1). Move to the next device. Otherwise, move to the next device without performing any test. Return an integer denoting the number of devices that will be tested after performing the test operations in order.   Example 1: Input: batteryPercentages = [1,1,2,1,3] Output: 3 Explanation: Performing the test operations in order starting from device 0: At device 0, batteryPercentages[0] > 0, so there is now 1 tested device, and batteryPercentages becomes [1,0,1,0,2]. At device 1, batteryPercentages[1] == 0, so we move to the next device without testing. At device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages becomes [1,0,1,0,1]. At device 3, batteryPercentages[3] == 0, so we move to the next device without testing. At device 4, batteryPercentages[4] > 0, so there are now 3 tested devices, and batteryPercentages stays the same. So, the answer is 3. Example 2: Input: batteryPercentages = [0,1,2] Output: 2 Explanation: Performing the test operations in order starting from device 0: At device 0, batteryPercentages[0] == 0, so we move to the next device without testing. At device 1, batteryPercentages[1] > 0, so there is now 1 tested device, and batteryPercentages becomes [0,1,1]. At device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages stays the same. So, the answer is 2.   Constraints: 1 <= n == batteryPercentages.length <= 100  0 <= batteryPercentages[i] <= 100",
        "2210": "You are given a 0-indexed 2D array variables where variables[i] = [ai, bi, ci, mi], and an integer target. An index i is good if the following formula holds: 0 <= i < variables.length ((aibi % 10)ci) % mi == target Return an array consisting of good indices in any order.   Example 1: Input: variables = [[2,3,3,10],[3,3,3,1],[6,1,1,4]], target = 2 Output: [0,2] Explanation: For each index i in the variables array: 1) For the index 0, variables[0] = [2,3,3,10], (23 % 10)3 % 10 = 2. 2) For the index 1, variables[1] = [3,3,3,1], (33 % 10)3 % 1 = 0. 3) For the index 2, variables[2] = [6,1,1,4], (61 % 10)1 % 4 = 2. Therefore we return [0,2] as the answer. Example 2: Input: variables = [[39,3,1000,1000]], target = 17 Output: [] Explanation: For each index i in the variables array: 1) For the index 0, variables[0] = [39,3,1000,1000], (393 % 10)1000 % 1000 = 1. Therefore we return [] as the answer.   Constraints: 1 <= variables.length <= 100 variables[i] == [ai, bi, ci, mi] 1 <= ai, bi, ci, mi <= 103 0 <= target <= 103",
        "2211": "You are given an integer array nums and a positive integer k. Return the number of subarrays where the maximum element of nums appears at least k times in that subarray. A subarray is a contiguous sequence of elements within an array.   Example 1: Input: nums = [1,3,2,3,3], k = 2 Output: 6 Explanation: The subarrays that contain the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3]. Example 2: Input: nums = [1,4,2,1], k = 3 Output: 0 Explanation: No subarray contains the element 4 at least 3 times.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 106 1 <= k <= 105",
        "2212": "You are given a 0-indexed array nums consisting of positive integers. A partition of an array into one or more contiguous subarrays is called good if no two subarrays contain the same number. Return the total number of good partitions of nums. Since the answer may be large, return it modulo 109 + 7.   Example 1: Input: nums = [1,2,3,4] Output: 8 Explanation: The 8 possible good partitions are: ([1], [2], [3], [4]), ([1], [2], [3,4]), ([1], [2,3], [4]), ([1], [2,3,4]), ([1,2], [3], [4]), ([1,2], [3,4]), ([1,2,3], [4]), and ([1,2,3,4]). Example 2: Input: nums = [1,1,1,1] Output: 1 Explanation: The only possible good partition is: ([1,1,1,1]). Example 3: Input: nums = [1,2,1,3] Output: 2 Explanation: The 2 possible good partitions are: ([1,2,1], [3]) and ([1,2,1,3]).   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109",
        "2213": "You are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2]. Each integer appears exactly once except a which appears twice and b which is missing. The task is to find the repeating and missing numbers a and b. Return a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.   Example 1: Input: grid = [[1,3],[2,2]] Output: [2,4] Explanation: Number 2 is repeated and number 4 is missing so the answer is [2,4]. Example 2: Input: grid = [[9,1,7],[8,9,2],[3,4,6]] Output: [9,5] Explanation: Number 9 is repeated and number 5 is missing so the answer is [9,5].   Constraints: 2 <= n == grid.length == grid[i].length <= 50 1 <= grid[i][j] <= n * n For all x that 1 <= x <= n * n there is exactly one x that is not equal to any of the grid members. For all x that 1 <= x <= n * n there is exactly one x that is equal to exactly two of the grid members. For all x that 1 <= x <= n * n except two of them there is exatly one pair of i, j that 0 <= i, j <= n - 1 and grid[i][j] == x.",
        "2214": "You are given an integer array nums of size n where n is a multiple of 3 and a positive integer k. Divide the array nums into n / 3 arrays of size 3 satisfying the following condition: The difference between any two elements in one array is less than or equal to k. Return a 2D array containing the arrays. If it is impossible to satisfy the conditions, return an empty array. And if there are multiple answers, return any of them.   Example 1: Input: nums = [1,3,4,8,7,9,3,5,1], k = 2 Output: [[1,1,3],[3,4,5],[7,8,9]] Explanation: The difference between any two elements in each array is less than or equal to 2. Example 2: Input: nums = [2,4,2,2,5,2], k = 2 Output: [] Explanation: Different ways to divide nums into 2 arrays of size 3 are: [[2,2,2],[2,4,5]] (and its permutations) [[2,2,4],[2,2,5]] (and its permutations) Because there are four 2s there will be an array with the elements 2 and 5 no matter how we divide it. since 5 - 2 = 3 > k, the condition is not satisfied and so there is no valid division. Example 3: Input: nums = [4,2,9,8,2,12,7,12,10,5,8,5,5,7,9,2,5,11], k = 14 Output: [[2,2,12],[4,8,5],[5,9,7],[7,8,5],[5,9,10],[11,12,2]] Explanation: The difference between any two elements in each array is less than or equal to 14.   Constraints: n == nums.length 1 <= n <= 105 n is a multiple of 3 1 <= nums[i] <= 105 1 <= k <= 105",
        "2215": "You are given a 0-indexed integer array nums having length n. You are allowed to perform a special move any number of times (including zero) on nums. In one special move you perform the following steps in order: Choose an index i in the range [0, n - 1], and a positive integer x. Add |nums[i] - x| to the total cost. Change the value of nums[i] to x. A palindromic number is a positive integer that remains the same when its digits are reversed. For example, 121, 2552 and 65756 are palindromic numbers whereas 24, 46, 235 are not palindromic numbers. An array is considered equalindromic if all the elements in the array are equal to an integer y, where y is a palindromic number less than 109. Return an integer denoting the minimum possible total cost to make nums equalindromic by performing any number of special moves.   Example 1: Input: nums = [1,2,3,4,5] Output: 6 Explanation: We can make the array equalindromic by changing all elements to 3 which is a palindromic number. The cost of changing the array to [3,3,3,3,3] using 4 special moves is given by |1 - 3| + |2 - 3| + |4 - 3| + |5 - 3| = 6. It can be shown that changing all elements to any palindromic number other than 3 cannot be achieved at a lower cost. Example 2: Input: nums = [10,12,13,14,15] Output: 11 Explanation: We can make the array equalindromic by changing all elements to 11 which is a palindromic number. The cost of changing the array to [11,11,11,11,11] using 5 special moves is given by |10 - 11| + |12 - 11| + |13 - 11| + |14 - 11| + |15 - 11| = 11. It can be shown that changing all elements to any palindromic number other than 11 cannot be achieved at a lower cost. Example 3: Input: nums = [22,33,22,33,22] Output: 22 Explanation: We can make the array equalindromic by changing all elements to 22 which is a palindromic number. The cost of changing the array to [22,22,22,22,22] using 2 special moves is given by |33 - 22| + |33 - 22| = 22. It can be shown that changing all elements to any palindromic number other than 22 cannot be achieved at a lower cost.   Constraints: 1 <= n <= 105 1 <= nums[i] <= 109",
        "2216": "You are given a 0-indexed array of positive integers nums. A subarray of nums is called incremovable if nums becomes strictly increasing on removing the subarray. For example, the subarray [3, 4] is an incremovable subarray of [5, 3, 4, 6, 7] because removing this subarray changes the array [5, 3, 4, 6, 7] to [5, 6, 7] which is strictly increasing. Return the total number of incremovable subarrays of nums. Note that an empty array is considered strictly increasing. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [1,2,3,4] Output: 10 Explanation: The 10 incremovable subarrays are: [1], [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], and [1,2,3,4], because on removing any one of these subarrays nums becomes strictly increasing. Note that you cannot select an empty subarray. Example 2: Input: nums = [6,5,7,8] Output: 7 Explanation: The 7 incremovable subarrays are: [5], [6], [5,7], [6,5], [5,7,8], [6,5,7] and [6,5,7,8]. It can be shown that there are only 7 incremovable subarrays in nums. Example 3: Input: nums = [8,7,6,6] Output: 3 Explanation: The 3 incremovable subarrays are: [8,7,6], [7,6,6], and [8,7,6,6]. Note that [8,7] is not an incremovable subarray because after removing [8,7] nums becomes [6,6], which is sorted in ascending order but not strictly increasing.   Constraints: 1 <= nums.length <= 50 1 <= nums[i] <= 50",
        "2217": "You are given an array of positive integers nums of length n. A polygon is a closed plane figure that has at least 3 sides. The longest side of a polygon is smaller than the sum of its other sides. Conversely, if you have k (k >= 3) positive real numbers a1, a2, a3, ..., ak where a1 <= a2 <= a3 <= ... <= ak and a1 + a2 + a3 + ... + ak-1 > ak, then there always exists a polygon with k sides whose lengths are a1, a2, a3, ..., ak. The perimeter of a polygon is the sum of lengths of its sides. Return the largest possible perimeter of a polygon whose sides can be formed from nums, or -1 if it is not possible to create a polygon.   Example 1: Input: nums = [5,5,5] Output: 15 Explanation: The only possible polygon that can be made from nums has 3 sides: 5, 5, and 5. The perimeter is 5 + 5 + 5 = 15. Example 2: Input: nums = [1,12,1,2,5,50,3] Output: 12 Explanation: The polygon with the largest perimeter which can be made from nums has 5 sides: 1, 1, 2, 3, and 5. The perimeter is 1 + 1 + 2 + 3 + 5 = 12. We cannot have a polygon with either 12 or 50 as the longest side because it is not possible to include 2 or more smaller sides that have a greater sum than either of them. It can be shown that the largest possible perimeter is 12. Example 3: Input: nums = [5,5,50] Output: -1 Explanation: There is no possible way to form a polygon from nums, as a polygon has at least 3 sides and 50 > 5 + 5.   Constraints: 3 <= n <= 105 1 <= nums[i] <= 109",
        "2218": "You are given a 0-indexed array of positive integers nums. A subarray of nums is called incremovable if nums becomes strictly increasing on removing the subarray. For example, the subarray [3, 4] is an incremovable subarray of [5, 3, 4, 6, 7] because removing this subarray changes the array [5, 3, 4, 6, 7] to [5, 6, 7] which is strictly increasing. Return the total number of incremovable subarrays of nums. Note that an empty array is considered strictly increasing. A subarray is a contiguous non-empty sequence of elements within an array.   Example 1: Input: nums = [1,2,3,4] Output: 10 Explanation: The 10 incremovable subarrays are: [1], [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], and [1,2,3,4], because on removing any one of these subarrays nums becomes strictly increasing. Note that you cannot select an empty subarray. Example 2: Input: nums = [6,5,7,8] Output: 7 Explanation: The 7 incremovable subarrays are: [5], [6], [5,7], [6,5], [5,7,8], [6,5,7] and [6,5,7,8]. It can be shown that there are only 7 incremovable subarrays in nums. Example 3: Input: nums = [8,7,6,6] Output: 3 Explanation: The 3 incremovable subarrays are: [8,7,6], [7,6,6], and [8,7,6,6]. Note that [8,7] is not an incremovable subarray because after removing [8,7] nums becomes [6,6], which is sorted in ascending order but not strictly increasing.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109",
        "2219": "You are given an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given a 0-indexed integer array cost of length n, where cost[i] is the cost assigned to the ith node. You need to place some coins on every node of the tree. The number of coins to be placed at node i can be calculated as: If size of the subtree of node i is less than 3, place 1 coin. Otherwise, place an amount of coins equal to the maximum product of cost values assigned to 3 distinct nodes in the subtree of node i. If this product is negative, place 0 coins. Return an array coin of size n such that coin[i] is the number of coins placed at node i.   Example 1: Input: edges = [[0,1],[0,2],[0,3],[0,4],[0,5]], cost = [1,2,3,4,5,6] Output: [120,1,1,1,1,1] Explanation: For node 0 place 6 * 5 * 4 = 120 coins. All other nodes are leaves with subtree of size 1, place 1 coin on each of them. Example 2: Input: edges = [[0,1],[0,2],[1,3],[1,4],[1,5],[2,6],[2,7],[2,8]], cost = [1,4,2,3,5,7,8,-4,2] Output: [280,140,32,1,1,1,1,1,1] Explanation: The coins placed on each node are: - Place 8 * 7 * 5 = 280 coins on node 0. - Place 7 * 5 * 4 = 140 coins on node 1. - Place 8 * 2 * 2 = 32 coins on node 2. - All other nodes are leaves with subtree of size 1, place 1 coin on each of them. Example 3: Input: edges = [[0,1],[0,2]], cost = [1,2,-2] Output: [0,1,1] Explanation: Node 1 and 2 are leaves with subtree of size 1, place 1 coin on each of them. For node 0 the only possible product of cost is 2 * 1 * -2 = -4. Hence place 0 coins on node 0.   Constraints: 2 <= n <= 2 * 104 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n cost.length == n 1 <= |cost[i]| <= 104 The input is generated such that edges represents a valid tree.",
        "2220": "There is a large (m - 1) x (n - 1) rectangular field with corners at (1, 1) and (m, n) containing some horizontal and vertical fences given in arrays hFences and vFences respectively. Horizontal fences are from the coordinates (hFences[i], 1) to (hFences[i], n) and vertical fences are from the coordinates (1, vFences[i]) to (m, vFences[i]). Return the maximum area of a square field that can be formed by removing some fences (possibly none) or -1 if it is impossible to make a square field. Since the answer may be large, return it modulo 109 + 7. Note: The field is surrounded by two horizontal fences from the coordinates (1, 1) to (1, n) and (m, 1) to (m, n) and two vertical fences from the coordinates (1, 1) to (m, 1) and (1, n) to (m, n). These fences cannot be removed.   Example 1: Input: m = 4, n = 3, hFences = [2,3], vFences = [2] Output: 4 Explanation: Removing the horizontal fence at 2 and the vertical fence at 2 will give a square field of area 4. Example 2: Input: m = 6, n = 7, hFences = [2], vFences = [4] Output: -1 Explanation: It can be proved that there is no way to create a square field by removing fences.   Constraints: 3 <= m, n <= 109 1 <= hFences.length, vFences.length <= 600 1 < hFences[i] < m 1 < vFences[i] < n hFences and vFences are unique.",
        "2221": "You are given two 0-indexed strings source and target, both of length n and consisting of lowercase English letters. You are also given two 0-indexed character arrays original and changed, and an integer array cost, where cost[i] represents the cost of changing the character original[i] to the character changed[i]. You start with the string source. In one operation, you can pick a character x from the string and change it to the character y at a cost of z if there exists any index j such that cost[j] == z, original[j] == x, and changed[j] == y. Return the minimum cost to convert the string source to the string target using any number of operations. If it is impossible to convert source to target, return -1. Note that there may exist indices i, j such that original[j] == original[i] and changed[j] == changed[i].   Example 1: Input: source = \"abcd\", target = \"acbe\", original = [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], changed = [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], cost = [2,5,5,1,2,20] Output: 28 Explanation: To convert the string \"abcd\" to string \"acbe\": - Change value at index 1 from 'b' to 'c' at a cost of 5. - Change value at index 2 from 'c' to 'e' at a cost of 1. - Change value at index 2 from 'e' to 'b' at a cost of 2. - Change value at index 3 from 'd' to 'e' at a cost of 20. The total cost incurred is 5 + 1 + 2 + 20 = 28. It can be shown that this is the minimum possible cost. Example 2: Input: source = \"aaaa\", target = \"bbbb\", original = [\"a\",\"c\"], changed = [\"c\",\"b\"], cost = [1,2] Output: 12 Explanation: To change the character 'a' to 'b' change the character 'a' to 'c' at a cost of 1, followed by changing the character 'c' to 'b' at a cost of 2, for a total cost of 1 + 2 = 3. To change all occurrences of 'a' to 'b', a total cost of 3 * 4 = 12 is incurred. Example 3: Input: source = \"abcd\", target = \"abce\", original = [\"a\"], changed = [\"e\"], cost = [10000] Output: -1 Explanation: It is impossible to convert source to target because the value at index 3 cannot be changed from 'd' to 'e'.   Constraints: 1 <= source.length == target.length <= 105 source, target consist of lowercase English letters. 1 <= cost.length == original.length == changed.length <= 2000 original[i], changed[i] are lowercase English letters. 1 <= cost[i] <= 106 original[i] != changed[i]",
        "2222": "You are given two 0-indexed strings source and target, both of length n and consisting of lowercase English characters. You are also given two 0-indexed string arrays original and changed, and an integer array cost, where cost[i] represents the cost of converting the string original[i] to the string changed[i]. You start with the string source. In one operation, you can pick a substring x from the string, and change it to y at a cost of z if there exists any index j such that cost[j] == z, original[j] == x, and changed[j] == y. You are allowed to do any number of operations, but any pair of operations must satisfy either of these two conditions: The substrings picked in the operations are source[a..b] and source[c..d] with either b < c or d < a. In other words, the indices picked in both operations are disjoint. The substrings picked in the operations are source[a..b] and source[c..d] with a == c and b == d. In other words, the indices picked in both operations are identical. Return the minimum cost to convert the string source to the string target using any number of operations. If it is impossible to convert source to target, return -1. Note that there may exist indices i, j such that original[j] == original[i] and changed[j] == changed[i].   Example 1: Input: source = \"abcd\", target = \"acbe\", original = [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], changed = [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], cost = [2,5,5,1,2,20] Output: 28 Explanation: To convert \"abcd\" to \"acbe\", do the following operations: - Change substring source[1..1] from \"b\" to \"c\" at a cost of 5. - Change substring source[2..2] from \"c\" to \"e\" at a cost of 1. - Change substring source[2..2] from \"e\" to \"b\" at a cost of 2. - Change substring source[3..3] from \"d\" to \"e\" at a cost of 20. The total cost incurred is 5 + 1 + 2 + 20 = 28.  It can be shown that this is the minimum possible cost. Example 2: Input: source = \"abcdefgh\", target = \"acdeeghh\", original = [\"bcd\",\"fgh\",\"thh\"], changed = [\"cde\",\"thh\",\"ghh\"], cost = [1,3,5] Output: 9 Explanation: To convert \"abcdefgh\" to \"acdeeghh\", do the following operations: - Change substring source[1..3] from \"bcd\" to \"cde\" at a cost of 1. - Change substring source[5..7] from \"fgh\" to \"thh\" at a cost of 3. We can do this operation because indices [5,7] are disjoint with indices picked in the first operation. - Change substring source[5..7] from \"thh\" to \"ghh\" at a cost of 5. We can do this operation because indices [5,7] are disjoint with indices picked in the first operation, and identical with indices picked in the second operation. The total cost incurred is 1 + 3 + 5 = 9. It can be shown that this is the minimum possible cost. Example 3: Input: source = \"abcdefgh\", target = \"addddddd\", original = [\"bcd\",\"defgh\"], changed = [\"ddd\",\"ddddd\"], cost = [100,1578] Output: -1 Explanation: It is impossible to convert \"abcdefgh\" to \"addddddd\". If you select substring source[1..3] as the first operation to change \"abcdefgh\" to \"adddefgh\", you cannot select substring source[3..7] as the second operation because it has a common index, 3, with the first operation. If you select substring source[3..7] as the first operation to change \"abcdefgh\" to \"abcddddd\", you cannot select substring source[1..3] as the second operation because it has a common index, 3, with the first operation.   Constraints: 1 <= source.length == target.length <= 1000 source, target consist only of lowercase English characters. 1 <= cost.length == original.length == changed.length <= 100 1 <= original[i].length == changed[i].length <= source.length original[i], changed[i] consist only of lowercase English characters. original[i] != changed[i] 1 <= cost[i] <= 106",
        "2223": "You are given an array of positive integers nums. You have to check if it is possible to select two or more elements in the array such that the bitwise OR of the selected elements has at least one trailing zero in its binary representation. For example, the binary representation of 5, which is \"101\", does not have any trailing zeros, whereas the binary representation of 4, which is \"100\", has two trailing zeros. Return true if it is possible to select two or more elements whose bitwise OR has trailing zeros, return false otherwise.   Example 1: Input: nums = [1,2,3,4,5] Output: true Explanation: If we select the elements 2 and 4, their bitwise OR is 6, which has the binary representation \"110\" with one trailing zero. Example 2: Input: nums = [2,4,8,16] Output: true Explanation: If we select the elements 2 and 4, their bitwise OR is 6, which has the binary representation \"110\" with one trailing zero. Other possible ways to select elements to have trailing zeroes in the binary representation of their bitwise OR are: (2, 8), (2, 16), (4, 8), (4, 16), (8, 16), (2, 4, 8), (2, 4, 16), (2, 8, 16), (4, 8, 16), and (2, 4, 8, 16). Example 3: Input: nums = [1,3,5,7,9] Output: false Explanation: There is no possible way to select two or more elements to have trailing zeros in the binary representation of their bitwise OR.   Constraints: 2 <= nums.length <= 100 1 <= nums[i] <= 100",
        "2224": "You are given a string s that consists of lowercase English letters. A string is called special if it is made up of only a single character. For example, the string \"abc\" is not special, whereas the strings \"ddd\", \"zz\", and \"f\" are special. Return the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice. A substring is a contiguous non-empty sequence of characters within a string.   Example 1: Input: s = \"aaaa\" Output: 2 Explanation: The longest special substring which occurs thrice is \"aa\": substrings \"aaaa\", \"aaaa\", and \"aaaa\". It can be shown that the maximum length achievable is 2. Example 2: Input: s = \"abcdef\" Output: -1 Explanation: There exists no special substring which occurs at least thrice. Hence return -1. Example 3: Input: s = \"abcaba\" Output: 1 Explanation: The longest special substring which occurs thrice is \"a\": substrings \"abcaba\", \"abcaba\", and \"abcaba\". It can be shown that the maximum length achievable is 1.   Constraints: 3 <= s.length <= 50 s consists of only lowercase English letters.",
        "2225": "You are given a string s that consists of lowercase English letters. A string is called special if it is made up of only a single character. For example, the string \"abc\" is not special, whereas the strings \"ddd\", \"zz\", and \"f\" are special. Return the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice. A substring is a contiguous non-empty sequence of characters within a string.   Example 1: Input: s = \"aaaa\" Output: 2 Explanation: The longest special substring which occurs thrice is \"aa\": substrings \"aaaa\", \"aaaa\", and \"aaaa\". It can be shown that the maximum length achievable is 2. Example 2: Input: s = \"abcdef\" Output: -1 Explanation: There exists no special substring which occurs at least thrice. Hence return -1. Example 3: Input: s = \"abcaba\" Output: 1 Explanation: The longest special substring which occurs thrice is \"a\": substrings \"abcaba\", \"abcaba\", and \"abcaba\". It can be shown that the maximum length achievable is 1.   Constraints: 3 <= s.length <= 5 * 105 s consists of only lowercase English letters.",
        "2226": "You are given a 0-indexed string s having an even length n. You are also given a 0-indexed 2D integer array, queries, where queries[i] = [ai, bi, ci, di]. For each query i, you are allowed to perform the following operations: Rearrange the characters within the substring s[ai:bi], where 0 <= ai <= bi < n / 2. Rearrange the characters within the substring s[ci:di], where n / 2 <= ci <= di < n. For each query, your task is to determine whether it is possible to make s a palindrome by performing the operations. Each query is answered independently of the others. Return a 0-indexed array answer, where answer[i] == true if it is possible to make s a palindrome by performing operations specified by the ith query, and false otherwise. A substring is a contiguous sequence of characters within a string. s[x:y] represents the substring consisting of characters from the index x to index y in s, both inclusive.   Example 1: Input: s = \"abcabc\", queries = [[1,1,3,5],[0,2,5,5]] Output: [true,true] Explanation: In this example, there are two queries: In the first query: - a0 = 1, b0 = 1, c0 = 3, d0 = 5. - So, you are allowed to rearrange s[1:1] => abcabc and s[3:5] => abcabc. - To make s a palindrome, s[3:5] can be rearranged to become => abccba. - Now, s is a palindrome. So, answer[0] = true. In the second query: - a1 = 0, b1 = 2, c1 = 5, d1 = 5. - So, you are allowed to rearrange s[0:2] => abcabc and s[5:5] => abcabc. - To make s a palindrome, s[0:2] can be rearranged to become => cbaabc. - Now, s is a palindrome. So, answer[1] = true. Example 2: Input: s = \"abbcdecbba\", queries = [[0,2,7,9]] Output: [false] Explanation: In this example, there is only one query. a0 = 0, b0 = 2, c0 = 7, d0 = 9. So, you are allowed to rearrange s[0:2] => abbcdecbba and s[7:9] => abbcdecbba. It is not possible to make s a palindrome by rearranging these substrings because s[3:6] is not a palindrome. So, answer[0] = false. Example 3: Input: s = \"acbcab\", queries = [[1,2,4,5]] Output: [true] Explanation: In this example, there is only one query. a0 = 1, b0 = 2, c0 = 4, d0 = 5. So, you are allowed to rearrange s[1:2] => acbcab and s[4:5] => acbcab. To make s a palindrome s[1:2] can be rearranged to become abccab. Then, s[4:5] can be rearranged to become abccba. Now, s is a palindrome. So, answer[0] = true.   Constraints: 2 <= n == s.length <= 105 1 <= queries.length <= 105 queries[i].length == 4 ai == queries[i][0], bi == queries[i][1] ci == queries[i][2], di == queries[i][3] 0 <= ai <= bi < n / 2 n / 2 <= ci <= di < n  n is even. s consists of only lowercase English letters.",
        "2227": "You are given a 0-indexed integer array nums and a positive integer k. You can apply the following operation on the array any number of times: Choose any element of the array and flip a bit in its binary representation. Flipping a bit means changing a 0 to 1 or vice versa. Return the minimum number of operations required to make the bitwise XOR of all elements of the final array equal to k. Note that you can flip leading zero bits in the binary representation of elements. For example, for the number (101)2 you can flip the fourth bit and obtain (1101)2.   Example 1: Input: nums = [2,1,3,4], k = 1 Output: 2 Explanation: We can do the following operations: - Choose element 2 which is 3 == (011)2, we flip the first bit and we obtain (010)2 == 2. nums becomes [2,1,2,4]. - Choose element 0 which is 2 == (010)2, we flip the third bit and we obtain (110)2 = 6. nums becomes [6,1,2,4]. The XOR of elements of the final array is (6 XOR 1 XOR 2 XOR 4) == 1 == k. It can be shown that we cannot make the XOR equal to k in less than 2 operations. Example 2: Input: nums = [2,0,2,0], k = 0 Output: 0 Explanation: The XOR of elements of the array is (2 XOR 0 XOR 2 XOR 0) == 0 == k. So no operation is needed.   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 106 0 <= k <= 106",
        "2228": "You are given two positive integers x and y. In one operation, you can do one of the four following operations: Divide x by 11 if x is a multiple of 11. Divide x by 5 if x is a multiple of 5. Decrement x by 1. Increment x by 1. Return the minimum number of operations required to make x and y equal.   Example 1: Input: x = 26, y = 1 Output: 3 Explanation: We can make 26 equal to 1 by applying the following operations:  1. Decrement x by 1 2. Divide x by 5 3. Divide x by 5 It can be shown that 3 is the minimum number of operations required to make 26 equal to 1. Example 2: Input: x = 54, y = 2 Output: 4 Explanation: We can make 54 equal to 2 by applying the following operations:  1. Increment x by 1 2. Divide x by 11  3. Divide x by 5 4. Increment x by 1 It can be shown that 4 is the minimum number of operations required to make 54 equal to 2. Example 3: Input: x = 25, y = 30 Output: 5 Explanation: We can make 25 equal to 30 by applying the following operations:  1. Increment x by 1 2. Increment x by 1 3. Increment x by 1 4. Increment x by 1 5. Increment x by 1 It can be shown that 5 is the minimum number of operations required to make 25 equal to 30.   Constraints: 1 <= x, y <= 104",
        "2229": "You are given three integers start, finish, and limit. You are also given a 0-indexed string s representing a positive integer. A positive integer x is called powerful if it ends with s (in other words, s is a suffix of x) and each digit in x is at most limit. Return the total number of powerful integers in the range [start..finish]. A string x is a suffix of a string y if and only if x is a substring of y that starts from some index (including 0) in y and extends to the index y.length - 1. For example, 25 is a suffix of 5125 whereas 512 is not.   Example 1: Input: start = 1, finish = 6000, limit = 4, s = \"124\" Output: 5 Explanation: The powerful integers in the range [1..6000] are 124, 1124, 2124, 3124, and, 4124. All these integers have each digit <= 4, and \"124\" as a suffix. Note that 5124 is not a powerful integer because the first digit is 5 which is greater than 4. It can be shown that there are only 5 powerful integers in this range. Example 2: Input: start = 15, finish = 215, limit = 6, s = \"10\" Output: 2 Explanation: The powerful integers in the range [15..215] are 110 and 210. All these integers have each digit <= 6, and \"10\" as a suffix. It can be shown that there are only 2 powerful integers in this range. Example 3: Input: start = 1000, finish = 2000, limit = 4, s = \"3000\" Output: 0 Explanation: All integers in the range [1000..2000] are smaller than 3000, hence \"3000\" cannot be a suffix of any integer in this range.   Constraints: 1 <= start <= finish <= 1015 1 <= limit <= 9 1 <= s.length <= floor(log10(finish)) + 1 s only consists of numeric digits which are at most limit. s does not have leading zeros.",
        "2230": "You are given a 2D 0-indexed integer array dimensions. For all indices i, 0 <= i < dimensions.length, dimensions[i][0] represents the length and dimensions[i][1] represents the width of the rectangle i. Return the area of the rectangle having the longest diagonal. If there are multiple rectangles with the longest diagonal, return the area of the rectangle having the maximum area.   Example 1: Input: dimensions = [[9,3],[8,6]] Output: 48 Explanation:  For index = 0, length = 9 and width = 3. Diagonal length = sqrt(9 * 9 + 3 * 3) = sqrt(90) ≈ 9.487. For index = 1, length = 8 and width = 6. Diagonal length = sqrt(8 * 8 + 6 * 6) = sqrt(100) = 10. So, the rectangle at index 1 has a greater diagonal length therefore we return area = 8 * 6 = 48. Example 2: Input: dimensions = [[3,4],[4,3]] Output: 12 Explanation: Length of diagonal is the same for both which is 5, so maximum area = 12.   Constraints: 1 <= dimensions.length <= 100 dimensions[i].length == 2 1 <= dimensions[i][0], dimensions[i][1] <= 100",
        "2231": "There is a 1-indexed 8 x 8 chessboard containing 3 pieces. You are given 6 integers a, b, c, d, e, and f where: (a, b) denotes the position of the white rook. (c, d) denotes the position of the white bishop. (e, f) denotes the position of the black queen. Given that you can only move the white pieces, return the minimum number of moves required to capture the black queen. Note that: Rooks can move any number of squares either vertically or horizontally, but cannot jump over other pieces. Bishops can move any number of squares diagonally, but cannot jump over other pieces. A rook or a bishop can capture the queen if it is located in a square that they can move to. The queen does not move.   Example 1: Input: a = 1, b = 1, c = 8, d = 8, e = 2, f = 3 Output: 2 Explanation: We can capture the black queen in two moves by moving the white rook to (1, 3) then to (2, 3). It is impossible to capture the black queen in less than two moves since it is not being attacked by any of the pieces at the beginning. Example 2: Input: a = 5, b = 3, c = 3, d = 4, e = 5, f = 2 Output: 1 Explanation: We can capture the black queen in a single move by doing one of the following:  - Move the white rook to (5, 2). - Move the white bishop to (5, 2).   Constraints: 1 <= a, b, c, d, e, f <= 8 No two pieces are on the same square.",
        "2232": "You are given two 0-indexed integer arrays nums1 and nums2 of even length n. You must remove n / 2 elements from nums1 and n / 2 elements from nums2. After the removals, you insert the remaining elements of nums1 and nums2 into a set s. Return the maximum possible size of the set s.   Example 1: Input: nums1 = [1,2,1,2], nums2 = [1,1,1,1] Output: 2 Explanation: We remove two occurences of 1 from nums1 and nums2. After the removals, the arrays become equal to nums1 = [2,2] and nums2 = [1,1]. Therefore, s = {1,2}. It can be shown that 2 is the maximum possible size of the set s after the removals. Example 2: Input: nums1 = [1,2,3,4,5,6], nums2 = [2,3,2,3,2,3] Output: 5 Explanation: We remove 2, 3, and 6 from nums1, as well as 2 and two occurrences of 3 from nums2. After the removals, the arrays become equal to nums1 = [1,4,5] and nums2 = [2,3,2]. Therefore, s = {1,2,3,4,5}. It can be shown that 5 is the maximum possible size of the set s after the removals. Example 3: Input: nums1 = [1,1,2,2,3,3], nums2 = [4,4,5,5,6,6] Output: 6 Explanation: We remove 1, 2, and 3 from nums1, as well as 4, 5, and 6 from nums2. After the removals, the arrays become equal to nums1 = [1,2,3] and nums2 = [4,5,6]. Therefore, s = {1,2,3,4,5,6}. It can be shown that 6 is the maximum possible size of the set s after the removals.   Constraints: n == nums1.length == nums2.length 1 <= n <= 2 * 104 n is even. 1 <= nums1[i], nums2[i] <= 109",
        "2233": "You are given a string s and an integer k. First, you are allowed to change at most one index in s to another lowercase English letter. After that, do the following partitioning operation until s is empty: Choose the longest prefix of s containing at most k distinct characters. Delete the prefix from s and increase the number of partitions by one. The remaining characters (if any) in s maintain their initial order. Return an integer denoting the maximum number of resulting partitions after the operations by optimally choosing at most one index to change.   Example 1: Input: s = \"accca\", k = 2 Output: 3 Explanation: The optimal way is to change s[2] to something other than a and c, for example, b. then it becomes \"acbca\". Then we perform the operations: The longest prefix containing at most 2 distinct characters is \"ac\", we remove it and s becomes \"bca\". Now The longest prefix containing at most 2 distinct characters is \"bc\", so we remove it and s becomes \"a\". Finally, we remove \"a\" and s becomes empty, so the procedure ends. Doing the operations, the string is divided into 3 partitions, so the answer is 3. Example 2: Input: s = \"aabaab\", k = 3 Output: 1 Explanation: Initially s contains 2 distinct characters, so whichever character we change, it will contain at most 3 distinct characters, so the longest prefix with at most 3 distinct characters would always be all of it, therefore the answer is 1. Example 3: Input: s = \"xxyz\", k = 1 Output: 4 Explanation: The optimal way is to change s[0] or s[1] to something other than characters in s, for example, to change s[0] to w. Then s becomes \"wxyz\", which consists of 4 distinct characters, so as k is 1, it will divide into 4 partitions.   Constraints: 1 <= s.length <= 104 s consists only of lowercase English letters. 1 <= k <= 26",
        "2234": "You are given an array nums consisting of positive integers. Return the total frequencies of elements in nums such that those elements all have the maximum frequency. The frequency of an element is the number of occurrences of that element in the array.   Example 1: Input: nums = [1,2,2,3,1,4] Output: 4 Explanation: The elements 1 and 2 have a frequency of 2 which is the maximum frequency in the array. So the number of elements in the array with maximum frequency is 4. Example 2: Input: nums = [1,2,3,4,5] Output: 5 Explanation: All elements of the array have a frequency of 1 which is the maximum. So the number of elements in the array with maximum frequency is 5.   Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100",
        "2235": "You are given a 0-indexed string s, a string a, a string b, and an integer k. An index i is beautiful if: 0 <= i <= s.length - a.length s[i..(i + a.length - 1)] == a There exists an index j such that: 0 <= j <= s.length - b.length s[j..(j + b.length - 1)] == b |j - i| <= k Return the array that contains beautiful indices in sorted order from smallest to largest.   Example 1: Input: s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15 Output: [16,33] Explanation: There are 2 beautiful indices: [16,33]. - The index 16 is beautiful as s[16..17] == \"my\" and there exists an index 4 with s[4..11] == \"squirrel\" and |16 - 4| <= 15. - The index 33 is beautiful as s[33..34] == \"my\" and there exists an index 18 with s[18..25] == \"squirrel\" and |33 - 18| <= 15. Thus we return [16,33] as the result. Example 2: Input: s = \"abcd\", a = \"a\", b = \"a\", k = 4 Output: [0] Explanation: There is 1 beautiful index: [0]. - The index 0 is beautiful as s[0..0] == \"a\" and there exists an index 0 with s[0..0] == \"a\" and |0 - 0| <= 4. Thus we return [0] as the result.   Constraints: 1 <= k <= s.length <= 105 1 <= a.length, b.length <= 10 s, a, and b contain only lowercase English letters.",
        "2236": "You are given an integer k and an integer x. The price of a number num is calculated by the count of set bits at positions x, 2x, 3x, etc., in its binary representation, starting from the least significant bit. The following table contains examples of how price is calculated. x num Binary Representation Price 1 13 000001101 3 2 13 000001101 1 2 233 011101001 3 3 13 000001101 1 3 362 101101010 2 The accumulated price of num is the total price of numbers from 1 to num. num is considered cheap if its accumulated price is less than or equal to k. Return the greatest cheap number.   Example 1: Input: k = 9, x = 1 Output: 6 Explanation: As shown in the table below, 6 is the greatest cheap number. x num Binary Representation Price Accumulated Price 1 1 001 1 1 1 2 010 1 2 1 3 011 2 4 1 4 100 1 5 1 5 101 2 7 1 6 110 2 9 1 7 111 3 12 Example 2: Input: k = 7, x = 2 Output: 9 Explanation: As shown in the table below, 9 is the greatest cheap number. x num Binary Representation Price Accumulated Price 2 1 0001 0 0 2 2 0010 1 1 2 3 0011 1 2 2 4 0100 0 2 2 5 0101 0 2 2 6 0110 1 3 2 7 0111 1 4 2 8 1000 1 5 2 9 1001 1 6 2 10 1010 2 8   Constraints: 1 <= k <= 1015 1 <= x <= 8",
        "2237": "You are given a 0-indexed string s, a string a, a string b, and an integer k. An index i is beautiful if: 0 <= i <= s.length - a.length s[i..(i + a.length - 1)] == a There exists an index j such that: 0 <= j <= s.length - b.length s[j..(j + b.length - 1)] == b |j - i| <= k Return the array that contains beautiful indices in sorted order from smallest to largest.   Example 1: Input: s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15 Output: [16,33] Explanation: There are 2 beautiful indices: [16,33]. - The index 16 is beautiful as s[16..17] == \"my\" and there exists an index 4 with s[4..11] == \"squirrel\" and |16 - 4| <= 15. - The index 33 is beautiful as s[33..34] == \"my\" and there exists an index 18 with s[18..25] == \"squirrel\" and |33 - 18| <= 15. Thus we return [16,33] as the result. Example 2: Input: s = \"abcd\", a = \"a\", b = \"a\", k = 4 Output: [0] Explanation: There is 1 beautiful index: [0]. - The index 0 is beautiful as s[0..0] == \"a\" and there exists an index 0 with s[0..0] == \"a\" and |0 - 0| <= 4. Thus we return [0] as the result.   Constraints: 1 <= k <= s.length <= 5 * 105 1 <= a.length, b.length <= 5 * 105 s, a, and b contain only lowercase English letters.",
        "2238": "You are given an array of integers nums of length n. The cost of an array is the value of its first element. For example, the cost of [1,2,3] is 1 while the cost of [3,4,1] is 3. You need to divide nums into 3 disjoint contiguous subarrays . Return the minimum possible sum of the cost of these subarrays.   Example 1: Input: nums = [1,2,3,12] Output: 6 Explanation: The best possible way to form 3 subarrays is: [1], [2], and [3,12] at a total cost of 1 + 2 + 3 = 6. The other possible ways to form 3 subarrays are: - [1], [2,3], and [12] at a total cost of 1 + 2 + 12 = 15. - [1,2], [3], and [12] at a total cost of 1 + 3 + 12 = 16. Example 2: Input: nums = [5,4,3] Output: 12 Explanation: The best possible way to form 3 subarrays is: [5], [4], and [3] at a total cost of 5 + 4 + 3 = 12. It can be shown that 12 is the minimum cost achievable. Example 3: Input: nums = [10,3,1,1] Output: 12 Explanation: The best possible way to form 3 subarrays is: [10,3], [1], and [1] at a total cost of 10 + 1 + 1 = 12. It can be shown that 12 is the minimum cost achievable.   Constraints: 3 <= n <= 50 1 <= nums[i] <= 50",
        "2239": "You are given a 0-indexed array of positive integers nums. In one operation, you can swap any two adjacent elements if they have the same number of set bits . You are allowed to do this operation any number of times (including zero). Return true if you can sort the array, else return false.   Example 1: Input: nums = [8,4,2,30,15] Output: true Explanation: Let's look at the binary representation of every element. The numbers 2, 4, and 8 have one set bit each with binary representation \"10\", \"100\", and \"1000\" respectively. The numbers 15 and 30 have four set bits each with binary representation \"1111\" and \"11110\". We can sort the array using 4 operations: - Swap nums[0] with nums[1]. This operation is valid because 8 and 4 have one set bit each. The array becomes [4,8,2,30,15]. - Swap nums[1] with nums[2]. This operation is valid because 8 and 2 have one set bit each. The array becomes [4,2,8,30,15]. - Swap nums[0] with nums[1]. This operation is valid because 4 and 2 have one set bit each. The array becomes [2,4,8,30,15]. - Swap nums[3] with nums[4]. This operation is valid because 30 and 15 have four set bits each. The array becomes [2,4,8,15,30]. The array has become sorted, hence we return true. Note that there may be other sequences of operations which also sort the array. Example 2: Input: nums = [1,2,3,4,5] Output: true Explanation: The array is already sorted, hence we return true. Example 3: Input: nums = [3,16,8,4,2] Output: false Explanation: It can be shown that it is not possible to sort the input array using any number of operations.   Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 28",
        "2240": "You are given a 0-indexed integer array nums containing positive integers. Your task is to minimize the length of nums by performing the following operations any number of times (including zero): Select two distinct indices i and j from nums, such that nums[i] > 0 and nums[j] > 0. Insert the result of nums[i] % nums[j] at the end of nums. Delete the elements at indices i and j from nums. Return an integer denoting the minimum length of nums after performing the operation any number of times.   Example 1: Input: nums = [1,4,3,1] Output: 1 Explanation: One way to minimize the length of the array is as follows: Operation 1: Select indices 2 and 1, insert nums[2] % nums[1] at the end and it becomes [1,4,3,1,3], then delete elements at indices 2 and 1. nums becomes [1,1,3]. Operation 2: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [1,1,3,1], then delete elements at indices 1 and 2. nums becomes [1,1]. Operation 3: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [1,1,0], then delete elements at indices 1 and 0. nums becomes [0]. The length of nums cannot be reduced further. Hence, the answer is 1. It can be shown that 1 is the minimum achievable length.  Example 2: Input: nums = [5,5,5,10,5] Output: 2 Explanation: One way to minimize the length of the array is as follows: Operation 1: Select indices 0 and 3, insert nums[0] % nums[3] at the end and it becomes [5,5,5,10,5,5], then delete elements at indices 0 and 3. nums becomes [5,5,5,5].  Operation 2: Select indices 2 and 3, insert nums[2] % nums[3] at the end and it becomes [5,5,5,5,0], then delete elements at indices 2 and 3.  nums becomes [5,5,0].  Operation 3: Select indices 0 and 1, insert nums[0] % nums[1] at the end and it becomes [5,5,0,0], then delete elements at indices 0 and 1. nums becomes [0,0]. The length of nums cannot be reduced further. Hence, the answer is 2. It can be shown that 2 is the minimum achievable length.  Example 3: Input: nums = [2,3,4] Output: 1 Explanation: One way to minimize the length of the array is as follows:  Operation 1: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [2,3,4,3], then delete elements at indices 1 and 2. nums becomes [2,3]. Operation 2: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [2,3,1], then delete elements at indices 1 and 0. nums becomes [1]. The length of nums cannot be reduced further. Hence, the answer is 1. It can be shown that 1 is the minimum achievable length.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109",
        "2241": "You are given a 0-indexed array of integers nums of length n, and two positive integers k and dist. The cost of an array is the value of its first element. For example, the cost of [1,2,3] is 1 while the cost of [3,4,1] is 3. You need to divide nums into k disjoint contiguous subarrays , such that the difference between the starting index of the second subarray and the starting index of the kth subarray should be less than or equal to dist. In other words, if you divide nums into the subarrays nums[0..(i1 - 1)], nums[i1..(i2 - 1)], ..., nums[ik-1..(n - 1)], then ik-1 - i1 <= dist. Return the minimum possible sum of the cost of these subarrays.   Example 1: Input: nums = [1,3,2,6,4,2], k = 3, dist = 3 Output: 5 Explanation: The best possible way to divide nums into 3 subarrays is: [1,3], [2,6,4], and [2]. This choice is valid because ik-1 - i1 is 5 - 2 = 3 which is equal to dist. The total cost is nums[0] + nums[2] + nums[5] which is 1 + 2 + 2 = 5. It can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 5. Example 2: Input: nums = [10,1,2,2,2,1], k = 4, dist = 3 Output: 15 Explanation: The best possible way to divide nums into 4 subarrays is: [10], [1], [2], and [2,2,1]. This choice is valid because ik-1 - i1 is 3 - 1 = 2 which is less than dist. The total cost is nums[0] + nums[1] + nums[2] + nums[3] which is 10 + 1 + 2 + 2 = 15. The division [10], [1], [2,2,2], and [1] is not valid, because the difference between ik-1 and i1 is 5 - 1 = 4, which is greater than dist. It can be shown that there is no possible way to divide nums into 4 subarrays at a cost lower than 15. Example 3: Input: nums = [10,8,18,9], k = 3, dist = 1 Output: 36 Explanation: The best possible way to divide nums into 4 subarrays is: [10], [8], and [18,9]. This choice is valid because ik-1 - i1 is 2 - 1 = 1 which is equal to dist.The total cost is nums[0] + nums[1] + nums[2] which is 10 + 8 + 18 = 36. The division [10], [8,18], and [9] is not valid, because the difference between ik-1 and i1 is 3 - 1 = 2, which is greater than dist. It can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 36.   Constraints: 3 <= n <= 105 1 <= nums[i] <= 109 3 <= k <= n k - 2 <= dist <= n - 2",
        "2242": "You are given a string word containing distinct lowercase English letters. Telephone keypads have keys mapped with distinct collections of lowercase English letters, which can be used to form words by pushing them. For example, the key 2 is mapped with [\"a\",\"b\",\"c\"], we need to push the key one time to type \"a\", two times to type \"b\", and three times to type \"c\" . It is allowed to remap the keys numbered 2 to 9 to distinct collections of letters. The keys can be remapped to any amount of letters, but each letter must be mapped to exactly one key. You need to find the minimum number of times the keys will be pushed to type the string word. Return the minimum number of pushes needed to type word after remapping the keys. An example mapping of letters to keys on a telephone keypad is given below. Note that 1, *, #, and 0 do not map to any letters.   Example 1: Input: word = \"abcde\" Output: 5 Explanation: The remapped keypad given in the image provides the minimum cost. \"a\" -> one push on key 2 \"b\" -> one push on key 3 \"c\" -> one push on key 4 \"d\" -> one push on key 5 \"e\" -> one push on key 6 Total cost is 1 + 1 + 1 + 1 + 1 = 5. It can be shown that no other mapping can provide a lower cost. Example 2: Input: word = \"xycdefghij\" Output: 12 Explanation: The remapped keypad given in the image provides the minimum cost. \"x\" -> one push on key 2 \"y\" -> two pushes on key 2 \"c\" -> one push on key 3 \"d\" -> two pushes on key 3 \"e\" -> one push on key 4 \"f\" -> one push on key 5 \"g\" -> one push on key 6 \"h\" -> one push on key 7 \"i\" -> one push on key 8 \"j\" -> one push on key 9 Total cost is 1 + 2 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 = 12. It can be shown that no other mapping can provide a lower cost.   Constraints: 1 <= word.length <= 26 word consists of lowercase English letters. All letters in word are distinct.",
        "2243": "You are given three positive integers n, x, and y. In a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y. For each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k. Return a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k. Note that x and y can be equal.   Example 1: Input: n = 3, x = 1, y = 3 Output: [6,0,0] Explanation: Let's look at each pair of houses: - For the pair (1, 2), we can go from house 1 to house 2 directly. - For the pair (2, 1), we can go from house 2 to house 1 directly. - For the pair (1, 3), we can go from house 1 to house 3 directly. - For the pair (3, 1), we can go from house 3 to house 1 directly. - For the pair (2, 3), we can go from house 2 to house 3 directly. - For the pair (3, 2), we can go from house 3 to house 2 directly. Example 2: Input: n = 5, x = 2, y = 4 Output: [10,8,2,0,0] Explanation: For each distance k the pairs are: - For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (2, 4), (4, 2), (3, 4), (4, 3), (4, 5), and (5, 4). - For k == 2, the pairs are (1, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 2), (3, 5), and (5, 3). - For k == 3, the pairs are (1, 5), and (5, 1). - For k == 4 and k == 5, there are no pairs. Example 3: Input: n = 4, x = 1, y = 1 Output: [6,4,2,0] Explanation: For each distance k the pairs are: - For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), and (4, 3). - For k == 2, the pairs are (1, 3), (3, 1), (2, 4), and (4, 2). - For k == 3, the pairs are (1, 4), and (4, 1). - For k == 4, there are no pairs.   Constraints: 2 <= n <= 100 1 <= x, y <= n",
        "2244": "You are given a string word containing lowercase English letters. Telephone keypads have keys mapped with distinct collections of lowercase English letters, which can be used to form words by pushing them. For example, the key 2 is mapped with [\"a\",\"b\",\"c\"], we need to push the key one time to type \"a\", two times to type \"b\", and three times to type \"c\" . It is allowed to remap the keys numbered 2 to 9 to distinct collections of letters. The keys can be remapped to any amount of letters, but each letter must be mapped to exactly one key. You need to find the minimum number of times the keys will be pushed to type the string word. Return the minimum number of pushes needed to type word after remapping the keys. An example mapping of letters to keys on a telephone keypad is given below. Note that 1, *, #, and 0 do not map to any letters.   Example 1: Input: word = \"abcde\" Output: 5 Explanation: The remapped keypad given in the image provides the minimum cost. \"a\" -> one push on key 2 \"b\" -> one push on key 3 \"c\" -> one push on key 4 \"d\" -> one push on key 5 \"e\" -> one push on key 6 Total cost is 1 + 1 + 1 + 1 + 1 = 5. It can be shown that no other mapping can provide a lower cost. Example 2: Input: word = \"xyzxyzxyzxyz\" Output: 12 Explanation: The remapped keypad given in the image provides the minimum cost. \"x\" -> one push on key 2 \"y\" -> one push on key 3 \"z\" -> one push on key 4 Total cost is 1 * 4 + 1 * 4 + 1 * 4 = 12 It can be shown that no other mapping can provide a lower cost. Note that the key 9 is not mapped to any letter: it is not necessary to map letters to every key, but to map all the letters. Example 3: Input: word = \"aabbccddeeffgghhiiiiii\" Output: 24 Explanation: The remapped keypad given in the image provides the minimum cost. \"a\" -> one push on key 2 \"b\" -> one push on key 3 \"c\" -> one push on key 4 \"d\" -> one push on key 5 \"e\" -> one push on key 6 \"f\" -> one push on key 7 \"g\" -> one push on key 8 \"h\" -> two pushes on key 9 \"i\" -> one push on key 9 Total cost is 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 2 * 2 + 6 * 1 = 24. It can be shown that no other mapping can provide a lower cost.   Constraints: 1 <= word.length <= 105 word consists of lowercase English letters.",
        "2245": "You are given three positive integers n, x, and y. In a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y. For each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k. Return a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k. Note that x and y can be equal.   Example 1: Input: n = 3, x = 1, y = 3 Output: [6,0,0] Explanation: Let's look at each pair of houses: - For the pair (1, 2), we can go from house 1 to house 2 directly. - For the pair (2, 1), we can go from house 2 to house 1 directly. - For the pair (1, 3), we can go from house 1 to house 3 directly. - For the pair (3, 1), we can go from house 3 to house 1 directly. - For the pair (2, 3), we can go from house 2 to house 3 directly. - For the pair (3, 2), we can go from house 3 to house 2 directly. Example 2: Input: n = 5, x = 2, y = 4 Output: [10,8,2,0,0] Explanation: For each distance k the pairs are: - For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (2, 4), (4, 2), (3, 4), (4, 3), (4, 5), and (5, 4). - For k == 2, the pairs are (1, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 2), (3, 5), and (5, 3). - For k == 3, the pairs are (1, 5), and (5, 1). - For k == 4 and k == 5, there are no pairs. Example 3: Input: n = 4, x = 1, y = 1 Output: [6,4,2,0] Explanation: For each distance k the pairs are: - For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), and (4, 3). - For k == 2, the pairs are (1, 3), (3, 1), (2, 4), and (4, 2). - For k == 3, the pairs are (1, 4), and (4, 1). - For k == 4, there are no pairs.   Constraints: 2 <= n <= 105 1 <= x, y <= n",
        "2246": "You are given a 0-indexed string s typed by a user. Changing a key is defined as using a key different from the last used key. For example, s = \"ab\" has a change of a key while s = \"bBBb\" does not have any. Return the number of times the user had to change the key. Note: Modifiers like shift or caps lock won't be counted in changing the key that is if a user typed the letter 'a' and then the letter 'A' then it will not be considered as a changing of key.   Example 1: Input: s = \"aAbBcC\" Output: 2 Explanation:  From s[0] = 'a' to s[1] = 'A', there is no change of key as caps lock or shift is not counted. From s[1] = 'A' to s[2] = 'b', there is a change of key. From s[2] = 'b' to s[3] = 'B', there is no change of key as caps lock or shift is not counted. From s[3] = 'B' to s[4] = 'c', there is a change of key. From s[4] = 'c' to s[5] = 'C', there is no change of key as caps lock or shift is not counted. Example 2: Input: s = \"AaAaAaaA\" Output: 0 Explanation: There is no change of key since only the letters 'a' and 'A' are pressed which does not require change of key.   Constraints: 1 <= s.length <= 100 s consists of only upper case and lower case English letters.",
        "2247": "Alice and Bob are playing a turn-based game on a circular field surrounded by flowers. The circle represents the field, and there are x flowers in the clockwise direction between Alice and Bob, and y flowers in the anti-clockwise direction between them. The game proceeds as follows: Alice takes the first turn. In each turn, a player must choose either the clockwise or anti-clockwise direction and pick one flower from that side. At the end of the turn, if there are no flowers left at all, the current player captures their opponent and wins the game. Given two integers, n and m, the task is to compute the number of possible pairs (x, y) that satisfy the conditions: Alice must win the game according to the described rules. The number of flowers x in the clockwise direction must be in the range [1,n]. The number of flowers y in the anti-clockwise direction must be in the range [1,m]. Return the number of possible pairs (x, y) that satisfy the conditions mentioned in the statement.   Example 1: Input: n = 3, m = 2 Output: 3 Explanation: The following pairs satisfy conditions described in the statement: (1,2), (3,2), (2,1). Example 2: Input: n = 1, m = 1 Output: 0 Explanation: No pairs satisfy the conditions described in the statement.   Constraints: 1 <= n, m <= 105",
        "2248": "You are given a 0-indexed integer array nums and an integer k. In one operation, you can pick any index i of nums such that 0 <= i < nums.length - 1 and replace nums[i] and nums[i + 1] with a single occurrence of nums[i] & nums[i + 1], where & represents the bitwise AND operator. Return the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.   Example 1: Input: nums = [3,5,3,2,7], k = 2 Output: 3 Explanation: Let's do the following operations: 1. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [1,3,2,7]. 2. Replace nums[2] and nums[3] with (nums[2] & nums[3]) so that nums becomes equal to [1,3,2]. The bitwise-or of the final array is 3. It can be shown that 3 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations. Example 2: Input: nums = [7,3,15,14,2,8], k = 4 Output: 2 Explanation: Let's do the following operations: 1. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [3,15,14,2,8].  2. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [3,14,2,8]. 3. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [2,2,8]. 4. Replace nums[1] and nums[2] with (nums[1] & nums[2]) so that nums becomes equal to [2,0]. The bitwise-or of the final array is 2. It can be shown that 2 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations. Example 3: Input: nums = [10,7,10,3,9,14,9,4], k = 1 Output: 15 Explanation: Without applying any operations, the bitwise-or of nums is 15. It can be shown that 15 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.   Constraints: 1 <= nums.length <= 105 0 <= nums[i] < 230 0 <= k < nums.length",
        "2249": "You are given a 0-indexed integer array nums of size 3 which can form the sides of a triangle. A triangle is called equilateral if it has all sides of equal length. A triangle is called isosceles if it has exactly two sides of equal length. A triangle is called scalene if all its sides are of different lengths. Return a string representing the type of triangle that can be formed or \"none\" if it cannot form a triangle.   Example 1: Input: nums = [3,3,3] Output: \"equilateral\" Explanation: Since all the sides are of equal length, therefore, it will form an equilateral triangle. Example 2: Input: nums = [3,4,5] Output: \"scalene\" Explanation:  nums[0] + nums[1] = 3 + 4 = 7, which is greater than nums[2] = 5. nums[0] + nums[2] = 3 + 5 = 8, which is greater than nums[1] = 4. nums[1] + nums[2] = 4 + 5 = 9, which is greater than nums[0] = 3.  Since the sum of the two sides is greater than the third side for all three cases, therefore, it can form a triangle. As all the sides are of different lengths, it will form a scalene triangle.   Constraints: nums.length == 3 1 <= nums[i] <= 100",
        "2250": "You are given a 2D array points of size n x 2 representing integer coordinates of some points on a 2D plane, where points[i] = [xi, yi]. Count the number of pairs of points (A, B), where A is on the upper left side of B, and there are no other points in the rectangle (or line) they make (including the border). Return the count.   Example 1: Input: points = [[1,1],[2,2],[3,3]] Output: 0 Explanation: There is no way to choose A and B so A is on the upper left side of B. Example 2: Input: points = [[6,2],[4,4],[2,6]] Output: 2 Explanation: The left one is the pair (points[1], points[0]), where points[1] is on the upper left side of points[0] and the rectangle is empty. The middle one is the pair (points[2], points[1]), same as the left one it is a valid pair. The right one is the pair (points[2], points[0]), where points[2] is on the upper left side of points[0], but points[1] is inside the rectangle so it's not a valid pair. Example 3: Input: points = [[3,1],[1,3],[1,1]] Output: 2 Explanation: The left one is the pair (points[2], points[0]), where points[2] is on the upper left side of points[0] and there are no other points on the line they form. Note that it is a valid state when the two points form a line. The middle one is the pair (points[1], points[2]), it is a valid pair same as the left one. The right one is the pair (points[1], points[0]), it is not a valid pair as points[2] is on the border of the rectangle.   Constraints: 2 <= n <= 50 points[i].length == 2 0 <= points[i][0], points[i][1] <= 50 All points[i] are distinct.",
        "2251": "You are given an array nums of length n and a positive integer k. A subarray of nums is called good if the absolute difference between its first and last element is exactly k, in other words, the subarray nums[i..j] is good if |nums[i] - nums[j]| == k. Return the maximum sum of a good subarray of nums. If there are no good subarrays, return 0.   Example 1: Input: nums = [1,2,3,4,5,6], k = 1 Output: 11 Explanation: The absolute difference between the first and last element must be 1 for a good subarray. All the good subarrays are: [1,2], [2,3], [3,4], [4,5], and [5,6]. The maximum subarray sum is 11 for the subarray [5,6]. Example 2: Input: nums = [-1,3,2,4,5], k = 3 Output: 11 Explanation: The absolute difference between the first and last element must be 3 for a good subarray. All the good subarrays are: [-1,3,2], and [2,4,5]. The maximum subarray sum is 11 for the subarray [2,4,5]. Example 3: Input: nums = [-1,-2,-3,-4], k = 2 Output: -6 Explanation: The absolute difference between the first and last element must be 2 for a good subarray. All the good subarrays are: [-1,-2,-3], and [-2,-3,-4]. The maximum subarray sum is -6 for the subarray [-1,-2,-3].   Constraints: 2 <= nums.length <= 105 -109 <= nums[i] <= 109 1 <= k <= 109",
        "2252": "You are given a 2D array points of size n x 2 representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi]. We define the right direction as positive x-axis (increasing x-coordinate) and the left direction as negative x-axis (decreasing x-coordinate). Similarly, we define the up direction as positive y-axis (increasing y-coordinate) and the down direction as negative y-axis (decreasing y-coordinate) You have to place n people, including Alice and Bob, at these points such that there is exactly one person at every point. Alice wants to be alone with Bob, so Alice will build a rectangular fence with Alice's position as the upper left corner and Bob's position as the lower right corner of the fence (Note that the fence might not enclose any area, i.e. it can be a line). If any person other than Alice and Bob is either inside the fence or on the fence, Alice will be sad. Return the number of pairs of points where you can place Alice and Bob, such that Alice does not become sad on building the fence. Note that Alice can only build a fence with Alice's position as the upper left corner, and Bob's position as the lower right corner. For example, Alice cannot build either of the fences in the picture below with four corners (1, 1), (1, 3), (3, 1), and (3, 3), because: With Alice at (3, 3) and Bob at (1, 1), Alice's position is not the upper left corner and Bob's position is not the lower right corner of the fence. With Alice at (1, 3) and Bob at (1, 1), Bob's position is not the lower right corner of the fence.   Example 1: Input: points = [[1,1],[2,2],[3,3]] Output: 0 Explanation: There is no way to place Alice and Bob such that Alice can build a fence with Alice's position as the upper left corner and Bob's position as the lower right corner. Hence we return 0.  Example 2: Input: points = [[6,2],[4,4],[2,6]] Output: 2 Explanation: There are two ways to place Alice and Bob such that Alice will not be sad: - Place Alice at (4, 4) and Bob at (6, 2). - Place Alice at (2, 6) and Bob at (4, 4). You cannot place Alice at (2, 6) and Bob at (6, 2) because the person at (4, 4) will be inside the fence. Example 3: Input: points = [[3,1],[1,3],[1,1]] Output: 2 Explanation: There are two ways to place Alice and Bob such that Alice will not be sad: - Place Alice at (1, 1) and Bob at (3, 1). - Place Alice at (1, 3) and Bob at (1, 1). You cannot place Alice at (1, 3) and Bob at (3, 1) because the person at (1, 1) will be on the fence. Note that it does not matter if the fence encloses any area, the first and second fences in the image are valid.   Constraints: 2 <= n <= 1000 points[i].length == 2 -109 <= points[i][0], points[i][1] <= 109 All points[i] are distinct.",
        "2253": "An ant is on a boundary. It sometimes goes left and sometimes right. You are given an array of non-zero integers nums. The ant starts reading nums from the first element of it to its end. At each step, it moves according to the value of the current element: If nums[i] < 0, it moves left by -nums[i] units. If nums[i] > 0, it moves right by nums[i] units. Return the number of times the ant returns to the boundary. Notes: There is an infinite space on both sides of the boundary. We check whether the ant is on the boundary only after it has moved |nums[i]| units. In other words, if the ant crosses the boundary during its movement, it does not count.   Example 1: Input: nums = [2,3,-5] Output: 1 Explanation: After the first step, the ant is 2 steps to the right of the boundary. After the second step, the ant is 5 steps to the right of the boundary. After the third step, the ant is on the boundary. So the answer is 1. Example 2: Input: nums = [3,2,-3,-4] Output: 0 Explanation: After the first step, the ant is 3 steps to the right of the boundary. After the second step, the ant is 5 steps to the right of the boundary. After the third step, the ant is 2 steps to the right of the boundary. After the fourth step, the ant is 2 steps to the left of the boundary. The ant never returned to the boundary, so the answer is 0.   Constraints: 1 <= nums.length <= 100 -10 <= nums[i] <= 10 nums[i] != 0",
        "2254": "You are given a 0-indexed string word and an integer k. At every second, you must perform the following operations: Remove the first k characters of word. Add any k characters to the end of word. Note that you do not necessarily need to add the same characters that you removed. However, you must perform both operations at every second. Return the minimum time greater than zero required for word to revert to its initial state.   Example 1: Input: word = \"abacaba\", k = 3 Output: 2 Explanation: At the 1st second, we remove characters \"aba\" from the prefix of word, and add characters \"bac\" to the end of word. Thus, word becomes equal to \"cababac\". At the 2nd second, we remove characters \"cab\" from the prefix of word, and add \"aba\" to the end of word. Thus, word becomes equal to \"abacaba\" and reverts to its initial state. It can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state. Example 2: Input: word = \"abacaba\", k = 4 Output: 1 Explanation: At the 1st second, we remove characters \"abac\" from the prefix of word, and add characters \"caba\" to the end of word. Thus, word becomes equal to \"abacaba\" and reverts to its initial state. It can be shown that 1 second is the minimum time greater than zero required for word to revert to its initial state. Example 3: Input: word = \"abcbabcd\", k = 2 Output: 4 Explanation: At every second, we will remove the first 2 characters of word, and add the same characters to the end of word. After 4 seconds, word becomes equal to \"abcbabcd\" and reverts to its initial state. It can be shown that 4 seconds is the minimum time greater than zero required for word to revert to its initial state.   Constraints: 1 <= word.length <= 50  1 <= k <= word.length word consists only of lowercase English letters.",
        "2255": "You are given m x n grid image which represents a grayscale image, where image[i][j] represents a pixel with intensity in the range [0..255]. You are also given a non-negative integer threshold. Two pixels are adjacent if they share an edge. A region is a 3 x 3 subgrid where the absolute difference in intensity between any two adjacent pixels is less than or equal to threshold. All pixels in a region belong to that region, note that a pixel can belong to multiple regions. You need to calculate a m x n grid result, where result[i][j] is the average intensity of the regions to which image[i][j] belongs, rounded down to the nearest integer. If image[i][j] belongs to multiple regions, result[i][j] is the average of the rounded-down average intensities of these regions, rounded down to the nearest integer. If image[i][j] does not belong to any region, result[i][j] is equal to image[i][j]. Return the grid result.   Example 1: Input: image = [[5,6,7,10],[8,9,10,10],[11,12,13,10]], threshold = 3 Output: [[9,9,9,9],[9,9,9,9],[9,9,9,9]] Explanation: There are two regions as illustrated above. The average intensity of the first region is 9, while the average intensity of the second region is 9.67 which is rounded down to 9. The average intensity of both of the regions is (9 + 9) / 2 = 9. As all the pixels belong to either region 1, region 2, or both of them, the intensity of every pixel in the result is 9. Please note that the rounded-down values are used when calculating the average of multiple regions, hence the calculation is done using 9 as the average intensity of region 2, not 9.67. Example 2: Input: image = [[10,20,30],[15,25,35],[20,30,40],[25,35,45]], threshold = 12 Output: [[25,25,25],[27,27,27],[27,27,27],[30,30,30]] Explanation: There are two regions as illustrated above. The average intensity of the first region is 25, while the average intensity of the second region is 30. The average intensity of both of the regions is (25 + 30) / 2 = 27.5 which is rounded down to 27. All the pixels in row 0 of the image belong to region 1, hence all the pixels in row 0 in the result are 25. Similarly, all the pixels in row 3 in the result are 30. The pixels in rows 1 and 2 of the image belong to region 1 and region 2, hence their assigned value is 27 in the result. Example 3: Input: image = [[5,6,7],[8,9,10],[11,12,13]], threshold = 1 Output: [[5,6,7],[8,9,10],[11,12,13]] Explanation: There is only one 3 x 3 subgrid, while it does not have the condition on difference of adjacent pixels, for example, the difference between image[0][0] and image[1][0] is |5 - 8| = 3 > threshold = 1. None of them belong to any valid regions, so the result should be the same as image.   Constraints: 3 <= n, m <= 500 0 <= image[i][j] <= 255 0 <= threshold <= 255",
        "2256": "Given a 0-indexed m x n integer matrix matrix, create a new 0-indexed matrix called answer. Make answer equal to matrix, then replace each element with the value -1 with the maximum element in its respective column. Return the matrix answer.   Example 1: Input: matrix = [[1,2,-1],[4,-1,6],[7,8,9]] Output: [[1,2,9],[4,8,6],[7,8,9]] Explanation: The diagram above shows the elements that are changed (in blue). - We replace the value in the cell [1][1] with the maximum value in the column 1, that is 8. - We replace the value in the cell [0][2] with the maximum value in the column 2, that is 9. Example 2: Input: matrix = [[3,-1],[5,2]] Output: [[3,2],[5,2]] Explanation: The diagram above shows the elements that are changed (in blue).   Constraints: m == matrix.length n == matrix[i].length 2 <= m, n <= 50 -1 <= matrix[i][j] <= 100 The input is generated such that each column contains at least one non-negative integer.",
        "2257": "You are given a 0-indexed integer array nums of size n, and a 0-indexed integer array pattern of size m consisting of integers -1, 0, and 1. A subarray nums[i..j] of size m + 1 is said to match the pattern if the following conditions hold for each element pattern[k]: nums[i + k + 1] > nums[i + k] if pattern[k] == 1. nums[i + k + 1] == nums[i + k] if pattern[k] == 0. nums[i + k + 1] < nums[i + k] if pattern[k] == -1. Return the count of subarrays in nums that match the pattern.   Example 1: Input: nums = [1,2,3,4,5,6], pattern = [1,1] Output: 4 Explanation: The pattern [1,1] indicates that we are looking for strictly increasing subarrays of size 3. In the array nums, the subarrays [1,2,3], [2,3,4], [3,4,5], and [4,5,6] match this pattern. Hence, there are 4 subarrays in nums that match the pattern. Example 2: Input: nums = [1,4,4,1,3,5,5,3], pattern = [1,0,-1] Output: 2 Explanation: Here, the pattern [1,0,-1] indicates that we are looking for a sequence where the first number is smaller than the second, the second is equal to the third, and the third is greater than the fourth. In the array nums, the subarrays [1,4,4,1], and [3,5,5,3] match this pattern. Hence, there are 2 subarrays in nums that match the pattern.   Constraints: 2 <= n == nums.length <= 100 1 <= nums[i] <= 109 1 <= m == pattern.length < n -1 <= pattern[i] <= 1",
        "2258": "You are given a 0-indexed string array words having length n and containing 0-indexed strings. You are allowed to perform the following operation any number of times (including zero): Choose integers i, j, x, and y such that 0 <= i, j < n, 0 <= x < words[i].length, 0 <= y < words[j].length, and swap the characters words[i][x] and words[j][y]. Return an integer denoting the maximum number of palindromes words can contain, after performing some operations. Note: i and j may be equal during an operation.   Example 1: Input: words = [\"abbb\",\"ba\",\"aa\"] Output: 3 Explanation: In this example, one way to get the maximum number of palindromes is: Choose i = 0, j = 1, x = 0, y = 0, so we swap words[0][0] and words[1][0]. words becomes [\"bbbb\",\"aa\",\"aa\"]. All strings in words are now palindromes. Hence, the maximum number of palindromes achievable is 3. Example 2: Input: words = [\"abc\",\"ab\"] Output: 2 Explanation: In this example, one way to get the maximum number of palindromes is:  Choose i = 0, j = 1, x = 1, y = 0, so we swap words[0][1] and words[1][0]. words becomes [\"aac\",\"bb\"]. Choose i = 0, j = 0, x = 1, y = 2, so we swap words[0][1] and words[0][2]. words becomes [\"aca\",\"bb\"]. Both strings are now palindromes. Hence, the maximum number of palindromes achievable is 2. Example 3: Input: words = [\"cd\",\"ef\",\"a\"] Output: 1 Explanation: In this example, there is no need to perform any operation. There is one palindrome in words \"a\". It can be shown that it is not possible to get more than one palindrome after any number of operations. Hence, the answer is 1.   Constraints: 1 <= words.length <= 1000 1 <= words[i].length <= 100 words[i] consists only of lowercase English letters.",
        "2259": "You are given an array of integers nums. Consider the following operation: Delete the first two elements nums and define the score of the operation as the sum of these two elements. You can perform this operation until nums contains fewer than two elements. Additionally, the same score must be achieved in all operations. Return the maximum number of operations you can perform.   Example 1: Input: nums = [3,2,1,4,5] Output: 2 Explanation: We can perform the first operation with the score 3 + 2 = 5. After this operation, nums = [1,4,5]. We can perform the second operation as its score is 4 + 1 = 5, the same as the previous operation. After this operation, nums = [5]. As there are fewer than two elements, we can't perform more operations. Example 2: Input: nums = [1,5,3,3,4,1,3,2,2,3] Output: 2 Explanation: We can perform the first operation with the score 1 + 5 = 6. After this operation, nums = [3,3,4,1,3,2,2,3]. We can perform the second operation as its score is 3 + 3 = 6, the same as the previous operation. After this operation, nums = [4,1,3,2,2,3]. We cannot perform the next operation as its score is 4 + 1 = 5, which is different from the previous scores. Example 3: Input: nums = [5,3] Output: 1   Constraints: 2 <= nums.length <= 100 1 <= nums[i] <= 1000",
        "2260": "You are given a string s. Consider performing the following operation until s becomes empty: For every alphabet character from 'a' to 'z', remove the first occurrence of that character in s (if it exists). For example, let initially s = \"aabcbbca\". We do the following operations: Remove the underlined characters s = \"aabcbbca\". The resulting string is s = \"abbca\". Remove the underlined characters s = \"abbca\". The resulting string is s = \"ba\". Remove the underlined characters s = \"ba\". The resulting string is s = \"\". Return the value of the string s right before applying the last operation. In the example above, answer is \"ba\".   Example 1: Input: s = \"aabcbbca\" Output: \"ba\" Explanation: Explained in the statement. Example 2: Input: s = \"abcd\" Output: \"abcd\" Explanation: We do the following operation: - Remove the underlined characters s = \"abcd\". The resulting string is s = \"\". The string just before the last operation is \"abcd\".   Constraints: 1 <= s.length <= 5 * 105 s consists only of lowercase English letters.",
        "2261": "Given an array of integers called nums, you can perform any of the following operation while nums contains at least 2 elements: Choose the first two elements of nums and delete them. Choose the last two elements of nums and delete them. Choose the first and the last elements of nums and delete them. The score of the operation is the sum of the deleted elements. Your task is to find the maximum number of operations that can be performed, such that all operations have the same score. Return the maximum number of operations possible that satisfy the condition mentioned above.   Example 1: Input: nums = [3,2,1,2,3,4] Output: 3 Explanation: We perform the following operations: - Delete the first two elements, with score 3 + 2 = 5, nums = [1,2,3,4]. - Delete the first and the last elements, with score 1 + 4 = 5, nums = [2,3]. - Delete the first and the last elements, with score 2 + 3 = 5, nums = []. We are unable to perform any more operations as nums is empty. Example 2: Input: nums = [3,2,6,1,4] Output: 2 Explanation: We perform the following operations: - Delete the first two elements, with score 3 + 2 = 5, nums = [6,1,4]. - Delete the last two elements, with score 1 + 4 = 5, nums = [6]. It can be proven that we can perform at most 2 operations.   Constraints: 2 <= nums.length <= 2000 1 <= nums[i] <= 1000",
        "2262": "You are given a 0-indexed array nums consisting of positive integers. Initially, you can increase the value of any element in the array by at most 1. After that, you need to select one or more elements from the final array such that those elements are consecutive when sorted in increasing order. For example, the elements [3, 4, 5] are consecutive while [3, 4, 6] and [1, 1, 2, 3] are not. Return the maximum number of elements that you can select.   Example 1: Input: nums = [2,1,5,1,1] Output: 3 Explanation: We can increase the elements at indices 0 and 3. The resulting array is nums = [3,1,5,2,1]. We select the elements [3,1,5,2,1] and we sort them to obtain [1,2,3], which are consecutive. It can be shown that we cannot select more than 3 consecutive elements. Example 2: Input: nums = [1,4,7,10] Output: 1 Explanation: The maximum consecutive elements that we can select is 1.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 106",
        "2263": "You are given a 0-indexed string array words. Let's define a boolean function isPrefixAndSuffix that takes two strings, str1 and str2: isPrefixAndSuffix(str1, str2) returns true if str1 is both a prefix and a suffix of str2, and false otherwise. For example, isPrefixAndSuffix(\"aba\", \"ababa\") is true because \"aba\" is a prefix of \"ababa\" and also a suffix, but isPrefixAndSuffix(\"abc\", \"abcd\") is false. Return an integer denoting the number of index pairs (i, j) such that i < j, and isPrefixAndSuffix(words[i], words[j]) is true.   Example 1: Input: words = [\"a\",\"aba\",\"ababa\",\"aa\"] Output: 4 Explanation: In this example, the counted index pairs are: i = 0 and j = 1 because isPrefixAndSuffix(\"a\", \"aba\") is true. i = 0 and j = 2 because isPrefixAndSuffix(\"a\", \"ababa\") is true. i = 0 and j = 3 because isPrefixAndSuffix(\"a\", \"aa\") is true. i = 1 and j = 2 because isPrefixAndSuffix(\"aba\", \"ababa\") is true. Therefore, the answer is 4. Example 2: Input: words = [\"pa\",\"papa\",\"ma\",\"mama\"] Output: 2 Explanation: In this example, the counted index pairs are: i = 0 and j = 1 because isPrefixAndSuffix(\"pa\", \"papa\") is true. i = 2 and j = 3 because isPrefixAndSuffix(\"ma\", \"mama\") is true. Therefore, the answer is 2.   Example 3: Input: words = [\"abab\",\"ab\"] Output: 0 Explanation: In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix(\"abab\", \"ab\") is false. Therefore, the answer is 0.   Constraints: 1 <= words.length <= 50 1 <= words[i].length <= 10 words[i] consists only of lowercase English letters.",
        "2264": "You are given two arrays with positive integers arr1 and arr2. A prefix of a positive integer is an integer formed by one or more of its digits, starting from its leftmost digit. For example, 123 is a prefix of the integer 12345, while 234 is not. A common prefix of two integers a and b is an integer c, such that c is a prefix of both a and b. For example, 5655359 and 56554 have a common prefix 565 while 1223 and 43456 do not have a common prefix. You need to find the length of the longest common prefix between all pairs of integers (x, y) such that x belongs to arr1 and y belongs to arr2. Return the length of the longest common prefix among all pairs. If no common prefix exists among them, return 0.   Example 1: Input: arr1 = [1,10,100], arr2 = [1000] Output: 3 Explanation: There are 3 pairs (arr1[i], arr2[j]): - The longest common prefix of (1, 1000) is 1. - The longest common prefix of (10, 1000) is 10. - The longest common prefix of (100, 1000) is 100. The longest common prefix is 100 with a length of 3. Example 2: Input: arr1 = [1,2,3], arr2 = [4,4,4] Output: 0 Explanation: There exists no common prefix for any pair (arr1[i], arr2[j]), hence we return 0. Note that common prefixes between elements of the same array do not count.   Constraints: 1 <= arr1.length, arr2.length <= 5 * 104 1 <= arr1[i], arr2[i] <= 108",
        "2265": "You are given a m x n 0-indexed 2D matrix mat. From every cell, you can create numbers in the following way: There could be at most 8 paths from the cells namely: east, south-east, south, south-west, west, north-west, north, and north-east. Select a path from them and append digits in this path to the number being formed by traveling in this direction. Note that numbers are generated at every step, for example, if the digits along the path are 1, 9, 1, then there will be three numbers generated along the way: 1, 19, 191. Return the most frequent prime number greater than 10 out of all the numbers created by traversing the matrix or -1 if no such prime number exists. If there are multiple prime numbers with the highest frequency, then return the largest among them. Note: It is invalid to change the direction during the move.   Example 1: Input: mat = [[1,1],[9,9],[1,1]] Output: 19 Explanation:  From cell (0,0) there are 3 possible directions and the numbers greater than 10 which can be created in those directions are: East: [11], South-East: [19], South: [19,191]. Numbers greater than 10 created from the cell (0,1) in all possible directions are: [19,191,19,11]. Numbers greater than 10 created from the cell (1,0) in all possible directions are: [99,91,91,91,91]. Numbers greater than 10 created from the cell (1,1) in all possible directions are: [91,91,99,91,91]. Numbers greater than 10 created from the cell (2,0) in all possible directions are: [11,19,191,19]. Numbers greater than 10 created from the cell (2,1) in all possible directions are: [11,19,19,191]. The most frequent prime number among all the created numbers is 19. Example 2: Input: mat = [[7]] Output: -1 Explanation: The only number which can be formed is 7. It is a prime number however it is not greater than 10, so return -1. Example 3: Input: mat = [[9,7,8],[4,6,5],[2,8,6]] Output: 97 Explanation:  Numbers greater than 10 created from the cell (0,0) in all possible directions are: [97,978,96,966,94,942]. Numbers greater than 10 created from the cell (0,1) in all possible directions are: [78,75,76,768,74,79]. Numbers greater than 10 created from the cell (0,2) in all possible directions are: [85,856,86,862,87,879]. Numbers greater than 10 created from the cell (1,0) in all possible directions are: [46,465,48,42,49,47]. Numbers greater than 10 created from the cell (1,1) in all possible directions are: [65,66,68,62,64,69,67,68]. Numbers greater than 10 created from the cell (1,2) in all possible directions are: [56,58,56,564,57,58]. Numbers greater than 10 created from the cell (2,0) in all possible directions are: [28,286,24,249,26,268]. Numbers greater than 10 created from the cell (2,1) in all possible directions are: [86,82,84,86,867,85]. Numbers greater than 10 created from the cell (2,2) in all possible directions are: [68,682,66,669,65,658]. The most frequent prime number among all the created numbers is 97.   Constraints: m == mat.length n == mat[i].length 1 <= m, n <= 6 1 <= mat[i][j] <= 9",
        "2266": "You are given an integer array nums of even length. You have to split the array into two parts nums1 and nums2 such that: nums1.length == nums2.length == nums.length / 2. nums1 should contain distinct elements. nums2 should also contain distinct elements. Return true if it is possible to split the array, and false otherwise.   Example 1: Input: nums = [1,1,2,2,3,4] Output: true Explanation: One of the possible ways to split nums is nums1 = [1,2,3] and nums2 = [1,2,4]. Example 2: Input: nums = [1,1,1,1] Output: false Explanation: The only possible way to split nums is nums1 = [1,1] and nums2 = [1,1]. Both nums1 and nums2 do not contain distinct elements. Therefore, we return false.   Constraints: 1 <= nums.length <= 100 nums.length % 2 == 0  1 <= nums[i] <= 100",
        "2267": "There exist n rectangles in a 2D plane with edges parallel to the x and y axis. You are given two 2D integer arrays bottomLeft and topRight where bottomLeft[i] = [a_i, b_i] and topRight[i] = [c_i, d_i] represent the bottom-left and top-right coordinates of the ith rectangle, respectively. You need to find the maximum area of a square that can fit inside the intersecting region of at least two rectangles. Return 0 if such a square does not exist.   Example 1: Input: bottomLeft = [[1,1],[2,2],[3,1]], topRight = [[3,3],[4,4],[6,6]] Output: 1 Explanation: A square with side length 1 can fit inside either the intersecting region of rectangles 0 and 1 or the intersecting region of rectangles 1 and 2. Hence the maximum area is 1. It can be shown that a square with a greater side length can not fit inside any intersecting region of two rectangles. Example 2: Input: bottomLeft = [[1,1],[1,3],[1,5]], topRight = [[5,5],[5,7],[5,9]] Output: 4 Explanation: A square with side length 2 can fit inside either the intersecting region of rectangles 0 and 1 or the intersecting region of rectangles 1 and 2. Hence the maximum area is 2 * 2 = 4. It can be shown that a square with a greater side length can not fit inside any intersecting region of two rectangles. Example 3:    Input: bottomLeft = [[1,1],[2,2],[1,2]], topRight = [[3,3],[4,4],[3,4]] Output: 1 Explanation: A square with side length 1 can fit inside the intersecting region of any two rectangles. Also, no larger square can, so the maximum area is 1. Note that the region can be formed by the intersection of more than 2 rectangles. Example 4:    Input: bottomLeft = [[1,1],[3,3],[3,1]], topRight = [[2,2],[4,4],[4,2]] Output: 0 Explanation: No pair of rectangles intersect, hence, the answer is 0.   Constraints: n == bottomLeft.length == topRight.length 2 <= n <= 103 bottomLeft[i].length == topRight[i].length == 2 1 <= bottomLeft[i][0], bottomLeft[i][1] <= 107 1 <= topRight[i][0], topRight[i][1] <= 107 bottomLeft[i][0] < topRight[i][0] bottomLeft[i][1] < topRight[i][1]",
        "2268": "You are given two 1-indexed integer arrays, nums and, changeIndices, having lengths n and m, respectively. Initially, all indices in nums are unmarked. Your task is to mark all indices in nums. In each second, s, in order from 1 to m (inclusive), you can perform one of the following operations: Choose an index i in the range [1, n] and decrement nums[i] by 1. If nums[changeIndices[s]] is equal to 0, mark the index changeIndices[s]. Do nothing. Return an integer denoting the earliest second in the range [1, m] when all indices in nums can be marked by choosing operations optimally, or -1 if it is impossible.   Example 1: Input: nums = [2,2,0], changeIndices = [2,2,2,2,3,2,2,1] Output: 8 Explanation: In this example, we have 8 seconds. The following operations can be performed to mark all indices: Second 1: Choose index 1 and decrement nums[1] by one. nums becomes [1,2,0]. Second 2: Choose index 1 and decrement nums[1] by one. nums becomes [0,2,0]. Second 3: Choose index 2 and decrement nums[2] by one. nums becomes [0,1,0]. Second 4: Choose index 2 and decrement nums[2] by one. nums becomes [0,0,0]. Second 5: Mark the index changeIndices[5], which is marking index 3, since nums[3] is equal to 0. Second 6: Mark the index changeIndices[6], which is marking index 2, since nums[2] is equal to 0. Second 7: Do nothing. Second 8: Mark the index changeIndices[8], which is marking index 1, since nums[1] is equal to 0. Now all indices have been marked. It can be shown that it is not possible to mark all indices earlier than the 8th second. Hence, the answer is 8. Example 2: Input: nums = [1,3], changeIndices = [1,1,1,2,1,1,1] Output: 6 Explanation: In this example, we have 7 seconds. The following operations can be performed to mark all indices: Second 1: Choose index 2 and decrement nums[2] by one. nums becomes [1,2]. Second 2: Choose index 2 and decrement nums[2] by one. nums becomes [1,1]. Second 3: Choose index 2 and decrement nums[2] by one. nums becomes [1,0]. Second 4: Mark the index changeIndices[4], which is marking index 2, since nums[2] is equal to 0. Second 5: Choose index 1 and decrement nums[1] by one. nums becomes [0,0]. Second 6: Mark the index changeIndices[6], which is marking index 1, since nums[1] is equal to 0. Now all indices have been marked. It can be shown that it is not possible to mark all indices earlier than the 6th second. Hence, the answer is 6. Example 3: Input: nums = [0,1], changeIndices = [2,2,2] Output: -1 Explanation: In this example, it is impossible to mark all indices because index 1 isn't in changeIndices. Hence, the answer is -1.   Constraints: 1 <= n == nums.length <= 2000 0 <= nums[i] <= 109 1 <= m == changeIndices.length <= 2000 1 <= changeIndices[i] <= n",
        "2269": "You are given two 1-indexed integer arrays, nums and, changeIndices, having lengths n and m, respectively. Initially, all indices in nums are unmarked. Your task is to mark all indices in nums. In each second, s, in order from 1 to m (inclusive), you can perform one of the following operations: Choose an index i in the range [1, n] and decrement nums[i] by 1. Set nums[changeIndices[s]] to any non-negative value. Choose an index i in the range [1, n], where nums[i] is equal to 0, and mark index i. Do nothing. Return an integer denoting the earliest second in the range [1, m] when all indices in nums can be marked by choosing operations optimally, or -1 if it is impossible.   Example 1: Input: nums = [3,2,3], changeIndices = [1,3,2,2,2,2,3] Output: 6 Explanation: In this example, we have 7 seconds. The following operations can be performed to mark all indices: Second 1: Set nums[changeIndices[1]] to 0. nums becomes [0,2,3]. Second 2: Set nums[changeIndices[2]] to 0. nums becomes [0,2,0]. Second 3: Set nums[changeIndices[3]] to 0. nums becomes [0,0,0]. Second 4: Mark index 1, since nums[1] is equal to 0. Second 5: Mark index 2, since nums[2] is equal to 0. Second 6: Mark index 3, since nums[3] is equal to 0. Now all indices have been marked. It can be shown that it is not possible to mark all indices earlier than the 6th second. Hence, the answer is 6. Example 2: Input: nums = [0,0,1,2], changeIndices = [1,2,1,2,1,2,1,2] Output: 7 Explanation: In this example, we have 8 seconds. The following operations can be performed to mark all indices: Second 1: Mark index 1, since nums[1] is equal to 0. Second 2: Mark index 2, since nums[2] is equal to 0. Second 3: Decrement index 4 by one. nums becomes [0,0,1,1]. Second 4: Decrement index 4 by one. nums becomes [0,0,1,0]. Second 5: Decrement index 3 by one. nums becomes [0,0,0,0]. Second 6: Mark index 3, since nums[3] is equal to 0. Second 7: Mark index 4, since nums[4] is equal to 0. Now all indices have been marked. It can be shown that it is not possible to mark all indices earlier than the 7th second. Hence, the answer is 7. Example 3: Input: nums = [1,2,3], changeIndices = [1,2,3] Output: -1 Explanation: In this example, it can be shown that it is impossible to mark all indices, as we don't have enough seconds.  Hence, the answer is -1.   Constraints: 1 <= n == nums.length <= 5000 0 <= nums[i] <= 109 1 <= m == changeIndices.length <= 5000 1 <= changeIndices[i] <= n",
        "2270": "You are given a 0-indexed integer array nums, and an integer k. In one operation, you can remove one occurrence of the smallest element of nums. Return the minimum number of operations needed so that all elements of the array are greater than or equal to k.   Example 1: Input: nums = [2,11,10,1,3], k = 10 Output: 3 Explanation: After one operation, nums becomes equal to [2, 11, 10, 3]. After two operations, nums becomes equal to [11, 10, 3]. After three operations, nums becomes equal to [11, 10]. At this stage, all the elements of nums are greater than or equal to 10 so we can stop. It can be shown that 3 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10. Example 2: Input: nums = [1,1,2,4,9], k = 1 Output: 0 Explanation: All elements of the array are greater than or equal to 1 so we do not need to apply any operations on nums. Example 3: Input: nums = [1,1,2,4,9], k = 9 Output: 4 Explanation: only a single element of nums is greater than or equal to 9 so we need to apply the operations 4 times on nums.   Constraints: 1 <= nums.length <= 50 1 <= nums[i] <= 109 1 <= k <= 109 The input is generated such that there is at least one index i such that nums[i] >= k.",
        "2271": "You are given a 0-indexed integer array nums, and an integer k. In one operation, you will: Take the two smallest integers x and y in nums. Remove x and y from nums. Add min(x, y) * 2 + max(x, y) anywhere in the array. Note that you can only apply the described operation if nums contains at least two elements. Return the minimum number of operations needed so that all elements of the array are greater than or equal to k.   Example 1: Input: nums = [2,11,10,1,3], k = 10 Output: 2 Explanation: In the first operation, we remove elements 1 and 2, then add 1 * 2 + 2 to nums. nums becomes equal to [4, 11, 10, 3]. In the second operation, we remove elements 3 and 4, then add 3 * 2 + 4 to nums. nums becomes equal to [10, 11, 10]. At this stage, all the elements of nums are greater than or equal to 10 so we can stop. It can be shown that 2 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10. Example 2: Input: nums = [1,1,2,4,9], k = 20 Output: 4 Explanation: After one operation, nums becomes equal to [2, 4, 9, 3]. After two operations, nums becomes equal to [7, 4, 9]. After three operations, nums becomes equal to [15, 9]. After four operations, nums becomes equal to [33]. At this stage, all the elements of nums are greater than 20 so we can stop. It can be shown that 4 is the minimum number of operations needed so that all elements of the array are greater than or equal to 20.   Constraints: 2 <= nums.length <= 2 * 105 1 <= nums[i] <= 109 1 <= k <= 109 The input is generated such that an answer always exists. That is, there exists some sequence of operations after which all elements of the array are greater than or equal to k.",
        "2272": "You are given an unrooted weighted tree with n vertices representing servers numbered from 0 to n - 1, an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional edge between vertices ai and bi of weight weighti. You are also given an integer signalSpeed. Two servers a and b are connectable through a server c if: a < b, a != c and b != c. The distance from c to a is divisible by signalSpeed. The distance from c to b is divisible by signalSpeed. The path from c to b and the path from c to a do not share any edges. Return an integer array count of length n where count[i] is the number of server pairs that are connectable through the server i.   Example 1: Input: edges = [[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]], signalSpeed = 1 Output: [0,4,6,6,4,0] Explanation: Since signalSpeed is 1, count[c] is equal to the number of pairs of paths that start at c and do not share any edges. In the case of the given path graph, count[c] is equal to the number of servers to the left of c multiplied by the servers to the right of c. Example 2: Input: edges = [[0,6,3],[6,5,3],[0,3,1],[3,2,7],[3,1,6],[3,4,2]], signalSpeed = 3 Output: [2,0,0,0,0,0,2] Explanation: Through server 0, there are 2 pairs of connectable servers: (4, 5) and (4, 6). Through server 6, there are 2 pairs of connectable servers: (4, 5) and (0, 5). It can be shown that no two servers are connectable through servers other than 0 and 6.   Constraints: 2 <= n <= 1000 edges.length == n - 1 edges[i].length == 3 0 <= ai, bi < n edges[i] = [ai, bi, weighti] 1 <= weighti <= 106 1 <= signalSpeed <= 106 The input is generated such that edges represents a valid tree.",
        "2273": "There exists an undirected tree with n nodes numbered 0 to n - 1. You are given a 0-indexed 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the tree. You are also given a positive integer k, and a 0-indexed array of non-negative integers nums of length n, where nums[i] represents the value of the node numbered i. Alice wants the sum of values of tree nodes to be maximum, for which Alice can perform the following operation any number of times (including zero) on the tree: Choose any edge [u, v] connecting the nodes u and v, and update their values as follows: nums[u] = nums[u] XOR k nums[v] = nums[v] XOR k Return the maximum possible sum of the values Alice can achieve by performing the operation any number of times.   Example 1: Input: nums = [1,2,1], k = 3, edges = [[0,1],[0,2]] Output: 6 Explanation: Alice can achieve the maximum sum of 6 using a single operation: - Choose the edge [0,2]. nums[0] and nums[2] become: 1 XOR 3 = 2, and the array nums becomes: [1,2,1] -> [2,2,2]. The total sum of values is 2 + 2 + 2 = 6. It can be shown that 6 is the maximum achievable sum of values. Example 2: Input: nums = [2,3], k = 7, edges = [[0,1]] Output: 9 Explanation: Alice can achieve the maximum sum of 9 using a single operation: - Choose the edge [0,1]. nums[0] becomes: 2 XOR 7 = 5 and nums[1] become: 3 XOR 7 = 4, and the array nums becomes: [2,3] -> [5,4]. The total sum of values is 5 + 4 = 9. It can be shown that 9 is the maximum achievable sum of values. Example 3: Input: nums = [7,7,7,7,7,7], k = 3, edges = [[0,1],[0,2],[0,3],[0,4],[0,5]] Output: 42 Explanation: The maximum achievable sum is 42 which can be achieved by Alice performing no operations.   Constraints: 2 <= n == nums.length <= 2 * 104 1 <= k <= 109 0 <= nums[i] <= 109 edges.length == n - 1 edges[i].length == 2 0 <= edges[i][0], edges[i][1] <= n - 1 The input is generated such that edges represent a valid tree.",
        "2274": "You are given a 1-indexed array of distinct integers nums of length n. You need to distribute all the elements of nums between two arrays arr1 and arr2 using n operations. In the first operation, append nums[1] to arr1. In the second operation, append nums[2] to arr2. Afterwards, in the ith operation: If the last element of arr1 is greater than the last element of arr2, append nums[i] to arr1. Otherwise, append nums[i] to arr2. The array result is formed by concatenating the arrays arr1 and arr2. For example, if arr1 == [1,2,3] and arr2 == [4,5,6], then result = [1,2,3,4,5,6]. Return the array result.   Example 1: Input: nums = [2,1,3] Output: [2,3,1] Explanation: After the first 2 operations, arr1 = [2] and arr2 = [1]. In the 3rd operation, as the last element of arr1 is greater than the last element of arr2 (2 > 1), append nums[3] to arr1. After 3 operations, arr1 = [2,3] and arr2 = [1]. Hence, the array result formed by concatenation is [2,3,1]. Example 2: Input: nums = [5,4,3,8] Output: [5,3,4,8] Explanation: After the first 2 operations, arr1 = [5] and arr2 = [4]. In the 3rd operation, as the last element of arr1 is greater than the last element of arr2 (5 > 4), append nums[3] to arr1, hence arr1 becomes [5,3]. In the 4th operation, as the last element of arr2 is greater than the last element of arr1 (4 > 3), append nums[4] to arr2, hence arr2 becomes [4,8]. After 4 operations, arr1 = [5,3] and arr2 = [4,8]. Hence, the array result formed by concatenation is [5,3,4,8].   Constraints: 3 <= n <= 50 1 <= nums[i] <= 100 All elements in nums are distinct.",
        "2275": "You are given a 1-indexed array of integers nums of length n. We define a function greaterCount such that greaterCount(arr, val) returns the number of elements in arr that are strictly greater than val. You need to distribute all the elements of nums between two arrays arr1 and arr2 using n operations. In the first operation, append nums[1] to arr1. In the second operation, append nums[2] to arr2. Afterwards, in the ith operation: If greaterCount(arr1, nums[i]) > greaterCount(arr2, nums[i]), append nums[i] to arr1. If greaterCount(arr1, nums[i]) < greaterCount(arr2, nums[i]), append nums[i] to arr2. If greaterCount(arr1, nums[i]) == greaterCount(arr2, nums[i]), append nums[i] to the array with a lesser number of elements. If there is still a tie, append nums[i] to arr1. The array result is formed by concatenating the arrays arr1 and arr2. For example, if arr1 == [1,2,3] and arr2 == [4,5,6], then result = [1,2,3,4,5,6]. Return the integer array result.   Example 1: Input: nums = [2,1,3,3] Output: [2,3,1,3] Explanation: After the first 2 operations, arr1 = [2] and arr2 = [1]. In the 3rd operation, the number of elements greater than 3 is zero in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1. In the 4th operation, the number of elements greater than 3 is zero in both arrays. As the length of arr2 is lesser, hence, append nums[4] to arr2. After 4 operations, arr1 = [2,3] and arr2 = [1,3]. Hence, the array result formed by concatenation is [2,3,1,3]. Example 2: Input: nums = [5,14,3,1,2] Output: [5,3,1,2,14] Explanation: After the first 2 operations, arr1 = [5] and arr2 = [14]. In the 3rd operation, the number of elements greater than 3 is one in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1. In the 4th operation, the number of elements greater than 1 is greater in arr1 than arr2 (2 > 1). Hence, append nums[4] to arr1. In the 5th operation, the number of elements greater than 2 is greater in arr1 than arr2 (2 > 1). Hence, append nums[5] to arr1. After 5 operations, arr1 = [5,3,1,2] and arr2 = [14]. Hence, the array result formed by concatenation is [5,3,1,2,14]. Example 3: Input: nums = [3,3,3,3] Output: [3,3,3,3] Explanation: At the end of 4 operations, arr1 = [3,3] and arr2 = [3,3]. Hence, the array result formed by concatenation is [3,3,3,3].   Constraints: 3 <= n <= 105 1 <= nums[i] <= 109",
        "2276": "You are given an array apple of size n and an array capacity of size m. There are n packs where the ith pack contains apple[i] apples. There are m boxes as well, and the ith box has a capacity of capacity[i] apples. Return the minimum number of boxes you need to select to redistribute these n packs of apples into boxes. Note that, apples from the same pack can be distributed into different boxes.   Example 1: Input: apple = [1,3,2], capacity = [4,3,1,5,2] Output: 2 Explanation: We will use boxes with capacities 4 and 5. It is possible to distribute the apples as the total capacity is greater than or equal to the total number of apples. Example 2: Input: apple = [5,5,5], capacity = [2,4,2,7] Output: 4 Explanation: We will need to use all the boxes.   Constraints: 1 <= n == apple.length <= 50 1 <= m == capacity.length <= 50 1 <= apple[i], capacity[i] <= 50 The input is generated such that it's possible to redistribute packs of apples into boxes.",
        "2277": "You are given an array arr of size n consisting of non-empty strings. Find a string array answer of size n such that: answer[i] is the shortest substring of arr[i] that does not occur as a substring in any other string in arr. If multiple such substrings exist, answer[i] should be the lexicographically smallest . And if no such substring exists, answer[i] should be an empty string. Return the array answer.   Example 1: Input: arr = [\"cab\",\"ad\",\"bad\",\"c\"] Output: [\"ab\",\"\",\"ba\",\"\"] Explanation: We have the following: - For the string \"cab\", the shortest substring that does not occur in any other string is either \"ca\" or \"ab\", we choose the lexicographically smaller substring, which is \"ab\". - For the string \"ad\", there is no substring that does not occur in any other string. - For the string \"bad\", the shortest substring that does not occur in any other string is \"ba\". - For the string \"c\", there is no substring that does not occur in any other string. Example 2: Input: arr = [\"abc\",\"bcd\",\"abcd\"] Output: [\"\",\"\",\"abcd\"] Explanation: We have the following: - For the string \"abc\", there is no substring that does not occur in any other string. - For the string \"bcd\", there is no substring that does not occur in any other string. - For the string \"abcd\", the shortest substring that does not occur in any other string is \"abcd\".   Constraints: n == arr.length 2 <= n <= 100 1 <= arr[i].length <= 20 arr[i] consists only of lowercase English letters.",
        "2278": "You are given an array of integers nums with length n, and a positive odd integer k. Select exactly k disjoint subarrays sub1, sub2, ..., subk from nums such that the last element of subi appears before the first element of sub{i+1} for all 1 <= i <= k-1. The goal is to maximize their combined strength. The strength of the selected subarrays is defined as: strength = k * sum(sub1)- (k - 1) * sum(sub2) + (k - 2) * sum(sub3) - ... - 2 * sum(sub{k-1}) + sum(subk) where sum(subi) is the sum of the elements in the i-th subarray. Return the maximum possible strength that can be obtained from selecting exactly k disjoint subarrays from nums. Note that the chosen subarrays don't need to cover the entire array.   Example 1: Input: nums = [1,2,3,-1,2], k = 3 Output: 22 Explanation: The best possible way to select 3 subarrays is: nums[0..2], nums[3..3], and nums[4..4]. The strength is calculated as follows: strength = 3 * (1 + 2 + 3) - 2 * (-1) + 2 = 22   Example 2: Input: nums = [12,-2,-2,-2,-2], k = 5 Output: 64 Explanation: The only possible way to select 5 disjoint subarrays is: nums[0..0], nums[1..1], nums[2..2], nums[3..3], and nums[4..4]. The strength is calculated as follows: strength = 5 * 12 - 4 * (-2) + 3 * (-2) - 2 * (-2) + (-2) = 64 Example 3: Input: nums = [-1,-2,-3], k = 1 Output: -1 Explanation: The best possible way to select 1 subarray is: nums[0..0]. The strength is -1.   Constraints: 1 <= n <= 104 -109 <= nums[i] <= 109 1 <= k <= n 1 <= n * k <= 106 k is odd.",
        "2279": "You are given an integer array nums containing positive integers. We define a function encrypt such that encrypt(x) replaces every digit in x with the largest digit in x. For example, encrypt(523) = 555 and encrypt(213) = 333. Return the sum of encrypted elements.   Example 1: Input: nums = [1,2,3] Output: 6 Explanation: The encrypted elements are [1,2,3]. The sum of encrypted elements is 1 + 2 + 3 == 6. Example 2: Input: nums = [10,21,31] Output: 66 Explanation: The encrypted elements are [11,22,33]. The sum of encrypted elements is 11 + 22 + 33 == 66.   Constraints: 1 <= nums.length <= 50 1 <= nums[i] <= 1000",
        "2280": "You are given a 0-indexed array nums of size n consisting of positive integers. You are also given a 2D array queries of size m where queries[i] = [indexi, ki]. Initially all elements of the array are unmarked. You need to apply m queries on the array in order, where on the ith query you do the following: Mark the element at index indexi if it is not already marked. Then mark ki unmarked elements in the array with the smallest values. If multiple such elements exist, mark the ones with the smallest indices. And if less than ki unmarked elements exist, then mark all of them. Return an array answer of size m where answer[i] is the sum of unmarked elements in the array after the ith query.   Example 1: Input: nums = [1,2,2,1,2,3,1], queries = [[1,2],[3,3],[4,2]] Output: [8,3,0] Explanation: We do the following queries on the array: Mark the element at index 1, and 2 of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are nums = [1,2,2,1,2,3,1]. The sum of unmarked elements is 2 + 2 + 3 + 1 = 8. Mark the element at index 3, since it is already marked we skip it. Then we mark 3 of the smallest unmarked elements with the smallest indices, the marked elements now are nums = [1,2,2,1,2,3,1]. The sum of unmarked elements is 3. Mark the element at index 4, since it is already marked we skip it. Then we mark 2 of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are nums = [1,2,2,1,2,3,1]. The sum of unmarked elements is 0. Example 2: Input: nums = [1,4,2,3], queries = [[0,1]] Output: [7] Explanation: We do one query which is mark the element at index 0 and mark the smallest element among unmarked elements. The marked elements will be nums = [1,4,2,3], and the sum of unmarked elements is 4 + 3 = 7.   Constraints: n == nums.length m == queries.length 1 <= m <= n <= 105 1 <= nums[i] <= 105 queries[i].length == 2 0 <= indexi, ki <= n - 1",
        "2281": "You are given a string s. s[i] is either a lowercase English letter or '?'. For a string t having length m containing only lowercase English letters, we define the function cost(i) for an index i as the number of characters equal to t[i] that appeared before it, i.e. in the range [0, i - 1]. The value of t is the sum of cost(i) for all indices i. For example, for the string t = \"aab\": cost(0) = 0 cost(1) = 1 cost(2) = 0 Hence, the value of \"aab\" is 0 + 1 + 0 = 1. Your task is to replace all occurrences of '?' in s with any lowercase English letter so that the value of s is minimized. Return a string denoting the modified string with replaced occurrences of '?'. If there are multiple strings resulting in the minimum value, return the lexicographically smallest one.   Example 1: Input: s = \"???\" Output: \"abc\" Explanation: In this example, we can replace the occurrences of '?' to make s equal to \"abc\". For \"abc\", cost(0) = 0, cost(1) = 0, and cost(2) = 0. The value of \"abc\" is 0. Some other modifications of s that have a value of 0 are \"cba\", \"abz\", and, \"hey\". Among all of them, we choose the lexicographically smallest. Example 2: Input: s = \"a?a?\" Output: \"abac\" Explanation: In this example, the occurrences of '?' can be replaced to make s equal to \"abac\". For \"abac\", cost(0) = 0, cost(1) = 0, cost(2) = 1, and cost(3) = 0. The value of \"abac\" is 1.   Constraints: 1 <= s.length <= 105 s[i] is either a lowercase English letter or '?'.",
        "2282": "You are given an integer array nums of length n and a positive integer k. The power of an array of integers is defined as the number of subsequences with their sum equal to k. Return the sum of power of all subsequences of nums. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: nums = [1,2,3], k = 3 Output: 6 Explanation: There are 5 subsequences of nums with non-zero power: The subsequence [1,2,3] has 2 subsequences with sum == 3: [1,2,3] and [1,2,3]. The subsequence [1,2,3] has 1 subsequence with sum == 3: [1,2,3]. The subsequence [1,2,3] has 1 subsequence with sum == 3: [1,2,3]. The subsequence [1,2,3] has 1 subsequence with sum == 3: [1,2,3]. The subsequence [1,2,3] has 1 subsequence with sum == 3: [1,2,3]. Hence the answer is 2 + 1 + 1 + 1 + 1 = 6. Example 2: Input: nums = [2,3,3], k = 5 Output: 4 Explanation: There are 3 subsequences of nums with non-zero power: The subsequence [2,3,3] has 2 subsequences with sum == 5: [2,3,3] and [2,3,3]. The subsequence [2,3,3] has 1 subsequence with sum == 5: [2,3,3]. The subsequence [2,3,3] has 1 subsequence with sum == 5: [2,3,3]. Hence the answer is 2 + 1 + 1 = 4. Example 3: Input: nums = [1,2,3], k = 7 Output: 0 Explanation: There exists no subsequence with sum 7. Hence all subsequences of nums have power = 0.   Constraints: 1 <= n <= 100 1 <= nums[i] <= 104 1 <= k <= 100",
        "2283": "Given a string s, find any substring of length 2 which is also present in the reverse of s. Return true if such a substring exists, and false otherwise.   Example 1: Input: s = \"leetcode\" Output: true Explanation: Substring \"ee\" is of length 2 which is also present in reverse(s) == \"edocteel\". Example 2: Input: s = \"abcba\" Output: true Explanation: All of the substrings of length 2 \"ab\", \"bc\", \"cb\", \"ba\" are also present in reverse(s) == \"abcba\". Example 3: Input: s = \"abcd\" Output: false Explanation: There is no substring of length 2 in s, which is also present in the reverse of s.   Constraints: 1 <= s.length <= 100 s consists only of lowercase English letters.",
        "2284": "You are given a string s and a character c. Return the total number of substrings of s that start and end with c.   Example 1: Input: s = \"abada\", c = \"a\" Output: 6 Explanation: Substrings starting and ending with \"a\" are: \"abada\", \"abada\", \"abada\", \"abada\", \"abada\", \"abada\". Example 2: Input: s = \"zzz\", c = \"z\" Output: 6 Explanation: There are a total of 6 substrings in s and all start and end with \"z\".   Constraints: 1 <= s.length <= 105 s and c consist only of lowercase English letters.",
        "2285": "You are given a string word and an integer k. We consider word to be k-special if |freq(word[i]) - freq(word[j])| <= k for all indices i and j in the string. Here, freq(x) denotes the frequency of the character x in word, and |y| denotes the absolute value of y. Return the minimum number of characters you need to delete to make word k-special.   Example 1: Input: word = \"aabcaba\", k = 0 Output: 3 Explanation: We can make word 0-special by deleting 2 occurrences of \"a\" and 1 occurrence of \"c\". Therefore, word becomes equal to \"baba\" where freq('a') == freq('b') == 2. Example 2: Input: word = \"dabdcbdcdcd\", k = 2 Output: 2 Explanation: We can make word 2-special by deleting 1 occurrence of \"a\" and 1 occurrence of \"d\". Therefore, word becomes equal to \"bdcbdcdcd\" where freq('b') == 2, freq('c') == 3, and freq('d') == 4. Example 3: Input: word = \"aaabaaa\", k = 2 Output: 1 Explanation: We can make word 2-special by deleting 1 occurrence of \"b\". Therefore, word becomes equal to \"aaaaaa\" where each letter's frequency is now uniformly 6.   Constraints: 1 <= word.length <= 105 0 <= k <= 105 word consists only of lowercase English letters.",
        "2286": "You are given a binary array nums of length n, a positive integer k and a non-negative integer maxChanges. Alice plays a game, where the goal is for Alice to pick up k ones from nums using the minimum number of moves. When the game starts, Alice picks up any index aliceIndex in the range [0, n - 1] and stands there. If nums[aliceIndex] == 1 , Alice picks up the one and nums[aliceIndex] becomes 0(this does not count as a move). After this, Alice can make any number of moves (including zero) where in each move Alice must perform exactly one of the following actions: Select any index j != aliceIndex such that nums[j] == 0 and set nums[j] = 1. This action can be performed at most maxChanges times. Select any two adjacent indices x and y (|x - y| == 1) such that nums[x] == 1, nums[y] == 0, then swap their values (set nums[y] = 1 and nums[x] = 0). If y == aliceIndex, Alice picks up the one after this move and nums[y] becomes 0. Return the minimum number of moves required by Alice to pick exactly k ones.   Example 1: Input: nums = [1,1,0,0,0,1,1,0,0,1], k = 3, maxChanges = 1 Output: 3 Explanation: Alice can pick up 3 ones in 3 moves, if Alice performs the following actions in each move when standing at aliceIndex == 1: At the start of the game Alice picks up the one and nums[1] becomes 0. nums becomes [1,0,0,0,0,1,1,0,0,1]. Select j == 2 and perform an action of the first type. nums becomes [1,0,1,0,0,1,1,0,0,1] Select x == 2 and y == 1, and perform an action of the second type. nums becomes [1,1,0,0,0,1,1,0,0,1]. As y == aliceIndex, Alice picks up the one and nums becomes [1,0,0,0,0,1,1,0,0,1]. Select x == 0 and y == 1, and perform an action of the second type. nums becomes [0,1,0,0,0,1,1,0,0,1]. As y == aliceIndex, Alice picks up the one and nums becomes [0,0,0,0,0,1,1,0,0,1]. Note that it may be possible for Alice to pick up 3 ones using some other sequence of 3 moves. Example 2: Input: nums = [0,0,0,0], k = 2, maxChanges = 3 Output: 4 Explanation: Alice can pick up 2 ones in 4 moves, if Alice performs the following actions in each move when standing at aliceIndex == 0: Select j == 1 and perform an action of the first type. nums becomes [0,1,0,0]. Select x == 1 and y == 0, and perform an action of the second type. nums becomes [1,0,0,0]. As y == aliceIndex, Alice picks up the one and nums becomes [0,0,0,0]. Select j == 1 again and perform an action of the first type. nums becomes [0,1,0,0]. Select x == 1 and y == 0 again, and perform an action of the second type. nums becomes [1,0,0,0]. As y == aliceIndex, Alice picks up the one and nums becomes [0,0,0,0].   Constraints: 2 <= n <= 105 0 <= nums[i] <= 1 1 <= k <= 105 0 <= maxChanges <= 105 maxChanges + sum(nums) >= k",
        "2287": "Given a string s, return the maximum length of a substring  such that it contains at most two occurrences of each character.   Example 1: Input: s = \"bcbbbcba\" Output: 4 Explanation: The following substring has a length of 4 and contains at most two occurrences of each character: \"bcbbbcba\". Example 2: Input: s = \"aaaa\" Output: 2 Explanation: The following substring has a length of 2 and contains at most two occurrences of each character: \"aaaa\".   Constraints: 2 <= s.length <= 100 s consists only of lowercase English letters.",
        "2288": "You are given a positive integer k. Initially, you have an array nums = [1]. You can perform any of the following operations on the array any number of times (possibly zero): Choose any element in the array and increase its value by 1. Duplicate any element in the array and add it to the end of the array. Return the minimum number of operations required to make the sum of elements of the final array greater than or equal to k.   Example 1: Input: k = 11 Output: 5 Explanation: We can do the following operations on the array nums = [1]: Increase the element by 1 three times. The resulting array is nums = [4]. Duplicate the element two times. The resulting array is nums = [4,4,4]. The sum of the final array is 4 + 4 + 4 = 12 which is greater than or equal to k = 11. The total number of operations performed is 3 + 2 = 5. Example 2: Input: k = 1 Output: 0 Explanation: The sum of the original array is already greater than or equal to 1, so no operations are needed.   Constraints: 1 <= k <= 105",
        "2289": "The problem involves tracking the frequency of IDs in a collection that changes over time. You have two integer arrays, nums and freq, of equal length n. Each element in nums represents an ID, and the corresponding element in freq indicates how many times that ID should be added to or removed from the collection at each step. Addition of IDs: If freq[i] is positive, it means freq[i] IDs with the value nums[i] are added to the collection at step i. Removal of IDs: If freq[i] is negative, it means -freq[i] IDs with the value nums[i] are removed from the collection at step i. Return an array ans of length n, where ans[i] represents the count of the most frequent ID in the collection after the ith step. If the collection is empty at any step, ans[i] should be 0 for that step.   Example 1: Input: nums = [2,3,2,1], freq = [3,2,-3,1] Output: [3,3,2,2] Explanation: After step 0, we have 3 IDs with the value of 2. So ans[0] = 3. After step 1, we have 3 IDs with the value of 2 and 2 IDs with the value of 3. So ans[1] = 3. After step 2, we have 2 IDs with the value of 3. So ans[2] = 2. After step 3, we have 2 IDs with the value of 3 and 1 ID with the value of 1. So ans[3] = 2. Example 2: Input: nums = [5,5,3], freq = [2,-2,1] Output: [2,0,1] Explanation: After step 0, we have 2 IDs with the value of 5. So ans[0] = 2. After step 1, there are no IDs. So ans[1] = 0. After step 2, we have 1 ID with the value of 3. So ans[2] = 1.   Constraints: 1 <= nums.length == freq.length <= 105 1 <= nums[i] <= 105 -105 <= freq[i] <= 105 freq[i] != 0 The input is generated such that the occurrences of an ID will not be negative in any step.",
        "2290": "You are given two arrays of strings wordsContainer and wordsQuery. For each wordsQuery[i], you need to find a string from wordsContainer that has the longest common suffix with wordsQuery[i]. If there are two or more strings in wordsContainer that share the longest common suffix, find the string that is the smallest in length. If there are two or more such strings that have the same smallest length, find the one that occurred earlier in wordsContainer. Return an array of integers ans, where ans[i] is the index of the string in wordsContainer that has the longest common suffix with wordsQuery[i].   Example 1: Input: wordsContainer = [\"abcd\",\"bcd\",\"xbcd\"], wordsQuery = [\"cd\",\"bcd\",\"xyz\"] Output: [1,1,1] Explanation: Let's look at each wordsQuery[i] separately: For wordsQuery[0] = \"cd\", strings from wordsContainer that share the longest common suffix \"cd\" are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3. For wordsQuery[1] = \"bcd\", strings from wordsContainer that share the longest common suffix \"bcd\" are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3. For wordsQuery[2] = \"xyz\", there is no string from wordsContainer that shares a common suffix. Hence the longest common suffix is \"\", that is shared with strings at index 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3. Example 2: Input: wordsContainer = [\"abcdefgh\",\"poiuygh\",\"ghghgh\"], wordsQuery = [\"gh\",\"acbfgh\",\"acbfegh\"] Output: [2,0,2] Explanation: Let's look at each wordsQuery[i] separately: For wordsQuery[0] = \"gh\", strings from wordsContainer that share the longest common suffix \"gh\" are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6. For wordsQuery[1] = \"acbfgh\", only the string at index 0 shares the longest common suffix \"fgh\". Hence it is the answer, even though the string at index 2 is shorter. For wordsQuery[2] = \"acbfegh\", strings from wordsContainer that share the longest common suffix \"gh\" are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.   Constraints: 1 <= wordsContainer.length, wordsQuery.length <= 104 1 <= wordsContainer[i].length <= 5 * 103 1 <= wordsQuery[i].length <= 5 * 103 wordsContainer[i] consists only of lowercase English letters. wordsQuery[i] consists only of lowercase English letters. Sum of wordsContainer[i].length is at most 5 * 105. Sum of wordsQuery[i].length is at most 5 * 105.",
        "2291": "You are given an array nums of non-negative integers and an integer k. An array is called special if the bitwise OR of all of its elements is at least k. Return the length of the shortest special non-empty subarray of nums, or return -1 if no special subarray exists.   Example 1: Input: nums = [1,2,3], k = 2 Output: 1 Explanation: The subarray [3] has OR value of 3. Hence, we return 1. Example 2: Input: nums = [2,1,8], k = 10 Output: 3 Explanation: The subarray [2,1,8] has OR value of 11. Hence, we return 3. Example 3: Input: nums = [1,2], k = 0 Output: 1 Explanation: The subarray [1] has OR value of 1. Hence, we return 1.   Constraints: 1 <= nums.length <= 50 0 <= nums[i] <= 50 0 <= k < 64",
        "2292": "You are given a binary array possible of length n. Alice and Bob are playing a game that consists of n levels. Some of the levels in the game are impossible to clear while others can always be cleared. In particular, if possible[i] == 0, then the ith level is impossible to clear for both the players. A player gains 1 point on clearing a level and loses 1 point if the player fails to clear it. At the start of the game, Alice will play some levels in the given order starting from the 0th level, after which Bob will play for the rest of the levels. Alice wants to know the minimum number of levels she should play to gain more points than Bob, if both players play optimally to maximize their points. Return the minimum number of levels Alice should play to gain more points. If this is not possible, return -1. Note that each player must play at least 1 level.   Example 1: Input: possible = [1,0,1,0] Output: 1 Explanation: Let's look at all the levels that Alice can play up to: If Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has -1 + 1 - 1 = -1 point. If Alice plays till level 1 and Bob plays the rest of the levels, Alice has 1 - 1 = 0 points, while Bob has 1 - 1 = 0 points. If Alice plays till level 2 and Bob plays the rest of the levels, Alice has 1 - 1 + 1 = 1 point, while Bob has -1 point. Alice must play a minimum of 1 level to gain more points. Example 2: Input: possible = [1,1,1,1,1] Output: 3 Explanation: Let's look at all the levels that Alice can play up to: If Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has 4 points. If Alice plays till level 1 and Bob plays the rest of the levels, Alice has 2 points, while Bob has 3 points. If Alice plays till level 2 and Bob plays the rest of the levels, Alice has 3 points, while Bob has 2 points. If Alice plays till level 3 and Bob plays the rest of the levels, Alice has 4 points, while Bob has 1 point. Alice must play a minimum of 3 levels to gain more points. Example 3: Input: possible = [0,0] Output: -1 Explanation: The only possible way is for both players to play 1 level each. Alice plays level 0 and loses 1 point. Bob plays level 1 and loses 1 point. As both players have equal points, Alice can't gain more points than Bob.   Constraints: 2 <= n == possible.length <= 105 possible[i] is either 0 or 1.",
        "2293": "You are given an array nums of non-negative integers and an integer k. An array is called special if the bitwise OR of all of its elements is at least k. Return the length of the shortest special non-empty subarray of nums, or return -1 if no special subarray exists.   Example 1: Input: nums = [1,2,3], k = 2 Output: 1 Explanation: The subarray [3] has OR value of 3. Hence, we return 1. Example 2: Input: nums = [2,1,8], k = 10 Output: 3 Explanation: The subarray [2,1,8] has OR value of 11. Hence, we return 3. Example 3: Input: nums = [1,2], k = 0 Output: 1 Explanation: The subarray [1] has OR value of 1. Hence, we return 1.   Constraints: 1 <= nums.length <= 2 * 105 0 <= nums[i] <= 109 0 <= k <= 109",
        "2294": "You are given an integer array nums of length n, and a positive integer k. The power of a subsequence is defined as the minimum absolute difference between any two elements in the subsequence. Return the sum of powers of all subsequences of nums which have length equal to k. Since the answer may be large, return it modulo 109 + 7.   Example 1: Input: nums = [1,2,3,4], k = 3 Output: 4 Explanation: There are 4 subsequences in nums which have length 3: [1,2,3], [1,3,4], [1,2,4], and [2,3,4]. The sum of powers is |2 - 3| + |3 - 4| + |2 - 1| + |3 - 4| = 4. Example 2: Input: nums = [2,2], k = 2 Output: 0 Explanation: The only subsequence in nums which has length 2 is [2,2]. The sum of powers is |2 - 2| = 0. Example 3: Input: nums = [4,3,-1], k = 2 Output: 10 Explanation: There are 3 subsequences in nums which have length 2: [4,3], [4,-1], and [3,-1]. The sum of powers is |4 - 3| + |4 - (-1)| + |3 - (-1)| = 10.   Constraints: 2 <= n == nums.length <= 50 -108 <= nums[i] <= 108  2 <= k <= n",
        "2295": "An integer divisible by the sum of its digits is said to be a Harshad number. You are given an integer x. Return the sum of the digits of x if x is a Harshad number, otherwise, return -1.   Example 1: Input: x = 18 Output: 9 Explanation: The sum of digits of x is 9. 18 is divisible by 9. So 18 is a Harshad number and the answer is 9. Example 2: Input: x = 23 Output: -1 Explanation: The sum of digits of x is 5. 23 is not divisible by 5. So 23 is not a Harshad number and the answer is -1.   Constraints: 1 <= x <= 100",
        "2296": "You are given two integers numBottles and numExchange. numBottles represents the number of full water bottles that you initially have. In one operation, you can perform one of the following operations: Drink any number of full water bottles turning them into empty bottles. Exchange numExchange empty bottles with one full water bottle. Then, increase numExchange by one. Note that you cannot exchange multiple batches of empty bottles for the same value of numExchange. For example, if numBottles == 3 and numExchange == 1, you cannot exchange 3 empty water bottles for 3 full bottles. Return the maximum number of water bottles you can drink.   Example 1: Input: numBottles = 13, numExchange = 6 Output: 15 Explanation: The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk. Example 2: Input: numBottles = 10, numExchange = 3 Output: 13 Explanation: The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk.   Constraints: 1 <= numBottles <= 100  1 <= numExchange <= 100",
        "2297": "You are given a binary array nums. We call a subarray alternating if no two adjacent elements in the subarray have the same value. Return the number of alternating subarrays in nums.   Example 1: Input: nums = [0,1,1,1] Output: 5 Explanation: The following subarrays are alternating: [0], [1], [1], [1], and [0,1]. Example 2: Input: nums = [1,0,1,0] Output: 10 Explanation: Every subarray of the array is alternating. There are 10 possible subarrays that we can choose.   Constraints: 1 <= nums.length <= 105 nums[i] is either 0 or 1.",
        "2298": "You are given an array points representing integer coordinates of some points on a 2D plane, where points[i] = [xi, yi]. The distance between two points is defined as their Manhattan distance . Return the minimum possible value for maximum distance between any two points by removing exactly one point.   Example 1: Input: points = [[3,10],[5,15],[10,2],[4,4]] Output: 12 Explanation: The maximum distance after removing each point is the following: After removing the 0th point the maximum distance is between points (5, 15) and (10, 2), which is |5 - 10| + |15 - 2| = 18. After removing the 1st point the maximum distance is between points (3, 10) and (10, 2), which is |3 - 10| + |10 - 2| = 15. After removing the 2nd point the maximum distance is between points (5, 15) and (4, 4), which is |5 - 4| + |15 - 4| = 12. After removing the 3rd point the maximum distance is between points (5, 15) and (10, 2), which is |5 - 10| + |15 - 2| = 18. 12 is the minimum possible maximum distance between any two points after removing exactly one point. Example 2: Input: points = [[1,1],[1,1],[1,1]] Output: 0 Explanation: Removing any of the points results in the maximum distance between any two points of 0.   Constraints: 3 <= points.length <= 105 points[i].length == 2 1 <= points[i][0], points[i][1] <= 108",
        "2299": "You are given an array of integers nums. Return the length of the longest subarray of nums which is either strictly increasing or strictly decreasing .   Example 1: Input: nums = [1,4,3,3,2] Output: 2 Explanation: The strictly increasing subarrays of nums are [1], [2], [3], [3], [4], and [1,4]. The strictly decreasing subarrays of nums are [1], [2], [3], [3], [4], [3,2], and [4,3]. Hence, we return 2. Example 2: Input: nums = [3,3,3,3] Output: 1 Explanation: The strictly increasing subarrays of nums are [3], [3], [3], and [3]. The strictly decreasing subarrays of nums are [3], [3], [3], and [3]. Hence, we return 1. Example 3: Input: nums = [3,2,1] Output: 3 Explanation: The strictly increasing subarrays of nums are [3], [2], and [1]. The strictly decreasing subarrays of nums are [3], [2], [1], [3,2], [2,1], and [3,2,1]. Hence, we return 3.   Constraints: 1 <= nums.length <= 50 1 <= nums[i] <= 50",
        "2300": "You are given a string s and an integer k. Define a function distance(s1, s2) between two strings s1 and s2 of the same length n as: The sum of the minimum distance between s1[i] and s2[i] when the characters from 'a' to 'z' are placed in a cyclic order, for all i in the range [0, n - 1]. For example, distance(\"ab\", \"cd\") == 4, and distance(\"a\", \"z\") == 1. You can change any letter of s to any other lowercase English letter, any number of times. Return a string denoting the lexicographically smallest string t you can get after some changes, such that distance(s, t) <= k.   Example 1: Input: s = \"zbbz\", k = 3 Output: \"aaaz\" Explanation: Change s to \"aaaz\". The distance between \"zbbz\" and \"aaaz\" is equal to k = 3. Example 2: Input: s = \"xaxcd\", k = 4 Output: \"aawcd\" Explanation: The distance between \"xaxcd\" and \"aawcd\" is equal to k = 4. Example 3: Input: s = \"lol\", k = 0 Output: \"lol\" Explanation: It's impossible to change any character as k = 0.   Constraints: 1 <= s.length <= 100 0 <= k <= 2000 s consists only of lowercase English letters.",
        "2301": "You are given an integer array nums and a non-negative integer k. In one operation, you can increase or decrease any element by 1. Return the minimum number of operations needed to make the median of nums equal to k. The median of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the larger of the two values is taken.   Example 1: Input: nums = [2,5,6,8,5], k = 4 Output: 2 Explanation: We can subtract one from nums[1] and nums[4] to obtain [2, 4, 6, 8, 4]. The median of the resulting array is equal to k. Example 2: Input: nums = [2,5,6,8,5], k = 7 Output: 3 Explanation: We can add one to nums[1] twice and add one to nums[2] once to obtain [2, 7, 7, 8, 5]. Example 3: Input: nums = [1,2,3,4,5,6], k = 4 Output: 0 Explanation: The median of the array is already equal to k.   Constraints: 1 <= nums.length <= 2 * 105 1 <= nums[i] <= 109 1 <= k <= 109",
        "2302": "There is an undirected weighted graph with n vertices labeled from 0 to n - 1. You are given the integer n and an array edges, where edges[i] = [ui, vi, wi] indicates that there is an edge between vertices ui and vi with a weight of wi. A walk on a graph is a sequence of vertices and edges. The walk starts and ends with a vertex, and each edge connects the vertex that comes before it and the vertex that comes after it. It's important to note that a walk may visit the same edge or vertex more than once. The cost of a walk starting at node u and ending at node v is defined as the bitwise AND of the weights of the edges traversed during the walk. In other words, if the sequence of edge weights encountered during the walk is w0, w1, w2, ..., wk, then the cost is calculated as w0 & w1 & w2 & ... & wk, where & denotes the bitwise AND operator. You are also given a 2D array query, where query[i] = [si, ti]. For each query, you need to find the minimum cost of the walk starting at vertex si and ending at vertex ti. If there exists no such walk, the answer is -1. Return the array answer, where answer[i] denotes the minimum cost of a walk for query i.   Example 1: Input: n = 5, edges = [[0,1,7],[1,3,7],[1,2,1]], query = [[0,3],[3,4]] Output: [1,-1] Explanation: To achieve the cost of 1 in the first query, we need to move on the following edges: 0->1 (weight 7), 1->2 (weight 1), 2->1 (weight 1), 1->3 (weight 7). In the second query, there is no walk between nodes 3 and 4, so the answer is -1. Example 2: Input: n = 3, edges = [[0,2,7],[0,1,15],[1,2,6],[1,2,1]], query = [[1,2]] Output: [0] Explanation: To achieve the cost of 0 in the first query, we need to move on the following edges: 1->2 (weight 1), 2->1 (weight 6), 1->2 (weight 1).   Constraints: 2 <= n <= 105 0 <= edges.length <= 105 edges[i].length == 3 0 <= ui, vi <= n - 1 ui != vi 0 <= wi <= 105 1 <= query.length <= 105 query[i].length == 2 0 <= si, ti <= n - 1 si != ti",
        "2303": "You are given a string s. The score of a string is defined as the sum of the absolute difference between the ASCII values of adjacent characters. Return the score of s.   Example 1: Input: s = \"hello\" Output: 13 Explanation: The ASCII values of the characters in s are: 'h' = 104, 'e' = 101, 'l' = 108, 'o' = 111. So, the score of s would be |104 - 101| + |101 - 108| + |108 - 108| + |108 - 111| = 3 + 7 + 0 + 3 = 13. Example 2: Input: s = \"zaz\" Output: 50 Explanation: The ASCII values of the characters in s are: 'z' = 122, 'a' = 97. So, the score of s would be |122 - 97| + |97 - 122| = 25 + 25 = 50.   Constraints: 2 <= s.length <= 100 s consists only of lowercase English letters.",
        "2304": "You are given a 2D integer array points, where points[i] = [xi, yi]. You are also given an integer w. Your task is to cover all the given points with rectangles. Each rectangle has its lower end at some point (x1, 0) and its upper end at some point (x2, y2), where x1 <= x2, y2 >= 0, and the condition x2 - x1 <= w must be satisfied for each rectangle. A point is considered covered by a rectangle if it lies within or on the boundary of the rectangle. Return an integer denoting the minimum number of rectangles needed so that each point is covered by at least one rectangle. Note: A point may be covered by more than one rectangle.   Example 1: Input: points = [[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]], w = 1 Output: 2 Explanation: The image above shows one possible placement of rectangles to cover the points: A rectangle with a lower end at (1, 0) and its upper end at (2, 8) A rectangle with a lower end at (3, 0) and its upper end at (4, 8) Example 2: Input: points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]], w = 2 Output: 3 Explanation: The image above shows one possible placement of rectangles to cover the points: A rectangle with a lower end at (0, 0) and its upper end at (2, 2) A rectangle with a lower end at (3, 0) and its upper end at (5, 5) A rectangle with a lower end at (6, 0) and its upper end at (6, 6) Example 3: Input: points = [[2,3],[1,2]], w = 0 Output: 2 Explanation: The image above shows one possible placement of rectangles to cover the points: A rectangle with a lower end at (1, 0) and its upper end at (1, 2) A rectangle with a lower end at (2, 0) and its upper end at (2, 3)   Constraints: 1 <= points.length <= 105 points[i].length == 2 0 <= xi == points[i][0] <= 109 0 <= yi == points[i][1] <= 109 0 <= w <= 109 All pairs (xi, yi) are distinct.",
        "2305": "There is an undirected graph of n nodes. You are given a 2D array edges, where edges[i] = [ui, vi, lengthi] describes an edge between node ui and node vi with a traversal time of lengthi units. Additionally, you are given an array disappear, where disappear[i] denotes the time when the node i disappears from the graph and you won't be able to visit it. Note that the graph might be disconnected and might contain multiple edges. Return the array answer, with answer[i] denoting the minimum units of time required to reach node i from node 0. If node i is unreachable from node 0 then answer[i] is -1.   Example 1: Input: n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,1,5] Output: [0,-1,4] Explanation: We are starting our journey from node 0, and our goal is to find the minimum time required to reach each node before it disappears. For node 0, we don't need any time as it is our starting point. For node 1, we need at least 2 units of time to traverse edges[0]. Unfortunately, it disappears at that moment, so we won't be able to visit it. For node 2, we need at least 4 units of time to traverse edges[2]. Example 2: Input: n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,3,5] Output: [0,2,3] Explanation: We are starting our journey from node 0, and our goal is to find the minimum time required to reach each node before it disappears. For node 0, we don't need any time as it is the starting point. For node 1, we need at least 2 units of time to traverse edges[0]. For node 2, we need at least 3 units of time to traverse edges[0] and edges[1]. Example 3: Input: n = 2, edges = [[0,1,1]], disappear = [1,1] Output: [0,-1] Explanation: Exactly when we reach node 1, it disappears.   Constraints: 1 <= n <= 5 * 104 0 <= edges.length <= 105 edges[i] == [ui, vi, lengthi] 0 <= ui, vi <= n - 1 1 <= lengthi <= 105 disappear.length == n 1 <= disappear[i] <= 105",
        "2306": "You are given an array of positive integers nums. Return the number of subarrays of nums, where the first and the last elements of the subarray are equal to the largest element in the subarray.   Example 1: Input: nums = [1,4,3,3,2] Output: 6 Explanation: There are 6 subarrays which have the first and the last elements equal to the largest element of the subarray: subarray [1,4,3,3,2], with its largest element 1. The first element is 1 and the last element is also 1. subarray [1,4,3,3,2], with its largest element 4. The first element is 4 and the last element is also 4. subarray [1,4,3,3,2], with its largest element 3. The first element is 3 and the last element is also 3. subarray [1,4,3,3,2], with its largest element 3. The first element is 3 and the last element is also 3. subarray [1,4,3,3,2], with its largest element 2. The first element is 2 and the last element is also 2. subarray [1,4,3,3,2], with its largest element 3. The first element is 3 and the last element is also 3. Hence, we return 6. Example 2: Input: nums = [3,3,3] Output: 6 Explanation: There are 6 subarrays which have the first and the last elements equal to the largest element of the subarray: subarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3. subarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3. subarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3. subarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3. subarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3. subarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3. Hence, we return 6. Example 3: Input: nums = [1] Output: 1 Explanation: There is a single subarray of nums which is [1], with its largest element 1. The first element is 1 and the last element is also 1. Hence, we return 1.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109",
        "2307": "You are given a string s representing a 12-hour format time where some of the digits (possibly none) are replaced with a \"?\". 12-hour times are formatted as \"HH:MM\", where HH is between 00 and 11, and MM is between 00 and 59. The earliest 12-hour time is 00:00, and the latest is 11:59. You have to replace all the \"?\" characters in s with digits such that the time we obtain by the resulting string is a valid 12-hour format time and is the latest possible. Return the resulting string.   Example 1: Input: s = \"1?:?4\" Output: \"11:54\" Explanation: The latest 12-hour format time we can achieve by replacing \"?\" characters is \"11:54\". Example 2: Input: s = \"0?:5?\" Output: \"09:59\" Explanation: The latest 12-hour format time we can achieve by replacing \"?\" characters is \"09:59\".   Constraints: s.length == 5 s[2] is equal to the character \":\". All characters except s[2] are digits or \"?\" characters. The input is generated such that there is at least one time between \"00:00\" and \"11:59\" that you can obtain after replacing the \"?\" characters.",
        "2308": "You are given an integer array nums. Return an integer that is the maximum distance between the indices of two (not necessarily different) prime numbers in nums.   Example 1: Input: nums = [4,2,9,5,3] Output: 3 Explanation: nums[1], nums[3], and nums[4] are prime. So the answer is |4 - 1| = 3. Example 2: Input: nums = [4,8,2,8] Output: 0 Explanation: nums[2] is prime. Because there is just one prime number, the answer is |2 - 2| = 0.   Constraints: 1 <= nums.length <= 3 * 105 1 <= nums[i] <= 100 The input is generated such that the number of prime numbers in the nums is at least one.",
        "2309": "You are given an integer array coins representing coins of different denominations and an integer k. You have an infinite number of coins of each denomination. However, you are not allowed to combine coins of different denominations. Return the kth smallest amount that can be made using these coins.   Example 1: Input: coins = [3,6,9], k = 3 Output: 9 Explanation: The given coins can make the following amounts: Coin 3 produces multiples of 3: 3, 6, 9, 12, 15, etc. Coin 6 produces multiples of 6: 6, 12, 18, 24, etc. Coin 9 produces multiples of 9: 9, 18, 27, 36, etc. All of the coins combined produce: 3, 6, 9, 12, 15, etc. Example 2: Input: coins = [5,2], k = 7 Output: 12 Explanation: The given coins can make the following amounts: Coin 5 produces multiples of 5: 5, 10, 15, 20, etc. Coin 2 produces multiples of 2: 2, 4, 6, 8, 10, 12, etc. All of the coins combined produce: 2, 4, 5, 6, 8, 10, 12, 14, 15, etc.   Constraints: 1 <= coins.length <= 15 1 <= coins[i] <= 25 1 <= k <= 2 * 109 coins contains pairwise distinct integers.",
        "2310": "You are given two arrays nums and andValues of length n and m respectively. The value of an array is equal to the last element of that array. You have to divide nums into m disjoint contiguous subarrays such that for the ith subarray [li, ri], the bitwise AND of the subarray elements is equal to andValues[i], in other words, nums[li] & nums[li + 1] & ... & nums[ri] == andValues[i] for all 1 <= i <= m, where & represents the bitwise AND operator. Return the minimum possible sum of the values of the m subarrays nums is divided into. If it is not possible to divide nums into m subarrays satisfying these conditions, return -1.   Example 1: Input: nums = [1,4,3,3,2], andValues = [0,3,3,2] Output: 12 Explanation: The only possible way to divide nums is: [1,4] as 1 & 4 == 0. [3] as the bitwise AND of a single element subarray is that element itself. [3] as the bitwise AND of a single element subarray is that element itself. [2] as the bitwise AND of a single element subarray is that element itself. The sum of the values for these subarrays is 4 + 3 + 3 + 2 = 12. Example 2: Input: nums = [2,3,5,7,7,7,5], andValues = [0,7,5] Output: 17 Explanation: There are three ways to divide nums: [[2,3,5],[7,7,7],[5]] with the sum of the values 5 + 7 + 5 == 17. [[2,3,5,7],[7,7],[5]] with the sum of the values 7 + 7 + 5 == 19. [[2,3,5,7,7],[7],[5]] with the sum of the values 7 + 7 + 5 == 19. The minimum possible sum of the values is 17. Example 3: Input: nums = [1,2,3,4], andValues = [2] Output: -1 Explanation: The bitwise AND of the entire array nums is 0. As there is no possible way to divide nums into a single subarray to have the bitwise AND of elements 2, return -1.   Constraints: 1 <= n == nums.length <= 104 1 <= m == andValues.length <= min(n, 10) 1 <= nums[i] < 105 0 <= andValues[j] < 105",
        "2311": "You are given a string word. A letter is called special if it appears both in lowercase and uppercase in word. Return the number of special letters in word.   Example 1: Input: word = \"aaAbcBC\" Output: 3 Explanation: The special characters in word are 'a', 'b', and 'c'. Example 2: Input: word = \"abc\" Output: 0 Explanation: No character in word appears in uppercase. Example 3: Input: word = \"abBCab\" Output: 1 Explanation: The only special character in word is 'b'.   Constraints: 1 <= word.length <= 50 word consists of only lowercase and uppercase English letters.",
        "2312": "You are given a string word. A letter c is called special if it appears both in lowercase and uppercase in word, and every lowercase occurrence of c appears before the first uppercase occurrence of c. Return the number of special letters in word.   Example 1: Input: word = \"aaAbcBC\" Output: 3 Explanation: The special characters are 'a', 'b', and 'c'. Example 2: Input: word = \"abc\" Output: 0 Explanation: There are no special characters in word. Example 3: Input: word = \"AbBCab\" Output: 0 Explanation: There are no special characters in word.   Constraints: 1 <= word.length <= 2 * 105 word consists of only lowercase and uppercase English letters.",
        "2313": "You are given a 2D matrix grid of size m x n. In one operation, you can change the value of any cell to any non-negative number. You need to perform some operations such that each cell grid[i][j] is: Equal to the cell below it, i.e. grid[i][j] == grid[i + 1][j] (if it exists). Different from the cell to its right, i.e. grid[i][j] != grid[i][j + 1] (if it exists). Return the minimum number of operations needed.   Example 1: Input: grid = [[1,0,2],[1,0,2]] Output: 0 Explanation: All the cells in the matrix already satisfy the properties. Example 2: Input: grid = [[1,1,1],[0,0,0]] Output: 3 Explanation: The matrix becomes [[1,0,1],[1,0,1]] which satisfies the properties, by doing these 3 operations: Change grid[1][0] to 1. Change grid[0][1] to 0. Change grid[1][2] to 1. Example 3: Input: grid = [[1],[2],[3]] Output: 2 Explanation: There is a single column. We can change the value to 1 in each cell using 2 operations.   Constraints: 1 <= n, m <= 1000 0 <= grid[i][j] <= 9",
        "2314": "You are given an undirected weighted graph of n nodes numbered from 0 to n - 1. The graph consists of m edges represented by a 2D array edges, where edges[i] = [ai, bi, wi] indicates that there is an edge between nodes ai and bi with weight wi. Consider all the shortest paths from node 0 to node n - 1 in the graph. You need to find a boolean array answer where answer[i] is true if the edge edges[i] is part of at least one shortest path. Otherwise, answer[i] is false. Return the array answer. Note that the graph may not be connected.   Example 1: Input: n = 6, edges = [[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]] Output: [true,true,true,false,true,true,true,false] Explanation: The following are all the shortest paths between nodes 0 and 5: The path 0 -> 1 -> 5: The sum of weights is 4 + 1 = 5. The path 0 -> 2 -> 3 -> 5: The sum of weights is 1 + 1 + 3 = 5. The path 0 -> 2 -> 3 -> 1 -> 5: The sum of weights is 1 + 1 + 2 + 1 = 5. Example 2: Input: n = 4, edges = [[2,0,1],[0,1,1],[0,3,4],[3,2,2]] Output: [true,false,false,true] Explanation: There is one shortest path between nodes 0 and 3, which is the path 0 -> 2 -> 3 with the sum of weights 1 + 2 = 3.   Constraints: 2 <= n <= 5 * 104 m == edges.length 1 <= m <= min(5 * 104, n * (n - 1) / 2) 0 <= ai, bi < n ai != bi 1 <= wi <= 105 There are no repeated edges.",
        "2315": "You are given a 2D matrix grid of size 3 x 3 consisting only of characters 'B' and 'W'. Character 'W' represents the white color, and character 'B' represents the black color. Your task is to change the color of at most one cell so that the matrix has a 2 x 2 square where all cells are of the same color. Return true if it is possible to create a 2 x 2 square of the same color, otherwise, return false.   Example 1:                   Input: grid = [[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"B\"]] Output: true Explanation: It can be done by changing the color of the grid[0][2]. Example 2:                   Input: grid = [[\"B\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"B\"]] Output: false Explanation: It cannot be done by changing at most one cell. Example 3:                   Input: grid = [[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"W\"]] Output: true Explanation: The grid already contains a 2 x 2 square of the same color.   Constraints: grid.length == 3 grid[i].length == 3 grid[i][j] is either 'W' or 'B'.",
        "2316": "You are given a 2D boolean matrix grid. A collection of 3 elements of grid is a right triangle if one of its elements is in the same row with another element and in the same column with the third element. The 3 elements may not be next to each other. Return an integer that is the number of right triangles that can be made with 3 elements of grid such that all of them have a value of 1.   Example 1: 0 1 0 0 1 1 0 1 0 0 1 0 0 1 1 0 1 0 0 1 0 0 1 1 0 1 0 Input: grid = [[0,1,0],[0,1,1],[0,1,0]] Output: 2 Explanation: There are two right triangles with elements of the value 1. Notice that the blue ones do not form a right triangle because the 3 elements are in the same column. Example 2: 1 0 0 0 0 1 0 1 1 0 0 0 Input: grid = [[1,0,0,0],[0,1,0,1],[1,0,0,0]] Output: 0 Explanation: There are no right triangles with elements of the value 1.  Notice that the blue ones do not form a right triangle. Example 3: 1 0 1 1 0 0 1 0 0 1 0 1 1 0 0 1 0 0 Input: grid = [[1,0,1],[1,0,0],[1,0,0]] Output: 2 Explanation: There are two right triangles with elements of the value 1.   Constraints: 1 <= grid.length <= 1000 1 <= grid[i].length <= 1000 0 <= grid[i][j] <= 1",
        "2317": "You are given 3 positive integers zero, one, and limit. A binary array arr is called stable if: The number of occurrences of 0 in arr is exactly zero. The number of occurrences of 1 in arr is exactly one. Each subarray of arr with a size greater than limit must contain both 0 and 1. Return the total number of stable binary arrays. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: zero = 1, one = 1, limit = 2 Output: 2 Explanation: The two possible stable binary arrays are [1,0] and [0,1], as both arrays have a single 0 and a single 1, and no subarray has a length greater than 2. Example 2: Input: zero = 1, one = 2, limit = 1 Output: 1 Explanation: The only possible stable binary array is [1,0,1]. Note that the binary arrays [1,1,0] and [0,1,1] have subarrays of length 2 with identical elements, hence, they are not stable. Example 3: Input: zero = 3, one = 3, limit = 2 Output: 14 Explanation: All the possible stable binary arrays are [0,0,1,0,1,1], [0,0,1,1,0,1], [0,1,0,0,1,1], [0,1,0,1,0,1], [0,1,0,1,1,0], [0,1,1,0,0,1], [0,1,1,0,1,0], [1,0,0,1,0,1], [1,0,0,1,1,0], [1,0,1,0,0,1], [1,0,1,0,1,0], [1,0,1,1,0,0], [1,1,0,0,1,0], and [1,1,0,1,0,0].   Constraints: 1 <= zero, one, limit <= 200",
        "2318": "You are given 3 positive integers zero, one, and limit. A binary array arr is called stable if: The number of occurrences of 0 in arr is exactly zero. The number of occurrences of 1 in arr is exactly one. Each subarray of arr with a size greater than limit must contain both 0 and 1. Return the total number of stable binary arrays. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: zero = 1, one = 1, limit = 2 Output: 2 Explanation: The two possible stable binary arrays are [1,0] and [0,1]. Example 2: Input: zero = 1, one = 2, limit = 1 Output: 1 Explanation: The only possible stable binary array is [1,0,1]. Example 3: Input: zero = 3, one = 3, limit = 2 Output: 14 Explanation: All the possible stable binary arrays are [0,0,1,0,1,1], [0,0,1,1,0,1], [0,1,0,0,1,1], [0,1,0,1,0,1], [0,1,0,1,1,0], [0,1,1,0,0,1], [0,1,1,0,1,0], [1,0,0,1,0,1], [1,0,0,1,1,0], [1,0,1,0,0,1], [1,0,1,0,1,0], [1,0,1,1,0,0], [1,1,0,0,1,0], and [1,1,0,1,0,0].   Constraints: 1 <= zero, one, limit <= 1000",
        "2319": "You are given two arrays of equal length, nums1 and nums2. Each element in nums1 has been increased (or decreased in the case of negative) by an integer, represented by the variable x. As a result, nums1 becomes equal to nums2. Two arrays are considered equal when they contain the same integers with the same frequencies. Return the integer x.   Example 1: Input: nums1 = [2,6,4], nums2 = [9,7,5] Output: 3 Explanation: The integer added to each element of nums1 is 3. Example 2: Input: nums1 = [10], nums2 = [5] Output: -5 Explanation: The integer added to each element of nums1 is -5. Example 3: Input: nums1 = [1,1,1,1], nums2 = [1,1,1,1] Output: 0 Explanation: The integer added to each element of nums1 is 0.   Constraints: 1 <= nums1.length == nums2.length <= 100 0 <= nums1[i], nums2[i] <= 1000 The test cases are generated in a way that there is an integer x such that nums1 can become equal to nums2 by adding x to each element of nums1.",
        "2320": "You are given two integer arrays nums1 and nums2. From nums1 two elements have been removed, and all other elements have been increased (or decreased in the case of negative) by an integer, represented by the variable x. As a result, nums1 becomes equal to nums2. Two arrays are considered equal when they contain the same integers with the same frequencies. Return the minimum possible integer x that achieves this equivalence.   Example 1: Input: nums1 = [4,20,16,12,8], nums2 = [14,18,10] Output: -2 Explanation: After removing elements at indices [0,4] and adding -2, nums1 becomes [18,14,10]. Example 2: Input: nums1 = [3,5,5,3], nums2 = [7,7] Output: 2 Explanation: After removing elements at indices [0,3] and adding 2, nums1 becomes [7,7].   Constraints: 3 <= nums1.length <= 200 nums2.length == nums1.length - 2 0 <= nums1[i], nums2[i] <= 1000 The test cases are generated in a way that there is an integer x such that nums1 can become equal to nums2 by removing two elements and adding x to each element of nums1.",
        "2321": "You are given two integers n and x. You have to construct an array of positive integers nums of size n where for every 0 <= i < n - 1, nums[i + 1] is greater than nums[i], and the result of the bitwise AND operation between all elements of nums is x. Return the minimum possible value of nums[n - 1].   Example 1: Input: n = 3, x = 4 Output: 6 Explanation: nums can be [4,5,6] and its last element is 6. Example 2: Input: n = 2, x = 7 Output: 15 Explanation: nums can be [7,15] and its last element is 15.   Constraints: 1 <= n, x <= 108",
        "2322": "You are given an integer array nums. The uniqueness array of nums is the sorted array that contains the number of distinct elements of all the subarrays of nums. In other words, it is a sorted array consisting of distinct(nums[i..j]), for all 0 <= i <= j < nums.length. Here, distinct(nums[i..j]) denotes the number of distinct elements in the subarray that starts at index i and ends at index j. Return the median of the uniqueness array of nums. Note that the median of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the smaller of the two values is taken.   Example 1: Input: nums = [1,2,3] Output: 1 Explanation: The uniqueness array of nums is [distinct(nums[0..0]), distinct(nums[1..1]), distinct(nums[2..2]), distinct(nums[0..1]), distinct(nums[1..2]), distinct(nums[0..2])] which is equal to [1, 1, 1, 2, 2, 3]. The uniqueness array has a median of 1. Therefore, the answer is 1. Example 2: Input: nums = [3,4,3,4,5] Output: 2 Explanation: The uniqueness array of nums is [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3]. The uniqueness array has a median of 2. Therefore, the answer is 2. Example 3: Input: nums = [4,3,5,4] Output: 2 Explanation: The uniqueness array of nums is [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]. The uniqueness array has a median of 2. Therefore, the answer is 2.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105",
        "2323": "A word is considered valid if: It contains a minimum of 3 characters. It contains only digits (0-9), and English letters (uppercase and lowercase). It includes at least one vowel. It includes at least one consonant. You are given a string word. Return true if word is valid, otherwise, return false. Notes: 'a', 'e', 'i', 'o', 'u', and their uppercases are vowels. A consonant is an English letter that is not a vowel.   Example 1: Input: word = \"234Adas\" Output: true Explanation: This word satisfies the conditions. Example 2: Input: word = \"b3\" Output: false Explanation: The length of this word is fewer than 3, and does not have a vowel. Example 3: Input: word = \"a3$e\" Output: false Explanation: This word contains a '$' character and does not have a consonant.   Constraints: 1 <= word.length <= 20 word consists of English uppercase and lowercase letters, digits, '@', '#', and '$'.",
        "2324": "You are given a string word of size n, and an integer k such that k divides n. In one operation, you can pick any two indices i and j, that are divisible by k, then replace the substring of length k starting at i with the substring of length k starting at j. That is, replace the substring word[i..i + k - 1] with the substring word[j..j + k - 1]. Return the minimum number of operations required to make word k-periodic. We say that word is k-periodic if there is some string s of length k such that word can be obtained by concatenating s an arbitrary number of times. For example, if word == “ababab”, then word is 2-periodic for s = \"ab\".   Example 1: Input: word = \"leetcodeleet\", k = 4 Output: 1 Explanation: We can obtain a 4-periodic string by picking i = 4 and j = 0. After this operation, word becomes equal to \"leetleetleet\". Example 2: Input: word = \"leetcoleet\", k = 2 Output: 3 Explanation: We can obtain a 2-periodic string by applying the operations in the table below. i j word 0 2 etetcoleet 4 0 etetetleet 6 0 etetetetet     Constraints: 1 <= n == word.length <= 105 1 <= k <= word.length k divides word.length. word consists only of lowercase English letters.",
        "2325": "You are given a string s, which is known to be a concatenation of anagrams of some string t. Return the minimum possible length of the string t. An anagram is formed by rearranging the letters of a string. For example, \"aab\", \"aba\", and, \"baa\" are anagrams of \"aab\".   Example 1: Input: s = \"abba\" Output: 2 Explanation: One possible string t could be \"ba\". Example 2: Input: s = \"cdef\" Output: 4 Explanation: One possible string t could be \"cdef\", notice that t can be equal to s.   Constraints: 1 <= s.length <= 105 s consist only of lowercase English letters.",
        "2326": "You are given an integer array nums and two integers cost1 and cost2. You are allowed to perform either of the following operations any number of times: Choose an index i from nums and increase nums[i] by 1 for a cost of cost1. Choose two different indices i, j, from nums and increase nums[i] and nums[j] by 1 for a cost of cost2. Return the minimum cost required to make all elements in the array equal. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: nums = [4,1], cost1 = 5, cost2 = 2 Output: 15 Explanation: The following operations can be performed to make the values equal: Increase nums[1] by 1 for a cost of 5. nums becomes [4,2]. Increase nums[1] by 1 for a cost of 5. nums becomes [4,3]. Increase nums[1] by 1 for a cost of 5. nums becomes [4,4]. The total cost is 15. Example 2: Input: nums = [2,3,3,3,5], cost1 = 2, cost2 = 1 Output: 6 Explanation: The following operations can be performed to make the values equal: Increase nums[0] and nums[1] by 1 for a cost of 1. nums becomes [3,4,3,3,5]. Increase nums[0] and nums[2] by 1 for a cost of 1. nums becomes [4,4,4,3,5]. Increase nums[0] and nums[3] by 1 for a cost of 1. nums becomes [5,4,4,4,5]. Increase nums[1] and nums[2] by 1 for a cost of 1. nums becomes [5,5,5,4,5]. Increase nums[3] by 1 for a cost of 2. nums becomes [5,5,5,5,5]. The total cost is 6. Example 3: Input: nums = [3,5,3], cost1 = 1, cost2 = 3 Output: 4 Explanation: The following operations can be performed to make the values equal: Increase nums[0] by 1 for a cost of 1. nums becomes [4,5,3]. Increase nums[0] by 1 for a cost of 1. nums becomes [5,5,3]. Increase nums[2] by 1 for a cost of 1. nums becomes [5,5,4]. Increase nums[2] by 1 for a cost of 1. nums becomes [5,5,5]. The total cost is 4.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 106 1 <= cost1 <= 106 1 <= cost2 <= 106",
        "2327": "You are given a 2D matrix grid of size m x n. You need to check if each cell grid[i][j] is: Equal to the cell below it, i.e. grid[i][j] == grid[i + 1][j] (if it exists). Different from the cell to its right, i.e. grid[i][j] != grid[i][j + 1] (if it exists). Return true if all the cells satisfy these conditions, otherwise, return false.   Example 1: Input: grid = [[1,0,2],[1,0,2]] Output: true Explanation: All the cells in the grid satisfy the conditions. Example 2: Input: grid = [[1,1,1],[0,0,0]] Output: false Explanation: All cells in the first row are equal. Example 3: Input: grid = [[1],[2],[3]] Output: false Explanation: Cells in the first column have different values.   Constraints: 1 <= n, m <= 10 0 <= grid[i][j] <= 9",
        "2328": "You are given a 2D array points and a string s where, points[i] represents the coordinates of point i, and s[i] represents the tag of point i. A valid square is a square centered at the origin (0, 0), has edges parallel to the axes, and does not contain two points with the same tag. Return the maximum number of points contained in a valid square. Note: A point is considered to be inside the square if it lies on or within the square's boundaries. The side length of the square can be zero.   Example 1: Input: points = [[2,2],[-1,-2],[-4,4],[-3,1],[3,-3]], s = \"abdca\" Output: 2 Explanation: The square of side length 4 covers two points points[0] and points[1]. Example 2: Input: points = [[1,1],[-2,-2],[-2,2]], s = \"abb\" Output: 1 Explanation: The square of side length 2 covers one point, which is points[0]. Example 3: Input: points = [[1,1],[-1,-1],[2,-2]], s = \"ccd\" Output: 0 Explanation: It's impossible to make any valid squares centered at the origin such that it covers only one point among points[0] and points[1].   Constraints: 1 <= s.length, points.length <= 105 points[i].length == 2 -109 <= points[i][0], points[i][1] <= 109 s.length == points.length points consists of distinct coordinates. s consists only of lowercase English letters.",
        "2329": "Given a string s, you need to partition it into one or more balanced substrings . For example, if s == \"ababcc\" then (\"abab\", \"c\", \"c\"), (\"ab\", \"abc\", \"c\"), and (\"ababcc\") are all valid partitions, but (\"a\", \"bab\", \"cc\"), (\"aba\", \"bc\", \"c\"), and (\"ab\", \"abcc\") are not. The unbalanced substrings are bolded. Return the minimum number of substrings that you can partition s into. Note: A balanced string is a string where each character in the string occurs the same number of times.   Example 1: Input: s = \"fabccddg\" Output: 3 Explanation: We can partition the string s into 3 substrings in one of the following ways: (\"fab, \"ccdd\", \"g\"), or (\"fabc\", \"cd\", \"dg\"). Example 2: Input: s = \"abababaccddb\" Output: 2 Explanation: We can partition the string s into 2 substrings like so: (\"abab\", \"abaccddb\").   Constraints: 1 <= s.length <= 1000 s consists only of English lowercase letters.",
        "2330": "The powerful array of a non-negative integer x is defined as the shortest sorted array of powers of two that sum up to x. The table below illustrates examples of how the powerful array is determined. It can be proven that the powerful array of x is unique. num Binary Representation powerful array 1 00001 [1] 8 01000 [8] 10 01010 [2, 8] 13 01101 [1, 4, 8] 23 10111 [1, 2, 4, 16] The array big_nums is created by concatenating the powerful arrays for every positive integer i in ascending order: 1, 2, 3, and so on. Thus, big_nums begins as [1, 2, 1, 2, 4, 1, 4, 2, 4, 1, 2, 4, 8, ...]. You are given a 2D integer matrix queries, where for queries[i] = [fromi, toi, modi] you should calculate (big_nums[fromi] * big_nums[fromi + 1] * ... * big_nums[toi]) % modi. Return an integer array answer such that answer[i] is the answer to the ith query.   Example 1: Input: queries = [[1,3,7]] Output: [4] Explanation: There is one query. big_nums[1..3] = [2,1,2]. The product of them is 4. The result is 4 % 7 = 4. Example 2: Input: queries = [[2,5,3],[7,7,4]] Output: [2,2] Explanation: There are two queries. First query: big_nums[2..5] = [1,2,4,1]. The product of them is 8. The result is 8 % 3 = 2. Second query: big_nums[7] = 2. The result is 2 % 4 = 2.   Constraints: 1 <= queries.length <= 500 queries[i].length == 3 0 <= queries[i][0] <= queries[i][1] <= 1015 1 <= queries[i][2] <= 105",
        "2331": "You are given two strings s and t such that every character occurs at most once in s and t is a permutation of s. The permutation difference between s and t is defined as the sum of the absolute difference between the index of the occurrence of each character in s and the index of the occurrence of the same character in t. Return the permutation difference between s and t.   Example 1: Input: s = \"abc\", t = \"bac\" Output: 2 Explanation: For s = \"abc\" and t = \"bac\", the permutation difference of s and t is equal to the sum of: The absolute difference between the index of the occurrence of \"a\" in s and the index of the occurrence of \"a\" in t. The absolute difference between the index of the occurrence of \"b\" in s and the index of the occurrence of \"b\" in t. The absolute difference between the index of the occurrence of \"c\" in s and the index of the occurrence of \"c\" in t. That is, the permutation difference between s and t is equal to |0 - 1| + |1 - 0| + |2 - 2| = 2. Example 2: Input: s = \"abcde\", t = \"edbac\" Output: 12 Explanation: The permutation difference between s and t is equal to |0 - 3| + |1 - 2| + |2 - 4| + |3 - 1| + |4 - 0| = 12.   Constraints: 1 <= s.length <= 26 Each character occurs at most once in s. t is a permutation of s. s consists only of lowercase English letters.",
        "2332": "You are given an m x n matrix grid consisting of positive integers. You can move from a cell in the matrix to any other cell that is either to the bottom or to the right (not necessarily adjacent). The score of a move from a cell with the value c1 to a cell with the value c2 is c2 - c1. You can start at any cell, and you have to make at least one move. Return the maximum total score you can achieve.   Example 1: Input: grid = [[9,5,7,3],[8,9,6,1],[6,7,14,3],[2,5,3,1]] Output: 9 Explanation: We start at the cell (0, 1), and we perform the following moves: - Move from the cell (0, 1) to (2, 1) with a score of 7 - 5 = 2. - Move from the cell (2, 1) to (2, 2) with a score of 14 - 7 = 7. The total score is 2 + 7 = 9. Example 2: Input: grid = [[4,3,2],[3,2,1]] Output: -1 Explanation: We start at the cell (0, 0), and we perform one move: (0, 0) to (0, 1). The score is 3 - 4 = -1.   Constraints: m == grid.length n == grid[i].length 2 <= m, n <= 1000 4 <= m * n <= 105 1 <= grid[i][j] <= 105",
        "2333": "You are given an array nums which is a permutation of [0, 1, 2, ..., n - 1]. The score of any permutation of [0, 1, 2, ..., n - 1] named perm is defined as: score(perm) = |perm[0] - nums[perm[1]]| + |perm[1] - nums[perm[2]]| + ... + |perm[n - 1] - nums[perm[0]]| Return the permutation perm which has the minimum possible score. If multiple permutations exist with this score, return the one that is lexicographically smallest among them.   Example 1: Input: nums = [1,0,2] Output: [0,1,2] Explanation: The lexicographically smallest permutation with minimum cost is [0,1,2]. The cost of this permutation is |0 - 0| + |1 - 2| + |2 - 1| = 2. Example 2: Input: nums = [0,2,1] Output: [0,2,1] Explanation: The lexicographically smallest permutation with minimum cost is [0,2,1]. The cost of this permutation is |0 - 1| + |2 - 2| + |1 - 0| = 2.   Constraints: 2 <= n == nums.length <= 14 nums is a permutation of [0, 1, 2, ..., n - 1].",
        "2334": "An array is considered special if every pair of its adjacent elements contains two numbers with different parity. You are given an array of integers nums. Return true if nums is a special array, otherwise, return false.   Example 1: Input: nums = [1] Output: true Explanation: There is only one element. So the answer is true. Example 2: Input: nums = [2,1,4] Output: true Explanation: There is only two pairs: (2,1) and (1,4), and both of them contain numbers with different parity. So the answer is true. Example 3: Input: nums = [4,3,1,6] Output: false Explanation: nums[1] and nums[2] are both odd. So the answer is false.   Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100",
        "2335": "An array is considered special if every pair of its adjacent elements contains two numbers with different parity. You are given an array of integer nums and a 2D integer matrix queries, where for queries[i] = [fromi, toi] your task is to check that subarray nums[fromi..toi] is special or not. Return an array of booleans answer such that answer[i] is true if nums[fromi..toi] is special.   Example 1: Input: nums = [3,4,1,2,6], queries = [[0,4]] Output: [false] Explanation: The subarray is [3,4,1,2,6]. 2 and 6 are both even. Example 2: Input: nums = [4,3,1,6], queries = [[0,2],[2,3]] Output: [false,true] Explanation: The subarray is [4,3,1]. 3 and 1 are both odd. So the answer to this query is false. The subarray is [1,6]. There is only one pair: (1,6) and it contains numbers with different parity. So the answer to this query is true.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105 1 <= queries.length <= 105 queries[i].length == 2 0 <= queries[i][0] <= queries[i][1] <= nums.length - 1",
        "2336": "You are given an array nums consisting of positive integers where all integers have the same number of digits. The digit difference between two integers is the count of different digits that are in the same position in the two integers. Return the sum of the digit differences between all pairs of integers in nums.   Example 1: Input: nums = [13,23,12] Output: 4 Explanation: We have the following: - The digit difference between 13 and 23 is 1. - The digit difference between 13 and 12 is 1. - The digit difference between 23 and 12 is 2. So the total sum of digit differences between all pairs of integers is 1 + 1 + 2 = 4. Example 2: Input: nums = [10,10,10,10] Output: 0 Explanation: All the integers in the array are the same. So the total sum of digit differences between all pairs of integers will be 0.   Constraints: 2 <= nums.length <= 105 1 <= nums[i] < 109 All integers in nums have the same number of digits.",
        "2337": "You are given a non-negative integer k. There exists a staircase with an infinite number of stairs, with the lowest stair numbered 0. Alice has an integer jump, with an initial value of 0. She starts on stair 1 and wants to reach stair k using any number of operations. If she is on stair i, in one operation she can: Go down to stair i - 1. This operation cannot be used consecutively or on stair 0. Go up to stair i + 2jump. And then, jump becomes jump + 1. Return the total number of ways Alice can reach stair k. Note that it is possible that Alice reaches the stair k, and performs some operations to reach the stair k again.   Example 1: Input: k = 0 Output: 2 Explanation: The 2 possible ways of reaching stair 0 are: Alice starts at stair 1. Using an operation of the first type, she goes down 1 stair to reach stair 0. Alice starts at stair 1. Using an operation of the first type, she goes down 1 stair to reach stair 0. Using an operation of the second type, she goes up 20 stairs to reach stair 1. Using an operation of the first type, she goes down 1 stair to reach stair 0. Example 2: Input: k = 1 Output: 4 Explanation: The 4 possible ways of reaching stair 1 are: Alice starts at stair 1. Alice is at stair 1. Alice starts at stair 1. Using an operation of the first type, she goes down 1 stair to reach stair 0. Using an operation of the second type, she goes up 20 stairs to reach stair 1. Alice starts at stair 1. Using an operation of the second type, she goes up 20 stairs to reach stair 2. Using an operation of the first type, she goes down 1 stair to reach stair 1. Alice starts at stair 1. Using an operation of the first type, she goes down 1 stair to reach stair 0. Using an operation of the second type, she goes up 20 stairs to reach stair 1. Using an operation of the first type, she goes down 1 stair to reach stair 0. Using an operation of the second type, she goes up 21 stairs to reach stair 2. Using an operation of the first type, she goes down 1 stair to reach stair 1.   Constraints: 0 <= k <= 109",
        "2338": "You are given an array nums, where each number in the array appears either once or twice. Return the bitwise XOR of all the numbers that appear twice in the array, or 0 if no number appears twice.   Example 1: Input: nums = [1,2,1,3] Output: 1 Explanation: The only number that appears twice in nums is 1. Example 2: Input: nums = [1,2,3] Output: 0 Explanation: No number appears twice in nums. Example 3: Input: nums = [1,2,2,1] Output: 3 Explanation: Numbers 1 and 2 appeared twice. 1 XOR 2 == 3.   Constraints: 1 <= nums.length <= 50 1 <= nums[i] <= 50 Each number in nums appears either once or twice.",
        "2339": "You are given an integer array nums, an integer array queries, and an integer x. For each queries[i], you need to find the index of the queries[i]th occurrence of x in the nums array. If there are fewer than queries[i] occurrences of x, the answer should be -1 for that query. Return an integer array answer containing the answers to all queries.   Example 1: Input: nums = [1,3,1,7], queries = [1,3,2,4], x = 1 Output: [0,-1,2,-1] Explanation: For the 1st query, the first occurrence of 1 is at index 0. For the 2nd query, there are only two occurrences of 1 in nums, so the answer is -1. For the 3rd query, the second occurrence of 1 is at index 2. For the 4th query, there are only two occurrences of 1 in nums, so the answer is -1. Example 2: Input: nums = [1,2,3], queries = [10], x = 5 Output: [-1] Explanation: For the 1st query, 5 doesn't exist in nums, so the answer is -1.   Constraints: 1 <= nums.length, queries.length <= 105 1 <= queries[i] <= 105 1 <= nums[i], x <= 104",
        "2340": "You are given an integer limit and a 2D array queries of size n x 2. There are limit + 1 balls with distinct labels in the range [0, limit]. Initially, all balls are uncolored. For every query in queries that is of the form [x, y], you mark ball x with the color y. After each query, you need to find the number of distinct colors among the balls. Return an array result of length n, where result[i] denotes the number of distinct colors after ith query. Note that when answering a query, lack of a color will not be considered as a color.   Example 1: Input: limit = 4, queries = [[1,4],[2,5],[1,3],[3,4]] Output: [1,2,2,3] Explanation: After query 0, ball 1 has color 4. After query 1, ball 1 has color 4, and ball 2 has color 5. After query 2, ball 1 has color 3, and ball 2 has color 5. After query 3, ball 1 has color 3, ball 2 has color 5, and ball 3 has color 4. Example 2: Input: limit = 4, queries = [[0,1],[1,2],[2,2],[3,4],[4,5]] Output: [1,2,2,3,4] Explanation: After query 0, ball 0 has color 1. After query 1, ball 0 has color 1, and ball 1 has color 2. After query 2, ball 0 has color 1, and balls 1 and 2 have color 2. After query 3, ball 0 has color 1, balls 1 and 2 have color 2, and ball 3 has color 4. After query 4, ball 0 has color 1, balls 1 and 2 have color 2, ball 3 has color 4, and ball 4 has color 5.   Constraints: 1 <= limit <= 109 1 <= n == queries.length <= 105 queries[i].length == 2 0 <= queries[i][0] <= limit 1 <= queries[i][1] <= 109",
        "2341": "There exists an infinite number line, with its origin at 0 and extending towards the positive x-axis. You are given a 2D array queries, which contains two types of queries: For a query of type 1, queries[i] = [1, x]. Build an obstacle at distance x from the origin. It is guaranteed that there is no obstacle at distance x when the query is asked. For a query of type 2, queries[i] = [2, x, sz]. Check if it is possible to place a block of size sz anywhere in the range [0, x] on the line, such that the block entirely lies in the range [0, x]. A block cannot be placed if it intersects with any obstacle, but it may touch it. Note that you do not actually place the block. Queries are separate. Return a boolean array results, where results[i] is true if you can place the block specified in the ith query of type 2, and false otherwise.   Example 1: Input: queries = [[1,2],[2,3,3],[2,3,1],[2,2,2]] Output: [false,true,true] Explanation: For query 0, place an obstacle at x = 2. A block of size at most 2 can be placed before x = 3. Example 2: Input: queries = [[1,7],[2,7,6],[1,2],[2,7,5],[2,7,6]] Output: [true,true,false] Explanation: Place an obstacle at x = 7 for query 0. A block of size at most 7 can be placed before x = 7. Place an obstacle at x = 2 for query 2. Now, a block of size at most 5 can be placed before x = 7, and a block of size at most 2 before x = 2.   Constraints: 1 <= queries.length <= 15 * 104 2 <= queries[i].length <= 3 1 <= queries[i][0] <= 2 1 <= x, sz <= min(5 * 104, 3 * queries.length) The input is generated such that for queries of type 1, no obstacle exists at distance x when the query is asked. The input is generated such that there is at least one query of type 2.",
        "2342": "You are given 2 integer arrays nums1 and nums2 of lengths n and m respectively. You are also given a positive integer k. A pair (i, j) is called good if nums1[i] is divisible by nums2[j] * k (0 <= i <= n - 1, 0 <= j <= m - 1). Return the total number of good pairs.   Example 1: Input: nums1 = [1,3,4], nums2 = [1,3,4], k = 1 Output: 5 Explanation: The 5 good pairs are (0, 0), (1, 0), (1, 1), (2, 0), and (2, 2). Example 2: Input: nums1 = [1,2,4,12], nums2 = [2,4], k = 3 Output: 2 Explanation: The 2 good pairs are (3, 0) and (3, 1).   Constraints: 1 <= n, m <= 50 1 <= nums1[i], nums2[j] <= 50 1 <= k <= 50",
        "2343": "Given a string word, compress it using the following algorithm: Begin with an empty string comp. While word is not empty, use the following operation: Remove a maximum length prefix of word made of a single character c repeating at most 9 times. Append the length of the prefix followed by c to comp. Return the string comp.   Example 1: Input: word = \"abcde\" Output: \"1a1b1c1d1e\" Explanation: Initially, comp = \"\". Apply the operation 5 times, choosing \"a\", \"b\", \"c\", \"d\", and \"e\" as the prefix in each operation. For each prefix, append \"1\" followed by the character to comp. Example 2: Input: word = \"aaaaaaaaaaaaaabb\" Output: \"9a5a2b\" Explanation: Initially, comp = \"\". Apply the operation 3 times, choosing \"aaaaaaaaa\", \"aaaaa\", and \"bb\" as the prefix in each operation. For prefix \"aaaaaaaaa\", append \"9\" followed by \"a\" to comp. For prefix \"aaaaa\", append \"5\" followed by \"a\" to comp. For prefix \"bb\", append \"2\" followed by \"b\" to comp.   Constraints: 1 <= word.length <= 2 * 105 word consists only of lowercase English letters.",
        "2344": "You are given 2 integer arrays nums1 and nums2 of lengths n and m respectively. You are also given a positive integer k. A pair (i, j) is called good if nums1[i] is divisible by nums2[j] * k (0 <= i <= n - 1, 0 <= j <= m - 1). Return the total number of good pairs.   Example 1: Input: nums1 = [1,3,4], nums2 = [1,3,4], k = 1 Output: 5 Explanation: The 5 good pairs are (0, 0), (1, 0), (1, 1), (2, 0), and (2, 2). Example 2: Input: nums1 = [1,2,4,12], nums2 = [2,4], k = 3 Output: 2 Explanation: The 2 good pairs are (3, 0) and (3, 1).   Constraints: 1 <= n, m <= 105 1 <= nums1[i], nums2[j] <= 106 1 <= k <= 103",
        "2345": "You are given an array nums consisting of integers. You are also given a 2D array queries, where queries[i] = [posi, xi]. For query i, we first set nums[posi] equal to xi, then we calculate the answer to query i which is the maximum sum of a subsequence of nums where no two adjacent elements are selected. Return the sum of the answers to all queries. Since the final answer may be very large, return it modulo 109 + 7. A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.   Example 1: Input: nums = [3,5,9], queries = [[1,-2],[0,-3]] Output: 21 Explanation: After the 1st query, nums = [3,-2,9] and the maximum sum of a subsequence with non-adjacent elements is 3 + 9 = 12. After the 2nd query, nums = [-3,-2,9] and the maximum sum of a subsequence with non-adjacent elements is 9. Example 2: Input: nums = [0,-1], queries = [[0,-5]] Output: 0 Explanation: After the 1st query, nums = [-5,-1] and the maximum sum of a subsequence with non-adjacent elements is 0 (choosing an empty subsequence).   Constraints: 1 <= nums.length <= 5 * 104 -105 <= nums[i] <= 105 1 <= queries.length <= 5 * 104 queries[i] == [posi, xi] 0 <= posi <= nums.length - 1 -105 <= xi <= 105",
        "2346": "You are given a string s. Simulate events at each second i: If s[i] == 'E', a person enters the waiting room and takes one of the chairs in it. If s[i] == 'L', a person leaves the waiting room, freeing up a chair. Return the minimum number of chairs needed so that a chair is available for every person who enters the waiting room given that it is initially empty.   Example 1: Input: s = \"EEEEEEE\" Output: 7 Explanation: After each second, a person enters the waiting room and no person leaves it. Therefore, a minimum of 7 chairs is needed. Example 2: Input: s = \"ELELEEL\" Output: 2 Explanation: Let's consider that there are 2 chairs in the waiting room. The table below shows the state of the waiting room at each second. Second Event People in the Waiting Room Available Chairs 0 Enter 1 1 1 Leave 0 2 2 Enter 1 1 3 Leave 0 2 4 Enter 1 1 5 Enter 2 0 6 Leave 1 1 Example 3: Input: s = \"ELEELEELLL\" Output: 3 Explanation: Let's consider that there are 3 chairs in the waiting room. The table below shows the state of the waiting room at each second. Second Event People in the Waiting Room Available Chairs 0 Enter 1 2 1 Leave 0 3 2 Enter 1 2 3 Enter 2 1 4 Leave 1 2 5 Enter 2 1 6 Enter 3 0 7 Leave 2 1 8 Leave 1 2 9 Leave 0 3   Constraints: 1 <= s.length <= 50 s consists only of the letters 'E' and 'L'. s represents a valid sequence of entries and exits.",
        "2347": "You are given a positive integer days representing the total number of days an employee is available for work (starting from day 1). You are also given a 2D array meetings of size n where, meetings[i] = [start_i, end_i] represents the starting and ending days of meeting i (inclusive). Return the count of days when the employee is available for work but no meetings are scheduled. Note: The meetings may overlap.   Example 1: Input: days = 10, meetings = [[5,7],[1,3],[9,10]] Output: 2 Explanation: There is no meeting scheduled on the 4th and 8th days. Example 2: Input: days = 5, meetings = [[2,4],[1,3]] Output: 1 Explanation: There is no meeting scheduled on the 5th day. Example 3: Input: days = 6, meetings = [[1,6]] Output: 0 Explanation: Meetings are scheduled for all working days.   Constraints: 1 <= days <= 109 1 <= meetings.length <= 105 meetings[i].length == 2 1 <= meetings[i][0] <= meetings[i][1] <= days",
        "2348": "You are given a string s. It may contain any number of '*' characters. Your task is to remove all '*' characters. While there is a '*', do the following operation: Delete the leftmost '*' and the smallest non-'*' character to its left. If there are several smallest characters, you can delete any of them. Return the lexicographically smallest resulting string after removing all '*' characters.   Example 1: Input: s = \"aaba*\" Output: \"aab\" Explanation: We should delete one of the 'a' characters with '*'. If we choose s[3], s becomes the lexicographically smallest. Example 2: Input: s = \"abc\" Output: \"abc\" Explanation: There is no '*' in the string.   Constraints: 1 <= s.length <= 105 s consists only of lowercase English letters and '*'. The input is generated such that it is possible to delete all '*' characters.",
        "2349": "You are given a string s. Your task is to remove all digits by doing this operation repeatedly: Delete the first digit and the closest non-digit character to its left. Return the resulting string after removing all digits.   Example 1: Input: s = \"abc\" Output: \"abc\" Explanation: There is no digit in the string. Example 2: Input: s = \"cb34\" Output: \"\" Explanation: First, we apply the operation on s[2], and s becomes \"c4\". Then we apply the operation on s[1], and s becomes \"\".   Constraints: 1 <= s.length <= 100 s consists only of lowercase English letters and digits. The input is generated such that it is possible to delete all digits.",
        "2350": "A competition consists of n players numbered from 0 to n - 1. You are given an integer array skills of size n and a positive integer k, where skills[i] is the skill level of player i. All integers in skills are unique. All players are standing in a queue in order from player 0 to player n - 1. The competition process is as follows: The first two players in the queue play a game, and the player with the higher skill level wins. After the game, the winner stays at the beginning of the queue, and the loser goes to the end of it. The winner of the competition is the first player who wins k games in a row. Return the initial index of the winning player.   Example 1: Input: skills = [4,2,6,3,9], k = 2 Output: 2 Explanation: Initially, the queue of players is [0,1,2,3,4]. The following process happens: Players 0 and 1 play a game, since the skill of player 0 is higher than that of player 1, player 0 wins. The resulting queue is [0,2,3,4,1]. Players 0 and 2 play a game, since the skill of player 2 is higher than that of player 0, player 2 wins. The resulting queue is [2,3,4,1,0]. Players 2 and 3 play a game, since the skill of player 2 is higher than that of player 3, player 2 wins. The resulting queue is [2,4,1,0,3]. Player 2 won k = 2 games in a row, so the winner is player 2. Example 2: Input: skills = [2,5,4], k = 3 Output: 1 Explanation: Initially, the queue of players is [0,1,2]. The following process happens: Players 0 and 1 play a game, since the skill of player 1 is higher than that of player 0, player 1 wins. The resulting queue is [1,2,0]. Players 1 and 2 play a game, since the skill of player 1 is higher than that of player 2, player 1 wins. The resulting queue is [1,0,2]. Players 1 and 0 play a game, since the skill of player 1 is higher than that of player 0, player 1 wins. The resulting queue is [1,2,0]. Player 1 won k = 3 games in a row, so the winner is player 1.   Constraints: n == skills.length 2 <= n <= 105 1 <= k <= 109 1 <= skills[i] <= 106 All integers in skills are unique.",
        "2351": "You are given an integer array nums and a non-negative integer k. A sequence of integers seq is called good if there are at most k indices i in the range [0, seq.length - 2] such that seq[i] != seq[i + 1]. Return the maximum possible length of a good subsequence of nums.   Example 1: Input: nums = [1,2,1,1,3], k = 2 Output: 4 Explanation: The maximum length subsequence is [1,2,1,1,3]. Example 2: Input: nums = [1,2,3,4,5,1], k = 0 Output: 2 Explanation: The maximum length subsequence is [1,2,3,4,5,1].   Constraints: 1 <= nums.length <= 500 1 <= nums[i] <= 109 0 <= k <= min(nums.length, 25)",
        "2352": "You are given an integer array nums and a non-negative integer k. A sequence of integers seq is called good if there are at most k indices i in the range [0, seq.length - 2] such that seq[i] != seq[i + 1]. Return the maximum possible length of a good subsequence of nums.   Example 1: Input: nums = [1,2,1,1,3], k = 2 Output: 4 Explanation: The maximum length subsequence is [1,2,1,1,3]. Example 2: Input: nums = [1,2,3,4,5,1], k = 0 Output: 2 Explanation: The maximum length subsequence is [1,2,3,4,5,1].   Constraints: 1 <= nums.length <= 5 * 103 1 <= nums[i] <= 109 0 <= k <= min(50, nums.length)",
        "2353": "You are given two positive integers n and k. There are n children numbered from 0 to n - 1 standing in a queue in order from left to right. Initially, child 0 holds a ball and the direction of passing the ball is towards the right direction. After each second, the child holding the ball passes it to the child next to them. Once the ball reaches either end of the line, i.e. child 0 or child n - 1, the direction of passing is reversed. Return the number of the child who receives the ball after k seconds.   Example 1: Input: n = 3, k = 5 Output: 1 Explanation: Time elapsed Children 0 [0, 1, 2] 1 [0, 1, 2] 2 [0, 1, 2] 3 [0, 1, 2] 4 [0, 1, 2] 5 [0, 1, 2] Example 2: Input: n = 5, k = 6 Output: 2 Explanation: Time elapsed Children 0 [0, 1, 2, 3, 4] 1 [0, 1, 2, 3, 4] 2 [0, 1, 2, 3, 4] 3 [0, 1, 2, 3, 4] 4 [0, 1, 2, 3, 4] 5 [0, 1, 2, 3, 4] 6 [0, 1, 2, 3, 4] Example 3: Input: n = 4, k = 2 Output: 2 Explanation: Time elapsed Children 0 [0, 1, 2, 3] 1 [0, 1, 2, 3] 2 [0, 1, 2, 3]   Constraints: 2 <= n <= 50 1 <= k <= 50   Note: This question is the same as 2582: Pass the Pillow.",
        "2354": "You are given two integers n and k. Initially, you start with an array a of n integers where a[i] = 1 for all 0 <= i <= n - 1. After each second, you simultaneously update each element to be the sum of all its preceding elements plus the element itself. For example, after one second, a[0] remains the same, a[1] becomes a[0] + a[1], a[2] becomes a[0] + a[1] + a[2], and so on. Return the value of a[n - 1] after k seconds. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: n = 4, k = 5 Output: 56 Explanation: Second State After 0 [1,1,1,1] 1 [1,2,3,4] 2 [1,3,6,10] 3 [1,4,10,20] 4 [1,5,15,35] 5 [1,6,21,56] Example 2: Input: n = 5, k = 3 Output: 35 Explanation: Second State After 0 [1,1,1,1,1] 1 [1,2,3,4,5] 2 [1,3,6,10,15] 3 [1,4,10,20,35]   Constraints: 1 <= n, k <= 1000",
        "2355": "You are given an integer array rewardValues of length n, representing the values of rewards. Initially, your total reward x is 0, and all indices are unmarked. You are allowed to perform the following operation any number of times: Choose an unmarked index i from the range [0, n - 1]. If rewardValues[i] is greater than your current total reward x, then add rewardValues[i] to x (i.e., x = x + rewardValues[i]), and mark the index i. Return an integer denoting the maximum total reward you can collect by performing the operations optimally.   Example 1: Input: rewardValues = [1,1,3,3] Output: 4 Explanation: During the operations, we can choose to mark the indices 0 and 2 in order, and the total reward will be 4, which is the maximum. Example 2: Input: rewardValues = [1,6,4,3,2] Output: 11 Explanation: Mark the indices 0, 2, and 1 in order. The total reward will then be 11, which is the maximum.   Constraints: 1 <= rewardValues.length <= 2000 1 <= rewardValues[i] <= 2000",
        "2356": "You are given an integer array rewardValues of length n, representing the values of rewards. Initially, your total reward x is 0, and all indices are unmarked. You are allowed to perform the following operation any number of times: Choose an unmarked index i from the range [0, n - 1]. If rewardValues[i] is greater than your current total reward x, then add rewardValues[i] to x (i.e., x = x + rewardValues[i]), and mark the index i. Return an integer denoting the maximum total reward you can collect by performing the operations optimally.   Example 1: Input: rewardValues = [1,1,3,3] Output: 4 Explanation: During the operations, we can choose to mark the indices 0 and 2 in order, and the total reward will be 4, which is the maximum. Example 2: Input: rewardValues = [1,6,4,3,2] Output: 11 Explanation: Mark the indices 0, 2, and 1 in order. The total reward will then be 11, which is the maximum.   Constraints: 1 <= rewardValues.length <= 5 * 104 1 <= rewardValues[i] <= 5 * 104",
        "2357": "Given an integer array hours representing times in hours, return an integer denoting the number of pairs i, j where i < j and hours[i] + hours[j] forms a complete day. A complete day is defined as a time duration that is an exact multiple of 24 hours. For example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours, and so on.   Example 1: Input: hours = [12,12,30,24,24] Output: 2 Explanation: The pairs of indices that form a complete day are (0, 1) and (3, 4). Example 2: Input: hours = [72,48,24,3] Output: 3 Explanation: The pairs of indices that form a complete day are (0, 1), (0, 2), and (1, 2).   Constraints: 1 <= hours.length <= 100 1 <= hours[i] <= 109",
        "2358": "Given an integer array hours representing times in hours, return an integer denoting the number of pairs i, j where i < j and hours[i] + hours[j] forms a complete day. A complete day is defined as a time duration that is an exact multiple of 24 hours. For example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours, and so on.   Example 1: Input: hours = [12,12,30,24,24] Output: 2 Explanation: The pairs of indices that form a complete day are (0, 1) and (3, 4). Example 2: Input: hours = [72,48,24,3] Output: 3 Explanation: The pairs of indices that form a complete day are (0, 1), (0, 2), and (1, 2).   Constraints: 1 <= hours.length <= 5 * 105 1 <= hours[i] <= 109",
        "2359": "A magician has various spells. You are given an array power, where each element represents the damage of a spell. Multiple spells can have the same damage value. It is a known fact that if a magician decides to cast a spell with a damage of power[i], they cannot cast any spell with a damage of power[i] - 2, power[i] - 1, power[i] + 1, or power[i] + 2. Each spell can be cast only once. Return the maximum possible total damage that a magician can cast.   Example 1: Input: power = [1,1,3,4] Output: 6 Explanation: The maximum possible damage of 6 is produced by casting spells 0, 1, 3 with damage 1, 1, 4. Example 2: Input: power = [7,1,6,6] Output: 13 Explanation: The maximum possible damage of 13 is produced by casting spells 1, 2, 3 with damage 1, 6, 6.   Constraints: 1 <= power.length <= 105 1 <= power[i] <= 109",
        "2360": "A peak in an array arr is an element that is greater than its previous and next element in arr. You are given an integer array nums and a 2D integer array queries. You have to process queries of two types: queries[i] = [1, li, ri], determine the count of peak elements in the subarray nums[li..ri]. queries[i] = [2, indexi, vali], change nums[indexi] to vali. Return an array answer containing the results of the queries of the first type in order. Notes: The first and the last element of an array or a subarray cannot be a peak.   Example 1: Input: nums = [3,1,4,2,5], queries = [[2,3,4],[1,0,4]] Output: [0] Explanation: First query: We change nums[3] to 4 and nums becomes [3,1,4,4,5]. Second query: The number of peaks in the [3,1,4,4,5] is 0. Example 2: Input: nums = [4,1,4,2,1,5], queries = [[2,2,4],[1,0,2],[1,0,4]] Output: [0,1] Explanation: First query: nums[2] should become 4, but it is already set to 4. Second query: The number of peaks in the [4,1,4] is 0. Third query: The second 4 is a peak in the [4,1,4,2,1].   Constraints: 3 <= nums.length <= 105 1 <= nums[i] <= 105 1 <= queries.length <= 105 queries[i][0] == 1 or queries[i][0] == 2 For all i that: queries[i][0] == 1: 0 <= queries[i][1] <= queries[i][2] <= nums.length - 1 queries[i][0] == 2: 0 <= queries[i][1] <= nums.length - 1, 1 <= queries[i][2] <= 105",
        "2361": "You are given an integer array nums. In one operation, you can add or subtract 1 from any element of nums. Return the minimum number of operations to make all elements of nums divisible by 3.   Example 1: Input: nums = [1,2,3,4] Output: 3 Explanation: All array elements can be made divisible by 3 using 3 operations: Subtract 1 from 1. Add 1 to 2. Subtract 1 from 4. Example 2: Input: nums = [3,6,9] Output: 0   Constraints: 1 <= nums.length <= 50 1 <= nums[i] <= 50",
        "2362": "You are given a binary array nums. You can do the following operation on the array any number of times (possibly zero): Choose any 3 consecutive elements from the array and flip all of them. Flipping an element means changing its value from 0 to 1, and from 1 to 0. Return the minimum number of operations required to make all elements in nums equal to 1. If it is impossible, return -1.   Example 1: Input: nums = [0,1,1,1,0,0] Output: 3 Explanation: We can do the following operations: Choose the elements at indices 0, 1 and 2. The resulting array is nums = [1,0,0,1,0,0]. Choose the elements at indices 1, 2 and 3. The resulting array is nums = [1,1,1,0,0,0]. Choose the elements at indices 3, 4 and 5. The resulting array is nums = [1,1,1,1,1,1]. Example 2: Input: nums = [0,1,1,1] Output: -1 Explanation: It is impossible to make all elements equal to 1.   Constraints: 3 <= nums.length <= 105 0 <= nums[i] <= 1",
        "2363": "You are given a binary array nums. You can do the following operation on the array any number of times (possibly zero): Choose any index i from the array and flip all the elements from index i to the end of the array. Flipping an element means changing its value from 0 to 1, and from 1 to 0. Return the minimum number of operations required to make all elements in nums equal to 1.   Example 1: Input: nums = [0,1,1,0,1] Output: 4 Explanation: We can do the following operations: Choose the index i = 1. The resulting array will be nums = [0,0,0,1,0]. Choose the index i = 0. The resulting array will be nums = [1,1,1,0,1]. Choose the index i = 4. The resulting array will be nums = [1,1,1,0,0]. Choose the index i = 3. The resulting array will be nums = [1,1,1,1,1]. Example 2: Input: nums = [1,0,0,0] Output: 1 Explanation: We can do the following operation: Choose the index i = 1. The resulting array will be nums = [1,1,1,1].   Constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 1",
        "2364": "You are given an integer n and a 2D array requirements, where requirements[i] = [endi, cnti] represents the end index and the inversion count of each requirement. A pair of indices (i, j) from an integer array nums is called an inversion if: i < j and nums[i] > nums[j] Return the number of permutations perm of [0, 1, 2, ..., n - 1] such that for all requirements[i], perm[0..endi] has exactly cnti inversions. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: n = 3, requirements = [[2,2],[0,0]] Output: 2 Explanation: The two permutations are: [2, 0, 1] Prefix [2, 0, 1] has inversions (0, 1) and (0, 2). Prefix [2] has 0 inversions. [1, 2, 0] Prefix [1, 2, 0] has inversions (0, 2) and (1, 2). Prefix [1] has 0 inversions. Example 2: Input: n = 3, requirements = [[2,2],[1,1],[0,0]] Output: 1 Explanation: The only satisfying permutation is [2, 0, 1]: Prefix [2, 0, 1] has inversions (0, 1) and (0, 2). Prefix [2, 0] has an inversion (0, 1). Prefix [2] has 0 inversions. Example 3: Input: n = 2, requirements = [[0,0],[1,0]] Output: 1 Explanation: The only satisfying permutation is [0, 1]: Prefix [0] has 0 inversions. Prefix [0, 1] has an inversion (0, 1).   Constraints: 2 <= n <= 300 1 <= requirements.length <= n requirements[i] = [endi, cnti] 0 <= endi <= n - 1 0 <= cnti <= 400 The input is generated such that there is at least one i such that endi == n - 1. The input is generated such that all endi are unique.",
        "2365": "You have an array of floating point numbers averages which is initially empty. You are given an array nums of n integers where n is even. You repeat the following procedure n / 2 times: Remove the smallest element, minElement, and the largest element maxElement, from nums. Add (minElement + maxElement) / 2 to averages. Return the minimum element in averages.   Example 1: Input: nums = [7,8,3,4,15,13,4,1] Output: 5.5 Explanation: step nums averages 0 [7,8,3,4,15,13,4,1] [] 1 [7,8,3,4,13,4] [8] 2 [7,8,4,4] [8,8] 3 [7,4] [8,8,6] 4 [] [8,8,6,5.5] The smallest element of averages, 5.5, is returned. Example 2: Input: nums = [1,9,8,3,10,5] Output: 5.5 Explanation: step nums averages 0 [1,9,8,3,10,5] [] 1 [9,8,3,5] [5.5] 2 [8,5] [5.5,6] 3 [] [5.5,6,6.5] Example 3: Input: nums = [1,2,3,7,8,9] Output: 5.0 Explanation: step nums averages 0 [1,2,3,7,8,9] [] 1 [2,3,7,8] [5] 2 [3,7] [5,5] 3 [] [5,5,5]   Constraints: 2 <= n == nums.length <= 50 n is even. 1 <= nums[i] <= 50",
        "2366": "You are given a 2D binary array grid. Find a rectangle with horizontal and vertical sides with the smallest area, such that all the 1's in grid lie inside this rectangle. Return the minimum possible area of the rectangle.   Example 1: Input: grid = [[0,1,0],[1,0,1]] Output: 6 Explanation: The smallest rectangle has a height of 2 and a width of 3, so it has an area of 2 * 3 = 6. Example 2: Input: grid = [[1,0],[0,0]] Output: 1 Explanation: The smallest rectangle has both height and width 1, so its area is 1 * 1 = 1.   Constraints: 1 <= grid.length, grid[i].length <= 1000 grid[i][j] is either 0 or 1. The input is generated such that there is at least one 1 in grid.",
        "2367": "You are given an integer array nums with length n. The cost of a subarray nums[l..r], where 0 <= l <= r < n, is defined as: cost(l, r) = nums[l] - nums[l + 1] + ... + nums[r] * (−1)r − l Your task is to split nums into subarrays such that the total cost of the subarrays is maximized, ensuring each element belongs to exactly one subarray. Formally, if nums is split into k subarrays, where k > 1, at indices i1, i2, ..., ik − 1, where 0 <= i1 < i2 < ... < ik - 1 < n - 1, then the total cost will be: cost(0, i1) + cost(i1 + 1, i2) + ... + cost(ik − 1 + 1, n − 1) Return an integer denoting the maximum total cost of the subarrays after splitting the array optimally. Note: If nums is not split into subarrays, i.e. k = 1, the total cost is simply cost(0, n - 1).   Example 1: Input: nums = [1,-2,3,4] Output: 10 Explanation: One way to maximize the total cost is by splitting [1, -2, 3, 4] into subarrays [1, -2, 3] and [4]. The total cost will be (1 + 2 + 3) + 4 = 10. Example 2: Input: nums = [1,-1,1,-1] Output: 4 Explanation: One way to maximize the total cost is by splitting [1, -1, 1, -1] into subarrays [1, -1] and [1, -1]. The total cost will be (1 + 1) + (1 + 1) = 4. Example 3: Input: nums = [0] Output: 0 Explanation: We cannot split the array further, so the answer is 0. Example 4: Input: nums = [1,-1] Output: 2 Explanation: Selecting the whole array gives a total cost of 1 + 1 = 2, which is the maximum.   Constraints: 1 <= nums.length <= 105 -109 <= nums[i] <= 109",
        "2368": "You are given a 2D binary array grid. You need to find 3 non-overlapping rectangles having non-zero areas with horizontal and vertical sides such that all the 1's in grid lie inside these rectangles. Return the minimum possible sum of the area of these rectangles. Note that the rectangles are allowed to touch.   Example 1: Input: grid = [[1,0,1],[1,1,1]] Output: 5 Explanation: The 1's at (0, 0) and (1, 0) are covered by a rectangle of area 2. The 1's at (0, 2) and (1, 2) are covered by a rectangle of area 2. The 1 at (1, 1) is covered by a rectangle of area 1. Example 2: Input: grid = [[1,0,1,0],[0,1,0,1]] Output: 5 Explanation: The 1's at (0, 0) and (0, 2) are covered by a rectangle of area 3. The 1 at (1, 1) is covered by a rectangle of area 1. The 1 at (1, 3) is covered by a rectangle of area 1.   Constraints: 1 <= grid.length, grid[i].length <= 30 grid[i][j] is either 0 or 1. The input is generated such that there are at least three 1's in grid.",
        "2369": "You are given two integers red and blue representing the count of red and blue colored balls. You have to arrange these balls to form a triangle such that the 1st row will have 1 ball, the 2nd row will have 2 balls, the 3rd row will have 3 balls, and so on. All the balls in a particular row should be the same color, and adjacent rows should have different colors. Return the maximum height of the triangle that can be achieved.   Example 1: Input: red = 2, blue = 4 Output: 3 Explanation: The only possible arrangement is shown above. Example 2: Input: red = 2, blue = 1 Output: 2 Explanation:  The only possible arrangement is shown above. Example 3: Input: red = 1, blue = 1 Output: 1 Example 4: Input: red = 10, blue = 1 Output: 2 Explanation:  The only possible arrangement is shown above.   Constraints: 1 <= red, blue <= 100",
        "2370": "You are given an integer array nums and a positive integer k. A subsequence sub of nums with length x is called valid if it satisfies: (sub[0] + sub[1]) % k == (sub[1] + sub[2]) % k == ... == (sub[x - 2] + sub[x - 1]) % k. Return the length of the longest valid subsequence of nums.   Example 1: Input: nums = [1,2,3,4,5], k = 2 Output: 5 Explanation: The longest valid subsequence is [1, 2, 3, 4, 5]. Example 2: Input: nums = [1,4,2,3,1,4], k = 3 Output: 4 Explanation: The longest valid subsequence is [1, 4, 1, 4].   Constraints: 2 <= nums.length <= 103 1 <= nums[i] <= 107 1 <= k <= 103",
        "2371": "There is a circle of red and blue tiles. You are given an array of integers colors. The color of tile i is represented by colors[i]: colors[i] == 0 means that tile i is red. colors[i] == 1 means that tile i is blue. Every 3 contiguous tiles in the circle with alternating colors (the middle tile has a different color from its left and right tiles) is called an alternating group. Return the number of alternating groups. Note that since colors represents a circle, the first and the last tiles are considered to be next to each other.   Example 1: Input: colors = [1,1,1] Output: 0 Explanation: Example 2: Input: colors = [0,1,0,0,1] Output: 3 Explanation: Alternating groups:   Constraints: 3 <= colors.length <= 100 0 <= colors[i] <= 1",
        "2372": "You are given an integer array enemyEnergies denoting the energy values of various enemies. You are also given an integer currentEnergy denoting the amount of energy you have initially. You start with 0 points, and all the enemies are unmarked initially. You can perform either of the following operations zero or multiple times to gain points: Choose an unmarked enemy, i, such that currentEnergy >= enemyEnergies[i]. By choosing this option: You gain 1 point. Your energy is reduced by the enemy's energy, i.e. currentEnergy = currentEnergy - enemyEnergies[i]. If you have at least 1 point, you can choose an unmarked enemy, i. By choosing this option: Your energy increases by the enemy's energy, i.e. currentEnergy = currentEnergy + enemyEnergies[i]. The enemy i is marked. Return an integer denoting the maximum points you can get in the end by optimally performing operations.   Example 1: Input: enemyEnergies = [3,2,2], currentEnergy = 2 Output: 3 Explanation: The following operations can be performed to get 3 points, which is the maximum: First operation on enemy 1: points increases by 1, and currentEnergy decreases by 2. So, points = 1, and currentEnergy = 0. Second operation on enemy 0: currentEnergy increases by 3, and enemy 0 is marked. So, points = 1, currentEnergy = 3, and marked enemies = [0]. First operation on enemy 2: points increases by 1, and currentEnergy decreases by 2. So, points = 2, currentEnergy = 1, and marked enemies = [0]. Second operation on enemy 2: currentEnergy increases by 2, and enemy 2 is marked. So, points = 2, currentEnergy = 3, and marked enemies = [0, 2]. First operation on enemy 1: points increases by 1, and currentEnergy decreases by 2. So, points = 3, currentEnergy = 1, and marked enemies = [0, 2]. Example 2: Input: enemyEnergies = [2], currentEnergy = 10 Output: 5 Explanation: Performing the first operation 5 times on enemy 0 results in the maximum number of points.   Constraints: 1 <= enemyEnergies.length <= 105 1 <= enemyEnergies[i] <= 109 0 <= currentEnergy <= 109",
        "2373": "There is a circle of red and blue tiles. You are given an array of integers colors and an integer k. The color of tile i is represented by colors[i]: colors[i] == 0 means that tile i is red. colors[i] == 1 means that tile i is blue. An alternating group is every k contiguous tiles in the circle with alternating colors (each tile in the group except the first and last one has a different color from its left and right tiles). Return the number of alternating groups. Note that since colors represents a circle, the first and the last tiles are considered to be next to each other.   Example 1: Input: colors = [0,1,0,1,0], k = 3 Output: 3 Explanation: Alternating groups: Example 2: Input: colors = [0,1,0,0,1,0,1], k = 6 Output: 2 Explanation: Alternating groups: Example 3: Input: colors = [1,1,0,1], k = 4 Output: 0 Explanation:   Constraints: 3 <= colors.length <= 105 0 <= colors[i] <= 1 3 <= k <= colors.length",
        "2374": "Given an array of integers nums and an integer k, return the number of subarrays of nums where the bitwise AND of the elements of the subarray equals k.   Example 1: Input: nums = [1,1,1], k = 1 Output: 6 Explanation: All subarrays contain only 1's. Example 2: Input: nums = [1,1,2], k = 1 Output: 3 Explanation: Subarrays having an AND value of 1 are: [1,1,2], [1,1,2], [1,1,2]. Example 3: Input: nums = [1,2,3], k = 2 Output: 2 Explanation: Subarrays having an AND value of 2 are: [1,2,3], [1,2,3].   Constraints: 1 <= nums.length <= 105 0 <= nums[i], k <= 109",
        "2375": "You are given a string s and an integer k. Encrypt the string using the following algorithm: For each character c in s, replace c with the kth character after c in the string (in a cyclic manner). Return the encrypted string.   Example 1: Input: s = \"dart\", k = 3 Output: \"tdar\" Explanation: For i = 0, the 3rd character after 'd' is 't'. For i = 1, the 3rd character after 'a' is 'd'. For i = 2, the 3rd character after 'r' is 'a'. For i = 3, the 3rd character after 't' is 'r'. Example 2: Input: s = \"aaa\", k = 1 Output: \"aaa\" Explanation: As all the characters are the same, the encrypted string will also be the same.   Constraints: 1 <= s.length <= 100 1 <= k <= 104 s consists only of lowercase English letters.",
        "2376": "You are given a positive integer n. A binary string x is valid if all substrings of x of length 2 contain at least one \"1\". Return all valid strings with length n, in any order.   Example 1: Input: n = 3 Output: [\"010\",\"011\",\"101\",\"110\",\"111\"] Explanation: The valid strings of length 3 are: \"010\", \"011\", \"101\", \"110\", and \"111\". Example 2: Input: n = 1 Output: [\"0\",\"1\"] Explanation: The valid strings of length 1 are: \"0\" and \"1\".   Constraints: 1 <= n <= 18",
        "2377": "Given a 2D character matrix grid, where grid[i][j] is either 'X', 'Y', or '.', return the number of submatrices that contain: grid[0][0] an equal frequency of 'X' and 'Y'. at least one 'X'.   Example 1: Input: grid = [[\"X\",\"Y\",\".\"],[\"Y\",\".\",\".\"]] Output: 3 Explanation: Example 2: Input: grid = [[\"X\",\"X\"],[\"X\",\"Y\"]] Output: 0 Explanation: No submatrix has an equal frequency of 'X' and 'Y'. Example 3: Input: grid = [[\".\",\".\"],[\".\",\".\"]] Output: 0 Explanation: No submatrix has at least one 'X'.   Constraints: 1 <= grid.length, grid[i].length <= 1000 grid[i][j] is either 'X', 'Y', or '.'.",
        "2378": "You are given a string target, an array of strings words, and an integer array costs, both arrays of the same length. Imagine an empty string s. You can perform the following operation any number of times (including zero): Choose an index i in the range [0, words.length - 1]. Append words[i] to s. The cost of operation is costs[i]. Return the minimum cost to make s equal to target. If it's not possible, return -1.   Example 1: Input: target = \"abcdef\", words = [\"abdef\",\"abc\",\"d\",\"def\",\"ef\"], costs = [100,1,1,10,5] Output: 7 Explanation: The minimum cost can be achieved by performing the following operations: Select index 1 and append \"abc\" to s at a cost of 1, resulting in s = \"abc\". Select index 2 and append \"d\" to s at a cost of 1, resulting in s = \"abcd\". Select index 4 and append \"ef\" to s at a cost of 5, resulting in s = \"abcdef\". Example 2: Input: target = \"aaaa\", words = [\"z\",\"zz\",\"zzz\"], costs = [1,10,100] Output: -1 Explanation: It is impossible to make s equal to target, so we return -1.   Constraints: 1 <= target.length <= 5 * 104 1 <= words.length == costs.length <= 5 * 104 1 <= words[i].length <= target.length The total sum of words[i].length is less than or equal to 5 * 104. target and words[i] consist only of lowercase English letters. 1 <= costs[i] <= 104",
        "2379": "Given a string s containing only digits, return the lexicographically smallest string that can be obtained after swapping adjacent digits in s with the same parity at most once. Digits have the same parity if both are odd or both are even. For example, 5 and 9, as well as 2 and 4, have the same parity, while 6 and 9 do not.   Example 1: Input: s = \"45320\" Output: \"43520\" Explanation: s[1] == '5' and s[2] == '3' both have the same parity, and swapping them results in the lexicographically smallest string. Example 2: Input: s = \"001\" Output: \"001\" Explanation: There is no need to perform a swap because s is already the lexicographically smallest.   Constraints: 2 <= s.length <= 100 s consists only of digits.",
        "2380": "You are given an array of integers nums and the head of a linked list. Return the head of the modified linked list after removing all nodes from the linked list that have a value that exists in nums.   Example 1: Input: nums = [1,2,3], head = [1,2,3,4,5] Output: [4,5] Explanation: Remove the nodes with values 1, 2, and 3. Example 2: Input: nums = [1], head = [1,2,1,2,1,2] Output: [2,2,2] Explanation: Remove the nodes with value 1. Example 3: Input: nums = [5], head = [1,2,3,4] Output: [1,2,3,4] Explanation: No node has value 5.   Constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105 All elements in nums are unique. The number of nodes in the given list is in the range [1, 105]. 1 <= Node.val <= 105 The input is generated such that there is at least one node in the linked list that has a value not present in nums.",
        "2381": "There is an m x n cake that needs to be cut into 1 x 1 pieces. You are given integers m, n, and two arrays: horizontalCut of size m - 1, where horizontalCut[i] represents the cost to cut along the horizontal line i. verticalCut of size n - 1, where verticalCut[j] represents the cost to cut along the vertical line j. In one operation, you can choose any piece of cake that is not yet a 1 x 1 square and perform one of the following cuts: Cut along a horizontal line i at a cost of horizontalCut[i]. Cut along a vertical line j at a cost of verticalCut[j]. After the cut, the piece of cake is divided into two distinct pieces. The cost of a cut depends only on the initial cost of the line and does not change. Return the minimum total cost to cut the entire cake into 1 x 1 pieces.   Example 1: Input: m = 3, n = 2, horizontalCut = [1,3], verticalCut = [5] Output: 13 Explanation: Perform a cut on the vertical line 0 with cost 5, current total cost is 5. Perform a cut on the horizontal line 0 on 3 x 1 subgrid with cost 1. Perform a cut on the horizontal line 0 on 3 x 1 subgrid with cost 1. Perform a cut on the horizontal line 1 on 2 x 1 subgrid with cost 3. Perform a cut on the horizontal line 1 on 2 x 1 subgrid with cost 3. The total cost is 5 + 1 + 1 + 3 + 3 = 13. Example 2: Input: m = 2, n = 2, horizontalCut = [7], verticalCut = [4] Output: 15 Explanation: Perform a cut on the horizontal line 0 with cost 7. Perform a cut on the vertical line 0 on 1 x 2 subgrid with cost 4. Perform a cut on the vertical line 0 on 1 x 2 subgrid with cost 4. The total cost is 7 + 4 + 4 = 15.   Constraints: 1 <= m, n <= 20 horizontalCut.length == m - 1 verticalCut.length == n - 1 1 <= horizontalCut[i], verticalCut[i] <= 103",
        "2382": "There is an m x n cake that needs to be cut into 1 x 1 pieces. You are given integers m, n, and two arrays: horizontalCut of size m - 1, where horizontalCut[i] represents the cost to cut along the horizontal line i. verticalCut of size n - 1, where verticalCut[j] represents the cost to cut along the vertical line j. In one operation, you can choose any piece of cake that is not yet a 1 x 1 square and perform one of the following cuts: Cut along a horizontal line i at a cost of horizontalCut[i]. Cut along a vertical line j at a cost of verticalCut[j]. After the cut, the piece of cake is divided into two distinct pieces. The cost of a cut depends only on the initial cost of the line and does not change. Return the minimum total cost to cut the entire cake into 1 x 1 pieces.   Example 1: Input: m = 3, n = 2, horizontalCut = [1,3], verticalCut = [5] Output: 13 Explanation: Perform a cut on the vertical line 0 with cost 5, current total cost is 5. Perform a cut on the horizontal line 0 on 3 x 1 subgrid with cost 1. Perform a cut on the horizontal line 0 on 3 x 1 subgrid with cost 1. Perform a cut on the horizontal line 1 on 2 x 1 subgrid with cost 3. Perform a cut on the horizontal line 1 on 2 x 1 subgrid with cost 3. The total cost is 5 + 1 + 1 + 3 + 3 = 13. Example 2: Input: m = 2, n = 2, horizontalCut = [7], verticalCut = [4] Output: 15 Explanation: Perform a cut on the horizontal line 0 with cost 7. Perform a cut on the vertical line 0 on 1 x 2 subgrid with cost 4. Perform a cut on the vertical line 0 on 1 x 2 subgrid with cost 4. The total cost is 7 + 4 + 4 = 15.   Constraints: 1 <= m, n <= 105 horizontalCut.length == m - 1 verticalCut.length == n - 1 1 <= horizontalCut[i], verticalCut[i] <= 103",
        "2383": "SQL Schema Pandas Schema",
        "2384": "You are given two positive integers x and y, denoting the number of coins with values 75 and 10 respectively. Alice and Bob are playing a game. Each turn, starting with Alice, the player must pick up coins with a total value 115. If the player is unable to do so, they lose the game. Return the name of the player who wins the game if both players play optimally.   Example 1: Input: x = 2, y = 7 Output: \"Alice\" Explanation: The game ends in a single turn: Alice picks 1 coin with a value of 75 and 4 coins with a value of 10. Example 2: Input: x = 4, y = 11 Output: \"Bob\" Explanation: The game ends in 2 turns: Alice picks 1 coin with a value of 75 and 4 coins with a value of 10. Bob picks 1 coin with a value of 75 and 4 coins with a value of 10.   Constraints: 1 <= x, y <= 100",
        "2385": "You are given an integer array nums of size n where n is even, and an integer k. You can perform some changes on the array, where in one change you can replace any element in the array with any integer in the range from 0 to k. You need to perform some changes (possibly none) such that the final array satisfies the following condition: There exists an integer X such that abs(a[i] - a[n - i - 1]) = X for all (0 <= i < n). Return the minimum number of changes required to satisfy the above condition.   Example 1: Input: nums = [1,0,1,2,4,3], k = 4 Output: 2 Explanation: We can perform the following changes: Replace nums[1] by 2. The resulting array is nums = [1,2,1,2,4,3]. Replace nums[3] by 3. The resulting array is nums = [1,2,1,3,4,3]. The integer X will be 2. Example 2: Input: nums = [0,1,2,3,3,6,5,4], k = 6 Output: 2 Explanation: We can perform the following operations: Replace nums[3] by 0. The resulting array is nums = [0,1,2,0,3,6,5,4]. Replace nums[4] by 4. The resulting array is nums = [0,1,2,0,4,6,5,4]. The integer X will be 4.   Constraints: 2 <= n == nums.length <= 105 n is even. 0 <= nums[i] <= k <= 105",
        "2386": "You are given two positive integers n and k. You can choose any bit in the binary representation of n that is equal to 1 and change it to 0. Return the number of changes needed to make n equal to k. If it is impossible, return -1.   Example 1: Input: n = 13, k = 4 Output: 2 Explanation: Initially, the binary representations of n and k are n = (1101)2 and k = (0100)2. We can change the first and fourth bits of n. The resulting integer is n = (0100)2 = k. Example 2: Input: n = 21, k = 21 Output: 0 Explanation: n and k are already equal, so no changes are needed. Example 3: Input: n = 14, k = 13 Output: -1 Explanation: It is not possible to make n equal to k.   Constraints: 1 <= n, k <= 106",
        "2387": "Alice and Bob are playing a game on a string. You are given a string s, Alice and Bob will take turns playing the following game where Alice starts first: On Alice's turn, she has to remove any non-empty substring from s that contains an odd number of vowels. On Bob's turn, he has to remove any non-empty substring from s that contains an even number of vowels. The first player who cannot make a move on their turn loses the game. We assume that both Alice and Bob play optimally. Return true if Alice wins the game, and false otherwise. The English vowels are: a, e, i, o, and u.   Example 1: Input: s = \"leetcoder\" Output: true Explanation: Alice can win the game as follows: Alice plays first, she can delete the underlined substring in s = \"leetcoder\" which contains 3 vowels. The resulting string is s = \"der\". Bob plays second, he can delete the underlined substring in s = \"der\" which contains 0 vowels. The resulting string is s = \"er\". Alice plays third, she can delete the whole string s = \"er\" which contains 1 vowel. Bob plays fourth, since the string is empty, there is no valid play for Bob. So Alice wins the game. Example 2: Input: s = \"bbcd\" Output: false Explanation: There is no valid play for Alice in her first turn, so Alice loses the game.   Constraints: 1 <= s.length <= 105 s consists only of lowercase English letters.",
        "2388": "You are given a binary string s. You can perform the following operation on the string any number of times: Choose any index i from the string where i + 1 < s.length such that s[i] == '1' and s[i + 1] == '0'. Move the character s[i] to the right until it reaches the end of the string or another '1'. For example, for s = \"010010\", if we choose i = 1, the resulting string will be s = \"000110\". Return the maximum number of operations that you can perform.   Example 1: Input: s = \"1001101\" Output: 4 Explanation: We can perform the following operations: Choose index i = 0. The resulting string is s = \"0011101\". Choose index i = 4. The resulting string is s = \"0011011\". Choose index i = 3. The resulting string is s = \"0010111\". Choose index i = 2. The resulting string is s = \"0001111\". Example 2: Input: s = \"00111\" Output: 0   Constraints: 1 <= s.length <= 105 s[i] is either '0' or '1'.",
        "2389": "You are given two positive integer arrays nums and target, of the same length. In a single operation, you can select any subarray of nums and increment each element within that subarray by 1 or decrement each element within that subarray by 1. Return the minimum number of operations required to make nums equal to the array target.   Example 1: Input: nums = [3,5,1,2], target = [4,6,2,4] Output: 2 Explanation: We will perform the following operations to make nums equal to target: - Increment nums[0..3] by 1, nums = [4,6,2,3]. - Increment nums[3..3] by 1, nums = [4,6,2,4]. Example 2: Input: nums = [1,3,2], target = [2,1,4] Output: 5 Explanation: We will perform the following operations to make nums equal to target: - Increment nums[0..0] by 1, nums = [2,3,2]. - Decrement nums[1..1] by 1, nums = [2,2,2]. - Decrement nums[1..1] by 1, nums = [2,1,2]. - Increment nums[2..2] by 1, nums = [2,1,3]. - Increment nums[2..2] by 1, nums = [2,1,4].   Constraints: 1 <= nums.length == target.length <= 105 1 <= nums[i], target[i] <= 108",
        "2390": "You are given an array of positive integers nums. Alice and Bob are playing a game. In the game, Alice can choose either all single-digit numbers or all double-digit numbers from nums, and the rest of the numbers are given to Bob. Alice wins if the sum of her numbers is strictly greater than the sum of Bob's numbers. Return true if Alice can win this game, otherwise, return false.   Example 1: Input: nums = [1,2,3,4,10] Output: false Explanation: Alice cannot win by choosing either single-digit or double-digit numbers. Example 2: Input: nums = [1,2,3,4,5,14] Output: true Explanation: Alice can win by choosing single-digit numbers which have a sum equal to 15. Example 3: Input: nums = [5,5,5,25] Output: true Explanation: Alice can win by choosing double-digit numbers which have a sum equal to 25.   Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 99",
        "2391": "You are given 2 positive integers l and r. For any number x, all positive divisors of x except x are called the proper divisors of x. A number is called special if it has exactly 2 proper divisors. For example: The number 4 is special because it has proper divisors 1 and 2. The number 6 is not special because it has proper divisors 1, 2, and 3. Return the count of numbers in the range [l, r] that are not special.   Example 1: Input: l = 5, r = 7 Output: 3 Explanation: There are no special numbers in the range [5, 7]. Example 2: Input: l = 4, r = 16 Output: 11 Explanation: The special numbers in the range [4, 16] are 4 and 9.   Constraints: 1 <= l <= r <= 109",
        "2392": "You are given a binary string s. Return the number of substrings with dominant ones. A string has dominant ones if the number of ones in the string is greater than or equal to the square of the number of zeros in the string.   Example 1: Input: s = \"00011\" Output: 5 Explanation: The substrings with dominant ones are shown in the table below. i j s[i..j] Number of Zeros Number of Ones 3 3 1 0 1 4 4 1 0 1 2 3 01 1 1 3 4 11 0 2 2 4 011 1 2 Example 2: Input: s = \"101101\" Output: 16 Explanation: The substrings with non-dominant ones are shown in the table below. Since there are 21 substrings total and 5 of them have non-dominant ones, it follows that there are 16 substrings with dominant ones. i j s[i..j] Number of Zeros Number of Ones 1 1 0 1 0 4 4 0 1 0 1 4 0110 2 2 0 4 10110 2 3 1 5 01101 2 3   Constraints: 1 <= s.length <= 4 * 104 s consists only of characters '0' and '1'.",
        "2393": "You are given two positive integers xCorner and yCorner, and a 2D array circles, where circles[i] = [xi, yi, ri] denotes a circle with center at (xi, yi) and radius ri. There is a rectangle in the coordinate plane with its bottom left corner at the origin and top right corner at the coordinate (xCorner, yCorner). You need to check whether there is a path from the bottom left corner to the top right corner such that the entire path lies inside the rectangle, does not touch or lie inside any circle, and touches the rectangle only at the two corners. Return true if such a path exists, and false otherwise.   Example 1: Input: xCorner = 3, yCorner = 4, circles = [[2,1,1]] Output: true Explanation: The black curve shows a possible path between (0, 0) and (3, 4). Example 2: Input: xCorner = 3, yCorner = 3, circles = [[1,1,2]] Output: false Explanation: No path exists from (0, 0) to (3, 3). Example 3: Input: xCorner = 3, yCorner = 3, circles = [[2,1,1],[1,2,1]] Output: false Explanation: No path exists from (0, 0) to (3, 3). Example 4: Input: xCorner = 4, yCorner = 4, circles = [[5,5,1]] Output: true Explanation:   Constraints: 3 <= xCorner, yCorner <= 109 1 <= circles.length <= 1000 circles[i].length == 3 1 <= xi, yi, ri <= 109",
        "2394": "You are given an integer n representing the number of players in a game and a 2D array pick where pick[i] = [xi, yi] represents that the player xi picked a ball of color yi. Player i wins the game if they pick strictly more than i balls of the same color. In other words, Player 0 wins if they pick any ball. Player 1 wins if they pick at least two balls of the same color. ... Player i wins if they pick at leasti + 1 balls of the same color. Return the number of players who win the game. Note that multiple players can win the game.   Example 1: Input: n = 4, pick = [[0,0],[1,0],[1,0],[2,1],[2,1],[2,0]] Output: 2 Explanation: Player 0 and player 1 win the game, while players 2 and 3 do not win. Example 2: Input: n = 5, pick = [[1,1],[1,2],[1,3],[1,4]] Output: 0 Explanation: No player wins the game. Example 3: Input: n = 5, pick = [[1,1],[2,4],[2,4],[2,4]] Output: 1 Explanation: Player 2 wins the game by picking 3 balls with color 4.   Constraints: 2 <= n <= 10 1 <= pick.length <= 100 pick[i].length == 2 0 <= xi <= n - 1  0 <= yi <= 10",
        "2395": "You are given an m x n binary matrix grid. A row or column is considered palindromic if its values read the same forward and backward. You can flip any number of cells in grid from 0 to 1, or from 1 to 0. Return the minimum number of cells that need to be flipped to make either all rows palindromic or all columns palindromic.   Example 1: Input: grid = [[1,0,0],[0,0,0],[0,0,1]] Output: 2 Explanation: Flipping the highlighted cells makes all the rows palindromic. Example 2: Input: grid = [[0,1],[0,1],[0,0]] Output: 1 Explanation: Flipping the highlighted cell makes all the columns palindromic. Example 3: Input: grid = [[1],[0]] Output: 0 Explanation: All rows are already palindromic.   Constraints: m == grid.length n == grid[i].length 1 <= m * n <= 2 * 105 0 <= grid[i][j] <= 1",
        "2396": "You are given an m x n binary matrix grid. A row or column is considered palindromic if its values read the same forward and backward. You can flip any number of cells in grid from 0 to 1, or from 1 to 0. Return the minimum number of cells that need to be flipped to make all rows and columns palindromic, and the total number of 1's in grid divisible by 4.   Example 1: Input: grid = [[1,0,0],[0,1,0],[0,0,1]] Output: 3 Explanation: Example 2: Input: grid = [[0,1],[0,1],[0,0]] Output: 2 Explanation: Example 3: Input: grid = [[1],[1]] Output: 2 Explanation:   Constraints: m == grid.length n == grid[i].length 1 <= m * n <= 2 * 105 0 <= grid[i][j] <= 1",
        "2397": "",
        "2398": "You are given a n x n 2D array grid containing distinct elements in the range [0, n2 - 1]. Implement the NeighborSum class: NeighborSum(int [][]grid) initializes the object. int adjacentSum(int value) returns the sum of elements which are adjacent neighbors of value, that is either to the top, left, right, or bottom of value in grid. int diagonalSum(int value) returns the sum of elements which are diagonal neighbors of value, that is either to the top-left, top-right, bottom-left, or bottom-right of value in grid.   Example 1: Input: [\"NeighborSum\", \"adjacentSum\", \"adjacentSum\", \"diagonalSum\", \"diagonalSum\"] [[[[0, 1, 2], [3, 4, 5], [6, 7, 8]]], [1], [4], [4], [8]] Output: [null, 6, 16, 16, 4] Explanation: The adjacent neighbors of 1 are 0, 2, and 4. The adjacent neighbors of 4 are 1, 3, 5, and 7. The diagonal neighbors of 4 are 0, 2, 6, and 8. The diagonal neighbor of 8 is 4. Example 2: Input: [\"NeighborSum\", \"adjacentSum\", \"diagonalSum\"] [[[[1, 2, 0, 3], [4, 7, 15, 6], [8, 9, 10, 11], [12, 13, 14, 5]]], [15], [9]] Output: [null, 23, 45] Explanation: The adjacent neighbors of 15 are 0, 10, 7, and 6. The diagonal neighbors of 9 are 4, 12, 14, and 15.   Constraints: 3 <= n == grid.length == grid[0].length <= 10 0 <= grid[i][j] <= n2 - 1 All grid[i][j] are distinct. value in adjacentSum and diagonalSum will be in the range [0, n2 - 1]. At most 2 * n2 calls will be made to adjacentSum and diagonalSum.",
        "2399": "You are given an integer n and a 2D integer array queries. There are n cities numbered from 0 to n - 1. Initially, there is a unidirectional road from city i to city i + 1 for all 0 <= i < n - 1. queries[i] = [ui, vi] represents the addition of a new unidirectional road from city ui to city vi. After each query, you need to find the length of the shortest path from city 0 to city n - 1. Return an array answer where for each i in the range [0, queries.length - 1], answer[i] is the length of the shortest path from city 0 to city n - 1 after processing the first i + 1 queries.   Example 1: Input: n = 5, queries = [[2,4],[0,2],[0,4]] Output: [3,2,1] Explanation: After the addition of the road from 2 to 4, the length of the shortest path from 0 to 4 is 3. After the addition of the road from 0 to 2, the length of the shortest path from 0 to 4 is 2. After the addition of the road from 0 to 4, the length of the shortest path from 0 to 4 is 1. Example 2: Input: n = 4, queries = [[0,3],[0,2]] Output: [1,1] Explanation: After the addition of the road from 0 to 3, the length of the shortest path from 0 to 3 is 1. After the addition of the road from 0 to 2, the length of the shortest path remains 1.   Constraints: 3 <= n <= 500 1 <= queries.length <= 500 queries[i].length == 2 0 <= queries[i][0] < queries[i][1] < n 1 < queries[i][1] - queries[i][0] There are no repeated roads among the queries.",
        "2400": "You are given an integer n and a 2D integer array queries. There are n cities numbered from 0 to n - 1. Initially, there is a unidirectional road from city i to city i + 1 for all 0 <= i < n - 1. queries[i] = [ui, vi] represents the addition of a new unidirectional road from city ui to city vi. After each query, you need to find the length of the shortest path from city 0 to city n - 1. There are no two queries such that queries[i][0] < queries[j][0] < queries[i][1] < queries[j][1]. Return an array answer where for each i in the range [0, queries.length - 1], answer[i] is the length of the shortest path from city 0 to city n - 1 after processing the first i + 1 queries.   Example 1: Input: n = 5, queries = [[2,4],[0,2],[0,4]] Output: [3,2,1] Explanation: After the addition of the road from 2 to 4, the length of the shortest path from 0 to 4 is 3. After the addition of the road from 0 to 2, the length of the shortest path from 0 to 4 is 2. After the addition of the road from 0 to 4, the length of the shortest path from 0 to 4 is 1. Example 2: Input: n = 4, queries = [[0,3],[0,2]] Output: [1,1] Explanation: After the addition of the road from 0 to 3, the length of the shortest path from 0 to 3 is 1. After the addition of the road from 0 to 2, the length of the shortest path remains 1.   Constraints: 3 <= n <= 105 1 <= queries.length <= 105 queries[i].length == 2 0 <= queries[i][0] < queries[i][1] < n 1 < queries[i][1] - queries[i][0] There are no repeated roads among the queries. There are no two queries such that i != j and queries[i][0] < queries[j][0] < queries[i][1] < queries[j][1].",
        "2401": "There are some red and blue tiles arranged circularly. You are given an array of integers colors and a 2D integers array queries. The color of tile i is represented by colors[i]: colors[i] == 0 means that tile i is red. colors[i] == 1 means that tile i is blue. An alternating group is a contiguous subset of tiles in the circle with alternating colors (each tile in the group except the first and last one has a different color from its adjacent tiles in the group). You have to process queries of two types: queries[i] = [1, sizei], determine the count of alternating groups with size sizei. queries[i] = [2, indexi, colori], change colors[indexi] to colori. Return an array answer containing the results of the queries of the first type in order. Note that since colors represents a circle, the first and the last tiles are considered to be next to each other.   Example 1: Input: colors = [0,1,1,0,1], queries = [[2,1,0],[1,4]] Output: [2] Explanation: First query: Change colors[1] to 0. Second query: Count of the alternating groups with size 4: Example 2: Input: colors = [0,0,1,0,1,1], queries = [[1,3],[2,3,0],[1,5]] Output: [2,0] Explanation: First query: Count of the alternating groups with size 3: Second query: colors will not change. Third query: There is no alternating group with size 5.   Constraints: 4 <= colors.length <= 5 * 104 0 <= colors[i] <= 1 1 <= queries.length <= 5 * 104 queries[i][0] == 1 or queries[i][0] == 2 For all i that: queries[i][0] == 1: queries[i].length == 2, 3 <= queries[i][1] <= colors.length - 1 queries[i][0] == 2: queries[i].length == 3, 0 <= queries[i][1] <= colors.length - 1, 0 <= queries[i][2] <= 1",
        "2402": "There is a snake in an n x n matrix grid and can move in four possible directions. Each cell in the grid is identified by the position: grid[i][j] = (i * n) + j. The snake starts at cell 0 and follows a sequence of commands. You are given an integer n representing the size of the grid and an array of strings commands where each command[i] is either \"UP\", \"RIGHT\", \"DOWN\", and \"LEFT\". It's guaranteed that the snake will remain within the grid boundaries throughout its movement. Return the position of the final cell where the snake ends up after executing commands.   Example 1: Input: n = 2, commands = [\"RIGHT\",\"DOWN\"] Output: 3 Explanation: 0 1 2 3 0 1 2 3 0 1 2 3 Example 2: Input: n = 3, commands = [\"DOWN\",\"RIGHT\",\"UP\"] Output: 1 Explanation: 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8   Constraints: 2 <= n <= 10 1 <= commands.length <= 100 commands consists only of \"UP\", \"RIGHT\", \"DOWN\", and \"LEFT\". The input is generated such the snake will not move outside of the boundaries.",
        "2403": "There is an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. A node is good if all the subtrees rooted at its children have the same size. Return the number of good nodes in the given tree. A subtree of treeName is a tree consisting of a node in treeName and all of its descendants.   Example 1: Input: edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]] Output: 7 Explanation: All of the nodes of the given tree are good. Example 2: Input: edges = [[0,1],[1,2],[2,3],[3,4],[0,5],[1,6],[2,7],[3,8]] Output: 6 Explanation: There are 6 good nodes in the given tree. They are colored in the image above. Example 3: Input: edges = [[0,1],[1,2],[1,3],[1,4],[0,5],[5,6],[6,7],[7,8],[0,9],[9,10],[9,12],[10,11]] Output: 12 Explanation: All nodes except node 9 are good.   Constraints: 2 <= n <= 105 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n The input is generated such that edges represents a valid tree.",
        "2404": "You are given an array of positive integers nums of length n. We call a pair of non-negative integer arrays (arr1, arr2) monotonic if: The lengths of both arrays are n. arr1 is monotonically non-decreasing, in other words, arr1[0] <= arr1[1] <= ... <= arr1[n - 1]. arr2 is monotonically non-increasing, in other words, arr2[0] >= arr2[1] >= ... >= arr2[n - 1]. arr1[i] + arr2[i] == nums[i] for all 0 <= i <= n - 1. Return the count of monotonic pairs. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: nums = [2,3,2] Output: 4 Explanation: The good pairs are: ([0, 1, 1], [2, 2, 1]) ([0, 1, 2], [2, 2, 0]) ([0, 2, 2], [2, 1, 0]) ([1, 2, 2], [1, 1, 0]) Example 2: Input: nums = [5,5,5,5] Output: 126   Constraints: 1 <= n == nums.length <= 2000 1 <= nums[i] <= 50",
        "2405": "You are given an array of positive integers nums of length n. We call a pair of non-negative integer arrays (arr1, arr2) monotonic if: The lengths of both arrays are n. arr1 is monotonically non-decreasing, in other words, arr1[0] <= arr1[1] <= ... <= arr1[n - 1]. arr2 is monotonically non-increasing, in other words, arr2[0] >= arr2[1] >= ... >= arr2[n - 1]. arr1[i] + arr2[i] == nums[i] for all 0 <= i <= n - 1. Return the count of monotonic pairs. Since the answer may be very large, return it modulo 109 + 7.   Example 1: Input: nums = [2,3,2] Output: 4 Explanation: The good pairs are: ([0, 1, 1], [2, 2, 1]) ([0, 1, 2], [2, 2, 0]) ([0, 2, 2], [2, 1, 0]) ([1, 2, 2], [1, 1, 0]) Example 2: Input: nums = [5,5,5,5] Output: 126   Constraints: 1 <= n == nums.length <= 2000 1 <= nums[i] <= 1000",
        "2406": "You are given an array of integers nums of length n and a positive integer k. The power of an array is defined as: Its maximum element if all of its elements are consecutive and sorted in ascending order. -1 otherwise. You need to find the power of all subarrays of nums of size k. Return an integer array results of size n - k + 1, where results[i] is the power of nums[i..(i + k - 1)].   Example 1: Input: nums = [1,2,3,4,3,2,5], k = 3 Output: [3,4,-1,-1,-1] Explanation: There are 5 subarrays of nums of size 3: [1, 2, 3] with the maximum element 3. [2, 3, 4] with the maximum element 4. [3, 4, 3] whose elements are not consecutive. [4, 3, 2] whose elements are not sorted. [3, 2, 5] whose elements are not consecutive. Example 2: Input: nums = [2,2,2,2,2], k = 4 Output: [-1,-1] Example 3: Input: nums = [3,2,3,2,3,2], k = 2 Output: [-1,3,-1,3,-1]   Constraints: 1 <= n == nums.length <= 500 1 <= nums[i] <= 105 1 <= k <= n",
        "2407": "You are given an array of integers nums of length n and a positive integer k. The power of an array is defined as: Its maximum element if all of its elements are consecutive and sorted in ascending order. -1 otherwise. You need to find the power of all subarrays of nums of size k. Return an integer array results of size n - k + 1, where results[i] is the power of nums[i..(i + k - 1)].   Example 1: Input: nums = [1,2,3,4,3,2,5], k = 3 Output: [3,4,-1,-1,-1] Explanation: There are 5 subarrays of nums of size 3: [1, 2, 3] with the maximum element 3. [2, 3, 4] with the maximum element 4. [3, 4, 3] whose elements are not consecutive. [4, 3, 2] whose elements are not sorted. [3, 2, 5] whose elements are not consecutive. Example 2: Input: nums = [2,2,2,2,2], k = 4 Output: [-1,-1] Example 3: Input: nums = [3,2,3,2,3,2], k = 2 Output: [-1,3,-1,3,-1]   Constraints: 1 <= n == nums.length <= 105 1 <= nums[i] <= 106 1 <= k <= n",
        "2408": "You are given a m x n 2D array board representing a chessboard, where board[i][j] represents the value of the cell (i, j). Rooks in the same row or column attack each other. You need to place three rooks on the chessboard such that the rooks do not attack each other. Return the maximum sum of the cell values on which the rooks are placed.   Example 1: Input: board = [[-3,1,1,1],[-3,1,-3,1],[-3,2,1,1]] Output: 4 Explanation: We can place the rooks in the cells (0, 2), (1, 3), and (2, 1) for a sum of 1 + 1 + 2 = 4. Example 2: Input: board = [[1,2,3],[4,5,6],[7,8,9]] Output: 15 Explanation: We can place the rooks in the cells (0, 0), (1, 1), and (2, 2) for a sum of 1 + 5 + 9 = 15. Example 3: Input: board = [[1,1,1],[1,1,1],[1,1,1]] Output: 3 Explanation: We can place the rooks in the cells (0, 2), (1, 1), and (2, 0) for a sum of 1 + 1 + 1 = 3.   Constraints: 3 <= m == board.length <= 100 3 <= n == board[i].length <= 100 -109 <= board[i][j] <= 109",
        "2409": "You are given a m x n 2D array board representing a chessboard, where board[i][j] represents the value of the cell (i, j). Rooks in the same row or column attack each other. You need to place three rooks on the chessboard such that the rooks do not attack each other. Return the maximum sum of the cell values on which the rooks are placed.   Example 1: Input: board = [[-3,1,1,1],[-3,1,-3,1],[-3,2,1,1]] Output: 4 Explanation: We can place the rooks in the cells (0, 2), (1, 3), and (2, 1) for a sum of 1 + 1 + 2 = 4. Example 2: Input: board = [[1,2,3],[4,5,6],[7,8,9]] Output: 15 Explanation: We can place the rooks in the cells (0, 0), (1, 1), and (2, 2) for a sum of 1 + 5 + 9 = 15. Example 3: Input: board = [[1,1,1],[1,1,1],[1,1,1]] Output: 3 Explanation: We can place the rooks in the cells (0, 2), (1, 1), and (2, 0) for a sum of 1 + 1 + 1 = 3.   Constraints: 3 <= m == board.length <= 500 3 <= n == board[i].length <= 500 -109 <= board[i][j] <= 109",
        "2410": "You are given a binary string s and an integer k. A binary string satisfies the k-constraint if either of the following conditions holds: The number of 0's in the string is at most k. The number of 1's in the string is at most k. Return an integer denoting the number of substrings of s that satisfy the k-constraint.   Example 1: Input: s = \"10101\", k = 1 Output: 12 Explanation: Every substring of s except the substrings \"1010\", \"10101\", and \"0101\" satisfies the k-constraint. Example 2: Input: s = \"1010101\", k = 2 Output: 25 Explanation: Every substring of s except the substrings with a length greater than 5 satisfies the k-constraint. Example 3: Input: s = \"11111\", k = 1 Output: 15 Explanation: All substrings of s satisfy the k-constraint.   Constraints: 1 <= s.length <= 50  1 <= k <= s.length s[i] is either '0' or '1'.",
        "2411": "You are given two integer arrays energyDrinkA and energyDrinkB of the same length n by a futuristic sports scientist. These arrays represent the energy boosts per hour provided by two different energy drinks, A and B, respectively. You want to maximize your total energy boost by drinking one energy drink per hour. However, if you want to switch from consuming one energy drink to the other, you need to wait for one hour to cleanse your system (meaning you won't get any energy boost in that hour). Return the maximum total energy boost you can gain in the next n hours. Note that you can start consuming either of the two energy drinks.   Example 1: Input: energyDrinkA = [1,3,1], energyDrinkB = [3,1,1] Output: 5 Explanation: To gain an energy boost of 5, drink only the energy drink A (or only B). Example 2: Input: energyDrinkA = [4,1,1], energyDrinkB = [1,1,3] Output: 7 Explanation: To gain an energy boost of 7: Drink the energy drink A for the first hour. Switch to the energy drink B and we lose the energy boost of the second hour. Gain the energy boost of the drink B in the third hour.   Constraints: n == energyDrinkA.length == energyDrinkB.length 3 <= n <= 105 1 <= energyDrinkA[i], energyDrinkB[i] <= 105",
        "2412": "You are given two positive integers n and k. An integer x is called k-palindromic if: x is a palindrome . x is divisible by k. Return the largest integer having n digits (as a string) that is k-palindromic. Note that the integer must not have leading zeros.   Example 1: Input: n = 3, k = 5 Output: \"595\" Explanation: 595 is the largest k-palindromic integer with 3 digits. Example 2: Input: n = 1, k = 4 Output: \"8\" Explanation: 4 and 8 are the only k-palindromic integers with 1 digit. Example 3: Input: n = 5, k = 6 Output: \"89898\"   Constraints: 1 <= n <= 105 1 <= k <= 9",
        "2413": "You are given a binary string s and an integer k. You are also given a 2D integer array queries, where queries[i] = [li, ri]. A binary string satisfies the k-constraint if either of the following conditions holds: The number of 0's in the string is at most k. The number of 1's in the string is at most k. Return an integer array answer, where answer[i] is the number of substrings of s[li..ri] that satisfy the k-constraint.   Example 1: Input: s = \"0001111\", k = 2, queries = [[0,6]] Output: [26] Explanation: For the query [0, 6], all substrings of s[0..6] = \"0001111\" satisfy the k-constraint except for the substrings s[0..5] = \"000111\" and s[0..6] = \"0001111\". Example 2: Input: s = \"010101\", k = 1, queries = [[0,5],[1,4],[2,3]] Output: [15,9,3] Explanation: The substrings of s with a length greater than 3 do not satisfy the k-constraint.   Constraints: 1 <= s.length <= 105 s[i] is either '0' or '1'. 1 <= k <= s.length 1 <= queries.length <= 105 queries[i] == [li, ri] 0 <= li <= ri < s.length All queries are distinct.",
        "2414": "You are given an integer array nums, an integer k, and an integer multiplier. You need to perform k operations on nums. In each operation: Find the minimum value x in nums. If there are multiple occurrences of the minimum value, select the one that appears first. Replace the selected minimum value x with x * multiplier. Return an integer array denoting the final state of nums after performing all k operations.   Example 1: Input: nums = [2,1,3,5,6], k = 5, multiplier = 2 Output: [8,4,6,5,6] Explanation: Operation Result After operation 1 [2, 2, 3, 5, 6] After operation 2 [4, 2, 3, 5, 6] After operation 3 [4, 4, 3, 5, 6] After operation 4 [4, 4, 6, 5, 6] After operation 5 [8, 4, 6, 5, 6] Example 2: Input: nums = [1,2], k = 3, multiplier = 4 Output: [16,8] Explanation: Operation Result After operation 1 [4, 2] After operation 2 [4, 8] After operation 3 [16, 8]   Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100 1 <= k <= 10 1 <= multiplier <= 5",
        "2415": "You are given an array nums consisting of positive integers. We call two integers x and y in this problem almost equal if both integers can become equal after performing the following operation at most once: Choose either x or y and swap any two digits within the chosen number. Return the number of indices i and j in nums where i < j such that nums[i] and nums[j] are almost equal. Note that it is allowed for an integer to have leading zeros after performing an operation.   Example 1: Input: nums = [3,12,30,17,21] Output: 2 Explanation: The almost equal pairs of elements are: 3 and 30. By swapping 3 and 0 in 30, you get 3. 12 and 21. By swapping 1 and 2 in 12, you get 21. Example 2: Input: nums = [1,1,1,1,1] Output: 10 Explanation: Every two elements in the array are almost equal. Example 3: Input: nums = [123,231] Output: 0 Explanation: We cannot swap any two digits of 123 or 231 to reach the other.   Constraints: 2 <= nums.length <= 100 1 <= nums[i] <= 106",
        "2416": "You are given an integer array nums, an integer k, and an integer multiplier. You need to perform k operations on nums. In each operation: Find the minimum value x in nums. If there are multiple occurrences of the minimum value, select the one that appears first. Replace the selected minimum value x with x * multiplier. After the k operations, apply modulo 109 + 7 to every value in nums. Return an integer array denoting the final state of nums after performing all k operations and then applying the modulo.   Example 1: Input: nums = [2,1,3,5,6], k = 5, multiplier = 2 Output: [8,4,6,5,6] Explanation: Operation Result After operation 1 [2, 2, 3, 5, 6] After operation 2 [4, 2, 3, 5, 6] After operation 3 [4, 4, 3, 5, 6] After operation 4 [4, 4, 6, 5, 6] After operation 5 [8, 4, 6, 5, 6] After applying modulo [8, 4, 6, 5, 6] Example 2: Input: nums = [100000,2000], k = 2, multiplier = 1000000 Output: [999999307,999999993] Explanation: Operation Result After operation 1 [100000, 2000000000] After operation 2 [100000000000, 2000000000] After applying modulo [999999307, 999999993]   Constraints: 1 <= nums.length <= 104 1 <= nums[i] <= 109 1 <= k <= 109 1 <= multiplier <= 106",
        "2417": "Attention: In this version, the number of operations that can be performed, has been increased to twice. You are given an array nums consisting of positive integers. We call two integers x and y almost equal if both integers can become equal after performing the following operation at most twice: Choose either x or y and swap any two digits within the chosen number. Return the number of indices i and j in nums where i < j such that nums[i] and nums[j] are almost equal. Note that it is allowed for an integer to have leading zeros after performing an operation.   Example 1: Input: nums = [1023,2310,2130,213] Output: 4 Explanation: The almost equal pairs of elements are: 1023 and 2310. By swapping the digits 1 and 2, and then the digits 0 and 3 in 1023, you get 2310. 1023 and 213. By swapping the digits 1 and 0, and then the digits 1 and 2 in 1023, you get 0213, which is 213. 2310 and 213. By swapping the digits 2 and 0, and then the digits 3 and 2 in 2310, you get 0213, which is 213. 2310 and 2130. By swapping the digits 3 and 1 in 2310, you get 2130. Example 2: Input: nums = [1,10,100] Output: 3 Explanation: The almost equal pairs of elements are: 1 and 10. By swapping the digits 1 and 0 in 10, you get 01 which is 1. 1 and 100. By swapping the second 0 with the digit 1 in 100, you get 001, which is 1. 10 and 100. By swapping the first 0 with the digit 1 in 100, you get 010, which is 10.   Constraints: 2 <= nums.length <= 5000 1 <= nums[i] < 107",
        "2418": "You are given three positive integers num1, num2, and num3. The key of num1, num2, and num3 is defined as a four-digit number such that: Initially, if any number has less than four digits, it is padded with leading zeros. The ith digit (1 <= i <= 4) of the key is generated by taking the smallest digit among the ith digits of num1, num2, and num3. Return the key of the three numbers without leading zeros (if any).   Example 1: Input: num1 = 1, num2 = 10, num3 = 1000 Output: 0 Explanation: On padding, num1 becomes \"0001\", num2 becomes \"0010\", and num3 remains \"1000\". The 1st digit of the key is min(0, 0, 1). The 2nd digit of the key is min(0, 0, 0). The 3rd digit of the key is min(0, 1, 0). The 4th digit of the key is min(1, 0, 0). Hence, the key is \"0000\", i.e. 0. Example 2: Input: num1 = 987, num2 = 879, num3 = 798 Output: 777 Example 3: Input: num1 = 1, num2 = 2, num3 = 3 Output: 1   Constraints: 1 <= num1, num2, num3 <= 9999",
        "2419": "You are given a string s of length n and an integer k, where n is a multiple of k. Your task is to hash the string s into a new string called result, which has a length of n / k. First, divide s into n / k substrings , each with a length of k. Then, initialize result as an empty string. For each substring in order from the beginning: The hash value of a character is the index of that character in the English alphabet (e.g., 'a' → 0, 'b' → 1, ..., 'z' → 25). Calculate the sum of all the hash values of the characters in the substring. Find the remainder of this sum when divided by 26, which is called hashedChar. Identify the character in the English lowercase alphabet that corresponds to hashedChar. Append that character to the end of result. Return result.   Example 1: Input: s = \"abcd\", k = 2 Output: \"bf\" Explanation: First substring: \"ab\", 0 + 1 = 1, 1 % 26 = 1, result[0] = 'b'. Second substring: \"cd\", 2 + 3 = 5, 5 % 26 = 5, result[1] = 'f'. Example 2: Input: s = \"mxz\", k = 3 Output: \"i\" Explanation: The only substring: \"mxz\", 12 + 23 + 25 = 60, 60 % 26 = 8, result[0] = 'i'.   Constraints: 1 <= k <= 100 k <= s.length <= 1000 s.length is divisible by k. s consists only of lowercase English letters.",
        "2420": "You are given two positive integers n and k. An integer x is called k-palindromic if: x is a palindrome . x is divisible by k. An integer is called good if its digits can be rearranged to form a k-palindromic integer. For example, for k = 2, 2020 can be rearranged to form the k-palindromic integer 2002, whereas 1010 cannot be rearranged to form a k-palindromic integer. Return the count of good integers containing n digits. Note that any integer must not have leading zeros, neither before nor after rearrangement. For example, 1010 cannot be rearranged to form 101.   Example 1: Input: n = 3, k = 5 Output: 27 Explanation: Some of the good integers are: 551 because it can be rearranged to form 515. 525 because it is already k-palindromic. Example 2: Input: n = 1, k = 4 Output: 2 Explanation: The two good integers are 4 and 8. Example 3: Input: n = 5, k = 6 Output: 2468   Constraints: 1 <= n <= 10 1 <= k <= 9",
        "2421": "You are given an integer power and two integer arrays damage and health, both having length n. Bob has n enemies, where enemy i will deal Bob damage[i] points of damage per second while they are alive (i.e. health[i] > 0). Every second, after the enemies deal damage to Bob, he chooses one of the enemies that is still alive and deals power points of damage to them. Determine the minimum total amount of damage points that will be dealt to Bob before all n enemies are dead.   Example 1: Input: power = 4, damage = [1,2,3,4], health = [4,5,6,8] Output: 39 Explanation: Attack enemy 3 in the first two seconds, after which enemy 3 will go down, the number of damage points dealt to Bob is 10 + 10 = 20 points. Attack enemy 2 in the next two seconds, after which enemy 2 will go down, the number of damage points dealt to Bob is 6 + 6 = 12 points. Attack enemy 0 in the next second, after which enemy 0 will go down, the number of damage points dealt to Bob is 3 points. Attack enemy 1 in the next two seconds, after which enemy 1 will go down, the number of damage points dealt to Bob is 2 + 2 = 4 points. Example 2: Input: power = 1, damage = [1,1,1,1], health = [1,2,3,4] Output: 20 Explanation: Attack enemy 0 in the first second, after which enemy 0 will go down, the number of damage points dealt to Bob is 4 points. Attack enemy 1 in the next two seconds, after which enemy 1 will go down, the number of damage points dealt to Bob is 3 + 3 = 6 points. Attack enemy 2 in the next three seconds, after which enemy 2 will go down, the number of damage points dealt to Bob is 2 + 2 + 2 = 6 points. Attack enemy 3 in the next four seconds, after which enemy 3 will go down, the number of damage points dealt to Bob is 1 + 1 + 1 + 1 = 4 points. Example 3: Input: power = 8, damage = [40], health = [59] Output: 320   Constraints: 1 <= power <= 104 1 <= n == damage.length == health.length <= 105 1 <= damage[i], health[i] <= 104",
        "2422": "You are given two strings, coordinate1 and coordinate2, representing the coordinates of a square on an 8 x 8 chessboard. Below is the chessboard for reference. Return true if these two squares have the same color and false otherwise. The coordinate will always represent a valid chessboard square. The coordinate will always have the letter first (indicating its column), and the number second (indicating its row).   Example 1: Input: coordinate1 = \"a1\", coordinate2 = \"c3\" Output: true Explanation: Both squares are black. Example 2: Input: coordinate1 = \"a1\", coordinate2 = \"h3\" Output: false Explanation: Square \"a1\" is black and \"h3\" is white.   Constraints: coordinate1.length == coordinate2.length == 2 'a' <= coordinate1[0], coordinate2[0] <= 'h' '1' <= coordinate1[1], coordinate2[1] <= '8'",
        "2423": "There is an infinite 2D plane. You are given a positive integer k. You are also given a 2D array queries, which contains the following queries: queries[i] = [x, y]: Build an obstacle at coordinate (x, y) in the plane. It is guaranteed that there is no obstacle at this coordinate when this query is made. After each query, you need to find the distance of the kth nearest obstacle from the origin. Return an integer array results where results[i] denotes the kth nearest obstacle after query i, or results[i] == -1 if there are less than k obstacles. Note that initially there are no obstacles anywhere. The distance of an obstacle at coordinate (x, y) from the origin is given by |x| + |y|.   Example 1: Input: queries = [[1,2],[3,4],[2,3],[-3,0]], k = 2 Output: [-1,7,5,3] Explanation: Initially, there are 0 obstacles. After queries[0], there are less than 2 obstacles. After queries[1], there are obstacles at distances 3 and 7. After queries[2], there are obstacles at distances 3, 5, and 7. After queries[3], there are obstacles at distances 3, 3, 5, and 7. Example 2: Input: queries = [[5,5],[4,4],[3,3]], k = 1 Output: [10,8,6] Explanation: After queries[0], there is an obstacle at distance 10. After queries[1], there are obstacles at distances 8 and 10. After queries[2], there are obstacles at distances 6, 8, and 10.   Constraints: 1 <= queries.length <= 2 * 105 All queries[i] are unique. -109 <= queries[i][0], queries[i][1] <= 109 1 <= k <= 105",
        "2424": "You are given a 2D matrix grid consisting of positive integers. You have to select one or more cells from the matrix such that the following conditions are satisfied: No two selected cells are in the same row of the matrix. The values in the set of selected cells are unique. Your score will be the sum of the values of the selected cells. Return the maximum score you can achieve.   Example 1: Input: grid = [[1,2,3],[4,3,2],[1,1,1]] Output: 8 Explanation: We can select the cells with values 1, 3, and 4 that are colored above. Example 2: Input: grid = [[8,7,6],[8,3,2]] Output: 15 Explanation: We can select the cells with values 7 and 8 that are colored above.   Constraints: 1 <= grid.length, grid[i].length <= 10 1 <= grid[i][j] <= 100",
        "2425": "You are given an array nums of n integers, and a 2D integer array queries of size q, where queries[i] = [li, ri]. For each query, you must find the maximum XOR score of any subarray of nums[li..ri]. The XOR score of an array a is found by repeatedly applying the following operations on a so that only one element remains, that is the score: Simultaneously replace a[i] with a[i] XOR a[i + 1] for all indices i except the last one. Remove the last element of a. Return an array answer of size q where answer[i] is the answer to query i.   Example 1: Input: nums = [2,8,4,32,16,1], queries = [[0,2],[1,4],[0,5]] Output: [12,60,60] Explanation: In the first query, nums[0..2] has 6 subarrays [2], [8], [4], [2, 8], [8, 4], and [2, 8, 4] each with a respective XOR score of 2, 8, 4, 10, 12, and 6. The answer for the query is 12, the largest of all XOR scores. In the second query, the subarray of nums[1..4] with the largest XOR score is nums[1..4] with a score of 60. In the third query, the subarray of nums[0..5] with the largest XOR score is nums[1..4] with a score of 60. Example 2: Input: nums = [0,7,3,2,8,5,1], queries = [[0,3],[1,5],[2,4],[2,6],[5,6]] Output: [7,14,11,14,5] Explanation: Index nums[li..ri] Maximum XOR Score Subarray Maximum Subarray XOR Score 0 [0, 7, 3, 2] [7] 7 1 [7, 3, 2, 8, 5] [7, 3, 2, 8] 14 2 [3, 2, 8] [3, 2, 8] 11 3 [3, 2, 8, 5, 1] [2, 8, 5, 1] 14 4 [5, 1] [5] 5   Constraints: 1 <= n == nums.length <= 2000 0 <= nums[i] <= 231 - 1 1 <= q == queries.length <= 105 queries[i].length == 2  queries[i] = [li, ri] 0 <= li <= ri <= n - 1",
        "2426": "You are given a string date representing a Gregorian calendar date in the yyyy-mm-dd format. date can be written in its binary representation obtained by converting year, month, and day to their binary representations without any leading zeroes and writing them down in year-month-day format. Return the binary representation of date.   Example 1: Input: date = \"2080-02-29\" Output: \"100000100000-10-11101\" Explanation: 100000100000, 10, and 11101 are the binary representations of 2080, 02, and 29 respectively. Example 2: Input: date = \"1900-01-01\" Output: \"11101101100-1-1\" Explanation: 11101101100, 1, and 1 are the binary representations of 1900, 1, and 1 respectively.   Constraints: date.length == 10 date[4] == date[7] == '-', and all other date[i]'s are digits. The input is generated such that date represents a valid Gregorian calendar date between Jan 1st, 1900 and Dec 31st, 2100 (both inclusive)."
    },
    "accecpted": {
        "0": 204900,
        "1": 14800000,
        "2": 5000000,
        "3": 2900000,
        "4": 1500000,
        "5": 3600000,
        "6": 5300000,
        "7": 1000000,
        "8": 3400000,
        "9": 1500000,
        "10": 4099999,
        "11": 3800000,
        "12": 4000000,
        "13": 1300000,
        "14": 2200000,
        "15": 1100000,
        "16": 3000000,
        "17": 5200000,
        "18": 4600000,
        "19": 2000000,
        "20": 2200000,
        "21": 1500000,
        "22": 1000000,
        "23": 5100000,
        "24": 3400000,
        "25": 2800000,
        "26": 818900,
        "27": 497200,
        "28": 1500000,
        "29": 799300,
        "30": 3100000,
        "31": 2300000,
        "32": 3300000,
        "33": 1700000,
        "34": 658600,
        "35": 1000000,
        "36": 0,
        "37": 1200000,
        "38": 1300000,
        "39": 2400000,
        "40": 862700,
        "41": 629800,
        "42": 1400000,
        "43": 2300000,
        "44": 995600,
        "45": 2000000,
        "46": 3200000,
        "47": 1900000,
        "48": 820700,
        "49": 427000,
        "50": 4300000,
        "51": 1600000,
        "52": 2200000,
        "53": 2700000,
        "54": 1200000,
        "55": 2300000,
        "56": 429600,
        "57": 1100000,
        "58": 2000000,
        "59": 1000000,
        "60": 1300000,
        "61": 393100,
        "62": 1600000,
        "63": 464500,
        "64": 2200000,
        "65": 3600000,
        "66": 867600,
        "67": 978100,
        "68": 2000000,
        "69": 2400000,
        "70": 1500000,
        "71": 985100,
        "72": 2200000,
        "73": 1800000,
        "74": 1200000,
        "75": 820600,
        "76": 807700,
        "77": 1700000,
        "78": 1000000,
        "79": 529600,
        "80": 679600,
        "81": 242800,
        "82": 3700000,
        "83": 316400,
        "84": 1000000,
        "85": 1300000,
        "86": 953500,
        "87": 2800000,
        "88": 474400,
        "89": 701200,
        "90": 570400,
        "91": 2500000,
        "92": 488800,
        "93": 2400000,
        "94": 0,
        "95": 1300000,
        "96": 3400000,
        "97": 1400000,
        "98": 704200,
        "99": 1300000,
        "100": 553600,
        "101": 1700000,
        "102": 1300000,
        "103": 1600000,
        "104": 917300,
        "105": 1000000,
        "106": 459800,
        "107": 1100000,
        "108": 675300,
        "109": 1900000,
        "110": 948200,
        "111": 852000,
        "112": 5300000,
        "113": 2200000,
        "114": 676000,
        "115": 1400000,
        "116": 3500000,
        "117": 381300,
        "118": 1200000,
        "119": 2100000,
        "120": 958100,
        "121": 802300,
        "122": 977400,
        "123": 1400000,
        "124": 918800,
        "125": 615400,
        "126": 3100000,
        "127": 650600,
        "128": 1400000,
        "129": 1800000,
        "130": 691100,
        "131": 3300000,
        "132": 1400000,
        "133": 1100000,
        "134": 1800000,
        "135": 1400000,
        "136": 1800000,
        "137": 392200,
        "138": 888700,
        "139": 420000,
        "140": 1200000,
        "141": 1900000,
        "142": 1400000,
        "143": 2100000,
        "144": 480400,
        "145": 1900000,
        "146": 1700000,
        "147": 1600000,
        "148": 235300,
        "149": 237300,
        "150": 2300000,
        "151": 564100,
        "152": 3400000,
        "153": 727900,
        "154": 492300,
        "155": 237900,
        "156": 1100000,
        "157": 968700,
        "158": 428300,
        "159": 427700,
        "160": 648000,
        "161": 439000,
        "162": 703700,
        "163": 731100,
        "164": 879400,
        "165": 422900,
        "166": 386400,
        "167": 404300,
        "168": 510900,
        "169": 2600000,
        "170": 1600000,
        "171": 54700,
        "172": 90100,
        "173": 27800,
        "174": 114800,
        "175": 600600,
        "176": 826200,
        "177": 2500000,
        "178": 1500000,
        "179": 3000000,
        "180": 417900,
        "181": 1600000,
        "182": 1200000,
        "183": 942200,
        "184": 1500000,
        "185": 4600000,
        "186": 1800000,
        "187": 1200000,
        "188": 1200000,
        "189": 1200000,
        "190": 688500,
        "191": 707800,
        "192": 855200,
        "193": 283200,
        "194": 2600000,
        "195": 572600,
        "196": 4400000,
        "197": 300500,
        "198": 1100000,
        "199": 263000,
        "200": 731100,
        "201": 820200,
        "202": 765100,
        "203": 2300000,
        "204": 690000,
        "205": 652500,
        "206": 796200,
        "207": 1600000,
        "208": 1500000,
        "209": 1000000,
        "210": 101100,
        "211": 2100000,
        "212": 3000000,
        "213": 1000000,
        "214": 326500,
        "215": 4000000,
        "216": 780800,
        "217": 860200,
        "218": 483000,
        "219": 199600,
        "220": 459800,
        "221": 2500000,
        "222": 511100,
        "223": 570400,
        "224": 218300,
        "225": 1800000,
        "226": 895400,
        "227": 239900,
        "228": 3400000,
        "229": 226600,
        "230": 1900000,
        "231": 509400,
        "232": 807700,
        "233": 404300,
        "234": 866500,
        "235": 932600,
        "236": 387700,
        "237": 1900000,
        "238": 446900,
        "239": 385000,
        "240": 96000,
        "241": 283300,
        "242": 564600,
        "243": 394300,
        "244": 314100,
        "245": 333400,
        "246": 350800,
        "247": 224400,
        "248": 233700,
        "249": 64300,
        "250": 2000000,
        "251": 167100,
        "252": 903700,
        "253": 81100,
        "254": 1000000,
        "255": 560000,
        "256": 161200,
        "257": 146100,
        "258": 452500,
        "259": 657800,
        "260": 0,
        "261": 213000,
        "262": 402200,
        "263": 1200000,
        "264": 466200,
        "265": 718000,
        "266": 373300,
        "267": 2900000,
        "268": 1000000,
        "269": 1300000,
        "270": 1400000,
        "271": 112600,
        "272": 230900,
        "273": 206300,
        "274": 147600,
        "275": 128500,
        "276": 110500,
        "277": 672100,
        "278": 317800,
        "279": 524100,
        "280": 76600,
        "281": 326100,
        "282": 722300,
        "283": 132300,
        "284": 255200,
        "285": 509400,
        "286": 1000000,
        "287": 149800,
        "288": 250800,
        "289": 1300000,
        "290": 346900,
        "291": 59800,
        "292": 248400,
        "293": 1800000,
        "294": 161300,
        "295": 797100,
        "296": 78700,
        "297": 46500,
        "298": 1700000,
        "299": 882400,
        "300": 237700,
        "301": 90400,
        "302": 127700,
        "303": 242600,
        "304": 518700,
        "305": 102100,
        "306": 152300,
        "307": 278500,
        "308": 654800,
        "309": 157500,
        "310": 310800,
        "311": 92900,
        "312": 833900,
        "313": 395900,
        "314": 0,
        "315": 315800,
        "316": 590100,
        "317": 719400,
        "318": 944300,
        "319": 0,
        "320": 220500,
        "321": 83500,
        "322": 886000,
        "323": 137200,
        "324": 319600,
        "325": 158300,
        "326": 190800,
        "327": 200500,
        "328": 650200,
        "329": 122300,
        "330": 613500,
        "331": 927000,
        "332": 94600,
        "333": 475100,
        "334": 829700,
        "335": 682600,
        "336": 495700,
        "337": 152900,
        "338": 103400,
        "339": 952900,
        "340": 577800,
        "341": 805500,
        "342": 573100,
        "343": 181500,
        "344": 338000,
        "345": 269400,
        "346": 85600,
        "347": 121600,
        "348": 478500,
        "349": 269900,
        "350": 595200,
        "351": 189600,
        "352": 668500,
        "353": 100200,
        "354": 20200,
        "355": 173000,
        "356": 87800,
        "357": 233500,
        "358": 173700,
        "359": 217600,
        "360": 127200,
        "361": 478400,
        "362": 114600,
        "363": 42800,
        "364": 25800,
        "365": 159200,
        "366": 39000,
        "367": 295800,
        "368": 23700,
        "369": 1400000,
        "370": 245900,
        "371": 24600,
        "372": 176200,
        "373": 127000,
        "374": 213000,
        "375": 671200,
        "376": 163700,
        "377": 839400,
        "378": 42900,
        "379": 328900,
        "380": 248200,
        "381": 240400,
        "382": 463400,
        "383": 144900,
        "384": 312700,
        "385": 219700,
        "386": 149200,
        "387": 2000000,
        "388": 309500,
        "389": 376400,
        "390": 111600,
        "391": 360200,
        "392": 540800,
        "393": 31300,
        "394": 698100,
        "395": 22900,
        "396": 453600,
        "397": 121100,
        "398": 55400,
        "399": 605700,
        "400": 159700,
        "401": 493200,
        "402": 504000,
        "403": 166300,
        "404": 431200,
        "405": 358700,
        "406": 270100,
        "407": 98800,
        "408": 312100,
        "409": 297100,
        "410": 268500,
        "411": 627900,
        "412": 1700000,
        "413": 48800,
        "414": 1000000,
        "415": 220200,
        "416": 233700,
        "417": 141400,
        "418": 42500,
        "419": 147900,
        "420": 165000,
        "421": 946800,
        "422": 15500,
        "423": 297300,
        "424": 1400000,
        "425": 513000,
        "426": 223000,
        "427": 119300,
        "428": 394900,
        "429": 1100000,
        "430": 472200,
        "431": 936100,
        "432": 305200,
        "433": 212600,
        "434": 506600,
        "435": 339300,
        "436": 278800,
        "437": 1100000,
        "438": 146500,
        "439": 290100,
        "440": 59400,
        "441": 443100,
        "442": 378500,
        "443": 16300,
        "444": 127900,
        "445": 112700,
        "446": 173200,
        "447": 1400000,
        "448": 495100,
        "449": 107700,
        "450": 246400,
        "451": 41400,
        "452": 111800,
        "453": 171500,
        "454": 929300,
        "455": 326500,
        "456": 237500,
        "457": 171800,
        "458": 154700,
        "459": 236100,
        "460": 206200,
        "461": 799200,
        "462": 269400,
        "463": 604600,
        "464": 685900,
        "465": 340000,
        "466": 280700,
        "467": 177600,
        "468": 263400,
        "469": 431700,
        "470": 356700,
        "471": 131800,
        "472": 115900,
        "473": 116500,
        "474": 363800,
        "475": 234600,
        "476": 563800,
        "477": 64000,
        "478": 77500,
        "479": 42200,
        "480": 162800,
        "481": 592600,
        "482": 481100,
        "483": 252700,
        "484": 882500,
        "485": 277600,
        "486": 178500,
        "487": 261700,
        "488": 583900,
        "489": 308100,
        "490": 73200,
        "491": 452700,
        "492": 599300,
        "493": 133200,
        "494": 171600,
        "495": 420400,
        "496": 147800,
        "497": 270200,
        "498": 55300,
        "499": 68500,
        "500": 305000,
        "501": 202200,
        "502": 24400,
        "503": 0,
        "504": 280800,
        "505": 71800,
        "506": 87700,
        "507": 122600,
        "508": 82200,
        "509": 815600,
        "510": 399700,
        "511": 397200,
        "512": 74400,
        "513": 0,
        "514": 191300,
        "515": 162300,
        "516": 79400,
        "517": 220000,
        "518": 79400,
        "519": 141700,
        "520": 942300,
        "521": 216900,
        "522": 225500,
        "523": 281500,
        "524": 28600,
        "525": 988200,
        "526": 593300,
        "527": 717100,
        "528": 2700000,
        "529": 445100,
        "530": 611400,
        "531": 359800,
        "532": 560300,
        "533": 43900,
        "534": 152100,
        "535": 437200,
        "536": 411500,
        "537": 77400,
        "538": 141000,
        "539": 316100,
        "540": 185700,
        "541": 160300,
        "542": 432500,
        "543": 75200,
        "544": 1200000,
        "545": 315900,
        "546": 149500,
        "547": 258600,
        "548": 0,
        "549": 38700,
        "550": 182300,
        "551": 1000000,
        "552": 610100,
        "553": 23100,
        "554": 56800,
        "555": 1100000,
        "556": 364700,
        "557": 86100,
        "558": 558200,
        "559": 526700,
        "560": 264300,
        "561": 82200,
        "562": 13600,
        "563": 332400,
        "564": 61400,
        "565": 58000,
        "566": 35000,
        "567": 24500,
        "568": 19000,
        "569": 565900,
        "570": 61200,
        "571": 65800,
        "572": 353800,
        "573": 427100,
        "574": 67300,
        "575": 112400,
        "576": 11100,
        "577": 1100000,
        "578": 98400,
        "579": 78100,
        "580": 78900,
        "581": 184400,
        "582": 213700,
        "583": 71000,
        "584": 63100,
        "585": 18400,
        "586": 265300,
        "587": 314000,
        "588": 620500,
        "589": 153300,
        "590": 625000,
        "591": 111500,
        "592": 31600,
        "593": 150200,
        "594": 463100,
        "595": 236000,
        "596": 19900,
        "597": 60300,
        "598": 73200,
        "599": 379800,
        "600": 553900,
        "601": 0,
        "602": 157600,
        "603": 83000,
        "604": 288100,
        "605": 31400,
        "606": 364900,
        "607": 86700,
        "608": 169900,
        "609": 68800,
        "610": 120800,
        "611": 12300,
        "612": 237400,
        "613": 56100,
        "614": 56100,
        "615": 252400,
        "616": 216400,
        "617": 30900,
        "618": 101200,
        "619": 0,
        "620": 375300,
        "621": 98200,
        "622": 195800,
        "623": 20500,
        "624": 151400,
        "625": 190200,
        "626": 0,
        "627": 203200,
        "628": 74700,
        "629": 89700,
        "630": 100400,
        "631": 21000,
        "632": 458400,
        "633": 153300,
        "634": 161700,
        "635": 96100,
        "636": 152700,
        "637": 78100,
        "638": 127400,
        "639": 143900,
        "640": 40900,
        "641": 149400,
        "642": 869700,
        "643": 136500,
        "644": 326400,
        "645": 127600,
        "646": 103100,
        "647": 236700,
        "648": 36200,
        "649": 52100,
        "650": 887900,
        "651": 304200,
        "652": 47900,
        "653": 63900,
        "654": 194100,
        "655": 143600,
        "656": 81400,
        "657": 253800,
        "658": 377200,
        "659": 150300,
        "660": 104900,
        "661": 482300,
        "662": 79500,
        "663": 145000,
        "664": 35800,
        "665": 433700,
        "666": 115400,
        "667": 69800,
        "668": 525600,
        "669": 66800,
        "670": 154500,
        "671": 818700,
        "672": 2100000,
        "673": 262800,
        "674": 40900,
        "675": 66100,
        "676": 99300,
        "677": 436000,
        "678": 29700,
        "679": 59500,
        "680": 296100,
        "681": 158000,
        "682": 218600,
        "683": 131700,
        "684": 106900,
        "685": 193200,
        "686": 22200,
        "687": 42800,
        "688": 51700,
        "689": 191000,
        "690": 182400,
        "691": 462200,
        "692": 39100,
        "693": 72700,
        "694": 76200,
        "695": 364800,
        "696": 46100,
        "697": 16900,
        "698": 446800,
        "699": 840300,
        "700": 25100,
        "701": 287800,
        "702": 96500,
        "703": 57300,
        "704": 62700,
        "705": 804900,
        "706": 20800,
        "707": 129199,
        "708": 85300,
        "709": 116800,
        "710": 238800,
        "711": 289200,
        "712": 71700,
        "713": 522500,
        "714": 269300,
        "715": 106600,
        "716": 56600,
        "717": 151700,
        "718": 196200,
        "719": 30900,
        "720": 24400,
        "721": 508300,
        "722": 287700,
        "723": 483800,
        "724": 46200,
        "725": 313300,
        "726": 217700,
        "727": 181200,
        "728": 59500,
        "729": 374600,
        "730": 1100000,
        "731": 151600,
        "732": 42100,
        "733": 447300,
        "734": 165900,
        "735": 30300,
        "736": 196000,
        "737": 243100,
        "738": 320300,
        "739": 311000,
        "740": 236500,
        "741": 91400,
        "742": 204200,
        "743": 153800,
        "744": 524600,
        "745": 61100,
        "746": 163700,
        "747": 249300,
        "748": 137500,
        "749": 247100,
        "750": 161400,
        "751": 30200,
        "752": 10500,
        "753": 232000,
        "754": 43000,
        "755": 137500,
        "756": 148700,
        "757": 98700,
        "758": 56800,
        "759": 43700,
        "760": 8000,
        "761": 1300000,
        "762": 369100,
        "763": 90300,
        "764": 2000000,
        "765": 107800,
        "766": 203000,
        "767": 211900,
        "768": 495200,
        "769": 19500,
        "770": 314400,
        "771": 50400,
        "772": 142400,
        "773": 195900,
        "774": 275100,
        "775": 135000,
        "776": 105200,
        "777": 244100,
        "778": 290200,
        "779": 995000,
        "780": 124800,
        "781": 41700,
        "782": 619400,
        "783": 38200,
        "784": 41900,
        "785": 22300,
        "786": 370800,
        "787": 67800,
        "788": 704600,
        "789": 99000,
        "790": 33900,
        "791": 208400,
        "792": 400800,
        "793": 269800,
        "794": 288400,
        "795": 448100,
        "796": 18300,
        "797": 100300,
        "798": 100700,
        "799": 64300,
        "800": 39800,
        "801": 29000,
        "802": 58900,
        "803": 168600,
        "804": 257800,
        "805": 381700,
        "806": 220000,
        "807": 51700,
        "808": 72200,
        "809": 280500,
        "810": 337200,
        "811": 183600,
        "812": 54900,
        "813": 251400,
        "814": 63100,
        "815": 73800,
        "816": 92400,
        "817": 26700,
        "818": 37900,
        "819": 166000,
        "820": 22900,
        "821": 57000,
        "822": 295400,
        "823": 55300,
        "824": 11200,
        "825": 244600,
        "826": 83900,
        "827": 206500,
        "828": 71200,
        "829": 231800,
        "830": 675200,
        "831": 623600,
        "832": 431400,
        "833": 96000,
        "834": 199200,
        "835": 200600,
        "836": 42200,
        "837": 45600,
        "838": 83500,
        "839": 655900,
        "840": 207900,
        "841": 577300,
        "842": 24000,
        "843": 18700,
        "844": 157500,
        "845": 77100,
        "846": 106200,
        "847": 40100,
        "848": 74100,
        "849": 148100,
        "850": 447500,
        "851": 40800,
        "852": 535600,
        "853": 139200,
        "854": 0,
        "855": 233700,
        "856": 147900,
        "857": 25700,
        "858": 92200,
        "859": 47300,
        "860": 142900,
        "861": 35400,
        "862": 696600,
        "863": 70500,
        "864": 348200,
        "865": 28300,
        "866": 169400,
        "867": 55100,
        "868": 57500,
        "869": 345000,
        "870": 118300,
        "871": 35000,
        "872": 65200,
        "873": 72900,
        "874": 123000,
        "875": 105000,
        "876": 25600,
        "877": 835300,
        "878": 53100,
        "879": 26300,
        "880": 177500,
        "881": 283500,
        "882": 1200000,
        "883": 21600,
        "884": 48000,
        "885": 226600,
        "886": 25600,
        "887": 836100,
        "888": 66400,
        "889": 303600,
        "890": 17600,
        "891": 113400,
        "892": 273800,
        "893": 314300,
        "894": 35800,
        "895": 166000,
        "896": 79900,
        "897": 83300,
        "898": 169300,
        "899": 33400,
        "900": 29500,
        "901": 31800,
        "902": 126500,
        "903": 64099,
        "904": 71100,
        "905": 55800,
        "906": 59600,
        "907": 230900,
        "908": 36800,
        "909": 245700,
        "910": 53000,
        "911": 207200,
        "912": 34600,
        "913": 121100,
        "914": 56100,
        "915": 164000,
        "916": 25200,
        "917": 713800,
        "918": 165600,
        "919": 335700,
        "920": 10300,
        "921": 244100,
        "922": 136200,
        "923": 149800,
        "924": 223800,
        "925": 0,
        "926": 323200,
        "927": 44600,
        "928": 31500,
        "929": 16000,
        "930": 36900,
        "931": 45000,
        "932": 267100,
        "933": 55400,
        "934": 36600,
        "935": 70700,
        "936": 19400,
        "937": 294700,
        "938": 24500,
        "939": 42600,
        "940": 284100,
        "941": 796000,
        "942": 25500,
        "943": 316600,
        "944": 120300,
        "945": 29100,
        "946": 235800,
        "947": 118400,
        "948": 110100,
        "949": 67600,
        "950": 58600,
        "951": 28800,
        "952": 238500,
        "953": 62000,
        "954": 334800,
        "955": 94000,
        "956": 134700,
        "957": 236000,
        "958": 30400,
        "959": 346200,
        "960": 524400,
        "961": 217700,
        "962": 34500,
        "963": 75100,
        "964": 223300,
        "965": 124700,
        "966": 146800,
        "967": 505400,
        "968": 221800,
        "969": 35300,
        "970": 220600,
        "971": 722700,
        "972": 101600,
        "973": 58600,
        "974": 18400,
        "975": 418600,
        "976": 40500,
        "977": 14700,
        "978": 346900,
        "979": 228900,
        "980": 0,
        "981": 246200,
        "982": 14700,
        "983": 130500,
        "984": 195900,
        "985": 26500,
        "986": 197800,
        "987": 276600,
        "988": 0,
        "989": 161300,
        "990": 17900,
        "991": 50800,
        "992": 142900,
        "993": 244100,
        "994": 122000,
        "995": 278700,
        "996": 43400,
        "997": 218600,
        "998": 137600,
        "999": 152800,
        "1000": 175300,
        "1001": 169200,
        "1002": 6400,
        "1003": 268200,
        "1004": 0,
        "1005": 31500,
        "1006": 219200,
        "1007": 202100,
        "1008": 376200,
        "1009": 201900,
        "1010": 127800,
        "1011": 34400,
        "1012": 132900,
        "1013": 720100,
        "1014": 113500,
        "1015": 127200,
        "1016": 148500,
        "1017": 376300,
        "1018": 289900,
        "1019": 34000,
        "1020": 17800,
        "1021": 445000,
        "1022": 92800,
        "1023": 94700,
        "1024": 67600,
        "1025": 233900,
        "1026": 141300,
        "1027": 126000,
        "1028": 56800,
        "1029": 118900,
        "1030": 23900,
        "1031": 22400,
        "1032": 78800,
        "1033": 187600,
        "1034": 50700,
        "1035": 82800,
        "1036": 127200,
        "1037": 192400,
        "1038": 82700,
        "1039": 99300,
        "1040": 54600,
        "1041": 226400,
        "1042": 32200,
        "1043": 647500,
        "1044": 240000,
        "1045": 255400,
        "1046": 224700,
        "1047": 111300,
        "1048": 50900,
        "1049": 96700,
        "1050": 28200,
        "1051": 264600,
        "1052": 39000,
        "1053": 30800,
        "1054": 51600,
        "1055": 120800,
        "1056": 136400,
        "1057": 223800,
        "1058": 236700,
        "1059": 7100,
        "1060": 17900,
        "1061": 154900,
        "1062": 76900,
        "1063": 88200,
        "1064": 94200,
        "1065": 136200,
        "1066": 95900,
        "1067": 52300,
        "1068": 35400,
        "1069": 157900,
        "1070": 45100,
        "1071": 42000,
        "1072": 60500,
        "1073": 61100,
        "1074": 30800,
        "1075": 52400,
        "1076": 65900,
        "1077": 317500,
        "1078": 142400,
        "1079": 80200,
        "1080": 1100000,
        "1081": 19300,
        "1082": 45400,
        "1083": 16200,
        "1084": 282500,
        "1085": 82200,
        "1086": 236700,
        "1087": 36400,
        "1088": 172700,
        "1089": 127900,
        "1090": 126500,
        "1091": 70100,
        "1092": 35700,
        "1093": 0,
        "1094": 19200,
        "1095": 129900,
        "1096": 6700,
        "1097": 85700,
        "1098": 395200,
        "1099": 222700,
        "1100": 79600,
        "1101": 302500,
        "1102": 125400,
        "1103": 398400,
        "1104": 169200,
        "1105": 216500,
        "1106": 9000,
        "1107": 740100,
        "1108": 40500,
        "1109": 255300,
        "1110": 64200,
        "1111": 166900,
        "1112": 113900,
        "1113": 49200,
        "1114": 1900000,
        "1115": 253400,
        "1116": 285600,
        "1117": 38900,
        "1118": 247200,
        "1119": 206800,
        "1120": 34900,
        "1121": 37700,
        "1122": 57100,
        "1123": 350800,
        "1124": 267600,
        "1125": 326500,
        "1126": 20000,
        "1127": 169100,
        "1128": 179000,
        "1129": 127500,
        "1130": 45900,
        "1131": 91200,
        "1132": 54500,
        "1133": 10800,
        "1134": 79900,
        "1135": 173600,
        "1136": 236700,
        "1137": 75800,
        "1138": 844600,
        "1139": 48500,
        "1140": 320200,
        "1141": 15600,
        "1142": 146300,
        "1143": 241400,
        "1144": 86000,
        "1145": 18100,
        "1146": 11400,
        "1147": 349800,
        "1148": 41300,
        "1149": 107900,
        "1150": 48700,
        "1151": 260500,
        "1152": 410900,
        "1153": 57100,
        "1154": 149300,
        "1155": 100100,
        "1156": 127700,
        "1157": 117200,
        "1158": 16000,
        "1159": 28700,
        "1160": 497900,
        "1161": 21000,
        "1162": 67600,
        "1163": 15800,
        "1164": 331000,
        "1165": 45600,
        "1166": 29700,
        "1167": 143300,
        "1168": 282300,
        "1169": 173800,
        "1170": 38000,
        "1171": 191100,
        "1172": 45700,
        "1173": 33800,
        "1174": 171600,
        "1175": 19100,
        "1176": 21700,
        "1177": 37100,
        "1178": 98600,
        "1179": 91700,
        "1180": 57000,
        "1181": 387900,
        "1182": 31400,
        "1183": 32900,
        "1184": 59500,
        "1185": 63400,
        "1186": 22100,
        "1187": 265100,
        "1188": 131800,
        "1189": 579400,
        "1190": 150300,
        "1191": 29500,
        "1192": 321000,
        "1193": 113300,
        "1194": 210000,
        "1195": 21700,
        "1196": 0,
        "1197": 12300,
        "1198": 59800,
        "1199": 33300,
        "1200": 25600,
        "1201": 9800,
        "1202": 255400,
        "1203": 13300,
        "1204": 18900,
        "1205": 57600,
        "1206": 294600,
        "1207": 38500,
        "1208": 149200,
        "1209": 18000,
        "1210": 203800,
        "1211": 166100,
        "1212": 42700,
        "1213": 60600,
        "1214": 379500,
        "1215": 148200,
        "1216": 26500,
        "1217": 11500,
        "1218": 65400,
        "1219": 9400,
        "1220": 10700,
        "1221": 12700,
        "1222": 160300,
        "1223": 16200,
        "1224": 86500,
        "1225": 103900,
        "1226": 141600,
        "1227": 290700,
        "1228": 23000,
        "1229": 251800,
        "1230": 282500,
        "1231": 178800,
        "1232": 32100,
        "1233": 84400,
        "1234": 190700,
        "1235": 235100,
        "1236": 13800,
        "1237": 112000,
        "1238": 279400,
        "1239": 27100,
        "1240": 53700,
        "1241": 164000,
        "1242": 45800,
        "1243": 16700,
        "1244": 91300,
        "1245": 389100,
        "1246": 198900,
        "1247": 6000,
        "1248": 368400,
        "1249": 520500,
        "1250": 96800,
        "1251": 41000,
        "1252": 18700,
        "1253": 267800,
        "1254": 62400,
        "1255": 226700,
        "1256": 30800,
        "1257": 33700,
        "1258": 953500,
        "1259": 67500,
        "1260": 9600,
        "1261": 96000,
        "1262": 270300,
        "1263": 361500,
        "1264": 91800,
        "1265": 9100,
        "1266": 705500,
        "1267": 358600,
        "1268": 113300,
        "1269": 21900,
        "1270": 7100,
        "1271": 255100,
        "1272": 228700,
        "1273": 37600,
        "1274": 32000,
        "1275": 138500,
        "1276": 41300,
        "1277": 135200,
        "1278": 110700,
        "1279": 266200,
        "1280": 199400,
        "1281": 14000,
        "1282": 11700,
        "1283": 366100,
        "1284": 24500,
        "1285": 142500,
        "1286": 27800,
        "1287": 319000,
        "1288": 41800,
        "1289": 34200,
        "1290": 12900,
        "1291": 165000,
        "1292": 136600,
        "1293": 14900,
        "1294": 4900,
        "1295": 360500,
        "1296": 18900,
        "1297": 29700,
        "1298": 74900,
        "1299": 29400,
        "1300": 73800,
        "1301": 7500,
        "1302": 245600,
        "1303": 177600,
        "1304": 468600,
        "1305": 10200,
        "1306": 16500,
        "1307": 6400,
        "1308": 38800,
        "1309": 14200,
        "1310": 23800,
        "1311": 7900,
        "1312": 149800,
        "1313": 68100,
        "1314": 110400,
        "1315": 11300,
        "1316": 26700,
        "1317": 187700,
        "1318": 42400,
        "1319": 168400,
        "1320": 327900,
        "1321": 44000,
        "1322": 24700,
        "1323": 19600,
        "1324": 1300000,
        "1325": 150800,
        "1326": 0,
        "1327": 24400,
        "1328": 61300,
        "1329": 16600,
        "1330": 29300,
        "1331": 10500,
        "1332": 1100000,
        "1333": 133500,
        "1334": 116900,
        "1335": 11900,
        "1336": 240100,
        "1337": 32100,
        "1338": 30800,
        "1339": 27200,
        "1340": 119000,
        "1341": 45100,
        "1342": 7300,
        "1343": 22800,
        "1344": 26100,
        "1345": 5600,
        "1346": 160200,
        "1347": 116400,
        "1348": 352100,
        "1349": 23100,
        "1350": 77200,
        "1351": 141500,
        "1352": 63400,
        "1353": 33100,
        "1354": 20700,
        "1355": 62700,
        "1356": 61300,
        "1357": 76300,
        "1358": 19800,
        "1359": 32299,
        "1360": 7500,
        "1361": 90300,
        "1362": 118900,
        "1363": 112500,
        "1364": 6900,
        "1365": 186500,
        "1366": 60900,
        "1367": 26500,
        "1368": 9800,
        "1369": 355700,
        "1370": 296300,
        "1371": 45900,
        "1372": 21400,
        "1373": 104200,
        "1374": 81200,
        "1375": 31400,
        "1376": 4300,
        "1377": 376100,
        "1378": 163600,
        "1379": 114100,
        "1380": 21200,
        "1381": 59200,
        "1382": 164800,
        "1383": 33600,
        "1384": 7700,
        "1385": 93800,
        "1386": 127300,
        "1387": 106600,
        "1388": 9800,
        "1389": 48400,
        "1390": 28100,
        "1391": 23000,
        "1392": 40500,
        "1393": 77100,
        "1394": 52100,
        "1395": 30100,
        "1396": 68400,
        "1397": 181900,
        "1398": 21600,
        "1399": 9800,
        "1400": 188200,
        "1401": 28500,
        "1402": 27300,
        "1403": 15600,
        "1404": 51000,
        "1405": 104700,
        "1406": 49600,
        "1407": 10300,
        "1408": 255700,
        "1409": 136500,
        "1410": 183400,
        "1411": 16300,
        "1412": 15500,
        "1413": 70400,
        "1414": 29300,
        "1415": 36000,
        "1416": 7300,
        "1417": 51800,
        "1418": 74800,
        "1419": 96300,
        "1420": 29500,
        "1421": 13400,
        "1422": 48400,
        "1423": 192900,
        "1424": 12500,
        "1425": 4300,
        "1426": 143500,
        "1427": 71200,
        "1428": 5700,
        "1429": 0,
        "1430": 309600,
        "1431": 22900,
        "1432": 193100,
        "1433": 11700,
        "1434": 134900,
        "1435": 70700,
        "1436": 136300,
        "1437": 42200,
        "1438": 7200,
        "1439": 257899,
        "1440": 13200,
        "1441": 8100,
        "1442": 576400,
        "1443": 111000,
        "1444": 0,
        "1445": 7900,
        "1446": 48600,
        "1447": 174400,
        "1448": 21200,
        "1449": 873500,
        "1450": 109500,
        "1451": 10100,
        "1452": 274100,
        "1453": 0,
        "1454": 29900,
        "1455": 144300,
        "1456": 5900,
        "1457": 106500,
        "1458": 51900,
        "1459": 13800,
        "1460": 63000,
        "1461": 206500,
        "1462": 21500,
        "1463": 26800,
        "1464": 9200,
        "1465": 17900,
        "1466": 12400,
        "1467": 40700,
        "1468": 14600,
        "1469": 8800,
        "1470": 3900,
        "1471": 57600,
        "1472": 107200,
        "1473": 207000,
        "1474": 60200,
        "1475": 130800,
        "1476": 77100,
        "1477": 39700,
        "1478": 12300,
        "1479": 58100,
        "1480": 478900,
        "1481": 47100,
        "1482": 80800,
        "1483": 6700,
        "1484": 158400,
        "1485": 153300,
        "1486": 145200,
        "1487": 30500,
        "1488": 6000,
        "1489": 85700,
        "1490": 72300,
        "1491": 27700,
        "1492": 13500,
        "1493": 107200,
        "1494": 132300,
        "1495": 17600,
        "1496": 8500,
        "1497": 44500,
        "1498": 106500,
        "1499": 10100,
        "1500": 9900,
        "1501": 284800,
        "1502": 31400,
        "1503": 8900,
        "1504": 167700,
        "1505": 138200,
        "1506": 77200,
        "1507": 428000,
        "1508": 24900,
        "1509": 75900,
        "1510": 8900,
        "1511": 95000,
        "1512": 26400,
        "1513": 23200,
        "1514": 7600,
        "1515": 50100,
        "1516": 0,
        "1517": 11000,
        "1518": 41800,
        "1519": 166200,
        "1520": 9000,
        "1521": 9100,
        "1522": 75600,
        "1523": 71000,
        "1524": 241600,
        "1525": 147100,
        "1526": 16300,
        "1527": 12400,
        "1528": 63500,
        "1529": 33300,
        "1530": 31500,
        "1531": 83700,
        "1532": 32299,
        "1533": 14400,
        "1534": 29400,
        "1535": 83600,
        "1536": 233600,
        "1537": 20400,
        "1538": 58100,
        "1539": 4400,
        "1540": 68500,
        "1541": 177900,
        "1542": 17800,
        "1543": 17300,
        "1544": 45000,
        "1545": 31400,
        "1546": 34500,
        "1547": 23300,
        "1548": 59200,
        "1549": 13000,
        "1550": 18300,
        "1551": 9900,
        "1552": 226800,
        "1553": 29400,
        "1554": 14700,
        "1555": 18400,
        "1556": 61300,
        "1557": 55000,
        "1558": 22900,
        "1559": 7500,
        "1560": 79500,
        "1561": 22700,
        "1562": 19600,
        "1563": 10400,
        "1564": 199400,
        "1565": 46500,
        "1566": 100000,
        "1567": 35000,
        "1568": 518400,
        "1569": 206200,
        "1570": 12400,
        "1571": 55400,
        "1572": 28200,
        "1573": 132700,
        "1574": 16100,
        "1575": 79100,
        "1576": 116700,
        "1577": 21300,
        "1578": 11600,
        "1579": 307800,
        "1580": 48200,
        "1581": 39000,
        "1582": 13400,
        "1583": 314900,
        "1584": 99600,
        "1585": 28300,
        "1586": 3700,
        "1587": 97600,
        "1588": 32800,
        "1589": 21400,
        "1590": 11300,
        "1591": 89600,
        "1592": 214000,
        "1593": 49000,
        "1594": 14100,
        "1595": 68700,
        "1596": 331200,
        "1597": 122800,
        "1598": 7600,
        "1599": 81300,
        "1600": 158100,
        "1601": 35800,
        "1602": 50100,
        "1603": 46600,
        "1604": 61800,
        "1605": 54300,
        "1606": 19700,
        "1607": 16700,
        "1608": 69000,
        "1609": 61900,
        "1610": 440500,
        "1611": 51800,
        "1612": 101800,
        "1613": 31100,
        "1614": 13800,
        "1615": 9900,
        "1616": 138800,
        "1617": 83800,
        "1618": 16700,
        "1619": 10800,
        "1620": 67200,
        "1621": 39300,
        "1622": 23800,
        "1623": 13100,
        "1624": 79500,
        "1625": 23200,
        "1626": 28200,
        "1627": 83000,
        "1628": 50300,
        "1629": 47800,
        "1630": 8800,
        "1631": 67500,
        "1632": 280400,
        "1633": 23800,
        "1634": 18300,
        "1635": 103400,
        "1636": 45000,
        "1637": 120700,
        "1638": 12400,
        "1639": 39300,
        "1640": 147700,
        "1641": 135600,
        "1642": 24700,
        "1643": 74700,
        "1644": 154000,
        "1645": 15400,
        "1646": 42100,
        "1647": 20400,
        "1648": 30300,
        "1649": 12700,
        "1650": 88000,
        "1651": 20500,
        "1652": 33400,
        "1653": 13000,
        "1654": 53800,
        "1655": 30100,
        "1656": 16200,
        "1657": 5000,
        "1658": 408900,
        "1659": 23700,
        "1660": 69500,
        "1661": 252400,
        "1662": 38900,
        "1663": 9000,
        "1664": 44600,
        "1665": 259300,
        "1666": 45900,
        "1667": 13800,
        "1668": 47300,
        "1669": 22300,
        "1670": 34500,
        "1671": 7700,
        "1672": 574100,
        "1673": 253300,
        "1674": 112200,
        "1675": 29900,
        "1676": 23600,
        "1677": 12700,
        "1678": 42200,
        "1679": 154700,
        "1680": 8400,
        "1681": 77100,
        "1682": 90900,
        "1683": 26100,
        "1684": 17700,
        "1685": 85300,
        "1686": 67000,
        "1687": 87500,
        "1688": 17500,
        "1689": 12200,
        "1690": 93700,
        "1691": 82400,
        "1692": 37000,
        "1693": 35800,
        "1694": 153100,
        "1695": 22000,
        "1696": 16500,
        "1697": 65700,
        "1698": 17200,
        "1699": 69800,
        "1700": 66200,
        "1701": 33800,
        "1702": 28900,
        "1703": 19900,
        "1704": 97900,
        "1705": 27400,
        "1706": 20900,
        "1707": 62600,
        "1708": 35900,
        "1709": 145400,
        "1710": 7400,
        "1711": 43500,
        "1712": 25600,
        "1713": 23400,
        "1714": 28900,
        "1715": 45300,
        "1716": 37400,
        "1717": 27100,
        "1718": 45100,
        "1719": 178900,
        "1720": 33700,
        "1721": 40900,
        "1722": 32600,
        "1723": 100600,
        "1724": 61800,
        "1725": 27700,
        "1726": 23100,
        "1727": 11900,
        "1728": 77400,
        "1729": 26700,
        "1730": 11500,
        "1731": 0,
        "1732": 28700,
        "1733": 20000,
        "1734": 7700,
        "1735": 115000,
        "1736": 25500,
        "1737": 70700,
        "1738": 196300,
        "1739": 26100,
        "1740": 15100,
        "1741": 12800,
        "1742": 50800,
        "1743": 159100,
        "1744": 26800,
        "1745": 6500,
        "1746": 0,
        "1747": 51400,
        "1748": 29600,
        "1749": 43600,
        "1750": 130199,
        "1751": 24100,
        "1752": 15900,
        "1753": 257000,
        "1754": 85900,
        "1755": 15700,
        "1756": 239300,
        "1757": 119500,
        "1758": 39300,
        "1759": 80200,
        "1760": 78900,
        "1761": 61400,
        "1762": 34200,
        "1763": 40200,
        "1764": 140400,
        "1765": 60400,
        "1766": 90400,
        "1767": 116500,
        "1768": 170000,
        "1769": 0,
        "1770": 35900,
        "1771": 12900,
        "1772": 59000,
        "1773": 34400,
        "1774": 23600,
        "1775": 33800,
        "1776": 42200,
        "1777": 145600,
        "1778": 9500,
        "1779": 120500,
        "1780": 378800,
        "1781": 137400,
        "1782": 92700,
        "1783": 54600,
        "1784": 100000,
        "1785": 16200,
        "1786": 22800,
        "1787": 52000,
        "1788": 32400,
        "1789": 124100,
        "1790": 217400,
        "1791": 29100,
        "1792": 16800,
        "1793": 24400,
        "1794": 40300,
        "1795": 13900,
        "1796": 11200,
        "1797": 193400,
        "1798": 49400,
        "1799": 57600,
        "1800": 111500,
        "1801": 311600,
        "1802": 150200,
        "1803": 25200,
        "1804": 57700,
        "1805": 51400,
        "1806": 22400,
        "1807": 21500,
        "1808": 14100,
        "1809": 97000,
        "1810": 41700,
        "1811": 23000,
        "1812": 14200,
        "1813": 36800,
        "1814": 156500,
        "1815": 20100,
        "1816": 24500,
        "1817": 17200,
        "1818": 85100,
        "1819": 7200,
        "1820": 232100,
        "1821": 69400,
        "1822": 38000,
        "1823": 148100,
        "1824": 49300,
        "1825": 27400,
        "1826": 68100,
        "1827": 13600,
        "1828": 32000,
        "1829": 23600,
        "1830": 18800,
        "1831": 11300,
        "1832": 62700,
        "1833": 23900,
        "1834": 20900,
        "1835": 27800,
        "1836": 70500,
        "1837": 69300,
        "1838": 110700,
        "1839": 0,
        "1840": 47800,
        "1841": 80000,
        "1842": 13900,
        "1843": 207200,
        "1844": 23400,
        "1845": 23100,
        "1846": 16800,
        "1847": 45300,
        "1848": 25300,
        "1849": 72700,
        "1850": 10700,
        "1851": 37200,
        "1852": 129400,
        "1853": 11700,
        "1854": 236800,
        "1855": 191700,
        "1856": 202900,
        "1857": 13100,
        "1858": 42700,
        "1859": 175500,
        "1860": 9600,
        "1861": 48400,
        "1862": 22100,
        "1863": 23400,
        "1864": 4800,
        "1865": 66200,
        "1866": 27500,
        "1867": 18900,
        "1868": 10200,
        "1869": 51600,
        "1870": 24400,
        "1871": 14600,
        "1872": 14000,
        "1873": 25300,
        "1874": 21900,
        "1875": 13700,
        "1876": 12900,
        "1877": 31600,
        "1878": 17500,
        "1879": 23700,
        "1880": 9700,
        "1881": 94000,
        "1882": 33700,
        "1883": 22400,
        "1884": 26000,
        "1885": 35500,
        "1886": 27500,
        "1887": 20800,
        "1888": 7500,
        "1889": 118500,
        "1890": 29700,
        "1891": 0,
        "1892": 4400,
        "1893": 137800,
        "1894": 21800,
        "1895": 22700,
        "1896": 8200,
        "1897": 248400,
        "1898": 23400,
        "1899": 101900,
        "1900": 8400,
        "1901": 66700,
        "1902": 68500,
        "1903": 19600,
        "1904": 12800,
        "1905": 44300,
        "1906": 21500,
        "1907": 59300,
        "1908": 9600,
        "1909": 78500,
        "1910": 32800,
        "1911": 11100,
        "1912": 14700,
        "1913": 51100,
        "1914": 30200,
        "1915": 20800,
        "1916": 10400,
        "1917": 52300,
        "1918": 27200,
        "1919": 13000,
        "1920": 7800,
        "1921": 26400,
        "1922": 17900,
        "1923": 16300,
        "1924": 6000,
        "1925": 45400,
        "1926": 30900,
        "1927": 10100,
        "1928": 5200,
        "1929": 153400,
        "1930": 30500,
        "1931": 21200,
        "1932": 12600,
        "1933": 38200,
        "1934": 27400,
        "1935": 17300,
        "1936": 6700,
        "1937": 193400,
        "1938": 42300,
        "1939": 12200,
        "1940": 17700,
        "1941": 65600,
        "1942": 30400,
        "1943": 19000,
        "1944": 0,
        "1945": 33100,
        "1946": 25900,
        "1947": 19700,
        "1948": 19100,
        "1949": 49900,
        "1950": 31100,
        "1951": 117500,
        "1952": 43000,
        "1953": 20800,
        "1954": 8000,
        "1955": 39800,
        "1956": 19000,
        "1957": 32500,
        "1958": 203900,
        "1959": 28300,
        "1960": 5200,
        "1961": 21200,
        "1962": 9100,
        "1963": 24600,
        "1964": 148700,
        "1965": 440100,
        "1966": 153000,
        "1967": 49600,
        "1968": 112600,
        "1969": 11400,
        "1970": 47300,
        "1971": 179400,
        "1972": 53600,
        "1973": 150800,
        "1974": 5700,
        "1975": 47800,
        "1976": 192300,
        "1977": 212200,
        "1978": 60300,
        "1979": 29500,
        "1980": 33000,
        "1981": 22300,
        "1982": 68800,
        "1983": 70000,
        "1984": 33200,
        "1985": 30600,
        "1986": 10500,
        "1987": 30800,
        "1988": 2400,
        "1989": 59700,
        "1990": 118700,
        "1991": 22100,
        "1992": 13200,
        "1993": 79200,
        "1994": 45600,
        "1995": 29300,
        "1996": 11500,
        "1997": 36400,
        "1998": 25600,
        "1999": 14200,
        "2000": 5500,
        "2001": 234700,
        "2002": 119800,
        "2003": 507800,
        "2004": 40800,
        "2005": 23100,
        "2006": 16300,
        "2007": 17300,
        "2008": 260600,
        "2009": 36700,
        "2010": 14600,
        "2011": 9700,
        "2012": 28700,
        "2013": 22900,
        "2014": 25200,
        "2015": 31300,
        "2016": 10700,
        "2017": 27900,
        "2018": 43700,
        "2019": 205000,
        "2020": 57800,
        "2021": 20900,
        "2022": 64000,
        "2023": 177700,
        "2024": 208500,
        "2025": 26300,
        "2026": 189000,
        "2027": 179500,
        "2028": 30100,
        "2029": 70200,
        "2030": 20200,
        "2031": 19300,
        "2032": 13500,
        "2033": 56900,
        "2034": 59600,
        "2035": 32400,
        "2036": 21600,
        "2037": 11600,
        "2038": 29800,
        "2039": 34500,
        "2040": 107000,
        "2041": 45400,
        "2042": 46400,
        "2043": 31300,
        "2044": 70600,
        "2045": 47300,
        "2046": 24700,
        "2047": 14100,
        "2048": 7100,
        "2049": 99500,
        "2050": 12300,
        "2051": 5900,
        "2052": 45500,
        "2053": 34500,
        "2054": 14900,
        "2055": 76600,
        "2056": 21100,
        "2057": 8800,
        "2058": 7200,
        "2059": 36600,
        "2060": 10100,
        "2061": 22500,
        "2062": 110600,
        "2063": 38000,
        "2064": 31100,
        "2065": 21200,
        "2066": 26100,
        "2067": 21100,
        "2068": 17300,
        "2069": 8500,
        "2070": 119200,
        "2071": 28300,
        "2072": 26400,
        "2073": 74900,
        "2074": 26500,
        "2075": 24400,
        "2076": 32700,
        "2077": 52000,
        "2078": 138500,
        "2079": 20300,
        "2080": 19700,
        "2081": 58600,
        "2082": 31300,
        "2083": 9600,
        "2084": 6900,
        "2085": 174900,
        "2086": 43100,
        "2087": 16200,
        "2088": 0,
        "2089": 45100,
        "2090": 222300,
        "2091": 15900,
        "2092": 4300,
        "2093": 86700,
        "2094": 30000,
        "2095": 97000,
        "2096": 6900,
        "2097": 47900,
        "2098": 172600,
        "2099": 27400,
        "2100": 7200,
        "2101": 173700,
        "2102": 35800,
        "2103": 20800,
        "2104": 9700,
        "2105": 99900,
        "2106": 35800,
        "2107": 22600,
        "2108": 21400,
        "2109": 49900,
        "2110": 30700,
        "2111": 12300,
        "2112": 5000,
        "2113": 39000,
        "2114": 27500,
        "2115": 26100,
        "2116": 12800,
        "2117": 48700,
        "2118": 14800,
        "2119": 6400,
        "2120": 53000,
        "2121": 99300,
        "2122": 23800,
        "2123": 4300,
        "2124": 35400,
        "2125": 24100,
        "2126": 11200,
        "2127": 22400,
        "2128": 14800,
        "2129": 7900,
        "2130": 207300,
        "2131": 25600,
        "2132": 13700,
        "2133": 7300,
        "2134": 37800,
        "2135": 183400,
        "2136": 16600,
        "2137": 11100,
        "2138": 39300,
        "2139": 27000,
        "2140": 20200,
        "2141": 10800,
        "2142": 134400,
        "2143": 104800,
        "2144": 109700,
        "2145": 86800,
        "2146": 81700,
        "2147": 73000,
        "2148": 68000,
        "2149": 74600,
        "2150": 64300,
        "2151": 62700,
        "2152": 60200,
        "2153": 63200,
        "2154": 53200,
        "2155": 50200,
        "2156": 52300,
        "2157": 96400,
        "2158": 34800,
        "2159": 7100,
        "2160": 27700,
        "2161": 31300,
        "2162": 11000,
        "2163": 4400,
        "2164": 41600,
        "2165": 26600,
        "2166": 18700,
        "2167": 12700,
        "2168": 36100,
        "2169": 13000,
        "2170": 4100,
        "2171": 35500,
        "2172": 19900,
        "2173": 23300,
        "2174": 3300,
        "2175": 14300,
        "2176": 8100,
        "2177": 39400,
        "2178": 27500,
        "2179": 13500,
        "2180": 6100,
        "2181": 27200,
        "2182": 12800,
        "2183": 6500,
        "2184": 11200,
        "2185": 41100,
        "2186": 22700,
        "2187": 12700,
        "2188": 6500,
        "2189": 30300,
        "2190": 25400,
        "2191": 9600,
        "2192": 7300,
        "2193": 162300,
        "2194": 12000,
        "2195": 16700,
        "2196": 4400,
        "2197": 24200,
        "2198": 21600,
        "2199": 9600,
        "2200": 5400,
        "2201": 53100,
        "2202": 21000,
        "2203": 7400,
        "2204": 3400,
        "2205": 66500,
        "2206": 22800,
        "2207": 153400,
        "2208": 7400,
        "2209": 43400,
        "2210": 21700,
        "2211": 134900,
        "2212": 11100,
        "2213": 56300,
        "2214": 153800,
        "2215": 13400,
        "2216": 21000,
        "2217": 136000,
        "2218": 8000,
        "2219": 8600,
        "2220": 14700,
        "2221": 101900,
        "2222": 5200,
        "2223": 35500,
        "2224": 24500,
        "2225": 18100,
        "2226": 3200,
        "2227": 112500,
        "2228": 21400,
        "2229": 4900,
        "2230": 37100,
        "2231": 18300,
        "2232": 16400,
        "2233": 3500,
        "2234": 216800,
        "2235": 27600,
        "2236": 9700,
        "2237": 11300,
        "2238": 34600,
        "2239": 23700,
        "2240": 14400,
        "2241": 5300,
        "2242": 42000,
        "2243": 20300,
        "2244": 174500,
        "2245": 3200,
        "2246": 53600,
        "2247": 20200,
        "2248": 3200,
        "2249": 49700,
        "2250": 14400,
        "2251": 21900,
        "2252": 10100,
        "2253": 50600,
        "2254": 20400,
        "2255": 10100,
        "2256": 42600,
        "2257": 26800,
        "2258": 15100,
        "2259": 35000,
        "2260": 26800,
        "2261": 20800,
        "2262": 8000,
        "2263": 40600,
        "2264": 135700,
        "2265": 16000,
        "2266": 53600,
        "2267": 20100,
        "2268": 8600,
        "2269": 2500,
        "2270": 66400,
        "2271": 29000,
        "2272": 12700,
        "2273": 71700,
        "2274": 45100,
        "2275": 10500,
        "2276": 48900,
        "2277": 22700,
        "2278": 6500,
        "2279": 46500,
        "2280": 18600,
        "2281": 13800,
        "2282": 7600,
        "2283": 45700,
        "2284": 37400,
        "2285": 20100,
        "2286": 3200,
        "2287": 42100,
        "2288": 28100,
        "2289": 20300,
        "2290": 10400,
        "2291": 28800,
        "2292": 22600,
        "2293": 14000,
        "2294": 5000,
        "2295": 64300,
        "2296": 35500,
        "2297": 36300,
        "2298": 8700,
        "2299": 41900,
        "2300": 25600,
        "2301": 25200,
        "2302": 12600,
        "2303": 286600,
        "2304": 27000,
        "2305": 19800,
        "2306": 10300,
        "2307": 34700,
        "2308": 39600,
        "2309": 8600,
        "2310": 5100,
        "2311": 47600,
        "2312": 31900,
        "2313": 14900,
        "2314": 12500,
        "2315": 26900,
        "2316": 19200,
        "2317": 8000,
        "2318": 3200,
        "2319": 59000,
        "2320": 21900,
        "2321": 14300,
        "2322": 6200,
        "2323": 43800,
        "2324": 24600,
        "2325": 28400,
        "2326": 4400,
        "2327": 33600,
        "2328": 17600,
        "2329": 14100,
        "2330": 2100,
        "2331": 75200,
        "2332": 18300,
        "2333": 4500,
        "2334": 60300,
        "2335": 31900,
        "2336": 23900,
        "2337": 11500,
        "2338": 48800,
        "2339": 37200,
        "2340": 24600,
        "2341": 5100,
        "2342": 67800,
        "2343": 41100,
        "2344": 25600,
        "2345": 6100,
        "2346": 54800,
        "2347": 39300,
        "2348": 26600,
        "2349": 54000,
        "2350": 31300,
        "2351": 18200,
        "2352": 6900,
        "2353": 47400,
        "2354": 38200,
        "2355": 25700,
        "2356": 6800,
        "2357": 58900,
        "2358": 41200,
        "2359": 24600,
        "2360": 9200,
        "2361": 94200,
        "2362": 44800,
        "2363": 35600,
        "2364": 6700,
        "2365": 68400,
        "2366": 40500,
        "2367": 21700,
        "2368": 4600,
        "2369": 36700,
        "2370": 17300,
        "2371": 48300,
        "2372": 25800,
        "2373": 23500,
        "2374": 11100,
        "2375": 54300,
        "2376": 44800,
        "2377": 23200,
        "2378": 11500,
        "2379": 45600,
        "2380": 176400,
        "2381": 26200,
        "2382": 20700,
        "2383": 6600,
        "2384": 39200,
        "2385": 12700,
        "2386": 42000,
        "2387": 37500,
        "2388": 27600,
        "2389": 15000,
        "2390": 64599,
        "2391": 32700,
        "2392": 7200,
        "2393": 6300,
        "2394": 38900,
        "2395": 32500,
        "2396": 9600,
        "2397": 4000,
        "2398": 35300,
        "2399": 26000,
        "2400": 11000,
        "2401": 1400,
        "2402": 51700,
        "2403": 26000,
        "2404": 15600,
        "2405": 5900,
        "2406": 38900,
        "2407": 24300,
        "2408": 7400,
        "2409": 4300,
        "2410": 39200,
        "2411": 29800,
        "2412": 6600,
        "2413": 4100,
        "2414": 48700,
        "2415": 24700,
        "2416": 6800,
        "2417": 5200,
        "2418": 39500,
        "2419": 34600,
        "2420": 4700,
        "2421": 10700,
        "2422": 46300,
        "2423": 30600,
        "2424": 9300,
        "2425": 3900,
        "2426": 45100
    },
    "submission": {
        "0": 262700,
        "1": 27400000,
        "2": 11400000,
        "3": 7000000,
        "4": 3000000,
        "5": 12100000,
        "6": 9200000,
        "7": 3600000,
        "8": 6000000,
        "9": 2200000,
        "10": 6500000,
        "11": 8600000,
        "12": 11200000,
        "13": 2900000,
        "14": 3600000,
        "15": 2900000,
        "16": 6400000,
        "17": 12600000,
        "18": 7000000,
        "19": 2700000,
        "20": 4000000,
        "21": 2200000,
        "22": 1700000,
        "23": 8800000,
        "24": 5900000,
        "25": 6500000,
        "26": 4600000,
        "27": 1500000,
        "28": 3700000,
        "29": 2300000,
        "30": 7400000,
        "31": 5000000,
        "32": 6900000,
        "33": 2800000,
        "34": 1000000,
        "35": 1800000,
        "36": 0,
        "37": 2100000,
        "38": 3300000,
        "39": 3800000,
        "40": 2100000,
        "41": 2200000,
        "42": 3500000,
        "43": 2900000,
        "44": 1700000,
        "45": 2600000,
        "46": 4600000,
        "47": 5300000,
        "48": 1200000,
        "49": 568700,
        "50": 8400000,
        "51": 3100000,
        "52": 5600000,
        "53": 5600000,
        "54": 2900000,
        "55": 4300000,
        "56": 890200,
        "57": 2800000,
        "58": 3100000,
        "59": 2500000,
        "60": 2000000,
        "61": 1900000,
        "62": 3000000,
        "63": 1000000,
        "64": 5600000,
        "65": 6900000,
        "66": 1900000,
        "67": 1700000,
        "68": 3900000,
        "69": 3700000,
        "70": 3400000,
        "71": 1400000,
        "72": 2700000,
        "73": 4200000,
        "74": 2000000,
        "75": 2100000,
        "76": 1700000,
        "77": 3200000,
        "78": 2200000,
        "79": 1000000,
        "80": 1200000,
        "81": 594100,
        "82": 7300000,
        "83": 525500,
        "84": 1800000,
        "85": 3700000,
        "86": 2000000,
        "87": 3600000,
        "88": 806400,
        "89": 1100000,
        "90": 1400000,
        "91": 7600000,
        "92": 897900,
        "93": 3800000,
        "94": 0,
        "95": 2100000,
        "96": 4500000,
        "97": 2100000,
        "98": 1100000,
        "99": 1800000,
        "100": 880600,
        "101": 3100000,
        "102": 2600000,
        "103": 3100000,
        "104": 1500000,
        "105": 1600000,
        "106": 948700,
        "107": 1700000,
        "108": 1300000,
        "109": 2400000,
        "110": 1500000,
        "111": 1500000,
        "112": 9800000,
        "113": 3200000,
        "114": 1400000,
        "115": 3400000,
        "116": 7100000,
        "117": 1400000,
        "118": 2900000,
        "119": 4400000,
        "120": 1400000,
        "121": 2000000,
        "122": 1400000,
        "123": 2300000,
        "124": 2000000,
        "125": 1400000,
        "126": 4200000,
        "127": 1000000,
        "128": 2400000,
        "129": 3900000,
        "130": 1300000,
        "131": 6500000,
        "132": 2700000,
        "133": 1800000,
        "134": 2500000,
        "135": 1900000,
        "136": 4099999,
        "137": 716600,
        "138": 1500000,
        "139": 1500000,
        "140": 2200000,
        "141": 4000000,
        "142": 4099999,
        "143": 4000000,
        "144": 1100000,
        "145": 3400000,
        "146": 2900000,
        "147": 3400000,
        "148": 496200,
        "149": 932200,
        "150": 3700000,
        "151": 1300000,
        "152": 5300000,
        "153": 1100000,
        "154": 1100000,
        "155": 616800,
        "156": 1400000,
        "157": 2300000,
        "158": 1100000,
        "159": 673000,
        "160": 1600000,
        "161": 992800,
        "162": 1000000,
        "163": 1000000,
        "164": 1300000,
        "165": 799900,
        "166": 699200,
        "167": 811900,
        "168": 1100000,
        "169": 6100000,
        "170": 2200000,
        "171": 209700,
        "172": 341400,
        "173": 103400,
        "174": 340700,
        "175": 952700,
        "176": 1700000,
        "177": 4800000,
        "178": 2400000,
        "179": 4900000,
        "180": 883900,
        "181": 2900000,
        "182": 2400000,
        "183": 2800000,
        "184": 3300000,
        "185": 5900000,
        "186": 3700000,
        "187": 1700000,
        "188": 2500000,
        "189": 2200000,
        "190": 1500000,
        "191": 1900000,
        "192": 2000000,
        "193": 711300,
        "194": 3800000,
        "195": 810400,
        "196": 7100000,
        "197": 696600,
        "198": 2300000,
        "199": 1100000,
        "200": 1500000,
        "201": 1200000,
        "202": 1200000,
        "203": 2900000,
        "204": 1600000,
        "205": 1300000,
        "206": 1500000,
        "207": 2200000,
        "208": 3100000,
        "209": 1500000,
        "210": 289100,
        "211": 3900000,
        "212": 4500000,
        "213": 1900000,
        "214": 455400,
        "215": 6100000,
        "216": 1200000,
        "217": 1300000,
        "218": 682400,
        "219": 544800,
        "220": 935700,
        "221": 3700000,
        "222": 1500000,
        "223": 1400000,
        "224": 567300,
        "225": 4000000,
        "226": 1600000,
        "227": 594500,
        "228": 5500000,
        "229": 377800,
        "230": 3100000,
        "231": 725700,
        "232": 1900000,
        "233": 705300,
        "234": 1700000,
        "235": 1600000,
        "236": 764800,
        "237": 3300000,
        "238": 919500,
        "239": 695600,
        "240": 299700,
        "241": 686100,
        "242": 953200,
        "243": 941400,
        "244": 523799,
        "245": 782400,
        "246": 698000,
        "247": 372500,
        "248": 439400,
        "249": 208100,
        "250": 4400000,
        "251": 479300,
        "252": 1900000,
        "253": 224100,
        "254": 1700000,
        "255": 1000000,
        "256": 302900,
        "257": 320500,
        "258": 1000000,
        "259": 1700000,
        "260": 0,
        "261": 597200,
        "262": 738100,
        "263": 1500000,
        "264": 719200,
        "265": 1500000,
        "266": 615300,
        "267": 3600000,
        "268": 1900000,
        "269": 1800000,
        "270": 2500000,
        "271": 187200,
        "272": 622700,
        "273": 505900,
        "274": 276400,
        "275": 289900,
        "276": 265000,
        "277": 1500000,
        "278": 695700,
        "279": 996000,
        "280": 218400,
        "281": 811900,
        "282": 1300000,
        "283": 264800,
        "284": 524900,
        "285": 937800,
        "286": 1800000,
        "287": 420700,
        "288": 395300,
        "289": 2100000,
        "290": 592200,
        "291": 153600,
        "292": 341600,
        "293": 2900000,
        "294": 337000,
        "295": 1300000,
        "296": 172100,
        "297": 136000,
        "298": 3500000,
        "299": 1500000,
        "300": 526800,
        "301": 210000,
        "302": 353400,
        "303": 380100,
        "304": 832600,
        "305": 290600,
        "306": 275500,
        "307": 602500,
        "308": 1100000,
        "309": 318500,
        "310": 421300,
        "311": 192000,
        "312": 1500000,
        "313": 700000,
        "314": 0,
        "315": 485800,
        "316": 1600000,
        "317": 1400000,
        "318": 2000000,
        "319": 0,
        "320": 290900,
        "321": 162900,
        "322": 1600000,
        "323": 180400,
        "324": 450100,
        "325": 349700,
        "326": 349900,
        "327": 551700,
        "328": 1200000,
        "329": 231800,
        "330": 1300000,
        "331": 1800000,
        "332": 225300,
        "333": 1000000,
        "334": 1100000,
        "335": 1200000,
        "336": 806700,
        "337": 280100,
        "338": 185300,
        "339": 1600000,
        "340": 1100000,
        "341": 1100000,
        "342": 964600,
        "343": 317800,
        "344": 588900,
        "345": 797500,
        "346": 247000,
        "347": 204400,
        "348": 1000000,
        "349": 599300,
        "350": 786800,
        "351": 313900,
        "352": 914300,
        "353": 335300,
        "354": 65700,
        "355": 629700,
        "356": 191700,
        "357": 473300,
        "358": 428700,
        "359": 452800,
        "360": 329100,
        "361": 680400,
        "362": 215700,
        "363": 106600,
        "364": 76100,
        "365": 410200,
        "366": 75400,
        "367": 670300,
        "368": 56800,
        "369": 2200000,
        "370": 443400,
        "371": 75900,
        "372": 288200,
        "373": 215700,
        "374": 684300,
        "375": 1400000,
        "376": 288600,
        "377": 1100000,
        "378": 106400,
        "379": 537500,
        "380": 347600,
        "381": 452700,
        "382": 714600,
        "383": 285000,
        "384": 432600,
        "385": 518700,
        "386": 222200,
        "387": 2800000,
        "388": 412400,
        "389": 527100,
        "390": 188900,
        "391": 548100,
        "392": 855400,
        "393": 75100,
        "394": 1100000,
        "395": 54000,
        "396": 804800,
        "397": 198600,
        "398": 131300,
        "399": 2000000,
        "400": 310800,
        "401": 1000000,
        "402": 1100000,
        "403": 247600,
        "404": 736400,
        "405": 823700,
        "406": 312200,
        "407": 137000,
        "408": 446900,
        "409": 479100,
        "410": 524200,
        "411": 1300000,
        "412": 2700000,
        "413": 101500,
        "414": 1500000,
        "415": 579400,
        "416": 473500,
        "417": 255600,
        "418": 69400,
        "419": 266600,
        "420": 481800,
        "421": 1100000,
        "422": 31000,
        "423": 410300,
        "424": 3200000,
        "425": 645500,
        "426": 355500,
        "427": 375900,
        "428": 622900,
        "429": 2300000,
        "430": 953300,
        "431": 1900000,
        "432": 446000,
        "433": 441800,
        "434": 662100,
        "435": 914900,
        "436": 444300,
        "437": 1600000,
        "438": 298700,
        "439": 448800,
        "440": 114300,
        "441": 584300,
        "442": 470700,
        "443": 41700,
        "444": 193500,
        "445": 255300,
        "446": 311700,
        "447": 2100000,
        "448": 858200,
        "449": 190400,
        "450": 436500,
        "451": 103000,
        "452": 228300,
        "453": 292400,
        "454": 3200000,
        "455": 469200,
        "456": 361100,
        "457": 235600,
        "458": 228700,
        "459": 325400,
        "460": 400300,
        "461": 1000000,
        "462": 405100,
        "463": 812800,
        "464": 1100000,
        "465": 655400,
        "466": 438200,
        "467": 387800,
        "468": 370200,
        "469": 516799,
        "470": 789800,
        "471": 267300,
        "472": 287400,
        "473": 183700,
        "474": 995400,
        "475": 374000,
        "476": 769300,
        "477": 123400,
        "478": 250800,
        "479": 95200,
        "480": 251800,
        "481": 1300000,
        "482": 1100000,
        "483": 419300,
        "484": 1200000,
        "485": 407700,
        "486": 371100,
        "487": 438900,
        "488": 947800,
        "489": 359800,
        "490": 113100,
        "491": 596300,
        "492": 1300000,
        "493": 260100,
        "494": 253800,
        "495": 971100,
        "496": 241700,
        "497": 1100000,
        "498": 91700,
        "499": 131200,
        "500": 459900,
        "501": 451400,
        "502": 48600,
        "503": 0,
        "504": 555200,
        "505": 207100,
        "506": 151900,
        "507": 215500,
        "508": 165900,
        "509": 2000000,
        "510": 516400,
        "511": 625200,
        "512": 214700,
        "513": 0,
        "514": 455800,
        "515": 288000,
        "516": 157600,
        "517": 325700,
        "518": 161000,
        "519": 225000,
        "520": 1300000,
        "521": 330100,
        "522": 397000,
        "523": 738300,
        "524": 62700,
        "525": 1200000,
        "526": 805500,
        "527": 1200000,
        "528": 4600000,
        "529": 662800,
        "530": 932000,
        "531": 1300000,
        "532": 669300,
        "533": 130600,
        "534": 232900,
        "535": 842500,
        "536": 592900,
        "537": 176200,
        "538": 311900,
        "539": 620200,
        "540": 409200,
        "541": 303300,
        "542": 745200,
        "543": 193000,
        "544": 2100000,
        "545": 451400,
        "546": 229400,
        "547": 327100,
        "548": 0,
        "549": 83800,
        "550": 291000,
        "551": 1500000,
        "552": 1400000,
        "553": 44400,
        "554": 117200,
        "555": 1700000,
        "556": 645000,
        "557": 230700,
        "558": 1000000,
        "559": 995300,
        "560": 532100,
        "561": 135700,
        "562": 26400,
        "563": 550200,
        "564": 107300,
        "565": 133500,
        "566": 66200,
        "567": 54600,
        "568": 30600,
        "569": 706900,
        "570": 126100,
        "571": 114000,
        "572": 511600,
        "573": 775000,
        "574": 125900,
        "575": 191600,
        "576": 19900,
        "577": 1300000,
        "578": 150900,
        "579": 184100,
        "580": 213500,
        "581": 299100,
        "582": 456200,
        "583": 212500,
        "584": 119100,
        "585": 36300,
        "586": 443400,
        "587": 421400,
        "588": 1100000,
        "589": 224600,
        "590": 1600000,
        "591": 197500,
        "592": 50700,
        "593": 302700,
        "594": 651200,
        "595": 464500,
        "596": 44100,
        "597": 173900,
        "598": 137100,
        "599": 637800,
        "600": 669600,
        "601": 0,
        "602": 270500,
        "603": 205600,
        "604": 447800,
        "605": 89600,
        "606": 439500,
        "607": 125000,
        "608": 197000,
        "609": 128000,
        "610": 261300,
        "611": 20100,
        "612": 310400,
        "613": 91600,
        "614": 104200,
        "615": 349300,
        "616": 456400,
        "617": 54300,
        "618": 177600,
        "619": 0,
        "620": 846200,
        "621": 162300,
        "622": 272500,
        "623": 42400,
        "624": 286100,
        "625": 276900,
        "626": 0,
        "627": 416500,
        "628": 141700,
        "629": 213900,
        "630": 190900,
        "631": 42100,
        "632": 555900,
        "633": 294800,
        "634": 247600,
        "635": 150900,
        "636": 338200,
        "637": 173600,
        "638": 222600,
        "639": 278300,
        "640": 104400,
        "641": 387900,
        "642": 1800000,
        "643": 336100,
        "644": 574700,
        "645": 195000,
        "646": 229900,
        "647": 489100,
        "648": 66600,
        "649": 86400,
        "650": 1300000,
        "651": 584200,
        "652": 119500,
        "653": 146700,
        "654": 303300,
        "655": 225900,
        "656": 130400,
        "657": 763000,
        "658": 646600,
        "659": 186900,
        "660": 400500,
        "661": 740800,
        "662": 148400,
        "663": 204000,
        "664": 136800,
        "665": 596600,
        "666": 184600,
        "667": 132100,
        "668": 750100,
        "669": 137900,
        "670": 266800,
        "671": 1700000,
        "672": 2700000,
        "673": 369200,
        "674": 114700,
        "675": 137300,
        "676": 271700,
        "677": 730900,
        "678": 58700,
        "679": 81100,
        "680": 393800,
        "681": 186600,
        "682": 430100,
        "683": 211200,
        "684": 148900,
        "685": 251500,
        "686": 57900,
        "687": 64000,
        "688": 71500,
        "689": 230700,
        "690": 274200,
        "691": 752500,
        "692": 98400,
        "693": 110000,
        "694": 127700,
        "695": 547600,
        "696": 107800,
        "697": 29600,
        "698": 993200,
        "699": 1100000,
        "700": 64400,
        "701": 772700,
        "702": 136300,
        "703": 156600,
        "704": 120100,
        "705": 1400000,
        "706": 61600,
        "707": 432800,
        "708": 174800,
        "709": 225600,
        "710": 363700,
        "711": 630600,
        "712": 118800,
        "713": 700600,
        "714": 379900,
        "715": 233900,
        "716": 134600,
        "717": 469600,
        "718": 318800,
        "719": 77000,
        "720": 55200,
        "721": 754900,
        "722": 449300,
        "723": 772200,
        "724": 69900,
        "725": 410100,
        "726": 375400,
        "727": 298800,
        "728": 95200,
        "729": 662500,
        "730": 1300000,
        "731": 279000,
        "732": 97200,
        "733": 1300000,
        "734": 209100,
        "735": 68600,
        "736": 262400,
        "737": 404600,
        "738": 459900,
        "739": 500600,
        "740": 400700,
        "741": 258000,
        "742": 245800,
        "743": 229100,
        "744": 949400,
        "745": 117300,
        "746": 419800,
        "747": 434800,
        "748": 176300,
        "749": 320700,
        "750": 292400,
        "751": 54700,
        "752": 21500,
        "753": 324800,
        "754": 83600,
        "755": 235700,
        "756": 317400,
        "757": 139000,
        "758": 129400,
        "759": 86000,
        "760": 18000,
        "761": 2000000,
        "762": 665000,
        "763": 223800,
        "764": 2700000,
        "765": 226300,
        "766": 263100,
        "767": 258300,
        "768": 1000000,
        "769": 33200,
        "770": 481800,
        "771": 114200,
        "772": 208500,
        "773": 323500,
        "774": 610200,
        "775": 266100,
        "776": 192000,
        "777": 379500,
        "778": 510900,
        "779": 1800000,
        "780": 199000,
        "781": 82800,
        "782": 1200000,
        "783": 54600,
        "784": 96000,
        "785": 59500,
        "786": 496900,
        "787": 112600,
        "788": 1100000,
        "789": 192000,
        "790": 58500,
        "791": 398700,
        "792": 485100,
        "793": 443700,
        "794": 543500,
        "795": 635200,
        "796": 42900,
        "797": 238500,
        "798": 169400,
        "799": 138000,
        "800": 69100,
        "801": 47400,
        "802": 125600,
        "803": 274700,
        "804": 371000,
        "805": 454100,
        "806": 300500,
        "807": 82200,
        "808": 140100,
        "809": 404500,
        "810": 431900,
        "811": 373200,
        "812": 73100,
        "813": 375000,
        "814": 87800,
        "815": 123100,
        "816": 176900,
        "817": 54500,
        "818": 76800,
        "819": 261200,
        "820": 65600,
        "821": 152500,
        "822": 334700,
        "823": 92500,
        "824": 19600,
        "825": 437000,
        "826": 162300,
        "827": 269200,
        "828": 232900,
        "829": 371100,
        "830": 1000000,
        "831": 888100,
        "832": 702400,
        "833": 170700,
        "834": 283600,
        "835": 312300,
        "836": 85000,
        "837": 97400,
        "838": 108800,
        "839": 773000,
        "840": 473100,
        "841": 1100000,
        "842": 37500,
        "843": 50400,
        "844": 211600,
        "845": 121300,
        "846": 139000,
        "847": 71300,
        "848": 120800,
        "849": 316900,
        "850": 856900,
        "851": 65200,
        "852": 1100000,
        "853": 233500,
        "854": 0,
        "855": 417600,
        "856": 367600,
        "857": 40300,
        "858": 140300,
        "859": 62700,
        "860": 207700,
        "861": 59000,
        "862": 779400,
        "863": 112300,
        "864": 480700,
        "865": 39200,
        "866": 241800,
        "867": 89300,
        "868": 100900,
        "869": 461200,
        "870": 162700,
        "871": 98800,
        "872": 117500,
        "873": 149700,
        "874": 261300,
        "875": 155000,
        "876": 52800,
        "877": 1300000,
        "878": 102800,
        "879": 52200,
        "880": 242200,
        "881": 577900,
        "882": 2100000,
        "883": 44900,
        "884": 91700,
        "885": 615200,
        "886": 43600,
        "887": 1100000,
        "888": 135600,
        "889": 495900,
        "890": 41900,
        "891": 198300,
        "892": 387200,
        "893": 468000,
        "894": 103600,
        "895": 292400,
        "896": 257399,
        "897": 133300,
        "898": 321100,
        "899": 57500,
        "900": 74600,
        "901": 67900,
        "902": 164400,
        "903": 118200,
        "904": 122900,
        "905": 126000,
        "906": 102600,
        "907": 386700,
        "908": 153600,
        "909": 422000,
        "910": 72700,
        "911": 296700,
        "912": 115700,
        "913": 206200,
        "914": 84900,
        "915": 241800,
        "916": 40800,
        "917": 919900,
        "918": 283500,
        "919": 574900,
        "920": 20500,
        "921": 553000,
        "922": 189500,
        "923": 274500,
        "924": 328900,
        "925": 0,
        "926": 374000,
        "927": 61900,
        "928": 63600,
        "929": 42900,
        "930": 68000,
        "931": 67500,
        "932": 675900,
        "933": 83800,
        "934": 94500,
        "935": 101500,
        "936": 27400,
        "937": 544400,
        "938": 45200,
        "939": 66100,
        "940": 396600,
        "941": 1100000,
        "942": 42500,
        "943": 850500,
        "944": 152500,
        "945": 61800,
        "946": 354700,
        "947": 144400,
        "948": 163100,
        "949": 87100,
        "950": 115800,
        "951": 58600,
        "952": 289200,
        "953": 101900,
        "954": 514500,
        "955": 187000,
        "956": 249600,
        "957": 312200,
        "958": 49700,
        "959": 585200,
        "960": 605400,
        "961": 249000,
        "962": 47800,
        "963": 102300,
        "964": 366000,
        "965": 221600,
        "966": 228300,
        "967": 622700,
        "968": 339700,
        "969": 65600,
        "970": 486600,
        "971": 932500,
        "972": 173600,
        "973": 111900,
        "974": 31900,
        "975": 586700,
        "976": 90300,
        "977": 36800,
        "978": 401800,
        "979": 300500,
        "980": 0,
        "981": 376700,
        "982": 42500,
        "983": 163300,
        "984": 248700,
        "985": 55200,
        "986": 276900,
        "987": 322100,
        "988": 0,
        "989": 188400,
        "990": 35100,
        "991": 94000,
        "992": 200800,
        "993": 384300,
        "994": 227700,
        "995": 337800,
        "996": 66800,
        "997": 282400,
        "998": 271200,
        "999": 214100,
        "1000": 339100,
        "1001": 204200,
        "1002": 15400,
        "1003": 380600,
        "1004": 0,
        "1005": 50900,
        "1006": 319600,
        "1007": 339100,
        "1008": 510400,
        "1009": 292700,
        "1010": 267700,
        "1011": 54100,
        "1012": 327600,
        "1013": 843600,
        "1014": 164300,
        "1015": 198800,
        "1016": 321800,
        "1017": 1000000,
        "1018": 353400,
        "1019": 75800,
        "1020": 34800,
        "1021": 574400,
        "1022": 178700,
        "1023": 291500,
        "1024": 186600,
        "1025": 298500,
        "1026": 207900,
        "1027": 194000,
        "1028": 112100,
        "1029": 271300,
        "1030": 39100,
        "1031": 68400,
        "1032": 134200,
        "1033": 360200,
        "1034": 81100,
        "1035": 107900,
        "1036": 166700,
        "1037": 291700,
        "1038": 195900,
        "1039": 127100,
        "1040": 83000,
        "1041": 376800,
        "1042": 90300,
        "1043": 774700,
        "1044": 279300,
        "1045": 319500,
        "1046": 278800,
        "1047": 161000,
        "1048": 120300,
        "1049": 137600,
        "1050": 54000,
        "1051": 307500,
        "1052": 89700,
        "1053": 63600,
        "1054": 109900,
        "1055": 141500,
        "1056": 200600,
        "1057": 319100,
        "1058": 316700,
        "1059": 16500,
        "1060": 38100,
        "1061": 203200,
        "1062": 105600,
        "1063": 153400,
        "1064": 148100,
        "1065": 237200,
        "1066": 149400,
        "1067": 61900,
        "1068": 55300,
        "1069": 242000,
        "1070": 68800,
        "1071": 55800,
        "1072": 128000,
        "1073": 116300,
        "1074": 40900,
        "1075": 103900,
        "1076": 97000,
        "1077": 587100,
        "1078": 249200,
        "1079": 141900,
        "1080": 1200000,
        "1081": 47100,
        "1082": 64800,
        "1083": 36400,
        "1084": 355300,
        "1085": 141300,
        "1086": 418100,
        "1087": 58700,
        "1088": 215700,
        "1089": 150600,
        "1090": 202200,
        "1091": 113300,
        "1092": 52900,
        "1093": 0,
        "1094": 39600,
        "1095": 171500,
        "1096": 17300,
        "1097": 132800,
        "1098": 668300,
        "1099": 325900,
        "1100": 127500,
        "1101": 398200,
        "1102": 221700,
        "1103": 480300,
        "1104": 411500,
        "1105": 335300,
        "1106": 15000,
        "1107": 834800,
        "1108": 65900,
        "1109": 328700,
        "1110": 105300,
        "1111": 212200,
        "1112": 129199,
        "1113": 134700,
        "1114": 2200000,
        "1115": 401300,
        "1116": 514299,
        "1117": 110900,
        "1118": 319900,
        "1119": 239700,
        "1120": 93300,
        "1121": 139400,
        "1122": 84900,
        "1123": 552600,
        "1124": 390400,
        "1125": 480100,
        "1126": 67600,
        "1127": 270500,
        "1128": 386100,
        "1129": 292500,
        "1130": 104000,
        "1131": 133100,
        "1132": 95100,
        "1133": 27100,
        "1134": 119600,
        "1135": 274800,
        "1136": 399500,
        "1137": 127100,
        "1138": 945800,
        "1139": 102900,
        "1140": 489200,
        "1141": 45000,
        "1142": 332300,
        "1143": 340100,
        "1144": 156300,
        "1145": 45500,
        "1146": 25100,
        "1147": 699400,
        "1148": 94200,
        "1149": 158100,
        "1150": 68100,
        "1151": 645200,
        "1152": 483900,
        "1153": 77800,
        "1154": 207700,
        "1155": 190700,
        "1156": 156700,
        "1157": 205900,
        "1158": 33400,
        "1159": 72200,
        "1160": 817600,
        "1161": 59100,
        "1162": 128199,
        "1163": 35700,
        "1164": 484600,
        "1165": 77100,
        "1166": 61800,
        "1167": 232200,
        "1168": 413500,
        "1169": 244500,
        "1170": 106900,
        "1171": 235800,
        "1172": 93300,
        "1173": 57300,
        "1174": 203100,
        "1175": 44300,
        "1176": 52600,
        "1177": 85300,
        "1178": 222500,
        "1179": 153500,
        "1180": 106400,
        "1181": 465700,
        "1182": 93400,
        "1183": 86200,
        "1184": 91300,
        "1185": 137700,
        "1186": 53100,
        "1187": 416300,
        "1188": 186300,
        "1189": 853500,
        "1190": 218900,
        "1191": 47900,
        "1192": 474700,
        "1193": 135900,
        "1194": 252200,
        "1195": 56300,
        "1196": 0,
        "1197": 20500,
        "1198": 137800,
        "1199": 58400,
        "1200": 75100,
        "1201": 20100,
        "1202": 355900,
        "1203": 29900,
        "1204": 28900,
        "1205": 89300,
        "1206": 334800,
        "1207": 83700,
        "1208": 179600,
        "1209": 41300,
        "1210": 304900,
        "1211": 251200,
        "1212": 114100,
        "1213": 81900,
        "1214": 451800,
        "1215": 227300,
        "1216": 85000,
        "1217": 17300,
        "1218": 94400,
        "1219": 24600,
        "1220": 24300,
        "1221": 72100,
        "1222": 233900,
        "1223": 24600,
        "1224": 171500,
        "1225": 175500,
        "1226": 169100,
        "1227": 481500,
        "1228": 56100,
        "1229": 433900,
        "1230": 353500,
        "1231": 204700,
        "1232": 44900,
        "1233": 148700,
        "1234": 242500,
        "1235": 470900,
        "1236": 28400,
        "1237": 221200,
        "1238": 456000,
        "1239": 68800,
        "1240": 80100,
        "1241": 249300,
        "1242": 154200,
        "1243": 41800,
        "1244": 108200,
        "1245": 715700,
        "1246": 499600,
        "1247": 15100,
        "1248": 537700,
        "1249": 608100,
        "1250": 144700,
        "1251": 64300,
        "1252": 32000,
        "1253": 436200,
        "1254": 159900,
        "1255": 276900,
        "1256": 54100,
        "1257": 79800,
        "1258": 1100000,
        "1259": 132400,
        "1260": 23700,
        "1261": 177700,
        "1262": 309100,
        "1263": 653300,
        "1264": 160400,
        "1265": 23100,
        "1266": 824700,
        "1267": 407000,
        "1268": 165900,
        "1269": 37900,
        "1270": 18100,
        "1271": 297600,
        "1272": 257700,
        "1273": 64500,
        "1274": 54600,
        "1275": 160100,
        "1276": 62200,
        "1277": 230800,
        "1278": 242300,
        "1279": 339600,
        "1280": 273000,
        "1281": 29800,
        "1282": 27500,
        "1283": 465300,
        "1284": 61600,
        "1285": 198100,
        "1286": 53200,
        "1287": 432000,
        "1288": 135800,
        "1289": 103200,
        "1290": 27000,
        "1291": 210400,
        "1292": 217000,
        "1293": 27400,
        "1294": 10900,
        "1295": 529400,
        "1296": 38600,
        "1297": 69400,
        "1298": 94900,
        "1299": 48000,
        "1300": 97900,
        "1301": 19000,
        "1302": 354900,
        "1303": 355800,
        "1304": 560700,
        "1305": 23500,
        "1306": 25200,
        "1307": 12400,
        "1308": 90300,
        "1309": 38500,
        "1310": 38300,
        "1311": 15300,
        "1312": 172500,
        "1313": 92400,
        "1314": 147700,
        "1315": 32600,
        "1316": 60000,
        "1317": 239700,
        "1318": 70100,
        "1319": 301000,
        "1320": 633900,
        "1321": 65099,
        "1322": 50300,
        "1323": 48800,
        "1324": 1500000,
        "1325": 236300,
        "1326": 0,
        "1327": 57000,
        "1328": 100300,
        "1329": 30700,
        "1330": 46500,
        "1331": 25300,
        "1332": 1400000,
        "1333": 155300,
        "1334": 284800,
        "1335": 32400,
        "1336": 283400,
        "1337": 67200,
        "1338": 57200,
        "1339": 48800,
        "1340": 172800,
        "1341": 66100,
        "1342": 18000,
        "1343": 52100,
        "1344": 66400,
        "1345": 14100,
        "1346": 240400,
        "1347": 253400,
        "1348": 406400,
        "1349": 42600,
        "1350": 120100,
        "1351": 165700,
        "1352": 124500,
        "1353": 57300,
        "1354": 33800,
        "1355": 108400,
        "1356": 98900,
        "1357": 195000,
        "1358": 27200,
        "1359": 48000,
        "1360": 22200,
        "1361": 114600,
        "1362": 242700,
        "1363": 231200,
        "1364": 17300,
        "1365": 217700,
        "1366": 75800,
        "1367": 85600,
        "1368": 23700,
        "1369": 544400,
        "1370": 362200,
        "1371": 91100,
        "1372": 57000,
        "1373": 129800,
        "1374": 93900,
        "1375": 40700,
        "1376": 8500,
        "1377": 450600,
        "1378": 221600,
        "1379": 249000,
        "1380": 34500,
        "1381": 76300,
        "1382": 373900,
        "1383": 67800,
        "1384": 21100,
        "1385": 114700,
        "1386": 183300,
        "1387": 161900,
        "1388": 25300,
        "1389": 88700,
        "1390": 77500,
        "1391": 32200,
        "1392": 79800,
        "1393": 125700,
        "1394": 97600,
        "1395": 78400,
        "1396": 137500,
        "1397": 218100,
        "1398": 29800,
        "1399": 33800,
        "1400": 214400,
        "1401": 65600,
        "1402": 53600,
        "1403": 27000,
        "1404": 83000,
        "1405": 223300,
        "1406": 198000,
        "1407": 19400,
        "1408": 444500,
        "1409": 183900,
        "1410": 225200,
        "1411": 33900,
        "1412": 32100,
        "1413": 94600,
        "1414": 76600,
        "1415": 88800,
        "1416": 19200,
        "1417": 70700,
        "1418": 130199,
        "1419": 132300,
        "1420": 73400,
        "1421": 42000,
        "1422": 96600,
        "1423": 362600,
        "1424": 23400,
        "1425": 8100,
        "1426": 213800,
        "1427": 106900,
        "1428": 11300,
        "1429": 0,
        "1430": 484700,
        "1431": 52200,
        "1432": 265100,
        "1433": 26200,
        "1434": 219000,
        "1435": 252700,
        "1436": 174700,
        "1437": 71700,
        "1438": 19600,
        "1439": 311200,
        "1440": 26400,
        "1441": 16500,
        "1442": 640100,
        "1443": 217900,
        "1444": 0,
        "1445": 27800,
        "1446": 71300,
        "1447": 371900,
        "1448": 54600,
        "1449": 968800,
        "1450": 165700,
        "1451": 17300,
        "1452": 458600,
        "1453": 0,
        "1454": 69400,
        "1455": 336300,
        "1456": 13700,
        "1457": 136400,
        "1458": 94900,
        "1459": 27400,
        "1460": 89900,
        "1461": 275600,
        "1462": 59200,
        "1463": 42600,
        "1464": 16800,
        "1465": 32800,
        "1466": 24100,
        "1467": 69100,
        "1468": 29800,
        "1469": 20500,
        "1470": 12600,
        "1471": 108900,
        "1472": 170400,
        "1473": 265700,
        "1474": 95800,
        "1475": 180500,
        "1476": 94900,
        "1477": 78700,
        "1478": 34200,
        "1479": 93900,
        "1480": 888400,
        "1481": 62000,
        "1482": 291000,
        "1483": 32200,
        "1484": 325300,
        "1485": 196000,
        "1486": 194300,
        "1487": 86200,
        "1488": 12200,
        "1489": 149000,
        "1490": 157300,
        "1491": 82900,
        "1492": 25900,
        "1493": 158400,
        "1494": 174600,
        "1495": 38100,
        "1496": 24000,
        "1497": 71900,
        "1498": 241600,
        "1499": 26700,
        "1500": 21500,
        "1501": 329900,
        "1502": 51800,
        "1503": 19100,
        "1504": 198900,
        "1505": 341100,
        "1506": 146700,
        "1507": 478400,
        "1508": 51200,
        "1509": 147700,
        "1510": 16000,
        "1511": 165600,
        "1512": 57300,
        "1513": 46500,
        "1514": 22600,
        "1515": 66700,
        "1516": 0,
        "1517": 31800,
        "1518": 75200,
        "1519": 289100,
        "1520": 31300,
        "1521": 23100,
        "1522": 99600,
        "1523": 146000,
        "1524": 275900,
        "1525": 234200,
        "1526": 30900,
        "1527": 42400,
        "1528": 90300,
        "1529": 52300,
        "1530": 40200,
        "1531": 132800,
        "1532": 109600,
        "1533": 29600,
        "1534": 58400,
        "1535": 124600,
        "1536": 284600,
        "1537": 43700,
        "1538": 128000,
        "1539": 8500,
        "1540": 93400,
        "1541": 255600,
        "1542": 35700,
        "1543": 39400,
        "1544": 65600,
        "1545": 57900,
        "1546": 64099,
        "1547": 39500,
        "1548": 92500,
        "1549": 49000,
        "1550": 36600,
        "1551": 29600,
        "1552": 324100,
        "1553": 49900,
        "1554": 29900,
        "1555": 32800,
        "1556": 93000,
        "1557": 68900,
        "1558": 56300,
        "1559": 17800,
        "1560": 111300,
        "1561": 48500,
        "1562": 38300,
        "1563": 16000,
        "1564": 259600,
        "1565": 84400,
        "1566": 219900,
        "1567": 56800,
        "1568": 868100,
        "1569": 365800,
        "1570": 27700,
        "1571": 125500,
        "1572": 56800,
        "1573": 272100,
        "1574": 25000,
        "1575": 97700,
        "1576": 192200,
        "1577": 43900,
        "1578": 31800,
        "1579": 366900,
        "1580": 81000,
        "1581": 66000,
        "1582": 34400,
        "1583": 363600,
        "1584": 198100,
        "1585": 87700,
        "1586": 14100,
        "1587": 121200,
        "1588": 39600,
        "1589": 47900,
        "1590": 28500,
        "1591": 124100,
        "1592": 250100,
        "1593": 94500,
        "1594": 37600,
        "1595": 105400,
        "1596": 408600,
        "1597": 256200,
        "1598": 23500,
        "1599": 155900,
        "1600": 241100,
        "1601": 82700,
        "1602": 74600,
        "1603": 91000,
        "1604": 123600,
        "1605": 88100,
        "1606": 50400,
        "1607": 38400,
        "1608": 140000,
        "1609": 104100,
        "1610": 523700,
        "1611": 85000,
        "1612": 142700,
        "1613": 48200,
        "1614": 57800,
        "1615": 37700,
        "1616": 160800,
        "1617": 98300,
        "1618": 40400,
        "1619": 22600,
        "1620": 107400,
        "1621": 74500,
        "1622": 72800,
        "1623": 31400,
        "1624": 106500,
        "1625": 69400,
        "1626": 65400,
        "1627": 104100,
        "1628": 77600,
        "1629": 80600,
        "1630": 21100,
        "1631": 99800,
        "1632": 312300,
        "1633": 43400,
        "1634": 61700,
        "1635": 131900,
        "1636": 61900,
        "1637": 310700,
        "1638": 29600,
        "1639": 66400,
        "1640": 245200,
        "1641": 218000,
        "1642": 48100,
        "1643": 88700,
        "1644": 188300,
        "1645": 38500,
        "1646": 63500,
        "1647": 36300,
        "1648": 131500,
        "1649": 34300,
        "1650": 119100,
        "1651": 58400,
        "1652": 70800,
        "1653": 34900,
        "1654": 87700,
        "1655": 68500,
        "1656": 32100,
        "1657": 15600,
        "1658": 513500,
        "1659": 63400,
        "1660": 114900,
        "1661": 288500,
        "1662": 76500,
        "1663": 21900,
        "1664": 68000,
        "1665": 354800,
        "1666": 119300,
        "1667": 33700,
        "1668": 75800,
        "1669": 32900,
        "1670": 82700,
        "1671": 25900,
        "1672": 652200,
        "1673": 298900,
        "1674": 241300,
        "1675": 52100,
        "1676": 55400,
        "1677": 32600,
        "1678": 63600,
        "1679": 245900,
        "1680": 23100,
        "1681": 142100,
        "1682": 132900,
        "1683": 48600,
        "1684": 50200,
        "1685": 150000,
        "1686": 92000,
        "1687": 202200,
        "1688": 33200,
        "1689": 34600,
        "1690": 203200,
        "1691": 159400,
        "1692": 70300,
        "1693": 64200,
        "1694": 221600,
        "1695": 45700,
        "1696": 42100,
        "1697": 108300,
        "1698": 50800,
        "1699": 150900,
        "1700": 112900,
        "1701": 65200,
        "1702": 39600,
        "1703": 56200,
        "1704": 144900,
        "1705": 107100,
        "1706": 74100,
        "1707": 86200,
        "1708": 62800,
        "1709": 209700,
        "1710": 40700,
        "1711": 73000,
        "1712": 81000,
        "1713": 104400,
        "1714": 52300,
        "1715": 61100,
        "1716": 64400,
        "1717": 58800,
        "1718": 81900,
        "1719": 407800,
        "1720": 60800,
        "1721": 61800,
        "1722": 48800,
        "1723": 145300,
        "1724": 133000,
        "1725": 102400,
        "1726": 60400,
        "1727": 23500,
        "1728": 93900,
        "1729": 33500,
        "1730": 20100,
        "1731": 0,
        "1732": 68000,
        "1733": 35100,
        "1734": 14800,
        "1735": 135500,
        "1736": 55400,
        "1737": 121700,
        "1738": 237200,
        "1739": 94300,
        "1740": 58900,
        "1741": 29100,
        "1742": 87300,
        "1743": 222400,
        "1744": 56200,
        "1745": 24200,
        "1746": 0,
        "1747": 92800,
        "1748": 52400,
        "1749": 71500,
        "1750": 195100,
        "1751": 53800,
        "1752": 23200,
        "1753": 365000,
        "1754": 190000,
        "1755": 32900,
        "1756": 269300,
        "1757": 164700,
        "1758": 57800,
        "1759": 176000,
        "1760": 158600,
        "1761": 80900,
        "1762": 81500,
        "1763": 76000,
        "1764": 166100,
        "1765": 102400,
        "1766": 174200,
        "1767": 246800,
        "1768": 193500,
        "1769": 0,
        "1770": 47100,
        "1771": 32800,
        "1772": 99200,
        "1773": 67400,
        "1774": 62100,
        "1775": 81500,
        "1776": 118400,
        "1777": 231900,
        "1778": 24200,
        "1779": 167200,
        "1780": 495800,
        "1781": 161100,
        "1782": 116600,
        "1783": 83400,
        "1784": 113700,
        "1785": 28800,
        "1786": 64900,
        "1787": 73300,
        "1788": 91500,
        "1789": 281200,
        "1790": 278600,
        "1791": 60800,
        "1792": 68700,
        "1793": 53500,
        "1794": 62800,
        "1795": 31200,
        "1796": 27500,
        "1797": 220000,
        "1798": 83800,
        "1799": 73500,
        "1800": 184000,
        "1801": 366800,
        "1802": 242900,
        "1803": 64300,
        "1804": 102500,
        "1805": 294800,
        "1806": 40200,
        "1807": 36800,
        "1808": 31800,
        "1809": 122500,
        "1810": 55500,
        "1811": 51600,
        "1812": 41900,
        "1813": 72600,
        "1814": 177800,
        "1815": 49500,
        "1816": 56600,
        "1817": 42000,
        "1818": 183300,
        "1819": 13600,
        "1820": 309200,
        "1821": 86800,
        "1822": 79400,
        "1823": 218300,
        "1824": 95500,
        "1825": 54200,
        "1826": 147900,
        "1827": 21900,
        "1828": 53600,
        "1829": 38700,
        "1830": 47200,
        "1831": 29100,
        "1832": 103100,
        "1833": 54100,
        "1834": 55300,
        "1835": 67300,
        "1836": 103500,
        "1837": 202200,
        "1838": 258500,
        "1839": 0,
        "1840": 81900,
        "1841": 147300,
        "1842": 28100,
        "1843": 230600,
        "1844": 59500,
        "1845": 37100,
        "1846": 41400,
        "1847": 63000,
        "1848": 61000,
        "1849": 113100,
        "1850": 34300,
        "1851": 69300,
        "1852": 153300,
        "1853": 30600,
        "1854": 282100,
        "1855": 262500,
        "1856": 272900,
        "1857": 29500,
        "1858": 67800,
        "1859": 254100,
        "1860": 24100,
        "1861": 66600,
        "1862": 55500,
        "1863": 37700,
        "1864": 11100,
        "1865": 84200,
        "1866": 68400,
        "1867": 35500,
        "1868": 26700,
        "1869": 72100,
        "1870": 49600,
        "1871": 44500,
        "1872": 24700,
        "1873": 65200,
        "1874": 48400,
        "1875": 44600,
        "1876": 38000,
        "1877": 63400,
        "1878": 50500,
        "1879": 36800,
        "1880": 30500,
        "1881": 110500,
        "1882": 64800,
        "1883": 48200,
        "1884": 67900,
        "1885": 97900,
        "1886": 55500,
        "1887": 30300,
        "1888": 22800,
        "1889": 166700,
        "1890": 63800,
        "1891": 0,
        "1892": 10000,
        "1893": 162800,
        "1894": 43400,
        "1895": 43800,
        "1896": 25500,
        "1897": 423800,
        "1898": 73400,
        "1899": 189000,
        "1900": 19500,
        "1901": 97600,
        "1902": 80100,
        "1903": 47200,
        "1904": 31100,
        "1905": 73000,
        "1906": 76300,
        "1907": 89300,
        "1908": 28700,
        "1909": 98500,
        "1910": 60200,
        "1911": 32700,
        "1912": 53800,
        "1913": 75900,
        "1914": 57000,
        "1915": 46600,
        "1916": 30300,
        "1917": 74300,
        "1918": 81400,
        "1919": 38700,
        "1920": 24400,
        "1921": 43900,
        "1922": 37100,
        "1923": 28100,
        "1924": 20800,
        "1925": 61400,
        "1926": 55300,
        "1927": 42900,
        "1928": 16500,
        "1929": 176200,
        "1930": 90800,
        "1931": 54200,
        "1932": 35300,
        "1933": 53600,
        "1934": 47300,
        "1935": 47200,
        "1936": 14300,
        "1937": 339900,
        "1938": 88300,
        "1939": 52300,
        "1940": 30500,
        "1941": 88200,
        "1942": 73300,
        "1943": 37300,
        "1944": 0,
        "1945": 171300,
        "1946": 44200,
        "1947": 37400,
        "1948": 42000,
        "1949": 67700,
        "1950": 54300,
        "1951": 229800,
        "1952": 69300,
        "1953": 57700,
        "1954": 21400,
        "1955": 73000,
        "1956": 52100,
        "1957": 69600,
        "1958": 233800,
        "1959": 60900,
        "1960": 31600,
        "1961": 67900,
        "1962": 36700,
        "1963": 88900,
        "1964": 201600,
        "1965": 539900,
        "1966": 175500,
        "1967": 66300,
        "1968": 179400,
        "1969": 17300,
        "1970": 74400,
        "1971": 211100,
        "1972": 58800,
        "1973": 174300,
        "1974": 18200,
        "1975": 59100,
        "1976": 226400,
        "1977": 247000,
        "1978": 73800,
        "1979": 43200,
        "1980": 46300,
        "1981": 33100,
        "1982": 97600,
        "1983": 92700,
        "1984": 66700,
        "1985": 60100,
        "1986": 22800,
        "1987": 36900,
        "1988": 4800,
        "1989": 76000,
        "1990": 138300,
        "1991": 65700,
        "1992": 37200,
        "1993": 96100,
        "1994": 55900,
        "1995": 48000,
        "1996": 44600,
        "1997": 104400,
        "1998": 50300,
        "1999": 35600,
        "2000": 14600,
        "2001": 291700,
        "2002": 138500,
        "2003": 622700,
        "2004": 52300,
        "2005": 76400,
        "2006": 29600,
        "2007": 29100,
        "2008": 319000,
        "2009": 60800,
        "2010": 35400,
        "2011": 30800,
        "2012": 58000,
        "2013": 36700,
        "2014": 54500,
        "2015": 47200,
        "2016": 13500,
        "2017": 37500,
        "2018": 49500,
        "2019": 262700,
        "2020": 70200,
        "2021": 33100,
        "2022": 112200,
        "2023": 188100,
        "2024": 333400,
        "2025": 40000,
        "2026": 273700,
        "2027": 312000,
        "2028": 122400,
        "2029": 88900,
        "2030": 28300,
        "2031": 35100,
        "2032": 43800,
        "2033": 64099,
        "2034": 77400,
        "2035": 50400,
        "2036": 69400,
        "2037": 33300,
        "2038": 39300,
        "2039": 62600,
        "2040": 117000,
        "2041": 54900,
        "2042": 56900,
        "2043": 41100,
        "2044": 87600,
        "2045": 90100,
        "2046": 65900,
        "2047": 50000,
        "2048": 15500,
        "2049": 129699,
        "2050": 36400,
        "2051": 20200,
        "2052": 115200,
        "2053": 52700,
        "2054": 51600,
        "2055": 93500,
        "2056": 38700,
        "2057": 32299,
        "2058": 21600,
        "2059": 72200,
        "2060": 33100,
        "2061": 65400,
        "2062": 194100,
        "2063": 126300,
        "2064": 89700,
        "2065": 50800,
        "2066": 75900,
        "2067": 40400,
        "2068": 32100,
        "2069": 23200,
        "2070": 131000,
        "2071": 89300,
        "2072": 88600,
        "2073": 91400,
        "2074": 68000,
        "2075": 39000,
        "2076": 85900,
        "2077": 105400,
        "2078": 170500,
        "2079": 55900,
        "2080": 57900,
        "2081": 78300,
        "2082": 66000,
        "2083": 46900,
        "2084": 14300,
        "2085": 199000,
        "2086": 65600,
        "2087": 52300,
        "2088": 0,
        "2089": 84600,
        "2090": 240700,
        "2091": 58700,
        "2092": 16000,
        "2093": 102900,
        "2094": 88300,
        "2095": 198400,
        "2096": 20500,
        "2097": 81500,
        "2098": 280500,
        "2099": 79700,
        "2100": 22000,
        "2101": 198600,
        "2102": 72000,
        "2103": 49100,
        "2104": 52700,
        "2105": 120100,
        "2106": 57900,
        "2107": 61500,
        "2108": 59200,
        "2109": 76500,
        "2110": 81600,
        "2111": 37600,
        "2112": 15800,
        "2113": 82200,
        "2114": 48900,
        "2115": 67700,
        "2116": 43300,
        "2117": 65200,
        "2118": 41100,
        "2119": 14300,
        "2120": 70100,
        "2121": 278200,
        "2122": 52800,
        "2123": 14400,
        "2124": 60800,
        "2125": 103900,
        "2126": 34600,
        "2127": 42600,
        "2128": 38000,
        "2129": 17800,
        "2130": 249200,
        "2131": 58500,
        "2132": 39100,
        "2133": 20300,
        "2134": 62100,
        "2135": 295600,
        "2136": 37600,
        "2137": 19300,
        "2138": 85200,
        "2139": 65300,
        "2140": 65099,
        "2141": 32600,
        "2142": 165200,
        "2143": 123400,
        "2144": 118000,
        "2145": 109400,
        "2146": 90600,
        "2147": 85300,
        "2148": 106200,
        "2149": 81000,
        "2150": 75200,
        "2151": 71900,
        "2152": 83700,
        "2153": 69800,
        "2154": 64400,
        "2155": 58300,
        "2156": 68300,
        "2157": 107800,
        "2158": 50000,
        "2159": 15100,
        "2160": 41700,
        "2161": 50600,
        "2162": 40200,
        "2163": 20600,
        "2164": 67300,
        "2165": 67100,
        "2166": 58000,
        "2167": 40900,
        "2168": 55100,
        "2169": 51900,
        "2170": 11100,
        "2171": 42800,
        "2172": 32900,
        "2173": 63600,
        "2174": 15300,
        "2175": 41500,
        "2176": 21700,
        "2177": 53300,
        "2178": 46700,
        "2179": 27300,
        "2180": 25100,
        "2181": 35600,
        "2182": 36100,
        "2183": 11600,
        "2184": 17300,
        "2185": 53700,
        "2186": 50500,
        "2187": 28100,
        "2188": 21300,
        "2189": 69300,
        "2190": 47400,
        "2191": 36000,
        "2192": 20700,
        "2193": 182900,
        "2194": 32400,
        "2195": 35800,
        "2196": 26400,
        "2197": 41200,
        "2198": 34800,
        "2199": 23900,
        "2200": 21100,
        "2201": 70100,
        "2202": 36400,
        "2203": 26300,
        "2204": 9200,
        "2205": 79100,
        "2206": 43000,
        "2207": 274600,
        "2208": 14400,
        "2209": 53700,
        "2210": 45000,
        "2211": 229000,
        "2212": 22200,
        "2213": 73900,
        "2214": 214100,
        "2215": 59700,
        "2216": 39600,
        "2217": 205900,
        "2218": 19700,
        "2219": 23200,
        "2220": 62700,
        "2221": 174700,
        "2222": 20100,
        "2223": 50000,
        "2224": 54700,
        "2225": 52900,
        "2226": 12600,
        "2227": 130300,
        "2228": 45000,
        "2229": 18700,
        "2230": 101400,
        "2231": 86500,
        "2232": 35700,
        "2233": 12500,
        "2234": 275800,
        "2235": 74800,
        "2236": 26200,
        "2237": 45200,
        "2238": 51900,
        "2239": 45800,
        "2240": 40600,
        "2241": 16600,
        "2242": 63100,
        "2243": 35700,
        "2244": 216200,
        "2245": 14400,
        "2246": 66100,
        "2247": 42200,
        "2248": 9500,
        "2249": 129600,
        "2250": 34600,
        "2251": 112800,
        "2252": 20900,
        "2253": 67700,
        "2254": 49400,
        "2255": 22900,
        "2256": 61900,
        "2257": 39900,
        "2258": 35100,
        "2259": 66600,
        "2260": 47000,
        "2261": 61600,
        "2262": 24500,
        "2263": 61600,
        "2264": 242000,
        "2265": 32900,
        "2266": 90700,
        "2267": 44100,
        "2268": 23700,
        "2269": 11200,
        "2270": 76900,
        "2271": 103200,
        "2272": 21800,
        "2273": 107600,
        "2274": 61700,
        "2275": 37400,
        "2276": 72400,
        "2277": 49000,
        "2278": 23300,
        "2279": 62200,
        "2280": 37500,
        "2281": 49900,
        "2282": 19300,
        "2283": 68700,
        "2284": 76200,
        "2285": 45500,
        "2286": 13700,
        "2287": 65600,
        "2288": 63000,
        "2289": 47300,
        "2290": 25900,
        "2291": 69400,
        "2292": 55300,
        "2293": 45700,
        "2294": 20300,
        "2295": 77400,
        "2296": 55600,
        "2297": 63200,
        "2298": 26500,
        "2299": 73200,
        "2300": 40300,
        "2301": 51800,
        "2302": 27200,
        "2303": 308600,
        "2304": 42200,
        "2305": 56600,
        "2306": 33600,
        "2307": 97000,
        "2308": 68000,
        "2309": 50300,
        "2310": 18100,
        "2311": 72300,
        "2312": 76600,
        "2313": 36000,
        "2314": 26100,
        "2315": 52000,
        "2316": 40200,
        "2317": 29800,
        "2318": 11200,
        "2319": 71700,
        "2320": 69900,
        "2321": 37500,
        "2322": 21400,
        "2323": 115200,
        "2324": 39200,
        "2325": 67900,
        "2326": 26200,
        "2327": 77000,
        "2328": 45000,
        "2329": 34200,
        "2330": 8200,
        "2331": 84400,
        "2332": 38300,
        "2333": 19200,
        "2334": 79700,
        "2335": 105700,
        "2336": 55000,
        "2337": 31400,
        "2338": 59600,
        "2339": 50600,
        "2340": 59500,
        "2341": 35800,
        "2342": 78100,
        "2343": 73500,
        "2344": 99000,
        "2345": 35700,
        "2346": 68000,
        "2347": 115500,
        "2348": 73900,
        "2349": 73700,
        "2350": 78900,
        "2351": 59200,
        "2352": 28000,
        "2353": 76300,
        "2354": 70000,
        "2355": 86900,
        "2356": 32200,
        "2357": 74300,
        "2358": 95600,
        "2359": 92600,
        "2360": 33700,
        "2361": 104800,
        "2362": 63000,
        "2363": 54400,
        "2364": 19800,
        "2365": 80100,
        "2366": 54900,
        "2367": 75500,
        "2368": 12200,
        "2369": 85600,
        "2370": 43600,
        "2371": 71900,
        "2372": 80600,
        "2373": 57600,
        "2374": 32299,
        "2375": 78600,
        "2376": 51800,
        "2377": 44500,
        "2378": 57600,
        "2379": 84700,
        "2380": 255300,
        "2381": 45100,
        "2382": 36900,
        "2383": 9500,
        "2384": 75700,
        "2385": 54700,
        "2386": 64800,
        "2387": 59600,
        "2388": 51100,
        "2389": 38700,
        "2390": 77500,
        "2391": 122200,
        "2392": 45200,
        "2393": 22600,
        "2394": 63300,
        "2395": 41500,
        "2396": 41400,
        "2397": 16100,
        "2398": 42500,
        "2399": 54800,
        "2400": 46300,
        "2401": 9700,
        "2402": 62800,
        "2403": 46700,
        "2404": 33900,
        "2405": 25900,
        "2406": 72400,
        "2407": 90900,
        "2408": 51500,
        "2409": 15400,
        "2410": 48900,
        "2411": 61000,
        "2412": 45600,
        "2413": 19100,
        "2414": 59600,
        "2415": 66500,
        "2416": 67400,
        "2417": 25200,
        "2418": 51500,
        "2419": 40900,
        "2420": 15900,
        "2421": 28400,
        "2422": 66100,
        "2423": 64200,
        "2424": 69100,
        "2425": 8400,
        "2426": 51100
    },
    "topics": {
        "0": "String,Stack,Simulation,",
        "1": "Array,Hash Table,",
        "2": "Linked List,Math,Recursion,",
        "3": "Array,Binary Search,Divide and Conquer,",
        "4": "String,",
        "5": "Math,",
        "6": "Math,",
        "7": "String,Dynamic Programming,Recursion,",
        "8": "Array,Two Pointers,Greedy,",
        "9": "Hash Table,Math,String,",
        "10": "Hash Table,Math,String,",
        "11": "String,Trie,",
        "12": "Array,Two Pointers,Sorting,",
        "13": "Array,Two Pointers,Sorting,",
        "14": "Hash Table,String,Backtracking,",
        "15": "Array,Two Pointers,Sorting,",
        "16": "Linked List,Two Pointers,",
        "17": "String,Stack,",
        "18": "Linked List,Recursion,",
        "19": "String,Dynamic Programming,Backtracking,",
        "20": "Linked List,Divide and Conquer,Heap (Priority Queue),Merge Sort,",
        "21": "Linked List,Recursion,",
        "22": "Linked List,Recursion,",
        "23": "Array,Two Pointers,",
        "24": "Array,Two Pointers,",
        "25": "Two Pointers,String,String Matching,",
        "26": "Math,Bit Manipulation,",
        "27": "Hash Table,String,Sliding Window,",
        "28": "Array,Two Pointers,",
        "29": "String,Dynamic Programming,Stack,",
        "30": "Array,Binary Search,",
        "31": "Array,Binary Search,",
        "32": "Array,Binary Search,",
        "33": "Array,Hash Table,Matrix,",
        "34": "Array,Hash Table,Backtracking,Matrix,",
        "35": "String,",
        "36": "Array,Backtracking,",
        "37": "Array,Backtracking,",
        "38": "Array,Hash Table,",
        "39": "Array,Two Pointers,Dynamic Programming,Stack,Monotonic Stack,",
        "40": "Math,String,Simulation,",
        "41": "String,Dynamic Programming,Greedy,Recursion,",
        "42": "Array,Dynamic Programming,Greedy,",
        "43": "Array,Backtracking,",
        "44": "Array,Backtracking,",
        "45": "Array,Math,Matrix,",
        "46": "Array,Hash Table,String,Sorting,",
        "47": "Math,Recursion,",
        "48": "Array,Backtracking,",
        "49": "Backtracking,",
        "50": "Array,Divide and Conquer,Dynamic Programming,",
        "51": "Array,Matrix,Simulation,",
        "52": "Array,Dynamic Programming,Greedy,",
        "53": "Array,Sorting,",
        "54": "Array,",
        "55": "String,",
        "56": "Math,Recursion,",
        "57": "Linked List,Two Pointers,",
        "58": "Math,Dynamic Programming,Combinatorics,",
        "59": "Array,Dynamic Programming,Matrix,",
        "60": "Array,Dynamic Programming,Matrix,",
        "61": "String,",
        "62": "Math,String,Bit Manipulation,Simulation,",
        "63": "Array,String,Simulation,",
        "64": "Math,Binary Search,",
        "65": "Math,Dynamic Programming,Memoization,",
        "66": "String,Stack,",
        "67": "String,Dynamic Programming,",
        "68": "Array,Binary Search,Matrix,",
        "69": "Array,Two Pointers,Sorting,",
        "70": "Hash Table,String,Sliding Window,",
        "71": "Backtracking,",
        "72": "Array,Backtracking,Bit Manipulation,",
        "73": "Array,String,Backtracking,Matrix,",
        "74": "Array,Two Pointers,",
        "75": "Array,Binary Search,",
        "76": "Linked List,Two Pointers,",
        "77": "Linked List,",
        "78": "Array,Stack,Monotonic Stack,",
        "79": "Array,Dynamic Programming,Stack,Matrix,Monotonic Stack,",
        "80": "Linked List,Two Pointers,",
        "81": "String,Dynamic Programming,",
        "82": "Array,Two Pointers,Sorting,",
        "83": "Math,Backtracking,Bit Manipulation,",
        "84": "Array,Backtracking,Bit Manipulation,",
        "85": "String,Dynamic Programming,",
        "86": "Linked List,",
        "87": "Stack,Tree,Depth-First Search,Binary Tree,",
        "88": "Dynamic Programming,Backtracking,Tree,Binary Search Tree,Binary Tree,",
        "89": "Math,Dynamic Programming,Tree,Binary Search Tree,Binary Tree,",
        "90": "String,Dynamic Programming,",
        "91": "Tree,Depth-First Search,Binary Search Tree,Binary Tree,",
        "92": "Tree,Depth-First Search,Binary Search Tree,Binary Tree,",
        "93": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "94": "Tree,Breadth-First Search,Binary Tree,",
        "95": "Tree,Breadth-First Search,Binary Tree,",
        "96": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "97": "Array,Hash Table,Divide and Conquer,Tree,Binary Tree,",
        "98": "Array,Hash Table,Divide and Conquer,Tree,Binary Tree,",
        "99": "Array,Divide and Conquer,Tree,Binary Search Tree,Binary Tree,",
        "100": "Linked List,Divide and Conquer,Tree,Binary Search Tree,Binary Tree,",
        "101": "Tree,Depth-First Search,Binary Tree,",
        "102": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "103": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "104": "Backtracking,Tree,Depth-First Search,Binary Tree,",
        "105": "Linked List,Stack,Tree,Depth-First Search,Binary Tree,",
        "106": "String,Dynamic Programming,",
        "107": "Linked List,Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "108": "Linked List,Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "109": "Array,Dynamic Programming,",
        "110": "Array,Dynamic Programming,",
        "111": "Array,Dynamic Programming,",
        "112": "Array,Dynamic Programming,",
        "113": "Array,Dynamic Programming,Greedy,",
        "114": "Array,Dynamic Programming,",
        "115": "Dynamic Programming,Tree,Depth-First Search,Binary Tree,",
        "116": "Two Pointers,String,",
        "117": "Hash Table,String,Backtracking,Breadth-First Search,",
        "118": "Hash Table,String,Breadth-First Search,",
        "119": "Array,Hash Table,Union Find,",
        "120": "Tree,Depth-First Search,Binary Tree,",
        "121": "Array,Depth-First Search,Breadth-First Search,Union Find,Matrix,",
        "122": "String,Dynamic Programming,Backtracking,",
        "123": "Hash Table,Depth-First Search,Breadth-First Search,Graph,",
        "124": "Array,Greedy,",
        "125": "Array,Greedy,",
        "126": "Array,Bit Manipulation,",
        "127": "Array,Bit Manipulation,",
        "128": "Hash Table,Linked List,",
        "129": "Array,Hash Table,String,Dynamic Programming,Trie,Memoization,",
        "130": "Array,Hash Table,String,Dynamic Programming,Backtracking,Trie,Memoization,",
        "131": "Hash Table,Linked List,Two Pointers,",
        "132": "Hash Table,Linked List,Two Pointers,",
        "133": "Linked List,Two Pointers,Stack,Recursion,",
        "134": "Stack,Tree,Depth-First Search,Binary Tree,",
        "135": "Stack,Tree,Depth-First Search,Binary Tree,",
        "136": "Hash Table,Linked List,Design,Doubly-Linked List,",
        "137": "Linked List,Sorting,",
        "138": "Linked List,Two Pointers,Divide and Conquer,Sorting,Merge Sort,",
        "139": "Array,Hash Table,Math,Geometry,",
        "140": "Array,Math,Stack,",
        "141": "Two Pointers,String,",
        "142": "Array,Dynamic Programming,",
        "143": "Array,Binary Search,",
        "144": "Array,Binary Search,",
        "145": "Stack,Design,",
        "146": "Hash Table,Linked List,Two Pointers,",
        "147": "Array,Binary Search,",
        "148": "Array,Sorting,Bucket Sort,Radix Sort,",
        "149": "Hash Table,Math,String,",
        "150": "Array,Two Pointers,Binary Search,",
        "151": "Math,String,",
        "152": "Array,Hash Table,Divide and Conquer,Sorting,Counting,",
        "153": "Math,String,",
        "154": "Math,",
        "155": "Array,Dynamic Programming,Matrix,",
        "156": "Database,",
        "157": "Database,",
        "158": "Database,",
        "159": "Database,",
        "160": "Array,String,Greedy,Sorting,",
        "161": "Database,",
        "162": "Database,",
        "163": "Database,",
        "164": "Database,",
        "165": "Database,",
        "166": "Database,",
        "167": "Hash Table,String,Bit Manipulation,Sliding Window,Rolling Hash,Hash Function,",
        "168": "Array,Dynamic Programming,",
        "169": "Array,Math,Two Pointers,",
        "170": "Divide and Conquer,Bit Manipulation,",
        "171": "Shell,",
        "172": "Shell,",
        "173": "Shell,",
        "174": "Shell,",
        "175": "Database,",
        "176": "Database,",
        "177": "Array,Dynamic Programming,",
        "178": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "179": "Array,Depth-First Search,Breadth-First Search,Union Find,Matrix,",
        "180": "Bit Manipulation,",
        "181": "Hash Table,Math,Two Pointers,",
        "182": "Linked List,Recursion,",
        "183": "Array,Math,Enumeration,Number Theory,",
        "184": "Hash Table,String,",
        "185": "Linked List,Recursion,",
        "186": "Depth-First Search,Breadth-First Search,Graph,Topological Sort,",
        "187": "Hash Table,String,Design,Trie,",
        "188": "Array,Binary Search,Sliding Window,Prefix Sum,",
        "189": "Depth-First Search,Breadth-First Search,Graph,Topological Sort,",
        "190": "String,Depth-First Search,Design,Trie,",
        "191": "Array,String,Backtracking,Trie,Matrix,",
        "192": "Array,Dynamic Programming,",
        "193": "String,Rolling Hash,String Matching,Hash Function,",
        "194": "Array,Divide and Conquer,Sorting,Heap (Priority Queue),Quickselect,",
        "195": "Array,Backtracking,",
        "196": "Array,Hash Table,Sorting,",
        "197": "Array,Divide and Conquer,Binary Indexed Tree,Segment Tree,Line Sweep,Heap (Priority Queue),Ordered Set,",
        "198": "Array,Hash Table,Sliding Window,",
        "199": "Array,Sliding Window,Sorting,Bucket Sort,Ordered Set,",
        "200": "Array,Dynamic Programming,Matrix,",
        "201": "Binary Search,Bit Manipulation,Tree,Binary Tree,",
        "202": "Stack,Design,Queue,",
        "203": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "204": "Math,String,Stack,",
        "205": "Array,",
        "206": "Array,Hash Table,Sorting,Counting,",
        "207": "Tree,Depth-First Search,Binary Search Tree,Binary Tree,",
        "208": "Math,Bit Manipulation,Recursion,",
        "209": "Stack,Design,Queue,",
        "210": "Math,Dynamic Programming,Recursion,",
        "211": "Linked List,Two Pointers,Stack,Recursion,",
        "212": "Array,Prefix Sum,",
        "213": "Array,Binary Search,Divide and Conquer,Matrix,",
        "214": "Math,String,Dynamic Programming,Recursion,Memoization,",
        "215": "Hash Table,String,Sorting,",
        "216": "String,Backtracking,Tree,Depth-First Search,Binary Tree,",
        "217": "Math,Simulation,Number Theory,",
        "218": "Array,Bit Manipulation,",
        "219": "Database,",
        "220": "Hash Table,Math,Dynamic Programming,Heap (Priority Queue),",
        "221": "Array,Hash Table,Math,Binary Search,Bit Manipulation,Sorting,",
        "222": "Math,String,Recursion,",
        "223": "Array,Sorting,Counting Sort,",
        "224": "Array,Binary Search,",
        "225": "Binary Search,Interactive,",
        "226": "Math,Dynamic Programming,Breadth-First Search,",
        "227": "Math,String,Backtracking,",
        "228": "Array,Two Pointers,",
        "229": "Array,Design,Iterator,",
        "230": "Array,Two Pointers,Binary Search,Bit Manipulation,",
        "231": "Array,Matrix,Simulation,",
        "232": "Hash Table,String,",
        "233": "Math,Brainteaser,Game Theory,",
        "234": "Two Pointers,Design,Sorting,Heap (Priority Queue),Data Stream,",
        "235": "String,Tree,Depth-First Search,Breadth-First Search,Design,Binary Tree,",
        "236": "Hash Table,String,Counting,",
        "237": "Array,Binary Search,Dynamic Programming,",
        "238": "String,Backtracking,Breadth-First Search,",
        "239": "Array,Design,Matrix,Prefix Sum,",
        "240": "String,Backtracking,",
        "241": "Array,Design,Binary Indexed Tree,Segment Tree,",
        "242": "Array,Dynamic Programming,",
        "243": "Depth-First Search,Breadth-First Search,Graph,Topological Sort,",
        "244": "Array,Dynamic Programming,",
        "245": "Array,Binary Search,Divide and Conquer,Binary Indexed Tree,Segment Tree,Merge Sort,Ordered Set,",
        "246": "String,Stack,Greedy,Monotonic Stack,",
        "247": "Array,String,Bit Manipulation,",
        "248": "Math,Brainteaser,",
        "249": "Array,Two Pointers,Stack,Greedy,Monotonic Stack,",
        "250": "Array,Dynamic Programming,Breadth-First Search,",
        "251": "Array,Divide and Conquer,Greedy,Sorting,Quickselect,",
        "252": "Math,Recursion,",
        "253": "Array,Binary Search,Divide and Conquer,Binary Indexed Tree,Segment Tree,Merge Sort,Ordered Set,",
        "254": "Linked List,",
        "255": "Array,Dynamic Programming,Depth-First Search,Breadth-First Search,Graph,Topological Sort,Memoization,Matrix,",
        "256": "Array,Greedy,",
        "257": "String,Stack,Tree,Binary Tree,",
        "258": "Depth-First Search,Graph,Eulerian Circuit,",
        "259": "Array,Greedy,",
        "260": "Array,Math,Geometry,",
        "261": "Array,Hash Table,String,Trie,",
        "262": "Dynamic Programming,Tree,Depth-First Search,Binary Tree,",
        "263": "Dynamic Programming,Bit Manipulation,",
        "264": "Stack,Tree,Depth-First Search,Design,Queue,Iterator,",
        "265": "Math,Bit Manipulation,Recursion,",
        "266": "Math,Dynamic Programming,",
        "267": "Two Pointers,String,",
        "268": "Two Pointers,String,",
        "269": "Array,Hash Table,Two Pointers,Binary Search,Sorting,",
        "270": "Array,Hash Table,Two Pointers,Binary Search,Sorting,",
        "271": "Binary Search,Design,Ordered Set,",
        "272": "Array,Binary Search,Dynamic Programming,Sorting,",
        "273": "Hash Table,Linked List,Design,Heap (Priority Queue),",
        "274": ",",
        "275": "Array,Binary Search,Matrix,Prefix Sum,Ordered Set,",
        "276": "Math,Depth-First Search,Breadth-First Search,",
        "277": "Math,Binary Search,",
        "278": "Array,Math,Dynamic Programming,Sorting,",
        "279": "Math,Bit Manipulation,",
        "280": "Math,Divide and Conquer,",
        "281": "Array,Heap (Priority Queue),",
        "282": "Binary Search,Interactive,",
        "283": "Math,Dynamic Programming,Game Theory,",
        "284": "Array,Dynamic Programming,Greedy,",
        "285": "Array,Dynamic Programming,",
        "286": "Array,Hash Table,Math,Design,Randomized,",
        "287": "Array,Hash Table,Math,Design,Randomized,",
        "288": "Linked List,Math,Reservoir Sampling,Randomized,",
        "289": "Hash Table,String,Counting,",
        "290": "Array,Math,Randomized,",
        "291": "String,Stack,Depth-First Search,",
        "292": "Depth-First Search,Trie,",
        "293": "Hash Table,String,Queue,Counting,",
        "294": "String,Stack,Depth-First Search,",
        "295": "Hash Table,String,Bit Manipulation,Sorting,",
        "296": "Math,Recursion,",
        "297": "Array,Line Sweep,",
        "298": "Two Pointers,String,Dynamic Programming,",
        "299": "String,Stack,Recursion,",
        "300": "Hash Table,String,Divide and Conquer,Sliding Window,",
        "301": "Array,Math,Dynamic Programming,",
        "302": "Dynamic Programming,Greedy,Bit Manipulation,Memoization,",
        "303": "Hash Table,Math,Reservoir Sampling,Randomized,",
        "304": "Array,String,Depth-First Search,Breadth-First Search,Union Find,Graph,Shortest Path,",
        "305": "Math,Binary Search,",
        "306": "Backtracking,Bit Manipulation,",
        "307": "Array,Dynamic Programming,",
        "308": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "309": "Math,Bit Manipulation,",
        "310": "Array,Binary Indexed Tree,Segment Tree,Sorting,",
        "311": "Array,Breadth-First Search,Heap (Priority Queue),Matrix,",
        "312": "Hash Table,String,Greedy,",
        "313": "Array,Binary Search,Dynamic Programming,Greedy,Prefix Sum,",
        "314": "Math,String,Simulation,",
        "315": "Array,Dynamic Programming,Sliding Window,",
        "316": "Array,Sorting,",
        "317": "Math,String,Simulation,",
        "318": "Array,Dynamic Programming,",
        "319": "Array,Depth-First Search,Breadth-First Search,Matrix,",
        "320": "Array,Depth-First Search,Matrix,",
        "321": "Hash Table,Math,String,",
        "322": "Hash Table,String,Sliding Window,",
        "323": "Array,Divide and Conquer,Tree,Matrix,",
        "324": "Tree,Breadth-First Search,",
        "325": "Hash Table,Linked List,Design,Doubly-Linked List,",
        "326": "Hash Table,String,Breadth-First Search,",
        "327": "String,",
        "328": "Array,Dynamic Programming,Greedy,Sorting,",
        "329": "Array,Binary Search,Sorting,",
        "330": "Tree,Depth-First Search,Binary Tree,",
        "331": "Hash Table,String,Sliding Window,",
        "332": "Trie,",
        "333": "Math,Binary Search,",
        "334": "Array,Hash Table,",
        "335": "Two Pointers,String,",
        "336": "Linked List,Math,Stack,",
        "337": "Array,Dynamic Programming,",
        "338": "Array,Hash Table,Math,",
        "339": "Array,Hash Table,",
        "340": "Tree,Binary Search Tree,Binary Tree,",
        "341": "Hash Table,String,Sorting,Heap (Priority Queue),Bucket Sort,Counting,",
        "342": "Array,Greedy,Sorting,",
        "343": "Array,Math,",
        "344": "Array,Hash Table,",
        "345": "Array,Binary Search,Stack,Monotonic Stack,Ordered Set,",
        "346": "Array,Hash Table,Two Pointers,",
        "347": "Math,Dynamic Programming,Combinatorics,",
        "348": "String,String Matching,",
        "349": "Hash Table,Linked List,Design,Doubly-Linked List,",
        "350": "Bit Manipulation,",
        "351": "Array,Math,Sorting,",
        "352": "Array,Depth-First Search,Breadth-First Search,Matrix,",
        "353": "Math,Dynamic Programming,Bit Manipulation,Memoization,Game Theory,Bitmask,",
        "354": "String,Dynamic Programming,",
        "355": "String,",
        "356": "Math,Rejection Sampling,Randomized,Probability and Statistics,",
        "357": "Array,String,Dynamic Programming,Depth-First Search,Trie,",
        "358": "Array,Dynamic Programming,Backtracking,Bit Manipulation,Bitmask,",
        "359": "Array,String,Dynamic Programming,",
        "360": "Array,Two Pointers,Binary Search,Sorting,",
        "361": "Bit Manipulation,",
        "362": "Array,Math,Bit Manipulation,",
        "363": "Math,Geometry,Rejection Sampling,Randomized,",
        "364": "Math,Enumeration,",
        "365": "Array,Hash Table,Sliding Window,Heap (Priority Queue),",
        "366": "Two Pointers,String,",
        "367": "String,",
        "368": "Math,Binary Search,",
        "369": "Array,",
        "370": "Array,Math,Dynamic Programming,Recursion,Game Theory,",
        "371": "String,Dynamic Programming,Stack,Breadth-First Search,Memoization,",
        "372": "Array,Hash Table,Backtracking,Bit Manipulation,",
        "373": "Math,",
        "374": "Array,Binary Search,Divide and Conquer,Binary Indexed Tree,Segment Tree,Merge Sort,Ordered Set,",
        "375": "Array,Dynamic Programming,Backtracking,",
        "376": "Array,Simulation,",
        "377": "Array,Hash Table,Stack,Monotonic Stack,",
        "378": "Array,Math,Binary Search,Reservoir Sampling,Prefix Sum,Ordered Set,Randomized,",
        "379": "Array,Matrix,Simulation,",
        "380": "Array,Hash Table,String,",
        "381": "Array,Greedy,Sorting,Heap (Priority Queue),",
        "382": "Array,Stack,Monotonic Stack,",
        "383": "Math,",
        "384": "Array,Sorting,Heap (Priority Queue),",
        "385": "Math,",
        "386": "Hash Table,Tree,Depth-First Search,Binary Tree,",
        "387": "Math,Dynamic Programming,Recursion,Memoization,",
        "388": "Database,",
        "389": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "390": "String,Dynamic Programming,Depth-First Search,Breadth-First Search,",
        "391": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "392": "String,Dynamic Programming,",
        "393": "Array,Greedy,",
        "394": "Array,Dynamic Programming,",
        "395": "Hash Table,Math,Reservoir Sampling,Randomized,",
        "396": "String,",
        "397": "String,",
        "398": "Array,Hash Table,Two Pointers,String,Sorting,",
        "399": "Array,Hash Table,Math,Prefix Sum,",
        "400": "Array,Two Pointers,String,Sorting,",
        "401": "Array,Hash Table,Prefix Sum,",
        "402": "Array,Math,Binary Search,Prefix Sum,Randomized,",
        "403": "Array,Depth-First Search,Breadth-First Search,Matrix,",
        "404": "Tree,Depth-First Search,Breadth-First Search,Binary Search Tree,Binary Tree,",
        "405": "Array,Hash Table,Two Pointers,Binary Search,Sorting,",
        "406": "Hash Table,String,Design,Hash Function,",
        "407": "Math,String,Simulation,",
        "408": "Tree,Depth-First Search,Binary Search Tree,Binary Tree,",
        "409": "Array,Math,String,Sorting,",
        "410": "Two Pointers,String,",
        "411": "Array,Dynamic Programming,Breadth-First Search,Matrix,",
        "412": "Tree,Depth-First Search,Binary Tree,",
        "413": "Array,Dynamic Programming,Memoization,",
        "414": "Depth-First Search,Breadth-First Search,Union Find,Graph,",
        "415": "Database,",
        "416": "String,",
        "417": "Dynamic Programming,",
        "418": "Array,Math,Dynamic Programming,",
        "419": "Array,Hash Table,",
        "420": "Math,Two Pointers,String,",
        "421": "Two Pointers,String,",
        "422": "Divide and Conquer,Tree,",
        "423": "Tree,Depth-First Search,Breadth-First Search,",
        "424": "Array,Hash Table,Prefix Sum,",
        "425": "Array,Greedy,Sorting,Counting Sort,",
        "426": "Tree,Depth-First Search,Binary Tree,",
        "427": "Math,String,",
        "428": "Array,Matrix,Simulation,",
        "429": "Hash Table,Two Pointers,String,Sliding Window,",
        "430": "Database,",
        "431": "Tree,Depth-First Search,String Matching,Binary Tree,Hash Function,",
        "432": "Array,Hash Table,",
        "433": "Dynamic Programming,",
        "434": "Database,",
        "435": "Array,Two Pointers,Stack,Greedy,Sorting,Monotonic Stack,",
        "436": "String,Dynamic Programming,",
        "437": "Database,",
        "438": "Database,",
        "439": "Database,",
        "440": "Array,Math,Geometry,",
        "441": "Stack,Tree,Depth-First Search,",
        "442": "Stack,Tree,Depth-First Search,",
        "443": "String,Stack,",
        "444": "Math,String,Simulation,",
        "445": ",",
        "446": "Array,Hash Table,Sliding Window,Sorting,Counting,",
        "447": "Database,",
        "448": "Database,",
        "449": "Array,Math,",
        "450": "Array,Hash Table,String,",
        "451": "Dynamic Programming,",
        "452": "Database,",
        "453": "Database,",
        "454": "Array,Greedy,",
        "455": "String,Tree,Depth-First Search,Binary Tree,",
        "456": "Database,",
        "457": "Database,",
        "458": "Array,Hash Table,String,",
        "459": "Database,",
        "460": "Array,Two Pointers,Binary Search,Greedy,Sorting,",
        "461": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "462": "Database,",
        "463": "Database,",
        "464": "Array,Hash Table,Greedy,Sorting,Heap (Priority Queue),Counting,",
        "465": "Array,Linked List,Design,Queue,",
        "466": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "467": "Array,Greedy,",
        "468": "Database,",
        "469": "Database,",
        "470": "Array,Math,Sorting,",
        "471": "Dynamic Programming,",
        "472": "Array,Greedy,Sorting,Heap (Priority Queue),",
        "473": "Array,Hash Table,Greedy,Sliding Window,Sorting,Heap (Priority Queue),",
        "474": "Math,Two Pointers,Binary Search,",
        "475": "Array,Stack,",
        "476": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "477": "Array,Dynamic Programming,Backtracking,Bit Manipulation,Memoization,Bitmask,",
        "478": "String,Dynamic Programming,",
        "479": "Math,String,Simulation,",
        "480": "Array,Linked List,Design,Queue,",
        "481": "Array,Sliding Window,",
        "482": "Array,Hash Table,Bit Manipulation,Sorting,",
        "483": "Array,Dynamic Programming,Greedy,Sorting,",
        "484": "Two Pointers,String,Dynamic Programming,",
        "485": "Array,Hash Table,String,Trie,",
        "486": "String,Greedy,Queue,",
        "487": "Math,Dynamic Programming,",
        "488": "Hash Table,Two Pointers,Tree,Depth-First Search,Breadth-First Search,Binary Search Tree,Binary Tree,",
        "489": "Array,Divide and Conquer,Stack,Tree,Monotonic Stack,Binary Tree,",
        "490": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "491": "String,Simulation,",
        "492": "Array,Two Pointers,Binary Search,Sliding Window,Sorting,Heap (Priority Queue),",
        "493": "Array,Hash Table,Greedy,Heap (Priority Queue),",
        "494": "Array,Matrix,",
        "495": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "496": "String,Dynamic Programming,",
        "497": "Array,",
        "498": "Array,Math,",
        "499": "Math,Binary Search,",
        "500": "Tree,Depth-First Search,Binary Search Tree,Binary Tree,",
        "501": "Tree,Depth-First Search,Binary Tree,",
        "502": "Math,Bit Manipulation,Depth-First Search,Breadth-First Search,",
        "503": "Array,Dynamic Programming,Binary Indexed Tree,Segment Tree,",
        "504": "Array,",
        "505": "Array,Breadth-First Search,Heap (Priority Queue),Matrix,",
        "506": "Hash Table,String,Depth-First Search,Design,Trie,",
        "507": "Hash Table,String,Design,Trie,",
        "508": "Array,Math,Backtracking,",
        "509": "Two Pointers,String,Greedy,",
        "510": "Array,Stack,Simulation,",
        "511": "Depth-First Search,Breadth-First Search,Union Find,Graph,",
        "512": "Depth-First Search,Breadth-First Search,Union Find,Graph,",
        "513": "String,String Matching,",
        "514": "Tree,Depth-First Search,Binary Tree,",
        "515": "Dynamic Programming,",
        "516": "Array,Dynamic Programming,",
        "517": "Array,Hash Table,Tree,Depth-First Search,Breadth-First Search,",
        "518": "Array,String,Dynamic Programming,Backtracking,Bit Manipulation,Bitmask,",
        "519": "Bit Manipulation,",
        "520": "Array,Depth-First Search,Breadth-First Search,Union Find,Matrix,",
        "521": "Two Pointers,String,",
        "522": "Array,Hash Table,",
        "523": "Array,Dynamic Programming,Backtracking,Bit Manipulation,Memoization,Bitmask,",
        "524": "Array,Segment Tree,Ordered Set,",
        "525": "Tree,Binary Search Tree,Binary Tree,",
        "526": "Tree,Binary Search Tree,Binary Tree,",
        "527": "Tree,Design,Binary Search Tree,Heap (Priority Queue),Binary Tree,Data Stream,",
        "528": "Array,Binary Search,",
        "529": "Array,Hash Table,Linked List,Design,Hash Function,",
        "530": "Array,Hash Table,Linked List,Design,Hash Function,",
        "531": "Linked List,Design,",
        "532": "String,",
        "533": "Array,Hash Table,Math,Binary Search,Sorting,Randomized,",
        "534": "String,Dynamic Programming,",
        "535": "Array,Binary Search,Sliding Window,Prefix Sum,",
        "536": "Array,Dynamic Programming,Greedy,",
        "537": "Design,Segment Tree,Ordered Set,",
        "538": "Array,",
        "539": "Array,Binary Search,Dynamic Programming,Sliding Window,Rolling Hash,Hash Function,",
        "540": "Array,Two Pointers,Binary Search,Sorting,",
        "541": "Array,Hash Table,String,Trie,Sorting,",
        "542": "Array,Hash Table,String,Depth-First Search,Breadth-First Search,Union Find,Sorting,",
        "543": "Array,String,",
        "544": "Array,Prefix Sum,",
        "545": "Linked List,",
        "546": "Hash Table,String,Stack,Sorting,",
        "547": "Math,",
        "548": "Array,Binary Search,Design,Segment Tree,Ordered Set,",
        "549": "String,Dynamic Programming,",
        "550": "Array,Binary Search,Design,Segment Tree,Prefix Sum,Ordered Set,",
        "551": "Array,Depth-First Search,Breadth-First Search,Matrix,",
        "552": "Array,Stack,Simulation,",
        "553": "Hash Table,String,Stack,Recursion,",
        "554": "Math,Greedy,",
        "555": "Array,Stack,Monotonic Stack,",
        "556": "Array,Hash Table,Dynamic Programming,",
        "557": "Array,Dynamic Programming,Matrix,",
        "558": "Depth-First Search,Breadth-First Search,Graph,Heap (Priority Queue),Shortest Path,",
        "559": "Array,Binary Search,",
        "560": "Array,Sorting,",
        "561": "Array,Hash Table,String,",
        "562": "Array,Depth-First Search,Breadth-First Search,Matrix,Simulation,",
        "563": "Array,Hash Table,String,Breadth-First Search,",
        "564": "Depth-First Search,Graph,Eulerian Circuit,",
        "565": "Math,Binary Search,",
        "566": "Bit Manipulation,Depth-First Search,Breadth-First Search,",
        "567": "Array,Greedy,Sorting,",
        "568": "String,Recursion,",
        "569": "Hash Table,Two Pointers,String,Greedy,",
        "570": "Array,Dynamic Programming,",
        "571": "Greedy,Depth-First Search,Breadth-First Search,Union Find,Graph,",
        "572": "Array,Matrix,",
        "573": "Hash Table,String,Greedy,Sorting,Heap (Priority Queue),Counting,",
        "574": "Array,Stack,Greedy,Sorting,Monotonic Stack,",
        "575": "Array,Stack,Greedy,Sorting,Monotonic Stack,",
        "576": "Hash Table,Math,String,Stack,Recursion,",
        "577": "Hash Table,String,",
        "578": "Array,Breadth-First Search,Matrix,",
        "579": "Array,Math,",
        "580": "Two Pointers,String,",
        "581": "Array,Binary Search,Depth-First Search,Breadth-First Search,Union Find,Heap (Priority Queue),Matrix,",
        "582": "Math,Bit Manipulation,Recursion,",
        "583": "Math,",
        "584": "Array,Hash Table,Math,Greedy,",
        "585": "Array,Math,Bit Manipulation,Matrix,",
        "586": "Tree,Depth-First Search,Breadth-First Search,Binary Search Tree,Binary Tree,",
        "587": "String,Backtracking,Bit Manipulation,",
        "588": "Depth-First Search,Breadth-First Search,Union Find,Graph,",
        "589": "Array,Two Pointers,Binary Search,Sorting,Heap (Priority Queue),",
        "590": "Dynamic Programming,Depth-First Search,Breadth-First Search,Graph,Heap (Priority Queue),Shortest Path,",
        "591": "Math,Dynamic Programming,",
        "592": "Array,Math,",
        "593": "Dynamic Programming,",
        "594": "Hash Table,String,Sorting,",
        "595": "Array,Hash Table,String,Binary Search,Dynamic Programming,Trie,Sorting,",
        "596": "Math,Binary Search,",
        "597": "Array,Matrix,",
        "598": "Array,Two Pointers,",
        "599": "String,String Matching,",
        "600": "Backtracking,Depth-First Search,Breadth-First Search,Graph,",
        "601": "Array,Prefix Sum,",
        "602": "Dynamic Programming,",
        "603": "Array,Dynamic Programming,",
        "604": "Depth-First Search,Breadth-First Search,Graph,Topological Sort,",
        "605": "Array,Union Find,Matrix,",
        "606": "Array,Hash Table,String,",
        "607": "Array,String,",
        "608": "Array,Greedy,Matrix,",
        "609": "Math,Dynamic Programming,Probability and Statistics,",
        "610": "Array,Two Pointers,String,",
        "611": "Array,Math,Bit Manipulation,Brainteaser,Game Theory,",
        "612": "Array,Hash Table,String,Counting,",
        "613": "Array,Math,Geometry,",
        "614": "Array,Dynamic Programming,Prefix Sum,",
        "615": "Tree,Depth-First Search,Binary Tree,",
        "616": "Array,Hash Table,Breadth-First Search,",
        "617": "String,Backtracking,Enumeration,",
        "618": "Array,Hash Table,Linked List,",
        "619": ",",
        "620": ",",
        "621": "Array,Hash Table,String,Trie,",
        "622": "Array,Two Pointers,String,",
        "623": "Array,Hash Table,",
        "624": "Array,Hash Table,Dynamic Programming,Sorting,",
        "625": "String,",
        "626": "Array,Two Pointers,Binary Search,Sorting,",
        "627": "Array,Depth-First Search,Breadth-First Search,Union Find,Matrix,",
        "628": "Hash Table,String,Dynamic Programming,",
        "629": "Math,Enumeration,",
        "630": "String,",
        "631": "String,",
        "632": "Array,Two Pointers,Bit Manipulation,Matrix,Simulation,",
        "633": "Array,Hash Table,String,Sorting,",
        "634": "Dynamic Programming,Tree,Depth-First Search,Graph,",
        "635": "Array,Matrix,",
        "636": "Math,Geometry,",
        "637": "Math,Dynamic Programming,Sliding Window,Probability and Statistics,",
        "638": "Two Pointers,String,Dynamic Programming,",
        "639": "Array,Hash Table,Math,Matrix,",
        "640": "String,Backtracking,",
        "641": "Array,Math,String,Interactive,Game Theory,",
        "642": "Two Pointers,String,Stack,Simulation,",
        "643": "Array,Two Pointers,Dynamic Programming,Enumeration,",
        "644": "Array,Hash Table,Greedy,Sorting,",
        "645": "Dynamic Programming,Bit Manipulation,Breadth-First Search,Graph,Bitmask,",
        "646": "Array,String,Prefix Sum,",
        "647": "Array,",
        "648": "Array,Segment Tree,Line Sweep,Ordered Set,",
        "649": "Array,Depth-First Search,Graph,Topological Sort,",
        "650": "Array,Binary Search,",
        "651": "Array,Stack,Sorting,Monotonic Stack,",
        "652": "String,Breadth-First Search,",
        "653": "Design,Heap (Priority Queue),Ordered Set,",
        "654": "String,Stack,",
        "655": "Array,Greedy,Sorting,Heap (Priority Queue),",
        "656": "Math,Geometry,Number Theory,",
        "657": "Hash Table,String,",
        "658": "Array,Greedy,",
        "659": "Array,Greedy,Bit Manipulation,Matrix,",
        "660": "Array,Binary Search,Queue,Sliding Window,Heap (Priority Queue),Prefix Sum,Monotonic Queue,",
        "661": "Hash Table,Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "662": "Array,Bit Manipulation,Breadth-First Search,Matrix,",
        "663": "Hash Table,Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "664": "Math,Number Theory,",
        "665": "Array,Matrix,Simulation,",
        "666": "Hash Table,Math,Sorting,Counting,Enumeration,",
        "667": "Array,Two Pointers,Greedy,Sorting,",
        "668": "Tree,Depth-First Search,Binary Tree,",
        "669": "Array,Hash Table,Dynamic Programming,",
        "670": "Array,Hash Table,Simulation,",
        "671": "Array,Binary Search,",
        "672": "Linked List,Two Pointers,",
        "673": "Array,Math,Dynamic Programming,Game Theory,",
        "674": "Math,Binary Search,",
        "675": "Array,Dynamic Programming,",
        "676": "String,Stack,",
        "677": "Array,Two Pointers,Greedy,Sorting,",
        "678": "Graph,Heap (Priority Queue),Shortest Path,",
        "679": "Array,Math,Geometry,Matrix,",
        "680": "Hash Table,String,Counting,",
        "681": "Array,Matrix,Simulation,",
        "682": "Depth-First Search,Breadth-First Search,Union Find,Graph,",
        "683": "Array,Hash Table,Binary Search,Sorting,",
        "684": "Array,Hash Table,Divide and Conquer,Tree,Binary Tree,",
        "685": "Array,Hash Table,String,",
        "686": "Array,Math,Sorting,",
        "687": "Array,Math,Geometry,Matrix,",
        "688": "Array,Hash Table,String,Sorting,",
        "689": "Dynamic Programming,Tree,Recursion,Memoization,Binary Tree,",
        "690": "Hash Table,Stack,Design,Ordered Set,",
        "691": "Array,",
        "692": "Array,Dynamic Programming,Bit Manipulation,",
        "693": "Math,String,Sorting,",
        "694": "Array,Design,Counting,Iterator,",
        "695": "Stack,Design,Monotonic Stack,Data Stream,",
        "696": "Array,Math,String,Binary Search,Dynamic Programming,",
        "697": "String,Dynamic Programming,Prefix Sum,",
        "698": "Array,Hash Table,Sliding Window,",
        "699": "Array,Two Pointers,Sorting,",
        "700": "Math,Enumeration,",
        "701": "Array,Dynamic Programming,Stack,Monotonic Stack,",
        "702": "Array,Math,",
        "703": "Array,Math,Greedy,Sorting,",
        "704": "Array,Hash Table,Binary Search,Design,",
        "705": "Array,Divide and Conquer,Sorting,Heap (Priority Queue),Merge Sort,Bucket Sort,Radix Sort,Counting Sort,",
        "706": "Math,Dynamic Programming,Graph,Topological Sort,Memoization,Game Theory,",
        "707": "Array,Hash Table,Math,Counting,Number Theory,",
        "708": "Array,",
        "709": "Array,Hash Table,String,",
        "710": "Two Pointers,String,",
        "711": "Array,Divide and Conquer,Dynamic Programming,Queue,Monotonic Queue,",
        "712": "Math,Dynamic Programming,Combinatorics,",
        "713": "String,Stack,Greedy,",
        "714": "Array,Two Pointers,Sorting,",
        "715": "Array,Hash Table,Two Pointers,Sorting,Counting,",
        "716": "Array,Hash Table,Depth-First Search,Breadth-First Search,Union Find,Graph,",
        "717": "Two Pointers,String,",
        "718": "String,Dynamic Programming,",
        "719": "Array,Math,",
        "720": "Array,Hash Table,Depth-First Search,Breadth-First Search,Union Find,Graph,",
        "721": "Array,Hash Table,String,",
        "722": "Array,Hash Table,Sliding Window,Prefix Sum,",
        "723": "Array,Dynamic Programming,Matrix,",
        "724": "Array,Math,Divide and Conquer,",
        "725": "Design,Queue,Data Stream,",
        "726": "Array,Depth-First Search,Breadth-First Search,Matrix,",
        "727": "Dynamic Programming,",
        "728": "String,Stack,Greedy,Queue,",
        "729": "Array,String,Sorting,",
        "730": "Tree,Depth-First Search,Binary Search Tree,Binary Tree,",
        "731": "Array,Hash Table,Math,Geometry,Sorting,",
        "732": "String,Dynamic Programming,",
        "733": "Array,",
        "734": "Array,Two Pointers,String,Greedy,",
        "735": "Array,String,Dynamic Programming,Bit Manipulation,Bitmask,",
        "736": "Array,String,",
        "737": "Array,Greedy,Sorting,Counting,",
        "738": "Array,Stack,Simulation,",
        "739": "Hash Table,Depth-First Search,Union Find,Graph,",
        "740": "Array,Two Pointers,Greedy,Sorting,",
        "741": "Array,String,Enumeration,",
        "742": "Array,Queue,Sorting,Simulation,",
        "743": "Tree,Depth-First Search,Binary Tree,",
        "744": "Array,Hash Table,String,",
        "745": "Array,Dynamic Programming,",
        "746": "Array,Hash Table,Math,Bit Manipulation,",
        "747": "Tree,Breadth-First Search,Binary Tree,",
        "748": "Array,Hash Table,Depth-First Search,Breadth-First Search,Union Find,Matrix,",
        "749": "Array,Hash Table,",
        "750": "Array,Stack,Monotonic Stack,",
        "751": "Array,Math,Geometry,",
        "752": "Math,Dynamic Programming,Memoization,",
        "753": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "754": "Array,Hash Table,String,",
        "755": "Backtracking,Breadth-First Search,",
        "756": "Dynamic Programming,Tree,Depth-First Search,Binary Tree,",
        "757": "Array,Two Pointers,Greedy,Sorting,",
        "758": "Hash Table,Math,Enumeration,",
        "759": "Tree,Depth-First Search,Binary Tree,",
        "760": "Math,String,",
        "761": "Array,Math,Divide and Conquer,Geometry,Sorting,Heap (Priority Queue),Quickselect,",
        "762": "Array,Hash Table,Prefix Sum,",
        "763": "Array,Dynamic Programming,Stack,Monotonic Stack,Ordered Set,",
        "764": "Array,Two Pointers,Sorting,",
        "765": "Array,Dynamic Programming,Sliding Window,",
        "766": "Tree,Depth-First Search,Binary Tree,",
        "767": "Array,Backtracking,Bit Manipulation,Matrix,",
        "768": "Hash Table,String,Binary Search,Design,",
        "769": "Array,Hash Table,Bit Manipulation,",
        "770": "Array,Dynamic Programming,",
        "771": "String,Greedy,",
        "772": "Array,Simulation,",
        "773": "String,Backtracking,Tree,Depth-First Search,Binary Tree,",
        "774": "Array,Math,",
        "775": "Array,String,Union Find,Graph,",
        "776": "Math,Greedy,",
        "777": "Array,Hash Table,Sliding Window,Counting,",
        "778": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "779": "Array,Breadth-First Search,Matrix,",
        "780": "Array,Bit Manipulation,Queue,Sliding Window,Prefix Sum,",
        "781": "Array,Hash Table,Math,Dynamic Programming,Backtracking,Bit Manipulation,Bitmask,",
        "782": "Array,Hash Table,Graph,",
        "783": "Tree,Binary Tree,",
        "784": "Array,Dynamic Programming,Prefix Sum,",
        "785": "Array,Hash Table,",
        "786": "Array,Hash Table,String,",
        "787": "String,Stack,",
        "788": "Array,Binary Search,Sliding Window,Prefix Sum,",
        "789": "Array,Greedy,Sorting,",
        "790": "Math,Stack,Simulation,",
        "791": "Array,Greedy,",
        "792": "Array,Stack,Tree,Binary Search Tree,Monotonic Stack,Binary Tree,",
        "793": "Bit Manipulation,",
        "794": "Array,Hash Table,Counting,",
        "795": "Array,Binary Search,",
        "796": "Math,Dynamic Programming,",
        "797": "Array,Greedy,",
        "798": ",",
        "799": "Hash Table,Math,",
        "800": "String,",
        "801": "Math,",
        "802": "Array,Bit Manipulation,",
        "803": "Array,Linked List,Stack,Monotonic Stack,",
        "804": "Array,Depth-First Search,Breadth-First Search,Union Find,Matrix,",
        "805": "String,Stack,",
        "806": "Tree,Depth-First Search,Binary Tree,",
        "807": "Array,Two Pointers,String,Trie,String Matching,",
        "808": "Array,Dynamic Programming,Greedy,",
        "809": "Math,Dynamic Programming,Brainteaser,Game Theory,",
        "810": "Tree,Depth-First Search,Binary Tree,",
        "811": "Array,Hash Table,Binary Search,Dynamic Programming,",
        "812": "String,Tree,Depth-First Search,Binary Tree,",
        "813": "Array,Greedy,Sorting,",
        "814": "Array,Math,Geometry,Sorting,Matrix,",
        "815": "Array,Dynamic Programming,Sliding Window,",
        "816": "Array,String,Design,Trie,Data Stream,",
        "817": "Math,Brainteaser,",
        "818": "Array,Depth-First Search,Breadth-First Search,Matrix,",
        "819": "Array,Dynamic Programming,",
        "820": "Array,Hash Table,Depth-First Search,Breadth-First Search,",
        "821": "Array,Math,Geometry,",
        "822": "Tree,Depth-First Search,Binary Search Tree,Binary Tree,",
        "823": "Array,Dynamic Programming,",
        "824": "Array,Math,Two Pointers,Sorting,",
        "825": "Math,String,Simulation,",
        "826": "Depth-First Search,Breadth-First Search,Graph,",
        "827": "Array,Dynamic Programming,",
        "828": "String,Binary Search,Sliding Window,Rolling Hash,Suffix Array,Hash Function,",
        "829": "Database,",
        "830": "Array,Heap (Priority Queue),",
        "831": "String,Stack,",
        "832": "Array,Hash Table,Two Pointers,String,Dynamic Programming,Sorting,",
        "833": "Array,Dynamic Programming,",
        "834": "Database,",
        "835": "Array,Sliding Window,",
        "836": ",",
        "837": "Array,Hash Table,Greedy,Sorting,Heap (Priority Queue),Counting,",
        "838": "String,Union Find,",
        "839": "Database,",
        "840": "Database,",
        "841": "Math,String,",
        "842": "Array,Hash Table,Matrix,",
        "843": "Array,Math,",
        "844": "Array,Hash Table,Matrix,Prefix Sum,",
        "845": "String,",
        "846": "Hash Table,String,Backtracking,Counting,",
        "847": "Tree,Depth-First Search,Binary Tree,",
        "848": "String,Stack,Greedy,Monotonic Stack,",
        "849": "Database,",
        "850": "Array,Two Pointers,",
        "851": "Array,Hash Table,Greedy,Sorting,Counting,",
        "852": "Array,Breadth-First Search,Matrix,",
        "853": "String,Dynamic Programming,",
        "854": "Array,Math,Probability and Statistics,",
        "855": "Array,Sorting,Heap (Priority Queue),Simulation,Prefix Sum,",
        "856": "Array,Binary Search,Interactive,",
        "857": "String,Backtracking,Stack,Breadth-First Search,",
        "858": "Math,Simulation,",
        "859": "Math,Tree,Binary Tree,",
        "860": "Array,Dynamic Programming,",
        "861": "String,Stack,Recursion,",
        "862": "String,",
        "863": "Array,Prefix Sum,",
        "864": "Array,Hash Table,Tree,Depth-First Search,Binary Tree,",
        "865": "String,Stack,",
        "866": "Concurrency,",
        "867": "Concurrency,",
        "868": "Concurrency,",
        "869": "Array,Hash Table,Sorting,Counting Sort,",
        "870": "Hash Table,Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "871": "Array,Hash Table,Stack,Monotonic Stack,Prefix Sum,",
        "872": "Array,Dynamic Programming,Bit Manipulation,Bitmask,",
        "873": "Array,Hash Table,Counting,",
        "874": "Breadth-First Search,Graph,",
        "875": "Array,Dynamic Programming,Stack,Greedy,Monotonic Stack,",
        "876": "Array,Math,",
        "877": "Math,Dynamic Programming,Memoization,",
        "878": "Hash Table,String,",
        "879": "Array,Dynamic Programming,Matrix,",
        "880": "Array,Math,Dynamic Programming,Prefix Sum,Game Theory,",
        "881": "Database,",
        "882": "String,Dynamic Programming,",
        "883": "Array,Greedy,",
        "884": "Tree,Depth-First Search,Binary Tree,",
        "885": "Array,Hash Table,Binary Search,Design,",
        "886": "Two Pointers,String,Dynamic Programming,Greedy,Rolling Hash,Hash Function,",
        "887": "Database,",
        "888": "Math,String,",
        "889": "Dynamic Programming,",
        "890": "Array,Binary Search,Design,Binary Indexed Tree,Segment Tree,",
        "891": "Database,",
        "892": "Array,Hash Table,String,Counting,",
        "893": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "894": "Two Pointers,String,",
        "895": "Database,",
        "896": "Array,Hash Table,String,Sorting,",
        "897": "Array,Hash Table,String,Binary Search,Sorting,",
        "898": "Hash Table,Linked List,",
        "899": "Math,",
        "900": "Array,Hash Table,String,Bit Manipulation,Prefix Sum,",
        "901": "Array,Hash Table,String,Bit Manipulation,Trie,",
        "902": "Database,",
        "903": "Array,",
        "904": "Math,",
        "905": "Array,Dynamic Programming,",
        "906": "Array,Binary Search,Dynamic Programming,Sorting,",
        "907": "Hash Table,String,Counting,",
        "908": "Array,Dynamic Programming,",
        "909": "Database,",
        "910": "Concurrency,",
        "911": "Array,Sorting,",
        "912": "Math,Binary Search,Combinatorics,Number Theory,",
        "913": "Array,Hash Table,String,Depth-First Search,Breadth-First Search,Union Find,Sorting,",
        "914": "Depth-First Search,Breadth-First Search,Graph,Topological Sort,",
        "915": "Database,",
        "916": "Linked List,Design,",
        "917": "Array,Hash Table,",
        "918": "String,Binary Search,Sliding Window,Prefix Sum,",
        "919": "String,Stack,",
        "920": "Array,Breadth-First Search,Matrix,",
        "921": "Database,",
        "922": "Array,Math,Greedy,",
        "923": "Array,Hash Table,Dynamic Programming,",
        "924": "Array,Backtracking,Matrix,",
        "925": "Dynamic Programming,",
        "926": "String,Greedy,Counting,",
        "927": "Array,Matrix,Simulation,",
        "928": "Array,Dynamic Programming,",
        "929": "Array,Hash Table,",
        "930": "Concurrency,",
        "931": "Math,Dynamic Programming,Brainteaser,Probability and Statistics,",
        "932": "Array,Math,Geometry,",
        "933": "Array,String,Depth-First Search,Trie,",
        "934": "String,Sliding Window,",
        "935": "Math,Two Pointers,Binary Search,Interactive,",
        "936": "Math,Backtracking,Bit Manipulation,",
        "937": "Array,String,Backtracking,Bit Manipulation,",
        "938": "Backtracking,",
        "939": "Math,String,Greedy,",
        "940": "Array,Hash Table,Math,Sliding Window,Prefix Sum,",
        "941": "String,Stack,",
        "942": "Array,Math,Number Theory,",
        "943": "Database,",
        "944": "Array,Math,Simulation,",
        "945": "Array,Greedy,Matrix,",
        "946": "Array,Depth-First Search,Breadth-First Search,Union Find,Matrix,",
        "947": "Array,String,Dynamic Programming,Backtracking,Bit Manipulation,Bitmask,",
        "948": "Array,Matrix,Simulation,",
        "949": "Hash Table,Tree,Depth-First Search,Breadth-First Search,Design,Binary Tree,",
        "950": "Array,Dynamic Programming,Greedy,Sorting,",
        "951": "Array,Breadth-First Search,Heap (Priority Queue),Matrix,",
        "952": "Array,Math,Geometry,",
        "953": "Array,Depth-First Search,Breadth-First Search,Union Find,Matrix,Counting,",
        "954": "Array,String,Binary Search,Trie,Sorting,Heap (Priority Queue),",
        "955": "Dynamic Programming,",
        "956": "Array,Hash Table,Matrix,Simulation,",
        "957": "Array,Dynamic Programming,Matrix,",
        "958": "String,Dynamic Programming,",
        "959": "Database,",
        "960": "Math,",
        "961": "Array,Hash Table,Greedy,",
        "962": "Array,Hash Table,Bit Manipulation,Breadth-First Search,Matrix,",
        "963": "String,Backtracking,Design,Iterator,",
        "964": "Array,",
        "965": "Array,Sorting,",
        "966": "Array,Dynamic Programming,Matrix,",
        "967": "Linked List,Math,",
        "968": "Enumeration,",
        "969": "Array,Binary Search,Matrix,Prefix Sum,",
        "970": "Array,Breadth-First Search,Matrix,",
        "971": "Array,Math,",
        "972": "Array,Hash Table,Greedy,Sorting,",
        "973": "Hash Table,String,Sliding Window,",
        "974": "Array,Breadth-First Search,Graph,",
        "975": "Array,",
        "976": "Array,Binary Search,Sorting,",
        "977": "Array,Dynamic Programming,Matrix,",
        "978": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "979": "Array,Math,",
        "980": "Tree,Depth-First Search,Binary Search Tree,Sorting,Binary Tree,",
        "981": "Array,Depth-First Search,Breadth-First Search,",
        "982": "Array,Math,String,Backtracking,",
        "983": "String,",
        "984": "Array,Bit Manipulation,Prefix Sum,",
        "985": "Array,Hash Table,Breadth-First Search,Graph,Sorting,",
        "986": "String,Dynamic Programming,",
        "987": "Array,",
        "988": "Array,Matrix,Prefix Sum,",
        "989": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "990": "String,Trie,Rolling Hash,Hash Function,",
        "991": "Math,",
        "992": "Bit Manipulation,",
        "993": "Depth-First Search,Breadth-First Search,Union Find,Graph,",
        "994": "Database,",
        "995": "Math,Greedy,",
        "996": "Array,String,Simulation,",
        "997": "Tree,Depth-First Search,Binary Tree,",
        "998": "Array,Dynamic Programming,Greedy,",
        "999": "Database,",
        "1000": "String,Greedy,",
        "1001": "Array,Sorting,Matrix,",
        "1002": "Array,Math,Greedy,",
        "1003": "Array,Hash Table,Sorting,",
        "1004": "Two Pointers,String,",
        "1005": "Array,Sorting,",
        "1006": "Dynamic Programming,Graph,Shortest Path,",
        "1007": "Array,Dynamic Programming,",
        "1008": "Array,Binary Search,Sorting,Heap (Priority Queue),Matrix,",
        "1009": "Array,Hash Table,Greedy,Sorting,Heap (Priority Queue),",
        "1010": "Tree,Depth-First Search,Binary Tree,",
        "1011": "Array,Dynamic Programming,Sorting,",
        "1012": "Database,",
        "1013": "Math,Bit Manipulation,",
        "1014": "Array,Sliding Window,",
        "1015": "Math,",
        "1016": "Array,Hash Table,Breadth-First Search,",
        "1017": "Array,Hash Table,Two Pointers,Binary Search,Sorting,",
        "1018": "Hash Table,String,Counting,",
        "1019": "Hash Table,Binary Search,Design,Sorting,Ordered Set,",
        "1020": "Array,Dynamic Programming,Bit Manipulation,Matrix,Bitmask,",
        "1021": "Array,Binary Search,Matrix,",
        "1022": "Array,Math,Design,Queue,Data Stream,",
        "1023": "Array,Greedy,Sorting,Heap (Priority Queue),",
        "1024": "Array,Heap (Priority Queue),",
        "1025": "Array,Bit Manipulation,Sorting,Counting,",
        "1026": "Hash Table,String,Sliding Window,",
        "1027": "Math,Dynamic Programming,Combinatorics,",
        "1028": "Math,String,",
        "1029": "Tree,Depth-First Search,Breadth-First Search,Union Find,Graph,Binary Tree,",
        "1030": "Math,",
        "1031": "Array,Dynamic Programming,Greedy,",
        "1032": "Array,Hash Table,String,Sorting,Counting,",
        "1033": "Linked List,Tree,Depth-First Search,Binary Tree,",
        "1034": "Array,Breadth-First Search,Graph,Heap (Priority Queue),Matrix,Shortest Path,",
        "1035": "Hash Table,String,Counting,",
        "1036": "Hash Table,String,Bit Manipulation,Prefix Sum,",
        "1037": "Dynamic Programming,Tree,Depth-First Search,Binary Tree,",
        "1038": "Dynamic Programming,Tree,Depth-First Search,Binary Search Tree,Binary Tree,",
        "1039": "String,",
        "1040": "Array,",
        "1041": "Tree,Depth-First Search,Breadth-First Search,",
        "1042": "Tree,Depth-First Search,Breadth-First Search,Graph,",
        "1043": "Database,",
        "1044": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "1045": "Array,Matrix,",
        "1046": "Array,Stack,Design,",
        "1047": "Array,Two Pointers,Binary Search,Sorting,",
        "1048": "Array,Hash Table,Greedy,Bit Manipulation,",
        "1049": "Dynamic Programming,Memoization,Sorting,",
        "1050": "Array,Dynamic Programming,Greedy,Heap (Priority Queue),",
        "1051": "Array,Simulation,",
        "1052": "Array,Math,",
        "1053": "Array,Depth-First Search,Breadth-First Search,Union Find,Matrix,",
        "1054": "String,Rolling Hash,String Matching,Hash Function,",
        "1055": "Database,",
        "1056": "Array,Hash Table,Counting,",
        "1057": "Array,Dynamic Programming,Binary Indexed Tree,Segment Tree,",
        "1058": "Hash Table,String,Design,",
        "1059": "String,Dynamic Programming,String Matching,",
        "1060": "Math,Geometry,",
        "1061": "Array,Dynamic Programming,Greedy,Sorting,",
        "1062": "Array,Greedy,Sorting,",
        "1063": "String,Greedy,Heap (Priority Queue),",
        "1064": "Array,Math,Dynamic Programming,Game Theory,",
        "1065": "Database,",
        "1066": "Array,String,String Matching,",
        "1067": "Array,Binary Indexed Tree,Simulation,",
        "1068": "Dynamic Programming,",
        "1069": "Array,Prefix Sum,",
        "1070": "Math,Greedy,",
        "1071": "String,Backtracking,",
        "1072": "String,Dynamic Programming,",
        "1073": "String,",
        "1074": "Array,Hash Table,String,Sorting,Ordered Set,",
        "1075": "String,Counting,",
        "1076": "Dynamic Programming,Prefix Sum,",
        "1077": "Array,Sliding Window,Prefix Sum,",
        "1078": "Array,Sorting,Heap (Priority Queue),",
        "1079": "Array,Dynamic Programming,Queue,Sliding Window,Heap (Priority Queue),Monotonic Queue,",
        "1080": "Array,",
        "1081": "Math,Greedy,",
        "1082": "String,Greedy,Sorting,",
        "1083": "Array,Dynamic Programming,Bit Manipulation,Bitmask,",
        "1084": "Array,Hash Table,String,",
        "1085": "Array,",
        "1086": "Array,Queue,Sliding Window,Heap (Priority Queue),Ordered Set,Monotonic Queue,",
        "1087": "Array,Binary Search,Heap (Priority Queue),Matrix,",
        "1088": "Array,Stack,Simulation,",
        "1089": "Array,Hash Table,Math,Bit Manipulation,Prefix Sum,",
        "1090": "Hash Table,Tree,Depth-First Search,Breadth-First Search,",
        "1091": "Array,Dynamic Programming,Memoization,Matrix,",
        "1092": "Math,String,Number Theory,",
        "1093": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "1094": "Array,Dynamic Programming,",
        "1095": "Array,",
        "1096": "Array,Math,Geometry,",
        "1097": "Two Pointers,String,String Matching,",
        "1098": "String,Sliding Window,",
        "1099": "Bit Manipulation,Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "1100": "Array,Dynamic Programming,",
        "1101": "Array,Hash Table,Sorting,",
        "1102": "Hash Table,String,Bit Manipulation,Rolling Hash,Hash Function,",
        "1103": "Array,Sorting,Heap (Priority Queue),",
        "1104": "Array,Greedy,Sorting,",
        "1105": "Depth-First Search,Breadth-First Search,Graph,",
        "1106": "Array,Math,Dynamic Programming,Backtracking,Combinatorics,Probability and Statistics,",
        "1107": "Array,",
        "1108": "Array,Two Pointers,Sorting,",
        "1109": "Array,Linked List,Stack,Design,Doubly-Linked List,Data Stream,",
        "1110": "Array,Dynamic Programming,",
        "1111": "Array,Stack,Monotonic Stack,",
        "1112": "Array,Design,Matrix,",
        "1113": "Array,Hash Table,Binary Search,Dynamic Programming,Sliding Window,",
        "1114": "Array,Prefix Sum,",
        "1115": "Array,Hash Table,Greedy,Sorting,Counting,",
        "1116": "Array,Binary Search,",
        "1117": "Binary Search,Dynamic Programming,Tree,Depth-First Search,Breadth-First Search,Design,",
        "1118": "Database,",
        "1119": "Math,Bit Manipulation,",
        "1120": "Array,Hash Table,String,",
        "1121": "Array,Hash Table,Binary Search,Greedy,Heap (Priority Queue),",
        "1122": "Union Find,Graph,Sorting,Minimum Spanning Tree,Strongly Connected Component,",
        "1123": "Array,Sorting,",
        "1124": "Math,Number Theory,",
        "1125": "Array,Dynamic Programming,Sliding Window,",
        "1126": "Dynamic Programming,Bit Manipulation,Graph,Bitmask,",
        "1127": "Hash Table,String,",
        "1128": "Array,Hash Table,Counting,",
        "1129": "Array,Two Pointers,Binary Search,Sorting,",
        "1130": "Array,Queue,Sliding Window,Heap (Priority Queue),Monotonic Queue,",
        "1131": "Array,Brainteaser,Simulation,",
        "1132": "Array,Dynamic Programming,Stack,Matrix,Monotonic Stack,",
        "1133": "String,Greedy,Binary Indexed Tree,Segment Tree,",
        "1134": "String,",
        "1135": "Array,Two Pointers,Binary Search,Sorting,",
        "1136": "Array,Greedy,Sorting,",
        "1137": "Math,Dynamic Programming,Game Theory,",
        "1138": "Array,Hash Table,Math,Counting,",
        "1139": "Math,String,",
        "1140": "Array,Graph,Heap (Priority Queue),Shortest Path,",
        "1141": "Array,Math,Geometry,Randomized,",
        "1142": "Database,",
        "1143": "Math,Simulation,",
        "1144": "Hash Table,Tree,Depth-First Search,Breadth-First Search,Counting,",
        "1145": "String,Greedy,",
        "1146": "Array,Binary Search,Bit Manipulation,Segment Tree,",
        "1147": "Math,",
        "1148": "Array,Math,Dynamic Programming,Prefix Sum,",
        "1149": "Hash Table,String,Dynamic Programming,Bit Manipulation,",
        "1150": "Array,Dynamic Programming,Stack,Greedy,Monotonic Stack,",
        "1151": "Database,",
        "1152": "Array,String,",
        "1153": "String,Greedy,",
        "1154": "Tree,Depth-First Search,Binary Tree,",
        "1155": "String,Dynamic Programming,",
        "1156": "Array,Enumeration,",
        "1157": "Array,Simulation,",
        "1158": "Array,Greedy,Matrix,",
        "1159": "Array,Two Pointers,Dynamic Programming,Greedy,",
        "1160": "Array,Binary Search,",
        "1161": "Hash Table,String,",
        "1162": "String,Stack,Greedy,",
        "1163": "Hash Table,String,Bit Manipulation,",
        "1164": "String,Stack,",
        "1165": "String,Recursion,Simulation,",
        "1166": "Array,Hash Table,Greedy,Prefix Sum,",
        "1167": "Array,Dynamic Programming,Sorting,",
        "1168": "Array,",
        "1169": "Array,Binary Search,Sorting,",
        "1170": "Dynamic Programming,Memoization,",
        "1171": "Graph,",
        "1172": "Array,Depth-First Search,Breadth-First Search,Union Find,Matrix,",
        "1173": "Array,Simulation,",
        "1174": "Array,Math,Greedy,Sorting,Game Theory,",
        "1175": "Array,Hash Table,Binary Search,Simulation,",
        "1176": "Array,Math,Dynamic Programming,Game Theory,",
        "1177": "Array,Enumeration,",
        "1178": "Array,Dynamic Programming,Greedy,",
        "1179": "Array,Depth-First Search,Breadth-First Search,Matrix,Strongly Connected Component,",
        "1180": "Array,Math,Divide and Conquer,Dynamic Programming,Tree,Union Find,Binary Search Tree,Memoization,Combinatorics,Binary Tree,",
        "1181": "Array,Matrix,",
        "1182": "Math,String,",
        "1183": "Array,Two Pointers,Binary Search,Stack,Monotonic Stack,",
        "1184": "Array,Dynamic Programming,Memoization,",
        "1185": "String,",
        "1186": "Array,Hash Table,Math,Two Pointers,",
        "1187": "Array,String,Dynamic Programming,Greedy,",
        "1188": "Union Find,Graph,",
        "1189": "Database,",
        "1190": "Array,Matrix,",
        "1191": "Array,Simulation,",
        "1192": "Array,Union Find,Graph,Minimum Spanning Tree,",
        "1193": "Database,",
        "1194": "Array,Math,Prefix Sum,",
        "1195": "Array,Greedy,Sorting,Prefix Sum,",
        "1196": "Array,Hash Table,Prefix Sum,",
        "1197": "Array,Graph,Topological Sort,Matrix,",
        "1198": "String,",
        "1199": "Hash Table,String,Backtracking,",
        "1200": "Array,Dynamic Programming,Matrix,",
        "1201": "Array,Dynamic Programming,Bit Manipulation,Matrix,Bitmask,",
        "1202": "Array,String,Stack,",
        "1203": "Array,Simulation,",
        "1204": "Hash Table,Tree,Depth-First Search,Design,",
        "1205": "Array,Backtracking,Bit Manipulation,Enumeration,",
        "1206": "Design,Simulation,Counting,",
        "1207": "Array,Hash Table,String,Sorting,",
        "1208": "Array,Greedy,Matrix,",
        "1209": "Array,Greedy,Heap (Priority Queue),Ordered Set,",
        "1210": "Array,Binary Search,Sorting,",
        "1211": "Tree,Breadth-First Search,Binary Tree,",
        "1212": "Array,Math,Geometry,Sliding Window,Sorting,",
        "1213": "Dynamic Programming,Bit Manipulation,Memoization,",
        "1214": "String,Stack,",
        "1215": "Graph,",
        "1216": "Two Pointers,String,",
        "1217": "Dynamic Programming,Bit Manipulation,Tree,Enumeration,Bitmask,",
        "1218": "Array,Sorting,",
        "1219": "Array,Enumeration,",
        "1220": "Math,Dynamic Programming,Combinatorics,",
        "1221": "Math,Design,Segment Tree,",
        "1222": "Hash Table,String,",
        "1223": "String,Depth-First Search,Breadth-First Search,Enumeration,",
        "1224": "Array,Dynamic Programming,Sorting,",
        "1225": "Array,String,",
        "1226": "Array,Hash Table,Sorting,",
        "1227": "Array,Binary Search,Depth-First Search,Breadth-First Search,Union Find,Heap (Priority Queue),Matrix,",
        "1228": "Array,Union Find,Graph,Topological Sort,Sorting,Matrix,",
        "1229": "Database,",
        "1230": "Array,Hash Table,Sorting,",
        "1231": "Array,Sorting,",
        "1232": "Hash Table,String,Dynamic Programming,Enumeration,",
        "1233": "Array,Hash Table,",
        "1234": "Math,Dynamic Programming,Combinatorics,",
        "1235": "Array,Greedy,Heap (Priority Queue),",
        "1236": "Array,Math,Dynamic Programming,Combinatorics,",
        "1237": "Array,Simulation,",
        "1238": "Hash Table,String,Greedy,Sorting,",
        "1239": "Array,Binary Search,Divide and Conquer,Binary Indexed Tree,Segment Tree,Merge Sort,Ordered Set,",
        "1240": "Array,Sliding Window,",
        "1241": "String,Dynamic Programming,Stack,",
        "1242": "Array,Dynamic Programming,Breadth-First Search,",
        "1243": "Array,Dynamic Programming,Backtracking,Bit Manipulation,Bitmask,",
        "1244": "Array,Hash Table,Design,Data Stream,",
        "1245": "Hash Table,String,Sorting,Counting,",
        "1246": "Array,Hash Table,Binary Search,Sliding Window,Prefix Sum,",
        "1247": "Dynamic Programming,Bit Manipulation,Memoization,Bitmask,",
        "1248": "Database,",
        "1249": "Array,String,",
        "1250": "String,Greedy,",
        "1251": "Array,Prefix Sum,",
        "1252": "Array,Greedy,Sorting,",
        "1253": "Database,",
        "1254": "String,Dynamic Programming,String Matching,",
        "1255": "Linked List,",
        "1256": "Array,Linked List,Design,Queue,Data Stream,",
        "1257": "Array,Binary Search,Dynamic Programming,Greedy,",
        "1258": "Array,Matrix,",
        "1259": "Array,Stack,Greedy,Monotonic Stack,",
        "1260": "Array,Hash Table,Prefix Sum,",
        "1261": "Array,Greedy,Heap (Priority Queue),Ordered Set,",
        "1262": "String,",
        "1263": "Array,Hash Table,Two Pointers,Sorting,",
        "1264": "Math,Bit Manipulation,Simulation,",
        "1265": "Array,Dynamic Programming,Bit Manipulation,Bitmask,",
        "1266": "Database,",
        "1267": "Array,Hash Table,String,Bit Manipulation,Counting,",
        "1268": "Array,Math,Prefix Sum,",
        "1269": "Array,Math,Greedy,Sorting,Heap (Priority Queue),Game Theory,",
        "1270": "Array,Dynamic Programming,Segment Tree,Queue,Heap (Priority Queue),Prefix Sum,Monotonic Queue,",
        "1271": "Math,Simulation,",
        "1272": "String,Greedy,",
        "1273": "Array,Math,Dynamic Programming,Game Theory,",
        "1274": "Array,Dynamic Programming,Sorting,",
        "1275": "Database,",
        "1276": "String,",
        "1277": "Array,Hash Table,Sliding Window,",
        "1278": "Array,Dynamic Programming,Queue,Heap (Priority Queue),Monotonic Queue,",
        "1279": "Array,Stack,Queue,Simulation,",
        "1280": "Array,Simulation,",
        "1281": "String,Greedy,",
        "1282": "Array,Greedy,Sliding Window,Prefix Sum,",
        "1283": "String,Counting,",
        "1284": "Array,Greedy,Heap (Priority Queue),",
        "1285": "Array,Matrix,Simulation,",
        "1286": "Array,Bit Manipulation,Trie,",
        "1287": "Array,Greedy,Sorting,",
        "1288": "Array,Hash Table,",
        "1289": "Array,Two Pointers,Binary Search,Prefix Sum,",
        "1290": "Array,Hash Table,Binary Search,Greedy,",
        "1291": "Math,",
        "1292": "String,Stack,Greedy,",
        "1293": "Array,Backtracking,",
        "1294": "Tree,Graph,",
        "1295": "Linked List,Two Pointers,",
        "1296": "Array,Depth-First Search,Union Find,",
        "1297": "Array,Dynamic Programming,Backtracking,Bit Manipulation,Bitmask,",
        "1298": "Array,",
        "1299": "Array,Hash Table,Counting,",
        "1300": "Array,Greedy,Sorting,Matrix,",
        "1301": "Array,Math,Dynamic Programming,Graph,Topological Sort,Memoization,Matrix,Game Theory,",
        "1302": "Database,",
        "1303": "Database,",
        "1304": "Array,Prefix Sum,",
        "1305": "Array,Hash Table,Greedy,",
        "1306": "Array,Bit Manipulation,",
        "1307": "Array,Math,Dynamic Programming,Combinatorics,Number Theory,",
        "1308": "String,Greedy,",
        "1309": "Hash Table,String,Counting,Prefix Sum,",
        "1310": "Array,Divide and Conquer,Bit Manipulation,Sorting,Heap (Priority Queue),Matrix,Prefix Sum,Quickselect,",
        "1311": "Math,Binary Search,Greedy,",
        "1312": "Database,",
        "1313": "Hash Table,Math,Counting,",
        "1314": "Array,Hash Table,Depth-First Search,",
        "1315": "Array,Prefix Sum,",
        "1316": "String,Dynamic Programming,",
        "1317": "Array,Hash Table,Counting,",
        "1318": "Array,Dynamic Programming,",
        "1319": "Two Pointers,String,",
        "1320": "Array,",
        "1321": "Math,Greedy,Heap (Priority Queue),",
        "1322": "Two Pointers,String,Greedy,",
        "1323": "Array,Two Pointers,Dynamic Programming,Bit Manipulation,Bitmask,",
        "1324": "Database,",
        "1325": "String,",
        "1326": "Math,String,",
        "1327": "Graph,",
        "1328": "Hash Table,String,Divide and Conquer,Bit Manipulation,Sliding Window,",
        "1329": "Array,Two Pointers,Greedy,String Matching,",
        "1330": "Array,Breadth-First Search,Matrix,",
        "1331": "Array,Math,Tree,Depth-First Search,Number Theory,",
        "1332": "Two Pointers,String,",
        "1333": "Array,String,Prefix Sum,",
        "1334": "Array,Dynamic Programming,",
        "1335": "String,Dynamic Programming,",
        "1336": "Array,String,",
        "1337": "Array,Dynamic Programming,Backtracking,",
        "1338": "Array,Hash Table,Greedy,Counting,",
        "1339": "Array,Math,Stack,Heap (Priority Queue),Monotonic Stack,",
        "1340": "Array,",
        "1341": "Math,",
        "1342": "Array,Two Pointers,Binary Search,Graph,Sorting,",
        "1343": "Array,Greedy,",
        "1344": "Dynamic Programming,Graph,Topological Sort,Heap (Priority Queue),Shortest Path,",
        "1345": "Array,Dynamic Programming,Bit Manipulation,",
        "1346": "Database,",
        "1347": "Hash Table,String,Counting,",
        "1348": "Graph,",
        "1349": "Array,Greedy,Heap (Priority Queue),",
        "1350": "Array,Two Pointers,Binary Search,Stack,Monotonic Stack,",
        "1351": "Database,",
        "1352": "Hash Table,String,",
        "1353": "Hash Table,Linked List,Design,Doubly-Linked List,",
        "1354": "Array,Greedy,Sorting,",
        "1355": "Array,Math,Dynamic Programming,Backtracking,Bit Manipulation,Number Theory,Bitmask,",
        "1356": "Array,",
        "1357": "Binary Search,Greedy,",
        "1358": "Array,Math,Simulation,",
        "1359": "Array,Hash Table,String,",
        "1360": "Math,Recursion,",
        "1361": ",",
        "1362": "Array,Two Pointers,String,",
        "1363": "Array,Hash Table,Math,Counting,",
        "1364": "Array,Dynamic Programming,Bit Manipulation,Memoization,Bitmask,",
        "1365": "Array,String,",
        "1366": "Array,Hash Table,",
        "1367": "Array,Binary Search,Sorting,Ordered Set,",
        "1368": "Array,Math,Counting,Number Theory,",
        "1369": "Array,Math,",
        "1370": "Array,Math,Recursion,Queue,Simulation,",
        "1371": "Array,Dynamic Programming,Greedy,",
        "1372": "Design,Queue,Heap (Priority Queue),Data Stream,Ordered Set,",
        "1373": "Array,Greedy,",
        "1374": "Array,Math,Geometry,",
        "1375": "Array,Bit Manipulation,Prefix Sum,",
        "1376": "Math,String,Combinatorics,",
        "1377": "Hash Table,String,",
        "1378": "Array,Greedy,Sorting,Counting Sort,",
        "1379": "Array,Sorting,Heap (Priority Queue),",
        "1380": "Array,Math,Bit Manipulation,",
        "1381": "Math,",
        "1382": "Array,Binary Search,Greedy,Sliding Window,Sorting,Prefix Sum,",
        "1383": "String,Sliding Window,",
        "1384": "Array,Math,Sorting,",
        "1385": "String,",
        "1386": "Design,Heap (Priority Queue),",
        "1387": "Array,Greedy,Sorting,",
        "1388": "Array,Binary Search,Sorting,Ordered Set,",
        "1389": "Array,",
        "1390": "String,Backtracking,",
        "1391": "Two Pointers,String,Greedy,",
        "1392": "Array,Binary Search,Line Sweep,Sorting,Heap (Priority Queue),",
        "1393": "Array,Counting,Prefix Sum,",
        "1394": "Array,Two Pointers,Binary Search,",
        "1395": "Array,Stack,Monotonic Stack,Prefix Sum,",
        "1396": "Hash Table,Dynamic Programming,Graph,Topological Sort,Memoization,Counting,",
        "1397": "String,Sorting,",
        "1398": "Math,Simulation,",
        "1399": "Array,Math,Binary Search,Prefix Sum,",
        "1400": "Array,Math,Backtracking,Bit Manipulation,Combinatorics,Enumeration,",
        "1401": "String,Greedy,",
        "1402": "Array,Hash Table,Design,",
        "1403": "Math,Dynamic Programming,Combinatorics,",
        "1404": "String,",
        "1405": "Array,Binary Search,",
        "1406": "String,Dynamic Programming,Sliding Window,Prefix Sum,",
        "1407": "Array,Math,Dynamic Programming,Prefix Sum,Game Theory,",
        "1408": "Database,",
        "1409": "Hash Table,String,Sliding Window,Counting,",
        "1410": "Array,Two Pointers,Greedy,Sorting,",
        "1411": "Array,Math,Sorting,Heap (Priority Queue),Matrix,Prefix Sum,",
        "1412": "Array,Dynamic Programming,Bit Manipulation,Bitmask,",
        "1413": "String,",
        "1414": "String,Greedy,",
        "1415": "Array,Heap (Priority Queue),",
        "1416": "Array,Dynamic Programming,",
        "1417": "Math,Dynamic Programming,",
        "1418": "Array,Matrix,",
        "1419": "Array,Sorting,",
        "1420": "String,Dynamic Programming,Greedy,Sliding Window,",
        "1421": "Array,Binary Search,Sorting,Prefix Sum,",
        "1422": "Array,Hash Table,Prefix Sum,",
        "1423": "Array,Binary Search,Simulation,Prefix Sum,",
        "1424": "Array,Matrix,Prefix Sum,",
        "1425": "Math,String,Dynamic Programming,Stack,",
        "1426": "Hash Table,String,Counting,",
        "1427": "Array,Greedy,",
        "1428": "Dynamic Programming,Memoization,",
        "1429": "Array,Binary Search,Matrix,",
        "1430": "Math,String,Greedy,",
        "1431": "Math,String,",
        "1432": "Array,Depth-First Search,Breadth-First Search,Union Find,Matrix,",
        "1433": "Array,Hash Table,",
        "1434": "Database,",
        "1435": "Array,",
        "1436": "String,Stack,Simulation,",
        "1437": "Array,Dynamic Programming,",
        "1438": "Array,Hash Table,Design,Heap (Priority Queue),Ordered Set,",
        "1439": "Array,Sorting,",
        "1440": "Array,Matrix,Simulation,",
        "1441": "Math,Dynamic Programming,Tree,Graph,Topological Sort,Combinatorics,",
        "1442": "Array,Simulation,",
        "1443": "Array,Greedy,Sorting,",
        "1444": "Math,Recursion,",
        "1445": "Array,Binary Search,Rolling Hash,Suffix Array,Hash Function,",
        "1446": "Math,Enumeration,",
        "1447": "Array,Breadth-First Search,Matrix,",
        "1448": "Array,Dynamic Programming,Graph,",
        "1449": "Array,Simulation,",
        "1450": "Hash Table,String,Bit Manipulation,Prefix Sum,",
        "1451": "Dynamic Programming,",
        "1452": "Database,",
        "1453": "Hash Table,String,",
        "1454": "Array,Greedy,",
        "1455": "Array,Dynamic Programming,Matrix,",
        "1456": "Array,Hash Table,Bit Manipulation,Depth-First Search,Trie,",
        "1457": "Hash Table,String,Counting,",
        "1458": "Array,Hash Table,Heap (Priority Queue),",
        "1459": "Array,Hash Table,Sorting,Prefix Sum,",
        "1460": "Array,Stack,Monotonic Stack,",
        "1461": "String,Simulation,",
        "1462": "Array,String,Greedy,",
        "1463": "Array,Dynamic Programming,Backtracking,Bit Manipulation,Bitmask,",
        "1464": "Array,Hash Table,String,Trie,Hash Function,",
        "1465": "Math,Binary Search,",
        "1466": "Array,Dynamic Programming,",
        "1467": "String,",
        "1468": "Array,Matrix,Enumeration,",
        "1469": "Array,Dynamic Programming,",
        "1470": "String,Rolling Hash,Hash Function,",
        "1471": "Array,Two Pointers,String,",
        "1472": "Array,Greedy,Heap (Priority Queue),",
        "1473": "Two Pointers,String,Stack,Greedy,",
        "1474": "Array,Binary Search,Binary Indexed Tree,",
        "1475": "Database,",
        "1476": "Array,String,",
        "1477": "Array,Greedy,Sorting,",
        "1478": ",",
        "1479": "Array,Binary Search,Depth-First Search,Breadth-First Search,Union Find,Matrix,",
        "1480": "Depth-First Search,Breadth-First Search,Union Find,Graph,",
        "1481": "String,Greedy,",
        "1482": "Dynamic Programming,Graph,Topological Sort,Shortest Path,",
        "1483": "String,Dynamic Programming,Suffix Array,",
        "1484": "Database,",
        "1485": "Array,Math,Number Theory,",
        "1486": "Array,Hash Table,String,Backtracking,",
        "1487": "Array,Dynamic Programming,Matrix,",
        "1488": "Array,Divide and Conquer,",
        "1489": "Array,Sliding Window,Sorting,",
        "1490": "Array,String,Divide and Conquer,Sorting,Heap (Priority Queue),Quickselect,",
        "1491": "Array,Dynamic Programming,Backtracking,Bit Manipulation,Bitmask,",
        "1492": "String,Dynamic Programming,",
        "1493": "Array,Prefix Sum,",
        "1494": "Array,Depth-First Search,Breadth-First Search,Matrix,",
        "1495": "Array,Hash Table,Tree,Depth-First Search,Breadth-First Search,Design,",
        "1496": "Array,Math,Dynamic Programming,Bit Manipulation,Bitmask,",
        "1497": "Array,Hash Table,Enumeration,",
        "1498": "Array,Stack,Greedy,Sorting,Monotonic Stack,",
        "1499": "Array,Dynamic Programming,",
        "1500": "Array,Math,Union Find,Sorting,Number Theory,",
        "1501": "Two Pointers,String,Stack,",
        "1502": "String,Dynamic Programming,Backtracking,Bit Manipulation,Bitmask,",
        "1503": "Dynamic Programming,Tree,Depth-First Search,Union Find,",
        "1504": "Array,Hash Table,Counting,",
        "1505": "Array,Hash Table,Greedy,Sorting,",
        "1506": "Array,Hash Table,Binary Search,Sliding Window,",
        "1507": "Array,String,Simulation,",
        "1508": "Array,",
        "1509": "Array,Hash Table,Design,Counting,",
        "1510": "String,Backtracking,Greedy,Counting,Enumeration,",
        "1511": "Array,",
        "1512": "Array,Matrix,Prefix Sum,",
        "1513": "Array,Matrix,Enumeration,",
        "1514": "Array,Math,String,Dynamic Programming,Stack,Memoization,",
        "1515": "Array,Hash Table,String,Counting,",
        "1516": "String,Binary Search,Sliding Window,Prefix Sum,",
        "1517": "Array,Hash Table,Counting,Enumeration,Prefix Sum,",
        "1518": "String,Greedy,",
        "1519": "Array,Math,Simulation,",
        "1520": "Array,Math,Greedy,Counting,Game Theory,",
        "1521": "String,Stack,Greedy,Monotonic Stack,",
        "1522": "Array,Hash Table,Bit Manipulation,",
        "1523": "Hash Table,Design,Heap (Priority Queue),Data Stream,Ordered Set,",
        "1524": "Array,Greedy,Sorting,Counting Sort,",
        "1525": "Math,String,Greedy,Game Theory,",
        "1526": "Array,Breadth-First Search,Graph,",
        "1527": "Array,Binary Search,",
        "1528": "String,",
        "1529": "Array,Hash Table,Design,Simulation,",
        "1530": "Array,Backtracking,Bit Manipulation,Enumeration,",
        "1531": "Breadth-First Search,Graph,Shortest Path,",
        "1532": "String,",
        "1533": "Math,Backtracking,Enumeration,",
        "1534": "Array,Tree,Depth-First Search,Binary Tree,",
        "1535": "Array,Dynamic Programming,Graph,Topological Sort,",
        "1536": "Array,Hash Table,String,Counting,",
        "1537": "Array,Binary Search,Dynamic Programming,Sorting,Heap (Priority Queue),",
        "1538": "Array,String,Binary Search,Prefix Sum,",
        "1539": "Array,String,Backtracking,Simulation,",
        "1540": "Array,",
        "1541": "Linked List,",
        "1542": "Array,Breadth-First Search,",
        "1543": "String,Dynamic Programming,",
        "1544": "Hash Table,String,",
        "1545": "Math,String,Dynamic Programming,Combinatorics,",
        "1546": "Array,Binary Search,",
        "1547": "Array,Backtracking,Graph,",
        "1548": "Hash Table,String,Counting,",
        "1549": "Design,Simulation,",
        "1550": "Array,Binary Search,Sorting,",
        "1551": "Array,Binary Search,Greedy,Queue,Sorting,Monotonic Queue,",
        "1552": "Array,Queue,Simulation,",
        "1553": "Linked List,",
        "1554": "String,Simulation,",
        "1555": "Union Find,Graph,",
        "1556": "Array,Greedy,",
        "1557": "Array,Simulation,",
        "1558": "Array,Hash Table,Binary Search,Design,Segment Tree,",
        "1559": "Math,Enumeration,",
        "1560": "Array,Hash Table,String,Counting,",
        "1561": "String,Dynamic Programming,Greedy,",
        "1562": "Array,Greedy,",
        "1563": "Array,Dynamic Programming,Matrix,",
        "1564": "Array,Binary Search,Sorting,",
        "1565": "Array,Greedy,",
        "1566": "Depth-First Search,Breadth-First Search,Union Find,Graph,Sorting,",
        "1567": "Array,Hash Table,Sorting,Enumeration,",
        "1568": "Linked List,Two Pointers,",
        "1569": "String,Tree,Depth-First Search,Binary Tree,",
        "1570": "Depth-First Search,Graph,Eulerian Circuit,",
        "1571": "Array,Hash Table,Sorting,Heap (Priority Queue),",
        "1572": "Array,Dynamic Programming,Prefix Sum,",
        "1573": "Array,Math,Depth-First Search,Breadth-First Search,Graph,Geometry,",
        "1574": "Design,Heap (Priority Queue),Data Stream,Ordered Set,",
        "1575": "Hash Table,String,",
        "1576": "Array,Stack,Monotonic Stack,",
        "1577": "Array,Two Pointers,Simulation,",
        "1578": "Array,Binary Search,Sliding Window,Prefix Sum,",
        "1579": "Array,Two Pointers,String,",
        "1580": "Array,Two Pointers,String,Simulation,",
        "1581": ",",
        "1582": "Array,Binary Search,",
        "1583": "Array,String,",
        "1584": "Array,Hash Table,String,Graph,Topological Sort,",
        "1585": "String,Stack,Greedy,",
        "1586": "Math,",
        "1587": "Math,",
        "1588": "String,Simulation,",
        "1589": "Array,Hash Table,Prefix Sum,",
        "1590": "Array,Hash Table,Two Pointers,Sorting,Enumeration,",
        "1591": "String,",
        "1592": "Array,Math,String,Matrix,",
        "1593": "Array,Greedy,Sorting,",
        "1594": "Depth-First Search,Graph,Topological Sort,",
        "1595": "String,",
        "1596": "Linked List,Two Pointers,Stack,",
        "1597": "Array,Hash Table,String,Greedy,Counting,",
        "1598": "Array,Greedy,Matrix,Prefix Sum,",
        "1599": "Array,Hash Table,Matrix,",
        "1600": "Array,Sliding Window,",
        "1601": "Array,Hash Table,String,Bit Manipulation,Sorting,",
        "1602": "String,Simulation,",
        "1603": "Math,Greedy,",
        "1604": "Array,Binary Search,Greedy,Sorting,",
        "1605": "Array,Greedy,Sorting,",
        "1606": "Array,Prefix Sum,",
        "1607": "Array,Breadth-First Search,Sorting,Heap (Priority Queue),Matrix,",
        "1608": "Math,String,Dynamic Programming,",
        "1609": "Array,Sorting,Counting,",
        "1610": "Array,Two Pointers,Simulation,",
        "1611": "Array,Hash Table,Counting,",
        "1612": "Array,Hash Table,Sorting,Simulation,",
        "1613": "Array,",
        "1614": "String,Sliding Window,Rolling Hash,Hash Function,",
        "1615": "String,Bit Manipulation,Union Find,",
        "1616": "Math,Greedy,Sorting,",
        "1617": "Array,Two Pointers,Simulation,",
        "1618": "Math,Enumeration,",
        "1619": "Array,Dynamic Programming,Heap (Priority Queue),",
        "1620": "Array,Sorting,",
        "1621": "Math,Sorting,",
        "1622": "Array,Hash Table,String,Design,",
        "1623": "String,Dynamic Programming,",
        "1624": "Math,Simulation,",
        "1625": "Array,Hash Table,Greedy,Counting,",
        "1626": "Array,Greedy,Sorting,Enumeration,Prefix Sum,",
        "1627": "Array,",
        "1628": "Math,Simulation,",
        "1629": "Math,Backtracking,Greedy,",
        "1630": "Array,Binary Search,Divide and Conquer,Binary Indexed Tree,Segment Tree,Merge Sort,Ordered Set,",
        "1631": "Math,Simulation,",
        "1632": "Linked List,Simulation,",
        "1633": "Hash Table,String,Greedy,Heap (Priority Queue),Counting,",
        "1634": "Array,Math,Number Theory,",
        "1635": "Array,String,String Matching,",
        "1636": "Hash Table,String,Counting,",
        "1637": "Array,Binary Search,",
        "1638": "Array,Dynamic Programming,",
        "1639": "Array,Hash Table,Counting,",
        "1640": "Array,Sorting,",
        "1641": "Depth-First Search,Breadth-First Search,Graph,Topological Sort,",
        "1642": "Two Pointers,String,Greedy,Binary Indexed Tree,",
        "1643": "String,",
        "1644": "Array,Hash Table,Tree,Binary Tree,",
        "1645": "Array,Math,Stack,Number Theory,",
        "1646": "Array,Two Pointers,",
        "1647": "Array,Hash Table,Simulation,",
        "1648": "Array,Greedy,",
        "1649": "Graph,Shortest Path,",
        "1650": "Array,Hash Table,Bit Manipulation,Counting,",
        "1651": "String,Greedy,Prefix Sum,",
        "1652": "Array,Greedy,Heap (Priority Queue),",
        "1653": "String,Dynamic Programming,Prefix Sum,",
        "1654": "Array,",
        "1655": "String,Stack,Simulation,",
        "1656": "Array,Backtracking,Bit Manipulation,Enumeration,",
        "1657": "Array,String,Segment Tree,Ordered Set,",
        "1658": "Array,Hash Table,",
        "1659": "Array,Math,",
        "1660": "Array,Dynamic Programming,Prefix Sum,",
        "1661": "Bit Manipulation,",
        "1662": "String,Dynamic Programming,Prefix Sum,",
        "1663": "String,Binary Search,Rolling Hash,Suffix Array,String Matching,Hash Function,",
        "1664": "String,Greedy,",
        "1665": "Array,Hash Table,Sorting,Counting,",
        "1666": "Array,Binary Search,",
        "1667": "Array,Hash Table,String,Design,Trie,",
        "1668": "Sorting,Heap (Priority Queue),",
        "1669": "String,Enumeration,",
        "1670": "Array,Greedy,Heap (Priority Queue),",
        "1671": "Array,Two Pointers,Binary Search,Greedy,Sorting,",
        "1672": "Math,",
        "1673": "Tree,Binary Tree,",
        "1674": "Array,",
        "1675": "Math,Enumeration,",
        "1676": "Array,Greedy,Design,",
        "1677": "Array,Graph,Sorting,Enumeration,",
        "1678": "String,Simulation,",
        "1679": "Array,Hash Table,Greedy,Counting,",
        "1680": "Array,Matrix,Prefix Sum,",
        "1681": "Array,String,Tree,Depth-First Search,Graph,Topological Sort,",
        "1682": "Array,Hash Table,Sorting,Counting,",
        "1683": "Array,Hash Table,Math,Geometry,Enumeration,",
        "1684": "Array,Binary Search,Binary Indexed Tree,Sorting,",
        "1685": "Array,Hash Table,Binary Search,Sorting,Prefix Sum,Ordered Set,",
        "1686": "Array,String,",
        "1687": "Array,Prefix Sum,",
        "1688": "Array,Matrix,Simulation,",
        "1689": "Array,Binary Search,Breadth-First Search,Matrix,",
        "1690": "String,Greedy,Enumeration,",
        "1691": "Array,Hash Table,Sliding Window,",
        "1692": "Array,Hash Table,Trie,Rolling Hash,Hash Function,Enumeration,",
        "1693": "Hash Table,String,Dynamic Programming,",
        "1694": "String,",
        "1695": "Hash Table,Math,String,Dynamic Programming,",
        "1696": "Array,Dynamic Programming,Matrix,",
        "1697": "Math,String,Sliding Window,",
        "1698": "Array,Binary Search,Greedy,Sorting,Prefix Sum,",
        "1699": "Array,Dynamic Programming,",
        "1700": "Array,Hash Table,String,Sorting,",
        "1701": "Array,Sorting,",
        "1702": "Array,Hash Table,Bit Manipulation,Counting,",
        "1703": "Design,Segment Tree,Ordered Set,",
        "1704": "Array,Greedy,Sorting,",
        "1705": "Array,Math,Geometry,Sorting,Number Theory,",
        "1706": "Array,Stack,Monotonic Stack,Prefix Sum,",
        "1707": "Hash Table,String,Counting,",
        "1708": "Array,Hash Table,String,Counting,",
        "1709": "Greedy,Graph,Sorting,Heap (Priority Queue),",
        "1710": "Binary Search,Design,Binary Indexed Tree,Segment Tree,",
        "1711": "Hash Table,String,Counting,",
        "1712": "String,",
        "1713": "Array,Linked List,Stack,Monotonic Stack,",
        "1714": "Array,Breadth-First Search,Graph,Heap (Priority Queue),Matrix,Shortest Path,",
        "1715": "Array,Greedy,Sorting,",
        "1716": "Array,Hash Table,Simulation,",
        "1717": "Linked List,String,Stack,Design,Simulation,Doubly-Linked List,",
        "1718": "String,",
        "1719": "Array,Two Pointers,Binary Search,Sorting,",
        "1720": "Array,Binary Search,Sliding Window,Prefix Sum,",
        "1721": "Array,Simulation,",
        "1722": "Array,Dynamic Programming,Matrix,",
        "1723": "Array,Dynamic Programming,Backtracking,Bit Manipulation,Bitmask,",
        "1724": "Array,Hash Table,String,Bit Manipulation,Enumeration,",
        "1725": "Math,Dynamic Programming,Greedy,Enumeration,",
        "1726": "String,Dynamic Programming,Greedy,Memoization,",
        "1727": "Array,Dynamic Programming,Memoization,",
        "1728": ",",
        "1729": "Array,Math,Bit Manipulation,",
        "1730": "Dynamic Programming,Memoization,",
        "1731": "Array,Matrix,",
        "1732": "Dynamic Programming,",
        "1733": "Array,Dynamic Programming,",
        "1734": "Array,Bit Manipulation,Tree,Depth-First Search,",
        "1735": "Hash Table,String,",
        "1736": "Dynamic Programming,Queue,Simulation,",
        "1737": "Array,Dynamic Programming,Depth-First Search,Breadth-First Search,Graph,Topological Sort,Memoization,Matrix,",
        "1738": "Tree,Depth-First Search,Binary Tree,",
        "1739": "Array,Two Pointers,Binary Search,Sorting,",
        "1740": "Array,Binary Search,Greedy,Sorting,Heap (Priority Queue),",
        "1741": ",",
        "1742": "Array,Greedy,Sorting,Heap (Priority Queue),",
        "1743": "Hash Table,Design,Heap (Priority Queue),Ordered Set,",
        "1744": "Two Pointers,String,",
        "1745": "Math,Dynamic Programming,Combinatorics,Number Theory,",
        "1746": "Array,Hash Table,Counting,",
        "1747": "Array,Hash Table,Sorting,Heap (Priority Queue),",
        "1748": "Array,Math,Sorting,Heap (Priority Queue),Number Theory,",
        "1749": "Array,Hash Table,Counting,",
        "1750": "Array,Math,",
        "1751": "Hash Table,Design,Heap (Priority Queue),Ordered Set,",
        "1752": "Array,Hash Table,Greedy,",
        "1753": "Array,Hash Table,Matrix,Simulation,",
        "1754": "Hash Table,Design,Heap (Priority Queue),Ordered Set,",
        "1755": "Array,Hash Table,Binary Search,Bit Manipulation,",
        "1756": "Database,",
        "1757": "Array,Hash Table,Greedy,Sorting,Heap (Priority Queue),Simulation,",
        "1758": "Array,Math,Binary Search,Greedy,",
        "1759": "Depth-First Search,Graph,",
        "1760": "Depth-First Search,Graph,Topological Sort,",
        "1761": "Array,Hash Table,Sorting,Ordered Set,",
        "1762": "Array,Hash Table,Math,Counting,",
        "1763": ",",
        "1764": "Array,Hash Table,Two Pointers,Enumeration,",
        "1765": "Array,Hash Table,Tree,Depth-First Search,Breadth-First Search,Union Find,Graph,",
        "1766": "Array,Dynamic Programming,",
        "1767": "Hash Table,String,Dynamic Programming,",
        "1768": "Array,Matrix,",
        "1769": "Hash Table,Graph,",
        "1770": "String,Backtracking,Stack,Greedy,",
        "1771": "Math,Dynamic Programming,",
        "1772": "String,Sliding Window,",
        "1773": "String,Dynamic Programming,Simulation,",
        "1774": "Array,String,Prefix Sum,",
        "1775": "Array,Greedy,",
        "1776": "Hash Table,String,Greedy,Counting,",
        "1777": "Hash Table,Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "1778": "Array,Sorting,Heap (Priority Queue),",
        "1779": "Array,Binary Search,Greedy,Sorting,Prefix Sum,",
        "1780": "String,Stack,Simulation,",
        "1781": "Array,String,Prefix Sum,",
        "1782": "Array,Graph,Topological Sort,Matrix,",
        "1783": "Array,Hash Table,",
        "1784": "Math,Two Pointers,Brainteaser,",
        "1785": "Array,Backtracking,Bit Manipulation,Matrix,Enumeration,",
        "1786": "Array,Binary Search,Queue,Sliding Window,Heap (Priority Queue),Prefix Sum,Monotonic Queue,",
        "1787": "Array,Hash Table,String,",
        "1788": "Math,Dynamic Programming,Combinatorics,",
        "1789": ",",
        "1790": "Hash Table,String,Greedy,",
        "1791": "Array,Two Pointers,Greedy,Sorting,Heap (Priority Queue),Prefix Sum,",
        "1792": "Array,Divide and Conquer,Dynamic Programming,Binary Indexed Tree,Segment Tree,Queue,Monotonic Queue,",
        "1793": "Math,String,",
        "1794": "Array,Two Pointers,Greedy,Sorting,",
        "1795": "Array,Binary Search,Bit Manipulation,Sliding Window,",
        "1796": "Array,Greedy,Sorting,",
        "1797": "Math,Number Theory,",
        "1798": "String,",
        "1799": "Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "1800": "Array,String,Trie,Counting,",
        "1801": "Array,Hash Table,String,Sorting,",
        "1802": "Array,Bit Manipulation,Brainteaser,",
        "1803": "Array,Dynamic Programming,Prefix Sum,",
        "1804": "Array,Hash Table,Tree,Union Find,Graph,Sorting,",
        "1805": "Hash Table,String,Counting,",
        "1806": "Binary Search,Union Find,Design,Binary Indexed Tree,Segment Tree,Heap (Priority Queue),Ordered Set,",
        "1807": "Array,Bit Manipulation,Brainteaser,",
        "1808": "Array,Binary Search,Divide and Conquer,Binary Indexed Tree,Segment Tree,Merge Sort,Ordered Set,",
        "1809": "Math,Enumeration,Number Theory,",
        "1810": "Array,Matrix,Prefix Sum,",
        "1811": "Greedy,Bit Manipulation,",
        "1812": "String,Dynamic Programming,Rolling Hash,String Matching,Hash Function,",
        "1813": "Array,",
        "1814": "Array,Bit Manipulation,",
        "1815": "Hash Table,String,Stack,Greedy,",
        "1816": "Array,Dynamic Programming,Matrix,",
        "1817": ",",
        "1818": "Array,Binary Search,Dynamic Programming,Greedy,Prefix Sum,",
        "1819": "Array,Math,Tree,Depth-First Search,Enumeration,",
        "1820": "Array,Hash Table,Two Pointers,Sorting,",
        "1821": "Array,Hash Table,Math,Counting,",
        "1822": "Math,Enumeration,",
        "1823": "Array,Queue,Sliding Window,Monotonic Queue,",
        "1824": "Array,String,",
        "1825": "Array,Math,Number Theory,",
        "1826": "Array,Binary Search,Greedy,Sorting,Prefix Sum,",
        "1827": "Array,Greedy,Sorting,",
        "1828": "Array,Hash Table,String,",
        "1829": "Array,String,",
        "1830": "Array,Hash Table,Counting,",
        "1831": "Array,Binary Search,Stack,Sorting,Heap (Priority Queue),Monotonic Stack,",
        "1832": "Array,Math,",
        "1833": "Array,Hash Table,String,Sorting,Heap (Priority Queue),",
        "1834": "Math,Greedy,",
        "1835": "Array,Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "1836": "Array,Two Pointers,Simulation,",
        "1837": "Array,Hash Table,Sliding Window,",
        "1838": "Array,Two Pointers,Heap (Priority Queue),Simulation,",
        "1839": ",",
        "1840": "Array,Hash Table,Two Pointers,Sorting,",
        "1841": "Dynamic Programming,",
        "1842": "Array,Tree,Depth-First Search,Breadth-First Search,Graph,",
        "1843": "Math,",
        "1844": "Array,Math,Number Theory,",
        "1845": "Tree,Breadth-First Search,Binary Tree,",
        "1846": "Two Pointers,String,Dynamic Programming,Greedy,",
        "1847": "Array,Hash Table,Sorting,",
        "1848": "Array,Binary Search,Tree,Depth-First Search,Binary Search Tree,Binary Tree,",
        "1849": "Tree,Depth-First Search,Breadth-First Search,Graph,",
        "1850": "String,Dynamic Programming,",
        "1851": "Math,Geometry,",
        "1852": "Array,Matrix,Simulation,",
        "1853": "String,Dynamic Programming,",
        "1854": "Math,Prefix Sum,",
        "1855": "Two Pointers,String,Greedy,",
        "1856": "Linked List,Stack,Recursion,Monotonic Stack,",
        "1857": "Array,Hash Table,Prefix Sum,",
        "1858": "String,",
        "1859": "Array,Hash Table,Two Pointers,Sorting,",
        "1860": "Breadth-First Search,Union Find,Graph,",
        "1861": "Array,String,",
        "1862": "Array,Greedy,Graph,Sorting,Heap (Priority Queue),",
        "1863": "Array,Binary Search,Greedy,",
        "1864": "Array,Hash Table,Greedy,Counting,",
        "1865": "Array,Sorting,Heap (Priority Queue),Matrix,Simulation,",
        "1866": "Array,Hash Table,Binary Search,Dynamic Programming,Sorting,",
        "1867": "Array,Hash Table,Design,Simulation,",
        "1868": "Array,Two Pointers,Breadth-First Search,Union Find,Sorting,Heap (Priority Queue),Matrix,",
        "1869": "Array,Hash Table,String,Bit Manipulation,Counting,",
        "1870": "Math,Simulation,Number Theory,",
        "1871": "Hash Table,Graph,",
        "1872": "Array,Tree,Binary Tree,",
        "1873": "Array,Two Pointers,",
        "1874": "Array,Hash Table,String,Sorting,Heap (Priority Queue),",
        "1875": "Math,Binary Search,Number Theory,",
        "1876": "Hash Table,Math,String,Combinatorics,Counting,",
        "1877": ",",
        "1878": "Hash Table,String,Sliding Window,",
        "1879": "Array,Binary Search,Greedy,Sorting,",
        "1880": "Array,Dynamic Programming,",
        "1881": "Math,",
        "1882": "Array,Hash Table,Math,Number Theory,",
        "1883": "String,Dynamic Programming,Greedy,",
        "1884": "Math,Number Theory,",
        "1885": "Math,",
        "1886": "Hash Table,Design,Queue,Counting,Data Stream,",
        "1887": "Array,Math,Bit Manipulation,",
        "1888": "Array,Binary Search,Greedy,Queue,Sliding Window,Prefix Sum,",
        "1889": "Array,Binary Search,Counting,",
        "1890": ",",
        "1891": "Hash Table,String,Counting,",
        "1892": "Array,Heap (Priority Queue),Simulation,",
        "1893": "Array,Math,",
        "1894": "Array,Matrix,Prefix Sum,",
        "1895": "Array,Hash Table,Sliding Window,",
        "1896": "Array,Dynamic Programming,Tree,Depth-First Search,",
        "1897": "Array,Hash Table,Two Pointers,Binary Search,",
        "1898": "Array,Math,Greedy,",
        "1899": "Array,Greedy,Sorting,Heap (Priority Queue),",
        "1900": "Math,Number Theory,",
        "1901": "Math,",
        "1902": "Array,Sorting,Matrix,",
        "1903": "String,Bit Manipulation,",
        "1904": "Array,Hash Table,Dynamic Programming,Counting,",
        "1905": "Array,Hash Table,Math,Simulation,",
        "1906": "Math,Recursion,",
        "1907": "Array,Greedy,Sorting,Heap (Priority Queue),",
        "1908": "Array,Dynamic Programming,Binary Indexed Tree,Enumeration,Prefix Sum,",
        "1909": "Array,Simulation,",
        "1910": "Array,Hash Table,Binary Search,Greedy,Sorting,",
        "1911": "Array,Binary Search,Sliding Window,",
        "1912": "Array,Dynamic Programming,Depth-First Search,Breadth-First Search,Matrix,",
        "1913": "Array,Heap (Priority Queue),Simulation,",
        "1914": "Array,String,Prefix Sum,",
        "1915": "Array,Binary Search,",
        "1916": "Array,Hash Table,Greedy,",
        "1917": "Array,Two Pointers,Simulation,",
        "1918": "Array,Two Pointers,Binary Search,Sorting,",
        "1919": "Array,Hash Table,String,Bit Manipulation,",
        "1920": "Two Pointers,String,Binary Search,",
        "1921": "Math,Greedy,",
        "1922": "Array,Greedy,Sorting,",
        "1923": "Array,Bit Manipulation,Brainteaser,",
        "1924": "Array,Segment Tree,",
        "1925": "Array,Hash Table,Two Pointers,",
        "1926": "Dynamic Programming,Greedy,Bit Manipulation,",
        "1927": "Array,Math,Dynamic Programming,Bit Manipulation,Bitmask,",
        "1928": "Array,String,Dynamic Programming,Greedy,Union Find,Matrix,",
        "1929": "Array,Prefix Sum,",
        "1930": "Array,Math,String,",
        "1931": "Array,Two Pointers,Binary Search,Greedy,Sorting,",
        "1932": "Array,Breadth-First Search,Graph,Heap (Priority Queue),Matrix,Shortest Path,",
        "1933": "Math,Greedy,Sorting,",
        "1934": "Math,",
        "1935": "Array,Sorting,",
        "1936": "Array,Hash Table,Dynamic Programming,Tree,Depth-First Search,",
        "1937": "Math,Simulation,",
        "1938": "Tree,Breadth-First Search,Sorting,Binary Tree,",
        "1939": "Array,Hash Table,Math,Number Theory,",
        "1940": "Array,Dynamic Programming,",
        "1941": "Array,String,Counting,",
        "1942": "Array,Greedy,Sorting,Prefix Sum,",
        "1943": "Array,Hash Table,Bit Manipulation,Prefix Sum,",
        "1944": "Array,Binary Search,Stack,Greedy,Sorting,",
        "1945": "Math,Greedy,",
        "1946": "Array,Two Pointers,Greedy,Sorting,",
        "1947": "Array,Hash Table,Sorting,Heap (Priority Queue),Simulation,",
        "1948": "Array,Binary Search,",
        "1949": "Bit Manipulation,",
        "1950": "Array,Depth-First Search,Breadth-First Search,Matrix,Simulation,",
        "1951": "Array,Hash Table,Math,Dynamic Programming,Backtracking,Sorting,Combinatorics,",
        "1952": "Math,Greedy,",
        "1953": "Array,Binary Search,Sorting,Prefix Sum,",
        "1954": "Array,Tree,Graph,Topological Sort,",
        "1955": "Array,Hash Table,Enumeration,",
        "1956": "Breadth-First Search,Graph,",
        "1957": "String,",
        "1958": "Array,Hash Table,",
        "1959": "Array,Greedy,Sorting,Heap (Priority Queue),",
        "1960": "Array,Breadth-First Search,Ordered Set,",
        "1961": "Array,Hash Table,Prefix Sum,",
        "1962": "Array,Dynamic Programming,Stack,Breadth-First Search,Union Find,Heap (Priority Queue),Matrix,Monotonic Stack,",
        "1963": ",",
        "1964": ",",
        "1965": ",",
        "1966": ",",
        "1967": ",",
        "1968": ",",
        "1969": ",",
        "1970": ",",
        "1971": ",",
        "1972": ",",
        "1973": ",",
        "1974": ",",
        "1975": ",",
        "1976": ",",
        "1977": ",",
        "1978": ",",
        "1979": "Array,Matrix,",
        "1980": "Array,Prefix Sum,",
        "1981": "Hash Table,Tree,Depth-First Search,Breadth-First Search,Binary Tree,",
        "1982": "Graph,Design,Heap (Priority Queue),Shortest Path,",
        "1983": "Array,Matrix,",
        "1984": "Array,",
        "1985": "String,Dynamic Programming,Stack,Greedy,",
        "1986": "Array,Dynamic Programming,Tree,Depth-First Search,Graph,",
        "1987": ",",
        "1988": ",",
        "1989": "Math,",
        "1990": "Math,",
        "1991": "Array,Hash Table,Sliding Window,",
        "1992": "Array,Math,Number Theory,",
        "1993": "Array,Greedy,",
        "1994": "Array,Hash Table,Bit Manipulation,",
        "1995": "Array,Depth-First Search,Breadth-First Search,Union Find,Matrix,",
        "1996": "Array,Binary Search,Greedy,Binary Indexed Tree,Segment Tree,Sorting,Ordered Set,",
        "1997": "Array,Simulation,",
        "1998": "Array,Hash Table,Matrix,",
        "1999": "Array,Graph,Heap (Priority Queue),Shortest Path,",
        "2000": "String,Greedy,",
        "2001": ",",
        "2002": ",",
        "2003": ",",
        "2004": "Array,Hash Table,",
        "2005": "Hash Table,Design,",
        "2006": "Array,",
        "2007": "Array,Dynamic Programming,Greedy,Tree,Binary Tree,",
        "2008": "Array,String,",
        "2009": "Array,Sorting,Heap (Priority Queue),Matrix,Simulation,",
        "2010": "Array,Greedy,Bit Manipulation,Prefix Sum,",
        "2011": "Array,Math,Dynamic Programming,Sorting,Prefix Sum,",
        "2012": "Array,Hash Table,Simulation,",
        "2013": "Array,Bit Manipulation,",
        "2014": "Array,Dynamic Programming,Matrix,",
        "2015": "Depth-First Search,Breadth-First Search,Graph,",
        "2016": ",",
        "2017": ",",
        "2018": ",",
        "2019": "String,Stack,Simulation,",
        "2020": "Two Pointers,String,Greedy,",
        "2021": "Math,Backtracking,",
        "2022": "Graph,Heap (Priority Queue),Shortest Path,",
        "2023": ",",
        "2024": ",",
        "2025": ",",
        "2026": "Array,Greedy,Sorting,",
        "2027": "Array,Hash Table,String,Dynamic Programming,Trie,",
        "2028": "Array,Dynamic Programming,Backtracking,Greedy,Bit Manipulation,Sorting,Enumeration,",
        "2029": "String,",
        "2030": "Array,Hash Table,Matrix,",
        "2031": "String,Dynamic Programming,Greedy,",
        "2032": "Array,Hash Table,Binary Search,Dynamic Programming,Memoization,Sorting,Matrix,Ordered Set,",
        "2033": ",",
        "2034": "Hash Table,String,",
        "2035": "Array,Simulation,",
        "2036": "Array,Hash Table,",
        "2037": "Math,String,Dynamic Programming,",
        "2038": ",",
        "2039": ",",
        "2040": ",",
        "2041": ",",
        "2042": ",",
        "2043": ",",
        "2044": ",",
        "2045": "Hash Table,Math,",
        "2046": "String,Sliding Window,",
        "2047": "Array,Brainteaser,Sorting,Prefix Sum,",
        "2048": "Array,Hash Table,Bit Manipulation,Matrix,",
        "2049": "Array,Sorting,",
        "2050": "Array,Enumeration,",
        "2051": "Array,Binary Search,Stack,Binary Indexed Tree,Segment Tree,Sorting,Monotonic Stack,",
        "2052": "Math,Simulation,",
        "2053": "Array,Sorting,",
        "2054": "Array,Dynamic Programming,Bit Manipulation,Bitmask,",
        "2055": "Array,Hash Table,String,Simulation,",
        "2056": "Math,Dynamic Programming,Greedy,Brainteaser,",
        "2057": "Array,String,Dynamic Programming,",
        "2058": "Array,Hash Table,Sliding Window,Sorting,",
        "2059": "Array,Hash Table,Math,Counting,Number Theory,",
        "2060": "Bit Manipulation,Brainteaser,",
        "2061": "Array,Math,Dynamic Programming,",
        "2062": "Array,Stack,Sorting,Simulation,",
        "2063": "Array,Sliding Window,",
        "2064": "Array,Math,Enumeration,Number Theory,",
        "2065": "Array,Queue,Sliding Window,Heap (Priority Queue),Ordered Set,Monotonic Queue,",
        "2066": "Array,Enumeration,",
        "2067": "Array,Hash Table,Sorting,Simulation,",
        "2068": "Hash Table,String,Dynamic Programming,Backtracking,",
        "2069": "Array,Hash Table,Enumeration,",
        "2070": "Math,",
        "2071": "Array,Dynamic Programming,",
        "2072": "Array,Dynamic Programming,",
        "2073": "Array,Enumeration,",
        "2074": "Array,Binary Search,Sliding Window,Sorting,",
        "2075": "Array,Hash Table,Sorting,",
        "2076": "Array,Hash Table,String,Sliding Window,",
        "2077": "Array,Hash Table,Sorting,",
        "2078": "String,Sorting,",
        "2079": "Array,Dynamic Programming,",
        "2080": "Dynamic Programming,",
        "2081": "Array,String,",
        "2082": "Array,Greedy,",
        "2083": "Array,Math,Binary Search,Greedy,Sorting,",
        "2084": "Dynamic Programming,Bit Manipulation,Tree,Depth-First Search,Bitmask,",
        "2085": "Array,",
        "2086": "Array,Hash Table,Sliding Window,",
        "2087": "String,Greedy,Enumeration,",
        "2088": "String,Dynamic Programming,",
        "2089": "Math,",
        "2090": "Linked List,Math,Number Theory,",
        "2091": "Array,Hash Table,",
        "2092": "Array,Dynamic Programming,Sorting,",
        "2093": "String,Simulation,",
        "2094": "Array,Dynamic Programming,Greedy,",
        "2095": "Array,Binary Search,Breadth-First Search,Union Find,Matrix,",
        "2096": "Array,Hash Table,Stack,Greedy,Sorting,Heap (Priority Queue),",
        "2097": "Array,Hash Table,",
        "2098": "Linked List,Math,Stack,",
        "2099": "Array,Binary Search,Ordered Set,",
        "2100": "Array,Math,Stack,Greedy,Monotonic Stack,Number Theory,",
        "2101": "Array,Two Pointers,Binary Search,Sorting,",
        "2102": "Two Pointers,String,",
        "2103": "Array,Binary Search,Dynamic Programming,",
        "2104": "Math,Dynamic Programming,",
        "2105": "Array,String,",
        "2106": "Math,Greedy,",
        "2107": "Array,Hash Table,Binary Search,Dynamic Programming,Sorting,",
        "2108": "Array,Hash Table,Binary Search,Sliding Window,",
        "2109": "String,Counting,",
        "2110": "Math,Greedy,",
        "2111": "Array,Greedy,Bit Manipulation,",
        "2112": "Array,Dynamic Programming,Bit Manipulation,",
        "2113": "String,",
        "2114": "Hash Table,String,Sorting,",
        "2115": "Array,Hash Table,Sliding Window,",
        "2116": "Hash Table,Math,String,Greedy,Combinatorics,",
        "2117": "Math,Enumeration,",
        "2118": "Array,Hash Table,Prefix Sum,",
        "2119": "Array,Tree,Graph,Strongly Connected Component,",
        "2120": "Array,Hash Table,Prefix Sum,",
        "2121": ",",
        "2122": "Array,Dynamic Programming,Breadth-First Search,Matrix,",
        "2123": "Math,String,Dynamic Programming,String Matching,",
        "2124": "Array,",
        "2125": "Array,Hash Table,Two Pointers,Binary Search,Greedy,Counting,",
        "2126": "Array,Hash Table,Bit Manipulation,",
        "2127": "Array,Sorting,Enumeration,",
        "2128": "Array,Binary Search,",
        "2129": "Array,Math,Number Theory,",
        "2130": "Math,String,Greedy,",
        "2131": "Array,Stack,Monotonic Stack,",
        "2132": "Array,Stack,Monotonic Stack,",
        "2133": "Math,Dynamic Programming,Tree,Depth-First Search,Number Theory,",
        "2134": "Array,Hash Table,Bit Manipulation,",
        "2135": "Array,Hash Table,Greedy,Counting,",
        "2136": "Array,Greedy,Bit Manipulation,",
        "2137": "Tree,Depth-First Search,",
        "2138": "Array,",
        "2139": "Array,",
        "2140": "Array,Hash Table,Sliding Window,Prefix Sum,",
        "2141": "Dynamic Programming,Graph,Memoization,",
        "2142": ",",
        "2143": ",",
        "2144": ",",
        "2145": ",",
        "2146": ",",
        "2147": ",",
        "2148": ",",
        "2149": ",",
        "2150": ",",
        "2151": ",",
        "2152": ",",
        "2153": ",",
        "2154": ",",
        "2155": ",",
        "2156": ",",
        "2157": "Math,",
        "2158": "Array,Greedy,Sorting,",
        "2159": "Array,Hash Table,Greedy,Bit Manipulation,",
        "2160": "Array,Simulation,",
        "2161": "Array,String,Dynamic Programming,Greedy,",
        "2162": "Array,String,Dynamic Programming,",
        "2163": "Array,Hash Table,Dynamic Programming,Sliding Window,",
        "2164": "Array,Two Pointers,",
        "2165": "String,Sliding Window,",
        "2166": "Array,Two Pointers,",
        "2167": "Array,Matrix,Prefix Sum,",
        "2168": "Array,",
        "2169": "Array,Hash Table,Greedy,",
        "2170": "Two Pointers,String,Dynamic Programming,",
        "2171": "Array,Hash Table,",
        "2172": "String,",
        "2173": "Array,Dynamic Programming,",
        "2174": "Array,Dynamic Programming,Binary Indexed Tree,Segment Tree,",
        "2175": "Array,Dynamic Programming,",
        "2176": "Array,Dynamic Programming,Bit Manipulation,Tree,Depth-First Search,",
        "2177": "Array,Matrix,",
        "2178": "Graph,",
        "2179": "Dynamic Programming,Tree,Depth-First Search,",
        "2180": "Array,Binary Search,Dynamic Programming,Binary Indexed Tree,Segment Tree,",
        "2181": "Math,Combinatorics,Enumeration,",
        "2182": "Math,Combinatorics,Enumeration,",
        "2183": "Math,Dynamic Programming,Combinatorics,",
        "2184": "Array,Greedy,Sorting,Heap (Priority Queue),Matrix,",
        "2185": "Array,Hash Table,Bit Manipulation,Trie,Sliding Window,",
        "2186": "Array,Hash Table,String,Sorting,",
        "2187": "Array,Enumeration,",
        "2188": "Array,Hash Table,Bit Manipulation,Trie,Sliding Window,",
        "2189": "String,",
        "2190": "Two Pointers,String,Greedy,",
        "2191": "Math,Greedy,Bit Manipulation,",
        "2192": "Array,Binary Search,Stack,Binary Indexed Tree,Segment Tree,Heap (Priority Queue),Monotonic Stack,",
        "2193": "Array,String,",
        "2194": "Array,Sorting,",
        "2195": "Array,Dynamic Programming,Queue,Heap (Priority Queue),Monotonic Queue,",
        "2196": "Array,Binary Search,Dynamic Programming,Stack,Queue,Monotonic Stack,Monotonic Queue,",
        "2197": "Array,Math,Matrix,Simulation,",
        "2198": "Hash Table,Math,String,Enumeration,Number Theory,Prefix Sum,",
        "2199": "Array,Union Find,Sorting,",
        "2200": "Hash Table,Math,String,Number Theory,Prefix Sum,",
        "2201": "Array,Enumeration,",
        "2202": "Array,Greedy,Sorting,",
        "2203": "Hash Table,String,Sliding Window,",
        "2204": "Array,Math,Combinatorics,",
        "2205": "Array,Hash Table,",
        "2206": "String,Dynamic Programming,Greedy,",
        "2207": "Array,Hash Table,Sliding Window,",
        "2208": "Bit Manipulation,Graph,Heap (Priority Queue),Enumeration,Shortest Path,",
        "2209": "Array,Simulation,Counting,",
        "2210": "Array,Math,Simulation,",
        "2211": "Array,Sliding Window,",
        "2212": "Array,Hash Table,Math,Combinatorics,",
        "2213": "Array,Hash Table,Math,Matrix,",
        "2214": "Array,Greedy,Sorting,",
        "2215": "Array,Math,Binary Search,Greedy,Sorting,",
        "2216": "Array,Two Pointers,Binary Search,Enumeration,",
        "2217": "Array,Greedy,Sorting,Prefix Sum,",
        "2218": "Array,Two Pointers,Binary Search,",
        "2219": "Dynamic Programming,Tree,Depth-First Search,Sorting,Heap (Priority Queue),",
        "2220": "Array,Hash Table,Enumeration,",
        "2221": "Array,String,Graph,Shortest Path,",
        "2222": "Array,String,Dynamic Programming,Graph,Trie,Shortest Path,",
        "2223": "Array,Bit Manipulation,",
        "2224": "Hash Table,String,Binary Search,Sliding Window,Counting,",
        "2225": "Hash Table,String,Binary Search,Sliding Window,Counting,",
        "2226": "Hash Table,String,Prefix Sum,",
        "2227": "Array,Bit Manipulation,",
        "2228": "Dynamic Programming,Breadth-First Search,Memoization,",
        "2229": "Math,String,Dynamic Programming,",
        "2230": "Array,",
        "2231": "Array,Enumeration,",
        "2232": "Array,Hash Table,Greedy,",
        "2233": "String,Dynamic Programming,Bit Manipulation,Bitmask,",
        "2234": "Array,Hash Table,Counting,",
        "2235": "Two Pointers,String,Binary Search,Rolling Hash,String Matching,Hash Function,",
        "2236": "Binary Search,Dynamic Programming,Bit Manipulation,",
        "2237": "Two Pointers,String,Binary Search,Rolling Hash,String Matching,Hash Function,",
        "2238": "Array,Sorting,Enumeration,",
        "2239": "Array,Bit Manipulation,Sorting,",
        "2240": "Array,Math,Greedy,Number Theory,",
        "2241": "Array,Hash Table,Sliding Window,Heap (Priority Queue),",
        "2242": "Math,String,Greedy,",
        "2243": "Breadth-First Search,Graph,Prefix Sum,",
        "2244": "Hash Table,String,Greedy,Sorting,Counting,",
        "2245": "Graph,Prefix Sum,",
        "2246": "String,",
        "2247": "Math,",
        "2248": "Array,Greedy,Bit Manipulation,",
        "2249": "Array,Math,Sorting,",
        "2250": "Array,Math,Geometry,Sorting,Enumeration,",
        "2251": "Array,Hash Table,Prefix Sum,",
        "2252": "Array,Math,Geometry,Sorting,Enumeration,",
        "2253": "Array,Simulation,Prefix Sum,",
        "2254": "String,Rolling Hash,String Matching,Hash Function,",
        "2255": "Array,Matrix,",
        "2256": "Array,Matrix,",
        "2257": "Array,Rolling Hash,String Matching,Hash Function,",
        "2258": "Array,Hash Table,String,Greedy,Sorting,Counting,",
        "2259": "Array,Simulation,",
        "2260": "Array,Hash Table,Sorting,Counting,",
        "2261": "Array,Dynamic Programming,Memoization,",
        "2262": "Array,Dynamic Programming,Sorting,",
        "2263": "Array,String,Trie,Rolling Hash,String Matching,Hash Function,",
        "2264": "Array,Hash Table,String,Trie,",
        "2265": "Array,Hash Table,Math,Matrix,Counting,Enumeration,Number Theory,",
        "2266": "Array,Hash Table,Counting,",
        "2267": "Array,Math,Geometry,",
        "2268": "Array,Binary Search,",
        "2269": "Array,Binary Search,Greedy,Heap (Priority Queue),",
        "2270": "Array,",
        "2271": "Array,Heap (Priority Queue),Simulation,",
        "2272": "Array,Tree,Depth-First Search,",
        "2273": "Array,Dynamic Programming,Greedy,Bit Manipulation,Tree,Sorting,",
        "2274": "Array,Simulation,",
        "2275": "Array,Binary Indexed Tree,Segment Tree,Simulation,",
        "2276": "Array,Greedy,Sorting,",
        "2277": "Array,Hash Table,String,Trie,",
        "2278": "Array,Dynamic Programming,Prefix Sum,",
        "2279": "Array,Math,",
        "2280": "Array,Hash Table,Sorting,Heap (Priority Queue),Simulation,",
        "2281": "Hash Table,String,Greedy,Sorting,Heap (Priority Queue),Counting,",
        "2282": "Array,Dynamic Programming,",
        "2283": "Hash Table,String,",
        "2284": "Math,String,Counting,",
        "2285": "Hash Table,String,Greedy,Sorting,Counting,",
        "2286": "Array,Greedy,Sliding Window,Prefix Sum,",
        "2287": "Hash Table,String,Sliding Window,",
        "2288": "Math,Greedy,Enumeration,",
        "2289": "Array,Hash Table,Heap (Priority Queue),Ordered Set,",
        "2290": "Array,String,Trie,",
        "2291": "Array,Bit Manipulation,Sliding Window,",
        "2292": "Array,Prefix Sum,",
        "2293": "Array,Bit Manipulation,Sliding Window,",
        "2294": "Array,Dynamic Programming,Sorting,",
        "2295": "Math,",
        "2296": "Math,Simulation,",
        "2297": "Array,Math,",
        "2298": "Array,Math,Geometry,Sorting,Ordered Set,",
        "2299": "Array,",
        "2300": "String,Greedy,",
        "2301": "Array,Greedy,Sorting,",
        "2302": "Array,Bit Manipulation,Union Find,Graph,",
        "2303": "String,",
        "2304": "Array,Greedy,Sorting,",
        "2305": "Array,Graph,Heap (Priority Queue),Shortest Path,",
        "2306": "Array,Binary Search,Stack,Monotonic Stack,",
        "2307": "String,Enumeration,",
        "2308": "Array,Math,Number Theory,",
        "2309": "Array,Math,Binary Search,Bit Manipulation,Combinatorics,Number Theory,",
        "2310": "Array,Binary Search,Dynamic Programming,Bit Manipulation,Segment Tree,Queue,",
        "2311": "Hash Table,String,",
        "2312": "Hash Table,String,",
        "2313": "Array,Dynamic Programming,Matrix,",
        "2314": "Depth-First Search,Breadth-First Search,Graph,Heap (Priority Queue),Shortest Path,",
        "2315": "Array,Matrix,Enumeration,",
        "2316": "Array,Hash Table,Math,Combinatorics,Counting,",
        "2317": "Dynamic Programming,Prefix Sum,",
        "2318": "Dynamic Programming,Prefix Sum,",
        "2319": "Array,",
        "2320": "Array,Two Pointers,Sorting,Enumeration,",
        "2321": "Bit Manipulation,",
        "2322": "Array,Hash Table,Binary Search,Sliding Window,",
        "2323": "String,",
        "2324": "Hash Table,String,Counting,",
        "2325": "Hash Table,String,Counting,",
        "2326": "Array,Greedy,Enumeration,",
        "2327": "Array,Matrix,",
        "2328": "Array,Hash Table,String,Binary Search,Sorting,",
        "2329": "Hash Table,String,Dynamic Programming,Counting,",
        "2330": "Array,Binary Search,Bit Manipulation,",
        "2331": "Hash Table,String,",
        "2332": "Array,Dynamic Programming,Matrix,",
        "2333": "Array,Dynamic Programming,Bit Manipulation,Bitmask,",
        "2334": "Array,",
        "2335": "Array,Binary Search,Prefix Sum,",
        "2336": "Array,Hash Table,Math,Counting,",
        "2337": "Math,Dynamic Programming,Bit Manipulation,Memoization,Combinatorics,",
        "2338": "Array,Hash Table,Bit Manipulation,",
        "2339": "Array,Hash Table,",
        "2340": "Array,Hash Table,Simulation,",
        "2341": "Array,Binary Search,Binary Indexed Tree,Segment Tree,",
        "2342": "Array,Hash Table,",
        "2343": "String,",
        "2344": "Array,Hash Table,",
        "2345": "Array,Divide and Conquer,Dynamic Programming,Segment Tree,",
        "2346": "String,Simulation,",
        "2347": "Array,Sorting,",
        "2348": "Hash Table,String,Stack,Greedy,Heap (Priority Queue),",
        "2349": "String,Stack,Simulation,",
        "2350": "Array,Simulation,",
        "2351": "Array,Hash Table,Dynamic Programming,",
        "2352": "Array,Hash Table,Dynamic Programming,",
        "2353": "Math,Simulation,",
        "2354": "Array,Math,Simulation,Combinatorics,Prefix Sum,",
        "2355": "Array,Dynamic Programming,",
        "2356": "Array,Dynamic Programming,Bit Manipulation,",
        "2357": "Array,Hash Table,Counting,",
        "2358": "Array,Hash Table,Counting,",
        "2359": "Array,Hash Table,Two Pointers,Binary Search,Dynamic Programming,Sorting,Counting,",
        "2360": "Array,Binary Indexed Tree,Segment Tree,",
        "2361": "Array,Math,",
        "2362": "Array,Bit Manipulation,Queue,Sliding Window,Prefix Sum,",
        "2363": "Array,Dynamic Programming,Greedy,",
        "2364": "Array,Dynamic Programming,",
        "2365": "Array,Two Pointers,Sorting,",
        "2366": "Array,Matrix,",
        "2367": "Array,Dynamic Programming,",
        "2368": "Array,Matrix,Enumeration,",
        "2369": "Array,Enumeration,",
        "2370": "Array,Dynamic Programming,",
        "2371": ",",
        "2372": "Array,Greedy,",
        "2373": "Array,Sliding Window,",
        "2374": "Array,Binary Search,Bit Manipulation,Segment Tree,",
        "2375": "String,",
        "2376": "String,Bit Manipulation,Recursion,",
        "2377": "Array,Matrix,Prefix Sum,",
        "2378": "Array,String,Dynamic Programming,Suffix Array,",
        "2379": "String,Greedy,",
        "2380": "Array,Hash Table,Linked List,",
        "2381": "Array,Dynamic Programming,Greedy,Sorting,",
        "2382": "Array,Greedy,Sorting,",
        "2383": "Database,",
        "2384": "Math,Simulation,Game Theory,",
        "2385": "Array,Hash Table,Prefix Sum,",
        "2386": "Bit Manipulation,",
        "2387": "Math,String,Brainteaser,Game Theory,",
        "2388": "String,Greedy,Counting,",
        "2389": "Array,Dynamic Programming,Stack,Greedy,Monotonic Stack,",
        "2390": "Array,Math,",
        "2391": "Array,Math,Number Theory,",
        "2392": "String,Sliding Window,Enumeration,",
        "2393": "Array,Math,Depth-First Search,Breadth-First Search,Union Find,Geometry,",
        "2394": "Array,Hash Table,Counting,",
        "2395": "Array,Two Pointers,Matrix,",
        "2396": "Array,Two Pointers,Matrix,",
        "2397": "Dynamic Programming,Tree,Depth-First Search,Graph,",
        "2398": "Array,Hash Table,Design,Matrix,Simulation,",
        "2399": "Array,Breadth-First Search,Graph,",
        "2400": "Array,Greedy,Graph,Ordered Set,",
        "2401": "Array,Binary Indexed Tree,",
        "2402": "Array,String,Simulation,",
        "2403": "Tree,Depth-First Search,",
        "2404": "Array,Math,Dynamic Programming,Combinatorics,Prefix Sum,",
        "2405": ",",
        "2406": "Array,Sliding Window,",
        "2407": "Array,Sliding Window,",
        "2408": "Array,Dynamic Programming,Matrix,Enumeration,",
        "2409": "Array,Dynamic Programming,Matrix,Enumeration,",
        "2410": "String,Sliding Window,",
        "2411": "Array,Dynamic Programming,",
        "2412": "Math,String,Dynamic Programming,Greedy,Number Theory,",
        "2413": "Array,String,Binary Search,Sliding Window,Prefix Sum,",
        "2414": "Array,Math,Heap (Priority Queue),Simulation,",
        "2415": "Array,Hash Table,Sorting,Counting,Enumeration,",
        "2416": "Array,Heap (Priority Queue),Simulation,",
        "2417": "Array,Hash Table,Sorting,Counting,Enumeration,",
        "2418": "Math,",
        "2419": "String,Simulation,",
        "2420": "Hash Table,Math,Combinatorics,Enumeration,",
        "2421": "Array,Greedy,Sorting,",
        "2422": "Math,String,",
        "2423": "Array,Heap (Priority Queue),",
        "2424": "Array,Dynamic Programming,Bit Manipulation,Matrix,Bitmask,",
        "2425": "Array,Dynamic Programming,",
        "2426": "Math,String,"
    },
    "difficulty": {
        "0": "Easy",
        "1": "Easy",
        "2": "Medium",
        "3": "Hard",
        "4": "Medium",
        "5": "Medium",
        "6": "Easy",
        "7": "Hard",
        "8": "Medium",
        "9": "Medium",
        "10": "Easy",
        "11": "Easy",
        "12": "Medium",
        "13": "Medium",
        "14": "Medium",
        "15": "Medium",
        "16": "Medium",
        "17": "Easy",
        "18": "Easy",
        "19": "Medium",
        "20": "Hard",
        "21": "Medium",
        "22": "Hard",
        "23": "Easy",
        "24": "Easy",
        "25": "Easy",
        "26": "Medium",
        "27": "Hard",
        "28": "Medium",
        "29": "Hard",
        "30": "Medium",
        "31": "Medium",
        "32": "Easy",
        "33": "Medium",
        "34": "Hard",
        "35": "Medium",
        "36": "Medium",
        "37": "Medium",
        "38": "Hard",
        "39": "Hard",
        "40": "Medium",
        "41": "Hard",
        "42": "Medium",
        "43": "Medium",
        "44": "Medium",
        "45": "Medium",
        "46": "Medium",
        "47": "Medium",
        "48": "Hard",
        "49": "Hard",
        "50": "Medium",
        "51": "Medium",
        "52": "Medium",
        "53": "Medium",
        "54": "Medium",
        "55": "Easy",
        "56": "Hard",
        "57": "Medium",
        "58": "Medium",
        "59": "Medium",
        "60": "Medium",
        "61": "Hard",
        "62": "Easy",
        "63": "Hard",
        "64": "Easy",
        "65": "Easy",
        "66": "Medium",
        "67": "Medium",
        "68": "Medium",
        "69": "Medium",
        "70": "Hard",
        "71": "Medium",
        "72": "Medium",
        "73": "Medium",
        "74": "Medium",
        "75": "Medium",
        "76": "Medium",
        "77": "Easy",
        "78": "Hard",
        "79": "Hard",
        "80": "Medium",
        "81": "Hard",
        "82": "Easy",
        "83": "Medium",
        "84": "Medium",
        "85": "Medium",
        "86": "Medium",
        "87": "Easy",
        "88": "Medium",
        "89": "Medium",
        "90": "Medium",
        "91": "Medium",
        "92": "Medium",
        "93": "Easy",
        "94": "Medium",
        "95": "Medium",
        "96": "Easy",
        "97": "Medium",
        "98": "Medium",
        "99": "Easy",
        "100": "Medium",
        "101": "Easy",
        "102": "Easy",
        "103": "Easy",
        "104": "Medium",
        "105": "Medium",
        "106": "Hard",
        "107": "Medium",
        "108": "Medium",
        "109": "Easy",
        "110": "Easy",
        "111": "Medium",
        "112": "Easy",
        "113": "Medium",
        "114": "Hard",
        "115": "Hard",
        "116": "Easy",
        "117": "Hard",
        "118": "Hard",
        "119": "Medium",
        "120": "Medium",
        "121": "Medium",
        "122": "Medium",
        "123": "Medium",
        "124": "Medium",
        "125": "Hard",
        "126": "Easy",
        "127": "Medium",
        "128": "Medium",
        "129": "Medium",
        "130": "Hard",
        "131": "Easy",
        "132": "Medium",
        "133": "Medium",
        "134": "Easy",
        "135": "Easy",
        "136": "Medium",
        "137": "Medium",
        "138": "Medium",
        "139": "Hard",
        "140": "Medium",
        "141": "Medium",
        "142": "Medium",
        "143": "Medium",
        "144": "Hard",
        "145": "Medium",
        "146": "Easy",
        "147": "Medium",
        "148": "Medium",
        "149": "Medium",
        "150": "Medium",
        "151": "Easy",
        "152": "Easy",
        "153": "Easy",
        "154": "Medium",
        "155": "Hard",
        "156": "Easy",
        "157": "Medium",
        "158": "Medium",
        "159": "Medium",
        "160": "Medium",
        "161": "Medium",
        "162": "Easy",
        "163": "Easy",
        "164": "Easy",
        "165": "Medium",
        "166": "Hard",
        "167": "Medium",
        "168": "Hard",
        "169": "Medium",
        "170": "Easy",
        "171": "Medium",
        "172": "Easy",
        "173": "Medium",
        "174": "Easy",
        "175": "Easy",
        "176": "Easy",
        "177": "Medium",
        "178": "Medium",
        "179": "Medium",
        "180": "Medium",
        "181": "Easy",
        "182": "Easy",
        "183": "Medium",
        "184": "Easy",
        "185": "Easy",
        "186": "Medium",
        "187": "Medium",
        "188": "Medium",
        "189": "Medium",
        "190": "Medium",
        "191": "Hard",
        "192": "Medium",
        "193": "Hard",
        "194": "Medium",
        "195": "Medium",
        "196": "Easy",
        "197": "Hard",
        "198": "Easy",
        "199": "Hard",
        "200": "Medium",
        "201": "Easy",
        "202": "Easy",
        "203": "Easy",
        "204": "Medium",
        "205": "Easy",
        "206": "Medium",
        "207": "Medium",
        "208": "Easy",
        "209": "Easy",
        "210": "Hard",
        "211": "Easy",
        "212": "Medium",
        "213": "Medium",
        "214": "Medium",
        "215": "Easy",
        "216": "Easy",
        "217": "Easy",
        "218": "Medium",
        "219": "Hard",
        "220": "Medium",
        "221": "Easy",
        "222": "Hard",
        "223": "Medium",
        "224": "Medium",
        "225": "Easy",
        "226": "Medium",
        "227": "Hard",
        "228": "Easy",
        "229": "Medium",
        "230": "Medium",
        "231": "Medium",
        "232": "Easy",
        "233": "Easy",
        "234": "Hard",
        "235": "Hard",
        "236": "Medium",
        "237": "Medium",
        "238": "Hard",
        "239": "Medium",
        "240": "Medium",
        "241": "Medium",
        "242": "Medium",
        "243": "Medium",
        "244": "Hard",
        "245": "Hard",
        "246": "Medium",
        "247": "Medium",
        "248": "Medium",
        "249": "Hard",
        "250": "Medium",
        "251": "Medium",
        "252": "Easy",
        "253": "Hard",
        "254": "Medium",
        "255": "Hard",
        "256": "Hard",
        "257": "Medium",
        "258": "Hard",
        "259": "Medium",
        "260": "Hard",
        "261": "Hard",
        "262": "Medium",
        "263": "Easy",
        "264": "Medium",
        "265": "Easy",
        "266": "Medium",
        "267": "Easy",
        "268": "Easy",
        "269": "Easy",
        "270": "Easy",
        "271": "Hard",
        "272": "Hard",
        "273": "Medium",
        "274": "Medium",
        "275": "Hard",
        "276": "Medium",
        "277": "Easy",
        "278": "Medium",
        "279": "Medium",
        "280": "Medium",
        "281": "Medium",
        "282": "Easy",
        "283": "Medium",
        "284": "Medium",
        "285": "Medium",
        "286": "Medium",
        "287": "Hard",
        "288": "Medium",
        "289": "Easy",
        "290": "Medium",
        "291": "Medium",
        "292": "Medium",
        "293": "Easy",
        "294": "Medium",
        "295": "Easy",
        "296": "Medium",
        "297": "Hard",
        "298": "Easy",
        "299": "Medium",
        "300": "Medium",
        "301": "Medium",
        "302": "Medium",
        "303": "Medium",
        "304": "Medium",
        "305": "Medium",
        "306": "Easy",
        "307": "Hard",
        "308": "Easy",
        "309": "Easy",
        "310": "Medium",
        "311": "Hard",
        "312": "Easy",
        "313": "Hard",
        "314": "Easy",
        "315": "Medium",
        "316": "Easy",
        "317": "Easy",
        "318": "Medium",
        "319": "Medium",
        "320": "Medium",
        "321": "Medium",
        "322": "Medium",
        "323": "Medium",
        "324": "Medium",
        "325": "Hard",
        "326": "Medium",
        "327": "Easy",
        "328": "Medium",
        "329": "Medium",
        "330": "Medium",
        "331": "Medium",
        "332": "Hard",
        "333": "Easy",
        "334": "Medium",
        "335": "Medium",
        "336": "Medium",
        "337": "Hard",
        "338": "Medium",
        "339": "Easy",
        "340": "Medium",
        "341": "Medium",
        "342": "Medium",
        "343": "Medium",
        "344": "Medium",
        "345": "Medium",
        "346": "Medium",
        "347": "Hard",
        "348": "Easy",
        "349": "Hard",
        "350": "Easy",
        "351": "Medium",
        "352": "Easy",
        "353": "Medium",
        "354": "Hard",
        "355": "Medium",
        "356": "Medium",
        "357": "Hard",
        "358": "Medium",
        "359": "Medium",
        "360": "Medium",
        "361": "Easy",
        "362": "Medium",
        "363": "Medium",
        "364": "Hard",
        "365": "Hard",
        "366": "Medium",
        "367": "Easy",
        "368": "Hard",
        "369": "Easy",
        "370": "Medium",
        "371": "Hard",
        "372": "Medium",
        "373": "Easy",
        "374": "Hard",
        "375": "Medium",
        "376": "Easy",
        "377": "Easy",
        "378": "Medium",
        "379": "Medium",
        "380": "Easy",
        "381": "Hard",
        "382": "Medium",
        "383": "Easy",
        "384": "Easy",
        "385": "Easy",
        "386": "Medium",
        "387": "Easy",
        "388": "Easy",
        "389": "Medium",
        "390": "Hard",
        "391": "Medium",
        "392": "Medium",
        "393": "Hard",
        "394": "Medium",
        "395": "Medium",
        "396": "Easy",
        "397": "Easy",
        "398": "Medium",
        "399": "Medium",
        "400": "Medium",
        "401": "Medium",
        "402": "Medium",
        "403": "Medium",
        "404": "Easy",
        "405": "Medium",
        "406": "Medium",
        "407": "Medium",
        "408": "Medium",
        "409": "Medium",
        "410": "Easy",
        "411": "Medium",
        "412": "Easy",
        "413": "Hard",
        "414": "Medium",
        "415": "Medium",
        "416": "Easy",
        "417": "Hard",
        "418": "Medium",
        "419": "Medium",
        "420": "Medium",
        "421": "Easy",
        "422": "Medium",
        "423": "Easy",
        "424": "Medium",
        "425": "Easy",
        "426": "Easy",
        "427": "Hard",
        "428": "Easy",
        "429": "Medium",
        "430": "Medium",
        "431": "Easy",
        "432": "Easy",
        "433": "Medium",
        "434": "Easy",
        "435": "Medium",
        "436": "Medium",
        "437": "Easy",
        "438": "Medium",
        "439": "Easy",
        "440": "Hard",
        "441": "Easy",
        "442": "Easy",
        "443": "Hard",
        "444": "Medium",
        "445": "Medium",
        "446": "Easy",
        "447": "Easy",
        "448": "Easy",
        "449": "Easy",
        "450": "Easy",
        "451": "Hard",
        "452": "Hard",
        "453": "Medium",
        "454": "Easy",
        "455": "Medium",
        "456": "Easy",
        "457": "Medium",
        "458": "Medium",
        "459": "Easy",
        "460": "Medium",
        "461": "Easy",
        "462": "Easy",
        "463": "Easy",
        "464": "Medium",
        "465": "Medium",
        "466": "Medium",
        "467": "Medium",
        "468": "Medium",
        "469": "Easy",
        "470": "Easy",
        "471": "Hard",
        "472": "Hard",
        "473": "Hard",
        "474": "Medium",
        "475": "Medium",
        "476": "Easy",
        "477": "Medium",
        "478": "Hard",
        "479": "Medium",
        "480": "Medium",
        "481": "Easy",
        "482": "Easy",
        "483": "Medium",
        "484": "Medium",
        "485": "Medium",
        "486": "Medium",
        "487": "Medium",
        "488": "Easy",
        "489": "Medium",
        "490": "Medium",
        "491": "Easy",
        "492": "Medium",
        "493": "Medium",
        "494": "Easy",
        "495": "Medium",
        "496": "Hard",
        "497": "Medium",
        "498": "Medium",
        "499": "Hard",
        "500": "Medium",
        "501": "Easy",
        "502": "Medium",
        "503": "Medium",
        "504": "Easy",
        "505": "Hard",
        "506": "Medium",
        "507": "Medium",
        "508": "Hard",
        "509": "Easy",
        "510": "Easy",
        "511": "Medium",
        "512": "Hard",
        "513": "Medium",
        "514": "Medium",
        "515": "Medium",
        "516": "Hard",
        "517": "Medium",
        "518": "Hard",
        "519": "Easy",
        "520": "Medium",
        "521": "Easy",
        "522": "Easy",
        "523": "Medium",
        "524": "Hard",
        "525": "Easy",
        "526": "Medium",
        "527": "Easy",
        "528": "Easy",
        "529": "Easy",
        "530": "Easy",
        "531": "Medium",
        "532": "Easy",
        "533": "Hard",
        "534": "Medium",
        "535": "Medium",
        "536": "Medium",
        "537": "Hard",
        "538": "Easy",
        "539": "Medium",
        "540": "Hard",
        "541": "Medium",
        "542": "Medium",
        "543": "Medium",
        "544": "Easy",
        "545": "Medium",
        "546": "Hard",
        "547": "Easy",
        "548": "Medium",
        "549": "Hard",
        "550": "Medium",
        "551": "Easy",
        "552": "Medium",
        "553": "Hard",
        "554": "Medium",
        "555": "Medium",
        "556": "Medium",
        "557": "Hard",
        "558": "Medium",
        "559": "Easy",
        "560": "Easy",
        "561": "Easy",
        "562": "Hard",
        "563": "Medium",
        "564": "Hard",
        "565": "Medium",
        "566": "Medium",
        "567": "Hard",
        "568": "Hard",
        "569": "Medium",
        "570": "Medium",
        "571": "Hard",
        "572": "Easy",
        "573": "Medium",
        "574": "Hard",
        "575": "Medium",
        "576": "Hard",
        "577": "Easy",
        "578": "Hard",
        "579": "Medium",
        "580": "Medium",
        "581": "Hard",
        "582": "Medium",
        "583": "Hard",
        "584": "Medium",
        "585": "Hard",
        "586": "Easy",
        "587": "Medium",
        "588": "Medium",
        "589": "Medium",
        "590": "Medium",
        "591": "Medium",
        "592": "Medium",
        "593": "Medium",
        "594": "Medium",
        "595": "Medium",
        "596": "Hard",
        "597": "Medium",
        "598": "Medium",
        "599": "Easy",
        "600": "Medium",
        "601": "Hard",
        "602": "Medium",
        "603": "Hard",
        "604": "Medium",
        "605": "Hard",
        "606": "Easy",
        "607": "Easy",
        "608": "Medium",
        "609": "Medium",
        "610": "Medium",
        "611": "Hard",
        "612": "Medium",
        "613": "Easy",
        "614": "Medium",
        "615": "Medium",
        "616": "Hard",
        "617": "Medium",
        "618": "Medium",
        "619": "Hard",
        "620": "Easy",
        "621": "Medium",
        "622": "Easy",
        "623": "Medium",
        "624": "Medium",
        "625": "Easy",
        "626": "Medium",
        "627": "Hard",
        "628": "Hard",
        "629": "Hard",
        "630": "Easy",
        "631": "Medium",
        "632": "Easy",
        "633": "Medium",
        "634": "Hard",
        "635": "Medium",
        "636": "Easy",
        "637": "Medium",
        "638": "Medium",
        "639": "Medium",
        "640": "Medium",
        "641": "Hard",
        "642": "Easy",
        "643": "Medium",
        "644": "Medium",
        "645": "Hard",
        "646": "Medium",
        "647": "Medium",
        "648": "Hard",
        "649": "Medium",
        "650": "Medium",
        "651": "Medium",
        "652": "Hard",
        "653": "Medium",
        "654": "Medium",
        "655": "Hard",
        "656": "Medium",
        "657": "Easy",
        "658": "Easy",
        "659": "Medium",
        "660": "Hard",
        "661": "Medium",
        "662": "Hard",
        "663": "Medium",
        "664": "Medium",
        "665": "Easy",
        "666": "Medium",
        "667": "Medium",
        "668": "Easy",
        "669": "Medium",
        "670": "Medium",
        "671": "Medium",
        "672": "Easy",
        "673": "Medium",
        "674": "Hard",
        "675": "Hard",
        "676": "Medium",
        "677": "Medium",
        "678": "Hard",
        "679": "Easy",
        "680": "Easy",
        "681": "Medium",
        "682": "Medium",
        "683": "Easy",
        "684": "Medium",
        "685": "Medium",
        "686": "Hard",
        "687": "Easy",
        "688": "Medium",
        "689": "Medium",
        "690": "Hard",
        "691": "Easy",
        "692": "Medium",
        "693": "Hard",
        "694": "Medium",
        "695": "Medium",
        "696": "Hard",
        "697": "Hard",
        "698": "Medium",
        "699": "Easy",
        "700": "Hard",
        "701": "Medium",
        "702": "Easy",
        "703": "Medium",
        "704": "Medium",
        "705": "Medium",
        "706": "Hard",
        "707": "Easy",
        "708": "Medium",
        "709": "Medium",
        "710": "Easy",
        "711": "Medium",
        "712": "Hard",
        "713": "Medium",
        "714": "Easy",
        "715": "Medium",
        "716": "Hard",
        "717": "Easy",
        "718": "Medium",
        "719": "Hard",
        "720": "Hard",
        "721": "Easy",
        "722": "Medium",
        "723": "Medium",
        "724": "Medium",
        "725": "Easy",
        "726": "Medium",
        "727": "Medium",
        "728": "Hard",
        "729": "Medium",
        "730": "Easy",
        "731": "Medium",
        "732": "Hard",
        "733": "Easy",
        "734": "Easy",
        "735": "Hard",
        "736": "Easy",
        "737": "Medium",
        "738": "Medium",
        "739": "Medium",
        "740": "Medium",
        "741": "Medium",
        "742": "Medium",
        "743": "Medium",
        "744": "Easy",
        "745": "Hard",
        "746": "Medium",
        "747": "Medium",
        "748": "Medium",
        "749": "Easy",
        "750": "Medium",
        "751": "Medium",
        "752": "Hard",
        "753": "Easy",
        "754": "Medium",
        "755": "Medium",
        "756": "Hard",
        "757": "Medium",
        "758": "Medium",
        "759": "Medium",
        "760": "Hard",
        "761": "Medium",
        "762": "Medium",
        "763": "Hard",
        "764": "Easy",
        "765": "Medium",
        "766": "Medium",
        "767": "Hard",
        "768": "Medium",
        "769": "Hard",
        "770": "Medium",
        "771": "Medium",
        "772": "Medium",
        "773": "Medium",
        "774": "Easy",
        "775": "Medium",
        "776": "Medium",
        "777": "Hard",
        "778": "Easy",
        "779": "Medium",
        "780": "Hard",
        "781": "Hard",
        "782": "Easy",
        "783": "Medium",
        "784": "Hard",
        "785": "Hard",
        "786": "Easy",
        "787": "Medium",
        "788": "Medium",
        "789": "Easy",
        "790": "Medium",
        "791": "Medium",
        "792": "Medium",
        "793": "Easy",
        "794": "Medium",
        "795": "Medium",
        "796": "Hard",
        "797": "Easy",
        "798": "Medium",
        "799": "Medium",
        "800": "Medium",
        "801": "Medium",
        "802": "Easy",
        "803": "Medium",
        "804": "Medium",
        "805": "Easy",
        "806": "Easy",
        "807": "Medium",
        "808": "Medium",
        "809": "Easy",
        "810": "Medium",
        "811": "Medium",
        "812": "Hard",
        "813": "Medium",
        "814": "Easy",
        "815": "Medium",
        "816": "Hard",
        "817": "Medium",
        "818": "Medium",
        "819": "Medium",
        "820": "Hard",
        "821": "Easy",
        "822": "Medium",
        "823": "Medium",
        "824": "Medium",
        "825": "Medium",
        "826": "Medium",
        "827": "Medium",
        "828": "Hard",
        "829": "Medium",
        "830": "Easy",
        "831": "Easy",
        "832": "Medium",
        "833": "Medium",
        "834": "Easy",
        "835": "Medium",
        "836": "Medium",
        "837": "Medium",
        "838": "Medium",
        "839": "Easy",
        "840": "Medium",
        "841": "Easy",
        "842": "Medium",
        "843": "Medium",
        "844": "Hard",
        "845": "Easy",
        "846": "Medium",
        "847": "Medium",
        "848": "Medium",
        "849": "Easy",
        "850": "Easy",
        "851": "Medium",
        "852": "Medium",
        "853": "Hard",
        "854": "Medium",
        "855": "Medium",
        "856": "Hard",
        "857": "Hard",
        "858": "Easy",
        "859": "Medium",
        "860": "Medium",
        "861": "Hard",
        "862": "Easy",
        "863": "Medium",
        "864": "Medium",
        "865": "Medium",
        "866": "Easy",
        "867": "Medium",
        "868": "Medium",
        "869": "Easy",
        "870": "Medium",
        "871": "Medium",
        "872": "Hard",
        "873": "Easy",
        "874": "Medium",
        "875": "Medium",
        "876": "Medium",
        "877": "Easy",
        "878": "Medium",
        "879": "Medium",
        "880": "Medium",
        "881": "Easy",
        "882": "Medium",
        "883": "Medium",
        "884": "Medium",
        "885": "Medium",
        "886": "Hard",
        "887": "Easy",
        "888": "Easy",
        "889": "Medium",
        "890": "Hard",
        "891": "Medium",
        "892": "Easy",
        "893": "Medium",
        "894": "Hard",
        "895": "Medium",
        "896": "Medium",
        "897": "Medium",
        "898": "Medium",
        "899": "Easy",
        "900": "Medium",
        "901": "Hard",
        "902": "Easy",
        "903": "Easy",
        "904": "Easy",
        "905": "Medium",
        "906": "Hard",
        "907": "Easy",
        "908": "Medium",
        "909": "Medium",
        "910": "Medium",
        "911": "Easy",
        "912": "Medium",
        "913": "Medium",
        "914": "Hard",
        "915": "Medium",
        "916": "Hard",
        "917": "Easy",
        "918": "Medium",
        "919": "Medium",
        "920": "Hard",
        "921": "Easy",
        "922": "Easy",
        "923": "Medium",
        "924": "Medium",
        "925": "Hard",
        "926": "Easy",
        "927": "Medium",
        "928": "Hard",
        "929": "Hard",
        "930": "Medium",
        "931": "Medium",
        "932": "Easy",
        "933": "Medium",
        "934": "Medium",
        "935": "Medium",
        "936": "Medium",
        "937": "Medium",
        "938": "Hard",
        "939": "Medium",
        "940": "Medium",
        "941": "Medium",
        "942": "Hard",
        "943": "Easy",
        "944": "Easy",
        "945": "Medium",
        "946": "Medium",
        "947": "Hard",
        "948": "Easy",
        "949": "Medium",
        "950": "Medium",
        "951": "Hard",
        "952": "Easy",
        "953": "Medium",
        "954": "Medium",
        "955": "Hard",
        "956": "Easy",
        "957": "Medium",
        "958": "Hard",
        "959": "Easy",
        "960": "Easy",
        "961": "Medium",
        "962": "Hard",
        "963": "Medium",
        "964": "Easy",
        "965": "Medium",
        "966": "Hard",
        "967": "Easy",
        "968": "Medium",
        "969": "Medium",
        "970": "Hard",
        "971": "Easy",
        "972": "Medium",
        "973": "Medium",
        "974": "Hard",
        "975": "Easy",
        "976": "Medium",
        "977": "Hard",
        "978": "Medium",
        "979": "Easy",
        "980": "Medium",
        "981": "Medium",
        "982": "Hard",
        "983": "Easy",
        "984": "Medium",
        "985": "Medium",
        "986": "Hard",
        "987": "Easy",
        "988": "Medium",
        "989": "Medium",
        "990": "Hard",
        "991": "Easy",
        "992": "Medium",
        "993": "Medium",
        "994": "Medium",
        "995": "Easy",
        "996": "Medium",
        "997": "Medium",
        "998": "Hard",
        "999": "Easy",
        "1000": "Medium",
        "1001": "Medium",
        "1002": "Hard",
        "1003": "Easy",
        "1004": "Easy",
        "1005": "Medium",
        "1006": "Medium",
        "1007": "Hard",
        "1008": "Easy",
        "1009": "Medium",
        "1010": "Medium",
        "1011": "Hard",
        "1012": "Medium",
        "1013": "Easy",
        "1014": "Medium",
        "1015": "Medium",
        "1016": "Hard",
        "1017": "Easy",
        "1018": "Medium",
        "1019": "Medium",
        "1020": "Hard",
        "1021": "Easy",
        "1022": "Medium",
        "1023": "Medium",
        "1024": "Hard",
        "1025": "Easy",
        "1026": "Medium",
        "1027": "Hard",
        "1028": "Easy",
        "1029": "Medium",
        "1030": "Medium",
        "1031": "Hard",
        "1032": "Medium",
        "1033": "Medium",
        "1034": "Hard",
        "1035": "Easy",
        "1036": "Medium",
        "1037": "Medium",
        "1038": "Hard",
        "1039": "Easy",
        "1040": "Medium",
        "1041": "Medium",
        "1042": "Hard",
        "1043": "Easy",
        "1044": "Easy",
        "1045": "Easy",
        "1046": "Medium",
        "1047": "Easy",
        "1048": "Medium",
        "1049": "Medium",
        "1050": "Hard",
        "1051": "Easy",
        "1052": "Medium",
        "1053": "Medium",
        "1054": "Hard",
        "1055": "Medium",
        "1056": "Easy",
        "1057": "Medium",
        "1058": "Medium",
        "1059": "Hard",
        "1060": "Medium",
        "1061": "Hard",
        "1062": "Easy",
        "1063": "Medium",
        "1064": "Hard",
        "1065": "Easy",
        "1066": "Easy",
        "1067": "Medium",
        "1068": "Hard",
        "1069": "Easy",
        "1070": "Medium",
        "1071": "Medium",
        "1072": "Hard",
        "1073": "Easy",
        "1074": "Medium",
        "1075": "Medium",
        "1076": "Hard",
        "1077": "Medium",
        "1078": "Medium",
        "1079": "Hard",
        "1080": "Easy",
        "1081": "Medium",
        "1082": "Medium",
        "1083": "Hard",
        "1084": "Easy",
        "1085": "Easy",
        "1086": "Medium",
        "1087": "Hard",
        "1088": "Medium",
        "1089": "Medium",
        "1090": "Medium",
        "1091": "Hard",
        "1092": "Medium",
        "1093": "Medium",
        "1094": "Hard",
        "1095": "Easy",
        "1096": "Hard",
        "1097": "Easy",
        "1098": "Medium",
        "1099": "Medium",
        "1100": "Hard",
        "1101": "Easy",
        "1102": "Medium",
        "1103": "Easy",
        "1104": "Medium",
        "1105": "Medium",
        "1106": "Hard",
        "1107": "Easy",
        "1108": "Medium",
        "1109": "Medium",
        "1110": "Hard",
        "1111": "Easy",
        "1112": "Medium",
        "1113": "Medium",
        "1114": "Easy",
        "1115": "Medium",
        "1116": "Medium",
        "1117": "Hard",
        "1118": "Easy",
        "1119": "Easy",
        "1120": "Medium",
        "1121": "Medium",
        "1122": "Hard",
        "1123": "Easy",
        "1124": "Medium",
        "1125": "Medium",
        "1126": "Hard",
        "1127": "Easy",
        "1128": "Medium",
        "1129": "Medium",
        "1130": "Hard",
        "1131": "Medium",
        "1132": "Medium",
        "1133": "Hard",
        "1134": "Easy",
        "1135": "Medium",
        "1136": "Medium",
        "1137": "Hard",
        "1138": "Easy",
        "1139": "Medium",
        "1140": "Medium",
        "1141": "Hard",
        "1142": "Easy",
        "1143": "Easy",
        "1144": "Medium",
        "1145": "Hard",
        "1146": "Hard",
        "1147": "Easy",
        "1148": "Medium",
        "1149": "Medium",
        "1150": "Hard",
        "1151": "Easy",
        "1152": "Easy",
        "1153": "Medium",
        "1154": "Medium",
        "1155": "Hard",
        "1156": "Easy",
        "1157": "Medium",
        "1158": "Medium",
        "1159": "Hard",
        "1160": "Easy",
        "1161": "Medium",
        "1162": "Medium",
        "1163": "Hard",
        "1164": "Easy",
        "1165": "Medium",
        "1166": "Medium",
        "1167": "Hard",
        "1168": "Easy",
        "1169": "Medium",
        "1170": "Hard",
        "1171": "Medium",
        "1172": "Medium",
        "1173": "Easy",
        "1174": "Medium",
        "1175": "Medium",
        "1176": "Hard",
        "1177": "Easy",
        "1178": "Medium",
        "1179": "Hard",
        "1180": "Hard",
        "1181": "Easy",
        "1182": "Medium",
        "1183": "Medium",
        "1184": "Hard",
        "1185": "Easy",
        "1186": "Medium",
        "1187": "Medium",
        "1188": "Hard",
        "1189": "Easy",
        "1190": "Easy",
        "1191": "Medium",
        "1192": "Medium",
        "1193": "Easy",
        "1194": "Easy",
        "1195": "Medium",
        "1196": "Medium",
        "1197": "Hard",
        "1198": "Easy",
        "1199": "Medium",
        "1200": "Medium",
        "1201": "Hard",
        "1202": "Easy",
        "1203": "Medium",
        "1204": "Medium",
        "1205": "Hard",
        "1206": "Easy",
        "1207": "Medium",
        "1208": "Medium",
        "1209": "Hard",
        "1210": "Easy",
        "1211": "Medium",
        "1212": "Hard",
        "1213": "Hard",
        "1214": "Easy",
        "1215": "Medium",
        "1216": "Medium",
        "1217": "Hard",
        "1218": "Easy",
        "1219": "Medium",
        "1220": "Medium",
        "1221": "Hard",
        "1222": "Easy",
        "1223": "Medium",
        "1224": "Medium",
        "1225": "Easy",
        "1226": "Medium",
        "1227": "Medium",
        "1228": "Hard",
        "1229": "Easy",
        "1230": "Easy",
        "1231": "Easy",
        "1232": "Medium",
        "1233": "Easy",
        "1234": "Medium",
        "1235": "Medium",
        "1236": "Hard",
        "1237": "Easy",
        "1238": "Medium",
        "1239": "Hard",
        "1240": "Easy",
        "1241": "Medium",
        "1242": "Medium",
        "1243": "Hard",
        "1244": "Easy",
        "1245": "Medium",
        "1246": "Medium",
        "1247": "Hard",
        "1248": "Easy",
        "1249": "Easy",
        "1250": "Medium",
        "1251": "Medium",
        "1252": "Hard",
        "1253": "Easy",
        "1254": "Easy",
        "1255": "Medium",
        "1256": "Medium",
        "1257": "Hard",
        "1258": "Easy",
        "1259": "Medium",
        "1260": "Medium",
        "1261": "Hard",
        "1262": "Easy",
        "1263": "Medium",
        "1264": "Medium",
        "1265": "Hard",
        "1266": "Easy",
        "1267": "Easy",
        "1268": "Medium",
        "1269": "Medium",
        "1270": "Hard",
        "1271": "Easy",
        "1272": "Medium",
        "1273": "Medium",
        "1274": "Hard",
        "1275": "Easy",
        "1276": "Easy",
        "1277": "Medium",
        "1278": "Medium",
        "1279": "Easy",
        "1280": "Medium",
        "1281": "Medium",
        "1282": "Hard",
        "1283": "Easy",
        "1284": "Medium",
        "1285": "Medium",
        "1286": "Hard",
        "1287": "Easy",
        "1288": "Medium",
        "1289": "Medium",
        "1290": "Hard",
        "1291": "Easy",
        "1292": "Medium",
        "1293": "Medium",
        "1294": "Hard",
        "1295": "Medium",
        "1296": "Medium",
        "1297": "Hard",
        "1298": "Easy",
        "1299": "Medium",
        "1300": "Medium",
        "1301": "Hard",
        "1302": "Easy",
        "1303": "Easy",
        "1304": "Easy",
        "1305": "Medium",
        "1306": "Medium",
        "1307": "Hard",
        "1308": "Easy",
        "1309": "Medium",
        "1310": "Medium",
        "1311": "Hard",
        "1312": "Easy",
        "1313": "Easy",
        "1314": "Medium",
        "1315": "Medium",
        "1316": "Hard",
        "1317": "Easy",
        "1318": "Medium",
        "1319": "Medium",
        "1320": "Easy",
        "1321": "Medium",
        "1322": "Medium",
        "1323": "Hard",
        "1324": "Easy",
        "1325": "Easy",
        "1326": "Medium",
        "1327": "Hard",
        "1328": "Easy",
        "1329": "Medium",
        "1330": "Medium",
        "1331": "Hard",
        "1332": "Easy",
        "1333": "Medium",
        "1334": "Hard",
        "1335": "Hard",
        "1336": "Easy",
        "1337": "Medium",
        "1338": "Medium",
        "1339": "Hard",
        "1340": "Easy",
        "1341": "Medium",
        "1342": "Hard",
        "1343": "Medium",
        "1344": "Medium",
        "1345": "Hard",
        "1346": "Easy",
        "1347": "Easy",
        "1348": "Easy",
        "1349": "Medium",
        "1350": "Hard",
        "1351": "Easy",
        "1352": "Easy",
        "1353": "Medium",
        "1354": "Medium",
        "1355": "Hard",
        "1356": "Easy",
        "1357": "Medium",
        "1358": "Medium",
        "1359": "Medium",
        "1360": "Hard",
        "1361": "Easy",
        "1362": "Medium",
        "1363": "Medium",
        "1364": "Hard",
        "1365": "Easy",
        "1366": "Medium",
        "1367": "Medium",
        "1368": "Hard",
        "1369": "Easy",
        "1370": "Medium",
        "1371": "Medium",
        "1372": "Hard",
        "1373": "Easy",
        "1374": "Medium",
        "1375": "Medium",
        "1376": "Hard",
        "1377": "Easy",
        "1378": "Medium",
        "1379": "Medium",
        "1380": "Hard",
        "1381": "Easy",
        "1382": "Medium",
        "1383": "Medium",
        "1384": "Hard",
        "1385": "Easy",
        "1386": "Medium",
        "1387": "Medium",
        "1388": "Hard",
        "1389": "Easy",
        "1390": "Medium",
        "1391": "Medium",
        "1392": "Hard",
        "1393": "Easy",
        "1394": "Medium",
        "1395": "Medium",
        "1396": "Hard",
        "1397": "Easy",
        "1398": "Medium",
        "1399": "Hard",
        "1400": "Easy",
        "1401": "Medium",
        "1402": "Medium",
        "1403": "Hard",
        "1404": "Easy",
        "1405": "Medium",
        "1406": "Medium",
        "1407": "Hard",
        "1408": "Easy",
        "1409": "Easy",
        "1410": "Medium",
        "1411": "Medium",
        "1412": "Hard",
        "1413": "Easy",
        "1414": "Medium",
        "1415": "Medium",
        "1416": "Hard",
        "1417": "Medium",
        "1418": "Easy",
        "1419": "Medium",
        "1420": "Medium",
        "1421": "Hard",
        "1422": "Easy",
        "1423": "Medium",
        "1424": "Medium",
        "1425": "Hard",
        "1426": "Easy",
        "1427": "Medium",
        "1428": "Hard",
        "1429": "Medium",
        "1430": "Easy",
        "1431": "Medium",
        "1432": "Medium",
        "1433": "Medium",
        "1434": "Medium",
        "1435": "Easy",
        "1436": "Medium",
        "1437": "Medium",
        "1438": "Hard",
        "1439": "Easy",
        "1440": "Medium",
        "1441": "Hard",
        "1442": "Easy",
        "1443": "Medium",
        "1444": "Medium",
        "1445": "Hard",
        "1446": "Easy",
        "1447": "Medium",
        "1448": "Hard",
        "1449": "Easy",
        "1450": "Medium",
        "1451": "Hard",
        "1452": "Medium",
        "1453": "Easy",
        "1454": "Medium",
        "1455": "Medium",
        "1456": "Hard",
        "1457": "Easy",
        "1458": "Medium",
        "1459": "Medium",
        "1460": "Hard",
        "1461": "Easy",
        "1462": "Medium",
        "1463": "Medium",
        "1464": "Hard",
        "1465": "Medium",
        "1466": "Hard",
        "1467": "Easy",
        "1468": "Medium",
        "1469": "Medium",
        "1470": "Hard",
        "1471": "Easy",
        "1472": "Medium",
        "1473": "Medium",
        "1474": "Hard",
        "1475": "Easy",
        "1476": "Easy",
        "1477": "Medium",
        "1478": "Medium",
        "1479": "Hard",
        "1480": "Easy",
        "1481": "Easy",
        "1482": "Medium",
        "1483": "Hard",
        "1484": "Easy",
        "1485": "Easy",
        "1486": "Medium",
        "1487": "Medium",
        "1488": "Hard",
        "1489": "Easy",
        "1490": "Medium",
        "1491": "Medium",
        "1492": "Hard",
        "1493": "Easy",
        "1494": "Medium",
        "1495": "Medium",
        "1496": "Hard",
        "1497": "Easy",
        "1498": "Medium",
        "1499": "Medium",
        "1500": "Hard",
        "1501": "Easy",
        "1502": "Medium",
        "1503": "Hard",
        "1504": "Easy",
        "1505": "Medium",
        "1506": "Hard",
        "1507": "Easy",
        "1508": "Medium",
        "1509": "Medium",
        "1510": "Hard",
        "1511": "Easy",
        "1512": "Medium",
        "1513": "Medium",
        "1514": "Hard",
        "1515": "Medium",
        "1516": "Medium",
        "1517": "Hard",
        "1518": "Easy",
        "1519": "Medium",
        "1520": "Medium",
        "1521": "Hard",
        "1522": "Easy",
        "1523": "Medium",
        "1524": "Easy",
        "1525": "Medium",
        "1526": "Medium",
        "1527": "Hard",
        "1528": "Easy",
        "1529": "Medium",
        "1530": "Medium",
        "1531": "Hard",
        "1532": "Easy",
        "1533": "Medium",
        "1534": "Medium",
        "1535": "Hard",
        "1536": "Easy",
        "1537": "Medium",
        "1538": "Medium",
        "1539": "Hard",
        "1540": "Easy",
        "1541": "Medium",
        "1542": "Medium",
        "1543": "Hard",
        "1544": "Easy",
        "1545": "Medium",
        "1546": "Medium",
        "1547": "Hard",
        "1548": "Easy",
        "1549": "Medium",
        "1550": "Medium",
        "1551": "Hard",
        "1552": "Easy",
        "1553": "Medium",
        "1554": "Medium",
        "1555": "Hard",
        "1556": "Easy",
        "1557": "Medium",
        "1558": "Medium",
        "1559": "Hard",
        "1560": "Easy",
        "1561": "Medium",
        "1562": "Medium",
        "1563": "Hard",
        "1564": "Easy",
        "1565": "Medium",
        "1566": "Hard",
        "1567": "Easy",
        "1568": "Medium",
        "1569": "Medium",
        "1570": "Hard",
        "1571": "Easy",
        "1572": "Medium",
        "1573": "Medium",
        "1574": "Hard",
        "1575": "Easy",
        "1576": "Medium",
        "1577": "Medium",
        "1578": "Hard",
        "1579": "Easy",
        "1580": "Medium",
        "1581": "Medium",
        "1582": "Hard",
        "1583": "Easy",
        "1584": "Medium",
        "1585": "Medium",
        "1586": "Hard",
        "1587": "Easy",
        "1588": "Medium",
        "1589": "Medium",
        "1590": "Hard",
        "1591": "Easy",
        "1592": "Medium",
        "1593": "Medium",
        "1594": "Hard",
        "1595": "Easy",
        "1596": "Medium",
        "1597": "Medium",
        "1598": "Hard",
        "1599": "Easy",
        "1600": "Medium",
        "1601": "Medium",
        "1602": "Easy",
        "1603": "Medium",
        "1604": "Hard",
        "1605": "Easy",
        "1606": "Medium",
        "1607": "Medium",
        "1608": "Hard",
        "1609": "Easy",
        "1610": "Medium",
        "1611": "Medium",
        "1612": "Easy",
        "1613": "Medium",
        "1614": "Hard",
        "1615": "Hard",
        "1616": "Easy",
        "1617": "Medium",
        "1618": "Medium",
        "1619": "Hard",
        "1620": "Easy",
        "1621": "Medium",
        "1622": "Medium",
        "1623": "Hard",
        "1624": "Easy",
        "1625": "Medium",
        "1626": "Medium",
        "1627": "Easy",
        "1628": "Medium",
        "1629": "Medium",
        "1630": "Hard",
        "1631": "Easy",
        "1632": "Medium",
        "1633": "Medium",
        "1634": "Hard",
        "1635": "Easy",
        "1636": "Medium",
        "1637": "Medium",
        "1638": "Hard",
        "1639": "Easy",
        "1640": "Medium",
        "1641": "Medium",
        "1642": "Hard",
        "1643": "Easy",
        "1644": "Medium",
        "1645": "Hard",
        "1646": "Easy",
        "1647": "Medium",
        "1648": "Medium",
        "1649": "Hard",
        "1650": "Easy",
        "1651": "Medium",
        "1652": "Medium",
        "1653": "Hard",
        "1654": "Easy",
        "1655": "Medium",
        "1656": "Medium",
        "1657": "Hard",
        "1658": "Easy",
        "1659": "Medium",
        "1660": "Hard",
        "1661": "Easy",
        "1662": "Medium",
        "1663": "Hard",
        "1664": "Easy",
        "1665": "Medium",
        "1666": "Medium",
        "1667": "Hard",
        "1668": "Easy",
        "1669": "Medium",
        "1670": "Medium",
        "1671": "Hard",
        "1672": "Easy",
        "1673": "Easy",
        "1674": "Easy",
        "1675": "Medium",
        "1676": "Medium",
        "1677": "Hard",
        "1678": "Easy",
        "1679": "Medium",
        "1680": "Medium",
        "1681": "Hard",
        "1682": "Easy",
        "1683": "Medium",
        "1684": "Medium",
        "1685": "Hard",
        "1686": "Easy",
        "1687": "Medium",
        "1688": "Medium",
        "1689": "Hard",
        "1690": "Easy",
        "1691": "Medium",
        "1692": "Medium",
        "1693": "Hard",
        "1694": "Easy",
        "1695": "Medium",
        "1696": "Hard",
        "1697": "Easy",
        "1698": "Medium",
        "1699": "Hard",
        "1700": "Easy",
        "1701": "Medium",
        "1702": "Medium",
        "1703": "Hard",
        "1704": "Medium",
        "1705": "Medium",
        "1706": "Hard",
        "1707": "Easy",
        "1708": "Medium",
        "1709": "Medium",
        "1710": "Hard",
        "1711": "Easy",
        "1712": "Medium",
        "1713": "Medium",
        "1714": "Hard",
        "1715": "Medium",
        "1716": "Medium",
        "1717": "Hard",
        "1718": "Easy",
        "1719": "Medium",
        "1720": "Hard",
        "1721": "Easy",
        "1722": "Medium",
        "1723": "Medium",
        "1724": "Hard",
        "1725": "Medium",
        "1726": "Medium",
        "1727": "Hard",
        "1728": "Easy",
        "1729": "Medium",
        "1730": "Hard",
        "1731": "Easy",
        "1732": "Medium",
        "1733": "Hard",
        "1734": "Hard",
        "1735": "Easy",
        "1736": "Medium",
        "1737": "Hard",
        "1738": "Easy",
        "1739": "Medium",
        "1740": "Medium",
        "1741": "Hard",
        "1742": "Easy",
        "1743": "Medium",
        "1744": "Medium",
        "1745": "Hard",
        "1746": "Easy",
        "1747": "Medium",
        "1748": "Hard",
        "1749": "Easy",
        "1750": "Medium",
        "1751": "Medium",
        "1752": "Hard",
        "1753": "Medium",
        "1754": "Medium",
        "1755": "Hard",
        "1756": "Easy",
        "1757": "Easy",
        "1758": "Medium",
        "1759": "Medium",
        "1760": "Hard",
        "1761": "Easy",
        "1762": "Medium",
        "1763": "Medium",
        "1764": "Easy",
        "1765": "Medium",
        "1766": "Medium",
        "1767": "Medium",
        "1768": "Easy",
        "1769": "Medium",
        "1770": "Medium",
        "1771": "Hard",
        "1772": "Easy",
        "1773": "Medium",
        "1774": "Medium",
        "1775": "Easy",
        "1776": "Medium",
        "1777": "Medium",
        "1778": "Hard",
        "1779": "Easy",
        "1780": "Medium",
        "1781": "Medium",
        "1782": "Hard",
        "1783": "Easy",
        "1784": "Medium",
        "1785": "Medium",
        "1786": "Hard",
        "1787": "Easy",
        "1788": "Medium",
        "1789": "Hard",
        "1790": "Medium",
        "1791": "Medium",
        "1792": "Hard",
        "1793": "Easy",
        "1794": "Medium",
        "1795": "Medium",
        "1796": "Hard",
        "1797": "Easy",
        "1798": "Medium",
        "1799": "Medium",
        "1800": "Hard",
        "1801": "Easy",
        "1802": "Medium",
        "1803": "Medium",
        "1804": "Hard",
        "1805": "Easy",
        "1806": "Medium",
        "1807": "Medium",
        "1808": "Hard",
        "1809": "Easy",
        "1810": "Medium",
        "1811": "Medium",
        "1812": "Hard",
        "1813": "Easy",
        "1814": "Medium",
        "1815": "Medium",
        "1816": "Hard",
        "1817": "Medium",
        "1818": "Medium",
        "1819": "Hard",
        "1820": "Easy",
        "1821": "Medium",
        "1822": "Medium",
        "1823": "Hard",
        "1824": "Easy",
        "1825": "Medium",
        "1826": "Hard",
        "1827": "Hard",
        "1828": "Easy",
        "1829": "Medium",
        "1830": "Medium",
        "1831": "Hard",
        "1832": "Easy",
        "1833": "Medium",
        "1834": "Medium",
        "1835": "Hard",
        "1836": "Easy",
        "1837": "Medium",
        "1838": "Medium",
        "1839": "Hard",
        "1840": "Easy",
        "1841": "Medium",
        "1842": "Medium",
        "1843": "Easy",
        "1844": "Medium",
        "1845": "Medium",
        "1846": "Hard",
        "1847": "Easy",
        "1848": "Medium",
        "1849": "Medium",
        "1850": "Hard",
        "1851": "Easy",
        "1852": "Medium",
        "1853": "Hard",
        "1854": "Easy",
        "1855": "Medium",
        "1856": "Medium",
        "1857": "Hard",
        "1858": "Easy",
        "1859": "Medium",
        "1860": "Hard",
        "1861": "Easy",
        "1862": "Medium",
        "1863": "Medium",
        "1864": "Hard",
        "1865": "Easy",
        "1866": "Medium",
        "1867": "Medium",
        "1868": "Hard",
        "1869": "Easy",
        "1870": "Medium",
        "1871": "Hard",
        "1872": "Hard",
        "1873": "Easy",
        "1874": "Medium",
        "1875": "Medium",
        "1876": "Hard",
        "1877": "Easy",
        "1878": "Medium",
        "1879": "Medium",
        "1880": "Hard",
        "1881": "Easy",
        "1882": "Medium",
        "1883": "Medium",
        "1884": "Medium",
        "1885": "Easy",
        "1886": "Medium",
        "1887": "Medium",
        "1888": "Hard",
        "1889": "Easy",
        "1890": "Medium",
        "1891": "Medium",
        "1892": "Hard",
        "1893": "Easy",
        "1894": "Medium",
        "1895": "Medium",
        "1896": "Hard",
        "1897": "Easy",
        "1898": "Medium",
        "1899": "Medium",
        "1900": "Hard",
        "1901": "Easy",
        "1902": "Medium",
        "1903": "Medium",
        "1904": "Hard",
        "1905": "Easy",
        "1906": "Medium",
        "1907": "Hard",
        "1908": "Hard",
        "1909": "Easy",
        "1910": "Medium",
        "1911": "Medium",
        "1912": "Medium",
        "1913": "Easy",
        "1914": "Medium",
        "1915": "Medium",
        "1916": "Hard",
        "1917": "Easy",
        "1918": "Medium",
        "1919": "Medium",
        "1920": "Hard",
        "1921": "Easy",
        "1922": "Medium",
        "1923": "Medium",
        "1924": "Hard",
        "1925": "Easy",
        "1926": "Medium",
        "1927": "Medium",
        "1928": "Hard",
        "1929": "Easy",
        "1930": "Medium",
        "1931": "Medium",
        "1932": "Hard",
        "1933": "Easy",
        "1934": "Medium",
        "1935": "Medium",
        "1936": "Hard",
        "1937": "Easy",
        "1938": "Medium",
        "1939": "Hard",
        "1940": "Hard",
        "1941": "Easy",
        "1942": "Medium",
        "1943": "Medium",
        "1944": "Hard",
        "1945": "Easy",
        "1946": "Medium",
        "1947": "Medium",
        "1948": "Medium",
        "1949": "Easy",
        "1950": "Medium",
        "1951": "Medium",
        "1952": "Easy",
        "1953": "Medium",
        "1954": "Hard",
        "1955": "Easy",
        "1956": "Hard",
        "1957": "Easy",
        "1958": "Medium",
        "1959": "Medium",
        "1960": "Hard",
        "1961": "Medium",
        "1962": "Hard",
        "1963": "Medium",
        "1964": "Easy",
        "1965": "Easy",
        "1966": "Easy",
        "1967": "Medium",
        "1968": "Medium",
        "1969": "Medium",
        "1970": "Medium",
        "1971": "Easy",
        "1972": "Medium",
        "1973": "Easy",
        "1974": "Hard",
        "1975": "Medium",
        "1976": "Easy",
        "1977": "Easy",
        "1978": "Medium",
        "1979": "Easy",
        "1980": "Medium",
        "1981": "Medium",
        "1982": "Hard",
        "1983": "Easy",
        "1984": "Easy",
        "1985": "Medium",
        "1986": "Hard",
        "1987": "Easy",
        "1988": "Hard",
        "1989": "Easy",
        "1990": "Easy",
        "1991": "Medium",
        "1992": "Medium",
        "1993": "Easy",
        "1994": "Medium",
        "1995": "Medium",
        "1996": "Hard",
        "1997": "Easy",
        "1998": "Medium",
        "1999": "Medium",
        "2000": "Hard",
        "2001": "Easy",
        "2002": "Easy",
        "2003": "Easy",
        "2004": "Easy",
        "2005": "Medium",
        "2006": "Medium",
        "2007": "Medium",
        "2008": "Easy",
        "2009": "Medium",
        "2010": "Medium",
        "2011": "Hard",
        "2012": "Easy",
        "2013": "Medium",
        "2014": "Medium",
        "2015": "Medium",
        "2016": "Medium",
        "2017": "Medium",
        "2018": "Easy",
        "2019": "Easy",
        "2020": "Easy",
        "2021": "Medium",
        "2022": "Hard",
        "2023": "Easy",
        "2024": "Easy",
        "2025": "Medium",
        "2026": "Easy",
        "2027": "Medium",
        "2028": "Medium",
        "2029": "Easy",
        "2030": "Medium",
        "2031": "Medium",
        "2032": "Hard",
        "2033": "Easy",
        "2034": "Easy",
        "2035": "Easy",
        "2036": "Medium",
        "2037": "Hard",
        "2038": "Medium",
        "2039": "Medium",
        "2040": "Easy",
        "2041": "Easy",
        "2042": "Easy",
        "2043": "Easy",
        "2044": "Easy",
        "2045": "Easy",
        "2046": "Medium",
        "2047": "Medium",
        "2048": "Hard",
        "2049": "Easy",
        "2050": "Medium",
        "2051": "Hard",
        "2052": "Easy",
        "2053": "Medium",
        "2054": "Medium",
        "2055": "Easy",
        "2056": "Medium",
        "2057": "Medium",
        "2058": "Medium",
        "2059": "Easy",
        "2060": "Medium",
        "2061": "Medium",
        "2062": "Hard",
        "2063": "Easy",
        "2064": "Medium",
        "2065": "Medium",
        "2066": "Easy",
        "2067": "Medium",
        "2068": "Medium",
        "2069": "Medium",
        "2070": "Easy",
        "2071": "Medium",
        "2072": "Medium",
        "2073": "Easy",
        "2074": "Medium",
        "2075": "Medium",
        "2076": "Hard",
        "2077": "Easy",
        "2078": "Medium",
        "2079": "Medium",
        "2080": "Medium",
        "2081": "Easy",
        "2082": "Medium",
        "2083": "Hard",
        "2084": "Hard",
        "2085": "Easy",
        "2086": "Medium",
        "2087": "Medium",
        "2088": "Hard",
        "2089": "Easy",
        "2090": "Medium",
        "2091": "Medium",
        "2092": "Hard",
        "2093": "Easy",
        "2094": "Medium",
        "2095": "Medium",
        "2096": "Hard",
        "2097": "Easy",
        "2098": "Medium",
        "2099": "Medium",
        "2100": "Hard",
        "2101": "Easy",
        "2102": "Medium",
        "2103": "Medium",
        "2104": "Hard",
        "2105": "Easy",
        "2106": "Medium",
        "2107": "Medium",
        "2108": "Medium",
        "2109": "Easy",
        "2110": "Medium",
        "2111": "Hard",
        "2112": "Hard",
        "2113": "Easy",
        "2114": "Medium",
        "2115": "Medium",
        "2116": "Hard",
        "2117": "Easy",
        "2118": "Medium",
        "2119": "Hard",
        "2120": "Easy",
        "2121": "Medium",
        "2122": "Medium",
        "2123": "Hard",
        "2124": "Easy",
        "2125": "Medium",
        "2126": "Medium",
        "2127": "Medium",
        "2128": "Medium",
        "2129": "Hard",
        "2130": "Easy",
        "2131": "Medium",
        "2132": "Medium",
        "2133": "Hard",
        "2134": "Easy",
        "2135": "Medium",
        "2136": "Medium",
        "2137": "Hard",
        "2138": "Easy",
        "2139": "Medium",
        "2140": "Medium",
        "2141": "Hard",
        "2142": "Easy",
        "2143": "Easy",
        "2144": "Easy",
        "2145": "Easy",
        "2146": "Easy",
        "2147": "Easy",
        "2148": "Easy",
        "2149": "Easy",
        "2150": "Easy",
        "2151": "Easy",
        "2152": "Easy",
        "2153": "Easy",
        "2154": "Easy",
        "2155": "Easy",
        "2156": "Easy",
        "2157": "Easy",
        "2158": "Medium",
        "2159": "Hard",
        "2160": "Easy",
        "2161": "Easy",
        "2162": "Medium",
        "2163": "Hard",
        "2164": "Easy",
        "2165": "Medium",
        "2166": "Medium",
        "2167": "Medium",
        "2168": "Easy",
        "2169": "Medium",
        "2170": "Hard",
        "2171": "Easy",
        "2172": "Medium",
        "2173": "Medium",
        "2174": "Hard",
        "2175": "Medium",
        "2176": "Hard",
        "2177": "Easy",
        "2178": "Medium",
        "2179": "Medium",
        "2180": "Hard",
        "2181": "Easy",
        "2182": "Medium",
        "2183": "Medium",
        "2184": "Hard",
        "2185": "Easy",
        "2186": "Medium",
        "2187": "Medium",
        "2188": "Hard",
        "2189": "Easy",
        "2190": "Medium",
        "2191": "Medium",
        "2192": "Hard",
        "2193": "Easy",
        "2194": "Medium",
        "2195": "Medium",
        "2196": "Hard",
        "2197": "Easy",
        "2198": "Medium",
        "2199": "Medium",
        "2200": "Hard",
        "2201": "Easy",
        "2202": "Medium",
        "2203": "Hard",
        "2204": "Hard",
        "2205": "Easy",
        "2206": "Medium",
        "2207": "Medium",
        "2208": "Hard",
        "2209": "Easy",
        "2210": "Medium",
        "2211": "Medium",
        "2212": "Hard",
        "2213": "Easy",
        "2214": "Medium",
        "2215": "Medium",
        "2216": "Easy",
        "2217": "Medium",
        "2218": "Hard",
        "2219": "Hard",
        "2220": "Medium",
        "2221": "Medium",
        "2222": "Hard",
        "2223": "Easy",
        "2224": "Medium",
        "2225": "Medium",
        "2226": "Hard",
        "2227": "Medium",
        "2228": "Medium",
        "2229": "Hard",
        "2230": "Easy",
        "2231": "Medium",
        "2232": "Medium",
        "2233": "Hard",
        "2234": "Easy",
        "2235": "Medium",
        "2236": "Medium",
        "2237": "Hard",
        "2238": "Easy",
        "2239": "Medium",
        "2240": "Medium",
        "2241": "Hard",
        "2242": "Easy",
        "2243": "Medium",
        "2244": "Medium",
        "2245": "Hard",
        "2246": "Easy",
        "2247": "Medium",
        "2248": "Hard",
        "2249": "Easy",
        "2250": "Medium",
        "2251": "Medium",
        "2252": "Hard",
        "2253": "Easy",
        "2254": "Medium",
        "2255": "Medium",
        "2256": "Easy",
        "2257": "Medium",
        "2258": "Medium",
        "2259": "Easy",
        "2260": "Medium",
        "2261": "Medium",
        "2262": "Hard",
        "2263": "Easy",
        "2264": "Medium",
        "2265": "Medium",
        "2266": "Easy",
        "2267": "Medium",
        "2268": "Medium",
        "2269": "Hard",
        "2270": "Easy",
        "2271": "Medium",
        "2272": "Medium",
        "2273": "Hard",
        "2274": "Easy",
        "2275": "Hard",
        "2276": "Easy",
        "2277": "Medium",
        "2278": "Hard",
        "2279": "Easy",
        "2280": "Medium",
        "2281": "Medium",
        "2282": "Hard",
        "2283": "Easy",
        "2284": "Medium",
        "2285": "Medium",
        "2286": "Hard",
        "2287": "Easy",
        "2288": "Medium",
        "2289": "Medium",
        "2290": "Hard",
        "2291": "Easy",
        "2292": "Medium",
        "2293": "Medium",
        "2294": "Hard",
        "2295": "Easy",
        "2296": "Medium",
        "2297": "Medium",
        "2298": "Hard",
        "2299": "Easy",
        "2300": "Medium",
        "2301": "Medium",
        "2302": "Hard",
        "2303": "Easy",
        "2304": "Medium",
        "2305": "Medium",
        "2306": "Hard",
        "2307": "Easy",
        "2308": "Medium",
        "2309": "Hard",
        "2310": "Hard",
        "2311": "Easy",
        "2312": "Medium",
        "2313": "Medium",
        "2314": "Hard",
        "2315": "Easy",
        "2316": "Medium",
        "2317": "Medium",
        "2318": "Hard",
        "2319": "Easy",
        "2320": "Medium",
        "2321": "Medium",
        "2322": "Hard",
        "2323": "Easy",
        "2324": "Medium",
        "2325": "Medium",
        "2326": "Hard",
        "2327": "Easy",
        "2328": "Medium",
        "2329": "Medium",
        "2330": "Hard",
        "2331": "Easy",
        "2332": "Medium",
        "2333": "Hard",
        "2334": "Easy",
        "2335": "Medium",
        "2336": "Medium",
        "2337": "Hard",
        "2338": "Easy",
        "2339": "Medium",
        "2340": "Medium",
        "2341": "Hard",
        "2342": "Easy",
        "2343": "Medium",
        "2344": "Medium",
        "2345": "Hard",
        "2346": "Easy",
        "2347": "Medium",
        "2348": "Medium",
        "2349": "Easy",
        "2350": "Medium",
        "2351": "Medium",
        "2352": "Hard",
        "2353": "Easy",
        "2354": "Medium",
        "2355": "Medium",
        "2356": "Hard",
        "2357": "Easy",
        "2358": "Medium",
        "2359": "Medium",
        "2360": "Hard",
        "2361": "Easy",
        "2362": "Medium",
        "2363": "Medium",
        "2364": "Hard",
        "2365": "Easy",
        "2366": "Medium",
        "2367": "Medium",
        "2368": "Hard",
        "2369": "Easy",
        "2370": "Medium",
        "2371": "Easy",
        "2372": "Medium",
        "2373": "Medium",
        "2374": "Hard",
        "2375": "Easy",
        "2376": "Medium",
        "2377": "Medium",
        "2378": "Hard",
        "2379": "Easy",
        "2380": "Medium",
        "2381": "Medium",
        "2382": "Hard",
        "2383": "Medium",
        "2384": "Easy",
        "2385": "Medium",
        "2386": "Easy",
        "2387": "Medium",
        "2388": "Medium",
        "2389": "Hard",
        "2390": "Easy",
        "2391": "Medium",
        "2392": "Medium",
        "2393": "Hard",
        "2394": "Easy",
        "2395": "Medium",
        "2396": "Medium",
        "2397": "Hard",
        "2398": "Easy",
        "2399": "Medium",
        "2400": "Hard",
        "2401": "Hard",
        "2402": "Easy",
        "2403": "Medium",
        "2404": "Hard",
        "2405": "Hard",
        "2406": "Medium",
        "2407": "Medium",
        "2408": "Hard",
        "2409": "Hard",
        "2410": "Easy",
        "2411": "Medium",
        "2412": "Hard",
        "2413": "Hard",
        "2414": "Easy",
        "2415": "Medium",
        "2416": "Hard",
        "2417": "Hard",
        "2418": "Easy",
        "2419": "Medium",
        "2420": "Hard",
        "2421": "Hard",
        "2422": "Easy",
        "2423": "Medium",
        "2424": "Hard",
        "2425": "Hard",
        "2426": "Easy"
    },
    "link": {
        "0": "https://leetcode.com/problems/minimum-string-length-after-removing-substrings/?envType=daily-question&envId=2024-10-07",
        "1": "https://leetcode.com/problems/two-sum",
        "2": "https://leetcode.com/problems/add-two-numbers",
        "3": "https://leetcode.com/problems/median-of-two-sorted-arrays",
        "4": "https://leetcode.com/problems/zigzag-conversion",
        "5": "https://leetcode.com/problems/reverse-integer",
        "6": "https://leetcode.com/problems/palindrome-number",
        "7": "https://leetcode.com/problems/regular-expression-matching",
        "8": "https://leetcode.com/problems/container-with-most-water",
        "9": "https://leetcode.com/problems/integer-to-roman",
        "10": "https://leetcode.com/problems/roman-to-integer",
        "11": "https://leetcode.com/problems/longest-common-prefix",
        "12": "https://leetcode.com/problems/3sum",
        "13": "https://leetcode.com/problems/3sum-closest",
        "14": "https://leetcode.com/problems/letter-combinations-of-a-phone-number",
        "15": "https://leetcode.com/problems/4sum",
        "16": "https://leetcode.com/problems/remove-nth-node-from-end-of-list",
        "17": "https://leetcode.com/problems/valid-parentheses",
        "18": "https://leetcode.com/problems/merge-two-sorted-lists",
        "19": "https://leetcode.com/problems/generate-parentheses",
        "20": "https://leetcode.com/problems/merge-k-sorted-lists",
        "21": "https://leetcode.com/problems/swap-nodes-in-pairs",
        "22": "https://leetcode.com/problems/reverse-nodes-in-k-group",
        "23": "https://leetcode.com/problems/remove-duplicates-from-sorted-array",
        "24": "https://leetcode.com/problems/remove-element",
        "25": "https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string",
        "26": "https://leetcode.com/problems/divide-two-integers",
        "27": "https://leetcode.com/problems/substring-with-concatenation-of-all-words",
        "28": "https://leetcode.com/problems/next-permutation",
        "29": "https://leetcode.com/problems/longest-valid-parentheses",
        "30": "https://leetcode.com/problems/search-in-rotated-sorted-array",
        "31": "https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array",
        "32": "https://leetcode.com/problems/search-insert-position",
        "33": "https://leetcode.com/problems/valid-sudoku",
        "34": "https://leetcode.com/problems/sudoku-solver",
        "35": "https://leetcode.com/problems/count-and-say",
        "36": "https://leetcode.com/problems/combination-sum",
        "37": "https://leetcode.com/problems/combination-sum-ii",
        "38": "https://leetcode.com/problems/first-missing-positive",
        "39": "https://leetcode.com/problems/trapping-rain-water",
        "40": "https://leetcode.com/problems/multiply-strings",
        "41": "https://leetcode.com/problems/wildcard-matching",
        "42": "https://leetcode.com/problems/jump-game-ii",
        "43": "https://leetcode.com/problems/permutations",
        "44": "https://leetcode.com/problems/permutations-ii",
        "45": "https://leetcode.com/problems/rotate-image",
        "46": "https://leetcode.com/problems/group-anagrams",
        "47": "https://leetcode.com/problems/powx-n",
        "48": "https://leetcode.com/problems/n-queens",
        "49": "https://leetcode.com/problems/n-queens-ii",
        "50": "https://leetcode.com/problems/maximum-subarray",
        "51": "https://leetcode.com/problems/spiral-matrix",
        "52": "https://leetcode.com/problems/jump-game",
        "53": "https://leetcode.com/problems/merge-intervals",
        "54": "https://leetcode.com/problems/insert-interval",
        "55": "https://leetcode.com/problems/length-of-last-word",
        "56": "https://leetcode.com/problems/permutation-sequence",
        "57": "https://leetcode.com/problems/rotate-list",
        "58": "https://leetcode.com/problems/unique-paths",
        "59": "https://leetcode.com/problems/unique-paths-ii",
        "60": "https://leetcode.com/problems/minimum-path-sum",
        "61": "https://leetcode.com/problems/valid-number",
        "62": "https://leetcode.com/problems/add-binary",
        "63": "https://leetcode.com/problems/text-justification",
        "64": "https://leetcode.com/problems/sqrtx",
        "65": "https://leetcode.com/problems/climbing-stairs",
        "66": "https://leetcode.com/problems/simplify-path",
        "67": "https://leetcode.com/problems/edit-distance",
        "68": "https://leetcode.com/problems/search-a-2d-matrix",
        "69": "https://leetcode.com/problems/sort-colors",
        "70": "https://leetcode.com/problems/minimum-window-substring",
        "71": "https://leetcode.com/problems/combinations",
        "72": "https://leetcode.com/problems/subsets",
        "73": "https://leetcode.com/problems/word-search",
        "74": "https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii",
        "75": "https://leetcode.com/problems/search-in-rotated-sorted-array-ii",
        "76": "https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii",
        "77": "https://leetcode.com/problems/remove-duplicates-from-sorted-list",
        "78": "https://leetcode.com/problems/largest-rectangle-in-histogram",
        "79": "https://leetcode.com/problems/maximal-rectangle",
        "80": "https://leetcode.com/problems/partition-list",
        "81": "https://leetcode.com/problems/scramble-string",
        "82": "https://leetcode.com/problems/merge-sorted-array",
        "83": "https://leetcode.com/problems/gray-code",
        "84": "https://leetcode.com/problems/subsets-ii",
        "85": "https://leetcode.com/problems/decode-ways",
        "86": "https://leetcode.com/problems/reverse-linked-list-ii",
        "87": "https://leetcode.com/problems/binary-tree-inorder-traversal",
        "88": "https://leetcode.com/problems/unique-binary-search-trees-ii",
        "89": "https://leetcode.com/problems/unique-binary-search-trees",
        "90": "https://leetcode.com/problems/interleaving-string",
        "91": "https://leetcode.com/problems/validate-binary-search-tree",
        "92": "https://leetcode.com/problems/recover-binary-search-tree",
        "93": "https://leetcode.com/problems/same-tree",
        "94": "https://leetcode.com/problems/binary-tree-level-order-traversal",
        "95": "https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal",
        "96": "https://leetcode.com/problems/maximum-depth-of-binary-tree",
        "97": "https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal",
        "98": "https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal",
        "99": "https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree",
        "100": "https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree",
        "101": "https://leetcode.com/problems/balanced-binary-tree",
        "102": "https://leetcode.com/problems/minimum-depth-of-binary-tree",
        "103": "https://leetcode.com/problems/path-sum",
        "104": "https://leetcode.com/problems/path-sum-ii",
        "105": "https://leetcode.com/problems/flatten-binary-tree-to-linked-list",
        "106": "https://leetcode.com/problems/distinct-subsequences",
        "107": "https://leetcode.com/problems/populating-next-right-pointers-in-each-node",
        "108": "https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii",
        "109": "https://leetcode.com/problems/pascals-triangle",
        "110": "https://leetcode.com/problems/pascals-triangle-ii",
        "111": "https://leetcode.com/problems/triangle",
        "112": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock",
        "113": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii",
        "114": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii",
        "115": "https://leetcode.com/problems/binary-tree-maximum-path-sum",
        "116": "https://leetcode.com/problems/valid-palindrome",
        "117": "https://leetcode.com/problems/word-ladder-ii",
        "118": "https://leetcode.com/problems/word-ladder",
        "119": "https://leetcode.com/problems/longest-consecutive-sequence",
        "120": "https://leetcode.com/problems/sum-root-to-leaf-numbers",
        "121": "https://leetcode.com/problems/surrounded-regions",
        "122": "https://leetcode.com/problems/palindrome-partitioning",
        "123": "https://leetcode.com/problems/clone-graph",
        "124": "https://leetcode.com/problems/gas-station",
        "125": "https://leetcode.com/problems/candy",
        "126": "https://leetcode.com/problems/single-number",
        "127": "https://leetcode.com/problems/single-number-ii",
        "128": "https://leetcode.com/problems/copy-list-with-random-pointer",
        "129": "https://leetcode.com/problems/word-break",
        "130": "https://leetcode.com/problems/word-break-ii",
        "131": "https://leetcode.com/problems/linked-list-cycle",
        "132": "https://leetcode.com/problems/linked-list-cycle-ii",
        "133": "https://leetcode.com/problems/reorder-list",
        "134": "https://leetcode.com/problems/binary-tree-preorder-traversal",
        "135": "https://leetcode.com/problems/binary-tree-postorder-traversal",
        "136": "https://leetcode.com/problems/lru-cache",
        "137": "https://leetcode.com/problems/insertion-sort-list",
        "138": "https://leetcode.com/problems/sort-list",
        "139": "https://leetcode.com/problems/max-points-on-a-line",
        "140": "https://leetcode.com/problems/evaluate-reverse-polish-notation",
        "141": "https://leetcode.com/problems/reverse-words-in-a-string",
        "142": "https://leetcode.com/problems/maximum-product-subarray",
        "143": "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array",
        "144": "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii",
        "145": "https://leetcode.com/problems/min-stack",
        "146": "https://leetcode.com/problems/intersection-of-two-linked-lists",
        "147": "https://leetcode.com/problems/find-peak-element",
        "148": "https://leetcode.com/problems/maximum-gap",
        "149": "https://leetcode.com/problems/fraction-to-recurring-decimal",
        "150": "https://leetcode.com/problems/two-sum-ii-input-array-is-sorted",
        "151": "https://leetcode.com/problems/excel-sheet-column-title",
        "152": "https://leetcode.com/problems/majority-element",
        "153": "https://leetcode.com/problems/excel-sheet-column-number",
        "154": "https://leetcode.com/problems/factorial-trailing-zeroes",
        "155": "https://leetcode.com/problems/dungeon-game",
        "156": "https://leetcode.com/problems/combine-two-tables",
        "157": "https://leetcode.com/problems/second-highest-salary",
        "158": "https://leetcode.com/problems/nth-highest-salary",
        "159": "https://leetcode.com/problems/rank-scores",
        "160": "https://leetcode.com/problems/largest-number",
        "161": "https://leetcode.com/problems/consecutive-numbers",
        "162": "https://leetcode.com/problems/employees-earning-more-than-their-managers",
        "163": "https://leetcode.com/problems/duplicate-emails",
        "164": "https://leetcode.com/problems/customers-who-never-order",
        "165": "https://leetcode.com/problems/department-highest-salary",
        "166": "https://leetcode.com/problems/department-top-three-salaries",
        "167": "https://leetcode.com/problems/repeated-dna-sequences",
        "168": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv",
        "169": "https://leetcode.com/problems/rotate-array",
        "170": "https://leetcode.com/problems/number-of-1-bits",
        "171": "https://leetcode.com/problems/word-frequency",
        "172": "https://leetcode.com/problems/valid-phone-numbers",
        "173": "https://leetcode.com/problems/transpose-file",
        "174": "https://leetcode.com/problems/tenth-line",
        "175": "https://leetcode.com/problems/delete-duplicate-emails",
        "176": "https://leetcode.com/problems/rising-temperature",
        "177": "https://leetcode.com/problems/house-robber",
        "178": "https://leetcode.com/problems/binary-tree-right-side-view",
        "179": "https://leetcode.com/problems/number-of-islands",
        "180": "https://leetcode.com/problems/bitwise-and-of-numbers-range",
        "181": "https://leetcode.com/problems/happy-number",
        "182": "https://leetcode.com/problems/remove-linked-list-elements",
        "183": "https://leetcode.com/problems/count-primes",
        "184": "https://leetcode.com/problems/isomorphic-strings",
        "185": "https://leetcode.com/problems/reverse-linked-list",
        "186": "https://leetcode.com/problems/course-schedule",
        "187": "https://leetcode.com/problems/implement-trie-prefix-tree",
        "188": "https://leetcode.com/problems/minimum-size-subarray-sum",
        "189": "https://leetcode.com/problems/course-schedule-ii",
        "190": "https://leetcode.com/problems/design-add-and-search-words-data-structure",
        "191": "https://leetcode.com/problems/word-search-ii",
        "192": "https://leetcode.com/problems/house-robber-ii",
        "193": "https://leetcode.com/problems/shortest-palindrome",
        "194": "https://leetcode.com/problems/kth-largest-element-in-an-array",
        "195": "https://leetcode.com/problems/combination-sum-iii",
        "196": "https://leetcode.com/problems/contains-duplicate",
        "197": "https://leetcode.com/problems/the-skyline-problem",
        "198": "https://leetcode.com/problems/contains-duplicate-ii",
        "199": "https://leetcode.com/problems/contains-duplicate-iii",
        "200": "https://leetcode.com/problems/maximal-square",
        "201": "https://leetcode.com/problems/count-complete-tree-nodes",
        "202": "https://leetcode.com/problems/implement-stack-using-queues",
        "203": "https://leetcode.com/problems/invert-binary-tree",
        "204": "https://leetcode.com/problems/basic-calculator-ii",
        "205": "https://leetcode.com/problems/summary-ranges",
        "206": "https://leetcode.com/problems/majority-element-ii",
        "207": "https://leetcode.com/problems/kth-smallest-element-in-a-bst",
        "208": "https://leetcode.com/problems/power-of-two",
        "209": "https://leetcode.com/problems/implement-queue-using-stacks",
        "210": "https://leetcode.com/problems/number-of-digit-one",
        "211": "https://leetcode.com/problems/palindrome-linked-list",
        "212": "https://leetcode.com/problems/product-of-array-except-self",
        "213": "https://leetcode.com/problems/search-a-2d-matrix-ii",
        "214": "https://leetcode.com/problems/different-ways-to-add-parentheses",
        "215": "https://leetcode.com/problems/valid-anagram",
        "216": "https://leetcode.com/problems/binary-tree-paths",
        "217": "https://leetcode.com/problems/add-digits",
        "218": "https://leetcode.com/problems/single-number-iii",
        "219": "https://leetcode.com/problems/trips-and-users",
        "220": "https://leetcode.com/problems/ugly-number-ii",
        "221": "https://leetcode.com/problems/missing-number",
        "222": "https://leetcode.com/problems/integer-to-english-words",
        "223": "https://leetcode.com/problems/h-index",
        "224": "https://leetcode.com/problems/h-index-ii",
        "225": "https://leetcode.com/problems/first-bad-version",
        "226": "https://leetcode.com/problems/perfect-squares",
        "227": "https://leetcode.com/problems/expression-add-operators",
        "228": "https://leetcode.com/problems/move-zeroes",
        "229": "https://leetcode.com/problems/peeking-iterator",
        "230": "https://leetcode.com/problems/find-the-duplicate-number",
        "231": "https://leetcode.com/problems/game-of-life",
        "232": "https://leetcode.com/problems/word-pattern",
        "233": "https://leetcode.com/problems/nim-game",
        "234": "https://leetcode.com/problems/find-median-from-data-stream",
        "235": "https://leetcode.com/problems/serialize-and-deserialize-binary-tree",
        "236": "https://leetcode.com/problems/bulls-and-cows",
        "237": "https://leetcode.com/problems/longest-increasing-subsequence",
        "238": "https://leetcode.com/problems/remove-invalid-parentheses",
        "239": "https://leetcode.com/problems/range-sum-query-2d-immutable",
        "240": "https://leetcode.com/problems/additive-number",
        "241": "https://leetcode.com/problems/range-sum-query-mutable",
        "242": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown",
        "243": "https://leetcode.com/problems/minimum-height-trees",
        "244": "https://leetcode.com/problems/burst-balloons",
        "245": "https://leetcode.com/problems/count-of-smaller-numbers-after-self",
        "246": "https://leetcode.com/problems/remove-duplicate-letters",
        "247": "https://leetcode.com/problems/maximum-product-of-word-lengths",
        "248": "https://leetcode.com/problems/bulb-switcher",
        "249": "https://leetcode.com/problems/create-maximum-number",
        "250": "https://leetcode.com/problems/coin-change",
        "251": "https://leetcode.com/problems/wiggle-sort-ii",
        "252": "https://leetcode.com/problems/power-of-three",
        "253": "https://leetcode.com/problems/count-of-range-sum",
        "254": "https://leetcode.com/problems/odd-even-linked-list",
        "255": "https://leetcode.com/problems/longest-increasing-path-in-a-matrix",
        "256": "https://leetcode.com/problems/patching-array",
        "257": "https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree",
        "258": "https://leetcode.com/problems/reconstruct-itinerary",
        "259": "https://leetcode.com/problems/increasing-triplet-subsequence",
        "260": "https://leetcode.com/problems/self-crossing",
        "261": "https://leetcode.com/problems/palindrome-pairs",
        "262": "https://leetcode.com/problems/house-robber-iii",
        "263": "https://leetcode.com/problems/counting-bits",
        "264": "https://leetcode.com/problems/flatten-nested-list-iterator",
        "265": "https://leetcode.com/problems/power-of-four",
        "266": "https://leetcode.com/problems/integer-break",
        "267": "https://leetcode.com/problems/reverse-string",
        "268": "https://leetcode.com/problems/reverse-vowels-of-a-string",
        "269": "https://leetcode.com/problems/intersection-of-two-arrays",
        "270": "https://leetcode.com/problems/intersection-of-two-arrays-ii",
        "271": "https://leetcode.com/problems/data-stream-as-disjoint-intervals",
        "272": "https://leetcode.com/problems/russian-doll-envelopes",
        "273": "https://leetcode.com/problems/design-twitter",
        "274": "https://leetcode.com/problems/count-numbers-with-unique-digits",
        "275": "https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k",
        "276": "https://leetcode.com/problems/water-and-jug-problem",
        "277": "https://leetcode.com/problems/valid-perfect-square",
        "278": "https://leetcode.com/problems/largest-divisible-subset",
        "279": "https://leetcode.com/problems/sum-of-two-integers",
        "280": "https://leetcode.com/problems/super-pow",
        "281": "https://leetcode.com/problems/find-k-pairs-with-smallest-sums",
        "282": "https://leetcode.com/problems/guess-number-higher-or-lower",
        "283": "https://leetcode.com/problems/guess-number-higher-or-lower-ii",
        "284": "https://leetcode.com/problems/wiggle-subsequence",
        "285": "https://leetcode.com/problems/combination-sum-iv",
        "286": "https://leetcode.com/problems/insert-delete-getrandom-o1",
        "287": "https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed",
        "288": "https://leetcode.com/problems/linked-list-random-node",
        "289": "https://leetcode.com/problems/ransom-note",
        "290": "https://leetcode.com/problems/shuffle-an-array",
        "291": "https://leetcode.com/problems/mini-parser",
        "292": "https://leetcode.com/problems/lexicographical-numbers",
        "293": "https://leetcode.com/problems/first-unique-character-in-a-string",
        "294": "https://leetcode.com/problems/longest-absolute-file-path",
        "295": "https://leetcode.com/problems/find-the-difference",
        "296": "https://leetcode.com/problems/elimination-game",
        "297": "https://leetcode.com/problems/perfect-rectangle",
        "298": "https://leetcode.com/problems/is-subsequence",
        "299": "https://leetcode.com/problems/decode-string",
        "300": "https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters",
        "301": "https://leetcode.com/problems/rotate-function",
        "302": "https://leetcode.com/problems/integer-replacement",
        "303": "https://leetcode.com/problems/random-pick-index",
        "304": "https://leetcode.com/problems/evaluate-division",
        "305": "https://leetcode.com/problems/nth-digit",
        "306": "https://leetcode.com/problems/binary-watch",
        "307": "https://leetcode.com/problems/frog-jump",
        "308": "https://leetcode.com/problems/sum-of-left-leaves",
        "309": "https://leetcode.com/problems/convert-a-number-to-hexadecimal",
        "310": "https://leetcode.com/problems/queue-reconstruction-by-height",
        "311": "https://leetcode.com/problems/trapping-rain-water-ii",
        "312": "https://leetcode.com/problems/longest-palindrome",
        "313": "https://leetcode.com/problems/split-array-largest-sum",
        "314": "https://leetcode.com/problems/fizz-buzz",
        "315": "https://leetcode.com/problems/arithmetic-slices",
        "316": "https://leetcode.com/problems/third-maximum-number",
        "317": "https://leetcode.com/problems/add-strings",
        "318": "https://leetcode.com/problems/partition-equal-subset-sum",
        "319": "https://leetcode.com/problems/pacific-atlantic-water-flow",
        "320": "https://leetcode.com/problems/battleships-in-a-board",
        "321": "https://leetcode.com/problems/reconstruct-original-digits-from-english",
        "322": "https://leetcode.com/problems/longest-repeating-character-replacement",
        "323": "https://leetcode.com/problems/construct-quad-tree",
        "324": "https://leetcode.com/problems/n-ary-tree-level-order-traversal",
        "325": "https://leetcode.com/problems/all-oone-data-structure",
        "326": "https://leetcode.com/problems/minimum-genetic-mutation",
        "327": "https://leetcode.com/problems/number-of-segments-in-a-string",
        "328": "https://leetcode.com/problems/non-overlapping-intervals",
        "329": "https://leetcode.com/problems/find-right-interval",
        "330": "https://leetcode.com/problems/path-sum-iii",
        "331": "https://leetcode.com/problems/find-all-anagrams-in-a-string",
        "332": "https://leetcode.com/problems/k-th-smallest-in-lexicographical-order",
        "333": "https://leetcode.com/problems/arranging-coins",
        "334": "https://leetcode.com/problems/find-all-duplicates-in-an-array",
        "335": "https://leetcode.com/problems/string-compression",
        "336": "https://leetcode.com/problems/add-two-numbers-ii",
        "337": "https://leetcode.com/problems/arithmetic-slices-ii-subsequence",
        "338": "https://leetcode.com/problems/number-of-boomerangs",
        "339": "https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array",
        "340": "https://leetcode.com/problems/delete-node-in-a-bst",
        "341": "https://leetcode.com/problems/sort-characters-by-frequency",
        "342": "https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons",
        "343": "https://leetcode.com/problems/minimum-moves-to-equal-array-elements",
        "344": "https://leetcode.com/problems/4sum-ii",
        "345": "https://leetcode.com/problems/132-pattern",
        "346": "https://leetcode.com/problems/circular-array-loop",
        "347": "https://leetcode.com/problems/poor-pigs",
        "348": "https://leetcode.com/problems/repeated-substring-pattern",
        "349": "https://leetcode.com/problems/lfu-cache",
        "350": "https://leetcode.com/problems/hamming-distance",
        "351": "https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii",
        "352": "https://leetcode.com/problems/island-perimeter",
        "353": "https://leetcode.com/problems/can-i-win",
        "354": "https://leetcode.com/problems/count-the-repetitions",
        "355": "https://leetcode.com/problems/validate-ip-address",
        "356": "https://leetcode.com/problems/implement-rand10-using-rand7",
        "357": "https://leetcode.com/problems/concatenated-words",
        "358": "https://leetcode.com/problems/matchsticks-to-square",
        "359": "https://leetcode.com/problems/ones-and-zeroes",
        "360": "https://leetcode.com/problems/heaters",
        "361": "https://leetcode.com/problems/number-complement",
        "362": "https://leetcode.com/problems/total-hamming-distance",
        "363": "https://leetcode.com/problems/generate-random-point-in-a-circle",
        "364": "https://leetcode.com/problems/largest-palindrome-product",
        "365": "https://leetcode.com/problems/sliding-window-median",
        "366": "https://leetcode.com/problems/magical-string",
        "367": "https://leetcode.com/problems/license-key-formatting",
        "368": "https://leetcode.com/problems/smallest-good-base",
        "369": "https://leetcode.com/problems/max-consecutive-ones",
        "370": "https://leetcode.com/problems/predict-the-winner",
        "371": "https://leetcode.com/problems/zuma-game",
        "372": "https://leetcode.com/problems/non-decreasing-subsequences",
        "373": "https://leetcode.com/problems/construct-the-rectangle",
        "374": "https://leetcode.com/problems/reverse-pairs",
        "375": "https://leetcode.com/problems/target-sum",
        "376": "https://leetcode.com/problems/teemo-attacking",
        "377": "https://leetcode.com/problems/next-greater-element-i",
        "378": "https://leetcode.com/problems/random-point-in-non-overlapping-rectangles",
        "379": "https://leetcode.com/problems/diagonal-traverse",
        "380": "https://leetcode.com/problems/keyboard-row",
        "381": "https://leetcode.com/problems/ipo",
        "382": "https://leetcode.com/problems/next-greater-element-ii",
        "383": "https://leetcode.com/problems/base-7",
        "384": "https://leetcode.com/problems/relative-ranks",
        "385": "https://leetcode.com/problems/perfect-number",
        "386": "https://leetcode.com/problems/most-frequent-subtree-sum",
        "387": "https://leetcode.com/problems/fibonacci-number",
        "388": "https://leetcode.com/problems/game-play-analysis-i",
        "389": "https://leetcode.com/problems/find-bottom-left-tree-value",
        "390": "https://leetcode.com/problems/freedom-trail",
        "391": "https://leetcode.com/problems/find-largest-value-in-each-tree-row",
        "392": "https://leetcode.com/problems/longest-palindromic-subsequence",
        "393": "https://leetcode.com/problems/super-washing-machines",
        "394": "https://leetcode.com/problems/coin-change-ii",
        "395": "https://leetcode.com/problems/random-flip-matrix",
        "396": "https://leetcode.com/problems/detect-capital",
        "397": "https://leetcode.com/problems/longest-uncommon-subsequence-i",
        "398": "https://leetcode.com/problems/longest-uncommon-subsequence-ii",
        "399": "https://leetcode.com/problems/continuous-subarray-sum",
        "400": "https://leetcode.com/problems/longest-word-in-dictionary-through-deleting",
        "401": "https://leetcode.com/problems/contiguous-array",
        "402": "https://leetcode.com/problems/random-pick-with-weight",
        "403": "https://leetcode.com/problems/minesweeper",
        "404": "https://leetcode.com/problems/minimum-absolute-difference-in-bst",
        "405": "https://leetcode.com/problems/k-diff-pairs-in-an-array",
        "406": "https://leetcode.com/problems/encode-and-decode-tinyurl",
        "407": "https://leetcode.com/problems/complex-number-multiplication",
        "408": "https://leetcode.com/problems/convert-bst-to-greater-tree",
        "409": "https://leetcode.com/problems/minimum-time-difference",
        "410": "https://leetcode.com/problems/reverse-string-ii",
        "411": "https://leetcode.com/problems/01-matrix",
        "412": "https://leetcode.com/problems/diameter-of-binary-tree",
        "413": "https://leetcode.com/problems/remove-boxes",
        "414": "https://leetcode.com/problems/number-of-provinces",
        "415": "https://leetcode.com/problems/game-play-analysis-iv",
        "416": "https://leetcode.com/problems/student-attendance-record-i",
        "417": "https://leetcode.com/problems/student-attendance-record-ii",
        "418": "https://leetcode.com/problems/optimal-division",
        "419": "https://leetcode.com/problems/brick-wall",
        "420": "https://leetcode.com/problems/next-greater-element-iii",
        "421": "https://leetcode.com/problems/reverse-words-in-a-string-iii",
        "422": "https://leetcode.com/problems/logical-or-of-two-binary-grids-represented-as-quad-trees",
        "423": "https://leetcode.com/problems/maximum-depth-of-n-ary-tree",
        "424": "https://leetcode.com/problems/subarray-sum-equals-k",
        "425": "https://leetcode.com/problems/array-partition",
        "426": "https://leetcode.com/problems/binary-tree-tilt",
        "427": "https://leetcode.com/problems/find-the-closest-palindrome",
        "428": "https://leetcode.com/problems/reshape-the-matrix",
        "429": "https://leetcode.com/problems/permutation-in-string",
        "430": "https://leetcode.com/problems/managers-with-at-least-5-direct-reports",
        "431": "https://leetcode.com/problems/subtree-of-another-tree",
        "432": "https://leetcode.com/problems/distribute-candies",
        "433": "https://leetcode.com/problems/out-of-boundary-paths",
        "434": "https://leetcode.com/problems/employee-bonus",
        "435": "https://leetcode.com/problems/shortest-unsorted-continuous-subarray",
        "436": "https://leetcode.com/problems/delete-operation-for-two-strings",
        "437": "https://leetcode.com/problems/find-customer-referee",
        "438": "https://leetcode.com/problems/investments-in-2016",
        "439": "https://leetcode.com/problems/customer-placing-the-largest-number-of-orders",
        "440": "https://leetcode.com/problems/erect-the-fence",
        "441": "https://leetcode.com/problems/n-ary-tree-preorder-traversal",
        "442": "https://leetcode.com/problems/n-ary-tree-postorder-traversal",
        "443": "https://leetcode.com/problems/tag-validator",
        "444": "https://leetcode.com/problems/fraction-addition-and-subtraction",
        "445": "https://leetcode.com/problems/valid-square",
        "446": "https://leetcode.com/problems/longest-harmonious-subsequence",
        "447": "https://leetcode.com/problems/big-countries",
        "448": "https://leetcode.com/problems/classes-more-than-5-students",
        "449": "https://leetcode.com/problems/range-addition-ii",
        "450": "https://leetcode.com/problems/minimum-index-sum-of-two-lists",
        "451": "https://leetcode.com/problems/non-negative-integers-without-consecutive-ones",
        "452": "https://leetcode.com/problems/human-traffic-of-stadium",
        "453": "https://leetcode.com/problems/friend-requests-ii-who-has-the-most-friends",
        "454": "https://leetcode.com/problems/can-place-flowers",
        "455": "https://leetcode.com/problems/construct-string-from-binary-tree",
        "456": "https://leetcode.com/problems/sales-person",
        "457": "https://leetcode.com/problems/tree-node",
        "458": "https://leetcode.com/problems/find-duplicate-file-in-system",
        "459": "https://leetcode.com/problems/triangle-judgement",
        "460": "https://leetcode.com/problems/valid-triangle-number",
        "461": "https://leetcode.com/problems/merge-two-binary-trees",
        "462": "https://leetcode.com/problems/biggest-single-number",
        "463": "https://leetcode.com/problems/not-boring-movies",
        "464": "https://leetcode.com/problems/task-scheduler",
        "465": "https://leetcode.com/problems/design-circular-queue",
        "466": "https://leetcode.com/problems/add-one-row-to-tree",
        "467": "https://leetcode.com/problems/maximum-distance-in-arrays",
        "468": "https://leetcode.com/problems/exchange-seats",
        "469": "https://leetcode.com/problems/swap-salary",
        "470": "https://leetcode.com/problems/maximum-product-of-three-numbers",
        "471": "https://leetcode.com/problems/k-inverse-pairs-array",
        "472": "https://leetcode.com/problems/course-schedule-iii",
        "473": "https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists",
        "474": "https://leetcode.com/problems/sum-of-square-numbers",
        "475": "https://leetcode.com/problems/exclusive-time-of-functions",
        "476": "https://leetcode.com/problems/average-of-levels-in-binary-tree",
        "477": "https://leetcode.com/problems/shopping-offers",
        "478": "https://leetcode.com/problems/decode-ways-ii",
        "479": "https://leetcode.com/problems/solve-the-equation",
        "480": "https://leetcode.com/problems/design-circular-deque",
        "481": "https://leetcode.com/problems/maximum-average-subarray-i",
        "482": "https://leetcode.com/problems/set-mismatch",
        "483": "https://leetcode.com/problems/maximum-length-of-pair-chain",
        "484": "https://leetcode.com/problems/palindromic-substrings",
        "485": "https://leetcode.com/problems/replace-words",
        "486": "https://leetcode.com/problems/dota2-senate",
        "487": "https://leetcode.com/problems/2-keys-keyboard",
        "488": "https://leetcode.com/problems/two-sum-iv-input-is-a-bst",
        "489": "https://leetcode.com/problems/maximum-binary-tree",
        "490": "https://leetcode.com/problems/print-binary-tree",
        "491": "https://leetcode.com/problems/robot-return-to-origin",
        "492": "https://leetcode.com/problems/find-k-closest-elements",
        "493": "https://leetcode.com/problems/split-array-into-consecutive-subsequences",
        "494": "https://leetcode.com/problems/image-smoother",
        "495": "https://leetcode.com/problems/maximum-width-of-binary-tree",
        "496": "https://leetcode.com/problems/strange-printer",
        "497": "https://leetcode.com/problems/non-decreasing-array",
        "498": "https://leetcode.com/problems/beautiful-arrangement-ii",
        "499": "https://leetcode.com/problems/kth-smallest-number-in-multiplication-table",
        "500": "https://leetcode.com/problems/trim-a-binary-search-tree",
        "501": "https://leetcode.com/problems/second-minimum-node-in-a-binary-tree",
        "502": "https://leetcode.com/problems/bulb-switcher-ii",
        "503": "https://leetcode.com/problems/number-of-longest-increasing-subsequence",
        "504": "https://leetcode.com/problems/longest-continuous-increasing-subsequence",
        "505": "https://leetcode.com/problems/cut-off-trees-for-golf-event",
        "506": "https://leetcode.com/problems/implement-magic-dictionary",
        "507": "https://leetcode.com/problems/map-sum-pairs",
        "508": "https://leetcode.com/problems/24-game",
        "509": "https://leetcode.com/problems/valid-palindrome-ii",
        "510": "https://leetcode.com/problems/baseball-game",
        "511": "https://leetcode.com/problems/redundant-connection",
        "512": "https://leetcode.com/problems/redundant-connection-ii",
        "513": "https://leetcode.com/problems/repeated-string-match",
        "514": "https://leetcode.com/problems/longest-univalue-path",
        "515": "https://leetcode.com/problems/knight-probability-in-chessboard",
        "516": "https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays",
        "517": "https://leetcode.com/problems/employee-importance",
        "518": "https://leetcode.com/problems/stickers-to-spell-word",
        "519": "https://leetcode.com/problems/binary-number-with-alternating-bits",
        "520": "https://leetcode.com/problems/max-area-of-island",
        "521": "https://leetcode.com/problems/count-binary-substrings",
        "522": "https://leetcode.com/problems/degree-of-an-array",
        "523": "https://leetcode.com/problems/partition-to-k-equal-sum-subsets",
        "524": "https://leetcode.com/problems/falling-squares",
        "525": "https://leetcode.com/problems/search-in-a-binary-search-tree",
        "526": "https://leetcode.com/problems/insert-into-a-binary-search-tree",
        "527": "https://leetcode.com/problems/kth-largest-element-in-a-stream",
        "528": "https://leetcode.com/problems/binary-search",
        "529": "https://leetcode.com/problems/design-hashset",
        "530": "https://leetcode.com/problems/design-hashmap",
        "531": "https://leetcode.com/problems/design-linked-list",
        "532": "https://leetcode.com/problems/to-lower-case",
        "533": "https://leetcode.com/problems/random-pick-with-blacklist",
        "534": "https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings",
        "535": "https://leetcode.com/problems/subarray-product-less-than-k",
        "536": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee",
        "537": "https://leetcode.com/problems/range-module",
        "538": "https://leetcode.com/problems/1-bit-and-2-bit-characters",
        "539": "https://leetcode.com/problems/maximum-length-of-repeated-subarray",
        "540": "https://leetcode.com/problems/find-k-th-smallest-pair-distance",
        "541": "https://leetcode.com/problems/longest-word-in-dictionary",
        "542": "https://leetcode.com/problems/accounts-merge",
        "543": "https://leetcode.com/problems/remove-comments",
        "544": "https://leetcode.com/problems/find-pivot-index",
        "545": "https://leetcode.com/problems/split-linked-list-in-parts",
        "546": "https://leetcode.com/problems/number-of-atoms",
        "547": "https://leetcode.com/problems/self-dividing-numbers",
        "548": "https://leetcode.com/problems/my-calendar-i",
        "549": "https://leetcode.com/problems/count-different-palindromic-subsequences",
        "550": "https://leetcode.com/problems/my-calendar-ii",
        "551": "https://leetcode.com/problems/flood-fill",
        "552": "https://leetcode.com/problems/asteroid-collision",
        "553": "https://leetcode.com/problems/parse-lisp-expression",
        "554": "https://leetcode.com/problems/monotone-increasing-digits",
        "555": "https://leetcode.com/problems/daily-temperatures",
        "556": "https://leetcode.com/problems/delete-and-earn",
        "557": "https://leetcode.com/problems/cherry-pickup",
        "558": "https://leetcode.com/problems/network-delay-time",
        "559": "https://leetcode.com/problems/find-smallest-letter-greater-than-target",
        "560": "https://leetcode.com/problems/largest-number-at-least-twice-of-others",
        "561": "https://leetcode.com/problems/shortest-completing-word",
        "562": "https://leetcode.com/problems/contain-virus",
        "563": "https://leetcode.com/problems/open-the-lock",
        "564": "https://leetcode.com/problems/cracking-the-safe",
        "565": "https://leetcode.com/problems/reach-a-number",
        "566": "https://leetcode.com/problems/pyramid-transition-matrix",
        "567": "https://leetcode.com/problems/set-intersection-size-at-least-two",
        "568": "https://leetcode.com/problems/special-binary-string",
        "569": "https://leetcode.com/problems/partition-labels",
        "570": "https://leetcode.com/problems/largest-plus-sign",
        "571": "https://leetcode.com/problems/couples-holding-hands",
        "572": "https://leetcode.com/problems/toeplitz-matrix",
        "573": "https://leetcode.com/problems/reorganize-string",
        "574": "https://leetcode.com/problems/max-chunks-to-make-sorted-ii",
        "575": "https://leetcode.com/problems/max-chunks-to-make-sorted",
        "576": "https://leetcode.com/problems/basic-calculator-iv",
        "577": "https://leetcode.com/problems/jewels-and-stones",
        "578": "https://leetcode.com/problems/sliding-puzzle",
        "579": "https://leetcode.com/problems/global-and-local-inversions",
        "580": "https://leetcode.com/problems/swap-adjacent-in-lr-string",
        "581": "https://leetcode.com/problems/swim-in-rising-water",
        "582": "https://leetcode.com/problems/k-th-symbol-in-grammar",
        "583": "https://leetcode.com/problems/reaching-points",
        "584": "https://leetcode.com/problems/rabbits-in-forest",
        "585": "https://leetcode.com/problems/transform-to-chessboard",
        "586": "https://leetcode.com/problems/minimum-distance-between-bst-nodes",
        "587": "https://leetcode.com/problems/letter-case-permutation",
        "588": "https://leetcode.com/problems/is-graph-bipartite",
        "589": "https://leetcode.com/problems/k-th-smallest-prime-fraction",
        "590": "https://leetcode.com/problems/cheapest-flights-within-k-stops",
        "591": "https://leetcode.com/problems/rotated-digits",
        "592": "https://leetcode.com/problems/escape-the-ghosts",
        "593": "https://leetcode.com/problems/domino-and-tromino-tiling",
        "594": "https://leetcode.com/problems/custom-sort-string",
        "595": "https://leetcode.com/problems/number-of-matching-subsequences",
        "596": "https://leetcode.com/problems/preimage-size-of-factorial-zeroes-function",
        "597": "https://leetcode.com/problems/valid-tic-tac-toe-state",
        "598": "https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum",
        "599": "https://leetcode.com/problems/rotate-string",
        "600": "https://leetcode.com/problems/all-paths-from-source-to-target",
        "601": "https://leetcode.com/problems/smallest-rotation-with-highest-score",
        "602": "https://leetcode.com/problems/champagne-tower",
        "603": "https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing",
        "604": "https://leetcode.com/problems/find-eventual-safe-states",
        "605": "https://leetcode.com/problems/bricks-falling-when-hit",
        "606": "https://leetcode.com/problems/unique-morse-code-words",
        "607": "https://leetcode.com/problems/number-of-lines-to-write-string",
        "608": "https://leetcode.com/problems/max-increase-to-keep-city-skyline",
        "609": "https://leetcode.com/problems/soup-servings",
        "610": "https://leetcode.com/problems/expressive-words",
        "611": "https://leetcode.com/problems/chalkboard-xor-game",
        "612": "https://leetcode.com/problems/subdomain-visit-count",
        "613": "https://leetcode.com/problems/largest-triangle-area",
        "614": "https://leetcode.com/problems/largest-sum-of-averages",
        "615": "https://leetcode.com/problems/binary-tree-pruning",
        "616": "https://leetcode.com/problems/bus-routes",
        "617": "https://leetcode.com/problems/ambiguous-coordinates",
        "618": "https://leetcode.com/problems/linked-list-components",
        "619": "https://leetcode.com/problems/race-car",
        "620": "https://leetcode.com/problems/most-common-word",
        "621": "https://leetcode.com/problems/short-encoding-of-words",
        "622": "https://leetcode.com/problems/shortest-distance-to-a-character",
        "623": "https://leetcode.com/problems/card-flipping-game",
        "624": "https://leetcode.com/problems/binary-trees-with-factors",
        "625": "https://leetcode.com/problems/goat-latin",
        "626": "https://leetcode.com/problems/friends-of-appropriate-ages",
        "627": "https://leetcode.com/problems/making-a-large-island",
        "628": "https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string",
        "629": "https://leetcode.com/problems/consecutive-numbers-sum",
        "630": "https://leetcode.com/problems/positions-of-large-groups",
        "631": "https://leetcode.com/problems/masking-personal-information",
        "632": "https://leetcode.com/problems/flipping-an-image",
        "633": "https://leetcode.com/problems/find-and-replace-in-string",
        "634": "https://leetcode.com/problems/sum-of-distances-in-tree",
        "635": "https://leetcode.com/problems/image-overlap",
        "636": "https://leetcode.com/problems/rectangle-overlap",
        "637": "https://leetcode.com/problems/new-21-game",
        "638": "https://leetcode.com/problems/push-dominoes",
        "639": "https://leetcode.com/problems/magic-squares-in-grid",
        "640": "https://leetcode.com/problems/split-array-into-fibonacci-sequence",
        "641": "https://leetcode.com/problems/guess-the-word",
        "642": "https://leetcode.com/problems/backspace-string-compare",
        "643": "https://leetcode.com/problems/longest-mountain-in-array",
        "644": "https://leetcode.com/problems/hand-of-straights",
        "645": "https://leetcode.com/problems/shortest-path-visiting-all-nodes",
        "646": "https://leetcode.com/problems/shifting-letters",
        "647": "https://leetcode.com/problems/maximize-distance-to-closest-person",
        "648": "https://leetcode.com/problems/rectangle-area-ii",
        "649": "https://leetcode.com/problems/loud-and-rich",
        "650": "https://leetcode.com/problems/peak-index-in-a-mountain-array",
        "651": "https://leetcode.com/problems/car-fleet",
        "652": "https://leetcode.com/problems/k-similar-strings",
        "653": "https://leetcode.com/problems/exam-room",
        "654": "https://leetcode.com/problems/score-of-parentheses",
        "655": "https://leetcode.com/problems/minimum-cost-to-hire-k-workers",
        "656": "https://leetcode.com/problems/mirror-reflection",
        "657": "https://leetcode.com/problems/buddy-strings",
        "658": "https://leetcode.com/problems/lemonade-change",
        "659": "https://leetcode.com/problems/score-after-flipping-matrix",
        "660": "https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k",
        "661": "https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree",
        "662": "https://leetcode.com/problems/shortest-path-to-get-all-keys",
        "663": "https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes",
        "664": "https://leetcode.com/problems/prime-palindrome",
        "665": "https://leetcode.com/problems/transpose-matrix",
        "666": "https://leetcode.com/problems/reordered-power-of-2",
        "667": "https://leetcode.com/problems/advantage-shuffle",
        "668": "https://leetcode.com/problems/leaf-similar-trees",
        "669": "https://leetcode.com/problems/length-of-longest-fibonacci-subsequence",
        "670": "https://leetcode.com/problems/walking-robot-simulation",
        "671": "https://leetcode.com/problems/koko-eating-bananas",
        "672": "https://leetcode.com/problems/middle-of-the-linked-list",
        "673": "https://leetcode.com/problems/stone-game",
        "674": "https://leetcode.com/problems/nth-magical-number",
        "675": "https://leetcode.com/problems/profitable-schemes",
        "676": "https://leetcode.com/problems/decoded-string-at-index",
        "677": "https://leetcode.com/problems/boats-to-save-people",
        "678": "https://leetcode.com/problems/reachable-nodes-in-subdivided-graph",
        "679": "https://leetcode.com/problems/projection-area-of-3d-shapes",
        "680": "https://leetcode.com/problems/uncommon-words-from-two-sentences",
        "681": "https://leetcode.com/problems/spiral-matrix-iii",
        "682": "https://leetcode.com/problems/possible-bipartition",
        "683": "https://leetcode.com/problems/fair-candy-swap",
        "684": "https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal",
        "685": "https://leetcode.com/problems/find-and-replace-pattern",
        "686": "https://leetcode.com/problems/sum-of-subsequence-widths",
        "687": "https://leetcode.com/problems/surface-area-of-3d-shapes",
        "688": "https://leetcode.com/problems/groups-of-special-equivalent-strings",
        "689": "https://leetcode.com/problems/all-possible-full-binary-trees",
        "690": "https://leetcode.com/problems/maximum-frequency-stack",
        "691": "https://leetcode.com/problems/monotonic-array",
        "692": "https://leetcode.com/problems/bitwise-ors-of-subarrays",
        "693": "https://leetcode.com/problems/orderly-queue",
        "694": "https://leetcode.com/problems/rle-iterator",
        "695": "https://leetcode.com/problems/online-stock-span",
        "696": "https://leetcode.com/problems/numbers-at-most-n-given-digit-set",
        "697": "https://leetcode.com/problems/valid-permutations-for-di-sequence",
        "698": "https://leetcode.com/problems/fruit-into-baskets",
        "699": "https://leetcode.com/problems/sort-array-by-parity",
        "700": "https://leetcode.com/problems/super-palindromes",
        "701": "https://leetcode.com/problems/sum-of-subarray-minimums",
        "702": "https://leetcode.com/problems/smallest-range-i",
        "703": "https://leetcode.com/problems/smallest-range-ii",
        "704": "https://leetcode.com/problems/online-election",
        "705": "https://leetcode.com/problems/sort-an-array",
        "706": "https://leetcode.com/problems/cat-and-mouse",
        "707": "https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards",
        "708": "https://leetcode.com/problems/partition-array-into-disjoint-intervals",
        "709": "https://leetcode.com/problems/word-subsets",
        "710": "https://leetcode.com/problems/reverse-only-letters",
        "711": "https://leetcode.com/problems/maximum-sum-circular-subarray",
        "712": "https://leetcode.com/problems/number-of-music-playlists",
        "713": "https://leetcode.com/problems/minimum-add-to-make-parentheses-valid",
        "714": "https://leetcode.com/problems/sort-array-by-parity-ii",
        "715": "https://leetcode.com/problems/3sum-with-multiplicity",
        "716": "https://leetcode.com/problems/minimize-malware-spread",
        "717": "https://leetcode.com/problems/long-pressed-name",
        "718": "https://leetcode.com/problems/flip-string-to-monotone-increasing",
        "719": "https://leetcode.com/problems/three-equal-parts",
        "720": "https://leetcode.com/problems/minimize-malware-spread-ii",
        "721": "https://leetcode.com/problems/unique-email-addresses",
        "722": "https://leetcode.com/problems/binary-subarrays-with-sum",
        "723": "https://leetcode.com/problems/minimum-falling-path-sum",
        "724": "https://leetcode.com/problems/beautiful-array",
        "725": "https://leetcode.com/problems/number-of-recent-calls",
        "726": "https://leetcode.com/problems/shortest-bridge",
        "727": "https://leetcode.com/problems/knight-dialer",
        "728": "https://leetcode.com/problems/stamping-the-sequence",
        "729": "https://leetcode.com/problems/reorder-data-in-log-files",
        "730": "https://leetcode.com/problems/range-sum-of-bst",
        "731": "https://leetcode.com/problems/minimum-area-rectangle",
        "732": "https://leetcode.com/problems/distinct-subsequences-ii",
        "733": "https://leetcode.com/problems/valid-mountain-array",
        "734": "https://leetcode.com/problems/di-string-match",
        "735": "https://leetcode.com/problems/find-the-shortest-superstring",
        "736": "https://leetcode.com/problems/delete-columns-to-make-sorted",
        "737": "https://leetcode.com/problems/minimum-increment-to-make-array-unique",
        "738": "https://leetcode.com/problems/validate-stack-sequences",
        "739": "https://leetcode.com/problems/most-stones-removed-with-same-row-or-column",
        "740": "https://leetcode.com/problems/bag-of-tokens",
        "741": "https://leetcode.com/problems/largest-time-for-given-digits",
        "742": "https://leetcode.com/problems/reveal-cards-in-increasing-order",
        "743": "https://leetcode.com/problems/flip-equivalent-binary-trees",
        "744": "https://leetcode.com/problems/verifying-an-alien-dictionary",
        "745": "https://leetcode.com/problems/tallest-billboard",
        "746": "https://leetcode.com/problems/prison-cells-after-n-days",
        "747": "https://leetcode.com/problems/check-completeness-of-a-binary-tree",
        "748": "https://leetcode.com/problems/regions-cut-by-slashes",
        "749": "https://leetcode.com/problems/n-repeated-element-in-size-2n-array",
        "750": "https://leetcode.com/problems/maximum-width-ramp",
        "751": "https://leetcode.com/problems/minimum-area-rectangle-ii",
        "752": "https://leetcode.com/problems/least-operators-to-express-number",
        "753": "https://leetcode.com/problems/univalued-binary-tree",
        "754": "https://leetcode.com/problems/vowel-spellchecker",
        "755": "https://leetcode.com/problems/numbers-with-same-consecutive-differences",
        "756": "https://leetcode.com/problems/binary-tree-cameras",
        "757": "https://leetcode.com/problems/pancake-sorting",
        "758": "https://leetcode.com/problems/powerful-integers",
        "759": "https://leetcode.com/problems/flip-binary-tree-to-match-preorder-traversal",
        "760": "https://leetcode.com/problems/equal-rational-numbers",
        "761": "https://leetcode.com/problems/k-closest-points-to-origin",
        "762": "https://leetcode.com/problems/subarray-sums-divisible-by-k",
        "763": "https://leetcode.com/problems/odd-even-jump",
        "764": "https://leetcode.com/problems/squares-of-a-sorted-array",
        "765": "https://leetcode.com/problems/longest-turbulent-subarray",
        "766": "https://leetcode.com/problems/distribute-coins-in-binary-tree",
        "767": "https://leetcode.com/problems/unique-paths-iii",
        "768": "https://leetcode.com/problems/time-based-key-value-store",
        "769": "https://leetcode.com/problems/triples-with-bitwise-and-equal-to-zero",
        "770": "https://leetcode.com/problems/minimum-cost-for-tickets",
        "771": "https://leetcode.com/problems/string-without-aaa-or-bbb",
        "772": "https://leetcode.com/problems/sum-of-even-numbers-after-queries",
        "773": "https://leetcode.com/problems/smallest-string-starting-from-leaf",
        "774": "https://leetcode.com/problems/add-to-array-form-of-integer",
        "775": "https://leetcode.com/problems/satisfiability-of-equality-equations",
        "776": "https://leetcode.com/problems/broken-calculator",
        "777": "https://leetcode.com/problems/subarrays-with-k-different-integers",
        "778": "https://leetcode.com/problems/cousins-in-binary-tree",
        "779": "https://leetcode.com/problems/rotting-oranges",
        "780": "https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips",
        "781": "https://leetcode.com/problems/number-of-squareful-arrays",
        "782": "https://leetcode.com/problems/find-the-town-judge",
        "783": "https://leetcode.com/problems/maximum-binary-tree-ii",
        "784": "https://leetcode.com/problems/minimum-cost-to-merge-stones",
        "785": "https://leetcode.com/problems/grid-illumination",
        "786": "https://leetcode.com/problems/find-common-characters",
        "787": "https://leetcode.com/problems/check-if-word-is-valid-after-substitutions",
        "788": "https://leetcode.com/problems/max-consecutive-ones-iii",
        "789": "https://leetcode.com/problems/maximize-sum-of-array-after-k-negations",
        "790": "https://leetcode.com/problems/clumsy-factorial",
        "791": "https://leetcode.com/problems/minimum-domino-rotations-for-equal-row",
        "792": "https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal",
        "793": "https://leetcode.com/problems/complement-of-base-10-integer",
        "794": "https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60",
        "795": "https://leetcode.com/problems/capacity-to-ship-packages-within-d-days",
        "796": "https://leetcode.com/problems/numbers-with-repeated-digits",
        "797": "https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum",
        "798": "https://leetcode.com/problems/best-sightseeing-pair",
        "799": "https://leetcode.com/problems/smallest-integer-divisible-by-k",
        "800": "https://leetcode.com/problems/binary-string-with-substrings-representing-1-to-n",
        "801": "https://leetcode.com/problems/convert-to-base-2",
        "802": "https://leetcode.com/problems/binary-prefix-divisible-by-5",
        "803": "https://leetcode.com/problems/next-greater-node-in-linked-list",
        "804": "https://leetcode.com/problems/number-of-enclaves",
        "805": "https://leetcode.com/problems/remove-outermost-parentheses",
        "806": "https://leetcode.com/problems/sum-of-root-to-leaf-binary-numbers",
        "807": "https://leetcode.com/problems/camelcase-matching",
        "808": "https://leetcode.com/problems/video-stitching",
        "809": "https://leetcode.com/problems/divisor-game",
        "810": "https://leetcode.com/problems/maximum-difference-between-node-and-ancestor",
        "811": "https://leetcode.com/problems/longest-arithmetic-subsequence",
        "812": "https://leetcode.com/problems/recover-a-tree-from-preorder-traversal",
        "813": "https://leetcode.com/problems/two-city-scheduling",
        "814": "https://leetcode.com/problems/matrix-cells-in-distance-order",
        "815": "https://leetcode.com/problems/maximum-sum-of-two-non-overlapping-subarrays",
        "816": "https://leetcode.com/problems/stream-of-characters",
        "817": "https://leetcode.com/problems/moving-stones-until-consecutive",
        "818": "https://leetcode.com/problems/coloring-a-border",
        "819": "https://leetcode.com/problems/uncrossed-lines",
        "820": "https://leetcode.com/problems/escape-a-large-maze",
        "821": "https://leetcode.com/problems/valid-boomerang",
        "822": "https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree",
        "823": "https://leetcode.com/problems/minimum-score-triangulation-of-polygon",
        "824": "https://leetcode.com/problems/moving-stones-until-consecutive-ii",
        "825": "https://leetcode.com/problems/robot-bounded-in-circle",
        "826": "https://leetcode.com/problems/flower-planting-with-no-adjacent",
        "827": "https://leetcode.com/problems/partition-array-for-maximum-sum",
        "828": "https://leetcode.com/problems/longest-duplicate-substring",
        "829": "https://leetcode.com/problems/customers-who-bought-all-products",
        "830": "https://leetcode.com/problems/last-stone-weight",
        "831": "https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string",
        "832": "https://leetcode.com/problems/longest-string-chain",
        "833": "https://leetcode.com/problems/last-stone-weight-ii",
        "834": "https://leetcode.com/problems/actors-and-directors-who-cooperated-at-least-three-times",
        "835": "https://leetcode.com/problems/grumpy-bookstore-owner",
        "836": "https://leetcode.com/problems/previous-permutation-with-one-swap",
        "837": "https://leetcode.com/problems/distant-barcodes",
        "838": "https://leetcode.com/problems/lexicographically-smallest-equivalent-string",
        "839": "https://leetcode.com/problems/product-sales-analysis-i",
        "840": "https://leetcode.com/problems/product-sales-analysis-iii",
        "841": "https://leetcode.com/problems/greatest-common-divisor-of-strings",
        "842": "https://leetcode.com/problems/flip-columns-for-maximum-number-of-equal-rows",
        "843": "https://leetcode.com/problems/adding-two-negabinary-numbers",
        "844": "https://leetcode.com/problems/number-of-submatrices-that-sum-to-target",
        "845": "https://leetcode.com/problems/occurrences-after-bigram",
        "846": "https://leetcode.com/problems/letter-tile-possibilities",
        "847": "https://leetcode.com/problems/insufficient-nodes-in-root-to-leaf-paths",
        "848": "https://leetcode.com/problems/smallest-subsequence-of-distinct-characters",
        "849": "https://leetcode.com/problems/sales-analysis-iii",
        "850": "https://leetcode.com/problems/duplicate-zeros",
        "851": "https://leetcode.com/problems/largest-values-from-labels",
        "852": "https://leetcode.com/problems/shortest-path-in-binary-matrix",
        "853": "https://leetcode.com/problems/shortest-common-supersequence",
        "854": "https://leetcode.com/problems/statistics-from-a-large-sample",
        "855": "https://leetcode.com/problems/car-pooling",
        "856": "https://leetcode.com/problems/find-in-mountain-array",
        "857": "https://leetcode.com/problems/brace-expansion-ii",
        "858": "https://leetcode.com/problems/distribute-candies-to-people",
        "859": "https://leetcode.com/problems/path-in-zigzag-labelled-binary-tree",
        "860": "https://leetcode.com/problems/filling-bookcase-shelves",
        "861": "https://leetcode.com/problems/parsing-a-boolean-expression",
        "862": "https://leetcode.com/problems/defanging-an-ip-address",
        "863": "https://leetcode.com/problems/corporate-flight-bookings",
        "864": "https://leetcode.com/problems/delete-nodes-and-return-forest",
        "865": "https://leetcode.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings",
        "866": "https://leetcode.com/problems/print-in-order",
        "867": "https://leetcode.com/problems/print-zero-even-odd",
        "868": "https://leetcode.com/problems/building-h2o",
        "869": "https://leetcode.com/problems/relative-sort-array",
        "870": "https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves",
        "871": "https://leetcode.com/problems/longest-well-performing-interval",
        "872": "https://leetcode.com/problems/smallest-sufficient-team",
        "873": "https://leetcode.com/problems/number-of-equivalent-domino-pairs",
        "874": "https://leetcode.com/problems/shortest-path-with-alternating-colors",
        "875": "https://leetcode.com/problems/minimum-cost-tree-from-leaf-values",
        "876": "https://leetcode.com/problems/maximum-of-absolute-value-expression",
        "877": "https://leetcode.com/problems/n-th-tribonacci-number",
        "878": "https://leetcode.com/problems/alphabet-board-path",
        "879": "https://leetcode.com/problems/largest-1-bordered-square",
        "880": "https://leetcode.com/problems/stone-game-ii",
        "881": "https://leetcode.com/problems/user-activity-for-the-past-30-days-i",
        "882": "https://leetcode.com/problems/longest-common-subsequence",
        "883": "https://leetcode.com/problems/decrease-elements-to-make-array-zigzag",
        "884": "https://leetcode.com/problems/binary-tree-coloring-game",
        "885": "https://leetcode.com/problems/snapshot-array",
        "886": "https://leetcode.com/problems/longest-chunked-palindrome-decomposition",
        "887": "https://leetcode.com/problems/article-views-i",
        "888": "https://leetcode.com/problems/day-of-the-year",
        "889": "https://leetcode.com/problems/number-of-dice-rolls-with-target-sum",
        "890": "https://leetcode.com/problems/online-majority-element-in-subarray",
        "891": "https://leetcode.com/problems/market-analysis-i",
        "892": "https://leetcode.com/problems/find-words-that-can-be-formed-by-characters",
        "893": "https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree",
        "894": "https://leetcode.com/problems/last-substring-in-lexicographical-order",
        "895": "https://leetcode.com/problems/product-price-at-a-given-date",
        "896": "https://leetcode.com/problems/invalid-transactions",
        "897": "https://leetcode.com/problems/compare-strings-by-frequency-of-the-smallest-character",
        "898": "https://leetcode.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list",
        "899": "https://leetcode.com/problems/prime-arrangements",
        "900": "https://leetcode.com/problems/can-make-palindrome-from-substring",
        "901": "https://leetcode.com/problems/number-of-valid-words-for-each-puzzle",
        "902": "https://leetcode.com/problems/reformat-department-table",
        "903": "https://leetcode.com/problems/distance-between-bus-stops",
        "904": "https://leetcode.com/problems/day-of-the-week",
        "905": "https://leetcode.com/problems/maximum-subarray-sum-with-one-deletion",
        "906": "https://leetcode.com/problems/make-array-strictly-increasing",
        "907": "https://leetcode.com/problems/maximum-number-of-balloons",
        "908": "https://leetcode.com/problems/k-concatenation-maximum-sum",
        "909": "https://leetcode.com/problems/monthly-transactions-i",
        "910": "https://leetcode.com/problems/fizz-buzz-multithreaded",
        "911": "https://leetcode.com/problems/minimum-absolute-difference",
        "912": "https://leetcode.com/problems/ugly-number-iii",
        "913": "https://leetcode.com/problems/smallest-string-with-swaps",
        "914": "https://leetcode.com/problems/sort-items-by-groups-respecting-dependencies",
        "915": "https://leetcode.com/problems/last-person-to-fit-in-the-bus",
        "916": "https://leetcode.com/problems/design-skiplist",
        "917": "https://leetcode.com/problems/unique-number-of-occurrences",
        "918": "https://leetcode.com/problems/get-equal-substrings-within-budget",
        "919": "https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string-ii",
        "920": "https://leetcode.com/problems/minimum-moves-to-reach-target-with-rotations",
        "921": "https://leetcode.com/problems/queries-quality-and-percentage",
        "922": "https://leetcode.com/problems/minimum-cost-to-move-chips-to-the-same-position",
        "923": "https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference",
        "924": "https://leetcode.com/problems/path-with-maximum-gold",
        "925": "https://leetcode.com/problems/count-vowels-permutation",
        "926": "https://leetcode.com/problems/split-a-string-in-balanced-strings",
        "927": "https://leetcode.com/problems/queens-that-can-attack-the-king",
        "928": "https://leetcode.com/problems/dice-roll-simulation",
        "929": "https://leetcode.com/problems/maximum-equal-frequency",
        "930": "https://leetcode.com/problems/the-dining-philosophers",
        "931": "https://leetcode.com/problems/airplane-seat-assignment-probability",
        "932": "https://leetcode.com/problems/check-if-it-is-a-straight-line",
        "933": "https://leetcode.com/problems/remove-sub-folders-from-the-filesystem",
        "934": "https://leetcode.com/problems/replace-the-substring-for-balanced-string",
        "935": "https://leetcode.com/problems/find-positive-integer-solution-for-a-given-equation",
        "936": "https://leetcode.com/problems/circular-permutation-in-binary-representation",
        "937": "https://leetcode.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters",
        "938": "https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares",
        "939": "https://leetcode.com/problems/minimum-swaps-to-make-strings-equal",
        "940": "https://leetcode.com/problems/count-number-of-nice-subarrays",
        "941": "https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses",
        "942": "https://leetcode.com/problems/check-if-it-is-a-good-array",
        "943": "https://leetcode.com/problems/average-selling-price",
        "944": "https://leetcode.com/problems/cells-with-odd-values-in-a-matrix",
        "945": "https://leetcode.com/problems/reconstruct-a-2-row-binary-matrix",
        "946": "https://leetcode.com/problems/number-of-closed-islands",
        "947": "https://leetcode.com/problems/maximum-score-words-formed-by-letters",
        "948": "https://leetcode.com/problems/shift-2d-grid",
        "949": "https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree",
        "950": "https://leetcode.com/problems/greatest-sum-divisible-by-three",
        "951": "https://leetcode.com/problems/minimum-moves-to-move-a-box-to-their-target-location",
        "952": "https://leetcode.com/problems/minimum-time-visiting-all-points",
        "953": "https://leetcode.com/problems/count-servers-that-communicate",
        "954": "https://leetcode.com/problems/search-suggestions-system",
        "955": "https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps",
        "956": "https://leetcode.com/problems/find-winner-on-a-tic-tac-toe-game",
        "957": "https://leetcode.com/problems/count-square-submatrices-with-all-ones",
        "958": "https://leetcode.com/problems/palindrome-partitioning-iii",
        "959": "https://leetcode.com/problems/students-and-examinations",
        "960": "https://leetcode.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer",
        "961": "https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to",
        "962": "https://leetcode.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix",
        "963": "https://leetcode.com/problems/iterator-for-combination",
        "964": "https://leetcode.com/problems/element-appearing-more-than-25-in-sorted-array",
        "965": "https://leetcode.com/problems/remove-covered-intervals",
        "966": "https://leetcode.com/problems/minimum-falling-path-sum-ii",
        "967": "https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer",
        "968": "https://leetcode.com/problems/sequential-digits",
        "969": "https://leetcode.com/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",
        "970": "https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination",
        "971": "https://leetcode.com/problems/find-numbers-with-even-number-of-digits",
        "972": "https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers",
        "973": "https://leetcode.com/problems/maximum-number-of-occurrences-of-a-substring",
        "974": "https://leetcode.com/problems/maximum-candies-you-can-get-from-boxes",
        "975": "https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side",
        "976": "https://leetcode.com/problems/sum-of-mutated-array-closest-to-target",
        "977": "https://leetcode.com/problems/number-of-paths-with-max-score",
        "978": "https://leetcode.com/problems/deepest-leaves-sum",
        "979": "https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero",
        "980": "https://leetcode.com/problems/all-elements-in-two-binary-search-trees",
        "981": "https://leetcode.com/problems/jump-game-iii",
        "982": "https://leetcode.com/problems/verbal-arithmetic-puzzle",
        "983": "https://leetcode.com/problems/decrypt-string-from-alphabet-to-integer-mapping",
        "984": "https://leetcode.com/problems/xor-queries-of-a-subarray",
        "985": "https://leetcode.com/problems/get-watched-videos-by-your-friends",
        "986": "https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome",
        "987": "https://leetcode.com/problems/decompress-run-length-encoded-list",
        "988": "https://leetcode.com/problems/matrix-block-sum",
        "989": "https://leetcode.com/problems/sum-of-nodes-with-even-valued-grandparent",
        "990": "https://leetcode.com/problems/distinct-echo-substrings",
        "991": "https://leetcode.com/problems/convert-integer-to-the-sum-of-two-no-zero-integers",
        "992": "https://leetcode.com/problems/minimum-flips-to-make-a-or-b-equal-to-c",
        "993": "https://leetcode.com/problems/number-of-operations-to-make-network-connected",
        "994": "https://leetcode.com/problems/restaurant-growth",
        "995": "https://leetcode.com/problems/maximum-69-number",
        "996": "https://leetcode.com/problems/print-words-vertically",
        "997": "https://leetcode.com/problems/delete-leaves-with-a-given-value",
        "998": "https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden",
        "999": "https://leetcode.com/problems/list-the-products-ordered-in-a-period",
        "1000": "https://leetcode.com/problems/break-a-palindrome",
        "1001": "https://leetcode.com/problems/sort-the-matrix-diagonally",
        "1002": "https://leetcode.com/problems/reverse-subarray-to-maximize-array-value",
        "1003": "https://leetcode.com/problems/rank-transform-of-an-array",
        "1004": "https://leetcode.com/problems/remove-palindromic-subsequences",
        "1005": "https://leetcode.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance",
        "1006": "https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
        "1007": "https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule",
        "1008": "https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix",
        "1009": "https://leetcode.com/problems/reduce-array-size-to-the-half",
        "1010": "https://leetcode.com/problems/maximum-product-of-splitted-binary-tree",
        "1011": "https://leetcode.com/problems/jump-game-v",
        "1012": "https://leetcode.com/problems/movie-rating",
        "1013": "https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero",
        "1014": "https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",
        "1015": "https://leetcode.com/problems/angle-between-hands-of-a-clock",
        "1016": "https://leetcode.com/problems/jump-game-iv",
        "1017": "https://leetcode.com/problems/check-if-n-and-its-double-exist",
        "1018": "https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram",
        "1019": "https://leetcode.com/problems/tweet-counts-per-frequency",
        "1020": "https://leetcode.com/problems/maximum-students-taking-exam",
        "1021": "https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix",
        "1022": "https://leetcode.com/problems/product-of-the-last-k-numbers",
        "1023": "https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended",
        "1024": "https://leetcode.com/problems/construct-target-array-with-multiple-sums",
        "1025": "https://leetcode.com/problems/sort-integers-by-the-number-of-1-bits",
        "1026": "https://leetcode.com/problems/number-of-substrings-containing-all-three-characters",
        "1027": "https://leetcode.com/problems/count-all-valid-pickup-and-delivery-options",
        "1028": "https://leetcode.com/problems/number-of-days-between-two-dates",
        "1029": "https://leetcode.com/problems/validate-binary-tree-nodes",
        "1030": "https://leetcode.com/problems/closest-divisors",
        "1031": "https://leetcode.com/problems/largest-multiple-of-three",
        "1032": "https://leetcode.com/problems/rank-teams-by-votes",
        "1033": "https://leetcode.com/problems/linked-list-in-binary-tree",
        "1034": "https://leetcode.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid",
        "1035": "https://leetcode.com/problems/increasing-decreasing-string",
        "1036": "https://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts",
        "1037": "https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree",
        "1038": "https://leetcode.com/problems/maximum-sum-bst-in-binary-tree",
        "1039": "https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts",
        "1040": "https://leetcode.com/problems/number-of-times-binary-string-is-prefix-aligned",
        "1041": "https://leetcode.com/problems/time-needed-to-inform-all-employees",
        "1042": "https://leetcode.com/problems/frog-position-after-t-seconds",
        "1043": "https://leetcode.com/problems/replace-employee-id-with-the-unique-identifier",
        "1044": "https://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",
        "1045": "https://leetcode.com/problems/lucky-numbers-in-a-matrix",
        "1046": "https://leetcode.com/problems/design-a-stack-with-increment-operation",
        "1047": "https://leetcode.com/problems/find-the-distance-value-between-two-arrays",
        "1048": "https://leetcode.com/problems/cinema-seat-allocation",
        "1049": "https://leetcode.com/problems/sort-integers-by-the-power-value",
        "1050": "https://leetcode.com/problems/pizza-with-3n-slices",
        "1051": "https://leetcode.com/problems/create-target-array-in-the-given-order",
        "1052": "https://leetcode.com/problems/four-divisors",
        "1053": "https://leetcode.com/problems/check-if-there-is-a-valid-path-in-a-grid",
        "1054": "https://leetcode.com/problems/longest-happy-prefix",
        "1055": "https://leetcode.com/problems/capital-gainloss",
        "1056": "https://leetcode.com/problems/find-lucky-integer-in-an-array",
        "1057": "https://leetcode.com/problems/count-number-of-teams",
        "1058": "https://leetcode.com/problems/design-underground-system",
        "1059": "https://leetcode.com/problems/find-all-good-strings",
        "1060": "https://leetcode.com/problems/circle-and-rectangle-overlapping",
        "1061": "https://leetcode.com/problems/reducing-dishes",
        "1062": "https://leetcode.com/problems/minimum-subsequence-in-non-increasing-order",
        "1063": "https://leetcode.com/problems/longest-happy-string",
        "1064": "https://leetcode.com/problems/stone-game-iii",
        "1065": "https://leetcode.com/problems/top-travellers",
        "1066": "https://leetcode.com/problems/string-matching-in-an-array",
        "1067": "https://leetcode.com/problems/queries-on-a-permutation-with-key",
        "1068": "https://leetcode.com/problems/number-of-ways-to-paint-n-3-grid",
        "1069": "https://leetcode.com/problems/minimum-value-to-get-positive-step-by-step-sum",
        "1070": "https://leetcode.com/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k",
        "1071": "https://leetcode.com/problems/the-k-th-lexicographical-string-of-all-happy-strings-of-length-n",
        "1072": "https://leetcode.com/problems/restore-the-array",
        "1073": "https://leetcode.com/problems/reformat-the-string",
        "1074": "https://leetcode.com/problems/display-table-of-food-orders-in-a-restaurant",
        "1075": "https://leetcode.com/problems/minimum-number-of-frogs-croaking",
        "1076": "https://leetcode.com/problems/build-array-where-you-can-find-the-maximum-exactly-k-comparisons",
        "1077": "https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards",
        "1078": "https://leetcode.com/problems/diagonal-traverse-ii",
        "1079": "https://leetcode.com/problems/constrained-subsequence-sum",
        "1080": "https://leetcode.com/problems/kids-with-the-greatest-number-of-candies",
        "1081": "https://leetcode.com/problems/max-difference-you-can-get-from-changing-an-integer",
        "1082": "https://leetcode.com/problems/check-if-a-string-can-break-another-string",
        "1083": "https://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other",
        "1084": "https://leetcode.com/problems/destination-city",
        "1085": "https://leetcode.com/problems/check-if-all-1s-are-at-least-length-k-places-away",
        "1086": "https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",
        "1087": "https://leetcode.com/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows",
        "1088": "https://leetcode.com/problems/build-an-array-with-stack-operations",
        "1089": "https://leetcode.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor",
        "1090": "https://leetcode.com/problems/minimum-time-to-collect-all-apples-in-a-tree",
        "1091": "https://leetcode.com/problems/number-of-ways-of-cutting-a-pizza",
        "1092": "https://leetcode.com/problems/simplified-fractions",
        "1093": "https://leetcode.com/problems/count-good-nodes-in-binary-tree",
        "1094": "https://leetcode.com/problems/form-largest-integer-with-digits-that-add-up-to-target",
        "1095": "https://leetcode.com/problems/number-of-students-doing-homework-at-a-given-time",
        "1096": "https://leetcode.com/problems/maximum-number-of-darts-inside-of-a-circular-dartboard",
        "1097": "https://leetcode.com/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence",
        "1098": "https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length",
        "1099": "https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree",
        "1100": "https://leetcode.com/problems/max-dot-product-of-two-subsequences",
        "1101": "https://leetcode.com/problems/make-two-arrays-equal-by-reversing-subarrays",
        "1102": "https://leetcode.com/problems/check-if-a-string-contains-all-binary-codes-of-size-k",
        "1103": "https://leetcode.com/problems/maximum-product-of-two-elements-in-an-array",
        "1104": "https://leetcode.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts",
        "1105": "https://leetcode.com/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "1106": "https://leetcode.com/problems/probability-of-a-two-boxes-having-the-same-number-of-distinct-balls",
        "1107": "https://leetcode.com/problems/shuffle-the-array",
        "1108": "https://leetcode.com/problems/the-k-strongest-values-in-an-array",
        "1109": "https://leetcode.com/problems/design-browser-history",
        "1110": "https://leetcode.com/problems/paint-house-iii",
        "1111": "https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop",
        "1112": "https://leetcode.com/problems/subrectangle-queries",
        "1113": "https://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum",
        "1114": "https://leetcode.com/problems/running-sum-of-1d-array",
        "1115": "https://leetcode.com/problems/least-number-of-unique-integers-after-k-removals",
        "1116": "https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets",
        "1117": "https://leetcode.com/problems/kth-ancestor-of-a-tree-node",
        "1118": "https://leetcode.com/problems/group-sold-products-by-the-date",
        "1119": "https://leetcode.com/problems/xor-operation-in-an-array",
        "1120": "https://leetcode.com/problems/making-file-names-unique",
        "1121": "https://leetcode.com/problems/avoid-flood-in-the-city",
        "1122": "https://leetcode.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree",
        "1123": "https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary",
        "1124": "https://leetcode.com/problems/the-kth-factor-of-n",
        "1125": "https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element",
        "1126": "https://leetcode.com/problems/parallel-courses-ii",
        "1127": "https://leetcode.com/problems/path-crossing",
        "1128": "https://leetcode.com/problems/check-if-array-pairs-are-divisible-by-k",
        "1129": "https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition",
        "1130": "https://leetcode.com/problems/max-value-of-equation",
        "1131": "https://leetcode.com/problems/last-moment-before-all-ants-fall-out-of-a-plank",
        "1132": "https://leetcode.com/problems/count-submatrices-with-all-ones",
        "1133": "https://leetcode.com/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits",
        "1134": "https://leetcode.com/problems/reformat-date",
        "1135": "https://leetcode.com/problems/range-sum-of-sorted-subarray-sums",
        "1136": "https://leetcode.com/problems/minimum-difference-between-largest-and-smallest-value-in-three-moves",
        "1137": "https://leetcode.com/problems/stone-game-iv",
        "1138": "https://leetcode.com/problems/number-of-good-pairs",
        "1139": "https://leetcode.com/problems/number-of-substrings-with-only-1s",
        "1140": "https://leetcode.com/problems/path-with-maximum-probability",
        "1141": "https://leetcode.com/problems/best-position-for-a-service-centre",
        "1142": "https://leetcode.com/problems/find-users-with-valid-e-mails",
        "1143": "https://leetcode.com/problems/water-bottles",
        "1144": "https://leetcode.com/problems/number-of-nodes-in-the-sub-tree-with-the-same-label",
        "1145": "https://leetcode.com/problems/maximum-number-of-non-overlapping-substrings",
        "1146": "https://leetcode.com/problems/find-a-value-of-a-mysterious-function-closest-to-target",
        "1147": "https://leetcode.com/problems/count-odd-numbers-in-an-interval-range",
        "1148": "https://leetcode.com/problems/number-of-sub-arrays-with-odd-sum",
        "1149": "https://leetcode.com/problems/number-of-good-ways-to-split-a-string",
        "1150": "https://leetcode.com/problems/minimum-number-of-increments-on-subarrays-to-form-a-target-array",
        "1151": "https://leetcode.com/problems/patients-with-a-condition",
        "1152": "https://leetcode.com/problems/shuffle-string",
        "1153": "https://leetcode.com/problems/minimum-suffix-flips",
        "1154": "https://leetcode.com/problems/number-of-good-leaf-nodes-pairs",
        "1155": "https://leetcode.com/problems/string-compression-ii",
        "1156": "https://leetcode.com/problems/count-good-triplets",
        "1157": "https://leetcode.com/problems/find-the-winner-of-an-array-game",
        "1158": "https://leetcode.com/problems/minimum-swaps-to-arrange-a-binary-grid",
        "1159": "https://leetcode.com/problems/get-the-maximum-score",
        "1160": "https://leetcode.com/problems/kth-missing-positive-number",
        "1161": "https://leetcode.com/problems/can-convert-string-in-k-moves",
        "1162": "https://leetcode.com/problems/minimum-insertions-to-balance-a-parentheses-string",
        "1163": "https://leetcode.com/problems/find-longest-awesome-substring",
        "1164": "https://leetcode.com/problems/make-the-string-great",
        "1165": "https://leetcode.com/problems/find-kth-bit-in-nth-binary-string",
        "1166": "https://leetcode.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target",
        "1167": "https://leetcode.com/problems/minimum-cost-to-cut-a-stick",
        "1168": "https://leetcode.com/problems/three-consecutive-odds",
        "1169": "https://leetcode.com/problems/magnetic-force-between-two-balls",
        "1170": "https://leetcode.com/problems/minimum-number-of-days-to-eat-n-oranges",
        "1171": "https://leetcode.com/problems/minimum-number-of-vertices-to-reach-all-nodes",
        "1172": "https://leetcode.com/problems/detect-cycles-in-2d-grid",
        "1173": "https://leetcode.com/problems/most-visited-sector-in-a-circular-track",
        "1174": "https://leetcode.com/problems/maximum-number-of-coins-you-can-get",
        "1175": "https://leetcode.com/problems/find-latest-group-of-size-m",
        "1176": "https://leetcode.com/problems/stone-game-v",
        "1177": "https://leetcode.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times",
        "1178": "https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product",
        "1179": "https://leetcode.com/problems/minimum-number-of-days-to-disconnect-island",
        "1180": "https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst",
        "1181": "https://leetcode.com/problems/matrix-diagonal-sum",
        "1182": "https://leetcode.com/problems/number-of-ways-to-split-a-string",
        "1183": "https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted",
        "1184": "https://leetcode.com/problems/count-all-possible-routes",
        "1185": "https://leetcode.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters",
        "1186": "https://leetcode.com/problems/number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers",
        "1187": "https://leetcode.com/problems/minimum-time-to-make-rope-colorful",
        "1188": "https://leetcode.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable",
        "1189": "https://leetcode.com/problems/customer-who-visited-but-did-not-make-any-transactions",
        "1190": "https://leetcode.com/problems/special-positions-in-a-binary-matrix",
        "1191": "https://leetcode.com/problems/count-unhappy-friends",
        "1192": "https://leetcode.com/problems/min-cost-to-connect-all-points",
        "1193": "https://leetcode.com/problems/bank-account-summary-ii",
        "1194": "https://leetcode.com/problems/sum-of-all-odd-length-subarrays",
        "1195": "https://leetcode.com/problems/maximum-sum-obtained-of-any-permutation",
        "1196": "https://leetcode.com/problems/make-sum-divisible-by-p",
        "1197": "https://leetcode.com/problems/strange-printer-ii",
        "1198": "https://leetcode.com/problems/rearrange-spaces-between-words",
        "1199": "https://leetcode.com/problems/split-a-string-into-the-max-number-of-unique-substrings",
        "1200": "https://leetcode.com/problems/maximum-non-negative-product-in-a-matrix",
        "1201": "https://leetcode.com/problems/minimum-cost-to-connect-two-groups-of-points",
        "1202": "https://leetcode.com/problems/crawler-log-folder",
        "1203": "https://leetcode.com/problems/maximum-profit-of-operating-a-centennial-wheel",
        "1204": "https://leetcode.com/problems/throne-inheritance",
        "1205": "https://leetcode.com/problems/maximum-number-of-achievable-transfer-requests",
        "1206": "https://leetcode.com/problems/design-parking-system",
        "1207": "https://leetcode.com/problems/alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",
        "1208": "https://leetcode.com/problems/find-valid-matrix-given-row-and-column-sums",
        "1209": "https://leetcode.com/problems/find-servers-that-handled-most-number-of-requests",
        "1210": "https://leetcode.com/problems/special-array-with-x-elements-greater-than-or-equal-x",
        "1211": "https://leetcode.com/problems/even-odd-tree",
        "1212": "https://leetcode.com/problems/maximum-number-of-visible-points",
        "1213": "https://leetcode.com/problems/minimum-one-bit-operations-to-make-integers-zero",
        "1214": "https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses",
        "1215": "https://leetcode.com/problems/maximal-network-rank",
        "1216": "https://leetcode.com/problems/split-two-strings-to-make-palindrome",
        "1217": "https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities",
        "1218": "https://leetcode.com/problems/mean-of-array-after-removing-some-elements",
        "1219": "https://leetcode.com/problems/coordinate-with-maximum-network-quality",
        "1220": "https://leetcode.com/problems/number-of-sets-of-k-non-overlapping-line-segments",
        "1221": "https://leetcode.com/problems/fancy-sequence",
        "1222": "https://leetcode.com/problems/largest-substring-between-two-equal-characters",
        "1223": "https://leetcode.com/problems/lexicographically-smallest-string-after-applying-operations",
        "1224": "https://leetcode.com/problems/best-team-with-no-conflicts",
        "1225": "https://leetcode.com/problems/slowest-key",
        "1226": "https://leetcode.com/problems/arithmetic-subarrays",
        "1227": "https://leetcode.com/problems/path-with-minimum-effort",
        "1228": "https://leetcode.com/problems/rank-transform-of-a-matrix",
        "1229": "https://leetcode.com/problems/percentage-of-users-attended-a-contest",
        "1230": "https://leetcode.com/problems/sort-array-by-increasing-frequency",
        "1231": "https://leetcode.com/problems/widest-vertical-area-between-two-points-containing-no-points",
        "1232": "https://leetcode.com/problems/count-substrings-that-differ-by-one-character",
        "1233": "https://leetcode.com/problems/check-array-formation-through-concatenation",
        "1234": "https://leetcode.com/problems/count-sorted-vowel-strings",
        "1235": "https://leetcode.com/problems/furthest-building-you-can-reach",
        "1236": "https://leetcode.com/problems/kth-smallest-instructions",
        "1237": "https://leetcode.com/problems/get-maximum-in-generated-array",
        "1238": "https://leetcode.com/problems/minimum-deletions-to-make-character-frequencies-unique",
        "1239": "https://leetcode.com/problems/create-sorted-array-through-instructions",
        "1240": "https://leetcode.com/problems/defuse-the-bomb",
        "1241": "https://leetcode.com/problems/minimum-deletions-to-make-string-balanced",
        "1242": "https://leetcode.com/problems/minimum-jumps-to-reach-home",
        "1243": "https://leetcode.com/problems/distribute-repeating-integers",
        "1244": "https://leetcode.com/problems/design-an-ordered-stream",
        "1245": "https://leetcode.com/problems/determine-if-two-strings-are-close",
        "1246": "https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero",
        "1247": "https://leetcode.com/problems/maximize-grid-happiness",
        "1248": "https://leetcode.com/problems/average-time-of-process-per-machine",
        "1249": "https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent",
        "1250": "https://leetcode.com/problems/smallest-string-with-a-given-numeric-value",
        "1251": "https://leetcode.com/problems/ways-to-make-a-fair-array",
        "1252": "https://leetcode.com/problems/minimum-initial-energy-to-finish-tasks",
        "1253": "https://leetcode.com/problems/fix-names-in-a-table",
        "1254": "https://leetcode.com/problems/maximum-repeating-substring",
        "1255": "https://leetcode.com/problems/merge-in-between-linked-lists",
        "1256": "https://leetcode.com/problems/design-front-middle-back-queue",
        "1257": "https://leetcode.com/problems/minimum-number-of-removals-to-make-mountain-array",
        "1258": "https://leetcode.com/problems/richest-customer-wealth",
        "1259": "https://leetcode.com/problems/find-the-most-competitive-subsequence",
        "1260": "https://leetcode.com/problems/minimum-moves-to-make-array-complementary",
        "1261": "https://leetcode.com/problems/minimize-deviation-in-array",
        "1262": "https://leetcode.com/problems/goal-parser-interpretation",
        "1263": "https://leetcode.com/problems/max-number-of-k-sum-pairs",
        "1264": "https://leetcode.com/problems/concatenation-of-consecutive-binary-numbers",
        "1265": "https://leetcode.com/problems/minimum-incompatibility",
        "1266": "https://leetcode.com/problems/invalid-tweets",
        "1267": "https://leetcode.com/problems/count-the-number-of-consistent-strings",
        "1268": "https://leetcode.com/problems/sum-of-absolute-differences-in-a-sorted-array",
        "1269": "https://leetcode.com/problems/stone-game-vi",
        "1270": "https://leetcode.com/problems/delivering-boxes-from-storage-to-ports",
        "1271": "https://leetcode.com/problems/count-of-matches-in-tournament",
        "1272": "https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers",
        "1273": "https://leetcode.com/problems/stone-game-vii",
        "1274": "https://leetcode.com/problems/maximum-height-by-stacking-cuboids",
        "1275": "https://leetcode.com/problems/daily-leads-and-partners",
        "1276": "https://leetcode.com/problems/reformat-phone-number",
        "1277": "https://leetcode.com/problems/maximum-erasure-value",
        "1278": "https://leetcode.com/problems/jump-game-vi",
        "1279": "https://leetcode.com/problems/number-of-students-unable-to-eat-lunch",
        "1280": "https://leetcode.com/problems/average-waiting-time",
        "1281": "https://leetcode.com/problems/maximum-binary-string-after-change",
        "1282": "https://leetcode.com/problems/minimum-adjacent-swaps-for-k-consecutive-ones",
        "1283": "https://leetcode.com/problems/determine-if-string-halves-are-alike",
        "1284": "https://leetcode.com/problems/maximum-number-of-eaten-apples",
        "1285": "https://leetcode.com/problems/where-will-the-ball-fall",
        "1286": "https://leetcode.com/problems/maximum-xor-with-an-element-from-array",
        "1287": "https://leetcode.com/problems/maximum-units-on-a-truck",
        "1288": "https://leetcode.com/problems/count-good-meals",
        "1289": "https://leetcode.com/problems/ways-to-split-array-into-three-subarrays",
        "1290": "https://leetcode.com/problems/minimum-operations-to-make-a-subsequence",
        "1291": "https://leetcode.com/problems/calculate-money-in-leetcode-bank",
        "1292": "https://leetcode.com/problems/maximum-score-from-removing-substrings",
        "1293": "https://leetcode.com/problems/construct-the-lexicographically-largest-valid-sequence",
        "1294": "https://leetcode.com/problems/number-of-ways-to-reconstruct-a-tree",
        "1295": "https://leetcode.com/problems/swapping-nodes-in-a-linked-list",
        "1296": "https://leetcode.com/problems/minimize-hamming-distance-after-swap-operations",
        "1297": "https://leetcode.com/problems/find-minimum-time-to-finish-all-jobs",
        "1298": "https://leetcode.com/problems/number-of-rectangles-that-can-form-the-largest-square",
        "1299": "https://leetcode.com/problems/tuple-with-same-product",
        "1300": "https://leetcode.com/problems/largest-submatrix-with-rearrangements",
        "1301": "https://leetcode.com/problems/cat-and-mouse-ii",
        "1302": "https://leetcode.com/problems/find-followers-count",
        "1303": "https://leetcode.com/problems/the-number-of-employees-which-report-to-each-employee",
        "1304": "https://leetcode.com/problems/find-the-highest-altitude",
        "1305": "https://leetcode.com/problems/minimum-number-of-people-to-teach",
        "1306": "https://leetcode.com/problems/decode-xored-permutation",
        "1307": "https://leetcode.com/problems/count-ways-to-make-array-with-product",
        "1308": "https://leetcode.com/problems/latest-time-by-replacing-hidden-digits",
        "1309": "https://leetcode.com/problems/change-minimum-characters-to-satisfy-one-of-three-conditions",
        "1310": "https://leetcode.com/problems/find-kth-largest-xor-coordinate-value",
        "1311": "https://leetcode.com/problems/building-boxes",
        "1312": "https://leetcode.com/problems/find-total-time-spent-by-each-employee",
        "1313": "https://leetcode.com/problems/maximum-number-of-balls-in-a-box",
        "1314": "https://leetcode.com/problems/restore-the-array-from-adjacent-pairs",
        "1315": "https://leetcode.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day",
        "1316": "https://leetcode.com/problems/palindrome-partitioning-iv",
        "1317": "https://leetcode.com/problems/sum-of-unique-elements",
        "1318": "https://leetcode.com/problems/maximum-absolute-sum-of-any-subarray",
        "1319": "https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends",
        "1320": "https://leetcode.com/problems/check-if-array-is-sorted-and-rotated",
        "1321": "https://leetcode.com/problems/maximum-score-from-removing-stones",
        "1322": "https://leetcode.com/problems/largest-merge-of-two-strings",
        "1323": "https://leetcode.com/problems/closest-subsequence-sum",
        "1324": "https://leetcode.com/problems/recyclable-and-low-fat-products",
        "1325": "https://leetcode.com/problems/minimum-changes-to-make-alternating-binary-string",
        "1326": "https://leetcode.com/problems/count-number-of-homogenous-substrings",
        "1327": "https://leetcode.com/problems/minimum-degree-of-a-connected-trio-in-a-graph",
        "1328": "https://leetcode.com/problems/longest-nice-substring",
        "1329": "https://leetcode.com/problems/form-array-by-concatenating-subarrays-of-another-array",
        "1330": "https://leetcode.com/problems/map-of-highest-peak",
        "1331": "https://leetcode.com/problems/tree-of-coprimes",
        "1332": "https://leetcode.com/problems/merge-strings-alternately",
        "1333": "https://leetcode.com/problems/minimum-number-of-operations-to-move-all-balls-to-each-box",
        "1334": "https://leetcode.com/problems/maximum-score-from-performing-multiplication-operations",
        "1335": "https://leetcode.com/problems/maximize-palindrome-length-from-subsequences",
        "1336": "https://leetcode.com/problems/count-items-matching-a-rule",
        "1337": "https://leetcode.com/problems/closest-dessert-cost",
        "1338": "https://leetcode.com/problems/equal-sum-arrays-with-minimum-number-of-operations",
        "1339": "https://leetcode.com/problems/car-fleet-ii",
        "1340": "https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate",
        "1341": "https://leetcode.com/problems/check-if-number-is-a-sum-of-powers-of-three",
        "1342": "https://leetcode.com/problems/count-pairs-of-nodes",
        "1343": "https://leetcode.com/problems/minimum-elements-to-add-to-form-a-given-sum",
        "1344": "https://leetcode.com/problems/number-of-restricted-paths-from-first-to-last-node",
        "1345": "https://leetcode.com/problems/make-the-xor-of-all-segments-equal-to-zero",
        "1346": "https://leetcode.com/problems/primary-department-for-each-employee",
        "1347": "https://leetcode.com/problems/check-if-one-string-swap-can-make-strings-equal",
        "1348": "https://leetcode.com/problems/find-center-of-star-graph",
        "1349": "https://leetcode.com/problems/maximum-average-pass-ratio",
        "1350": "https://leetcode.com/problems/maximum-score-of-a-good-subarray",
        "1351": "https://leetcode.com/problems/rearrange-products-table",
        "1352": "https://leetcode.com/problems/second-largest-digit-in-a-string",
        "1353": "https://leetcode.com/problems/design-authentication-manager",
        "1354": "https://leetcode.com/problems/maximum-number-of-consecutive-values-you-can-make",
        "1355": "https://leetcode.com/problems/maximize-score-after-n-operations",
        "1356": "https://leetcode.com/problems/maximum-ascending-subarray-sum",
        "1357": "https://leetcode.com/problems/maximum-value-at-a-given-index-in-a-bounded-array",
        "1358": "https://leetcode.com/problems/minimum-number-of-operations-to-reinitialize-a-permutation",
        "1359": "https://leetcode.com/problems/evaluate-the-bracket-pairs-of-a-string",
        "1360": "https://leetcode.com/problems/maximize-number-of-nice-divisors",
        "1361": "https://leetcode.com/problems/determine-color-of-a-chessboard-square",
        "1362": "https://leetcode.com/problems/sentence-similarity-iii",
        "1363": "https://leetcode.com/problems/count-nice-pairs-in-an-array",
        "1364": "https://leetcode.com/problems/maximum-number-of-groups-getting-fresh-donuts",
        "1365": "https://leetcode.com/problems/truncate-sentence",
        "1366": "https://leetcode.com/problems/finding-the-users-active-minutes",
        "1367": "https://leetcode.com/problems/minimum-absolute-sum-difference",
        "1368": "https://leetcode.com/problems/number-of-different-subsequences-gcds",
        "1369": "https://leetcode.com/problems/sign-of-the-product-of-an-array",
        "1370": "https://leetcode.com/problems/find-the-winner-of-the-circular-game",
        "1371": "https://leetcode.com/problems/minimum-sideway-jumps",
        "1372": "https://leetcode.com/problems/finding-mk-average",
        "1373": "https://leetcode.com/problems/minimum-operations-to-make-the-array-increasing",
        "1374": "https://leetcode.com/problems/queries-on-number-of-points-inside-a-circle",
        "1375": "https://leetcode.com/problems/maximum-xor-for-each-query",
        "1376": "https://leetcode.com/problems/minimum-number-of-operations-to-make-string-sorted",
        "1377": "https://leetcode.com/problems/check-if-the-sentence-is-pangram",
        "1378": "https://leetcode.com/problems/maximum-ice-cream-bars",
        "1379": "https://leetcode.com/problems/single-threaded-cpu",
        "1380": "https://leetcode.com/problems/find-xor-sum-of-all-pairs-bitwise-and",
        "1381": "https://leetcode.com/problems/sum-of-digits-in-base-k",
        "1382": "https://leetcode.com/problems/frequency-of-the-most-frequent-element",
        "1383": "https://leetcode.com/problems/longest-substring-of-all-vowels-in-order",
        "1384": "https://leetcode.com/problems/maximum-building-height",
        "1385": "https://leetcode.com/problems/replace-all-digits-with-characters",
        "1386": "https://leetcode.com/problems/seat-reservation-manager",
        "1387": "https://leetcode.com/problems/maximum-element-after-decreasing-and-rearranging",
        "1388": "https://leetcode.com/problems/closest-room",
        "1389": "https://leetcode.com/problems/minimum-distance-to-the-target-element",
        "1390": "https://leetcode.com/problems/splitting-a-string-into-descending-consecutive-values",
        "1391": "https://leetcode.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number",
        "1392": "https://leetcode.com/problems/minimum-interval-to-include-each-query",
        "1393": "https://leetcode.com/problems/maximum-population-year",
        "1394": "https://leetcode.com/problems/maximum-distance-between-a-pair-of-values",
        "1395": "https://leetcode.com/problems/maximum-subarray-min-product",
        "1396": "https://leetcode.com/problems/largest-color-value-in-a-directed-graph",
        "1397": "https://leetcode.com/problems/sorting-the-sentence",
        "1398": "https://leetcode.com/problems/incremental-memory-leak",
        "1399": "https://leetcode.com/problems/sum-of-floored-pairs",
        "1400": "https://leetcode.com/problems/sum-of-all-subset-xor-totals",
        "1401": "https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-binary-string-alternating",
        "1402": "https://leetcode.com/problems/finding-pairs-with-a-certain-sum",
        "1403": "https://leetcode.com/problems/number-of-ways-to-rearrange-sticks-with-k-sticks-visible",
        "1404": "https://leetcode.com/problems/longer-contiguous-segments-of-ones-than-zeros",
        "1405": "https://leetcode.com/problems/minimum-speed-to-arrive-on-time",
        "1406": "https://leetcode.com/problems/jump-game-vii",
        "1407": "https://leetcode.com/problems/stone-game-viii",
        "1408": "https://leetcode.com/problems/calculate-special-bonus",
        "1409": "https://leetcode.com/problems/substrings-of-size-three-with-distinct-characters",
        "1410": "https://leetcode.com/problems/minimize-maximum-pair-sum-in-array",
        "1411": "https://leetcode.com/problems/get-biggest-three-rhombus-sums-in-a-grid",
        "1412": "https://leetcode.com/problems/minimum-xor-sum-of-two-arrays",
        "1413": "https://leetcode.com/problems/check-if-word-equals-summation-of-two-words",
        "1414": "https://leetcode.com/problems/maximum-value-after-insertion",
        "1415": "https://leetcode.com/problems/process-tasks-using-servers",
        "1416": "https://leetcode.com/problems/minimum-skips-to-arrive-at-meeting-on-time",
        "1417": "https://leetcode.com/problems/egg-drop-with-2-eggs-and-n-floors",
        "1418": "https://leetcode.com/problems/determine-whether-matrix-can-be-obtained-by-rotation",
        "1419": "https://leetcode.com/problems/reduction-operations-to-make-the-array-elements-equal",
        "1420": "https://leetcode.com/problems/minimum-number-of-flips-to-make-the-binary-string-alternating",
        "1421": "https://leetcode.com/problems/minimum-space-wasted-from-packaging",
        "1422": "https://leetcode.com/problems/check-if-all-the-integers-in-a-range-are-covered",
        "1423": "https://leetcode.com/problems/find-the-student-that-will-replace-the-chalk",
        "1424": "https://leetcode.com/problems/largest-magic-square",
        "1425": "https://leetcode.com/problems/minimum-cost-to-change-the-final-value-of-expression",
        "1426": "https://leetcode.com/problems/redistribute-characters-to-make-all-strings-equal",
        "1427": "https://leetcode.com/problems/merge-triplets-to-form-target-triplet",
        "1428": "https://leetcode.com/problems/the-earliest-and-latest-rounds-where-players-compete",
        "1429": "https://leetcode.com/problems/find-a-peak-element-ii",
        "1430": "https://leetcode.com/problems/largest-odd-number-in-string",
        "1431": "https://leetcode.com/problems/the-number-of-full-rounds-you-have-played",
        "1432": "https://leetcode.com/problems/count-sub-islands",
        "1433": "https://leetcode.com/problems/minimum-absolute-difference-queries",
        "1434": "https://leetcode.com/problems/count-salary-categories",
        "1435": "https://leetcode.com/problems/remove-one-element-to-make-the-array-strictly-increasing",
        "1436": "https://leetcode.com/problems/remove-all-occurrences-of-a-substring",
        "1437": "https://leetcode.com/problems/maximum-alternating-subsequence-sum",
        "1438": "https://leetcode.com/problems/design-movie-rental-system",
        "1439": "https://leetcode.com/problems/maximum-product-difference-between-two-pairs",
        "1440": "https://leetcode.com/problems/cyclically-rotating-a-grid",
        "1441": "https://leetcode.com/problems/count-ways-to-build-rooms-in-an-ant-colony",
        "1442": "https://leetcode.com/problems/build-array-from-permutation",
        "1443": "https://leetcode.com/problems/eliminate-maximum-number-of-monsters",
        "1444": "https://leetcode.com/problems/count-good-numbers",
        "1445": "https://leetcode.com/problems/longest-common-subpath",
        "1446": "https://leetcode.com/problems/count-square-sum-triples",
        "1447": "https://leetcode.com/problems/nearest-exit-from-entrance-in-maze",
        "1448": "https://leetcode.com/problems/minimum-cost-to-reach-destination-in-time",
        "1449": "https://leetcode.com/problems/concatenation-of-array",
        "1450": "https://leetcode.com/problems/unique-length-3-palindromic-subsequences",
        "1451": "https://leetcode.com/problems/painting-a-grid-with-three-different-colors",
        "1452": "https://leetcode.com/problems/confirmation-rate",
        "1453": "https://leetcode.com/problems/maximum-number-of-words-you-can-type",
        "1454": "https://leetcode.com/problems/add-minimum-number-of-rungs",
        "1455": "https://leetcode.com/problems/maximum-number-of-points-with-cost",
        "1456": "https://leetcode.com/problems/maximum-genetic-difference-query",
        "1457": "https://leetcode.com/problems/check-if-all-characters-have-equal-number-of-occurrences",
        "1458": "https://leetcode.com/problems/the-number-of-the-smallest-unoccupied-chair",
        "1459": "https://leetcode.com/problems/describe-the-painting",
        "1460": "https://leetcode.com/problems/number-of-visible-people-in-a-queue",
        "1461": "https://leetcode.com/problems/sum-of-digits-of-string-after-convert",
        "1462": "https://leetcode.com/problems/largest-number-after-mutating-substring",
        "1463": "https://leetcode.com/problems/maximum-compatibility-score-sum",
        "1464": "https://leetcode.com/problems/delete-duplicate-folders-in-system",
        "1465": "https://leetcode.com/problems/minimum-garden-perimeter-to-collect-enough-apples",
        "1466": "https://leetcode.com/problems/count-number-of-special-subsequences",
        "1467": "https://leetcode.com/problems/delete-characters-to-make-fancy-string",
        "1468": "https://leetcode.com/problems/check-if-move-is-legal",
        "1469": "https://leetcode.com/problems/minimum-total-space-wasted-with-k-resizing-operations",
        "1470": "https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-substrings",
        "1471": "https://leetcode.com/problems/check-if-string-is-a-prefix-of-array",
        "1472": "https://leetcode.com/problems/remove-stones-to-minimize-the-total",
        "1473": "https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-string-balanced",
        "1474": "https://leetcode.com/problems/find-the-longest-valid-obstacle-course-at-each-position",
        "1475": "https://leetcode.com/problems/employees-with-missing-information",
        "1476": "https://leetcode.com/problems/number-of-strings-that-appear-as-substrings-in-word",
        "1477": "https://leetcode.com/problems/array-with-elements-not-equal-to-average-of-neighbors",
        "1478": "https://leetcode.com/problems/minimum-non-zero-product-of-the-array-elements",
        "1479": "https://leetcode.com/problems/last-day-where-you-can-still-cross",
        "1480": "https://leetcode.com/problems/find-if-path-exists-in-graph",
        "1481": "https://leetcode.com/problems/minimum-time-to-type-word-using-special-typewriter",
        "1482": "https://leetcode.com/problems/number-of-ways-to-arrive-at-destination",
        "1483": "https://leetcode.com/problems/number-of-ways-to-separate-numbers",
        "1484": "https://leetcode.com/problems/employees-whose-manager-left-the-company",
        "1485": "https://leetcode.com/problems/find-greatest-common-divisor-of-array",
        "1486": "https://leetcode.com/problems/find-unique-binary-string",
        "1487": "https://leetcode.com/problems/minimize-the-difference-between-target-and-chosen-elements",
        "1488": "https://leetcode.com/problems/find-array-given-subset-sums",
        "1489": "https://leetcode.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores",
        "1490": "https://leetcode.com/problems/find-the-kth-largest-integer-in-the-array",
        "1491": "https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks",
        "1492": "https://leetcode.com/problems/number-of-unique-good-subsequences",
        "1493": "https://leetcode.com/problems/find-the-middle-index-in-array",
        "1494": "https://leetcode.com/problems/find-all-groups-of-farmland",
        "1495": "https://leetcode.com/problems/operations-on-tree",
        "1496": "https://leetcode.com/problems/the-number-of-good-subsets",
        "1497": "https://leetcode.com/problems/count-special-quadruplets",
        "1498": "https://leetcode.com/problems/the-number-of-weak-characters-in-the-game",
        "1499": "https://leetcode.com/problems/first-day-where-you-have-been-in-all-the-rooms",
        "1500": "https://leetcode.com/problems/gcd-sort-of-an-array",
        "1501": "https://leetcode.com/problems/reverse-prefix-of-word",
        "1502": "https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-subsequences",
        "1503": "https://leetcode.com/problems/smallest-missing-genetic-value-in-each-subtree",
        "1504": "https://leetcode.com/problems/count-number-of-pairs-with-absolute-difference-k",
        "1505": "https://leetcode.com/problems/find-original-array-from-doubled-array",
        "1506": "https://leetcode.com/problems/minimum-number-of-operations-to-make-array-continuous",
        "1507": "https://leetcode.com/problems/final-value-of-variable-after-performing-operations",
        "1508": "https://leetcode.com/problems/sum-of-beauty-in-the-array",
        "1509": "https://leetcode.com/problems/detect-squares",
        "1510": "https://leetcode.com/problems/longest-subsequence-repeated-k-times",
        "1511": "https://leetcode.com/problems/maximum-difference-between-increasing-elements",
        "1512": "https://leetcode.com/problems/grid-game",
        "1513": "https://leetcode.com/problems/check-if-word-can-be-placed-in-crossword",
        "1514": "https://leetcode.com/problems/the-score-of-students-solving-math-expression",
        "1515": "https://leetcode.com/problems/number-of-pairs-of-strings-with-concatenation-equal-to-target",
        "1516": "https://leetcode.com/problems/maximize-the-confusion-of-an-exam",
        "1517": "https://leetcode.com/problems/maximum-number-of-ways-to-partition-an-array",
        "1518": "https://leetcode.com/problems/minimum-moves-to-convert-string",
        "1519": "https://leetcode.com/problems/find-missing-observations",
        "1520": "https://leetcode.com/problems/stone-game-ix",
        "1521": "https://leetcode.com/problems/smallest-k-length-subsequence-with-occurrences-of-a-letter",
        "1522": "https://leetcode.com/problems/two-out-of-three",
        "1523": "https://leetcode.com/problems/stock-price-fluctuation",
        "1524": "https://leetcode.com/problems/minimum-number-of-moves-to-seat-everyone",
        "1525": "https://leetcode.com/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color",
        "1526": "https://leetcode.com/problems/the-time-when-the-network-becomes-idle",
        "1527": "https://leetcode.com/problems/kth-smallest-product-of-two-sorted-arrays",
        "1528": "https://leetcode.com/problems/check-if-numbers-are-ascending-in-a-sentence",
        "1529": "https://leetcode.com/problems/simple-bank-system",
        "1530": "https://leetcode.com/problems/count-number-of-maximum-bitwise-or-subsets",
        "1531": "https://leetcode.com/problems/second-minimum-time-to-reach-destination",
        "1532": "https://leetcode.com/problems/number-of-valid-words-in-a-sentence",
        "1533": "https://leetcode.com/problems/next-greater-numerically-balanced-number",
        "1534": "https://leetcode.com/problems/count-nodes-with-the-highest-score",
        "1535": "https://leetcode.com/problems/parallel-courses-iii",
        "1536": "https://leetcode.com/problems/kth-distinct-string-in-an-array",
        "1537": "https://leetcode.com/problems/two-best-non-overlapping-events",
        "1538": "https://leetcode.com/problems/plates-between-candles",
        "1539": "https://leetcode.com/problems/number-of-valid-move-combinations-on-chessboard",
        "1540": "https://leetcode.com/problems/smallest-index-with-equal-value",
        "1541": "https://leetcode.com/problems/find-the-minimum-and-maximum-number-of-nodes-between-critical-points",
        "1542": "https://leetcode.com/problems/minimum-operations-to-convert-number",
        "1543": "https://leetcode.com/problems/check-if-an-original-string-exists-given-two-encoded-strings",
        "1544": "https://leetcode.com/problems/count-vowel-substrings-of-a-string",
        "1545": "https://leetcode.com/problems/vowels-of-all-substrings",
        "1546": "https://leetcode.com/problems/minimized-maximum-of-products-distributed-to-any-store",
        "1547": "https://leetcode.com/problems/maximum-path-quality-of-a-graph",
        "1548": "https://leetcode.com/problems/check-whether-two-strings-are-almost-equivalent",
        "1549": "https://leetcode.com/problems/walking-robot-simulation-ii",
        "1550": "https://leetcode.com/problems/most-beautiful-item-for-each-query",
        "1551": "https://leetcode.com/problems/maximum-number-of-tasks-you-can-assign",
        "1552": "https://leetcode.com/problems/time-needed-to-buy-tickets",
        "1553": "https://leetcode.com/problems/reverse-nodes-in-even-length-groups",
        "1554": "https://leetcode.com/problems/decode-the-slanted-ciphertext",
        "1555": "https://leetcode.com/problems/process-restricted-friend-requests",
        "1556": "https://leetcode.com/problems/two-furthest-houses-with-different-colors",
        "1557": "https://leetcode.com/problems/watering-plants",
        "1558": "https://leetcode.com/problems/range-frequency-queries",
        "1559": "https://leetcode.com/problems/sum-of-k-mirror-numbers",
        "1560": "https://leetcode.com/problems/count-common-words-with-one-occurrence",
        "1561": "https://leetcode.com/problems/minimum-number-of-food-buckets-to-feed-the-hamsters",
        "1562": "https://leetcode.com/problems/minimum-cost-homecoming-of-a-robot-in-a-grid",
        "1563": "https://leetcode.com/problems/count-fertile-pyramids-in-a-land",
        "1564": "https://leetcode.com/problems/find-target-indices-after-sorting-array",
        "1565": "https://leetcode.com/problems/removing-minimum-and-maximum-from-array",
        "1566": "https://leetcode.com/problems/find-all-people-with-secret",
        "1567": "https://leetcode.com/problems/finding-3-digit-even-numbers",
        "1568": "https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list",
        "1569": "https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another",
        "1570": "https://leetcode.com/problems/valid-arrangement-of-pairs",
        "1571": "https://leetcode.com/problems/find-subsequence-of-length-k-with-the-largest-sum",
        "1572": "https://leetcode.com/problems/find-good-days-to-rob-the-bank",
        "1573": "https://leetcode.com/problems/detonate-the-maximum-bombs",
        "1574": "https://leetcode.com/problems/sequentially-ordinal-rank-tracker",
        "1575": "https://leetcode.com/problems/rings-and-rods",
        "1576": "https://leetcode.com/problems/sum-of-subarray-ranges",
        "1577": "https://leetcode.com/problems/watering-plants-ii",
        "1578": "https://leetcode.com/problems/maximum-fruits-harvested-after-at-most-k-steps",
        "1579": "https://leetcode.com/problems/find-first-palindromic-string-in-the-array",
        "1580": "https://leetcode.com/problems/adding-spaces-to-a-string",
        "1581": "https://leetcode.com/problems/number-of-smooth-descent-periods-of-a-stock",
        "1582": "https://leetcode.com/problems/minimum-operations-to-make-the-array-k-increasing",
        "1583": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences",
        "1584": "https://leetcode.com/problems/find-all-possible-recipes-from-given-supplies",
        "1585": "https://leetcode.com/problems/check-if-a-parentheses-string-can-be-valid",
        "1586": "https://leetcode.com/problems/abbreviating-the-product-of-a-range",
        "1587": "https://leetcode.com/problems/a-number-after-a-double-reversal",
        "1588": "https://leetcode.com/problems/execution-of-all-suffix-instructions-staying-in-a-grid",
        "1589": "https://leetcode.com/problems/intervals-between-identical-elements",
        "1590": "https://leetcode.com/problems/recover-the-original-array",
        "1591": "https://leetcode.com/problems/check-if-all-as-appears-before-all-bs",
        "1592": "https://leetcode.com/problems/number-of-laser-beams-in-a-bank",
        "1593": "https://leetcode.com/problems/destroying-asteroids",
        "1594": "https://leetcode.com/problems/maximum-employees-to-be-invited-to-a-meeting",
        "1595": "https://leetcode.com/problems/capitalize-the-title",
        "1596": "https://leetcode.com/problems/maximum-twin-sum-of-a-linked-list",
        "1597": "https://leetcode.com/problems/longest-palindrome-by-concatenating-two-letter-words",
        "1598": "https://leetcode.com/problems/stamping-the-grid",
        "1599": "https://leetcode.com/problems/check-if-every-row-and-column-contains-all-numbers",
        "1600": "https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together-ii",
        "1601": "https://leetcode.com/problems/count-words-obtained-after-adding-a-letter",
        "1602": "https://leetcode.com/problems/divide-a-string-into-groups-of-size-k",
        "1603": "https://leetcode.com/problems/minimum-moves-to-reach-target-score",
        "1604": "https://leetcode.com/problems/maximum-running-time-of-n-computers",
        "1605": "https://leetcode.com/problems/minimum-cost-of-buying-candies-with-discount",
        "1606": "https://leetcode.com/problems/count-the-hidden-sequences",
        "1607": "https://leetcode.com/problems/k-highest-ranked-items-within-a-price-range",
        "1608": "https://leetcode.com/problems/number-of-ways-to-divide-a-long-corridor",
        "1609": "https://leetcode.com/problems/count-elements-with-strictly-smaller-and-greater-elements",
        "1610": "https://leetcode.com/problems/rearrange-array-elements-by-sign",
        "1611": "https://leetcode.com/problems/find-all-lonely-numbers-in-the-array",
        "1612": "https://leetcode.com/problems/keep-multiplying-found-values-by-two",
        "1613": "https://leetcode.com/problems/all-divisions-with-the-highest-score-of-a-binary-array",
        "1614": "https://leetcode.com/problems/find-substring-with-given-hash-value",
        "1615": "https://leetcode.com/problems/groups-of-strings",
        "1616": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits",
        "1617": "https://leetcode.com/problems/partition-array-according-to-given-pivot",
        "1618": "https://leetcode.com/problems/minimum-cost-to-set-cooking-time",
        "1619": "https://leetcode.com/problems/minimum-difference-in-sums-after-removal-of-elements",
        "1620": "https://leetcode.com/problems/sort-even-and-odd-indices-independently",
        "1621": "https://leetcode.com/problems/smallest-value-of-the-rearranged-number",
        "1622": "https://leetcode.com/problems/design-bitset",
        "1623": "https://leetcode.com/problems/minimum-time-to-remove-all-cars-containing-illegal-goods",
        "1624": "https://leetcode.com/problems/count-operations-to-obtain-zero",
        "1625": "https://leetcode.com/problems/minimum-operations-to-make-the-array-alternating",
        "1626": "https://leetcode.com/problems/removing-minimum-number-of-magic-beans",
        "1627": "https://leetcode.com/problems/count-equal-and-divisible-pairs-in-an-array",
        "1628": "https://leetcode.com/problems/find-three-consecutive-integers-that-sum-to-a-given-number",
        "1629": "https://leetcode.com/problems/maximum-split-of-positive-even-integers",
        "1630": "https://leetcode.com/problems/count-good-triplets-in-an-array",
        "1631": "https://leetcode.com/problems/count-integers-with-even-digit-sum",
        "1632": "https://leetcode.com/problems/merge-nodes-in-between-zeros",
        "1633": "https://leetcode.com/problems/construct-string-with-repeat-limit",
        "1634": "https://leetcode.com/problems/count-array-pairs-divisible-by-k",
        "1635": "https://leetcode.com/problems/counting-words-with-a-given-prefix",
        "1636": "https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram-ii",
        "1637": "https://leetcode.com/problems/minimum-time-to-complete-trips",
        "1638": "https://leetcode.com/problems/minimum-time-to-finish-the-race",
        "1639": "https://leetcode.com/problems/most-frequent-number-following-key-in-an-array",
        "1640": "https://leetcode.com/problems/sort-the-jumbled-numbers",
        "1641": "https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph",
        "1642": "https://leetcode.com/problems/minimum-number-of-moves-to-make-palindrome",
        "1643": "https://leetcode.com/problems/cells-in-a-range-on-an-excel-sheet",
        "1644": "https://leetcode.com/problems/create-binary-tree-from-descriptions",
        "1645": "https://leetcode.com/problems/replace-non-coprime-numbers-in-array",
        "1646": "https://leetcode.com/problems/find-all-k-distant-indices-in-an-array",
        "1647": "https://leetcode.com/problems/count-artifacts-that-can-be-extracted",
        "1648": "https://leetcode.com/problems/maximize-the-topmost-element-after-k-moves",
        "1649": "https://leetcode.com/problems/minimum-weighted-subgraph-with-the-required-paths",
        "1650": "https://leetcode.com/problems/divide-array-into-equal-pairs",
        "1651": "https://leetcode.com/problems/maximize-number-of-subsequences-in-a-string",
        "1652": "https://leetcode.com/problems/minimum-operations-to-halve-array-sum",
        "1653": "https://leetcode.com/problems/minimum-white-tiles-after-covering-with-carpets",
        "1654": "https://leetcode.com/problems/count-hills-and-valleys-in-an-array",
        "1655": "https://leetcode.com/problems/count-collisions-on-a-road",
        "1656": "https://leetcode.com/problems/maximum-points-in-an-archery-competition",
        "1657": "https://leetcode.com/problems/longest-substring-of-one-repeating-character",
        "1658": "https://leetcode.com/problems/find-the-difference-of-two-arrays",
        "1659": "https://leetcode.com/problems/find-palindrome-with-fixed-length",
        "1660": "https://leetcode.com/problems/maximum-value-of-k-coins-from-piles",
        "1661": "https://leetcode.com/problems/minimum-bit-flips-to-convert-number",
        "1662": "https://leetcode.com/problems/number-of-ways-to-select-buildings",
        "1663": "https://leetcode.com/problems/sum-of-scores-of-built-strings",
        "1664": "https://leetcode.com/problems/minimum-number-of-operations-to-convert-time",
        "1665": "https://leetcode.com/problems/find-players-with-zero-or-one-losses",
        "1666": "https://leetcode.com/problems/maximum-candies-allocated-to-k-children",
        "1667": "https://leetcode.com/problems/encrypt-and-decrypt-strings",
        "1668": "https://leetcode.com/problems/largest-number-after-digit-swaps-by-parity",
        "1669": "https://leetcode.com/problems/minimize-result-by-adding-parentheses-to-expression",
        "1670": "https://leetcode.com/problems/maximum-product-after-k-increments",
        "1671": "https://leetcode.com/problems/maximum-total-beauty-of-the-gardens",
        "1672": "https://leetcode.com/problems/add-two-integers",
        "1673": "https://leetcode.com/problems/root-equals-sum-of-children",
        "1674": "https://leetcode.com/problems/find-closest-number-to-zero",
        "1675": "https://leetcode.com/problems/number-of-ways-to-buy-pens-and-pencils",
        "1676": "https://leetcode.com/problems/design-an-atm-machine",
        "1677": "https://leetcode.com/problems/maximum-score-of-a-node-sequence",
        "1678": "https://leetcode.com/problems/calculate-digit-sum-of-a-string",
        "1679": "https://leetcode.com/problems/minimum-rounds-to-complete-all-tasks",
        "1680": "https://leetcode.com/problems/maximum-trailing-zeros-in-a-cornered-path",
        "1681": "https://leetcode.com/problems/longest-path-with-different-adjacent-characters",
        "1682": "https://leetcode.com/problems/intersection-of-multiple-arrays",
        "1683": "https://leetcode.com/problems/count-lattice-points-inside-a-circle",
        "1684": "https://leetcode.com/problems/count-number-of-rectangles-containing-each-point",
        "1685": "https://leetcode.com/problems/number-of-flowers-in-full-bloom",
        "1686": "https://leetcode.com/problems/count-prefixes-of-a-given-string",
        "1687": "https://leetcode.com/problems/minimum-average-difference",
        "1688": "https://leetcode.com/problems/count-unguarded-cells-in-the-grid",
        "1689": "https://leetcode.com/problems/escape-the-spreading-fire",
        "1690": "https://leetcode.com/problems/remove-digit-from-number-to-maximize-result",
        "1691": "https://leetcode.com/problems/minimum-consecutive-cards-to-pick-up",
        "1692": "https://leetcode.com/problems/k-divisible-elements-subarrays",
        "1693": "https://leetcode.com/problems/total-appeal-of-a-string",
        "1694": "https://leetcode.com/problems/largest-3-same-digit-number-in-string",
        "1695": "https://leetcode.com/problems/count-number-of-texts",
        "1696": "https://leetcode.com/problems/check-if-there-is-a-valid-parentheses-string-path",
        "1697": "https://leetcode.com/problems/find-the-k-beauty-of-a-number",
        "1698": "https://leetcode.com/problems/maximum-white-tiles-covered-by-a-carpet",
        "1699": "https://leetcode.com/problems/substring-with-largest-variance",
        "1700": "https://leetcode.com/problems/find-resultant-array-after-removing-anagrams",
        "1701": "https://leetcode.com/problems/maximum-consecutive-floors-without-special-floors",
        "1702": "https://leetcode.com/problems/largest-combination-with-bitwise-and-greater-than-zero",
        "1703": "https://leetcode.com/problems/count-integers-in-intervals",
        "1704": "https://leetcode.com/problems/maximum-bags-with-full-capacity-of-rocks",
        "1705": "https://leetcode.com/problems/minimum-lines-to-represent-a-line-chart",
        "1706": "https://leetcode.com/problems/sum-of-total-strength-of-wizards",
        "1707": "https://leetcode.com/problems/check-if-number-has-equal-digit-count-and-digit-value",
        "1708": "https://leetcode.com/problems/sender-with-largest-word-count",
        "1709": "https://leetcode.com/problems/maximum-total-importance-of-roads",
        "1710": "https://leetcode.com/problems/booking-concert-tickets-in-groups",
        "1711": "https://leetcode.com/problems/rearrange-characters-to-make-target-string",
        "1712": "https://leetcode.com/problems/apply-discount-to-prices",
        "1713": "https://leetcode.com/problems/steps-to-make-array-non-decreasing",
        "1714": "https://leetcode.com/problems/minimum-obstacle-removal-to-reach-corner",
        "1715": "https://leetcode.com/problems/partition-array-such-that-maximum-difference-is-k",
        "1716": "https://leetcode.com/problems/replace-elements-in-an-array",
        "1717": "https://leetcode.com/problems/design-a-text-editor",
        "1718": "https://leetcode.com/problems/strong-password-checker-ii",
        "1719": "https://leetcode.com/problems/successful-pairs-of-spells-and-potions",
        "1720": "https://leetcode.com/problems/count-subarrays-with-score-less-than-k",
        "1721": "https://leetcode.com/problems/calculate-amount-paid-in-taxes",
        "1722": "https://leetcode.com/problems/minimum-path-cost-in-a-grid",
        "1723": "https://leetcode.com/problems/fair-distribution-of-cookies",
        "1724": "https://leetcode.com/problems/naming-a-company",
        "1725": "https://leetcode.com/problems/sum-of-numbers-with-units-digit-k",
        "1726": "https://leetcode.com/problems/longest-binary-subsequence-less-than-or-equal-to-k",
        "1727": "https://leetcode.com/problems/selling-pieces-of-wood",
        "1728": "https://leetcode.com/problems/count-asterisks",
        "1729": "https://leetcode.com/problems/maximum-xor-after-operations",
        "1730": "https://leetcode.com/problems/number-of-distinct-roll-sequences",
        "1731": "https://leetcode.com/problems/check-if-matrix-is-x-matrix",
        "1732": "https://leetcode.com/problems/count-number-of-ways-to-place-houses",
        "1733": "https://leetcode.com/problems/maximum-score-of-spliced-array",
        "1734": "https://leetcode.com/problems/minimum-score-after-removals-on-a-tree",
        "1735": "https://leetcode.com/problems/decode-the-message",
        "1736": "https://leetcode.com/problems/number-of-people-aware-of-a-secret",
        "1737": "https://leetcode.com/problems/number-of-increasing-paths-in-a-grid",
        "1738": "https://leetcode.com/problems/evaluate-boolean-binary-tree",
        "1739": "https://leetcode.com/problems/the-latest-time-to-catch-a-bus",
        "1740": "https://leetcode.com/problems/minimum-sum-of-squared-difference",
        "1741": "https://leetcode.com/problems/subarray-with-elements-greater-than-varying-threshold",
        "1742": "https://leetcode.com/problems/minimum-amount-of-time-to-fill-cups",
        "1743": "https://leetcode.com/problems/smallest-number-in-infinite-set",
        "1744": "https://leetcode.com/problems/move-pieces-to-obtain-a-string",
        "1745": "https://leetcode.com/problems/count-the-number-of-ideal-arrays",
        "1746": "https://leetcode.com/problems/maximum-number-of-pairs-in-array",
        "1747": "https://leetcode.com/problems/max-sum-of-a-pair-with-equal-sum-of-digits",
        "1748": "https://leetcode.com/problems/minimum-deletions-to-make-array-divisible",
        "1749": "https://leetcode.com/problems/best-poker-hand",
        "1750": "https://leetcode.com/problems/number-of-zero-filled-subarrays",
        "1751": "https://leetcode.com/problems/design-a-number-container-system",
        "1752": "https://leetcode.com/problems/shortest-impossible-sequence-of-rolls",
        "1753": "https://leetcode.com/problems/equal-row-and-column-pairs",
        "1754": "https://leetcode.com/problems/design-a-food-rating-system",
        "1755": "https://leetcode.com/problems/number-of-excellent-pairs",
        "1756": "https://leetcode.com/problems/number-of-unique-subjects-taught-by-each-teacher",
        "1757": "https://leetcode.com/problems/make-array-zero-by-subtracting-equal-amounts",
        "1758": "https://leetcode.com/problems/maximum-number-of-groups-entering-a-competition",
        "1759": "https://leetcode.com/problems/find-closest-node-to-given-two-nodes",
        "1760": "https://leetcode.com/problems/longest-cycle-in-a-graph",
        "1761": "https://leetcode.com/problems/merge-similar-items",
        "1762": "https://leetcode.com/problems/count-number-of-bad-pairs",
        "1763": "https://leetcode.com/problems/task-scheduler-ii",
        "1764": "https://leetcode.com/problems/number-of-arithmetic-triplets",
        "1765": "https://leetcode.com/problems/reachable-nodes-with-restrictions",
        "1766": "https://leetcode.com/problems/check-if-there-is-a-valid-partition-for-the-array",
        "1767": "https://leetcode.com/problems/longest-ideal-subsequence",
        "1768": "https://leetcode.com/problems/largest-local-values-in-a-matrix",
        "1769": "https://leetcode.com/problems/node-with-highest-edge-score",
        "1770": "https://leetcode.com/problems/construct-smallest-number-from-di-string",
        "1771": "https://leetcode.com/problems/count-special-integers",
        "1772": "https://leetcode.com/problems/minimum-recolors-to-get-k-consecutive-black-blocks",
        "1773": "https://leetcode.com/problems/time-needed-to-rearrange-a-binary-string",
        "1774": "https://leetcode.com/problems/shifting-letters-ii",
        "1775": "https://leetcode.com/problems/minimum-hours-of-training-to-win-a-competition",
        "1776": "https://leetcode.com/problems/largest-palindromic-number",
        "1777": "https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected",
        "1778": "https://leetcode.com/problems/find-the-k-sum-of-an-array",
        "1779": "https://leetcode.com/problems/longest-subsequence-with-limited-sum",
        "1780": "https://leetcode.com/problems/removing-stars-from-a-string",
        "1781": "https://leetcode.com/problems/minimum-amount-of-time-to-collect-garbage",
        "1782": "https://leetcode.com/problems/build-a-matrix-with-conditions",
        "1783": "https://leetcode.com/problems/find-subarrays-with-equal-sum",
        "1784": "https://leetcode.com/problems/strictly-palindromic-number",
        "1785": "https://leetcode.com/problems/maximum-rows-covered-by-columns",
        "1786": "https://leetcode.com/problems/maximum-number-of-robots-within-budget",
        "1787": "https://leetcode.com/problems/check-distances-between-same-letters",
        "1788": "https://leetcode.com/problems/number-of-ways-to-reach-a-position-after-exactly-k-steps",
        "1789": "https://leetcode.com/problems/meeting-rooms-iii",
        "1790": "https://leetcode.com/problems/optimal-partition-of-string",
        "1791": "https://leetcode.com/problems/divide-intervals-into-minimum-number-of-groups",
        "1792": "https://leetcode.com/problems/longest-increasing-subsequence-ii",
        "1793": "https://leetcode.com/problems/count-days-spent-together",
        "1794": "https://leetcode.com/problems/maximum-matching-of-players-with-trainers",
        "1795": "https://leetcode.com/problems/smallest-subarrays-with-maximum-bitwise-or",
        "1796": "https://leetcode.com/problems/minimum-money-required-before-transactions",
        "1797": "https://leetcode.com/problems/smallest-even-multiple",
        "1798": "https://leetcode.com/problems/length-of-the-longest-alphabetical-continuous-substring",
        "1799": "https://leetcode.com/problems/reverse-odd-levels-of-binary-tree",
        "1800": "https://leetcode.com/problems/sum-of-prefix-scores-of-strings",
        "1801": "https://leetcode.com/problems/sort-the-people",
        "1802": "https://leetcode.com/problems/longest-subarray-with-maximum-bitwise-and",
        "1803": "https://leetcode.com/problems/find-all-good-indices",
        "1804": "https://leetcode.com/problems/number-of-good-paths",
        "1805": "https://leetcode.com/problems/remove-letter-to-equalize-frequency",
        "1806": "https://leetcode.com/problems/longest-uploaded-prefix",
        "1807": "https://leetcode.com/problems/bitwise-xor-of-all-pairings",
        "1808": "https://leetcode.com/problems/number-of-pairs-satisfying-inequality",
        "1809": "https://leetcode.com/problems/number-of-common-factors",
        "1810": "https://leetcode.com/problems/maximum-sum-of-an-hourglass",
        "1811": "https://leetcode.com/problems/minimize-xor",
        "1812": "https://leetcode.com/problems/maximum-deletions-on-a-string",
        "1813": "https://leetcode.com/problems/the-employee-that-worked-on-the-longest-task",
        "1814": "https://leetcode.com/problems/find-the-original-array-of-prefix-xor",
        "1815": "https://leetcode.com/problems/using-a-robot-to-print-the-lexicographically-smallest-string",
        "1816": "https://leetcode.com/problems/paths-in-matrix-whose-sum-is-divisible-by-k",
        "1817": "https://leetcode.com/problems/range-product-queries-of-powers",
        "1818": "https://leetcode.com/problems/minimize-maximum-of-array",
        "1819": "https://leetcode.com/problems/create-components-with-same-value",
        "1820": "https://leetcode.com/problems/largest-positive-integer-that-exists-with-its-negative",
        "1821": "https://leetcode.com/problems/count-number-of-distinct-integers-after-reverse-operations",
        "1822": "https://leetcode.com/problems/sum-of-number-and-its-reverse",
        "1823": "https://leetcode.com/problems/count-subarrays-with-fixed-bounds",
        "1824": "https://leetcode.com/problems/determine-if-two-events-have-conflict",
        "1825": "https://leetcode.com/problems/number-of-subarrays-with-gcd-equal-to-k",
        "1826": "https://leetcode.com/problems/minimum-cost-to-make-array-equal",
        "1827": "https://leetcode.com/problems/minimum-number-of-operations-to-make-arrays-similar",
        "1828": "https://leetcode.com/problems/odd-string-difference",
        "1829": "https://leetcode.com/problems/words-within-two-edits-of-dictionary",
        "1830": "https://leetcode.com/problems/destroy-sequential-targets",
        "1831": "https://leetcode.com/problems/next-greater-element-iv",
        "1832": "https://leetcode.com/problems/average-value-of-even-numbers-that-are-divisible-by-three",
        "1833": "https://leetcode.com/problems/most-popular-video-creator",
        "1834": "https://leetcode.com/problems/minimum-addition-to-make-integer-beautiful",
        "1835": "https://leetcode.com/problems/height-of-binary-tree-after-subtree-removal-queries",
        "1836": "https://leetcode.com/problems/apply-operations-to-an-array",
        "1837": "https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k",
        "1838": "https://leetcode.com/problems/total-cost-to-hire-k-workers",
        "1839": "https://leetcode.com/problems/minimum-total-distance-traveled",
        "1840": "https://leetcode.com/problems/number-of-distinct-averages",
        "1841": "https://leetcode.com/problems/count-ways-to-build-good-strings",
        "1842": "https://leetcode.com/problems/most-profitable-path-in-a-tree",
        "1843": "https://leetcode.com/problems/convert-the-temperature",
        "1844": "https://leetcode.com/problems/number-of-subarrays-with-lcm-equal-to-k",
        "1845": "https://leetcode.com/problems/minimum-number-of-operations-to-sort-a-binary-tree-by-level",
        "1846": "https://leetcode.com/problems/maximum-number-of-non-overlapping-palindrome-substrings",
        "1847": "https://leetcode.com/problems/number-of-unequal-triplets-in-array",
        "1848": "https://leetcode.com/problems/closest-nodes-queries-in-a-binary-search-tree",
        "1849": "https://leetcode.com/problems/minimum-fuel-cost-to-report-to-the-capital",
        "1850": "https://leetcode.com/problems/number-of-beautiful-partitions",
        "1851": "https://leetcode.com/problems/minimum-cuts-to-divide-a-circle",
        "1852": "https://leetcode.com/problems/difference-between-ones-and-zeros-in-row-and-column",
        "1853": "https://leetcode.com/problems/count-palindromic-subsequences",
        "1854": "https://leetcode.com/problems/find-the-pivot-integer",
        "1855": "https://leetcode.com/problems/append-characters-to-string-to-make-subsequence",
        "1856": "https://leetcode.com/problems/remove-nodes-from-linked-list",
        "1857": "https://leetcode.com/problems/count-subarrays-with-median-k",
        "1858": "https://leetcode.com/problems/circular-sentence",
        "1859": "https://leetcode.com/problems/divide-players-into-teams-of-equal-skill",
        "1860": "https://leetcode.com/problems/divide-nodes-into-the-maximum-number-of-groups",
        "1861": "https://leetcode.com/problems/maximum-value-of-a-string-in-an-array",
        "1862": "https://leetcode.com/problems/maximum-star-sum-of-a-graph",
        "1863": "https://leetcode.com/problems/frog-jump-ii",
        "1864": "https://leetcode.com/problems/minimum-total-cost-to-make-arrays-unequal",
        "1865": "https://leetcode.com/problems/delete-greatest-value-in-each-row",
        "1866": "https://leetcode.com/problems/longest-square-streak-in-an-array",
        "1867": "https://leetcode.com/problems/design-memory-allocator",
        "1868": "https://leetcode.com/problems/maximum-number-of-points-from-grid-queries",
        "1869": "https://leetcode.com/problems/count-pairs-of-similar-strings",
        "1870": "https://leetcode.com/problems/smallest-value-after-replacing-with-sum-of-prime-factors",
        "1871": "https://leetcode.com/problems/add-edges-to-make-degrees-of-all-nodes-even",
        "1872": "https://leetcode.com/problems/cycle-length-queries-in-a-tree",
        "1873": "https://leetcode.com/problems/maximum-enemy-forts-that-can-be-captured",
        "1874": "https://leetcode.com/problems/reward-top-k-students",
        "1875": "https://leetcode.com/problems/minimize-the-maximum-of-two-arrays",
        "1876": "https://leetcode.com/problems/count-anagrams",
        "1877": "https://leetcode.com/problems/shortest-distance-to-target-string-in-a-circular-array",
        "1878": "https://leetcode.com/problems/take-k-of-each-character-from-left-and-right",
        "1879": "https://leetcode.com/problems/maximum-tastiness-of-candy-basket",
        "1880": "https://leetcode.com/problems/number-of-great-partitions",
        "1881": "https://leetcode.com/problems/count-the-digits-that-divide-a-number",
        "1882": "https://leetcode.com/problems/distinct-prime-factors-of-product-of-array",
        "1883": "https://leetcode.com/problems/partition-string-into-substrings-with-values-at-most-k",
        "1884": "https://leetcode.com/problems/closest-prime-numbers-in-range",
        "1885": "https://leetcode.com/problems/categorize-box-according-to-criteria",
        "1886": "https://leetcode.com/problems/find-consecutive-integers-from-a-data-stream",
        "1887": "https://leetcode.com/problems/find-xor-beauty-of-array",
        "1888": "https://leetcode.com/problems/maximize-the-minimum-powered-city",
        "1889": "https://leetcode.com/problems/maximum-count-of-positive-integer-and-negative-integer",
        "1890": "https://leetcode.com/problems/maximal-score-after-applying-k-operations",
        "1891": "https://leetcode.com/problems/make-number-of-distinct-characters-equal",
        "1892": "https://leetcode.com/problems/time-to-cross-a-bridge",
        "1893": "https://leetcode.com/problems/difference-between-element-sum-and-digit-sum-of-an-array",
        "1894": "https://leetcode.com/problems/increment-submatrices-by-one",
        "1895": "https://leetcode.com/problems/count-the-number-of-good-subarrays",
        "1896": "https://leetcode.com/problems/difference-between-maximum-and-minimum-price-sum",
        "1897": "https://leetcode.com/problems/minimum-common-value",
        "1898": "https://leetcode.com/problems/minimum-operations-to-make-array-equal-ii",
        "1899": "https://leetcode.com/problems/maximum-subsequence-score",
        "1900": "https://leetcode.com/problems/check-if-point-is-reachable",
        "1901": "https://leetcode.com/problems/alternating-digit-sum",
        "1902": "https://leetcode.com/problems/sort-the-students-by-their-kth-score",
        "1903": "https://leetcode.com/problems/apply-bitwise-operations-to-make-strings-equal",
        "1904": "https://leetcode.com/problems/minimum-cost-to-split-an-array",
        "1905": "https://leetcode.com/problems/count-distinct-numbers-on-board",
        "1906": "https://leetcode.com/problems/count-collisions-of-monkeys-on-a-polygon",
        "1907": "https://leetcode.com/problems/put-marbles-in-bags",
        "1908": "https://leetcode.com/problems/count-increasing-quadruplets",
        "1909": "https://leetcode.com/problems/separate-the-digits-in-an-array",
        "1910": "https://leetcode.com/problems/maximum-number-of-integers-to-choose-from-a-range-i",
        "1911": "https://leetcode.com/problems/maximize-win-from-two-segments",
        "1912": "https://leetcode.com/problems/disconnect-path-in-a-binary-matrix-by-at-most-one-flip",
        "1913": "https://leetcode.com/problems/take-gifts-from-the-richest-pile",
        "1914": "https://leetcode.com/problems/count-vowel-strings-in-ranges",
        "1915": "https://leetcode.com/problems/house-robber-iv",
        "1916": "https://leetcode.com/problems/rearranging-fruits",
        "1917": "https://leetcode.com/problems/find-the-array-concatenation-value",
        "1918": "https://leetcode.com/problems/count-the-number-of-fair-pairs",
        "1919": "https://leetcode.com/problems/substring-xor-queries",
        "1920": "https://leetcode.com/problems/subsequence-with-the-minimum-score",
        "1921": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit",
        "1922": "https://leetcode.com/problems/minimum-score-by-changing-two-elements",
        "1923": "https://leetcode.com/problems/minimum-impossible-or",
        "1924": "https://leetcode.com/problems/handling-sum-queries-after-update",
        "1925": "https://leetcode.com/problems/merge-two-2d-arrays-by-summing-values",
        "1926": "https://leetcode.com/problems/minimum-operations-to-reduce-an-integer-to-0",
        "1927": "https://leetcode.com/problems/count-the-number-of-square-free-subsets",
        "1928": "https://leetcode.com/problems/find-the-string-with-lcp",
        "1929": "https://leetcode.com/problems/left-and-right-sum-differences",
        "1930": "https://leetcode.com/problems/find-the-divisibility-array-of-a-string",
        "1931": "https://leetcode.com/problems/find-the-maximum-number-of-marked-indices",
        "1932": "https://leetcode.com/problems/minimum-time-to-visit-a-cell-in-a-grid",
        "1933": "https://leetcode.com/problems/split-with-minimum-sum",
        "1934": "https://leetcode.com/problems/count-total-number-of-colored-cells",
        "1935": "https://leetcode.com/problems/count-ways-to-group-overlapping-ranges",
        "1936": "https://leetcode.com/problems/count-number-of-possible-root-nodes",
        "1937": "https://leetcode.com/problems/pass-the-pillow",
        "1938": "https://leetcode.com/problems/kth-largest-sum-in-a-binary-tree",
        "1939": "https://leetcode.com/problems/split-the-array-to-make-coprime-products",
        "1940": "https://leetcode.com/problems/number-of-ways-to-earn-points",
        "1941": "https://leetcode.com/problems/count-the-number-of-vowel-strings-in-range",
        "1942": "https://leetcode.com/problems/rearrange-array-to-maximize-prefix-score",
        "1943": "https://leetcode.com/problems/count-the-number-of-beautiful-subarrays",
        "1944": "https://leetcode.com/problems/minimum-time-to-complete-all-tasks",
        "1945": "https://leetcode.com/problems/distribute-money-to-maximum-children",
        "1946": "https://leetcode.com/problems/maximize-greatness-of-an-array",
        "1947": "https://leetcode.com/problems/find-score-of-an-array-after-marking-all-elements",
        "1948": "https://leetcode.com/problems/minimum-time-to-repair-cars",
        "1949": "https://leetcode.com/problems/number-of-even-and-odd-bits",
        "1950": "https://leetcode.com/problems/check-knight-tour-configuration",
        "1951": "https://leetcode.com/problems/the-number-of-beautiful-subsets",
        "1952": "https://leetcode.com/problems/k-items-with-the-maximum-sum",
        "1953": "https://leetcode.com/problems/minimum-operations-to-make-all-array-elements-equal",
        "1954": "https://leetcode.com/problems/collect-coins-in-a-tree",
        "1955": "https://leetcode.com/problems/form-smallest-number-from-two-digit-arrays",
        "1956": "https://leetcode.com/problems/shortest-cycle-in-a-graph",
        "1957": "https://leetcode.com/problems/find-the-longest-balanced-substring-of-a-binary-string",
        "1958": "https://leetcode.com/problems/convert-an-array-into-a-2d-array-with-conditions",
        "1959": "https://leetcode.com/problems/mice-and-cheese",
        "1960": "https://leetcode.com/problems/minimum-reverse-operations",
        "1961": "https://leetcode.com/problems/sum-of-distances",
        "1962": "https://leetcode.com/problems/minimum-number-of-visited-cells-in-a-grid",
        "1963": "https://leetcode.com/problems/check-if-object-instance-of-class",
        "1964": "https://leetcode.com/problems/array-prototype-last",
        "1965": "https://leetcode.com/problems/counter",
        "1966": "https://leetcode.com/problems/sleep",
        "1967": "https://leetcode.com/problems/cache-with-time-limit",
        "1968": "https://leetcode.com/problems/memoize",
        "1969": "https://leetcode.com/problems/snail-traversal",
        "1970": "https://leetcode.com/problems/flatten-deeply-nested-array",
        "1971": "https://leetcode.com/problems/array-reduce-transformation",
        "1972": "https://leetcode.com/problems/debounce",
        "1973": "https://leetcode.com/problems/function-composition",
        "1974": "https://leetcode.com/problems/memoize-ii",
        "1975": "https://leetcode.com/problems/group-by",
        "1976": "https://leetcode.com/problems/filter-elements-from-array",
        "1977": "https://leetcode.com/problems/apply-transform-over-each-element-in-array",
        "1978": "https://leetcode.com/problems/promise-time-limit",
        "1979": "https://leetcode.com/problems/find-the-width-of-columns-of-a-grid",
        "1980": "https://leetcode.com/problems/find-the-score-of-all-prefixes-of-an-array",
        "1981": "https://leetcode.com/problems/cousins-in-binary-tree-ii",
        "1982": "https://leetcode.com/problems/design-graph-with-shortest-path-calculator",
        "1983": "https://leetcode.com/problems/row-with-maximum-ones",
        "1984": "https://leetcode.com/problems/find-the-maximum-divisibility-score",
        "1985": "https://leetcode.com/problems/minimum-additions-to-make-valid-string",
        "1986": "https://leetcode.com/problems/minimize-the-total-price-of-the-trips",
        "1987": "https://leetcode.com/problems/generate-fibonacci-sequence",
        "1988": "https://leetcode.com/problems/design-cancellable-function",
        "1989": "https://leetcode.com/problems/calculate-delayed-arrival-time",
        "1990": "https://leetcode.com/problems/sum-multiples",
        "1991": "https://leetcode.com/problems/sliding-subarray-beauty",
        "1992": "https://leetcode.com/problems/minimum-number-of-operations-to-make-all-array-elements-equal-to-1",
        "1993": "https://leetcode.com/problems/maximum-sum-with-exactly-k-elements",
        "1994": "https://leetcode.com/problems/find-the-prefix-common-array-of-two-arrays",
        "1995": "https://leetcode.com/problems/maximum-number-of-fish-in-a-grid",
        "1996": "https://leetcode.com/problems/make-array-empty",
        "1997": "https://leetcode.com/problems/determine-the-winner-of-a-bowling-game",
        "1998": "https://leetcode.com/problems/first-completely-painted-row-or-column",
        "1999": "https://leetcode.com/problems/minimum-cost-of-a-path-with-special-roads",
        "2000": "https://leetcode.com/problems/lexicographically-smallest-beautiful-string",
        "2001": "https://leetcode.com/problems/counter-ii",
        "2002": "https://leetcode.com/problems/allow-one-function-call",
        "2003": "https://leetcode.com/problems/create-hello-world-function",
        "2004": "https://leetcode.com/problems/find-the-distinct-difference-array",
        "2005": "https://leetcode.com/problems/frequency-tracker",
        "2006": "https://leetcode.com/problems/number-of-adjacent-elements-with-the-same-color",
        "2007": "https://leetcode.com/problems/make-costs-of-paths-equal-in-a-binary-tree",
        "2008": "https://leetcode.com/problems/number-of-senior-citizens",
        "2009": "https://leetcode.com/problems/sum-in-a-matrix",
        "2010": "https://leetcode.com/problems/maximum-or",
        "2011": "https://leetcode.com/problems/power-of-heroes",
        "2012": "https://leetcode.com/problems/find-the-losers-of-the-circular-game",
        "2013": "https://leetcode.com/problems/neighboring-bitwise-xor",
        "2014": "https://leetcode.com/problems/maximum-number-of-moves-in-a-grid",
        "2015": "https://leetcode.com/problems/count-the-number-of-complete-components",
        "2016": "https://leetcode.com/problems/call-function-with-custom-context",
        "2017": "https://leetcode.com/problems/event-emitter",
        "2018": "https://leetcode.com/problems/array-wrapper",
        "2019": "https://leetcode.com/problems/minimum-string-length-after-removing-substrings",
        "2020": "https://leetcode.com/problems/lexicographically-smallest-palindrome",
        "2021": "https://leetcode.com/problems/find-the-punishment-number-of-an-integer",
        "2022": "https://leetcode.com/problems/modify-graph-edge-weights",
        "2023": "https://leetcode.com/problems/return-length-of-arguments-passed",
        "2024": "https://leetcode.com/problems/to-be-or-not-to-be",
        "2025": "https://leetcode.com/problems/compact-object",
        "2026": "https://leetcode.com/problems/buy-two-chocolates",
        "2027": "https://leetcode.com/problems/extra-characters-in-a-string",
        "2028": "https://leetcode.com/problems/maximum-strength-of-a-group",
        "2029": "https://leetcode.com/problems/remove-trailing-zeros-from-a-string",
        "2030": "https://leetcode.com/problems/difference-of-number-of-distinct-values-on-diagonals",
        "2031": "https://leetcode.com/problems/minimum-cost-to-make-all-characters-equal",
        "2032": "https://leetcode.com/problems/maximum-strictly-increasing-cells-in-a-matrix",
        "2033": "https://leetcode.com/problems/timeout-cancellation",
        "2034": "https://leetcode.com/problems/minimize-string-length",
        "2035": "https://leetcode.com/problems/semi-ordered-permutation",
        "2036": "https://leetcode.com/problems/sum-of-matrix-after-queries",
        "2037": "https://leetcode.com/problems/count-of-integers",
        "2038": "https://leetcode.com/problems/execute-asynchronous-functions-in-parallel",
        "2039": "https://leetcode.com/problems/join-two-arrays-by-id",
        "2040": "https://leetcode.com/problems/add-two-promises",
        "2041": "https://leetcode.com/problems/sort-by",
        "2042": "https://leetcode.com/problems/interval-cancellation",
        "2043": "https://leetcode.com/problems/calculator-with-method-chaining",
        "2044": "https://leetcode.com/problems/is-object-empty",
        "2045": "https://leetcode.com/problems/check-if-the-number-is-fascinating",
        "2046": "https://leetcode.com/problems/find-the-longest-semi-repetitive-substring",
        "2047": "https://leetcode.com/problems/movement-of-robots",
        "2048": "https://leetcode.com/problems/find-a-good-subset-of-the-matrix",
        "2049": "https://leetcode.com/problems/neither-minimum-nor-maximum",
        "2050": "https://leetcode.com/problems/collecting-chocolates",
        "2051": "https://leetcode.com/problems/maximum-sum-queries",
        "2052": "https://leetcode.com/problems/total-distance-traveled",
        "2053": "https://leetcode.com/problems/find-the-value-of-the-partition",
        "2054": "https://leetcode.com/problems/special-permutations",
        "2055": "https://leetcode.com/problems/find-maximum-number-of-string-pairs",
        "2056": "https://leetcode.com/problems/construct-the-longest-new-string",
        "2057": "https://leetcode.com/problems/decremental-string-concatenation",
        "2058": "https://leetcode.com/problems/count-zero-request-servers",
        "2059": "https://leetcode.com/problems/number-of-beautiful-pairs",
        "2060": "https://leetcode.com/problems/minimum-operations-to-make-the-integer-zero",
        "2061": "https://leetcode.com/problems/ways-to-split-array-into-good-subarrays",
        "2062": "https://leetcode.com/problems/robot-collisions",
        "2063": "https://leetcode.com/problems/longest-even-odd-subarray-with-threshold",
        "2064": "https://leetcode.com/problems/prime-pairs-with-target-sum",
        "2065": "https://leetcode.com/problems/continuous-subarrays",
        "2066": "https://leetcode.com/problems/longest-alternating-subarray",
        "2067": "https://leetcode.com/problems/relocate-marbles",
        "2068": "https://leetcode.com/problems/partition-string-into-minimum-beautiful-substrings",
        "2069": "https://leetcode.com/problems/number-of-black-blocks",
        "2070": "https://leetcode.com/problems/find-the-maximum-achievable-number",
        "2071": "https://leetcode.com/problems/maximum-number-of-jumps-to-reach-the-last-index",
        "2072": "https://leetcode.com/problems/longest-non-decreasing-subarray-from-two-arrays",
        "2073": "https://leetcode.com/problems/sum-of-squares-of-special-elements",
        "2074": "https://leetcode.com/problems/maximum-beauty-of-an-array-after-applying-operation",
        "2075": "https://leetcode.com/problems/minimum-index-of-a-valid-split",
        "2076": "https://leetcode.com/problems/length-of-the-longest-valid-substring",
        "2077": "https://leetcode.com/problems/check-if-array-is-good",
        "2078": "https://leetcode.com/problems/sort-vowels-in-a-string",
        "2079": "https://leetcode.com/problems/visit-array-positions-to-maximize-score",
        "2080": "https://leetcode.com/problems/ways-to-express-an-integer-as-sum-of-powers",
        "2081": "https://leetcode.com/problems/split-strings-by-separator",
        "2082": "https://leetcode.com/problems/largest-element-in-an-array-after-merge-operations",
        "2083": "https://leetcode.com/problems/maximum-number-of-groups-with-increasing-length",
        "2084": "https://leetcode.com/problems/count-paths-that-can-form-a-palindrome-in-a-tree",
        "2085": "https://leetcode.com/problems/number-of-employees-who-met-the-target",
        "2086": "https://leetcode.com/problems/count-complete-subarrays-in-an-array",
        "2087": "https://leetcode.com/problems/shortest-string-that-contains-three-strings",
        "2088": "https://leetcode.com/problems/count-stepping-numbers-in-range",
        "2089": "https://leetcode.com/problems/account-balance-after-rounded-purchase",
        "2090": "https://leetcode.com/problems/insert-greatest-common-divisors-in-linked-list",
        "2091": "https://leetcode.com/problems/minimum-seconds-to-equalize-a-circular-array",
        "2092": "https://leetcode.com/problems/minimum-time-to-make-array-sum-at-most-x",
        "2093": "https://leetcode.com/problems/faulty-keyboard",
        "2094": "https://leetcode.com/problems/check-if-it-is-possible-to-split-array",
        "2095": "https://leetcode.com/problems/find-the-safest-path-in-a-grid",
        "2096": "https://leetcode.com/problems/maximum-elegance-of-a-k-length-subsequence",
        "2097": "https://leetcode.com/problems/max-pair-sum-in-an-array",
        "2098": "https://leetcode.com/problems/double-a-number-represented-as-a-linked-list",
        "2099": "https://leetcode.com/problems/minimum-absolute-difference-between-elements-with-constraint",
        "2100": "https://leetcode.com/problems/apply-operations-to-maximize-score",
        "2101": "https://leetcode.com/problems/count-pairs-whose-sum-is-less-than-target",
        "2102": "https://leetcode.com/problems/make-string-a-subsequence-using-cyclic-increments",
        "2103": "https://leetcode.com/problems/sorting-three-groups",
        "2104": "https://leetcode.com/problems/number-of-beautiful-integers-in-the-range",
        "2105": "https://leetcode.com/problems/check-if-a-string-is-an-acronym-of-words",
        "2106": "https://leetcode.com/problems/determine-the-minimum-sum-of-a-k-avoiding-array",
        "2107": "https://leetcode.com/problems/maximize-the-profit-as-the-salesman",
        "2108": "https://leetcode.com/problems/find-the-longest-equal-subarray",
        "2109": "https://leetcode.com/problems/furthest-point-from-origin",
        "2110": "https://leetcode.com/problems/find-the-minimum-possible-sum-of-a-beautiful-array",
        "2111": "https://leetcode.com/problems/minimum-operations-to-form-subsequence-with-target-sum",
        "2112": "https://leetcode.com/problems/maximize-value-of-function-in-a-ball-passing-game",
        "2113": "https://leetcode.com/problems/check-if-strings-can-be-made-equal-with-operations-i",
        "2114": "https://leetcode.com/problems/check-if-strings-can-be-made-equal-with-operations-ii",
        "2115": "https://leetcode.com/problems/maximum-sum-of-almost-unique-subarray",
        "2116": "https://leetcode.com/problems/count-k-subsequences-of-a-string-with-maximum-beauty",
        "2117": "https://leetcode.com/problems/count-symmetric-integers",
        "2118": "https://leetcode.com/problems/count-of-interesting-subarrays",
        "2119": "https://leetcode.com/problems/minimum-edge-weight-equilibrium-queries-in-a-tree",
        "2120": "https://leetcode.com/problems/points-that-intersect-with-cars",
        "2121": "https://leetcode.com/problems/determine-if-a-cell-is-reachable-at-a-given-time",
        "2122": "https://leetcode.com/problems/minimum-moves-to-spread-stones-over-grid",
        "2123": "https://leetcode.com/problems/string-transformation",
        "2124": "https://leetcode.com/problems/minimum-right-shifts-to-sort-the-array",
        "2125": "https://leetcode.com/problems/minimum-array-length-after-pair-removals",
        "2126": "https://leetcode.com/problems/count-pairs-of-points-with-distance-k",
        "2127": "https://leetcode.com/problems/happy-students",
        "2128": "https://leetcode.com/problems/maximum-number-of-alloys",
        "2129": "https://leetcode.com/problems/maximum-element-sum-of-a-complete-subset-of-indices",
        "2130": "https://leetcode.com/problems/maximum-odd-binary-number",
        "2131": "https://leetcode.com/problems/beautiful-towers-i",
        "2132": "https://leetcode.com/problems/beautiful-towers-ii",
        "2133": "https://leetcode.com/problems/count-valid-paths-in-a-tree",
        "2134": "https://leetcode.com/problems/minimum-operations-to-collect-elements",
        "2135": "https://leetcode.com/problems/minimum-number-of-operations-to-make-array-empty",
        "2136": "https://leetcode.com/problems/split-array-into-maximum-number-of-subarrays",
        "2137": "https://leetcode.com/problems/maximum-number-of-k-divisible-components",
        "2138": "https://leetcode.com/problems/maximum-value-of-an-ordered-triplet-i",
        "2139": "https://leetcode.com/problems/maximum-value-of-an-ordered-triplet-ii",
        "2140": "https://leetcode.com/problems/minimum-size-subarray-in-infinite-array",
        "2141": "https://leetcode.com/problems/count-visited-nodes-in-a-directed-graph",
        "2142": "https://leetcode.com/problems/create-a-dataframe-from-list",
        "2143": "https://leetcode.com/problems/get-the-size-of-a-dataframe",
        "2144": "https://leetcode.com/problems/display-the-first-three-rows",
        "2145": "https://leetcode.com/problems/select-data",
        "2146": "https://leetcode.com/problems/create-a-new-column",
        "2147": "https://leetcode.com/problems/drop-duplicate-rows",
        "2148": "https://leetcode.com/problems/drop-missing-data",
        "2149": "https://leetcode.com/problems/modify-columns",
        "2150": "https://leetcode.com/problems/rename-columns",
        "2151": "https://leetcode.com/problems/change-data-type",
        "2152": "https://leetcode.com/problems/fill-missing-data",
        "2153": "https://leetcode.com/problems/reshape-data-concatenate",
        "2154": "https://leetcode.com/problems/reshape-data-pivot",
        "2155": "https://leetcode.com/problems/reshape-data-melt",
        "2156": "https://leetcode.com/problems/method-chaining",
        "2157": "https://leetcode.com/problems/divisible-and-non-divisible-sums-difference",
        "2158": "https://leetcode.com/problems/minimum-processing-time",
        "2159": "https://leetcode.com/problems/apply-operations-on-array-to-maximize-sum-of-squares",
        "2160": "https://leetcode.com/problems/last-visited-integers",
        "2161": "https://leetcode.com/problems/longest-unequal-adjacent-groups-subsequence-i",
        "2162": "https://leetcode.com/problems/longest-unequal-adjacent-groups-subsequence-ii",
        "2163": "https://leetcode.com/problems/count-of-sub-multisets-with-bounded-sum",
        "2164": "https://leetcode.com/problems/find-indices-with-index-and-value-difference-i",
        "2165": "https://leetcode.com/problems/shortest-and-lexicographically-smallest-beautiful-string",
        "2166": "https://leetcode.com/problems/find-indices-with-index-and-value-difference-ii",
        "2167": "https://leetcode.com/problems/construct-product-matrix",
        "2168": "https://leetcode.com/problems/minimum-sum-of-mountain-triplets-i",
        "2169": "https://leetcode.com/problems/minimum-number-of-groups-to-create-a-valid-assignment",
        "2170": "https://leetcode.com/problems/minimum-changes-to-make-k-semi-palindromes",
        "2171": "https://leetcode.com/problems/subarrays-distinct-element-sum-of-squares-i",
        "2172": "https://leetcode.com/problems/minimum-number-of-changes-to-make-binary-string-beautiful",
        "2173": "https://leetcode.com/problems/length-of-the-longest-subsequence-that-sums-to-target",
        "2174": "https://leetcode.com/problems/subarrays-distinct-element-sum-of-squares-ii",
        "2175": "https://leetcode.com/problems/minimum-increment-operations-to-make-array-beautiful",
        "2176": "https://leetcode.com/problems/maximum-points-after-collecting-coins-from-all-nodes",
        "2177": "https://leetcode.com/problems/find-champion-i",
        "2178": "https://leetcode.com/problems/find-champion-ii",
        "2179": "https://leetcode.com/problems/maximum-score-after-applying-operations-on-a-tree",
        "2180": "https://leetcode.com/problems/maximum-balanced-subsequence-sum",
        "2181": "https://leetcode.com/problems/distribute-candies-among-children-i",
        "2182": "https://leetcode.com/problems/distribute-candies-among-children-ii",
        "2183": "https://leetcode.com/problems/number-of-strings-which-can-be-rearranged-to-contain-substring",
        "2184": "https://leetcode.com/problems/maximum-spending-after-buying-items",
        "2185": "https://leetcode.com/problems/maximum-strong-pair-xor-i",
        "2186": "https://leetcode.com/problems/high-access-employees",
        "2187": "https://leetcode.com/problems/minimum-operations-to-maximize-last-elements-in-arrays",
        "2188": "https://leetcode.com/problems/maximum-strong-pair-xor-ii",
        "2189": "https://leetcode.com/problems/make-three-strings-equal",
        "2190": "https://leetcode.com/problems/separate-black-and-white-balls",
        "2191": "https://leetcode.com/problems/maximum-xor-product",
        "2192": "https://leetcode.com/problems/find-building-where-alice-and-bob-can-meet",
        "2193": "https://leetcode.com/problems/find-words-containing-character",
        "2194": "https://leetcode.com/problems/maximize-area-of-square-hole-in-grid",
        "2195": "https://leetcode.com/problems/minimum-number-of-coins-for-fruits",
        "2196": "https://leetcode.com/problems/find-maximum-non-decreasing-array-length",
        "2197": "https://leetcode.com/problems/matrix-similarity-after-cyclic-shifts",
        "2198": "https://leetcode.com/problems/count-beautiful-substrings-i",
        "2199": "https://leetcode.com/problems/make-lexicographically-smallest-array-by-swapping-elements",
        "2200": "https://leetcode.com/problems/count-beautiful-substrings-ii",
        "2201": "https://leetcode.com/problems/find-the-peaks",
        "2202": "https://leetcode.com/problems/minimum-number-of-coins-to-be-added",
        "2203": "https://leetcode.com/problems/count-complete-substrings",
        "2204": "https://leetcode.com/problems/count-the-number-of-infection-sequences",
        "2205": "https://leetcode.com/problems/find-common-elements-between-two-arrays",
        "2206": "https://leetcode.com/problems/remove-adjacent-almost-equal-characters",
        "2207": "https://leetcode.com/problems/length-of-longest-subarray-with-at-most-k-frequency",
        "2208": "https://leetcode.com/problems/number-of-possible-sets-of-closing-branches",
        "2209": "https://leetcode.com/problems/count-tested-devices-after-test-operations",
        "2210": "https://leetcode.com/problems/double-modular-exponentiation",
        "2211": "https://leetcode.com/problems/count-subarrays-where-max-element-appears-at-least-k-times",
        "2212": "https://leetcode.com/problems/count-the-number-of-good-partitions",
        "2213": "https://leetcode.com/problems/find-missing-and-repeated-values",
        "2214": "https://leetcode.com/problems/divide-array-into-arrays-with-max-difference",
        "2215": "https://leetcode.com/problems/minimum-cost-to-make-array-equalindromic",
        "2216": "https://leetcode.com/problems/count-the-number-of-incremovable-subarrays-i",
        "2217": "https://leetcode.com/problems/find-polygon-with-the-largest-perimeter",
        "2218": "https://leetcode.com/problems/count-the-number-of-incremovable-subarrays-ii",
        "2219": "https://leetcode.com/problems/find-number-of-coins-to-place-in-tree-nodes",
        "2220": "https://leetcode.com/problems/maximum-square-area-by-removing-fences-from-a-field",
        "2221": "https://leetcode.com/problems/minimum-cost-to-convert-string-i",
        "2222": "https://leetcode.com/problems/minimum-cost-to-convert-string-ii",
        "2223": "https://leetcode.com/problems/check-if-bitwise-or-has-trailing-zeros",
        "2224": "https://leetcode.com/problems/find-longest-special-substring-that-occurs-thrice-i",
        "2225": "https://leetcode.com/problems/find-longest-special-substring-that-occurs-thrice-ii",
        "2226": "https://leetcode.com/problems/palindrome-rearrangement-queries",
        "2227": "https://leetcode.com/problems/minimum-number-of-operations-to-make-array-xor-equal-to-k",
        "2228": "https://leetcode.com/problems/minimum-number-of-operations-to-make-x-and-y-equal",
        "2229": "https://leetcode.com/problems/count-the-number-of-powerful-integers",
        "2230": "https://leetcode.com/problems/maximum-area-of-longest-diagonal-rectangle",
        "2231": "https://leetcode.com/problems/minimum-moves-to-capture-the-queen",
        "2232": "https://leetcode.com/problems/maximum-size-of-a-set-after-removals",
        "2233": "https://leetcode.com/problems/maximize-the-number-of-partitions-after-operations",
        "2234": "https://leetcode.com/problems/count-elements-with-maximum-frequency",
        "2235": "https://leetcode.com/problems/find-beautiful-indices-in-the-given-array-i",
        "2236": "https://leetcode.com/problems/maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k",
        "2237": "https://leetcode.com/problems/find-beautiful-indices-in-the-given-array-ii",
        "2238": "https://leetcode.com/problems/divide-an-array-into-subarrays-with-minimum-cost-i",
        "2239": "https://leetcode.com/problems/find-if-array-can-be-sorted",
        "2240": "https://leetcode.com/problems/minimize-length-of-array-using-operations",
        "2241": "https://leetcode.com/problems/divide-an-array-into-subarrays-with-minimum-cost-ii",
        "2242": "https://leetcode.com/problems/minimum-number-of-pushes-to-type-word-i",
        "2243": "https://leetcode.com/problems/count-the-number-of-houses-at-a-certain-distance-i",
        "2244": "https://leetcode.com/problems/minimum-number-of-pushes-to-type-word-ii",
        "2245": "https://leetcode.com/problems/count-the-number-of-houses-at-a-certain-distance-ii",
        "2246": "https://leetcode.com/problems/number-of-changing-keys",
        "2247": "https://leetcode.com/problems/alice-and-bob-playing-flower-game",
        "2248": "https://leetcode.com/problems/minimize-or-of-remaining-elements-using-operations",
        "2249": "https://leetcode.com/problems/type-of-triangle",
        "2250": "https://leetcode.com/problems/find-the-number-of-ways-to-place-people-i",
        "2251": "https://leetcode.com/problems/maximum-good-subarray-sum",
        "2252": "https://leetcode.com/problems/find-the-number-of-ways-to-place-people-ii",
        "2253": "https://leetcode.com/problems/ant-on-the-boundary",
        "2254": "https://leetcode.com/problems/minimum-time-to-revert-word-to-initial-state-i",
        "2255": "https://leetcode.com/problems/find-the-grid-of-region-average",
        "2256": "https://leetcode.com/problems/modify-the-matrix",
        "2257": "https://leetcode.com/problems/number-of-subarrays-that-match-a-pattern-i",
        "2258": "https://leetcode.com/problems/maximum-palindromes-after-operations",
        "2259": "https://leetcode.com/problems/maximum-number-of-operations-with-the-same-score-i",
        "2260": "https://leetcode.com/problems/apply-operations-to-make-string-empty",
        "2261": "https://leetcode.com/problems/maximum-number-of-operations-with-the-same-score-ii",
        "2262": "https://leetcode.com/problems/maximize-consecutive-elements-in-an-array-after-modification",
        "2263": "https://leetcode.com/problems/count-prefix-and-suffix-pairs-i",
        "2264": "https://leetcode.com/problems/find-the-length-of-the-longest-common-prefix",
        "2265": "https://leetcode.com/problems/most-frequent-prime",
        "2266": "https://leetcode.com/problems/split-the-array",
        "2267": "https://leetcode.com/problems/find-the-largest-area-of-square-inside-two-rectangles",
        "2268": "https://leetcode.com/problems/earliest-second-to-mark-indices-i",
        "2269": "https://leetcode.com/problems/earliest-second-to-mark-indices-ii",
        "2270": "https://leetcode.com/problems/minimum-operations-to-exceed-threshold-value-i",
        "2271": "https://leetcode.com/problems/minimum-operations-to-exceed-threshold-value-ii",
        "2272": "https://leetcode.com/problems/count-pairs-of-connectable-servers-in-a-weighted-tree-network",
        "2273": "https://leetcode.com/problems/find-the-maximum-sum-of-node-values",
        "2274": "https://leetcode.com/problems/distribute-elements-into-two-arrays-i",
        "2275": "https://leetcode.com/problems/distribute-elements-into-two-arrays-ii",
        "2276": "https://leetcode.com/problems/apple-redistribution-into-boxes",
        "2277": "https://leetcode.com/problems/shortest-uncommon-substring-in-an-array",
        "2278": "https://leetcode.com/problems/maximum-strength-of-k-disjoint-subarrays",
        "2279": "https://leetcode.com/problems/find-the-sum-of-encrypted-integers",
        "2280": "https://leetcode.com/problems/mark-elements-on-array-by-performing-queries",
        "2281": "https://leetcode.com/problems/replace-question-marks-in-string-to-minimize-its-value",
        "2282": "https://leetcode.com/problems/find-the-sum-of-the-power-of-all-subsequences",
        "2283": "https://leetcode.com/problems/existence-of-a-substring-in-a-string-and-its-reverse",
        "2284": "https://leetcode.com/problems/count-substrings-starting-and-ending-with-given-character",
        "2285": "https://leetcode.com/problems/minimum-deletions-to-make-string-k-special",
        "2286": "https://leetcode.com/problems/minimum-moves-to-pick-k-ones",
        "2287": "https://leetcode.com/problems/maximum-length-substring-with-two-occurrences",
        "2288": "https://leetcode.com/problems/apply-operations-to-make-sum-of-array-greater-than-or-equal-to-k",
        "2289": "https://leetcode.com/problems/most-frequent-ids",
        "2290": "https://leetcode.com/problems/longest-common-suffix-queries",
        "2291": "https://leetcode.com/problems/shortest-subarray-with-or-at-least-k-i",
        "2292": "https://leetcode.com/problems/minimum-levels-to-gain-more-points",
        "2293": "https://leetcode.com/problems/shortest-subarray-with-or-at-least-k-ii",
        "2294": "https://leetcode.com/problems/find-the-sum-of-subsequence-powers",
        "2295": "https://leetcode.com/problems/harshad-number",
        "2296": "https://leetcode.com/problems/water-bottles-ii",
        "2297": "https://leetcode.com/problems/count-alternating-subarrays",
        "2298": "https://leetcode.com/problems/minimize-manhattan-distances",
        "2299": "https://leetcode.com/problems/longest-strictly-increasing-or-strictly-decreasing-subarray",
        "2300": "https://leetcode.com/problems/lexicographically-smallest-string-after-operations-with-constraint",
        "2301": "https://leetcode.com/problems/minimum-operations-to-make-median-of-array-equal-to-k",
        "2302": "https://leetcode.com/problems/minimum-cost-walk-in-weighted-graph",
        "2303": "https://leetcode.com/problems/score-of-a-string",
        "2304": "https://leetcode.com/problems/minimum-rectangles-to-cover-points",
        "2305": "https://leetcode.com/problems/minimum-time-to-visit-disappearing-nodes",
        "2306": "https://leetcode.com/problems/find-the-number-of-subarrays-where-boundary-elements-are-maximum",
        "2307": "https://leetcode.com/problems/latest-time-you-can-obtain-after-replacing-characters",
        "2308": "https://leetcode.com/problems/maximum-prime-difference",
        "2309": "https://leetcode.com/problems/kth-smallest-amount-with-single-denomination-combination",
        "2310": "https://leetcode.com/problems/minimum-sum-of-values-by-dividing-array",
        "2311": "https://leetcode.com/problems/count-the-number-of-special-characters-i",
        "2312": "https://leetcode.com/problems/count-the-number-of-special-characters-ii",
        "2313": "https://leetcode.com/problems/minimum-number-of-operations-to-satisfy-conditions",
        "2314": "https://leetcode.com/problems/find-edges-in-shortest-paths",
        "2315": "https://leetcode.com/problems/make-a-square-with-the-same-color",
        "2316": "https://leetcode.com/problems/right-triangles",
        "2317": "https://leetcode.com/problems/find-all-possible-stable-binary-arrays-i",
        "2318": "https://leetcode.com/problems/find-all-possible-stable-binary-arrays-ii",
        "2319": "https://leetcode.com/problems/find-the-integer-added-to-array-i",
        "2320": "https://leetcode.com/problems/find-the-integer-added-to-array-ii",
        "2321": "https://leetcode.com/problems/minimum-array-end",
        "2322": "https://leetcode.com/problems/find-the-median-of-the-uniqueness-array",
        "2323": "https://leetcode.com/problems/valid-word",
        "2324": "https://leetcode.com/problems/minimum-number-of-operations-to-make-word-k-periodic",
        "2325": "https://leetcode.com/problems/minimum-length-of-anagram-concatenation",
        "2326": "https://leetcode.com/problems/minimum-cost-to-equalize-array",
        "2327": "https://leetcode.com/problems/check-if-grid-satisfies-conditions",
        "2328": "https://leetcode.com/problems/maximum-points-inside-the-square",
        "2329": "https://leetcode.com/problems/minimum-substring-partition-of-equal-character-frequency",
        "2330": "https://leetcode.com/problems/find-products-of-elements-of-big-array",
        "2331": "https://leetcode.com/problems/permutation-difference-between-two-strings",
        "2332": "https://leetcode.com/problems/maximum-difference-score-in-a-grid",
        "2333": "https://leetcode.com/problems/find-the-minimum-cost-array-permutation",
        "2334": "https://leetcode.com/problems/special-array-i",
        "2335": "https://leetcode.com/problems/special-array-ii",
        "2336": "https://leetcode.com/problems/sum-of-digit-differences-of-all-pairs",
        "2337": "https://leetcode.com/problems/find-number-of-ways-to-reach-the-k-th-stair",
        "2338": "https://leetcode.com/problems/find-the-xor-of-numbers-which-appear-twice",
        "2339": "https://leetcode.com/problems/find-occurrences-of-an-element-in-an-array",
        "2340": "https://leetcode.com/problems/find-the-number-of-distinct-colors-among-the-balls",
        "2341": "https://leetcode.com/problems/block-placement-queries",
        "2342": "https://leetcode.com/problems/find-the-number-of-good-pairs-i",
        "2343": "https://leetcode.com/problems/string-compression-iii",
        "2344": "https://leetcode.com/problems/find-the-number-of-good-pairs-ii",
        "2345": "https://leetcode.com/problems/maximum-sum-of-subsequence-with-non-adjacent-elements",
        "2346": "https://leetcode.com/problems/minimum-number-of-chairs-in-a-waiting-room",
        "2347": "https://leetcode.com/problems/count-days-without-meetings",
        "2348": "https://leetcode.com/problems/lexicographically-minimum-string-after-removing-stars",
        "2349": "https://leetcode.com/problems/clear-digits",
        "2350": "https://leetcode.com/problems/find-the-first-player-to-win-k-games-in-a-row",
        "2351": "https://leetcode.com/problems/find-the-maximum-length-of-a-good-subsequence-i",
        "2352": "https://leetcode.com/problems/find-the-maximum-length-of-a-good-subsequence-ii",
        "2353": "https://leetcode.com/problems/find-the-child-who-has-the-ball-after-k-seconds",
        "2354": "https://leetcode.com/problems/find-the-n-th-value-after-k-seconds",
        "2355": "https://leetcode.com/problems/maximum-total-reward-using-operations-i",
        "2356": "https://leetcode.com/problems/maximum-total-reward-using-operations-ii",
        "2357": "https://leetcode.com/problems/count-pairs-that-form-a-complete-day-i",
        "2358": "https://leetcode.com/problems/count-pairs-that-form-a-complete-day-ii",
        "2359": "https://leetcode.com/problems/maximum-total-damage-with-spell-casting",
        "2360": "https://leetcode.com/problems/peaks-in-array",
        "2361": "https://leetcode.com/problems/find-minimum-operations-to-make-all-elements-divisible-by-three",
        "2362": "https://leetcode.com/problems/minimum-operations-to-make-binary-array-elements-equal-to-one-i",
        "2363": "https://leetcode.com/problems/minimum-operations-to-make-binary-array-elements-equal-to-one-ii",
        "2364": "https://leetcode.com/problems/count-the-number-of-inversions",
        "2365": "https://leetcode.com/problems/minimum-average-of-smallest-and-largest-elements",
        "2366": "https://leetcode.com/problems/find-the-minimum-area-to-cover-all-ones-i",
        "2367": "https://leetcode.com/problems/maximize-total-cost-of-alternating-subarrays",
        "2368": "https://leetcode.com/problems/find-the-minimum-area-to-cover-all-ones-ii",
        "2369": "https://leetcode.com/problems/maximum-height-of-a-triangle",
        "2370": "https://leetcode.com/problems/find-the-maximum-length-of-valid-subsequence-ii",
        "2371": "https://leetcode.com/problems/alternating-groups-i",
        "2372": "https://leetcode.com/problems/maximum-points-after-enemy-battles",
        "2373": "https://leetcode.com/problems/alternating-groups-ii",
        "2374": "https://leetcode.com/problems/number-of-subarrays-with-and-value-of-k",
        "2375": "https://leetcode.com/problems/find-the-encrypted-string",
        "2376": "https://leetcode.com/problems/generate-binary-strings-without-adjacent-zeros",
        "2377": "https://leetcode.com/problems/count-submatrices-with-equal-frequency-of-x-and-y",
        "2378": "https://leetcode.com/problems/construct-string-with-minimum-cost",
        "2379": "https://leetcode.com/problems/lexicographically-smallest-string-after-a-swap",
        "2380": "https://leetcode.com/problems/delete-nodes-from-linked-list-present-in-array",
        "2381": "https://leetcode.com/problems/minimum-cost-for-cutting-cake-i",
        "2382": "https://leetcode.com/problems/minimum-cost-for-cutting-cake-ii",
        "2383": "https://leetcode.com/problems/odd-and-even-transactions",
        "2384": "https://leetcode.com/problems/find-the-winning-player-in-coin-game",
        "2385": "https://leetcode.com/problems/minimum-array-changes-to-make-differences-equal",
        "2386": "https://leetcode.com/problems/number-of-bit-changes-to-make-two-integers-equal",
        "2387": "https://leetcode.com/problems/vowels-game-in-a-string",
        "2388": "https://leetcode.com/problems/maximum-number-of-operations-to-move-ones-to-the-end",
        "2389": "https://leetcode.com/problems/minimum-operations-to-make-array-equal-to-target",
        "2390": "https://leetcode.com/problems/find-if-digit-game-can-be-won",
        "2391": "https://leetcode.com/problems/find-the-count-of-numbers-which-are-not-special",
        "2392": "https://leetcode.com/problems/count-the-number-of-substrings-with-dominant-ones",
        "2393": "https://leetcode.com/problems/check-if-the-rectangle-corner-is-reachable",
        "2394": "https://leetcode.com/problems/find-the-number-of-winning-players",
        "2395": "https://leetcode.com/problems/minimum-number-of-flips-to-make-binary-grid-palindromic-i",
        "2396": "https://leetcode.com/problems/minimum-number-of-flips-to-make-binary-grid-palindromic-ii",
        "2397": "https://leetcode.com/problems/time-taken-to-mark-all-nodes",
        "2398": "https://leetcode.com/problems/design-neighbor-sum-service",
        "2399": "https://leetcode.com/problems/shortest-distance-after-road-addition-queries-i",
        "2400": "https://leetcode.com/problems/shortest-distance-after-road-addition-queries-ii",
        "2401": "https://leetcode.com/problems/alternating-groups-iii",
        "2402": "https://leetcode.com/problems/snake-in-matrix",
        "2403": "https://leetcode.com/problems/count-the-number-of-good-nodes",
        "2404": "https://leetcode.com/problems/find-the-count-of-monotonic-pairs-i",
        "2405": "https://leetcode.com/problems/find-the-count-of-monotonic-pairs-ii",
        "2406": "https://leetcode.com/problems/find-the-power-of-k-size-subarrays-i",
        "2407": "https://leetcode.com/problems/find-the-power-of-k-size-subarrays-ii",
        "2408": "https://leetcode.com/problems/maximum-value-sum-by-placing-three-rooks-i",
        "2409": "https://leetcode.com/problems/maximum-value-sum-by-placing-three-rooks-ii",
        "2410": "https://leetcode.com/problems/count-substrings-that-satisfy-k-constraint-i",
        "2411": "https://leetcode.com/problems/maximum-energy-boost-from-two-drinks",
        "2412": "https://leetcode.com/problems/find-the-largest-palindrome-divisible-by-k",
        "2413": "https://leetcode.com/problems/count-substrings-that-satisfy-k-constraint-ii",
        "2414": "https://leetcode.com/problems/final-array-state-after-k-multiplication-operations-i",
        "2415": "https://leetcode.com/problems/count-almost-equal-pairs-i",
        "2416": "https://leetcode.com/problems/final-array-state-after-k-multiplication-operations-ii",
        "2417": "https://leetcode.com/problems/count-almost-equal-pairs-ii",
        "2418": "https://leetcode.com/problems/find-the-key-of-the-numbers",
        "2419": "https://leetcode.com/problems/hash-divided-string",
        "2420": "https://leetcode.com/problems/find-the-count-of-good-integers",
        "2421": "https://leetcode.com/problems/minimum-amount-of-damage-dealt-to-bob",
        "2422": "https://leetcode.com/problems/check-if-two-chessboard-squares-have-the-same-color",
        "2423": "https://leetcode.com/problems/k-th-nearest-obstacle-queries",
        "2424": "https://leetcode.com/problems/select-cells-in-grid-with-maximum-score",
        "2425": "https://leetcode.com/problems/maximum-xor-score-subarray-queries",
        "2426": "https://leetcode.com/problems/convert-date-to-binary"
    },
    "website": {
        "0": "leetcode",
        "1": "leetcode",
        "2": "leetcode",
        "3": "leetcode",
        "4": "leetcode",
        "5": "leetcode",
        "6": "leetcode",
        "7": "leetcode",
        "8": "leetcode",
        "9": "leetcode",
        "10": "leetcode",
        "11": "leetcode",
        "12": "leetcode",
        "13": "leetcode",
        "14": "leetcode",
        "15": "leetcode",
        "16": "leetcode",
        "17": "leetcode",
        "18": "leetcode",
        "19": "leetcode",
        "20": "leetcode",
        "21": "leetcode",
        "22": "leetcode",
        "23": "leetcode",
        "24": "leetcode",
        "25": "leetcode",
        "26": "leetcode",
        "27": "leetcode",
        "28": "leetcode",
        "29": "leetcode",
        "30": "leetcode",
        "31": "leetcode",
        "32": "leetcode",
        "33": "leetcode",
        "34": "leetcode",
        "35": "leetcode",
        "36": "leetcode",
        "37": "leetcode",
        "38": "leetcode",
        "39": "leetcode",
        "40": "leetcode",
        "41": "leetcode",
        "42": "leetcode",
        "43": "leetcode",
        "44": "leetcode",
        "45": "leetcode",
        "46": "leetcode",
        "47": "leetcode",
        "48": "leetcode",
        "49": "leetcode",
        "50": "leetcode",
        "51": "leetcode",
        "52": "leetcode",
        "53": "leetcode",
        "54": "leetcode",
        "55": "leetcode",
        "56": "leetcode",
        "57": "leetcode",
        "58": "leetcode",
        "59": "leetcode",
        "60": "leetcode",
        "61": "leetcode",
        "62": "leetcode",
        "63": "leetcode",
        "64": "leetcode",
        "65": "leetcode",
        "66": "leetcode",
        "67": "leetcode",
        "68": "leetcode",
        "69": "leetcode",
        "70": "leetcode",
        "71": "leetcode",
        "72": "leetcode",
        "73": "leetcode",
        "74": "leetcode",
        "75": "leetcode",
        "76": "leetcode",
        "77": "leetcode",
        "78": "leetcode",
        "79": "leetcode",
        "80": "leetcode",
        "81": "leetcode",
        "82": "leetcode",
        "83": "leetcode",
        "84": "leetcode",
        "85": "leetcode",
        "86": "leetcode",
        "87": "leetcode",
        "88": "leetcode",
        "89": "leetcode",
        "90": "leetcode",
        "91": "leetcode",
        "92": "leetcode",
        "93": "leetcode",
        "94": "leetcode",
        "95": "leetcode",
        "96": "leetcode",
        "97": "leetcode",
        "98": "leetcode",
        "99": "leetcode",
        "100": "leetcode",
        "101": "leetcode",
        "102": "leetcode",
        "103": "leetcode",
        "104": "leetcode",
        "105": "leetcode",
        "106": "leetcode",
        "107": "leetcode",
        "108": "leetcode",
        "109": "leetcode",
        "110": "leetcode",
        "111": "leetcode",
        "112": "leetcode",
        "113": "leetcode",
        "114": "leetcode",
        "115": "leetcode",
        "116": "leetcode",
        "117": "leetcode",
        "118": "leetcode",
        "119": "leetcode",
        "120": "leetcode",
        "121": "leetcode",
        "122": "leetcode",
        "123": "leetcode",
        "124": "leetcode",
        "125": "leetcode",
        "126": "leetcode",
        "127": "leetcode",
        "128": "leetcode",
        "129": "leetcode",
        "130": "leetcode",
        "131": "leetcode",
        "132": "leetcode",
        "133": "leetcode",
        "134": "leetcode",
        "135": "leetcode",
        "136": "leetcode",
        "137": "leetcode",
        "138": "leetcode",
        "139": "leetcode",
        "140": "leetcode",
        "141": "leetcode",
        "142": "leetcode",
        "143": "leetcode",
        "144": "leetcode",
        "145": "leetcode",
        "146": "leetcode",
        "147": "leetcode",
        "148": "leetcode",
        "149": "leetcode",
        "150": "leetcode",
        "151": "leetcode",
        "152": "leetcode",
        "153": "leetcode",
        "154": "leetcode",
        "155": "leetcode",
        "156": "leetcode",
        "157": "leetcode",
        "158": "leetcode",
        "159": "leetcode",
        "160": "leetcode",
        "161": "leetcode",
        "162": "leetcode",
        "163": "leetcode",
        "164": "leetcode",
        "165": "leetcode",
        "166": "leetcode",
        "167": "leetcode",
        "168": "leetcode",
        "169": "leetcode",
        "170": "leetcode",
        "171": "leetcode",
        "172": "leetcode",
        "173": "leetcode",
        "174": "leetcode",
        "175": "leetcode",
        "176": "leetcode",
        "177": "leetcode",
        "178": "leetcode",
        "179": "leetcode",
        "180": "leetcode",
        "181": "leetcode",
        "182": "leetcode",
        "183": "leetcode",
        "184": "leetcode",
        "185": "leetcode",
        "186": "leetcode",
        "187": "leetcode",
        "188": "leetcode",
        "189": "leetcode",
        "190": "leetcode",
        "191": "leetcode",
        "192": "leetcode",
        "193": "leetcode",
        "194": "leetcode",
        "195": "leetcode",
        "196": "leetcode",
        "197": "leetcode",
        "198": "leetcode",
        "199": "leetcode",
        "200": "leetcode",
        "201": "leetcode",
        "202": "leetcode",
        "203": "leetcode",
        "204": "leetcode",
        "205": "leetcode",
        "206": "leetcode",
        "207": "leetcode",
        "208": "leetcode",
        "209": "leetcode",
        "210": "leetcode",
        "211": "leetcode",
        "212": "leetcode",
        "213": "leetcode",
        "214": "leetcode",
        "215": "leetcode",
        "216": "leetcode",
        "217": "leetcode",
        "218": "leetcode",
        "219": "leetcode",
        "220": "leetcode",
        "221": "leetcode",
        "222": "leetcode",
        "223": "leetcode",
        "224": "leetcode",
        "225": "leetcode",
        "226": "leetcode",
        "227": "leetcode",
        "228": "leetcode",
        "229": "leetcode",
        "230": "leetcode",
        "231": "leetcode",
        "232": "leetcode",
        "233": "leetcode",
        "234": "leetcode",
        "235": "leetcode",
        "236": "leetcode",
        "237": "leetcode",
        "238": "leetcode",
        "239": "leetcode",
        "240": "leetcode",
        "241": "leetcode",
        "242": "leetcode",
        "243": "leetcode",
        "244": "leetcode",
        "245": "leetcode",
        "246": "leetcode",
        "247": "leetcode",
        "248": "leetcode",
        "249": "leetcode",
        "250": "leetcode",
        "251": "leetcode",
        "252": "leetcode",
        "253": "leetcode",
        "254": "leetcode",
        "255": "leetcode",
        "256": "leetcode",
        "257": "leetcode",
        "258": "leetcode",
        "259": "leetcode",
        "260": "leetcode",
        "261": "leetcode",
        "262": "leetcode",
        "263": "leetcode",
        "264": "leetcode",
        "265": "leetcode",
        "266": "leetcode",
        "267": "leetcode",
        "268": "leetcode",
        "269": "leetcode",
        "270": "leetcode",
        "271": "leetcode",
        "272": "leetcode",
        "273": "leetcode",
        "274": "leetcode",
        "275": "leetcode",
        "276": "leetcode",
        "277": "leetcode",
        "278": "leetcode",
        "279": "leetcode",
        "280": "leetcode",
        "281": "leetcode",
        "282": "leetcode",
        "283": "leetcode",
        "284": "leetcode",
        "285": "leetcode",
        "286": "leetcode",
        "287": "leetcode",
        "288": "leetcode",
        "289": "leetcode",
        "290": "leetcode",
        "291": "leetcode",
        "292": "leetcode",
        "293": "leetcode",
        "294": "leetcode",
        "295": "leetcode",
        "296": "leetcode",
        "297": "leetcode",
        "298": "leetcode",
        "299": "leetcode",
        "300": "leetcode",
        "301": "leetcode",
        "302": "leetcode",
        "303": "leetcode",
        "304": "leetcode",
        "305": "leetcode",
        "306": "leetcode",
        "307": "leetcode",
        "308": "leetcode",
        "309": "leetcode",
        "310": "leetcode",
        "311": "leetcode",
        "312": "leetcode",
        "313": "leetcode",
        "314": "leetcode",
        "315": "leetcode",
        "316": "leetcode",
        "317": "leetcode",
        "318": "leetcode",
        "319": "leetcode",
        "320": "leetcode",
        "321": "leetcode",
        "322": "leetcode",
        "323": "leetcode",
        "324": "leetcode",
        "325": "leetcode",
        "326": "leetcode",
        "327": "leetcode",
        "328": "leetcode",
        "329": "leetcode",
        "330": "leetcode",
        "331": "leetcode",
        "332": "leetcode",
        "333": "leetcode",
        "334": "leetcode",
        "335": "leetcode",
        "336": "leetcode",
        "337": "leetcode",
        "338": "leetcode",
        "339": "leetcode",
        "340": "leetcode",
        "341": "leetcode",
        "342": "leetcode",
        "343": "leetcode",
        "344": "leetcode",
        "345": "leetcode",
        "346": "leetcode",
        "347": "leetcode",
        "348": "leetcode",
        "349": "leetcode",
        "350": "leetcode",
        "351": "leetcode",
        "352": "leetcode",
        "353": "leetcode",
        "354": "leetcode",
        "355": "leetcode",
        "356": "leetcode",
        "357": "leetcode",
        "358": "leetcode",
        "359": "leetcode",
        "360": "leetcode",
        "361": "leetcode",
        "362": "leetcode",
        "363": "leetcode",
        "364": "leetcode",
        "365": "leetcode",
        "366": "leetcode",
        "367": "leetcode",
        "368": "leetcode",
        "369": "leetcode",
        "370": "leetcode",
        "371": "leetcode",
        "372": "leetcode",
        "373": "leetcode",
        "374": "leetcode",
        "375": "leetcode",
        "376": "leetcode",
        "377": "leetcode",
        "378": "leetcode",
        "379": "leetcode",
        "380": "leetcode",
        "381": "leetcode",
        "382": "leetcode",
        "383": "leetcode",
        "384": "leetcode",
        "385": "leetcode",
        "386": "leetcode",
        "387": "leetcode",
        "388": "leetcode",
        "389": "leetcode",
        "390": "leetcode",
        "391": "leetcode",
        "392": "leetcode",
        "393": "leetcode",
        "394": "leetcode",
        "395": "leetcode",
        "396": "leetcode",
        "397": "leetcode",
        "398": "leetcode",
        "399": "leetcode",
        "400": "leetcode",
        "401": "leetcode",
        "402": "leetcode",
        "403": "leetcode",
        "404": "leetcode",
        "405": "leetcode",
        "406": "leetcode",
        "407": "leetcode",
        "408": "leetcode",
        "409": "leetcode",
        "410": "leetcode",
        "411": "leetcode",
        "412": "leetcode",
        "413": "leetcode",
        "414": "leetcode",
        "415": "leetcode",
        "416": "leetcode",
        "417": "leetcode",
        "418": "leetcode",
        "419": "leetcode",
        "420": "leetcode",
        "421": "leetcode",
        "422": "leetcode",
        "423": "leetcode",
        "424": "leetcode",
        "425": "leetcode",
        "426": "leetcode",
        "427": "leetcode",
        "428": "leetcode",
        "429": "leetcode",
        "430": "leetcode",
        "431": "leetcode",
        "432": "leetcode",
        "433": "leetcode",
        "434": "leetcode",
        "435": "leetcode",
        "436": "leetcode",
        "437": "leetcode",
        "438": "leetcode",
        "439": "leetcode",
        "440": "leetcode",
        "441": "leetcode",
        "442": "leetcode",
        "443": "leetcode",
        "444": "leetcode",
        "445": "leetcode",
        "446": "leetcode",
        "447": "leetcode",
        "448": "leetcode",
        "449": "leetcode",
        "450": "leetcode",
        "451": "leetcode",
        "452": "leetcode",
        "453": "leetcode",
        "454": "leetcode",
        "455": "leetcode",
        "456": "leetcode",
        "457": "leetcode",
        "458": "leetcode",
        "459": "leetcode",
        "460": "leetcode",
        "461": "leetcode",
        "462": "leetcode",
        "463": "leetcode",
        "464": "leetcode",
        "465": "leetcode",
        "466": "leetcode",
        "467": "leetcode",
        "468": "leetcode",
        "469": "leetcode",
        "470": "leetcode",
        "471": "leetcode",
        "472": "leetcode",
        "473": "leetcode",
        "474": "leetcode",
        "475": "leetcode",
        "476": "leetcode",
        "477": "leetcode",
        "478": "leetcode",
        "479": "leetcode",
        "480": "leetcode",
        "481": "leetcode",
        "482": "leetcode",
        "483": "leetcode",
        "484": "leetcode",
        "485": "leetcode",
        "486": "leetcode",
        "487": "leetcode",
        "488": "leetcode",
        "489": "leetcode",
        "490": "leetcode",
        "491": "leetcode",
        "492": "leetcode",
        "493": "leetcode",
        "494": "leetcode",
        "495": "leetcode",
        "496": "leetcode",
        "497": "leetcode",
        "498": "leetcode",
        "499": "leetcode",
        "500": "leetcode",
        "501": "leetcode",
        "502": "leetcode",
        "503": "leetcode",
        "504": "leetcode",
        "505": "leetcode",
        "506": "leetcode",
        "507": "leetcode",
        "508": "leetcode",
        "509": "leetcode",
        "510": "leetcode",
        "511": "leetcode",
        "512": "leetcode",
        "513": "leetcode",
        "514": "leetcode",
        "515": "leetcode",
        "516": "leetcode",
        "517": "leetcode",
        "518": "leetcode",
        "519": "leetcode",
        "520": "leetcode",
        "521": "leetcode",
        "522": "leetcode",
        "523": "leetcode",
        "524": "leetcode",
        "525": "leetcode",
        "526": "leetcode",
        "527": "leetcode",
        "528": "leetcode",
        "529": "leetcode",
        "530": "leetcode",
        "531": "leetcode",
        "532": "leetcode",
        "533": "leetcode",
        "534": "leetcode",
        "535": "leetcode",
        "536": "leetcode",
        "537": "leetcode",
        "538": "leetcode",
        "539": "leetcode",
        "540": "leetcode",
        "541": "leetcode",
        "542": "leetcode",
        "543": "leetcode",
        "544": "leetcode",
        "545": "leetcode",
        "546": "leetcode",
        "547": "leetcode",
        "548": "leetcode",
        "549": "leetcode",
        "550": "leetcode",
        "551": "leetcode",
        "552": "leetcode",
        "553": "leetcode",
        "554": "leetcode",
        "555": "leetcode",
        "556": "leetcode",
        "557": "leetcode",
        "558": "leetcode",
        "559": "leetcode",
        "560": "leetcode",
        "561": "leetcode",
        "562": "leetcode",
        "563": "leetcode",
        "564": "leetcode",
        "565": "leetcode",
        "566": "leetcode",
        "567": "leetcode",
        "568": "leetcode",
        "569": "leetcode",
        "570": "leetcode",
        "571": "leetcode",
        "572": "leetcode",
        "573": "leetcode",
        "574": "leetcode",
        "575": "leetcode",
        "576": "leetcode",
        "577": "leetcode",
        "578": "leetcode",
        "579": "leetcode",
        "580": "leetcode",
        "581": "leetcode",
        "582": "leetcode",
        "583": "leetcode",
        "584": "leetcode",
        "585": "leetcode",
        "586": "leetcode",
        "587": "leetcode",
        "588": "leetcode",
        "589": "leetcode",
        "590": "leetcode",
        "591": "leetcode",
        "592": "leetcode",
        "593": "leetcode",
        "594": "leetcode",
        "595": "leetcode",
        "596": "leetcode",
        "597": "leetcode",
        "598": "leetcode",
        "599": "leetcode",
        "600": "leetcode",
        "601": "leetcode",
        "602": "leetcode",
        "603": "leetcode",
        "604": "leetcode",
        "605": "leetcode",
        "606": "leetcode",
        "607": "leetcode",
        "608": "leetcode",
        "609": "leetcode",
        "610": "leetcode",
        "611": "leetcode",
        "612": "leetcode",
        "613": "leetcode",
        "614": "leetcode",
        "615": "leetcode",
        "616": "leetcode",
        "617": "leetcode",
        "618": "leetcode",
        "619": "leetcode",
        "620": "leetcode",
        "621": "leetcode",
        "622": "leetcode",
        "623": "leetcode",
        "624": "leetcode",
        "625": "leetcode",
        "626": "leetcode",
        "627": "leetcode",
        "628": "leetcode",
        "629": "leetcode",
        "630": "leetcode",
        "631": "leetcode",
        "632": "leetcode",
        "633": "leetcode",
        "634": "leetcode",
        "635": "leetcode",
        "636": "leetcode",
        "637": "leetcode",
        "638": "leetcode",
        "639": "leetcode",
        "640": "leetcode",
        "641": "leetcode",
        "642": "leetcode",
        "643": "leetcode",
        "644": "leetcode",
        "645": "leetcode",
        "646": "leetcode",
        "647": "leetcode",
        "648": "leetcode",
        "649": "leetcode",
        "650": "leetcode",
        "651": "leetcode",
        "652": "leetcode",
        "653": "leetcode",
        "654": "leetcode",
        "655": "leetcode",
        "656": "leetcode",
        "657": "leetcode",
        "658": "leetcode",
        "659": "leetcode",
        "660": "leetcode",
        "661": "leetcode",
        "662": "leetcode",
        "663": "leetcode",
        "664": "leetcode",
        "665": "leetcode",
        "666": "leetcode",
        "667": "leetcode",
        "668": "leetcode",
        "669": "leetcode",
        "670": "leetcode",
        "671": "leetcode",
        "672": "leetcode",
        "673": "leetcode",
        "674": "leetcode",
        "675": "leetcode",
        "676": "leetcode",
        "677": "leetcode",
        "678": "leetcode",
        "679": "leetcode",
        "680": "leetcode",
        "681": "leetcode",
        "682": "leetcode",
        "683": "leetcode",
        "684": "leetcode",
        "685": "leetcode",
        "686": "leetcode",
        "687": "leetcode",
        "688": "leetcode",
        "689": "leetcode",
        "690": "leetcode",
        "691": "leetcode",
        "692": "leetcode",
        "693": "leetcode",
        "694": "leetcode",
        "695": "leetcode",
        "696": "leetcode",
        "697": "leetcode",
        "698": "leetcode",
        "699": "leetcode",
        "700": "leetcode",
        "701": "leetcode",
        "702": "leetcode",
        "703": "leetcode",
        "704": "leetcode",
        "705": "leetcode",
        "706": "leetcode",
        "707": "leetcode",
        "708": "leetcode",
        "709": "leetcode",
        "710": "leetcode",
        "711": "leetcode",
        "712": "leetcode",
        "713": "leetcode",
        "714": "leetcode",
        "715": "leetcode",
        "716": "leetcode",
        "717": "leetcode",
        "718": "leetcode",
        "719": "leetcode",
        "720": "leetcode",
        "721": "leetcode",
        "722": "leetcode",
        "723": "leetcode",
        "724": "leetcode",
        "725": "leetcode",
        "726": "leetcode",
        "727": "leetcode",
        "728": "leetcode",
        "729": "leetcode",
        "730": "leetcode",
        "731": "leetcode",
        "732": "leetcode",
        "733": "leetcode",
        "734": "leetcode",
        "735": "leetcode",
        "736": "leetcode",
        "737": "leetcode",
        "738": "leetcode",
        "739": "leetcode",
        "740": "leetcode",
        "741": "leetcode",
        "742": "leetcode",
        "743": "leetcode",
        "744": "leetcode",
        "745": "leetcode",
        "746": "leetcode",
        "747": "leetcode",
        "748": "leetcode",
        "749": "leetcode",
        "750": "leetcode",
        "751": "leetcode",
        "752": "leetcode",
        "753": "leetcode",
        "754": "leetcode",
        "755": "leetcode",
        "756": "leetcode",
        "757": "leetcode",
        "758": "leetcode",
        "759": "leetcode",
        "760": "leetcode",
        "761": "leetcode",
        "762": "leetcode",
        "763": "leetcode",
        "764": "leetcode",
        "765": "leetcode",
        "766": "leetcode",
        "767": "leetcode",
        "768": "leetcode",
        "769": "leetcode",
        "770": "leetcode",
        "771": "leetcode",
        "772": "leetcode",
        "773": "leetcode",
        "774": "leetcode",
        "775": "leetcode",
        "776": "leetcode",
        "777": "leetcode",
        "778": "leetcode",
        "779": "leetcode",
        "780": "leetcode",
        "781": "leetcode",
        "782": "leetcode",
        "783": "leetcode",
        "784": "leetcode",
        "785": "leetcode",
        "786": "leetcode",
        "787": "leetcode",
        "788": "leetcode",
        "789": "leetcode",
        "790": "leetcode",
        "791": "leetcode",
        "792": "leetcode",
        "793": "leetcode",
        "794": "leetcode",
        "795": "leetcode",
        "796": "leetcode",
        "797": "leetcode",
        "798": "leetcode",
        "799": "leetcode",
        "800": "leetcode",
        "801": "leetcode",
        "802": "leetcode",
        "803": "leetcode",
        "804": "leetcode",
        "805": "leetcode",
        "806": "leetcode",
        "807": "leetcode",
        "808": "leetcode",
        "809": "leetcode",
        "810": "leetcode",
        "811": "leetcode",
        "812": "leetcode",
        "813": "leetcode",
        "814": "leetcode",
        "815": "leetcode",
        "816": "leetcode",
        "817": "leetcode",
        "818": "leetcode",
        "819": "leetcode",
        "820": "leetcode",
        "821": "leetcode",
        "822": "leetcode",
        "823": "leetcode",
        "824": "leetcode",
        "825": "leetcode",
        "826": "leetcode",
        "827": "leetcode",
        "828": "leetcode",
        "829": "leetcode",
        "830": "leetcode",
        "831": "leetcode",
        "832": "leetcode",
        "833": "leetcode",
        "834": "leetcode",
        "835": "leetcode",
        "836": "leetcode",
        "837": "leetcode",
        "838": "leetcode",
        "839": "leetcode",
        "840": "leetcode",
        "841": "leetcode",
        "842": "leetcode",
        "843": "leetcode",
        "844": "leetcode",
        "845": "leetcode",
        "846": "leetcode",
        "847": "leetcode",
        "848": "leetcode",
        "849": "leetcode",
        "850": "leetcode",
        "851": "leetcode",
        "852": "leetcode",
        "853": "leetcode",
        "854": "leetcode",
        "855": "leetcode",
        "856": "leetcode",
        "857": "leetcode",
        "858": "leetcode",
        "859": "leetcode",
        "860": "leetcode",
        "861": "leetcode",
        "862": "leetcode",
        "863": "leetcode",
        "864": "leetcode",
        "865": "leetcode",
        "866": "leetcode",
        "867": "leetcode",
        "868": "leetcode",
        "869": "leetcode",
        "870": "leetcode",
        "871": "leetcode",
        "872": "leetcode",
        "873": "leetcode",
        "874": "leetcode",
        "875": "leetcode",
        "876": "leetcode",
        "877": "leetcode",
        "878": "leetcode",
        "879": "leetcode",
        "880": "leetcode",
        "881": "leetcode",
        "882": "leetcode",
        "883": "leetcode",
        "884": "leetcode",
        "885": "leetcode",
        "886": "leetcode",
        "887": "leetcode",
        "888": "leetcode",
        "889": "leetcode",
        "890": "leetcode",
        "891": "leetcode",
        "892": "leetcode",
        "893": "leetcode",
        "894": "leetcode",
        "895": "leetcode",
        "896": "leetcode",
        "897": "leetcode",
        "898": "leetcode",
        "899": "leetcode",
        "900": "leetcode",
        "901": "leetcode",
        "902": "leetcode",
        "903": "leetcode",
        "904": "leetcode",
        "905": "leetcode",
        "906": "leetcode",
        "907": "leetcode",
        "908": "leetcode",
        "909": "leetcode",
        "910": "leetcode",
        "911": "leetcode",
        "912": "leetcode",
        "913": "leetcode",
        "914": "leetcode",
        "915": "leetcode",
        "916": "leetcode",
        "917": "leetcode",
        "918": "leetcode",
        "919": "leetcode",
        "920": "leetcode",
        "921": "leetcode",
        "922": "leetcode",
        "923": "leetcode",
        "924": "leetcode",
        "925": "leetcode",
        "926": "leetcode",
        "927": "leetcode",
        "928": "leetcode",
        "929": "leetcode",
        "930": "leetcode",
        "931": "leetcode",
        "932": "leetcode",
        "933": "leetcode",
        "934": "leetcode",
        "935": "leetcode",
        "936": "leetcode",
        "937": "leetcode",
        "938": "leetcode",
        "939": "leetcode",
        "940": "leetcode",
        "941": "leetcode",
        "942": "leetcode",
        "943": "leetcode",
        "944": "leetcode",
        "945": "leetcode",
        "946": "leetcode",
        "947": "leetcode",
        "948": "leetcode",
        "949": "leetcode",
        "950": "leetcode",
        "951": "leetcode",
        "952": "leetcode",
        "953": "leetcode",
        "954": "leetcode",
        "955": "leetcode",
        "956": "leetcode",
        "957": "leetcode",
        "958": "leetcode",
        "959": "leetcode",
        "960": "leetcode",
        "961": "leetcode",
        "962": "leetcode",
        "963": "leetcode",
        "964": "leetcode",
        "965": "leetcode",
        "966": "leetcode",
        "967": "leetcode",
        "968": "leetcode",
        "969": "leetcode",
        "970": "leetcode",
        "971": "leetcode",
        "972": "leetcode",
        "973": "leetcode",
        "974": "leetcode",
        "975": "leetcode",
        "976": "leetcode",
        "977": "leetcode",
        "978": "leetcode",
        "979": "leetcode",
        "980": "leetcode",
        "981": "leetcode",
        "982": "leetcode",
        "983": "leetcode",
        "984": "leetcode",
        "985": "leetcode",
        "986": "leetcode",
        "987": "leetcode",
        "988": "leetcode",
        "989": "leetcode",
        "990": "leetcode",
        "991": "leetcode",
        "992": "leetcode",
        "993": "leetcode",
        "994": "leetcode",
        "995": "leetcode",
        "996": "leetcode",
        "997": "leetcode",
        "998": "leetcode",
        "999": "leetcode",
        "1000": "leetcode",
        "1001": "leetcode",
        "1002": "leetcode",
        "1003": "leetcode",
        "1004": "leetcode",
        "1005": "leetcode",
        "1006": "leetcode",
        "1007": "leetcode",
        "1008": "leetcode",
        "1009": "leetcode",
        "1010": "leetcode",
        "1011": "leetcode",
        "1012": "leetcode",
        "1013": "leetcode",
        "1014": "leetcode",
        "1015": "leetcode",
        "1016": "leetcode",
        "1017": "leetcode",
        "1018": "leetcode",
        "1019": "leetcode",
        "1020": "leetcode",
        "1021": "leetcode",
        "1022": "leetcode",
        "1023": "leetcode",
        "1024": "leetcode",
        "1025": "leetcode",
        "1026": "leetcode",
        "1027": "leetcode",
        "1028": "leetcode",
        "1029": "leetcode",
        "1030": "leetcode",
        "1031": "leetcode",
        "1032": "leetcode",
        "1033": "leetcode",
        "1034": "leetcode",
        "1035": "leetcode",
        "1036": "leetcode",
        "1037": "leetcode",
        "1038": "leetcode",
        "1039": "leetcode",
        "1040": "leetcode",
        "1041": "leetcode",
        "1042": "leetcode",
        "1043": "leetcode",
        "1044": "leetcode",
        "1045": "leetcode",
        "1046": "leetcode",
        "1047": "leetcode",
        "1048": "leetcode",
        "1049": "leetcode",
        "1050": "leetcode",
        "1051": "leetcode",
        "1052": "leetcode",
        "1053": "leetcode",
        "1054": "leetcode",
        "1055": "leetcode",
        "1056": "leetcode",
        "1057": "leetcode",
        "1058": "leetcode",
        "1059": "leetcode",
        "1060": "leetcode",
        "1061": "leetcode",
        "1062": "leetcode",
        "1063": "leetcode",
        "1064": "leetcode",
        "1065": "leetcode",
        "1066": "leetcode",
        "1067": "leetcode",
        "1068": "leetcode",
        "1069": "leetcode",
        "1070": "leetcode",
        "1071": "leetcode",
        "1072": "leetcode",
        "1073": "leetcode",
        "1074": "leetcode",
        "1075": "leetcode",
        "1076": "leetcode",
        "1077": "leetcode",
        "1078": "leetcode",
        "1079": "leetcode",
        "1080": "leetcode",
        "1081": "leetcode",
        "1082": "leetcode",
        "1083": "leetcode",
        "1084": "leetcode",
        "1085": "leetcode",
        "1086": "leetcode",
        "1087": "leetcode",
        "1088": "leetcode",
        "1089": "leetcode",
        "1090": "leetcode",
        "1091": "leetcode",
        "1092": "leetcode",
        "1093": "leetcode",
        "1094": "leetcode",
        "1095": "leetcode",
        "1096": "leetcode",
        "1097": "leetcode",
        "1098": "leetcode",
        "1099": "leetcode",
        "1100": "leetcode",
        "1101": "leetcode",
        "1102": "leetcode",
        "1103": "leetcode",
        "1104": "leetcode",
        "1105": "leetcode",
        "1106": "leetcode",
        "1107": "leetcode",
        "1108": "leetcode",
        "1109": "leetcode",
        "1110": "leetcode",
        "1111": "leetcode",
        "1112": "leetcode",
        "1113": "leetcode",
        "1114": "leetcode",
        "1115": "leetcode",
        "1116": "leetcode",
        "1117": "leetcode",
        "1118": "leetcode",
        "1119": "leetcode",
        "1120": "leetcode",
        "1121": "leetcode",
        "1122": "leetcode",
        "1123": "leetcode",
        "1124": "leetcode",
        "1125": "leetcode",
        "1126": "leetcode",
        "1127": "leetcode",
        "1128": "leetcode",
        "1129": "leetcode",
        "1130": "leetcode",
        "1131": "leetcode",
        "1132": "leetcode",
        "1133": "leetcode",
        "1134": "leetcode",
        "1135": "leetcode",
        "1136": "leetcode",
        "1137": "leetcode",
        "1138": "leetcode",
        "1139": "leetcode",
        "1140": "leetcode",
        "1141": "leetcode",
        "1142": "leetcode",
        "1143": "leetcode",
        "1144": "leetcode",
        "1145": "leetcode",
        "1146": "leetcode",
        "1147": "leetcode",
        "1148": "leetcode",
        "1149": "leetcode",
        "1150": "leetcode",
        "1151": "leetcode",
        "1152": "leetcode",
        "1153": "leetcode",
        "1154": "leetcode",
        "1155": "leetcode",
        "1156": "leetcode",
        "1157": "leetcode",
        "1158": "leetcode",
        "1159": "leetcode",
        "1160": "leetcode",
        "1161": "leetcode",
        "1162": "leetcode",
        "1163": "leetcode",
        "1164": "leetcode",
        "1165": "leetcode",
        "1166": "leetcode",
        "1167": "leetcode",
        "1168": "leetcode",
        "1169": "leetcode",
        "1170": "leetcode",
        "1171": "leetcode",
        "1172": "leetcode",
        "1173": "leetcode",
        "1174": "leetcode",
        "1175": "leetcode",
        "1176": "leetcode",
        "1177": "leetcode",
        "1178": "leetcode",
        "1179": "leetcode",
        "1180": "leetcode",
        "1181": "leetcode",
        "1182": "leetcode",
        "1183": "leetcode",
        "1184": "leetcode",
        "1185": "leetcode",
        "1186": "leetcode",
        "1187": "leetcode",
        "1188": "leetcode",
        "1189": "leetcode",
        "1190": "leetcode",
        "1191": "leetcode",
        "1192": "leetcode",
        "1193": "leetcode",
        "1194": "leetcode",
        "1195": "leetcode",
        "1196": "leetcode",
        "1197": "leetcode",
        "1198": "leetcode",
        "1199": "leetcode",
        "1200": "leetcode",
        "1201": "leetcode",
        "1202": "leetcode",
        "1203": "leetcode",
        "1204": "leetcode",
        "1205": "leetcode",
        "1206": "leetcode",
        "1207": "leetcode",
        "1208": "leetcode",
        "1209": "leetcode",
        "1210": "leetcode",
        "1211": "leetcode",
        "1212": "leetcode",
        "1213": "leetcode",
        "1214": "leetcode",
        "1215": "leetcode",
        "1216": "leetcode",
        "1217": "leetcode",
        "1218": "leetcode",
        "1219": "leetcode",
        "1220": "leetcode",
        "1221": "leetcode",
        "1222": "leetcode",
        "1223": "leetcode",
        "1224": "leetcode",
        "1225": "leetcode",
        "1226": "leetcode",
        "1227": "leetcode",
        "1228": "leetcode",
        "1229": "leetcode",
        "1230": "leetcode",
        "1231": "leetcode",
        "1232": "leetcode",
        "1233": "leetcode",
        "1234": "leetcode",
        "1235": "leetcode",
        "1236": "leetcode",
        "1237": "leetcode",
        "1238": "leetcode",
        "1239": "leetcode",
        "1240": "leetcode",
        "1241": "leetcode",
        "1242": "leetcode",
        "1243": "leetcode",
        "1244": "leetcode",
        "1245": "leetcode",
        "1246": "leetcode",
        "1247": "leetcode",
        "1248": "leetcode",
        "1249": "leetcode",
        "1250": "leetcode",
        "1251": "leetcode",
        "1252": "leetcode",
        "1253": "leetcode",
        "1254": "leetcode",
        "1255": "leetcode",
        "1256": "leetcode",
        "1257": "leetcode",
        "1258": "leetcode",
        "1259": "leetcode",
        "1260": "leetcode",
        "1261": "leetcode",
        "1262": "leetcode",
        "1263": "leetcode",
        "1264": "leetcode",
        "1265": "leetcode",
        "1266": "leetcode",
        "1267": "leetcode",
        "1268": "leetcode",
        "1269": "leetcode",
        "1270": "leetcode",
        "1271": "leetcode",
        "1272": "leetcode",
        "1273": "leetcode",
        "1274": "leetcode",
        "1275": "leetcode",
        "1276": "leetcode",
        "1277": "leetcode",
        "1278": "leetcode",
        "1279": "leetcode",
        "1280": "leetcode",
        "1281": "leetcode",
        "1282": "leetcode",
        "1283": "leetcode",
        "1284": "leetcode",
        "1285": "leetcode",
        "1286": "leetcode",
        "1287": "leetcode",
        "1288": "leetcode",
        "1289": "leetcode",
        "1290": "leetcode",
        "1291": "leetcode",
        "1292": "leetcode",
        "1293": "leetcode",
        "1294": "leetcode",
        "1295": "leetcode",
        "1296": "leetcode",
        "1297": "leetcode",
        "1298": "leetcode",
        "1299": "leetcode",
        "1300": "leetcode",
        "1301": "leetcode",
        "1302": "leetcode",
        "1303": "leetcode",
        "1304": "leetcode",
        "1305": "leetcode",
        "1306": "leetcode",
        "1307": "leetcode",
        "1308": "leetcode",
        "1309": "leetcode",
        "1310": "leetcode",
        "1311": "leetcode",
        "1312": "leetcode",
        "1313": "leetcode",
        "1314": "leetcode",
        "1315": "leetcode",
        "1316": "leetcode",
        "1317": "leetcode",
        "1318": "leetcode",
        "1319": "leetcode",
        "1320": "leetcode",
        "1321": "leetcode",
        "1322": "leetcode",
        "1323": "leetcode",
        "1324": "leetcode",
        "1325": "leetcode",
        "1326": "leetcode",
        "1327": "leetcode",
        "1328": "leetcode",
        "1329": "leetcode",
        "1330": "leetcode",
        "1331": "leetcode",
        "1332": "leetcode",
        "1333": "leetcode",
        "1334": "leetcode",
        "1335": "leetcode",
        "1336": "leetcode",
        "1337": "leetcode",
        "1338": "leetcode",
        "1339": "leetcode",
        "1340": "leetcode",
        "1341": "leetcode",
        "1342": "leetcode",
        "1343": "leetcode",
        "1344": "leetcode",
        "1345": "leetcode",
        "1346": "leetcode",
        "1347": "leetcode",
        "1348": "leetcode",
        "1349": "leetcode",
        "1350": "leetcode",
        "1351": "leetcode",
        "1352": "leetcode",
        "1353": "leetcode",
        "1354": "leetcode",
        "1355": "leetcode",
        "1356": "leetcode",
        "1357": "leetcode",
        "1358": "leetcode",
        "1359": "leetcode",
        "1360": "leetcode",
        "1361": "leetcode",
        "1362": "leetcode",
        "1363": "leetcode",
        "1364": "leetcode",
        "1365": "leetcode",
        "1366": "leetcode",
        "1367": "leetcode",
        "1368": "leetcode",
        "1369": "leetcode",
        "1370": "leetcode",
        "1371": "leetcode",
        "1372": "leetcode",
        "1373": "leetcode",
        "1374": "leetcode",
        "1375": "leetcode",
        "1376": "leetcode",
        "1377": "leetcode",
        "1378": "leetcode",
        "1379": "leetcode",
        "1380": "leetcode",
        "1381": "leetcode",
        "1382": "leetcode",
        "1383": "leetcode",
        "1384": "leetcode",
        "1385": "leetcode",
        "1386": "leetcode",
        "1387": "leetcode",
        "1388": "leetcode",
        "1389": "leetcode",
        "1390": "leetcode",
        "1391": "leetcode",
        "1392": "leetcode",
        "1393": "leetcode",
        "1394": "leetcode",
        "1395": "leetcode",
        "1396": "leetcode",
        "1397": "leetcode",
        "1398": "leetcode",
        "1399": "leetcode",
        "1400": "leetcode",
        "1401": "leetcode",
        "1402": "leetcode",
        "1403": "leetcode",
        "1404": "leetcode",
        "1405": "leetcode",
        "1406": "leetcode",
        "1407": "leetcode",
        "1408": "leetcode",
        "1409": "leetcode",
        "1410": "leetcode",
        "1411": "leetcode",
        "1412": "leetcode",
        "1413": "leetcode",
        "1414": "leetcode",
        "1415": "leetcode",
        "1416": "leetcode",
        "1417": "leetcode",
        "1418": "leetcode",
        "1419": "leetcode",
        "1420": "leetcode",
        "1421": "leetcode",
        "1422": "leetcode",
        "1423": "leetcode",
        "1424": "leetcode",
        "1425": "leetcode",
        "1426": "leetcode",
        "1427": "leetcode",
        "1428": "leetcode",
        "1429": "leetcode",
        "1430": "leetcode",
        "1431": "leetcode",
        "1432": "leetcode",
        "1433": "leetcode",
        "1434": "leetcode",
        "1435": "leetcode",
        "1436": "leetcode",
        "1437": "leetcode",
        "1438": "leetcode",
        "1439": "leetcode",
        "1440": "leetcode",
        "1441": "leetcode",
        "1442": "leetcode",
        "1443": "leetcode",
        "1444": "leetcode",
        "1445": "leetcode",
        "1446": "leetcode",
        "1447": "leetcode",
        "1448": "leetcode",
        "1449": "leetcode",
        "1450": "leetcode",
        "1451": "leetcode",
        "1452": "leetcode",
        "1453": "leetcode",
        "1454": "leetcode",
        "1455": "leetcode",
        "1456": "leetcode",
        "1457": "leetcode",
        "1458": "leetcode",
        "1459": "leetcode",
        "1460": "leetcode",
        "1461": "leetcode",
        "1462": "leetcode",
        "1463": "leetcode",
        "1464": "leetcode",
        "1465": "leetcode",
        "1466": "leetcode",
        "1467": "leetcode",
        "1468": "leetcode",
        "1469": "leetcode",
        "1470": "leetcode",
        "1471": "leetcode",
        "1472": "leetcode",
        "1473": "leetcode",
        "1474": "leetcode",
        "1475": "leetcode",
        "1476": "leetcode",
        "1477": "leetcode",
        "1478": "leetcode",
        "1479": "leetcode",
        "1480": "leetcode",
        "1481": "leetcode",
        "1482": "leetcode",
        "1483": "leetcode",
        "1484": "leetcode",
        "1485": "leetcode",
        "1486": "leetcode",
        "1487": "leetcode",
        "1488": "leetcode",
        "1489": "leetcode",
        "1490": "leetcode",
        "1491": "leetcode",
        "1492": "leetcode",
        "1493": "leetcode",
        "1494": "leetcode",
        "1495": "leetcode",
        "1496": "leetcode",
        "1497": "leetcode",
        "1498": "leetcode",
        "1499": "leetcode",
        "1500": "leetcode",
        "1501": "leetcode",
        "1502": "leetcode",
        "1503": "leetcode",
        "1504": "leetcode",
        "1505": "leetcode",
        "1506": "leetcode",
        "1507": "leetcode",
        "1508": "leetcode",
        "1509": "leetcode",
        "1510": "leetcode",
        "1511": "leetcode",
        "1512": "leetcode",
        "1513": "leetcode",
        "1514": "leetcode",
        "1515": "leetcode",
        "1516": "leetcode",
        "1517": "leetcode",
        "1518": "leetcode",
        "1519": "leetcode",
        "1520": "leetcode",
        "1521": "leetcode",
        "1522": "leetcode",
        "1523": "leetcode",
        "1524": "leetcode",
        "1525": "leetcode",
        "1526": "leetcode",
        "1527": "leetcode",
        "1528": "leetcode",
        "1529": "leetcode",
        "1530": "leetcode",
        "1531": "leetcode",
        "1532": "leetcode",
        "1533": "leetcode",
        "1534": "leetcode",
        "1535": "leetcode",
        "1536": "leetcode",
        "1537": "leetcode",
        "1538": "leetcode",
        "1539": "leetcode",
        "1540": "leetcode",
        "1541": "leetcode",
        "1542": "leetcode",
        "1543": "leetcode",
        "1544": "leetcode",
        "1545": "leetcode",
        "1546": "leetcode",
        "1547": "leetcode",
        "1548": "leetcode",
        "1549": "leetcode",
        "1550": "leetcode",
        "1551": "leetcode",
        "1552": "leetcode",
        "1553": "leetcode",
        "1554": "leetcode",
        "1555": "leetcode",
        "1556": "leetcode",
        "1557": "leetcode",
        "1558": "leetcode",
        "1559": "leetcode",
        "1560": "leetcode",
        "1561": "leetcode",
        "1562": "leetcode",
        "1563": "leetcode",
        "1564": "leetcode",
        "1565": "leetcode",
        "1566": "leetcode",
        "1567": "leetcode",
        "1568": "leetcode",
        "1569": "leetcode",
        "1570": "leetcode",
        "1571": "leetcode",
        "1572": "leetcode",
        "1573": "leetcode",
        "1574": "leetcode",
        "1575": "leetcode",
        "1576": "leetcode",
        "1577": "leetcode",
        "1578": "leetcode",
        "1579": "leetcode",
        "1580": "leetcode",
        "1581": "leetcode",
        "1582": "leetcode",
        "1583": "leetcode",
        "1584": "leetcode",
        "1585": "leetcode",
        "1586": "leetcode",
        "1587": "leetcode",
        "1588": "leetcode",
        "1589": "leetcode",
        "1590": "leetcode",
        "1591": "leetcode",
        "1592": "leetcode",
        "1593": "leetcode",
        "1594": "leetcode",
        "1595": "leetcode",
        "1596": "leetcode",
        "1597": "leetcode",
        "1598": "leetcode",
        "1599": "leetcode",
        "1600": "leetcode",
        "1601": "leetcode",
        "1602": "leetcode",
        "1603": "leetcode",
        "1604": "leetcode",
        "1605": "leetcode",
        "1606": "leetcode",
        "1607": "leetcode",
        "1608": "leetcode",
        "1609": "leetcode",
        "1610": "leetcode",
        "1611": "leetcode",
        "1612": "leetcode",
        "1613": "leetcode",
        "1614": "leetcode",
        "1615": "leetcode",
        "1616": "leetcode",
        "1617": "leetcode",
        "1618": "leetcode",
        "1619": "leetcode",
        "1620": "leetcode",
        "1621": "leetcode",
        "1622": "leetcode",
        "1623": "leetcode",
        "1624": "leetcode",
        "1625": "leetcode",
        "1626": "leetcode",
        "1627": "leetcode",
        "1628": "leetcode",
        "1629": "leetcode",
        "1630": "leetcode",
        "1631": "leetcode",
        "1632": "leetcode",
        "1633": "leetcode",
        "1634": "leetcode",
        "1635": "leetcode",
        "1636": "leetcode",
        "1637": "leetcode",
        "1638": "leetcode",
        "1639": "leetcode",
        "1640": "leetcode",
        "1641": "leetcode",
        "1642": "leetcode",
        "1643": "leetcode",
        "1644": "leetcode",
        "1645": "leetcode",
        "1646": "leetcode",
        "1647": "leetcode",
        "1648": "leetcode",
        "1649": "leetcode",
        "1650": "leetcode",
        "1651": "leetcode",
        "1652": "leetcode",
        "1653": "leetcode",
        "1654": "leetcode",
        "1655": "leetcode",
        "1656": "leetcode",
        "1657": "leetcode",
        "1658": "leetcode",
        "1659": "leetcode",
        "1660": "leetcode",
        "1661": "leetcode",
        "1662": "leetcode",
        "1663": "leetcode",
        "1664": "leetcode",
        "1665": "leetcode",
        "1666": "leetcode",
        "1667": "leetcode",
        "1668": "leetcode",
        "1669": "leetcode",
        "1670": "leetcode",
        "1671": "leetcode",
        "1672": "leetcode",
        "1673": "leetcode",
        "1674": "leetcode",
        "1675": "leetcode",
        "1676": "leetcode",
        "1677": "leetcode",
        "1678": "leetcode",
        "1679": "leetcode",
        "1680": "leetcode",
        "1681": "leetcode",
        "1682": "leetcode",
        "1683": "leetcode",
        "1684": "leetcode",
        "1685": "leetcode",
        "1686": "leetcode",
        "1687": "leetcode",
        "1688": "leetcode",
        "1689": "leetcode",
        "1690": "leetcode",
        "1691": "leetcode",
        "1692": "leetcode",
        "1693": "leetcode",
        "1694": "leetcode",
        "1695": "leetcode",
        "1696": "leetcode",
        "1697": "leetcode",
        "1698": "leetcode",
        "1699": "leetcode",
        "1700": "leetcode",
        "1701": "leetcode",
        "1702": "leetcode",
        "1703": "leetcode",
        "1704": "leetcode",
        "1705": "leetcode",
        "1706": "leetcode",
        "1707": "leetcode",
        "1708": "leetcode",
        "1709": "leetcode",
        "1710": "leetcode",
        "1711": "leetcode",
        "1712": "leetcode",
        "1713": "leetcode",
        "1714": "leetcode",
        "1715": "leetcode",
        "1716": "leetcode",
        "1717": "leetcode",
        "1718": "leetcode",
        "1719": "leetcode",
        "1720": "leetcode",
        "1721": "leetcode",
        "1722": "leetcode",
        "1723": "leetcode",
        "1724": "leetcode",
        "1725": "leetcode",
        "1726": "leetcode",
        "1727": "leetcode",
        "1728": "leetcode",
        "1729": "leetcode",
        "1730": "leetcode",
        "1731": "leetcode",
        "1732": "leetcode",
        "1733": "leetcode",
        "1734": "leetcode",
        "1735": "leetcode",
        "1736": "leetcode",
        "1737": "leetcode",
        "1738": "leetcode",
        "1739": "leetcode",
        "1740": "leetcode",
        "1741": "leetcode",
        "1742": "leetcode",
        "1743": "leetcode",
        "1744": "leetcode",
        "1745": "leetcode",
        "1746": "leetcode",
        "1747": "leetcode",
        "1748": "leetcode",
        "1749": "leetcode",
        "1750": "leetcode",
        "1751": "leetcode",
        "1752": "leetcode",
        "1753": "leetcode",
        "1754": "leetcode",
        "1755": "leetcode",
        "1756": "leetcode",
        "1757": "leetcode",
        "1758": "leetcode",
        "1759": "leetcode",
        "1760": "leetcode",
        "1761": "leetcode",
        "1762": "leetcode",
        "1763": "leetcode",
        "1764": "leetcode",
        "1765": "leetcode",
        "1766": "leetcode",
        "1767": "leetcode",
        "1768": "leetcode",
        "1769": "leetcode",
        "1770": "leetcode",
        "1771": "leetcode",
        "1772": "leetcode",
        "1773": "leetcode",
        "1774": "leetcode",
        "1775": "leetcode",
        "1776": "leetcode",
        "1777": "leetcode",
        "1778": "leetcode",
        "1779": "leetcode",
        "1780": "leetcode",
        "1781": "leetcode",
        "1782": "leetcode",
        "1783": "leetcode",
        "1784": "leetcode",
        "1785": "leetcode",
        "1786": "leetcode",
        "1787": "leetcode",
        "1788": "leetcode",
        "1789": "leetcode",
        "1790": "leetcode",
        "1791": "leetcode",
        "1792": "leetcode",
        "1793": "leetcode",
        "1794": "leetcode",
        "1795": "leetcode",
        "1796": "leetcode",
        "1797": "leetcode",
        "1798": "leetcode",
        "1799": "leetcode",
        "1800": "leetcode",
        "1801": "leetcode",
        "1802": "leetcode",
        "1803": "leetcode",
        "1804": "leetcode",
        "1805": "leetcode",
        "1806": "leetcode",
        "1807": "leetcode",
        "1808": "leetcode",
        "1809": "leetcode",
        "1810": "leetcode",
        "1811": "leetcode",
        "1812": "leetcode",
        "1813": "leetcode",
        "1814": "leetcode",
        "1815": "leetcode",
        "1816": "leetcode",
        "1817": "leetcode",
        "1818": "leetcode",
        "1819": "leetcode",
        "1820": "leetcode",
        "1821": "leetcode",
        "1822": "leetcode",
        "1823": "leetcode",
        "1824": "leetcode",
        "1825": "leetcode",
        "1826": "leetcode",
        "1827": "leetcode",
        "1828": "leetcode",
        "1829": "leetcode",
        "1830": "leetcode",
        "1831": "leetcode",
        "1832": "leetcode",
        "1833": "leetcode",
        "1834": "leetcode",
        "1835": "leetcode",
        "1836": "leetcode",
        "1837": "leetcode",
        "1838": "leetcode",
        "1839": "leetcode",
        "1840": "leetcode",
        "1841": "leetcode",
        "1842": "leetcode",
        "1843": "leetcode",
        "1844": "leetcode",
        "1845": "leetcode",
        "1846": "leetcode",
        "1847": "leetcode",
        "1848": "leetcode",
        "1849": "leetcode",
        "1850": "leetcode",
        "1851": "leetcode",
        "1852": "leetcode",
        "1853": "leetcode",
        "1854": "leetcode",
        "1855": "leetcode",
        "1856": "leetcode",
        "1857": "leetcode",
        "1858": "leetcode",
        "1859": "leetcode",
        "1860": "leetcode",
        "1861": "leetcode",
        "1862": "leetcode",
        "1863": "leetcode",
        "1864": "leetcode",
        "1865": "leetcode",
        "1866": "leetcode",
        "1867": "leetcode",
        "1868": "leetcode",
        "1869": "leetcode",
        "1870": "leetcode",
        "1871": "leetcode",
        "1872": "leetcode",
        "1873": "leetcode",
        "1874": "leetcode",
        "1875": "leetcode",
        "1876": "leetcode",
        "1877": "leetcode",
        "1878": "leetcode",
        "1879": "leetcode",
        "1880": "leetcode",
        "1881": "leetcode",
        "1882": "leetcode",
        "1883": "leetcode",
        "1884": "leetcode",
        "1885": "leetcode",
        "1886": "leetcode",
        "1887": "leetcode",
        "1888": "leetcode",
        "1889": "leetcode",
        "1890": "leetcode",
        "1891": "leetcode",
        "1892": "leetcode",
        "1893": "leetcode",
        "1894": "leetcode",
        "1895": "leetcode",
        "1896": "leetcode",
        "1897": "leetcode",
        "1898": "leetcode",
        "1899": "leetcode",
        "1900": "leetcode",
        "1901": "leetcode",
        "1902": "leetcode",
        "1903": "leetcode",
        "1904": "leetcode",
        "1905": "leetcode",
        "1906": "leetcode",
        "1907": "leetcode",
        "1908": "leetcode",
        "1909": "leetcode",
        "1910": "leetcode",
        "1911": "leetcode",
        "1912": "leetcode",
        "1913": "leetcode",
        "1914": "leetcode",
        "1915": "leetcode",
        "1916": "leetcode",
        "1917": "leetcode",
        "1918": "leetcode",
        "1919": "leetcode",
        "1920": "leetcode",
        "1921": "leetcode",
        "1922": "leetcode",
        "1923": "leetcode",
        "1924": "leetcode",
        "1925": "leetcode",
        "1926": "leetcode",
        "1927": "leetcode",
        "1928": "leetcode",
        "1929": "leetcode",
        "1930": "leetcode",
        "1931": "leetcode",
        "1932": "leetcode",
        "1933": "leetcode",
        "1934": "leetcode",
        "1935": "leetcode",
        "1936": "leetcode",
        "1937": "leetcode",
        "1938": "leetcode",
        "1939": "leetcode",
        "1940": "leetcode",
        "1941": "leetcode",
        "1942": "leetcode",
        "1943": "leetcode",
        "1944": "leetcode",
        "1945": "leetcode",
        "1946": "leetcode",
        "1947": "leetcode",
        "1948": "leetcode",
        "1949": "leetcode",
        "1950": "leetcode",
        "1951": "leetcode",
        "1952": "leetcode",
        "1953": "leetcode",
        "1954": "leetcode",
        "1955": "leetcode",
        "1956": "leetcode",
        "1957": "leetcode",
        "1958": "leetcode",
        "1959": "leetcode",
        "1960": "leetcode",
        "1961": "leetcode",
        "1962": "leetcode",
        "1963": "leetcode",
        "1964": "leetcode",
        "1965": "leetcode",
        "1966": "leetcode",
        "1967": "leetcode",
        "1968": "leetcode",
        "1969": "leetcode",
        "1970": "leetcode",
        "1971": "leetcode",
        "1972": "leetcode",
        "1973": "leetcode",
        "1974": "leetcode",
        "1975": "leetcode",
        "1976": "leetcode",
        "1977": "leetcode",
        "1978": "leetcode",
        "1979": "leetcode",
        "1980": "leetcode",
        "1981": "leetcode",
        "1982": "leetcode",
        "1983": "leetcode",
        "1984": "leetcode",
        "1985": "leetcode",
        "1986": "leetcode",
        "1987": "leetcode",
        "1988": "leetcode",
        "1989": "leetcode",
        "1990": "leetcode",
        "1991": "leetcode",
        "1992": "leetcode",
        "1993": "leetcode",
        "1994": "leetcode",
        "1995": "leetcode",
        "1996": "leetcode",
        "1997": "leetcode",
        "1998": "leetcode",
        "1999": "leetcode",
        "2000": "leetcode",
        "2001": "leetcode",
        "2002": "leetcode",
        "2003": "leetcode",
        "2004": "leetcode",
        "2005": "leetcode",
        "2006": "leetcode",
        "2007": "leetcode",
        "2008": "leetcode",
        "2009": "leetcode",
        "2010": "leetcode",
        "2011": "leetcode",
        "2012": "leetcode",
        "2013": "leetcode",
        "2014": "leetcode",
        "2015": "leetcode",
        "2016": "leetcode",
        "2017": "leetcode",
        "2018": "leetcode",
        "2019": "leetcode",
        "2020": "leetcode",
        "2021": "leetcode",
        "2022": "leetcode",
        "2023": "leetcode",
        "2024": "leetcode",
        "2025": "leetcode",
        "2026": "leetcode",
        "2027": "leetcode",
        "2028": "leetcode",
        "2029": "leetcode",
        "2030": "leetcode",
        "2031": "leetcode",
        "2032": "leetcode",
        "2033": "leetcode",
        "2034": "leetcode",
        "2035": "leetcode",
        "2036": "leetcode",
        "2037": "leetcode",
        "2038": "leetcode",
        "2039": "leetcode",
        "2040": "leetcode",
        "2041": "leetcode",
        "2042": "leetcode",
        "2043": "leetcode",
        "2044": "leetcode",
        "2045": "leetcode",
        "2046": "leetcode",
        "2047": "leetcode",
        "2048": "leetcode",
        "2049": "leetcode",
        "2050": "leetcode",
        "2051": "leetcode",
        "2052": "leetcode",
        "2053": "leetcode",
        "2054": "leetcode",
        "2055": "leetcode",
        "2056": "leetcode",
        "2057": "leetcode",
        "2058": "leetcode",
        "2059": "leetcode",
        "2060": "leetcode",
        "2061": "leetcode",
        "2062": "leetcode",
        "2063": "leetcode",
        "2064": "leetcode",
        "2065": "leetcode",
        "2066": "leetcode",
        "2067": "leetcode",
        "2068": "leetcode",
        "2069": "leetcode",
        "2070": "leetcode",
        "2071": "leetcode",
        "2072": "leetcode",
        "2073": "leetcode",
        "2074": "leetcode",
        "2075": "leetcode",
        "2076": "leetcode",
        "2077": "leetcode",
        "2078": "leetcode",
        "2079": "leetcode",
        "2080": "leetcode",
        "2081": "leetcode",
        "2082": "leetcode",
        "2083": "leetcode",
        "2084": "leetcode",
        "2085": "leetcode",
        "2086": "leetcode",
        "2087": "leetcode",
        "2088": "leetcode",
        "2089": "leetcode",
        "2090": "leetcode",
        "2091": "leetcode",
        "2092": "leetcode",
        "2093": "leetcode",
        "2094": "leetcode",
        "2095": "leetcode",
        "2096": "leetcode",
        "2097": "leetcode",
        "2098": "leetcode",
        "2099": "leetcode",
        "2100": "leetcode",
        "2101": "leetcode",
        "2102": "leetcode",
        "2103": "leetcode",
        "2104": "leetcode",
        "2105": "leetcode",
        "2106": "leetcode",
        "2107": "leetcode",
        "2108": "leetcode",
        "2109": "leetcode",
        "2110": "leetcode",
        "2111": "leetcode",
        "2112": "leetcode",
        "2113": "leetcode",
        "2114": "leetcode",
        "2115": "leetcode",
        "2116": "leetcode",
        "2117": "leetcode",
        "2118": "leetcode",
        "2119": "leetcode",
        "2120": "leetcode",
        "2121": "leetcode",
        "2122": "leetcode",
        "2123": "leetcode",
        "2124": "leetcode",
        "2125": "leetcode",
        "2126": "leetcode",
        "2127": "leetcode",
        "2128": "leetcode",
        "2129": "leetcode",
        "2130": "leetcode",
        "2131": "leetcode",
        "2132": "leetcode",
        "2133": "leetcode",
        "2134": "leetcode",
        "2135": "leetcode",
        "2136": "leetcode",
        "2137": "leetcode",
        "2138": "leetcode",
        "2139": "leetcode",
        "2140": "leetcode",
        "2141": "leetcode",
        "2142": "leetcode",
        "2143": "leetcode",
        "2144": "leetcode",
        "2145": "leetcode",
        "2146": "leetcode",
        "2147": "leetcode",
        "2148": "leetcode",
        "2149": "leetcode",
        "2150": "leetcode",
        "2151": "leetcode",
        "2152": "leetcode",
        "2153": "leetcode",
        "2154": "leetcode",
        "2155": "leetcode",
        "2156": "leetcode",
        "2157": "leetcode",
        "2158": "leetcode",
        "2159": "leetcode",
        "2160": "leetcode",
        "2161": "leetcode",
        "2162": "leetcode",
        "2163": "leetcode",
        "2164": "leetcode",
        "2165": "leetcode",
        "2166": "leetcode",
        "2167": "leetcode",
        "2168": "leetcode",
        "2169": "leetcode",
        "2170": "leetcode",
        "2171": "leetcode",
        "2172": "leetcode",
        "2173": "leetcode",
        "2174": "leetcode",
        "2175": "leetcode",
        "2176": "leetcode",
        "2177": "leetcode",
        "2178": "leetcode",
        "2179": "leetcode",
        "2180": "leetcode",
        "2181": "leetcode",
        "2182": "leetcode",
        "2183": "leetcode",
        "2184": "leetcode",
        "2185": "leetcode",
        "2186": "leetcode",
        "2187": "leetcode",
        "2188": "leetcode",
        "2189": "leetcode",
        "2190": "leetcode",
        "2191": "leetcode",
        "2192": "leetcode",
        "2193": "leetcode",
        "2194": "leetcode",
        "2195": "leetcode",
        "2196": "leetcode",
        "2197": "leetcode",
        "2198": "leetcode",
        "2199": "leetcode",
        "2200": "leetcode",
        "2201": "leetcode",
        "2202": "leetcode",
        "2203": "leetcode",
        "2204": "leetcode",
        "2205": "leetcode",
        "2206": "leetcode",
        "2207": "leetcode",
        "2208": "leetcode",
        "2209": "leetcode",
        "2210": "leetcode",
        "2211": "leetcode",
        "2212": "leetcode",
        "2213": "leetcode",
        "2214": "leetcode",
        "2215": "leetcode",
        "2216": "leetcode",
        "2217": "leetcode",
        "2218": "leetcode",
        "2219": "leetcode",
        "2220": "leetcode",
        "2221": "leetcode",
        "2222": "leetcode",
        "2223": "leetcode",
        "2224": "leetcode",
        "2225": "leetcode",
        "2226": "leetcode",
        "2227": "leetcode",
        "2228": "leetcode",
        "2229": "leetcode",
        "2230": "leetcode",
        "2231": "leetcode",
        "2232": "leetcode",
        "2233": "leetcode",
        "2234": "leetcode",
        "2235": "leetcode",
        "2236": "leetcode",
        "2237": "leetcode",
        "2238": "leetcode",
        "2239": "leetcode",
        "2240": "leetcode",
        "2241": "leetcode",
        "2242": "leetcode",
        "2243": "leetcode",
        "2244": "leetcode",
        "2245": "leetcode",
        "2246": "leetcode",
        "2247": "leetcode",
        "2248": "leetcode",
        "2249": "leetcode",
        "2250": "leetcode",
        "2251": "leetcode",
        "2252": "leetcode",
        "2253": "leetcode",
        "2254": "leetcode",
        "2255": "leetcode",
        "2256": "leetcode",
        "2257": "leetcode",
        "2258": "leetcode",
        "2259": "leetcode",
        "2260": "leetcode",
        "2261": "leetcode",
        "2262": "leetcode",
        "2263": "leetcode",
        "2264": "leetcode",
        "2265": "leetcode",
        "2266": "leetcode",
        "2267": "leetcode",
        "2268": "leetcode",
        "2269": "leetcode",
        "2270": "leetcode",
        "2271": "leetcode",
        "2272": "leetcode",
        "2273": "leetcode",
        "2274": "leetcode",
        "2275": "leetcode",
        "2276": "leetcode",
        "2277": "leetcode",
        "2278": "leetcode",
        "2279": "leetcode",
        "2280": "leetcode",
        "2281": "leetcode",
        "2282": "leetcode",
        "2283": "leetcode",
        "2284": "leetcode",
        "2285": "leetcode",
        "2286": "leetcode",
        "2287": "leetcode",
        "2288": "leetcode",
        "2289": "leetcode",
        "2290": "leetcode",
        "2291": "leetcode",
        "2292": "leetcode",
        "2293": "leetcode",
        "2294": "leetcode",
        "2295": "leetcode",
        "2296": "leetcode",
        "2297": "leetcode",
        "2298": "leetcode",
        "2299": "leetcode",
        "2300": "leetcode",
        "2301": "leetcode",
        "2302": "leetcode",
        "2303": "leetcode",
        "2304": "leetcode",
        "2305": "leetcode",
        "2306": "leetcode",
        "2307": "leetcode",
        "2308": "leetcode",
        "2309": "leetcode",
        "2310": "leetcode",
        "2311": "leetcode",
        "2312": "leetcode",
        "2313": "leetcode",
        "2314": "leetcode",
        "2315": "leetcode",
        "2316": "leetcode",
        "2317": "leetcode",
        "2318": "leetcode",
        "2319": "leetcode",
        "2320": "leetcode",
        "2321": "leetcode",
        "2322": "leetcode",
        "2323": "leetcode",
        "2324": "leetcode",
        "2325": "leetcode",
        "2326": "leetcode",
        "2327": "leetcode",
        "2328": "leetcode",
        "2329": "leetcode",
        "2330": "leetcode",
        "2331": "leetcode",
        "2332": "leetcode",
        "2333": "leetcode",
        "2334": "leetcode",
        "2335": "leetcode",
        "2336": "leetcode",
        "2337": "leetcode",
        "2338": "leetcode",
        "2339": "leetcode",
        "2340": "leetcode",
        "2341": "leetcode",
        "2342": "leetcode",
        "2343": "leetcode",
        "2344": "leetcode",
        "2345": "leetcode",
        "2346": "leetcode",
        "2347": "leetcode",
        "2348": "leetcode",
        "2349": "leetcode",
        "2350": "leetcode",
        "2351": "leetcode",
        "2352": "leetcode",
        "2353": "leetcode",
        "2354": "leetcode",
        "2355": "leetcode",
        "2356": "leetcode",
        "2357": "leetcode",
        "2358": "leetcode",
        "2359": "leetcode",
        "2360": "leetcode",
        "2361": "leetcode",
        "2362": "leetcode",
        "2363": "leetcode",
        "2364": "leetcode",
        "2365": "leetcode",
        "2366": "leetcode",
        "2367": "leetcode",
        "2368": "leetcode",
        "2369": "leetcode",
        "2370": "leetcode",
        "2371": "leetcode",
        "2372": "leetcode",
        "2373": "leetcode",
        "2374": "leetcode",
        "2375": "leetcode",
        "2376": "leetcode",
        "2377": "leetcode",
        "2378": "leetcode",
        "2379": "leetcode",
        "2380": "leetcode",
        "2381": "leetcode",
        "2382": "leetcode",
        "2383": "leetcode",
        "2384": "leetcode",
        "2385": "leetcode",
        "2386": "leetcode",
        "2387": "leetcode",
        "2388": "leetcode",
        "2389": "leetcode",
        "2390": "leetcode",
        "2391": "leetcode",
        "2392": "leetcode",
        "2393": "leetcode",
        "2394": "leetcode",
        "2395": "leetcode",
        "2396": "leetcode",
        "2397": "leetcode",
        "2398": "leetcode",
        "2399": "leetcode",
        "2400": "leetcode",
        "2401": "leetcode",
        "2402": "leetcode",
        "2403": "leetcode",
        "2404": "leetcode",
        "2405": "leetcode",
        "2406": "leetcode",
        "2407": "leetcode",
        "2408": "leetcode",
        "2409": "leetcode",
        "2410": "leetcode",
        "2411": "leetcode",
        "2412": "leetcode",
        "2413": "leetcode",
        "2414": "leetcode",
        "2415": "leetcode",
        "2416": "leetcode",
        "2417": "leetcode",
        "2418": "leetcode",
        "2419": "leetcode",
        "2420": "leetcode",
        "2421": "leetcode",
        "2422": "leetcode",
        "2423": "leetcode",
        "2424": "leetcode",
        "2425": "leetcode",
        "2426": "leetcode"
    },
    "upvotes": {
        "0": 926,
        "1": 58400,
        "2": 31800,
        "3": 28800,
        "4": 7900,
        "5": 13400,
        "6": 13000,
        "7": 12300,
        "8": 29700,
        "9": 7400,
        "10": 14700,
        "11": 18000,
        "12": 31400,
        "13": 10600,
        "14": 18900,
        "15": 11500,
        "16": 19200,
        "17": 24500,
        "18": 22200,
        "19": 21400,
        "20": 19700,
        "21": 12100,
        "22": 14000,
        "23": 15300,
        "24": 3000,
        "25": 6100,
        "26": 5300,
        "27": 2000,
        "28": 18800,
        "29": 12500,
        "30": 26700,
        "31": 20900,
        "32": 16500,
        "33": 10900,
        "34": 9700,
        "35": 4100,
        "36": 19100,
        "37": 11100,
        "38": 17000,
        "39": 32600,
        "40": 7200,
        "41": 8400,
        "42": 14900,
        "43": 19300,
        "44": 8600,
        "45": 17900,
        "46": 19600,
        "47": 10000,
        "48": 12600,
        "49": 3900,
        "50": 34500,
        "51": 15200,
        "52": 19700,
        "53": 22500,
        "54": 10600,
        "55": 5400,
        "56": 6800,
        "57": 9900,
        "58": 16800,
        "59": 8900,
        "60": 12600,
        "61": 1300,
        "62": 9600,
        "63": 3800,
        "64": 8400,
        "65": 22300,
        "66": 5700,
        "67": 15100,
        "68": 16000,
        "69": 18900,
        "70": 18200,
        "71": 8300,
        "72": 17500,
        "73": 16100,
        "74": 7100,
        "75": 8600,
        "76": 8900,
        "77": 8900,
        "78": 17500,
        "79": 10700,
        "80": 7400,
        "81": 3400,
        "82": 15500,
        "83": 2300,
        "84": 9900,
        "85": 12100,
        "86": 11800,
        "87": 13700,
        "88": 7600,
        "89": 10400,
        "90": 8300,
        "91": 17000,
        "92": 8000,
        "93": 11700,
        "94": 15600,
        "95": 11000,
        "96": 13000,
        "97": 15300,
        "98": 8100,
        "99": 11100,
        "100": 7500,
        "101": 10900,
        "102": 7400,
        "103": 9800,
        "104": 8000,
        "105": 12500,
        "106": 6700,
        "107": 9800,
        "108": 5900,
        "109": 13100,
        "110": 4900,
        "111": 9700,
        "112": 31600,
        "113": 13900,
        "114": 9800,
        "115": 16900,
        "116": 9600,
        "117": 6100,
        "118": 12200,
        "119": 20400,
        "120": 8100,
        "121": 8800,
        "122": 13100,
        "123": 9600,
        "124": 12200,
        "125": 8000,
        "126": 16800,
        "127": 8000,
        "128": 14100,
        "129": 17400,
        "130": 7300,
        "131": 15800,
        "132": 13800,
        "133": 11300,
        "134": 8100,
        "135": 7200,
        "136": 21000,
        "137": 3100,
        "138": 11800,
        "139": 4200,
        "140": 7800,
        "141": 8700,
        "142": 18800,
        "143": 13500,
        "144": 4700,
        "145": 14400,
        "146": 15200,
        "147": 12400,
        "148": 3300,
        "149": 2100,
        "150": 11900,
        "151": 5600,
        "152": 19700,
        "153": 4800,
        "154": 3300,
        "155": 5900,
        "156": 3600,
        "157": 3700,
        "158": 2000,
        "159": 2200,
        "160": 8900,
        "161": 2200,
        "162": 2600,
        "163": 2100,
        "164": 2700,
        "165": 2100,
        "166": 2200,
        "167": 3400,
        "168": 7500,
        "169": 18400,
        "170": 6600,
        "171": 546,
        "172": 429,
        "173": 150,
        "174": 393,
        "175": 1700,
        "176": 3200,
        "177": 21400,
        "178": 12200,
        "179": 23100,
        "180": 4000,
        "181": 10600,
        "182": 8400,
        "183": 8100,
        "184": 9200,
        "185": 21900,
        "186": 16500,
        "187": 11700,
        "188": 12800,
        "189": 10900,
        "190": 7700,
        "191": 9500,
        "192": 10000,
        "193": 4200,
        "194": 17300,
        "195": 6100,
        "196": 12200,
        "197": 5900,
        "198": 6300,
        "199": 1000,
        "200": 10200,
        "201": 8800,
        "202": 6200,
        "203": 14100,
        "204": 6200,
        "205": 4000,
        "206": 9800,
        "207": 11600,
        "208": 6900,
        "209": 7800,
        "210": 1600,
        "211": 16700,
        "212": 23000,
        "213": 12100,
        "214": 6100,
        "215": 12400,
        "216": 6700,
        "217": 4900,
        "218": 6400,
        "219": 1300,
        "220": 6600,
        "221": 12400,
        "222": 3600,
        "223": 1400,
        "224": 370,
        "225": 8500,
        "226": 11300,
        "227": 3400,
        "228": 17000,
        "229": 1900,
        "230": 23600,
        "231": 6400,
        "232": 7400,
        "233": 1800,
        "234": 12100,
        "235": 10300,
        "236": 2500,
        "237": 21100,
        "238": 5900,
        "239": 5000,
        "240": 1200,
        "241": 4800,
        "242": 9500,
        "243": 8300,
        "244": 9100,
        "245": 8900,
        "246": 8700,
        "247": 3500,
        "248": 2700,
        "249": 2000,
        "250": 19200,
        "251": 3100,
        "252": 3100,
        "253": 2300,
        "254": 10200,
        "255": 9000,
        "256": 2300,
        "257": 2400,
        "258": 5900,
        "259": 8200,
        "260": 391,
        "261": 4500,
        "262": 8600,
        "263": 11200,
        "264": 4900,
        "265": 4000,
        "266": 5200,
        "267": 8700,
        "268": 4700,
        "269": 6200,
        "270": 7700,
        "271": 1800,
        "272": 6100,
        "273": 4000,
        "274": 1600,
        "275": 3500,
        "276": 1500,
        "277": 4300,
        "278": 6000,
        "279": 4300,
        "280": 957,
        "281": 6400,
        "282": 3800,
        "283": 2200,
        "284": 5200,
        "285": 7400,
        "286": 9300,
        "287": 2300,
        "288": 3100,
        "289": 5100,
        "290": 1400,
        "291": 459,
        "292": 2700,
        "293": 9000,
        "294": 1300,
        "295": 5000,
        "296": 1600,
        "297": 888,
        "298": 9800,
        "299": 12900,
        "300": 6300,
        "301": 1600,
        "302": 1300,
        "303": 1300,
        "304": 9400,
        "305": 1100,
        "306": 1400,
        "307": 5600,
        "308": 5500,
        "309": 1300,
        "310": 7100,
        "311": 3800,
        "312": 6000,
        "313": 10000,
        "314": 2800,
        "315": 5400,
        "316": 3100,
        "317": 5100,
        "318": 12500,
        "319": 7500,
        "320": 2300,
        "321": 833,
        "322": 11000,
        "323": 1500,
        "324": 3600,
        "325": 2000,
        "326": 3000,
        "327": 800,
        "328": 8300,
        "329": 2200,
        "330": 11100,
        "331": 12500,
        "332": 1300,
        "333": 3900,
        "334": 10500,
        "335": 5200,
        "336": 5900,
        "337": 3400,
        "338": 845,
        "339": 9500,
        "340": 9300,
        "341": 8400,
        "342": 7500,
        "343": 2600,
        "344": 4900,
        "345": 7300,
        "346": 702,
        "347": 1800,
        "348": 6500,
        "349": 5800,
        "350": 3900,
        "351": 3400,
        "352": 6900,
        "353": 2700,
        "354": 410,
        "355": 1000,
        "356": 1100,
        "357": 3900,
        "358": 3900,
        "359": 5500,
        "360": 2100,
        "361": 3100,
        "362": 2200,
        "363": 457,
        "364": 177,
        "365": 3300,
        "366": 324,
        "367": 1100,
        "368": 394,
        "369": 5900,
        "370": 5900,
        "371": 458,
        "372": 3700,
        "373": 711,
        "374": 6300,
        "375": 11000,
        "376": 1200,
        "377": 8200,
        "378": 484,
        "379": 3500,
        "380": 1600,
        "381": 3800,
        "382": 8100,
        "383": 812,
        "384": 1900,
        "385": 1100,
        "386": 2300,
        "387": 8300,
        "388": 876,
        "389": 3800,
        "390": 1500,
        "391": 3600,
        "392": 9700,
        "393": 777,
        "394": 9500,
        "395": 433,
        "396": 3400,
        "397": 45,
        "398": 519,
        "399": 6300,
        "400": 1800,
        "401": 8000,
        "402": 2000,
        "403": 2000,
        "404": 4400,
        "405": 3900,
        "406": 2000,
        "407": 718,
        "408": 5300,
        "409": 2500,
        "410": 2000,
        "411": 9700,
        "412": 14100,
        "413": 2300,
        "414": 9900,
        "415": 988,
        "416": 783,
        "417": 2300,
        "418": 384,
        "419": 2500,
        "420": 3700,
        "421": 6000,
        "422": 190,
        "423": 2800,
        "424": 22000,
        "425": 2100,
        "426": 2300,
        "427": 1200,
        "428": 3500,
        "429": 11900,
        "430": 1200,
        "431": 8300,
        "432": 1500,
        "433": 3900,
        "434": 1000,
        "435": 7800,
        "436": 5800,
        "437": 2200,
        "438": 617,
        "439": 1000,
        "440": 1500,
        "441": 3200,
        "442": 2700,
        "443": 170,
        "444": 862,
        "445": 1100,
        "446": 2200,
        "447": 2800,
        "448": 1100,
        "449": 952,
        "450": 2000,
        "451": 1500,
        "452": 698,
        "453": 684,
        "454": 6700,
        "455": 86,
        "456": 1200,
        "457": 1300,
        "458": 1500,
        "459": 621,
        "460": 3800,
        "461": 8800,
        "462": 678,
        "463": 1200,
        "464": 10600,
        "465": 3600,
        "466": 3600,
        "467": 1400,
        "468": 1500,
        "469": 1700,
        "470": 4300,
        "471": 2700,
        "472": 3800,
        "473": 3500,
        "474": 3200,
        "475": 2000,
        "476": 5300,
        "477": 1500,
        "478": 1600,
        "479": 513,
        "480": 1600,
        "481": 3600,
        "482": 4800,
        "483": 4600,
        "484": 10900,
        "485": 3000,
        "486": 2400,
        "487": 4200,
        "488": 6800,
        "489": 5200,
        "490": 501,
        "491": 2400,
        "492": 8300,
        "493": 4500,
        "494": 1100,
        "495": 8900,
        "496": 2700,
        "497": 5700,
        "498": 795,
        "499": 2200,
        "500": 5900,
        "501": 1900,
        "502": 170,
        "503": 6900,
        "504": 2400,
        "505": 1200,
        "506": 1400,
        "507": 1700,
        "508": 1500,
        "509": 8300,
        "510": 2900,
        "511": 6300,
        "512": 2400,
        "513": 2600,
        "514": 4300,
        "515": 3900,
        "516": 2000,
        "517": 2100,
        "518": 1200,
        "519": 1400,
        "520": 10000,
        "521": 4000,
        "522": 3100,
        "523": 7200,
        "524": 637,
        "525": 6000,
        "526": 5900,
        "527": 5900,
        "528": 12000,
        "529": 3800,
        "530": 5100,
        "531": 2700,
        "532": 1900,
        "533": 869,
        "534": 4000,
        "535": 6900,
        "536": 7200,
        "537": 1500,
        "538": 878,
        "539": 6800,
        "540": 3700,
        "541": 2000,
        "542": 6900,
        "543": 722,
        "544": 8500,
        "545": 4400,
        "546": 1900,
        "547": 1800,
        "548": 4600,
        "549": 1900,
        "550": 2100,
        "551": 8500,
        "552": 8200,
        "553": 479,
        "554": 1300,
        "555": 13400,
        "556": 7600,
        "557": 4300,
        "558": 7600,
        "559": 4500,
        "560": 1200,
        "561": 560,
        "562": 398,
        "563": 4800,
        "564": 577,
        "565": 1800,
        "566": 538,
        "567": 719,
        "568": 722,
        "569": 10400,
        "570": 1500,
        "571": 2400,
        "572": 3600,
        "573": 8600,
        "574": 1800,
        "575": 2800,
        "576": 172,
        "577": 5100,
        "578": 2000,
        "579": 1800,
        "580": 1200,
        "581": 3800,
        "582": 3800,
        "583": 1500,
        "584": 1400,
        "585": 361,
        "586": 3500,
        "587": 4700,
        "588": 8400,
        "589": 2000,
        "590": 10100,
        "591": 753,
        "592": 295,
        "593": 3500,
        "594": 3600,
        "595": 5500,
        "596": 441,
        "597": 551,
        "598": 2300,
        "599": 3700,
        "600": 7300,
        "601": 547,
        "602": 3700,
        "603": 2800,
        "604": 5900,
        "605": 1100,
        "606": 2500,
        "607": 608,
        "608": 2600,
        "609": 998,
        "610": 874,
        "611": 229,
        "612": 1600,
        "613": 536,
        "614": 2100,
        "615": 4500,
        "616": 4300,
        "617": 324,
        "618": 1100,
        "619": 1900,
        "620": 1700,
        "621": 1800,
        "622": 3200,
        "623": 176,
        "624": 3300,
        "625": 921,
        "626": 776,
        "627": 4000,
        "628": 2200,
        "629": 1400,
        "630": 882,
        "631": 170,
        "632": 3500,
        "633": 1200,
        "634": 5600,
        "635": 1300,
        "636": 2000,
        "637": 2000,
        "638": 3400,
        "639": 813,
        "640": 1100,
        "641": 1600,
        "642": 7600,
        "643": 2800,
        "644": 3300,
        "645": 4300,
        "646": 1400,
        "647": 3200,
        "648": 975,
        "649": 1300,
        "650": 7600,
        "651": 3700,
        "652": 1100,
        "653": 1300,
        "654": 5400,
        "655": 2900,
        "656": 1100,
        "657": 3200,
        "658": 2900,
        "659": 2300,
        "660": 4300,
        "661": 11100,
        "662": 2400,
        "663": 2700,
        "664": 445,
        "665": 3800,
        "666": 2100,
        "667": 1600,
        "668": 4200,
        "669": 2000,
        "670": 854,
        "671": 11000,
        "672": 11900,
        "673": 3300,
        "674": 1300,
        "675": 1800,
        "676": 2500,
        "677": 6500,
        "678": 819,
        "679": 593,
        "680": 1800,
        "681": 1500,
        "682": 4700,
        "683": 2100,
        "684": 2800,
        "685": 3900,
        "686": 716,
        "687": 575,
        "688": 538,
        "689": 5100,
        "690": 4700,
        "691": 3100,
        "692": 1500,
        "693": 1800,
        "694": 749,
        "695": 6500,
        "696": 1400,
        "697": 726,
        "698": 4800,
        "699": 5400,
        "700": 364,
        "701": 8200,
        "702": 720,
        "703": 1700,
        "704": 1000,
        "705": 6500,
        "706": 928,
        "707": 1800,
        "708": 1700,
        "709": 2700,
        "710": 2300,
        "711": 6700,
        "712": 2400,
        "713": 4600,
        "714": 2600,
        "715": 2600,
        "716": 1000,
        "717": 2500,
        "718": 4400,
        "719": 837,
        "720": 674,
        "721": 2700,
        "722": 4000,
        "723": 6400,
        "724": 1100,
        "725": 591,
        "726": 5400,
        "727": 3100,
        "728": 1500,
        "729": 2100,
        "730": 7000,
        "731": 2000,
        "732": 1700,
        "733": 3000,
        "734": 2500,
        "735": 1500,
        "736": 1700,
        "737": 2700,
        "738": 5900,
        "739": 5900,
        "740": 3300,
        "741": 718,
        "742": 3500,
        "743": 2300,
        "744": 4900,
        "745": 2400,
        "746": 1500,
        "747": 4300,
        "748": 3900,
        "749": 1400,
        "750": 2500,
        "751": 389,
        "752": 319,
        "753": 1900,
        "754": 427,
        "755": 2800,
        "756": 5400,
        "757": 1500,
        "758": 393,
        "759": 958,
        "760": 98,
        "761": 8500,
        "762": 7300,
        "763": 2000,
        "764": 9400,
        "765": 2000,
        "766": 5900,
        "767": 5200,
        "768": 4800,
        "769": 446,
        "770": 8000,
        "771": 823,
        "772": 2100,
        "773": 2300,
        "774": 3500,
        "775": 3800,
        "776": 2700,
        "777": 6100,
        "778": 4100,
        "779": 13100,
        "780": 1900,
        "781": 992,
        "782": 6700,
        "783": 539,
        "784": 2500,
        "785": 616,
        "786": 4300,
        "787": 1000,
        "788": 8800,
        "789": 1600,
        "790": 377,
        "791": 2800,
        "792": 6200,
        "793": 2500,
        "794": 4200,
        "795": 9700,
        "796": 783,
        "797": 1700,
        "798": 2600,
        "799": 1100,
        "800": 359,
        "801": 521,
        "802": 737,
        "803": 3300,
        "804": 4100,
        "805": 3000,
        "806": 3400,
        "807": 921,
        "808": 1800,
        "809": 2200,
        "810": 5000,
        "811": 4700,
        "812": 1600,
        "813": 4700,
        "814": 764,
        "815": 2600,
        "816": 1800,
        "817": 229,
        "818": 751,
        "819": 3800,
        "820": 675,
        "821": 424,
        "822": 4300,
        "823": 1900,
        "824": 377,
        "825": 3800,
        "826": 1500,
        "827": 4800,
        "828": 2200,
        "829": 779,
        "830": 6100,
        "831": 6700,
        "832": 7400,
        "833": 3200,
        "834": 669,
        "835": 2500,
        "836": 452,
        "837": 1300,
        "838": 2400,
        "839": 983,
        "840": 472,
        "841": 5300,
        "842": 748,
        "843": 321,
        "844": 3700,
        "845": 498,
        "846": 2500,
        "847": 706,
        "848": 2600,
        "849": 740,
        "850": 2600,
        "851": 458,
        "852": 6600,
        "853": 5000,
        "854": 158,
        "855": 4500,
        "856": 3300,
        "857": 483,
        "858": 986,
        "859": 1500,
        "860": 2600,
        "861": 1200,
        "862": 2200,
        "863": 1700,
        "864": 4600,
        "865": 441,
        "866": 1500,
        "867": 495,
        "868": 522,
        "869": 3200,
        "870": 2000,
        "871": 1400,
        "872": 2200,
        "873": 692,
        "874": 3500,
        "875": 4300,
        "876": 649,
        "877": 4500,
        "878": 911,
        "879": 717,
        "880": 3300,
        "881": 716,
        "882": 13700,
        "883": 438,
        "884": 1400,
        "885": 3700,
        "886": 676,
        "887": 1600,
        "888": 460,
        "889": 5100,
        "890": 637,
        "891": 657,
        "892": 2100,
        "893": 3600,
        "894": 595,
        "895": 961,
        "896": 553,
        "897": 715,
        "898": 3300,
        "899": 412,
        "900": 813,
        "901": 1300,
        "902": 749,
        "903": 768,
        "904": 408,
        "905": 1800,
        "906": 2300,
        "907": 1700,
        "908": 1500,
        "909": 892,
        "910": 613,
        "911": 2400,
        "912": 1200,
        "913": 3700,
        "914": 1800,
        "915": 767,
        "916": 672,
        "917": 5100,
        "918": 1800,
        "919": 5800,
        "920": 271,
        "921": 692,
        "922": 2300,
        "923": 3200,
        "924": 3300,
        "925": 3300,
        "926": 2800,
        "927": 953,
        "928": 948,
        "929": 541,
        "930": 357,
        "931": 623,
        "932": 2600,
        "933": 822,
        "934": 1200,
        "935": 520,
        "936": 423,
        "937": 4400,
        "938": 691,
        "939": 1400,
        "940": 4600,
        "941": 7000,
        "942": 520,
        "943": 1300,
        "944": 1200,
        "945": 465,
        "946": 4600,
        "947": 1800,
        "948": 1700,
        "949": 996,
        "950": 1800,
        "951": 851,
        "952": 2200,
        "953": 1300,
        "954": 4800,
        "955": 1600,
        "956": 1500,
        "957": 4900,
        "958": 1200,
        "959": 1900,
        "960": 2600,
        "961": 3000,
        "962": 974,
        "963": 1400,
        "964": 1700,
        "965": 2200,
        "966": 2300,
        "967": 4200,
        "968": 2900,
        "969": 1100,
        "970": 4600,
        "971": 2400,
        "972": 1900,
        "973": 1100,
        "974": 347,
        "975": 2600,
        "976": 1200,
        "977": 519,
        "978": 4700,
        "979": 2000,
        "980": 3100,
        "981": 4200,
        "982": 504,
        "983": 1500,
        "984": 2000,
        "985": 412,
        "986": 5100,
        "987": 1300,
        "988": 2400,
        "989": 2800,
        "990": 320,
        "991": 415,
        "992": 2000,
        "993": 5100,
        "994": 819,
        "995": 2800,
        "996": 792,
        "997": 2800,
        "998": 3400,
        "999": 391,
        "1000": 2300,
        "1001": 3400,
        "1002": 482,
        "1003": 2200,
        "1004": 1700,
        "1005": 307,
        "1006": 3200,
        "1007": 3400,
        "1008": 4200,
        "1009": 3300,
        "1010": 3000,
        "1011": 1100,
        "1012": 627,
        "1013": 4000,
        "1014": 1600,
        "1015": 1300,
        "1016": 3800,
        "1017": 1900,
        "1018": 2700,
        "1019": 195,
        "1020": 834,
        "1021": 5000,
        "1022": 1500,
        "1023": 3100,
        "1024": 2000,
        "1025": 2500,
        "1026": 3300,
        "1027": 3000,
        "1028": 379,
        "1029": 2100,
        "1030": 323,
        "1031": 606,
        "1032": 1500,
        "1033": 2900,
        "1034": 1800,
        "1035": 788,
        "1036": 2400,
        "1037": 3500,
        "1038": 2700,
        "1039": 490,
        "1040": 944,
        "1041": 4100,
        "1042": 798,
        "1043": 1400,
        "1044": 1800,
        "1045": 2200,
        "1046": 2200,
        "1047": 924,
        "1048": 912,
        "1049": 1500,
        "1050": 1100,
        "1051": 2100,
        "1052": 422,
        "1053": 831,
        "1054": 1400,
        "1055": 832,
        "1056": 1200,
        "1057": 3400,
        "1058": 3500,
        "1059": 495,
        "1060": 373,
        "1061": 3300,
        "1062": 587,
        "1063": 2000,
        "1064": 2200,
        "1065": 646,
        "1066": 909,
        "1067": 494,
        "1068": 1100,
        "1069": 1600,
        "1070": 1000,
        "1071": 972,
        "1072": 1600,
        "1073": 594,
        "1074": 397,
        "1075": 1000,
        "1076": 1400,
        "1077": 6300,
        "1078": 2200,
        "1079": 2100,
        "1080": 4500,
        "1081": 235,
        "1082": 763,
        "1083": 905,
        "1084": 2200,
        "1085": 635,
        "1086": 4100,
        "1087": 1200,
        "1088": 1000,
        "1089": 1900,
        "1090": 3700,
        "1091": 1800,
        "1092": 417,
        "1093": 5900,
        "1094": 699,
        "1095": 883,
        "1096": 148,
        "1097": 832,
        "1098": 3500,
        "1099": 3300,
        "1100": 1700,
        "1101": 1500,
        "1102": 2300,
        "1103": 2500,
        "1104": 2600,
        "1105": 4200,
        "1106": 286,
        "1107": 5800,
        "1108": 703,
        "1109": 3900,
        "1110": 2100,
        "1111": 2100,
        "1112": 637,
        "1113": 1700,
        "1114": 8000,
        "1115": 2300,
        "1116": 4700,
        "1117": 1900,
        "1118": 1500,
        "1119": 1400,
        "1120": 448,
        "1121": 1500,
        "1122": 1900,
        "1123": 2200,
        "1124": 1800,
        "1125": 4000,
        "1126": 1000,
        "1127": 1500,
        "1128": 2400,
        "1129": 3900,
        "1130": 1300,
        "1131": 1500,
        "1132": 2100,
        "1133": 489,
        "1134": 479,
        "1135": 1500,
        "1136": 2500,
        "1137": 1600,
        "1138": 5500,
        "1139": 878,
        "1140": 3700,
        "1141": 237,
        "1142": 490,
        "1143": 1700,
        "1144": 2300,
        "1145": 829,
        "1146": 389,
        "1147": 2800,
        "1148": 1400,
        "1149": 2100,
        "1150": 1500,
        "1151": 677,
        "1152": 2800,
        "1153": 1000,
        "1154": 2400,
        "1155": 2400,
        "1156": 773,
        "1157": 1600,
        "1158": 566,
        "1159": 1000,
        "1160": 6800,
        "1161": 395,
        "1162": 1100,
        "1163": 824,
        "1164": 3100,
        "1165": 930,
        "1166": 1100,
        "1167": 4300,
        "1168": 1100,
        "1169": 2900,
        "1170": 1000,
        "1171": 3700,
        "1172": 1200,
        "1173": 320,
        "1174": 1900,
        "1175": 652,
        "1176": 662,
        "1177": 662,
        "1178": 2400,
        "1179": 1200,
        "1180": 1800,
        "1181": 3500,
        "1182": 747,
        "1183": 1600,
        "1184": 1600,
        "1185": 566,
        "1186": 378,
        "1187": 3800,
        "1188": 2600,
        "1189": 2300,
        "1190": 1500,
        "1191": 286,
        "1192": 5100,
        "1193": 483,
        "1194": 3700,
        "1195": 781,
        "1196": 2300,
        "1197": 639,
        "1198": 463,
        "1199": 847,
        "1200": 843,
        "1201": 476,
        "1202": 1500,
        "1203": 110,
        "1204": 295,
        "1205": 1400,
        "1206": 2000,
        "1207": 313,
        "1208": 2100,
        "1209": 615,
        "1210": 2200,
        "1211": 1800,
        "1212": 585,
        "1213": 937,
        "1214": 2500,
        "1215": 2400,
        "1216": 737,
        "1217": 548,
        "1218": 505,
        "1219": 81,
        "1220": 465,
        "1221": 371,
        "1222": 1300,
        "1223": 357,
        "1224": 3000,
        "1225": 767,
        "1226": 1800,
        "1227": 6000,
        "1228": 884,
        "1229": 748,
        "1230": 3400,
        "1231": 940,
        "1232": 1200,
        "1233": 909,
        "1234": 3900,
        "1235": 5900,
        "1236": 554,
        "1237": 760,
        "1238": 4900,
        "1239": 656,
        "1240": 816,
        "1241": 2100,
        "1242": 1500,
        "1243": 432,
        "1244": 532,
        "1245": 3700,
        "1246": 5500,
        "1247": 333,
        "1248": 1500,
        "1249": 3000,
        "1250": 1900,
        "1251": 1300,
        "1252": 587,
        "1253": 893,
        "1254": 726,
        "1255": 2100,
        "1256": 760,
        "1257": 1600,
        "1258": 4400,
        "1259": 2100,
        "1260": 673,
        "1261": 3000,
        "1262": 1600,
        "1263": 3200,
        "1264": 1400,
        "1265": 276,
        "1266": 1100,
        "1267": 2100,
        "1268": 2100,
        "1269": 847,
        "1270": 381,
        "1271": 1800,
        "1272": 2400,
        "1273": 1000,
        "1274": 1200,
        "1275": 563,
        "1276": 359,
        "1277": 2800,
        "1278": 3400,
        "1279": 2400,
        "1280": 1200,
        "1281": 499,
        "1282": 718,
        "1283": 2300,
        "1284": 833,
        "1285": 3100,
        "1286": 1200,
        "1287": 3800,
        "1288": 1100,
        "1289": 1400,
        "1290": 722,
        "1291": 1400,
        "1292": 1400,
        "1293": 570,
        "1294": 219,
        "1295": 5400,
        "1296": 847,
        "1297": 1100,
        "1298": 597,
        "1299": 630,
        "1300": 1900,
        "1301": 271,
        "1302": 596,
        "1303": 568,
        "1304": 2900,
        "1305": 216,
        "1306": 770,
        "1307": 291,
        "1308": 374,
        "1309": 324,
        "1310": 509,
        "1311": 306,
        "1312": 722,
        "1313": 610,
        "1314": 2000,
        "1315": 132,
        "1316": 916,
        "1317": 1600,
        "1318": 1300,
        "1319": 1200,
        "1320": 3300,
        "1321": 947,
        "1322": 554,
        "1323": 914,
        "1324": 2500,
        "1325": 1400,
        "1326": 1500,
        "1327": 324,
        "1328": 1400,
        "1329": 334,
        "1330": 835,
        "1331": 404,
        "1332": 4000,
        "1333": 2300,
        "1334": 2500,
        "1335": 543,
        "1336": 1900,
        "1337": 712,
        "1338": 929,
        "1339": 900,
        "1340": 851,
        "1341": 982,
        "1342": 317,
        "1343": 269,
        "1344": 1100,
        "1345": 403,
        "1346": 544,
        "1347": 1100,
        "1348": 1800,
        "1349": 730,
        "1350": 1900,
        "1351": 864,
        "1352": 536,
        "1353": 379,
        "1354": 823,
        "1355": 1600,
        "1356": 734,
        "1357": 2600,
        "1358": 320,
        "1359": 482,
        "1360": 227,
        "1361": 824,
        "1362": 981,
        "1363": 1800,
        "1364": 343,
        "1365": 1100,
        "1366": 829,
        "1367": 1000,
        "1368": 415,
        "1369": 2200,
        "1370": 3800,
        "1371": 1200,
        "1372": 468,
        "1373": 1200,
        "1374": 1200,
        "1375": 786,
        "1376": 180,
        "1377": 2800,
        "1378": 2200,
        "1379": 3200,
        "1380": 610,
        "1381": 513,
        "1382": 4700,
        "1383": 764,
        "1384": 377,
        "1385": 841,
        "1386": 1400,
        "1387": 1100,
        "1388": 512,
        "1389": 365,
        "1390": 531,
        "1391": 778,
        "1392": 985,
        "1393": 1300,
        "1394": 1200,
        "1395": 1500,
        "1396": 2100,
        "1397": 2200,
        "1398": 224,
        "1399": 445,
        "1400": 2200,
        "1401": 587,
        "1402": 616,
        "1403": 711,
        "1404": 522,
        "1405": 2300,
        "1406": 1700,
        "1407": 449,
        "1408": 1100,
        "1409": 1500,
        "1410": 2000,
        "1411": 211,
        "1412": 680,
        "1413": 580,
        "1414": 387,
        "1415": 935,
        "1416": 336,
        "1417": 1500,
        "1418": 1500,
        "1419": 1200,
        "1420": 1200,
        "1421": 405,
        "1422": 605,
        "1423": 1200,
        "1424": 309,
        "1425": 237,
        "1426": 1100,
        "1427": 815,
        "1428": 229,
        "1429": 2100,
        "1430": 2100,
        "1431": 217,
        "1432": 2500,
        "1433": 537,
        "1434": 475,
        "1435": 1300,
        "1436": 1800,
        "1437": 1300,
        "1438": 245,
        "1439": 1500,
        "1440": 241,
        "1441": 492,
        "1442": 3400,
        "1443": 1500,
        "1444": 1500,
        "1445": 479,
        "1446": 428,
        "1447": 2400,
        "1448": 798,
        "1449": 3400,
        "1450": 1700,
        "1451": 481,
        "1452": 970,
        "1453": 598,
        "1454": 379,
        "1455": 3100,
        "1456": 387,
        "1457": 902,
        "1458": 947,
        "1459": 481,
        "1460": 1800,
        "1461": 1100,
        "1462": 218,
        "1463": 794,
        "1464": 323,
        "1465": 388,
        "1466": 521,
        "1467": 443,
        "1468": 163,
        "1469": 570,
        "1470": 245,
        "1471": 493,
        "1472": 1800,
        "1473": 2400,
        "1474": 1800,
        "1475": 708,
        "1476": 705,
        "1477": 627,
        "1478": 247,
        "1479": 1900,
        "1480": 3900,
        "1481": 697,
        "1482": 2900,
        "1483": 519,
        "1484": 391,
        "1485": 1100,
        "1486": 2000,
        "1487": 966,
        "1488": 590,
        "1489": 1000,
        "1490": 1300,
        "1491": 1100,
        "1492": 703,
        "1493": 1400,
        "1494": 1400,
        "1495": 466,
        "1496": 475,
        "1497": 639,
        "1498": 3000,
        "1499": 492,
        "1500": 499,
        "1501": 1300,
        "1502": 955,
        "1503": 455,
        "1504": 1700,
        "1505": 2500,
        "1506": 1900,
        "1507": 1600,
        "1508": 614,
        "1509": 904,
        "1510": 464,
        "1511": 1000,
        "1512": 922,
        "1513": 301,
        "1514": 275,
        "1515": 711,
        "1516": 2900,
        "1517": 489,
        "1518": 487,
        "1519": 1100,
        "1520": 243,
        "1521": 489,
        "1522": 764,
        "1523": 1200,
        "1524": 1300,
        "1525": 1600,
        "1526": 679,
        "1527": 692,
        "1528": 620,
        "1529": 272,
        "1530": 637,
        "1531": 1200,
        "1532": 308,
        "1533": 199,
        "1534": 1100,
        "1535": 1500,
        "1536": 1200,
        "1537": 846,
        "1538": 1200,
        "1539": 59,
        "1540": 424,
        "1541": 1300,
        "1542": 645,
        "1543": 312,
        "1544": 959,
        "1545": 840,
        "1546": 1100,
        "1547": 652,
        "1548": 532,
        "1549": 178,
        "1550": 593,
        "1551": 542,
        "1552": 1700,
        "1553": 742,
        "1554": 249,
        "1555": 618,
        "1556": 909,
        "1557": 919,
        "1558": 662,
        "1559": 125,
        "1560": 832,
        "1561": 540,
        "1562": 681,
        "1563": 372,
        "1564": 1800,
        "1565": 962,
        "1566": 1600,
        "1567": 738,
        "1568": 4300,
        "1569": 3100,
        "1570": 512,
        "1571": 1300,
        "1572": 895,
        "1573": 3100,
        "1574": 385,
        "1575": 966,
        "1576": 2500,
        "1577": 277,
        "1578": 558,
        "1579": 1500,
        "1580": 566,
        "1581": 717,
        "1582": 700,
        "1583": 1800,
        "1584": 1900,
        "1585": 1200,
        "1586": 90,
        "1587": 685,
        "1588": 542,
        "1589": 917,
        "1590": 375,
        "1591": 746,
        "1592": 1900,
        "1593": 559,
        "1594": 1000,
        "1595": 743,
        "1596": 3600,
        "1597": 2400,
        "1598": 389,
        "1599": 976,
        "1600": 2000,
        "1601": 696,
        "1602": 465,
        "1603": 1000,
        "1604": 2000,
        "1605": 601,
        "1606": 523,
        "1607": 509,
        "1608": 1100,
        "1609": 654,
        "1610": 3400,
        "1611": 656,
        "1612": 720,
        "1613": 507,
        "1614": 426,
        "1615": 478,
        "1616": 1400,
        "1617": 1100,
        "1618": 219,
        "1619": 673,
        "1620": 734,
        "1621": 655,
        "1622": 590,
        "1623": 675,
        "1624": 610,
        "1625": 581,
        "1626": 876,
        "1627": 647,
        "1628": 682,
        "1629": 789,
        "1630": 622,
        "1631": 636,
        "1632": 2300,
        "1633": 670,
        "1634": 871,
        "1635": 702,
        "1636": 576,
        "1637": 2800,
        "1638": 571,
        "1639": 374,
        "1640": 925,
        "1641": 1600,
        "1642": 987,
        "1643": 612,
        "1644": 1600,
        "1645": 431,
        "1646": 418,
        "1647": 215,
        "1648": 619,
        "1649": 677,
        "1650": 722,
        "1651": 504,
        "1652": 596,
        "1653": 503,
        "1654": 696,
        "1655": 676,
        "1656": 495,
        "1657": 302,
        "1658": 2400,
        "1659": 627,
        "1660": 2300,
        "1661": 1300,
        "1662": 985,
        "1663": 269,
        "1664": 459,
        "1665": 2200,
        "1666": 1100,
        "1667": 338,
        "1668": 624,
        "1669": 215,
        "1670": 741,
        "1671": 436,
        "1672": 1700,
        "1673": 1300,
        "1674": 622,
        "1675": 455,
        "1676": 267,
        "1677": 528,
        "1678": 550,
        "1679": 2800,
        "1680": 188,
        "1681": 2400,
        "1682": 727,
        "1683": 236,
        "1684": 510,
        "1685": 1700,
        "1686": 542,
        "1687": 1500,
        "1688": 425,
        "1689": 743,
        "1690": 847,
        "1691": 973,
        "1692": 676,
        "1693": 1100,
        "1694": 1000,
        "1695": 877,
        "1696": 518,
        "1697": 668,
        "1698": 779,
        "1699": 1900,
        "1700": 687,
        "1701": 410,
        "1702": 567,
        "1703": 582,
        "1704": 1700,
        "1705": 341,
        "1706": 1200,
        "1707": 611,
        "1708": 437,
        "1709": 1300,
        "1710": 335,
        "1711": 478,
        "1712": 203,
        "1713": 1400,
        "1714": 969,
        "1715": 774,
        "1716": 639,
        "1717": 581,
        "1718": 350,
        "1719": 2600,
        "1720": 1100,
        "1721": 265,
        "1722": 901,
        "1723": 2600,
        "1724": 1900,
        "1725": 407,
        "1726": 688,
        "1727": 547,
        "1728": 633,
        "1729": 616,
        "1730": 442,
        "1731": 496,
        "1732": 589,
        "1733": 800,
        "1734": 456,
        "1735": 1000,
        "1736": 856,
        "1737": 2000,
        "1738": 1400,
        "1739": 471,
        "1740": 632,
        "1741": 568,
        "1742": 700,
        "1743": 1700,
        "1744": 664,
        "1745": 487,
        "1746": 682,
        "1747": 709,
        "1748": 552,
        "1749": 376,
        "1750": 2300,
        "1751": 403,
        "1752": 645,
        "1753": 2300,
        "1754": 1500,
        "1755": 594,
        "1756": 487,
        "1757": 1200,
        "1758": 678,
        "1759": 1700,
        "1760": 2400,
        "1761": 561,
        "1762": 994,
        "1763": 563,
        "1764": 1300,
        "1765": 715,
        "1766": 2000,
        "1767": 1500,
        "1768": 1200,
        "1769": 448,
        "1770": 953,
        "1771": 584,
        "1772": 740,
        "1773": 506,
        "1774": 773,
        "1775": 348,
        "1776": 618,
        "1777": 2800,
        "1778": 570,
        "1779": 1900,
        "1780": 3000,
        "1781": 1500,
        "1782": 1400,
        "1783": 548,
        "1784": 643,
        "1785": 270,
        "1786": 816,
        "1787": 489,
        "1788": 798,
        "1789": 1700,
        "1790": 2600,
        "1791": 798,
        "1792": 890,
        "1793": 258,
        "1794": 514,
        "1795": 578,
        "1796": 402,
        "1797": 914,
        "1798": 514,
        "1799": 1100,
        "1800": 1100,
        "1801": 1700,
        "1802": 1000,
        "1803": 633,
        "1804": 2300,
        "1805": 685,
        "1806": 364,
        "1807": 408,
        "1808": 537,
        "1809": 586,
        "1810": 456,
        "1811": 486,
        "1812": 486,
        "1813": 277,
        "1814": 1400,
        "1815": 654,
        "1816": 909,
        "1817": 297,
        "1818": 2400,
        "1819": 393,
        "1820": 1000,
        "1821": 632,
        "1822": 261,
        "1823": 3200,
        "1824": 477,
        "1825": 445,
        "1826": 2400,
        "1827": 428,
        "1828": 400,
        "1829": 299,
        "1830": 573,
        "1831": 667,
        "1832": 337,
        "1833": 275,
        "1834": 527,
        "1835": 858,
        "1836": 564,
        "1837": 1400,
        "1838": 1900,
        "1839": 470,
        "1840": 376,
        "1841": 1700,
        "1842": 715,
        "1843": 632,
        "1844": 362,
        "1845": 646,
        "1846": 465,
        "1847": 409,
        "1848": 449,
        "1849": 2200,
        "1850": 349,
        "1851": 229,
        "1852": 1200,
        "1853": 505,
        "1854": 1300,
        "1855": 1100,
        "1856": 2100,
        "1857": 582,
        "1858": 366,
        "1859": 1000,
        "1860": 429,
        "1861": 400,
        "1862": 406,
        "1863": 719,
        "1864": 230,
        "1865": 641,
        "1866": 468,
        "1867": 291,
        "1868": 478,
        "1869": 519,
        "1870": 392,
        "1871": 336,
        "1872": 357,
        "1873": 283,
        "1874": 332,
        "1875": 482,
        "1876": 421,
        "1877": 347,
        "1878": 719,
        "1879": 914,
        "1880": 437,
        "1881": 518,
        "1882": 475,
        "1883": 374,
        "1884": 367,
        "1885": 199,
        "1886": 318,
        "1887": 364,
        "1888": 465,
        "1889": 922,
        "1890": 391,
        "1891": 570,
        "1892": 114,
        "1893": 706,
        "1894": 464,
        "1895": 864,
        "1896": 435,
        "1897": 1100,
        "1898": 414,
        "1899": 2800,
        "1900": 249,
        "1901": 404,
        "1902": 671,
        "1903": 251,
        "1904": 435,
        "1905": 266,
        "1906": 244,
        "1907": 2000,
        "1908": 377,
        "1909": 494,
        "1910": 340,
        "1911": 555,
        "1912": 595,
        "1913": 381,
        "1914": 451,
        "1915": 927,
        "1916": 381,
        "1917": 356,
        "1918": 814,
        "1919": 371,
        "1920": 380,
        "1921": 232,
        "1922": 245,
        "1923": 355,
        "1924": 177,
        "1925": 335,
        "1926": 539,
        "1927": 463,
        "1928": 190,
        "1929": 1100,
        "1930": 542,
        "1931": 564,
        "1932": 549,
        "1933": 376,
        "1934": 292,
        "1935": 315,
        "1936": 299,
        "1937": 1000,
        "1938": 560,
        "1939": 306,
        "1940": 471,
        "1941": 345,
        "1942": 290,
        "1943": 504,
        "1944": 425,
        "1945": 306,
        "1946": 444,
        "1947": 366,
        "1948": 600,
        "1949": 326,
        "1950": 398,
        "1951": 1200,
        "1952": 283,
        "1953": 732,
        "1954": 448,
        "1955": 299,
        "1956": 518,
        "1957": 365,
        "1958": 1600,
        "1959": 629,
        "1960": 242,
        "1961": 741,
        "1962": 381,
        "1963": 265,
        "1964": 509,
        "1965": 1300,
        "1966": 599,
        "1967": 435,
        "1968": 616,
        "1969": 101,
        "1970": 345,
        "1971": 606,
        "1972": 400,
        "1973": 682,
        "1974": 117,
        "1975": 310,
        "1976": 648,
        "1977": 752,
        "1978": 492,
        "1979": 170,
        "1980": 299,
        "1981": 591,
        "1982": 814,
        "1983": 459,
        "1984": 236,
        "1985": 547,
        "1986": 481,
        "1987": 248,
        "1988": 64,
        "1989": 233,
        "1990": 498,
        "1991": 633,
        "1992": 387,
        "1993": 379,
        "1994": 485,
        "1995": 441,
        "1996": 541,
        "1997": 276,
        "1998": 436,
        "1999": 624,
        "2000": 193,
        "2001": 746,
        "2002": 491,
        "2003": 1300,
        "2004": 335,
        "2005": 325,
        "2006": 346,
        "2007": 606,
        "2008": 724,
        "2009": 360,
        "2010": 392,
        "2011": 318,
        "2012": 247,
        "2013": 272,
        "2014": 437,
        "2015": 681,
        "2016": 139,
        "2017": 244,
        "2018": 233,
        "2019": 926,
        "2020": 356,
        "2021": 481,
        "2022": 692,
        "2023": 322,
        "2024": 680,
        "2025": 182,
        "2026": 997,
        "2027": 2500,
        "2028": 362,
        "2029": 319,
        "2030": 128,
        "2031": 539,
        "2032": 587,
        "2033": 243,
        "2034": 332,
        "2035": 208,
        "2036": 699,
        "2037": 529,
        "2038": 199,
        "2039": 176,
        "2040": 277,
        "2041": 177,
        "2042": 165,
        "2043": 115,
        "2044": 179,
        "2045": 233,
        "2046": 287,
        "2047": 488,
        "2048": 208,
        "2049": 350,
        "2050": 288,
        "2051": 336,
        "2052": 284,
        "2053": 287,
        "2054": 560,
        "2055": 362,
        "2056": 310,
        "2057": 361,
        "2058": 344,
        "2059": 209,
        "2060": 289,
        "2061": 442,
        "2062": 1100,
        "2063": 296,
        "2064": 369,
        "2065": 710,
        "2066": 216,
        "2067": 197,
        "2068": 362,
        "2069": 229,
        "2070": 362,
        "2071": 431,
        "2072": 595,
        "2073": 281,
        "2074": 617,
        "2075": 338,
        "2076": 563,
        "2077": 277,
        "2078": 1000,
        "2079": 483,
        "2080": 404,
        "2081": 314,
        "2082": 469,
        "2083": 403,
        "2084": 390,
        "2085": 505,
        "2086": 569,
        "2087": 327,
        "2088": 334,
        "2089": 256,
        "2090": 996,
        "2091": 520,
        "2092": 233,
        "2093": 435,
        "2094": 499,
        "2095": 1600,
        "2096": 307,
        "2097": 382,
        "2098": 1200,
        "2099": 680,
        "2100": 328,
        "2101": 616,
        "2102": 323,
        "2103": 499,
        "2104": 354,
        "2105": 322,
        "2106": 332,
        "2107": 669,
        "2108": 684,
        "2109": 244,
        "2110": 296,
        "2111": 526,
        "2112": 295,
        "2113": 185,
        "2114": 257,
        "2115": 278,
        "2116": 337,
        "2117": 258,
        "2118": 499,
        "2119": 308,
        "2120": 279,
        "2121": 819,
        "2122": 511,
        "2123": 166,
        "2124": 221,
        "2125": 375,
        "2126": 268,
        "2127": 170,
        "2128": 274,
        "2129": 213,
        "2130": 773,
        "2131": 296,
        "2132": 411,
        "2133": 253,
        "2134": 177,
        "2135": 1400,
        "2136": 225,
        "2137": 191,
        "2138": 168,
        "2139": 280,
        "2140": 372,
        "2141": 323,
        "2142": 198,
        "2143": 100,
        "2144": 85,
        "2145": 86,
        "2146": 76,
        "2147": 92,
        "2148": 68,
        "2149": 69,
        "2150": 57,
        "2151": 62,
        "2152": 61,
        "2153": 64,
        "2154": 92,
        "2155": 77,
        "2156": 73,
        "2157": 224,
        "2158": 259,
        "2159": 183,
        "2160": 157,
        "2161": 186,
        "2162": 195,
        "2163": 150,
        "2164": 142,
        "2165": 184,
        "2166": 264,
        "2167": 223,
        "2168": 161,
        "2169": 372,
        "2170": 123,
        "2171": 151,
        "2172": 142,
        "2173": 230,
        "2174": 144,
        "2175": 323,
        "2176": 200,
        "2177": 144,
        "2178": 156,
        "2179": 324,
        "2180": 199,
        "2181": 107,
        "2182": 92,
        "2183": 169,
        "2184": 96,
        "2185": 150,
        "2186": 193,
        "2187": 184,
        "2188": 184,
        "2189": 300,
        "2190": 196,
        "2191": 206,
        "2192": 236,
        "2193": 355,
        "2194": 228,
        "2195": 260,
        "2196": 173,
        "2197": 175,
        "2198": 144,
        "2199": 268,
        "2200": 183,
        "2201": 163,
        "2202": 364,
        "2203": 206,
        "2204": 118,
        "2205": 225,
        "2206": 169,
        "2207": 1100,
        "2208": 163,
        "2209": 142,
        "2210": 114,
        "2211": 1200,
        "2212": 246,
        "2213": 211,
        "2214": 837,
        "2215": 228,
        "2216": 154,
        "2217": 789,
        "2218": 204,
        "2219": 180,
        "2220": 140,
        "2221": 870,
        "2222": 100,
        "2223": 108,
        "2224": 181,
        "2225": 256,
        "2226": 88,
        "2227": 586,
        "2228": 254,
        "2229": 107,
        "2230": 107,
        "2231": 158,
        "2232": 289,
        "2233": 136,
        "2234": 651,
        "2235": 159,
        "2236": 297,
        "2237": 168,
        "2238": 96,
        "2239": 126,
        "2240": 167,
        "2241": 117,
        "2242": 163,
        "2243": 157,
        "2244": 740,
        "2245": 82,
        "2246": 118,
        "2247": 92,
        "2248": 91,
        "2249": 98,
        "2250": 85,
        "2251": 353,
        "2252": 98,
        "2253": 115,
        "2254": 144,
        "2255": 77,
        "2256": 114,
        "2257": 97,
        "2258": 212,
        "2259": 79,
        "2260": 135,
        "2261": 160,
        "2262": 152,
        "2263": 113,
        "2264": 704,
        "2265": 88,
        "2266": 114,
        "2267": 104,
        "2268": 174,
        "2269": 75,
        "2270": 91,
        "2271": 89,
        "2272": 197,
        "2273": 646,
        "2274": 83,
        "2275": 133,
        "2276": 91,
        "2277": 134,
        "2278": 139,
        "2279": 103,
        "2280": 112,
        "2281": 162,
        "2282": 136,
        "2283": 91,
        "2284": 114,
        "2285": 206,
        "2286": 53,
        "2287": 174,
        "2288": 161,
        "2289": 226,
        "2290": 139,
        "2291": 88,
        "2292": 78,
        "2293": 197,
        "2294": 128,
        "2295": 130,
        "2296": 137,
        "2297": 209,
        "2298": 167,
        "2299": 118,
        "2300": 148,
        "2301": 137,
        "2302": 189,
        "2303": 605,
        "2304": 92,
        "2305": 166,
        "2306": 210,
        "2307": 95,
        "2308": 105,
        "2309": 218,
        "2310": 116,
        "2311": 133,
        "2312": 150,
        "2313": 222,
        "2314": 239,
        "2315": 70,
        "2316": 106,
        "2317": 113,
        "2318": 62,
        "2319": 131,
        "2320": 155,
        "2321": 206,
        "2322": 146,
        "2323": 106,
        "2324": 114,
        "2325": 174,
        "2326": 120,
        "2327": 71,
        "2328": 148,
        "2329": 135,
        "2330": 56,
        "2331": 131,
        "2332": 228,
        "2333": 106,
        "2334": 100,
        "2335": 190,
        "2336": 182,
        "2337": 142,
        "2338": 100,
        "2339": 122,
        "2340": 109,
        "2341": 105,
        "2342": 106,
        "2343": 115,
        "2344": 219,
        "2345": 114,
        "2346": 112,
        "2347": 203,
        "2348": 196,
        "2349": 90,
        "2350": 116,
        "2351": 136,
        "2352": 113,
        "2353": 138,
        "2354": 99,
        "2355": 165,
        "2356": 115,
        "2357": 114,
        "2358": 167,
        "2359": 234,
        "2360": 115,
        "2361": 144,
        "2362": 146,
        "2363": 118,
        "2364": 98,
        "2365": 116,
        "2366": 106,
        "2367": 163,
        "2368": 68,
        "2369": 134,
        "2370": 183,
        "2371": 88,
        "2372": 99,
        "2373": 143,
        "2374": 142,
        "2375": 88,
        "2376": 156,
        "2377": 135,
        "2378": 147,
        "2379": 78,
        "2380": 606,
        "2381": 164,
        "2382": 101,
        "2383": 24,
        "2384": 86,
        "2385": 205,
        "2386": 86,
        "2387": 131,
        "2388": 157,
        "2389": 201,
        "2390": 108,
        "2391": 170,
        "2392": 233,
        "2393": 98,
        "2394": 72,
        "2395": 60,
        "2396": 117,
        "2397": 89,
        "2398": 81,
        "2399": 106,
        "2400": 154,
        "2401": 53,
        "2402": 112,
        "2403": 148,
        "2404": 123,
        "2405": 81,
        "2406": 73,
        "2407": 114,
        "2408": 94,
        "2409": 47,
        "2410": 95,
        "2411": 139,
        "2412": 86,
        "2413": 113,
        "2414": 96,
        "2415": 138,
        "2416": 142,
        "2417": 68,
        "2418": 67,
        "2419": 67,
        "2420": 80,
        "2421": 140,
        "2422": 88,
        "2423": 86,
        "2424": 195,
        "2425": 90,
        "2426": 79
    },
    "comments": {
        "0": 99,
        "1": 1000,
        "2": 679,
        "3": 512,
        "4": 318,
        "5": 413,
        "6": 448,
        "7": 372,
        "8": 372,
        "9": 94,
        "10": 338,
        "11": 359,
        "12": 461,
        "13": 102,
        "14": 201,
        "15": 218,
        "16": 203,
        "17": 414,
        "18": 338,
        "19": 130,
        "20": 202,
        "21": 90,
        "22": 132,
        "23": 667,
        "24": 542,
        "25": 285,
        "26": 254,
        "27": 160,
        "28": 237,
        "29": 73,
        "30": 260,
        "31": 209,
        "32": 206,
        "33": 153,
        "34": 89,
        "35": 145,
        "36": 105,
        "37": 141,
        "38": 284,
        "39": 298,
        "40": 130,
        "41": 85,
        "42": 155,
        "43": 107,
        "44": 38,
        "45": 167,
        "46": 222,
        "47": 339,
        "48": 93,
        "49": 57,
        "50": 274,
        "51": 161,
        "52": 243,
        "53": 138,
        "54": 257,
        "55": 330,
        "56": 48,
        "57": 78,
        "58": 148,
        "59": 109,
        "60": 106,
        "61": 150,
        "62": 168,
        "63": 127,
        "64": 237,
        "65": 359,
        "66": 129,
        "67": 109,
        "68": 199,
        "69": 306,
        "70": 204,
        "71": 81,
        "72": 158,
        "73": 231,
        "74": 127,
        "75": 124,
        "76": 67,
        "77": 87,
        "78": 140,
        "79": 141,
        "80": 114,
        "81": 81,
        "82": 587,
        "83": 40,
        "84": 87,
        "85": 226,
        "86": 133,
        "87": 174,
        "88": 64,
        "89": 43,
        "90": 97,
        "91": 187,
        "92": 49,
        "93": 168,
        "94": 96,
        "95": 116,
        "96": 144,
        "97": 127,
        "98": 69,
        "99": 100,
        "100": 51,
        "101": 117,
        "102": 91,
        "103": 89,
        "104": 45,
        "105": 79,
        "106": 111,
        "107": 66,
        "108": 61,
        "109": 151,
        "110": 68,
        "111": 105,
        "112": 417,
        "113": 242,
        "114": 75,
        "115": 179,
        "116": 287,
        "117": 64,
        "118": 150,
        "119": 250,
        "120": 129,
        "121": 157,
        "122": 149,
        "123": 156,
        "124": 200,
        "125": 246,
        "126": 168,
        "127": 124,
        "128": 168,
        "129": 168,
        "130": 149,
        "131": 298,
        "132": 159,
        "133": 162,
        "134": 78,
        "135": 94,
        "136": 226,
        "137": 31,
        "138": 97,
        "139": 179,
        "140": 294,
        "141": 196,
        "142": 217,
        "143": 158,
        "144": 70,
        "145": 136,
        "146": 142,
        "147": 244,
        "148": 49,
        "149": 34,
        "150": 203,
        "151": 99,
        "152": 289,
        "153": 30,
        "154": 50,
        "155": 46,
        "156": 94,
        "157": 259,
        "158": 153,
        "159": 87,
        "160": 176,
        "161": 168,
        "162": 66,
        "163": 71,
        "164": 114,
        "165": 82,
        "166": 166,
        "167": 46,
        "168": 47,
        "169": 425,
        "170": 163,
        "171": 28,
        "172": 38,
        "173": 9,
        "174": 40,
        "175": 224,
        "176": 328,
        "177": 235,
        "178": 173,
        "179": 220,
        "180": 76,
        "181": 200,
        "182": 63,
        "183": 85,
        "184": 333,
        "185": 231,
        "186": 190,
        "187": 68,
        "188": 186,
        "189": 62,
        "190": 84,
        "191": 102,
        "192": 75,
        "193": 180,
        "194": 235,
        "195": 54,
        "196": 299,
        "197": 29,
        "198": 213,
        "199": 51,
        "200": 51,
        "201": 96,
        "202": 61,
        "203": 138,
        "204": 67,
        "205": 101,
        "206": 113,
        "207": 96,
        "208": 181,
        "209": 108,
        "210": 42,
        "211": 242,
        "212": 346,
        "213": 66,
        "214": 171,
        "215": 215,
        "216": 57,
        "217": 82,
        "218": 136,
        "219": 130,
        "220": 137,
        "221": 242,
        "222": 266,
        "223": 101,
        "224": 24,
        "225": 177,
        "226": 101,
        "227": 49,
        "228": 203,
        "229": 25,
        "230": 312,
        "231": 53,
        "232": 218,
        "233": 56,
        "234": 77,
        "235": 69,
        "236": 44,
        "237": 176,
        "238": 25,
        "239": 17,
        "240": 21,
        "241": 34,
        "242": 60,
        "243": 131,
        "244": 48,
        "245": 34,
        "246": 93,
        "247": 23,
        "248": 95,
        "249": 28,
        "250": 122,
        "251": 26,
        "252": 59,
        "253": 17,
        "254": 134,
        "255": 50,
        "256": 146,
        "257": 10,
        "258": 111,
        "259": 159,
        "260": 17,
        "261": 37,
        "262": 64,
        "263": 85,
        "264": 55,
        "265": 114,
        "266": 72,
        "267": 228,
        "268": 142,
        "269": 158,
        "270": 142,
        "271": 62,
        "272": 34,
        "273": 83,
        "274": 21,
        "275": 8,
        "276": 42,
        "277": 63,
        "278": 99,
        "279": 80,
        "280": 19,
        "281": 86,
        "282": 135,
        "283": 53,
        "284": 17,
        "285": 97,
        "286": 165,
        "287": 24,
        "288": 59,
        "289": 83,
        "290": 24,
        "291": 12,
        "292": 123,
        "293": 98,
        "294": 21,
        "295": 91,
        "296": 32,
        "297": 16,
        "298": 180,
        "299": 94,
        "300": 54,
        "301": 21,
        "302": 24,
        "303": 23,
        "304": 176,
        "305": 24,
        "306": 53,
        "307": 89,
        "308": 85,
        "309": 13,
        "310": 36,
        "311": 38,
        "312": 197,
        "313": 83,
        "314": 78,
        "315": 28,
        "316": 62,
        "317": 48,
        "318": 95,
        "319": 103,
        "320": 31,
        "321": 20,
        "322": 132,
        "323": 95,
        "324": 15,
        "325": 92,
        "326": 44,
        "327": 23,
        "328": 80,
        "329": 47,
        "330": 108,
        "331": 113,
        "332": 134,
        "333": 52,
        "334": 209,
        "335": 324,
        "336": 56,
        "337": 134,
        "338": 12,
        "339": 66,
        "340": 103,
        "341": 125,
        "342": 207,
        "343": 34,
        "344": 19,
        "345": 114,
        "346": 51,
        "347": 114,
        "348": 100,
        "349": 108,
        "350": 28,
        "351": 19,
        "352": 137,
        "353": 52,
        "354": 4,
        "355": 31,
        "356": 15,
        "357": 67,
        "358": 26,
        "359": 33,
        "360": 31,
        "361": 84,
        "362": 11,
        "363": 13,
        "364": 6,
        "365": 32,
        "366": 22,
        "367": 32,
        "368": 7,
        "369": 56,
        "370": 103,
        "371": 11,
        "372": 46,
        "373": 13,
        "374": 56,
        "375": 77,
        "376": 43,
        "377": 181,
        "378": 8,
        "379": 34,
        "380": 28,
        "381": 318,
        "382": 38,
        "383": 10,
        "384": 92,
        "385": 43,
        "386": 19,
        "387": 99,
        "388": 59,
        "389": 126,
        "390": 129,
        "391": 71,
        "392": 83,
        "393": 21,
        "394": 94,
        "395": 7,
        "396": 82,
        "397": 59,
        "398": 21,
        "399": 240,
        "400": 18,
        "401": 103,
        "402": 81,
        "403": 28,
        "404": 58,
        "405": 26,
        "406": 40,
        "407": 11,
        "408": 27,
        "409": 134,
        "410": 62,
        "411": 98,
        "412": 239,
        "413": 17,
        "414": 99,
        "415": 173,
        "416": 23,
        "417": 136,
        "418": 7,
        "419": 34,
        "420": 23,
        "421": 90,
        "422": 5,
        "423": 11,
        "424": 181,
        "425": 50,
        "426": 27,
        "427": 180,
        "428": 42,
        "429": 223,
        "430": 219,
        "431": 98,
        "432": 54,
        "433": 101,
        "434": 122,
        "435": 21,
        "436": 26,
        "437": 232,
        "438": 75,
        "439": 79,
        "440": 20,
        "441": 41,
        "442": 78,
        "443": 13,
        "444": 127,
        "445": 14,
        "446": 43,
        "447": 228,
        "448": 78,
        "449": 27,
        "450": 26,
        "451": 5,
        "452": 62,
        "453": 65,
        "454": 296,
        "455": 110,
        "456": 92,
        "457": 97,
        "458": 8,
        "459": 54,
        "460": 25,
        "461": 25,
        "462": 79,
        "463": 121,
        "464": 139,
        "465": 27,
        "466": 95,
        "467": 149,
        "468": 107,
        "469": 82,
        "470": 47,
        "471": 86,
        "472": 12,
        "473": 16,
        "474": 158,
        "475": 61,
        "476": 27,
        "477": 18,
        "478": 28,
        "479": 10,
        "480": 90,
        "481": 83,
        "482": 139,
        "483": 65,
        "484": 108,
        "485": 147,
        "486": 149,
        "487": 141,
        "488": 48,
        "489": 24,
        "490": 9,
        "491": 31,
        "492": 79,
        "493": 32,
        "494": 125,
        "495": 107,
        "496": 204,
        "497": 32,
        "498": 10,
        "499": 10,
        "500": 28,
        "501": 34,
        "502": 6,
        "503": 51,
        "504": 14,
        "505": 30,
        "506": 13,
        "507": 15,
        "508": 17,
        "509": 80,
        "510": 48,
        "511": 42,
        "512": 28,
        "513": 24,
        "514": 27,
        "515": 57,
        "516": 12,
        "517": 22,
        "518": 15,
        "519": 7,
        "520": 60,
        "521": 39,
        "522": 59,
        "523": 67,
        "524": 5,
        "525": 40,
        "526": 41,
        "527": 178,
        "528": 127,
        "529": 61,
        "530": 83,
        "531": 64,
        "532": 46,
        "533": 9,
        "534": 59,
        "535": 104,
        "536": 72,
        "537": 23,
        "538": 26,
        "539": 27,
        "540": 142,
        "541": 25,
        "542": 101,
        "543": 12,
        "544": 169,
        "545": 139,
        "546": 277,
        "547": 24,
        "548": 71,
        "549": 7,
        "550": 73,
        "551": 149,
        "552": 237,
        "553": 8,
        "554": 9,
        "555": 242,
        "556": 72,
        "557": 39,
        "558": 50,
        "559": 87,
        "560": 30,
        "561": 11,
        "562": 18,
        "563": 116,
        "564": 16,
        "565": 17,
        "566": 14,
        "567": 6,
        "568": 10,
        "569": 55,
        "570": 13,
        "571": 22,
        "572": 25,
        "573": 58,
        "574": 16,
        "575": 21,
        "576": 21,
        "577": 55,
        "578": 10,
        "579": 17,
        "580": 19,
        "581": 56,
        "582": 78,
        "583": 15,
        "584": 28,
        "585": 4,
        "586": 74,
        "587": 20,
        "588": 91,
        "589": 120,
        "590": 175,
        "591": 17,
        "592": 16,
        "593": 78,
        "594": 136,
        "595": 22,
        "596": 4,
        "597": 17,
        "598": 13,
        "599": 42,
        "600": 55,
        "601": 4,
        "602": 48,
        "603": 9,
        "604": 93,
        "605": 10,
        "606": 34,
        "607": 19,
        "608": 42,
        "609": 70,
        "610": 16,
        "611": 10,
        "612": 14,
        "613": 20,
        "614": 15,
        "615": 18,
        "616": 89,
        "617": 8,
        "618": 67,
        "619": 28,
        "620": 32,
        "621": 11,
        "622": 30,
        "623": 18,
        "624": 51,
        "625": 16,
        "626": 20,
        "627": 40,
        "628": 14,
        "629": 16,
        "630": 6,
        "631": 6,
        "632": 33,
        "633": 17,
        "634": 139,
        "635": 17,
        "636": 20,
        "637": 88,
        "638": 9,
        "639": 148,
        "640": 15,
        "641": 43,
        "642": 84,
        "643": 19,
        "644": 173,
        "645": 54,
        "646": 11,
        "647": 30,
        "648": 7,
        "649": 35,
        "650": 170,
        "651": 113,
        "652": 8,
        "653": 19,
        "654": 17,
        "655": 145,
        "656": 6,
        "657": 109,
        "658": 178,
        "659": 95,
        "660": 25,
        "661": 92,
        "662": 86,
        "663": 17,
        "664": 14,
        "665": 101,
        "666": 10,
        "667": 6,
        "668": 104,
        "669": 24,
        "670": 170,
        "671": 342,
        "672": 152,
        "673": 124,
        "674": 12,
        "675": 40,
        "676": 90,
        "677": 187,
        "678": 7,
        "679": 27,
        "680": 129,
        "681": 235,
        "682": 59,
        "683": 31,
        "684": 13,
        "685": 16,
        "686": 4,
        "687": 14,
        "688": 18,
        "689": 65,
        "690": 20,
        "691": 59,
        "692": 19,
        "693": 21,
        "694": 9,
        "695": 79,
        "696": 8,
        "697": 6,
        "698": 98,
        "699": 68,
        "700": 4,
        "701": 236,
        "702": 34,
        "703": 13,
        "704": 22,
        "705": 304,
        "706": 23,
        "707": 37,
        "708": 15,
        "709": 7,
        "710": 25,
        "711": 71,
        "712": 43,
        "713": 191,
        "714": 12,
        "715": 12,
        "716": 33,
        "717": 59,
        "718": 65,
        "719": 5,
        "720": 8,
        "721": 18,
        "722": 120,
        "723": 169,
        "724": 28,
        "725": 98,
        "726": 63,
        "727": 69,
        "728": 10,
        "729": 26,
        "730": 136,
        "731": 18,
        "732": 4,
        "733": 35,
        "734": 30,
        "735": 15,
        "736": 107,
        "737": 144,
        "738": 41,
        "739": 146,
        "740": 104,
        "741": 6,
        "742": 199,
        "743": 12,
        "744": 132,
        "745": 65,
        "746": 20,
        "747": 38,
        "748": 219,
        "749": 8,
        "750": 176,
        "751": 13,
        "752": 2,
        "753": 10,
        "754": 6,
        "755": 9,
        "756": 19,
        "757": 20,
        "758": 7,
        "759": 6,
        "760": 2,
        "761": 46,
        "762": 174,
        "763": 49,
        "764": 114,
        "765": 19,
        "766": 173,
        "767": 80,
        "768": 84,
        "769": 7,
        "770": 58,
        "771": 9,
        "772": 11,
        "773": 143,
        "774": 142,
        "775": 20,
        "776": 18,
        "777": 137,
        "778": 44,
        "779": 105,
        "780": 108,
        "781": 12,
        "782": 216,
        "783": 22,
        "784": 11,
        "785": 11,
        "786": 289,
        "787": 15,
        "788": 61,
        "789": 26,
        "790": 8,
        "791": 10,
        "792": 32,
        "793": 26,
        "794": 23,
        "795": 142,
        "796": 10,
        "797": 25,
        "798": 20,
        "799": 7,
        "800": 7,
        "801": 7,
        "802": 14,
        "803": 15,
        "804": 65,
        "805": 60,
        "806": 18,
        "807": 18,
        "808": 13,
        "809": 100,
        "810": 98,
        "811": 97,
        "812": 11,
        "813": 31,
        "814": 18,
        "815": 14,
        "816": 13,
        "817": 7,
        "818": 22,
        "819": 61,
        "820": 6,
        "821": 15,
        "822": 127,
        "823": 17,
        "824": 12,
        "825": 24,
        "826": 13,
        "827": 143,
        "828": 19,
        "829": 63,
        "830": 39,
        "831": 101,
        "832": 63,
        "833": 35,
        "834": 41,
        "835": 192,
        "836": 6,
        "837": 10,
        "838": 95,
        "839": 110,
        "840": 180,
        "841": 297,
        "842": 5,
        "843": 3,
        "844": 82,
        "845": 13,
        "846": 12,
        "847": 19,
        "848": 17,
        "849": 79,
        "850": 63,
        "851": 9,
        "852": 95,
        "853": 28,
        "854": 11,
        "855": 22,
        "856": 178,
        "857": 9,
        "858": 9,
        "859": 11,
        "860": 172,
        "861": 13,
        "862": 55,
        "863": 14,
        "864": 124,
        "865": 37,
        "866": 28,
        "867": 21,
        "868": 21,
        "869": 168,
        "870": 26,
        "871": 18,
        "872": 46,
        "873": 16,
        "874": 95,
        "875": 23,
        "876": 8,
        "877": 142,
        "878": 16,
        "879": 5,
        "880": 322,
        "881": 113,
        "882": 170,
        "883": 9,
        "884": 12,
        "885": 79,
        "886": 10,
        "887": 166,
        "888": 20,
        "889": 119,
        "890": 8,
        "891": 52,
        "892": 60,
        "893": 71,
        "894": 9,
        "895": 107,
        "896": 29,
        "897": 11,
        "898": 107,
        "899": 16,
        "900": 9,
        "901": 5,
        "902": 28,
        "903": 11,
        "904": 20,
        "905": 12,
        "906": 53,
        "907": 19,
        "908": 12,
        "909": 116,
        "910": 17,
        "911": 12,
        "912": 19,
        "913": 25,
        "914": 71,
        "915": 83,
        "916": 17,
        "917": 212,
        "918": 118,
        "919": 31,
        "920": 10,
        "921": 126,
        "922": 51,
        "923": 55,
        "924": 105,
        "925": 66,
        "926": 47,
        "927": 13,
        "928": 13,
        "929": 5,
        "930": 26,
        "931": 41,
        "932": 56,
        "933": 10,
        "934": 10,
        "935": 25,
        "936": 8,
        "937": 89,
        "938": 12,
        "939": 8,
        "940": 133,
        "941": 90,
        "942": 15,
        "943": 224,
        "944": 30,
        "945": 9,
        "946": 77,
        "947": 123,
        "948": 7,
        "949": 7,
        "950": 12,
        "951": 9,
        "952": 64,
        "953": 10,
        "954": 38,
        "955": 118,
        "956": 27,
        "957": 15,
        "958": 7,
        "959": 242,
        "960": 55,
        "961": 74,
        "962": 7,
        "963": 6,
        "964": 70,
        "965": 10,
        "966": 130,
        "967": 31,
        "968": 81,
        "969": 11,
        "970": 41,
        "971": 35,
        "972": 20,
        "973": 23,
        "974": 11,
        "975": 40,
        "976": 6,
        "977": 7,
        "978": 28,
        "979": 20,
        "980": 14,
        "981": 32,
        "982": 11,
        "983": 13,
        "984": 130,
        "985": 21,
        "986": 74,
        "987": 34,
        "988": 20,
        "989": 18,
        "990": 7,
        "991": 9,
        "992": 57,
        "993": 56,
        "994": 88,
        "995": 90,
        "996": 5,
        "997": 114,
        "998": 79,
        "999": 51,
        "1000": 24,
        "1001": 16,
        "1002": 10,
        "1003": 110,
        "1004": 45,
        "1005": 8,
        "1006": 166,
        "1007": 163,
        "1008": 60,
        "1009": 13,
        "1010": 43,
        "1011": 8,
        "1012": 114,
        "1013": 35,
        "1014": 44,
        "1015": 14,
        "1016": 49,
        "1017": 40,
        "1018": 81,
        "1019": 3,
        "1020": 8,
        "1021": 53,
        "1022": 11,
        "1023": 45,
        "1024": 8,
        "1025": 51,
        "1026": 31,
        "1027": 67,
        "1028": 22,
        "1029": 75,
        "1030": 3,
        "1031": 11,
        "1032": 17,
        "1033": 154,
        "1034": 11,
        "1035": 26,
        "1036": 131,
        "1037": 64,
        "1038": 51,
        "1039": 28,
        "1040": 9,
        "1041": 66,
        "1042": 22,
        "1043": 118,
        "1044": 22,
        "1045": 137,
        "1046": 104,
        "1047": 63,
        "1048": 8,
        "1049": 22,
        "1050": 16,
        "1051": 52,
        "1052": 8,
        "1053": 14,
        "1054": 24,
        "1055": 47,
        "1056": 7,
        "1057": 191,
        "1058": 60,
        "1059": 9,
        "1060": 8,
        "1061": 89,
        "1062": 15,
        "1063": 11,
        "1064": 63,
        "1065": 66,
        "1066": 12,
        "1067": 10,
        "1068": 5,
        "1069": 11,
        "1070": 12,
        "1071": 5,
        "1072": 46,
        "1073": 9,
        "1074": 22,
        "1075": 13,
        "1076": 117,
        "1077": 60,
        "1078": 65,
        "1079": 67,
        "1080": 168,
        "1081": 7,
        "1082": 9,
        "1083": 3,
        "1084": 90,
        "1085": 9,
        "1086": 152,
        "1087": 5,
        "1088": 116,
        "1089": 110,
        "1090": 94,
        "1091": 80,
        "1092": 5,
        "1093": 52,
        "1094": 5,
        "1095": 7,
        "1096": 11,
        "1097": 7,
        "1098": 105,
        "1099": 74,
        "1100": 74,
        "1101": 153,
        "1102": 13,
        "1103": 137,
        "1104": 9,
        "1105": 77,
        "1106": 5,
        "1107": 112,
        "1108": 12,
        "1109": 58,
        "1110": 17,
        "1111": 20,
        "1112": 27,
        "1113": 14,
        "1114": 128,
        "1115": 119,
        "1116": 192,
        "1117": 14,
        "1118": 93,
        "1119": 16,
        "1120": 9,
        "1121": 15,
        "1122": 93,
        "1123": 75,
        "1124": 52,
        "1125": 70,
        "1126": 15,
        "1127": 102,
        "1128": 156,
        "1129": 82,
        "1130": 10,
        "1131": 81,
        "1132": 11,
        "1133": 5,
        "1134": 7,
        "1135": 140,
        "1136": 176,
        "1137": 13,
        "1138": 99,
        "1139": 12,
        "1140": 289,
        "1141": 9,
        "1142": 69,
        "1143": 145,
        "1144": 95,
        "1145": 11,
        "1146": 2,
        "1147": 112,
        "1148": 20,
        "1149": 9,
        "1150": 22,
        "1151": 62,
        "1152": 97,
        "1153": 13,
        "1154": 188,
        "1155": 160,
        "1156": 12,
        "1157": 67,
        "1158": 4,
        "1159": 8,
        "1160": 166,
        "1161": 14,
        "1162": 29,
        "1163": 8,
        "1164": 151,
        "1165": 12,
        "1166": 5,
        "1167": 55,
        "1168": 160,
        "1169": 185,
        "1170": 21,
        "1171": 77,
        "1172": 7,
        "1173": 13,
        "1174": 100,
        "1175": 11,
        "1176": 11,
        "1177": 23,
        "1178": 11,
        "1179": 135,
        "1180": 100,
        "1181": 46,
        "1182": 8,
        "1183": 6,
        "1184": 57,
        "1185": 4,
        "1186": 3,
        "1187": 105,
        "1188": 169,
        "1189": 176,
        "1190": 69,
        "1191": 16,
        "1192": 65,
        "1193": 30,
        "1194": 35,
        "1195": 11,
        "1196": 171,
        "1197": 5,
        "1198": 11,
        "1199": 13,
        "1200": 11,
        "1201": 4,
        "1202": 200,
        "1203": 4,
        "1204": 7,
        "1205": 71,
        "1206": 54,
        "1207": 13,
        "1208": 205,
        "1209": 6,
        "1210": 168,
        "1211": 96,
        "1212": 18,
        "1213": 114,
        "1214": 188,
        "1215": 65,
        "1216": 13,
        "1217": 3,
        "1218": 9,
        "1219": 12,
        "1220": 9,
        "1221": 5,
        "1222": 143,
        "1223": 5,
        "1224": 50,
        "1225": 8,
        "1226": 62,
        "1227": 83,
        "1228": 9,
        "1229": 109,
        "1230": 187,
        "1231": 202,
        "1232": 11,
        "1233": 5,
        "1234": 15,
        "1235": 153,
        "1236": 5,
        "1237": 21,
        "1238": 40,
        "1239": 7,
        "1240": 40,
        "1241": 117,
        "1242": 24,
        "1243": 5,
        "1244": 50,
        "1245": 183,
        "1246": 69,
        "1247": 7,
        "1248": 237,
        "1249": 70,
        "1250": 8,
        "1251": 7,
        "1252": 5,
        "1253": 75,
        "1254": 38,
        "1255": 108,
        "1256": 5,
        "1257": 15,
        "1258": 65,
        "1259": 17,
        "1260": 13,
        "1261": 72,
        "1262": 33,
        "1263": 56,
        "1264": 6,
        "1265": 2,
        "1266": 169,
        "1267": 107,
        "1268": 67,
        "1269": 15,
        "1270": 4,
        "1271": 114,
        "1272": 58,
        "1273": 12,
        "1274": 14,
        "1275": 22,
        "1276": 4,
        "1277": 17,
        "1278": 20,
        "1279": 133,
        "1280": 263,
        "1281": 5,
        "1282": 9,
        "1283": 99,
        "1284": 5,
        "1285": 31,
        "1286": 9,
        "1287": 17,
        "1288": 11,
        "1289": 13,
        "1290": 7,
        "1291": 87,
        "1292": 202,
        "1293": 6,
        "1294": 8,
        "1295": 73,
        "1296": 7,
        "1297": 11,
        "1298": 11,
        "1299": 7,
        "1300": 63,
        "1301": 10,
        "1302": 45,
        "1303": 84,
        "1304": 168,
        "1305": 10,
        "1306": 9,
        "1307": 3,
        "1308": 11,
        "1309": 6,
        "1310": 6,
        "1311": 6,
        "1312": 34,
        "1313": 11,
        "1314": 65,
        "1315": 7,
        "1316": 14,
        "1317": 13,
        "1318": 7,
        "1319": 100,
        "1320": 109,
        "1321": 12,
        "1322": 8,
        "1323": 8,
        "1324": 178,
        "1325": 81,
        "1326": 69,
        "1327": 5,
        "1328": 54,
        "1329": 3,
        "1330": 7,
        "1331": 4,
        "1332": 158,
        "1333": 19,
        "1334": 10,
        "1335": 3,
        "1336": 33,
        "1337": 9,
        "1338": 7,
        "1339": 8,
        "1340": 10,
        "1341": 11,
        "1342": 5,
        "1343": 6,
        "1344": 28,
        "1345": 1,
        "1346": 119,
        "1347": 16,
        "1348": 145,
        "1349": 13,
        "1350": 103,
        "1351": 32,
        "1352": 11,
        "1353": 12,
        "1354": 11,
        "1355": 53,
        "1356": 10,
        "1357": 112,
        "1358": 6,
        "1359": 6,
        "1360": 5,
        "1361": 25,
        "1362": 147,
        "1363": 80,
        "1364": 3,
        "1365": 31,
        "1366": 23,
        "1367": 10,
        "1368": 1,
        "1369": 78,
        "1370": 146,
        "1371": 11,
        "1372": 19,
        "1373": 14,
        "1374": 13,
        "1375": 12,
        "1376": 3,
        "1377": 31,
        "1378": 204,
        "1379": 96,
        "1380": 8,
        "1381": 7,
        "1382": 117,
        "1383": 4,
        "1384": 4,
        "1385": 12,
        "1386": 60,
        "1387": 92,
        "1388": 4,
        "1389": 7,
        "1390": 9,
        "1391": 10,
        "1392": 15,
        "1393": 36,
        "1394": 9,
        "1395": 24,
        "1396": 44,
        "1397": 26,
        "1398": 10,
        "1399": 3,
        "1400": 155,
        "1401": 2,
        "1402": 12,
        "1403": 4,
        "1404": 4,
        "1405": 80,
        "1406": 20,
        "1407": 6,
        "1408": 97,
        "1409": 19,
        "1410": 150,
        "1411": 10,
        "1412": 1,
        "1413": 6,
        "1414": 4,
        "1415": 19,
        "1416": 7,
        "1417": 26,
        "1418": 35,
        "1419": 59,
        "1420": 15,
        "1421": 5,
        "1422": 11,
        "1423": 193,
        "1424": 19,
        "1425": 2,
        "1426": 90,
        "1427": 17,
        "1428": 1,
        "1429": 35,
        "1430": 120,
        "1431": 6,
        "1432": 88,
        "1433": 5,
        "1434": 82,
        "1435": 34,
        "1436": 31,
        "1437": 14,
        "1438": 5,
        "1439": 105,
        "1440": 3,
        "1441": 6,
        "1442": 135,
        "1443": 115,
        "1444": 31,
        "1445": 6,
        "1446": 6,
        "1447": 63,
        "1448": 6,
        "1449": 111,
        "1450": 63,
        "1451": 5,
        "1452": 129,
        "1453": 6,
        "1454": 3,
        "1455": 170,
        "1456": 3,
        "1457": 12,
        "1458": 100,
        "1459": 9,
        "1460": 37,
        "1461": 101,
        "1462": 7,
        "1463": 5,
        "1464": 3,
        "1465": 1,
        "1466": 4,
        "1467": 12,
        "1468": 4,
        "1469": 4,
        "1470": 1,
        "1471": 15,
        "1472": 75,
        "1473": 145,
        "1474": 55,
        "1475": 40,
        "1476": 10,
        "1477": 7,
        "1478": 7,
        "1479": 71,
        "1480": 186,
        "1481": 11,
        "1482": 81,
        "1483": 11,
        "1484": 32,
        "1485": 20,
        "1486": 75,
        "1487": 3,
        "1488": 8,
        "1489": 32,
        "1490": 18,
        "1491": 9,
        "1492": 18,
        "1493": 17,
        "1494": 121,
        "1495": 12,
        "1496": 8,
        "1497": 13,
        "1498": 9,
        "1499": 5,
        "1500": 9,
        "1501": 99,
        "1502": 16,
        "1503": 5,
        "1504": 19,
        "1505": 6,
        "1506": 75,
        "1507": 43,
        "1508": 15,
        "1509": 15,
        "1510": 7,
        "1511": 11,
        "1512": 17,
        "1513": 9,
        "1514": 10,
        "1515": 14,
        "1516": 58,
        "1517": 6,
        "1518": 14,
        "1519": 158,
        "1520": 8,
        "1521": 7,
        "1522": 14,
        "1523": 13,
        "1524": 273,
        "1525": 115,
        "1526": 11,
        "1527": 7,
        "1528": 9,
        "1529": 15,
        "1530": 9,
        "1531": 135,
        "1532": 26,
        "1533": 4,
        "1534": 30,
        "1535": 82,
        "1536": 92,
        "1537": 9,
        "1538": 19,
        "1539": 3,
        "1540": 11,
        "1541": 159,
        "1542": 6,
        "1543": 13,
        "1544": 21,
        "1545": 8,
        "1546": 14,
        "1547": 10,
        "1548": 12,
        "1549": 11,
        "1550": 5,
        "1551": 6,
        "1552": 129,
        "1553": 40,
        "1554": 4,
        "1555": 5,
        "1556": 12,
        "1557": 18,
        "1558": 8,
        "1559": 4,
        "1560": 8,
        "1561": 9,
        "1562": 23,
        "1563": 2,
        "1564": 32,
        "1565": 17,
        "1566": 122,
        "1567": 10,
        "1568": 55,
        "1569": 167,
        "1570": 9,
        "1571": 26,
        "1572": 17,
        "1573": 108,
        "1574": 10,
        "1575": 11,
        "1576": 39,
        "1577": 14,
        "1578": 2,
        "1579": 69,
        "1580": 15,
        "1581": 7,
        "1582": 3,
        "1583": 25,
        "1584": 28,
        "1585": 9,
        "1586": 5,
        "1587": 31,
        "1588": 7,
        "1589": 14,
        "1590": 4,
        "1591": 18,
        "1592": 123,
        "1593": 30,
        "1594": 14,
        "1595": 13,
        "1596": 90,
        "1597": 33,
        "1598": 8,
        "1599": 13,
        "1600": 142,
        "1601": 10,
        "1602": 7,
        "1603": 12,
        "1604": 53,
        "1605": 7,
        "1606": 8,
        "1607": 9,
        "1608": 94,
        "1609": 16,
        "1610": 158,
        "1611": 20,
        "1612": 19,
        "1613": 9,
        "1614": 9,
        "1615": 5,
        "1616": 32,
        "1617": 33,
        "1618": 8,
        "1619": 5,
        "1620": 14,
        "1621": 8,
        "1622": 5,
        "1623": 7,
        "1624": 13,
        "1625": 10,
        "1626": 7,
        "1627": 9,
        "1628": 34,
        "1629": 12,
        "1630": 6,
        "1631": 8,
        "1632": 143,
        "1633": 11,
        "1634": 5,
        "1635": 13,
        "1636": 11,
        "1637": 79,
        "1638": 4,
        "1639": 22,
        "1640": 169,
        "1641": 115,
        "1642": 10,
        "1643": 7,
        "1644": 134,
        "1645": 8,
        "1646": 3,
        "1647": 6,
        "1648": 20,
        "1649": 5,
        "1650": 16,
        "1651": 9,
        "1652": 13,
        "1653": 5,
        "1654": 22,
        "1655": 14,
        "1656": 8,
        "1657": 4,
        "1658": 70,
        "1659": 15,
        "1660": 51,
        "1661": 124,
        "1662": 14,
        "1663": 4,
        "1664": 4,
        "1665": 106,
        "1666": 18,
        "1667": 5,
        "1668": 16,
        "1669": 6,
        "1670": 15,
        "1671": 5,
        "1672": 193,
        "1673": 87,
        "1674": 17,
        "1675": 4,
        "1676": 18,
        "1677": 2,
        "1678": 13,
        "1679": 98,
        "1680": 11,
        "1681": 102,
        "1682": 18,
        "1683": 7,
        "1684": 9,
        "1685": 99,
        "1686": 10,
        "1687": 38,
        "1688": 2,
        "1689": 19,
        "1690": 19,
        "1691": 24,
        "1692": 17,
        "1693": 11,
        "1694": 80,
        "1695": 9,
        "1696": 8,
        "1697": 18,
        "1698": 11,
        "1699": 72,
        "1700": 22,
        "1701": 12,
        "1702": 7,
        "1703": 5,
        "1704": 48,
        "1705": 15,
        "1706": 21,
        "1707": 27,
        "1708": 11,
        "1709": 119,
        "1710": 7,
        "1711": 9,
        "1712": 17,
        "1713": 19,
        "1714": 13,
        "1715": 12,
        "1716": 15,
        "1717": 12,
        "1718": 9,
        "1719": 80,
        "1720": 29,
        "1721": 9,
        "1722": 27,
        "1723": 89,
        "1724": 75,
        "1725": 12,
        "1726": 7,
        "1727": 4,
        "1728": 20,
        "1729": 13,
        "1730": 4,
        "1731": 13,
        "1732": 9,
        "1733": 7,
        "1734": 3,
        "1735": 23,
        "1736": 10,
        "1737": 60,
        "1738": 88,
        "1739": 15,
        "1740": 7,
        "1741": 6,
        "1742": 12,
        "1743": 58,
        "1744": 8,
        "1745": 4,
        "1746": 12,
        "1747": 11,
        "1748": 10,
        "1749": 13,
        "1750": 52,
        "1751": 7,
        "1752": 10,
        "1753": 87,
        "1754": 131,
        "1755": 2,
        "1756": 46,
        "1757": 23,
        "1758": 14,
        "1759": 105,
        "1760": 51,
        "1761": 13,
        "1762": 12,
        "1763": 17,
        "1764": 35,
        "1765": 23,
        "1766": 80,
        "1767": 110,
        "1768": 103,
        "1769": 15,
        "1770": 10,
        "1771": 9,
        "1772": 11,
        "1773": 5,
        "1774": 6,
        "1775": 13,
        "1776": 18,
        "1777": 98,
        "1778": 7,
        "1779": 89,
        "1780": 185,
        "1781": 82,
        "1782": 162,
        "1783": 12,
        "1784": 102,
        "1785": 26,
        "1786": 16,
        "1787": 16,
        "1788": 9,
        "1789": 165,
        "1790": 81,
        "1791": 8,
        "1792": 23,
        "1793": 10,
        "1794": 17,
        "1795": 6,
        "1796": 2,
        "1797": 28,
        "1798": 11,
        "1799": 19,
        "1800": 178,
        "1801": 162,
        "1802": 159,
        "1803": 8,
        "1804": 101,
        "1805": 104,
        "1806": 10,
        "1807": 5,
        "1808": 4,
        "1809": 13,
        "1810": 13,
        "1811": 7,
        "1812": 15,
        "1813": 11,
        "1814": 88,
        "1815": 21,
        "1816": 14,
        "1817": 9,
        "1818": 56,
        "1819": 5,
        "1820": 76,
        "1821": 15,
        "1822": 6,
        "1823": 172,
        "1824": 10,
        "1825": 6,
        "1826": 87,
        "1827": 5,
        "1828": 19,
        "1829": 7,
        "1830": 9,
        "1831": 6,
        "1832": 13,
        "1833": 13,
        "1834": 7,
        "1835": 13,
        "1836": 12,
        "1837": 42,
        "1838": 145,
        "1839": 7,
        "1840": 13,
        "1841": 60,
        "1842": 23,
        "1843": 56,
        "1844": 8,
        "1845": 12,
        "1846": 9,
        "1847": 12,
        "1848": 21,
        "1849": 71,
        "1850": 9,
        "1851": 16,
        "1852": 124,
        "1853": 11,
        "1854": 101,
        "1855": 193,
        "1856": 112,
        "1857": 7,
        "1858": 18,
        "1859": 158,
        "1860": 13,
        "1861": 9,
        "1862": 27,
        "1863": 26,
        "1864": 4,
        "1865": 20,
        "1866": 19,
        "1867": 4,
        "1868": 18,
        "1869": 16,
        "1870": 11,
        "1871": 16,
        "1872": 16,
        "1873": 29,
        "1874": 13,
        "1875": 24,
        "1876": 26,
        "1877": 18,
        "1878": 18,
        "1879": 31,
        "1880": 4,
        "1881": 15,
        "1882": 9,
        "1883": 15,
        "1884": 15,
        "1885": 16,
        "1886": 11,
        "1887": 13,
        "1888": 13,
        "1889": 25,
        "1890": 26,
        "1891": 25,
        "1892": 20,
        "1893": 24,
        "1894": 14,
        "1895": 19,
        "1896": 18,
        "1897": 89,
        "1898": 10,
        "1899": 81,
        "1900": 11,
        "1901": 22,
        "1902": 41,
        "1903": 16,
        "1904": 10,
        "1905": 14,
        "1906": 43,
        "1907": 86,
        "1908": 14,
        "1909": 9,
        "1910": 14,
        "1911": 15,
        "1912": 24,
        "1913": 20,
        "1914": 17,
        "1915": 34,
        "1916": 11,
        "1917": 16,
        "1918": 30,
        "1919": 12,
        "1920": 4,
        "1921": 22,
        "1922": 15,
        "1923": 5,
        "1924": 12,
        "1925": 17,
        "1926": 31,
        "1927": 32,
        "1928": 6,
        "1929": 26,
        "1930": 14,
        "1931": 12,
        "1932": 8,
        "1933": 10,
        "1934": 10,
        "1935": 8,
        "1936": 5,
        "1937": 197,
        "1938": 21,
        "1939": 13,
        "1940": 6,
        "1941": 10,
        "1942": 24,
        "1943": 16,
        "1944": 9,
        "1945": 51,
        "1946": 10,
        "1947": 12,
        "1948": 18,
        "1949": 21,
        "1950": 16,
        "1951": 119,
        "1952": 7,
        "1953": 20,
        "1954": 5,
        "1955": 7,
        "1956": 13,
        "1957": 18,
        "1958": 92,
        "1959": 21,
        "1960": 15,
        "1961": 34,
        "1962": 13,
        "1963": 14,
        "1964": 38,
        "1965": 94,
        "1966": 28,
        "1967": 33,
        "1968": 84,
        "1969": 10,
        "1970": 23,
        "1971": 42,
        "1972": 30,
        "1973": 49,
        "1974": 8,
        "1975": 24,
        "1976": 66,
        "1977": 76,
        "1978": 21,
        "1979": 7,
        "1980": 21,
        "1981": 19,
        "1982": 61,
        "1983": 13,
        "1984": 19,
        "1985": 18,
        "1986": 12,
        "1987": 15,
        "1988": 6,
        "1989": 21,
        "1990": 21,
        "1991": 32,
        "1992": 11,
        "1993": 14,
        "1994": 14,
        "1995": 22,
        "1996": 22,
        "1997": 35,
        "1998": 7,
        "1999": 22,
        "2000": 5,
        "2001": 55,
        "2002": 44,
        "2003": 161,
        "2004": 13,
        "2005": 16,
        "2006": 11,
        "2007": 11,
        "2008": 187,
        "2009": 20,
        "2010": 13,
        "2011": 14,
        "2012": 9,
        "2013": 4,
        "2014": 13,
        "2015": 15,
        "2016": 4,
        "2017": 30,
        "2018": 20,
        "2019": 99,
        "2020": 15,
        "2021": 15,
        "2022": 152,
        "2023": 99,
        "2024": 104,
        "2025": 15,
        "2026": 101,
        "2027": 138,
        "2028": 27,
        "2029": 12,
        "2030": 17,
        "2031": 10,
        "2032": 25,
        "2033": 56,
        "2034": 29,
        "2035": 10,
        "2036": 30,
        "2037": 7,
        "2038": 26,
        "2039": 14,
        "2040": 22,
        "2041": 15,
        "2042": 25,
        "2043": 16,
        "2044": 19,
        "2045": 11,
        "2046": 24,
        "2047": 23,
        "2048": 9,
        "2049": 16,
        "2050": 31,
        "2051": 17,
        "2052": 18,
        "2053": 25,
        "2054": 27,
        "2055": 9,
        "2056": 18,
        "2057": 17,
        "2058": 13,
        "2059": 18,
        "2060": 14,
        "2061": 10,
        "2062": 257,
        "2063": 36,
        "2064": 19,
        "2065": 25,
        "2066": 21,
        "2067": 9,
        "2068": 11,
        "2069": 12,
        "2070": 158,
        "2071": 12,
        "2072": 13,
        "2073": 32,
        "2074": 21,
        "2075": 11,
        "2076": 22,
        "2077": 15,
        "2078": 49,
        "2079": 15,
        "2080": 15,
        "2081": 10,
        "2082": 20,
        "2083": 15,
        "2084": 9,
        "2085": 31,
        "2086": 19,
        "2087": 13,
        "2088": 19,
        "2089": 11,
        "2090": 159,
        "2091": 16,
        "2092": 12,
        "2093": 13,
        "2094": 25,
        "2095": 239,
        "2096": 8,
        "2097": 25,
        "2098": 109,
        "2099": 23,
        "2100": 13,
        "2101": 36,
        "2102": 13,
        "2103": 19,
        "2104": 28,
        "2105": 24,
        "2106": 12,
        "2107": 23,
        "2108": 11,
        "2109": 12,
        "2110": 28,
        "2111": 26,
        "2112": 14,
        "2113": 15,
        "2114": 17,
        "2115": 26,
        "2116": 17,
        "2117": 22,
        "2118": 19,
        "2119": 11,
        "2120": 20,
        "2121": 133,
        "2122": 24,
        "2123": 17,
        "2124": 14,
        "2125": 25,
        "2126": 15,
        "2127": 25,
        "2128": 22,
        "2129": 22,
        "2130": 71,
        "2131": 22,
        "2132": 29,
        "2133": 11,
        "2134": 8,
        "2135": 123,
        "2136": 17,
        "2137": 9,
        "2138": 17,
        "2139": 12,
        "2140": 17,
        "2141": 16,
        "2142": 24,
        "2143": 18,
        "2144": 13,
        "2145": 9,
        "2146": 9,
        "2147": 8,
        "2148": 18,
        "2149": 9,
        "2150": 12,
        "2151": 10,
        "2152": 13,
        "2153": 14,
        "2154": 12,
        "2155": 6,
        "2156": 7,
        "2157": 15,
        "2158": 21,
        "2159": 7,
        "2160": 19,
        "2161": 34,
        "2162": 23,
        "2163": 17,
        "2164": 12,
        "2165": 11,
        "2166": 11,
        "2167": 16,
        "2168": 13,
        "2169": 26,
        "2170": 12,
        "2171": 11,
        "2172": 16,
        "2173": 25,
        "2174": 12,
        "2175": 16,
        "2176": 8,
        "2177": 22,
        "2178": 13,
        "2179": 31,
        "2180": 14,
        "2181": 16,
        "2182": 22,
        "2183": 11,
        "2184": 29,
        "2185": 19,
        "2186": 8,
        "2187": 6,
        "2188": 10,
        "2189": 16,
        "2190": 21,
        "2191": 17,
        "2192": 8,
        "2193": 21,
        "2194": 25,
        "2195": 24,
        "2196": 15,
        "2197": 25,
        "2198": 9,
        "2199": 19,
        "2200": 13,
        "2201": 10,
        "2202": 38,
        "2203": 18,
        "2204": 11,
        "2205": 21,
        "2206": 15,
        "2207": 129,
        "2208": 12,
        "2209": 11,
        "2210": 15,
        "2211": 147,
        "2212": 11,
        "2213": 21,
        "2214": 141,
        "2215": 24,
        "2216": 32,
        "2217": 90,
        "2218": 17,
        "2219": 10,
        "2220": 34,
        "2221": 141,
        "2222": 16,
        "2223": 6,
        "2224": 16,
        "2225": 23,
        "2226": 14,
        "2227": 104,
        "2228": 26,
        "2229": 7,
        "2230": 14,
        "2231": 40,
        "2232": 18,
        "2233": 14,
        "2234": 87,
        "2235": 16,
        "2236": 21,
        "2237": 14,
        "2238": 20,
        "2239": 20,
        "2240": 24,
        "2241": 13,
        "2242": 20,
        "2243": 9,
        "2244": 184,
        "2245": 19,
        "2246": 16,
        "2247": 34,
        "2248": 9,
        "2249": 21,
        "2250": 23,
        "2251": 43,
        "2252": 19,
        "2253": 40,
        "2254": 19,
        "2255": 21,
        "2256": 9,
        "2257": 13,
        "2258": 19,
        "2259": 18,
        "2260": 14,
        "2261": 38,
        "2262": 15,
        "2263": 13,
        "2264": 115,
        "2265": 13,
        "2266": 20,
        "2267": 25,
        "2268": 37,
        "2269": 14,
        "2270": 21,
        "2271": 22,
        "2272": 16,
        "2273": 136,
        "2274": 15,
        "2275": 21,
        "2276": 12,
        "2277": 16,
        "2278": 31,
        "2279": 13,
        "2280": 18,
        "2281": 26,
        "2282": 11,
        "2283": 9,
        "2284": 21,
        "2285": 23,
        "2286": 12,
        "2287": 23,
        "2288": 29,
        "2289": 23,
        "2290": 28,
        "2291": 9,
        "2292": 22,
        "2293": 32,
        "2294": 14,
        "2295": 11,
        "2296": 28,
        "2297": 23,
        "2298": 21,
        "2299": 16,
        "2300": 16,
        "2301": 36,
        "2302": 21,
        "2303": 183,
        "2304": 12,
        "2305": 23,
        "2306": 20,
        "2307": 25,
        "2308": 19,
        "2309": 29,
        "2310": 14,
        "2311": 11,
        "2312": 17,
        "2313": 32,
        "2314": 18,
        "2315": 23,
        "2316": 17,
        "2317": 31,
        "2318": 5,
        "2319": 22,
        "2320": 33,
        "2321": 15,
        "2322": 14,
        "2323": 45,
        "2324": 14,
        "2325": 58,
        "2326": 27,
        "2327": 11,
        "2328": 26,
        "2329": 35,
        "2330": 10,
        "2331": 24,
        "2332": 34,
        "2333": 13,
        "2334": 21,
        "2335": 23,
        "2336": 27,
        "2337": 27,
        "2338": 12,
        "2339": 17,
        "2340": 31,
        "2341": 24,
        "2342": 15,
        "2343": 23,
        "2344": 29,
        "2345": 24,
        "2346": 10,
        "2347": 28,
        "2348": 44,
        "2349": 17,
        "2350": 33,
        "2351": 56,
        "2352": 11,
        "2353": 16,
        "2354": 13,
        "2355": 64,
        "2356": 20,
        "2357": 11,
        "2358": 16,
        "2359": 80,
        "2360": 13,
        "2361": 26,
        "2362": 30,
        "2363": 24,
        "2364": 17,
        "2365": 14,
        "2366": 18,
        "2367": 56,
        "2368": 15,
        "2369": 41,
        "2370": 25,
        "2371": 17,
        "2372": 48,
        "2373": 32,
        "2374": 17,
        "2375": 13,
        "2376": 29,
        "2377": 27,
        "2378": 41,
        "2379": 18,
        "2380": 97,
        "2381": 47,
        "2382": 31,
        "2383": 12,
        "2384": 19,
        "2385": 57,
        "2386": 12,
        "2387": 64,
        "2388": 40,
        "2389": 27,
        "2390": 17,
        "2391": 39,
        "2392": 69,
        "2393": 44,
        "2394": 19,
        "2395": 6,
        "2396": 43,
        "2397": 22,
        "2398": 16,
        "2399": 19,
        "2400": 35,
        "2401": 17,
        "2402": 11,
        "2403": 38,
        "2404": 16,
        "2405": 15,
        "2406": 12,
        "2407": 31,
        "2408": 22,
        "2409": 13,
        "2410": 11,
        "2411": 25,
        "2412": 33,
        "2413": 18,
        "2414": 15,
        "2415": 42,
        "2416": 43,
        "2417": 24,
        "2418": 9,
        "2419": 13,
        "2420": 11,
        "2421": 35,
        "2422": 13,
        "2423": 19,
        "2424": 23,
        "2425": 14,
        "2426": 12
    }
}